[
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_ConEdAccountLevelServiceClassificationDiscrepancy",
      "definition": "CREATE   PROCEDURE [ConEd].[Archive_usp_ConEdAccountLevelServiceClassificationDiscrepancy]\r\nAS\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Automate the account level service classification discrepancy for con edison.\r\n--*\r\n--*\t\t\t1. Identify current period Account Level Service Classification Discrepancies\r\n--\t\t\t2. Get the BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\t\t\t3. Update account with new UtilityTariffRateInformation\r\n--\t\t\t4. Update AccountLevelServiceClassificationDiscrepancy with AccountIsUpdated = 'Y' for all of the accounts that were changed.\r\n--\t\t\t5. Drop temp table #MinFromDate if it exists and recreate it\r\n--\t\t\t6. Update account with new Tariff Effective Date from upload data based upon the minimum from date of the billing\r\n--\t\t\t7. A view for common usage.\r\n--*               \r\n--* Exec:       \t\t[ConEd].[usp_ConEdAccountLevelServiceClassificationDiscrepancy]\r\n--*\r\n--* Parameter(s):         @Status int output\r\n--*\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   08/16/2011\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 08/16/2011 PAH  First Version \r\n--**************************************************************************************\r\n\r\n--**************************************************************************************\r\n--Declare Variables\r\n--**************************************************************************************\r\n--\r\ndeclare @CurrentInvoiceAccountGroup int = 2\r\ndeclare @UtilityCompanySeqid int = 9\r\ndeclare @BillingPeriod varchar(6)\r\n\r\n--**************************************************************************************\r\n--Main Process\r\n--**************************************************************************************\r\nBEGIN\r\n--\r\n--\t\t\t1. Identify current period Account Level Service Classification Discrepancies\r\n--\r\ninsert  into  Billing.AccountLevelServiceClassificationDiscrepancy\r\n\t\t(CurrentInvoiceAccountGroup,UtilityTariffRateInformationSeqid, BillingPeriod, CurrentAccountNumber, AccountSeqid, \r\n\t\tUtilityServiceAddress, UtilityCompanyShortDesc, AgencyCodeOEC, AgencyShortDesc, OecFacilityNumber, FacilityName, Address1, \r\n\t\tBudgetRateClassDescription, Description, ShortDesc, AccountStatus, AccountStatusCodePeriod, IsTimeOfDayAccount, DeliveryTariffRate, TariffCode, \r\n\t\tUtilityCompanySeqid, IsTOD, AuthenticatedUserID, Notes, DateAdded, LastUpdate)\r\n--\r\nSELECT distinct\t\t\r\n\t\tBilling.Account.CurrentInvoiceAccountGroup,Billing.Account.UtilityTariffRateInformationSeqid,ConEd.UploadConEdisonAccount.BillingPeriod,   Billing.Account.CurrentAccountNumber, Billing.Account.AccountSeqid, Billing.Account.UtilityServiceAddress, Billing.UtilityCompany.ShortDesc AS UtilityCompanyShortDesc, \r\n\t\tBilling.AgencyDivision.AgencyCodeOEC, Billing.AgencyDivision.AgencyShortDesc, Billing.Facility.OecFacilityNumber, Billing.Facility.FacilityName, \r\n\t\tBilling.Facility.Address1, Billing.UtilityTariffRateInformation.BudgetRateClassDescription, Billing.UtilityTariffRateInformation.Description, \r\n\t\tBilling.UtilityTariffRateInformation.ShortDesc, Billing.Account.AccountStatus, Billing.Account.AccountStatusCodePeriod, Billing.Account.IsTimeOfDayAccount, \r\n\t\tBilling.UtilityTariffRateInformation.DeliveryTariffRate, ConEd.UploadConEdisonAccount.TariffCode, 9 AS UtilityCompanySeqid, 'N' AS IsTOD,\r\n\t\t1,null,getdate(),getdate()\r\nFROM \r\n\t\tBilling.Account INNER JOIN\r\n\t\tConEd.UploadConEdisonAccount ON Billing.Account.CurrentAccountNumber = ConEd.UploadConEdisonAccount.AccountNumber INNER JOIN\r\n\t\tBilling.UtilityTariffRateInformation ON \r\n\t\tBilling.UtilityTariffRateInformation.UtilityTariffRateInformationSeqid = Billing.Account.UtilityTariffRateInformationSeqid AND \r\n\t\tConEd.UploadConEdisonAccount.TariffCode <> Billing.UtilityTariffRateInformation.DeliveryTariffRate INNER JOIN\r\n\t\tBilling.AgencyDivision ON Billing.Account.AgencyAccount = Billing.AgencyDivision.AgencyDivisionSeqid INNER JOIN\r\n\t\tBilling.Facility ON Billing.Account.FacilityAccount = Billing.Facility.FacilitySeqid INNER JOIN\r\n\t\tBilling.UtilityCompany ON Billing.Account.UtilityAccountProvider = Billing.UtilityCompany.UtilityCompanySeqid AND \r\n\t\tBilling.UtilityTariffRateInformation.UtilityCompanyTariff = Billing.UtilityCompany.UtilityCompanySeqid AND \r\n\t\tBilling.UtilityTariffRateInformation.UtilityCompanyTariff = Billing.UtilityCompany.UtilityCompanySeqid\r\nWHERE \r\n\t\t(Billing.Account.CurrentInvoiceAccountGroup = 2) AND \r\n\t\t(Billing.Account.AccountStatus NOT IN ('AX'))\r\n--\r\n--\t\t\t2. Get the BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\r\nSELECT  top 1   @BillingPeriod = BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\r\n--\t\t\t3. Update account with new UtilityTariffRateInformation\r\n--\r\nUPDATE    Billing.Account\r\nSET              \r\n\t\tUtilityTariffRateInformationSeqid =Billing.UtilityTariffRateInformation.UtilityTariffRateInformationSeqid, \r\n\t\tIsTimeOfDayAccount =Billing.UtilityTariffRateInformation.IsTod, \r\n\t\tDeliveryTariffRate =Billing.UtilityTariffRateInformation.DeliveryTariffRate, \r\n\t\tCommodityTariffRate =Billing.UtilityTariffRateInformation.DeliveryTariffRate, \r\n\t\tAccountStatusCodePeriod = @BillingPeriod, \r\n\t\tFireAuditTrigger = 'Y', \r\n\t\tNotes = 'Automated Service Classification update', \r\n\t\tAuthenticatedUserID = 1, \r\n\t\tLastUpdate = GETDATE()\r\nFROM \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy INNER JOIN\r\n\t\tBilling.Account ON Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n\t\tBilling.UtilityTariffRateInformation ON \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.TariffCode = Billing.UtilityTariffRateInformation.DeliveryTariffRate AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.UtilityCompanySeqid = Billing.UtilityTariffRateInformation.UtilityCompanyTariff AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.IsTOD = Billing.UtilityTariffRateInformation.IsTod\r\nWHERE \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod) AND \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup) and\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.AccountIsUpdated = 'N')\r\n--\r\n--\t\t\t4. Update AccountLevelServiceClassificationDiscrepancy with AccountIsUpdated = 'Y' for all of the accounts that were changed.\r\n--\r\n\t\r\nupdate\tBilling.AccountLevelServiceClassificationDiscrepancy\r\nSET              \r\n\t\tAccountIsUpdated = 'Y',\r\n\t\tDeliveryTariffRateExistsInEC3 = 'Y'\r\nFROM \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy INNER JOIN\r\n\t\tBilling.Account ON Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n\t\tBilling.UtilityTariffRateInformation ON \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.TariffCode = Billing.UtilityTariffRateInformation.DeliveryTariffRate AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.UtilityCompanySeqid = Billing.UtilityTariffRateInformation.UtilityCompanyTariff AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.IsTOD = Billing.UtilityTariffRateInformation.IsTod\r\nWHERE \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod) AND \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup) and\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.AccountIsUpdated = 'N')\r\n--\r\n--\t\t\t5. Drop temp table #MinFromDate if it exists and recreate it\r\n--\r\nIF OBJECT_ID('tempdb..#MinFromDate') IS NOT NULL DROP TABLE #MinFromDate\r\n--\r\nSELECT  \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.BillingPeriod,   \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber, \r\n\t\tConEd.UploadConEdisonAccount.AccountNumber,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.AccountSeqid,\r\n\t\tmin(ConEd.UploadConEdisonAccount.FromDate) as DeliveryTariffEffectiveDate,\r\n\t\tAccountIsUpdated,\r\n\t\tDeliveryTariffRateExistsInEC3\r\n\t\r\ninto\t#MinFromDate\r\nFROM \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy INNER JOIN\r\n\t\tConEd.UploadConEdisonAccount ON \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = ConEd.UploadConEdisonAccount.BillingPeriod AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber = ConEd.UploadConEdisonAccount.AccountNumber\r\nwhere\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod) and\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup)\t\t\r\ngroup by \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.BillingPeriod,   \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber, \r\n\t\tConEd.UploadConEdisonAccount.AccountNumber,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.AccountSeqid,\r\n\t\tAccountIsUpdated,\r\n\t\tDeliveryTariffRateExistsInEC3\r\n--\r\n--\t\t\t6. Update account with new Tariff Effective Date from upload data based upon the minimum from date of the billing\r\n--\r\nUPDATE    Billing.Account\r\nSET              \r\n\t\tDeliveryTariffEffectiveDate = [#MinFromDate].DeliveryTariffEffectiveDate, \r\n\t\tCommodityTariffEffectiveDate =[#MinFromDate].DeliveryTariffEffectiveDate\r\nFROM \r\n\t\t[#MinFromDate] INNER JOIN\r\n\t\tBilling.Account ON [#MinFromDate].AccountSeqid = Billing.Account.AccountSeqid\r\nWHERE \r\n\t\t([#MinFromDate].AccountIsUpdated = 'Y') AND \r\n\t\t([#MinFromDate].DeliveryTariffRateExistsInEC3 = 'Y')\r\n--\r\n--\t\t\t7. Common view.\r\n--\r\nSELECT * \r\nFROM Common.uvw_AccountLevelServiceClassificationDiscrepancyCorrectionFromUploadData vw\r\nWHERE \r\n\t\t(vw.BillingPeriod = @BillingPeriod) AND \r\n\t\t(vw.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup)\r\n--\r\nEND",
      "created": "2025-06-10 21:41:26.383000",
      "last_altered": "2025-06-10 21:41:26.383000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_ConEdAccountLevelServiceClassificationDiscrepancy",
      "explanation": "#### 1. Overview\n\nThe stored procedure `Archive_usp_ConEdAccountLevelServiceClassificationDiscrepancy` is designed to automate the process of identifying and updating discrepancies in account-level service classifications for Con Edison. It performs several tasks, including identifying discrepancies, updating account information with new tariff rates, and managing temporary data for further updates. The procedure also provides a view for common usage, which likely serves as a reporting or verification tool.\n\n#### 2. Complexity Level: Medium\n\nThe complexity level of this stored procedure is medium. It involves multiple steps, including data insertion, updates, and temporary table management. The procedure interacts with several tables and requires careful handling of data relationships and conditions. However, it does not involve complex calculations or recursive logic, which keeps it from being classified as high complexity.\n\n#### 3. Input Parameters\n\n- The procedure does not explicitly take any input parameters when executed. However, it uses internal variables such as `@CurrentInvoiceAccountGroup`, `@UtilityCompanySeqid`, and `@BillingPeriod` to control its logic flow.\n\n#### 4. Business Logic and Workflow\n\n1. **Identify Discrepancies**: The procedure starts by inserting records into `Billing.AccountLevelServiceClassificationDiscrepancy` for accounts with discrepancies between the uploaded tariff codes and existing delivery tariff rates.\n\n2. **Retrieve Billing Period**: It retrieves the billing period from `ConEd.UploadConEdisonAccount` to use in subsequent updates.\n\n3. **Update Accounts**: Accounts with discrepancies are updated with new tariff rate information, and their status is marked as updated.\n\n4. **Mark Discrepancies as Updated**: The procedure updates the `AccountLevelServiceClassificationDiscrepancy` table to mark records as updated.\n\n5. **Manage Temporary Data**: A temporary table `#MinFromDate` is created to store the minimum \"from date\" for each account, which is used to update the effective date of tariffs.\n\n6. **Update Tariff Effective Dates**: Accounts are updated with new tariff effective dates based on the data in `#MinFromDate`.\n\n7. **Common View**: Finally, the procedure selects data from a common view for reporting or further processing.\n\n#### 5. Performance Considerations\n\n- **Indexing**: Ensure that the tables involved, especially those with joins and where clauses, are properly indexed to optimize query performance.\n- **Temporary Table Usage**: The use of a temporary table (`#MinFromDate`) can be resource-intensive if the dataset is large. Consider using table variables or optimizing the query to reduce the dataset size.\n- **Concurrency**: The procedure updates multiple tables, which could lead to locking issues in a high-concurrency environment. Consider using transaction isolation levels or locking hints if necessary.\n\n#### 6. Potential Issues or Risks\n\n- **Data Integrity**: The procedure assumes that the data in `ConEd.UploadConEdisonAccount` is accurate and complete. Any discrepancies or missing data could lead to incorrect updates.\n- **Error Handling**: The procedure lacks explicit error handling. Consider adding try-catch blocks to manage exceptions and ensure rollback in case of failures.\n- **Scalability**: As the volume of data grows, the performance of the procedure may degrade, especially with the use of temporary tables and multiple joins.\n- **Hardcoded Values**: The procedure uses hardcoded values (e.g., `@CurrentInvoiceAccountGroup = 2`, `@UtilityCompanySeqid = 9`), which may need to be parameterized for flexibility and reuse in different contexts.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3233,
      "api_response_id": "chatcmpl-ByejudGQXoFYVPRIrEwiJxX0mNCtL"
    },
    "analysis_timestamp": "2025-07-29 09:34:08"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_CreateConEdisonLinkedServers",
      "definition": "CREATE  PROCEDURE [ConEd].[Archive_usp_CreateConEdisonLinkedServers] (@Status int output)\r\nAS\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Not Used\r\n---*               \r\n--* Exec:       \t\tusp_ProcessConEdisonRawData\r\n--*\r\n--* Parameter(s):         @Status int output\r\n--*\r\n--*\r\n--* Database:     OEC\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   5/05/2006\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 10/26/2005 PAH  First Version \r\n--**************************************************************************************\r\n\r\n--**************************************************************************************\r\n--Declare Variables\r\n--**************************************************************************************\r\n--\r\n--**************************************************************************************\r\n--Set defaults\r\n--**************************************************************************************\r\n\r\n--**************************************************************************************\r\n--Main Process  E:\\UploadDataFiles\\ConEdisonMainframeData\\ConEdison\\CurrentBillingCycle\r\n--**************************************************************************************\r\n--EXEC sp_addlinkedserver ConEdAccount, 'Jet 4.0','Microsoft.Jet.OLEDB.4.0', 'E:\\UploadDataFiles\\ConEdison\\CurrentBillingCycle\\Accounts', NULL, 'Text' \r\n----\r\n--EXEC sp_addlinkedserver ConEdMeters, 'Jet 4.0','Microsoft.Jet.OLEDB.4.0', 'E:UploadDataFiles\\ConEdison\\CurrentBillingCycle\\Meters', NULL, 'Text' \r\n----\r\n--EXEC sp_addlinkedserver ConEdCancels, 'Jet 4.0','Microsoft.Jet.OLEDB.4.0', 'E:\\UploadDataFiles\\ConEdison\\CurrentBillingCycle\\Cancels', NULL, 'Text' \r\n----\r\nEXEC sp_addlinkedserver ConEdAccount, 'Jet 4.0','Microsoft.Jet.OLEDB.4.0', '\\\\dcasec3\\UploadDataFiles\\ConEdison\\CurrentBillingCycle\\Accounts', NULL, 'Text' \r\n--\r\nEXEC sp_addlinkedserver ConEdMeters, 'Jet 4.0','Microsoft.Jet.OLEDB.4.0', '\\\\dcasec3\\UploadDataFiles\\ConEdison\\CurrentBillingCycle\\Meters', NULL, 'Text' \r\n--\r\nEXEC sp_addlinkedserver ConEdCancels, 'Jet 4.0','Microsoft.Jet.OLEDB.4.0', '\\\\dcasec3\\UploadDataFiles\\ConEdison\\CurrentBillingCycle\\Cancels', NULL, 'Text' \r\n----",
      "created": "2025-06-10 21:41:26.390000",
      "last_altered": "2025-06-10 21:41:26.390000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@Status",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_CreateConEdisonLinkedServers",
      "explanation": "#### 1. Overview\nThe stored procedure `Archive_usp_CreateConEdisonLinkedServers` is designed to create linked servers in a Microsoft SQL Server environment. These linked servers are configured to connect to data sources using the Microsoft Jet OLE DB 4.0 provider, which allows SQL Server to access data stored in text files located on a network path. The procedure is part of the `ConEd` schema within the `OEC` database. The linked servers are named `ConEdAccount`, `ConEdMeters`, and `ConEdCancels`, each pointing to different directories containing text files for accounts, meters, and cancels, respectively.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, consisting primarily of calls to the `sp_addlinkedserver` system stored procedure to create linked servers. There are no complex logic structures, loops, or conditional statements involved.\n\n#### 3. Input Parameters\n- `@Status int output`: This is an output parameter intended to communicate the success or failure of the procedure. However, the procedure does not currently set this parameter, which means it does not fulfill its intended purpose.\n\n#### 4. Business Logic and Workflow\n- The procedure is intended to set up linked servers that allow SQL Server to access text files as if they were tables in a database. This is useful for integrating data from external sources into SQL Server without needing to import the data directly into SQL Server tables.\n- The procedure uses the `sp_addlinkedserver` system stored procedure to create each linked server. The linked servers are configured to use the Microsoft Jet OLE DB 4.0 provider, which is suitable for accessing text files.\n- The paths specified for the linked servers are network paths, indicating that the text files are stored on a network share.\n\n#### 5. Performance Considerations\n- Accessing data through linked servers, especially when using the Jet OLE DB provider for text files, can be slower than accessing data stored directly in SQL Server tables. This is due to the overhead of network access and the limitations of the Jet provider.\n- The performance of queries against these linked servers will depend on the size of the text files and the complexity of the queries. Large files or complex queries may result in slower performance.\n- Network latency and bandwidth can also impact performance, as the data is accessed over a network share.\n\n#### 6. Potential Issues or Risks\n- The procedure does not set the `@Status` output parameter, which means it does not provide feedback on whether the linked server creation was successful or if any errors occurred.\n- The use of the Microsoft Jet OLE DB 4.0 provider is deprecated and may not be supported in future versions of SQL Server. This could pose a risk for future compatibility.\n- The procedure assumes that the network paths are accessible and that the SQL Server service account has the necessary permissions to access the network shares. If these conditions are not met, the linked server creation will fail.\n- There is no error handling in the procedure. If any of the `sp_addlinkedserver` calls fail, the procedure will terminate without providing any indication of which step failed or why.\n- The procedure comments indicate that it is \"Not Used,\" which suggests it may be obsolete or replaced by another process. If this is the case, maintaining or executing this procedure could lead to confusion or unintended consequences.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1461,
      "api_response_id": "chatcmpl-Byel0Jb41jlJ5fet6OnBeWxu8DiEr"
    },
    "analysis_timestamp": "2025-07-29 09:34:26"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_GetProcessSummary",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_GetProcessSummary]   \r\n   \r\n AS BEGIN\r\n\t-- original and adjustment\r\nSELECT  BillingPeriod,\r\n        CASE WHEN BillingPeriod = BillingPeriodRevision\r\n             THEN '1 - Original Account Billing'\r\n             ELSE '2 - Adjustment Account Billing'\r\n        END AS description,\r\n        SUM(TotalRebilledAmount) AS TotalRebilledAmount,\r\n        MIN(ThermsFactor) AS ThermsFactor,\r\n        SUM(TotalCanceledAmount) AS TotalCanceledAmount,\r\n        SUM(TotalRebilledAmount + TotalCanceledAmount) AS NetBilledAmount,\r\n        SUM(TotalTherms) AS TotalRebilledTherms,\r\n        SUM(CAST(ROUND(ThermsFactor * TotalCCF, 0) AS INT)) AS DerivedRebilledTherms,\r\n        SUM(ISNULL(CancelTotalTherms, 0)) AS CancelTotalTherms,\r\n        SUM(TotalTherms + ISNULL(CancelTotalTherms, 0)) AS NetTherms,\r\n        SUM(TotalCCF) AS TotalRebilledCCF,\r\n        SUM(CAST(ROUND(CASE WHEN ISNULL(ThermsFactor, 0) = 0 THEN 0\r\n                            ELSE TotalTherms / ThermsFactor\r\n                       END, 0) AS INT)) AS DerivedRebilledCCF,\r\n        SUM(ISNULL(CancelTotalCCF, 0)) AS CancelTotalCCF,\r\n        SUM(TotalCCF + ISNULL(CancelTotalCCF, 0)) AS NetCCF\r\nINTO #ConEdAccountLevelSummary\r\nFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\nGROUP BY BillingPeriod,\r\n        CASE WHEN BillingPeriod = BillingPeriodRevision\r\n             THEN '1 - Original Account Billing'\r\n             ELSE '2 - Adjustment Account Billing'\r\n        END\r\n\r\n-- refund summary\r\nINSERT INTO #ConEdAccountLevelSummary\r\n(BillingPeriod, description, NetBilledAmount)\r\nSELECT MAX(BillingPeriodRevision), '3 - GasRate 36/40 Refund', SUM(RefundBilledAmount)* -1  FROM ConEd.UploadConEdisonRate036Refunds\r\n \r\n  \r\n-- final summary\r\nINSERT #ConEdAccountLevelSummary  \r\n(\r\n\tBillingPeriod,\r\n    description,\r\n    TotalRebilledAmount,\r\n    ThermsFactor,\r\n    TotalCanceledAmount,\r\n    NetBilledAmount,\r\n    TotalRebilledTherms,\r\n    DerivedRebilledTherms,\r\n    CancelTotalTherms,\r\n    NetTherms,\r\n    TotalRebilledCCF,\r\n    DerivedRebilledCCF,\r\n    CancelTotalCCF,\r\n    NetCCF\r\n)\r\nSELECT  MAX(BillingPeriod),\r\n\t\t'4 - Total Account Billing' AS description,\r\n        SUM(TotalRebilledAmount) AS TotalRebilledAmount,\r\n        MIN(ThermsFactor) AS ThermsFactor,\r\n        SUM(TotalCanceledAmount) AS TotalCanceledAmount,\r\n        SUM(NetBilledAmount) AS NetBilledAmount,\r\n        SUM(TotalRebilledTherms) AS TotalRebilledTherms,\r\n        SUM(DerivedRebilledTherms) AS DerivedRebilledTherms,\r\n        SUM(CancelTotalTherms) AS CancelTotalTherms,\r\n        SUM(NetTherms) AS NetTherms,\r\n        SUM(TotalRebilledCCF) AS TotalRebilledCCF,\r\n        SUM(DerivedRebilledCCF) AS DerivedRebilledCCF,\r\n        SUM(ISNULL(CancelTotalCCF, 0)) AS CancelTotalCCF,\r\n        SUM(NetCCF) AS NetCCF\r\nFROM #ConEdAccountLevelSummary\r\n\r\n--SELECT data\r\nSELECT * FROM #ConEdAccountLevelSummary ORDER BY description\r\n\r\nDROP TABLE #ConEdAccountLevelSummary\r\n\r\nEND",
      "created": "2025-06-10 21:41:26.400000",
      "last_altered": "2025-06-10 21:41:26.400000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_GetProcessSummary",
      "explanation": "#### 1. Overview\n\nThe stored procedure `Archive_usp_GetProcessSummary` is designed to generate a summary of billing and adjustment data for ConEdison accounts. It aggregates data from two tables: `ConEd.UploadConEdisonAccountBillingAdjustmentGas` and `ConEd.UploadConEdisonRate036Refunds`. The procedure calculates various metrics related to billing, adjustments, and refunds, and stores these results in a temporary table `#ConEdAccountLevelSummary`. Finally, it outputs the summarized data and cleans up the temporary table.\n\n#### 2. Complexity Level: Medium\n\nThe procedure involves multiple steps of data aggregation, conditional logic, and temporary table management. While the logic is straightforward, the use of multiple aggregate functions and conditional calculations adds a moderate level of complexity.\n\n#### 3. Input Parameters\n\nThis stored procedure does not take any input parameters. It operates on the entire dataset available in the specified tables.\n\n#### 4. Business Logic and Workflow\n\n1. **Data Aggregation and Classification:**\n   - The procedure begins by aggregating data from `ConEd.UploadConEdisonAccountBillingAdjustmentGas`. It groups the data by `BillingPeriod` and a derived `description` field, which classifies records as either \"Original Account Billing\" or \"Adjustment Account Billing\" based on whether `BillingPeriod` equals `BillingPeriodRevision`.\n   - Various metrics are calculated, including `TotalRebilledAmount`, `ThermsFactor`, `TotalCanceledAmount`, `NetBilledAmount`, `TotalRebilledTherms`, `DerivedRebilledTherms`, `CancelTotalTherms`, `NetTherms`, `TotalRebilledCCF`, `DerivedRebilledCCF`, `CancelTotalCCF`, and `NetCCF`.\n\n2. **Refund Summary:**\n   - The procedure inserts a summary of refunds into the temporary table. It calculates the total refund amount from `ConEd.UploadConEdisonRate036Refunds` and negates it to represent a deduction.\n\n3. **Final Summary:**\n   - A final summary row is inserted into the temporary table, aggregating all previously calculated metrics to provide a total account billing summary.\n\n4. **Output and Cleanup:**\n   - The procedure selects all data from the temporary table, ordered by `description`, and then drops the temporary table to clean up resources.\n\n#### 5. Performance Considerations\n\n- **Temporary Table Usage:** The use of a temporary table can be efficient for intermediate data storage, but it may lead to increased I/O operations, especially if the dataset is large.\n- **Aggregation Functions:** The procedure uses several aggregation functions, which can be computationally expensive. Indexing on the source tables could improve performance.\n- **Conditional Logic:** The use of `CASE` statements and `ISNULL` functions adds complexity to the calculations, which might affect performance if not optimized.\n\n#### 6. Potential Issues or Risks\n\n- **Data Volume:** If the source tables contain a large volume of data, the procedure might experience performance degradation due to the extensive use of aggregation and temporary table operations.\n- **Concurrency:** The use of a temporary table might lead to contention issues if the procedure is executed concurrently by multiple sessions.\n- **Error Handling:** The procedure lacks explicit error handling, which could lead to unhandled exceptions if unexpected data conditions occur.\n- **Data Integrity:** The procedure assumes that the data in the source tables is accurate and complete. Any discrepancies in the data could lead to incorrect summaries.\n- **Scalability:** As the dataset grows, the procedure might require optimization to maintain performance, such as partitioning the data or optimizing indexes.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1732,
      "api_response_id": "chatcmpl-ByelH5PSJYuV31WDxSJ0Hoej9w9X0"
    },
    "analysis_timestamp": "2025-07-29 09:34:45"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_IdentifyAndCorrectMeterDataFromAndToDate",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_IdentifyAndCorrectMeterDataFromAndToDate] (@AuthenticatedUserID int)\r\nAS\r\n\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  \r\n--*               \r\n--*               \r\n--*               \r\n--* Exec:         usp_IdentifyAndCorrectMeterDataFromAndToDate\r\n--*\r\n--* Parameter(s):         \r\n--*                            UtilityCompanySeqid int   \t   - The sequence id of the Utility Companyto be processed\r\n--*                            StatusCode  int output       \t   -  Execution Return Status \r\n--*\r\n--* Database:     OEC\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   10/26/2005\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 05/16/2006 PAH  First Version  \r\n--***************************************************************************************\r\nBegin \r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\n----\r\n\r\n/*\r\n\tFor each meter, meter record with the largest fromDate will have the largest toDate.\r\n\tIf there are more than one record with the largest fromDate, the record with the largest current toDate value and with the same fromDate will \r\n\tbe updated with the largest toDate value.\r\n*/\r\nupdate ConEd.UploadConEdisonMeter\r\n\tset IsEC3Corrected = 'Y',\r\n\ttoDate =(\r\n\t\t\t\tselect max(todate) \r\n\t\t\t\tfrom ConEd.UploadConEdisonMeter as meter\r\n\t\t\t\twhere \r\n\t\t\t\tmeter.AccountNumber= ConEd.UploadConEdisonMeter.AccountNumber and\r\n\t\t\t\tmeter.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n\t\t\t)\r\n\tfrom ConEd.UploadConEdisonMeter -- as UploadConEdisonMeterCorrection\r\n\twhere \r\n\tfromDate = \r\n\t(\r\n\t\tselect max(fromDate) \r\n\t\tfrom ConEd.UploadConEdisonMeter as meter2\r\n\t\twhere \r\n\t\tmeter2.AccountNumber= ConEd.UploadConEdisonMeter.AccountNumber and\r\n\t\tmeter2.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n\t)\r\n\tand\r\n\ttoDate =\r\n\t(\r\n\t\tselect max(meter3.toDate)\r\n\t\tfrom ConEd.UploadConEdisonMeter as meter3\r\n\t\twhere\r\n\t\tmeter3.AccountNumber= ConEd.UploadConEdisonMeter.AccountNumber and\r\n\t\tmeter3.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber and\r\n\t\tmeter3.fromDate = ConEd.UploadConEdisonMeter.fromDate\r\n\t)\r\n\t\t\t\t\r\n--\r\n--\tAssumption that the meter billing range is always correct.  Problems may occur when there are splits spans\r\n--\tor just plain errors from Con Edison.  The data is corrected in the UploadConEdisonMeterUncorrected table.\r\n--\r\nupdate ConEd.UploadConEdisonMeter\r\nset \r\n\tIsEC3Corrected = 'Y',\r\n\ttoDate =(\r\n\t\t\t\t-- \r\n\t\t\t\t-- Finding the minimum from date for the account and meter combination and the todate is equal to\r\n\t\t\t\t-- the fromdate of the next meter reading\r\n\t\t\t\t-- \r\n\t\t\t\tselect min(Fromdate) \r\n\t\t\t\tfrom ConEd.UploadConEdisonMeter as t2\r\n\t\t\t\twhere t2.FromDate > ConEd.UploadConEdisonMeter.FromDate and\r\n\t\t\t\tt2.AccountNumber= ConEd.UploadConEdisonMeter.AccountNumber and\r\n\t\t\t\tt2.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n\t\t\t)\r\n\t\t\tfrom ConEd.UploadConEdisonMeter -- as UploadConEdisonMeterCorrection\r\n\t\t\t-- \r\n\t\t\t-- This processes n-1 meter billing transaction for the account and meter combination and\r\n\t\t\t-- always assumes that min(from date) to the max(todate) is equal to the account billing range.\r\n\t\t\t-- Note: the nth transaction is skipped due to being correct by using \"is not null\" in the where clause.\r\n\t\t\t--\r\n\t\t\twhere (select min(Fromdate) \r\n\t\t\t\tfrom ConEd.UploadConEdisonMeter as t2\r\n\t\t\t\twhere t2.FromDate > ConEd.UploadConEdisonMeter.FromDate and\r\n\t\t\t\tt2.AccountNumber= ConEd.UploadConEdisonMeter.AccountNumber and\r\n\t\t\t\tt2.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber ) is not null\r\n--\r\nupdate ConEd.UploadConEdisonMeter\r\nset \r\n\tBillingPeriodRevision = [dbo].[DetermineConEdisonBillingPeriodProjected] (ToDate ,[dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable] (AccountNumber,BillingPeriodRevision),9),\r\n\tFirstPeriodCanceled = [dbo].[CalculateNextBillingPeriod]([dbo].[DetermineConEdisonBillingPeriodProjected](FromDate,[dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable] (AccountNumber,BillingPeriodRevision),9),'M'),\r\n\tDeltaNumberOfPeriods = [dbo].[CalculateDeltaBillingPeriods]  ([dbo].[CalculateNextBillingPeriod]([dbo].[DetermineConEdisonBillingPeriodProjected](FromDate,[dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable] (AccountNumber,BillingPeriodRevision),9),'M'),[dbo].[DetermineConEdisonBillingPeriodProjected] (ToDate ,[dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable] (AccountNumber,BillingPeriodRevision),9),'M'),\r\n\tCycleBillingDays = dbo.[CalculateNumberOfBillingDays]  (FromDate,ToDate)\r\nwhere IsEC3Corrected = 'Y'\r\n--\r\nselect 'Number of Meter transactions corrected in the UploadConEdisonMeter table: ',@@rowcount\r\n--\r\nend",
      "created": "2025-06-10 21:41:26.410000",
      "last_altered": "2025-06-10 21:41:26.410000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@AuthenticatedUserID",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_IdentifyAndCorrectMeterDataFromAndToDate",
      "explanation": "#### 1. Overview\n\nThe stored procedure `Archive_usp_IdentifyAndCorrectMeterDataFromAndToDate` is designed to correct and update meter data records in the `ConEd.UploadConEdisonMeter` table. It focuses on ensuring that the `toDate` values are accurate based on the `fromDate` values for each meter record. The procedure performs updates to correct potential errors in the meter data, such as overlapping or incorrect date ranges, and recalculates billing periods and related metrics for corrected records.\n\n#### 2. Complexity Level: Medium\n\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves multiple nested subqueries and correlated subqueries.\n- It performs updates based on complex conditions involving date comparisons.\n- It integrates with other functions to calculate billing periods and related metrics.\n- The logic is intricate, requiring a good understanding of the business rules governing meter data corrections.\n\n#### 3. Input Parameters\n\n- `@AuthenticatedUserID int`: This parameter is intended to identify the user executing the procedure. However, it is not utilized within the procedure's logic, suggesting it might be reserved for logging or auditing purposes outside the procedure.\n\n#### 4. Business Logic and Workflow\n\n1. **Correcting `toDate` Values:**\n   - The procedure updates the `toDate` for each meter record to the maximum `toDate` found for the same `AccountNumber` and `MeterNumber` where the `fromDate` is the largest.\n   - If multiple records have the same largest `fromDate`, the record with the largest `toDate` is updated.\n\n2. **Handling Split Spans and Errors:**\n   - The procedure assumes that the meter billing range is correct and addresses issues like split spans or errors by updating the `toDate` to the minimum `fromDate` of the next record for the same account and meter.\n\n3. **Recalculating Billing Metrics:**\n   - For records marked as corrected (`IsEC3Corrected = 'Y'`), the procedure recalculates:\n     - `BillingPeriodRevision` using a projected billing period function.\n     - `FirstPeriodCanceled` using a function to calculate the next billing period.\n     - `DeltaNumberOfPeriods` to determine the difference in billing periods.\n     - `CycleBillingDays` to calculate the number of billing days between `fromDate` and `toDate`.\n\n4. **Output:**\n   - The procedure outputs the number of meter transactions corrected.\n\n#### 5. Performance Considerations\n\n- **Subquery Execution:** The use of correlated subqueries can lead to performance issues, especially if the `ConEd.UploadConEdisonMeter` table is large. Each update operation involves multiple subqueries that are executed for each row being updated.\n- **Indexing:** Proper indexing on `AccountNumber`, `MeterNumber`, `fromDate`, and `toDate` can significantly improve performance by reducing the time taken for subquery execution.\n- **Batch Processing:** If the table is large, consider processing records in batches to avoid long-running transactions and potential locks.\n\n#### 6. Potential Issues or Risks\n\n- **Concurrency and Locking:** The procedure updates potentially large numbers of rows, which can lead to locking issues and impact concurrent access to the table.\n- **Data Integrity:** The logic assumes that the largest `fromDate` should always have the largest `toDate`, which may not hold true in all business scenarios. Incorrect assumptions could lead to data integrity issues.\n- **Unused Parameter:** The `@AuthenticatedUserID` parameter is not used within the procedure, which might indicate incomplete implementation or oversight.\n- **Error Handling:** The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete updates if an error occurs during execution.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2199,
      "api_response_id": "chatcmpl-ByelaX19AZdrwMPnumFFqo4LwmUs6"
    },
    "analysis_timestamp": "2025-07-29 09:35:09"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_IdentifyRefundsForGasRate036",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_IdentifyRefundsForGasRate036] (@AuthenticatedUserID int)\r\nAS\r\n\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  \r\n--*               \r\n--*               \r\n--*               \r\n--* Exec:         usp_IdentifyAndCorrectMeterDataFromAndToDate\r\n--*\r\n--* Parameter(s):         \r\n--*                            UtilityCompanySeqid int   \t   - The sequence id of the Utility Companyto be processed\r\n--*                            StatusCode  int output       \t   -  Execution Return Status \r\n--*\r\n--* Database:     OEC\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   10/26/2005\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 05/16/2006 PAH  First Version  \r\n--***************************************************************************************\r\nBegin \r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\n--\tCon Edison Gas Rate \"036\" potentially can report a refund of minimum charges for a select group of period(s).  These refunds will be applied to the\r\n--\tcurrent billing period as a net billed adjustment by netting the original billed amount and the refund.  It will be noted in the notes.\r\n--\tThis characteristics of the refund are as follows:\r\n--\t\t\tCCF must equal zero\r\n--\t\t\tTherms  must equal zero\r\n--\t\t\tBilledAmount  must equal non-zero (Probably less than zero)\r\n--\t\t\tTariffCode must be '036'\r\n--\t\t\tBillingPeriod is the current billing period\r\n--\r\n--\t\r\n--\tCon Edison Gas Rate \"036\" refund is being reported incorrectly.  The way should be rebill the correct billing amount as a rebill and cancel \r\n--\tthe revised billed amount.\r\n--\r\ndeclare @GasRate036RefundCount int\r\n--\r\nSELECT @GasRate036RefundCount = isnull(count(*) ,0)\r\nFROM \r\n\t\tConEd.UploadConEdisonCancellationSummary INNER JOIN\r\n\t\tConEd.UploadConEdisonAccountSummary ON \r\n\t\tConEd.UploadConEdisonCancellationSummary.BillingPeriod = ConEd.UploadConEdisonAccountSummary.BillingPeriod AND \r\n\t\tConEd.UploadConEdisonCancellationSummary.BillingPeriodRevision = ConEd.UploadConEdisonAccountSummary.BillingPeriodRevision AND \r\n\t\tConEd.UploadConEdisonCancellationSummary.OriginalAccountNumber = ConEd.UploadConEdisonAccountSummary.OriginalAccountNumber\r\nWHERE \r\n\t\t(ConEd.UploadConEdisonCancellationSummary.CancelTotalCCF = 0) AND \r\n\t\t(ConEd.UploadConEdisonCancellationSummary.CancelTotalTherms = 0) AND \r\n\t\t(ConEd.UploadConEdisonCancellationSummary.TotalCanceledAmount <> 0) AND \r\n\t\t(ConEd.UploadConEdisonCancellationSummary.GasRateCode in ('036','040'))\r\n\r\n--\tOne Period Refund\r\n--\r\nif (@GasRate036RefundCount <> 0 )\r\nbegin\r\n\t--\r\n\t--\tNote:\tThe workflow has the UploadConEdisonAccountSummary (Rebilled data) loaded into the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\t\tprior to working on the cancellation data.  The correction is being applied to the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\t\tinstead of the ConEd.UploadConEdisonAccountSummary.\r\n\t--\t\r\nUPDATE    ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\nSET             \r\n\t\tNotes = \r\n\t\t\t\tCAST(ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount + ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount\r\n\t\t\t\tAS varchar(18)) \r\n\t\t\t\t+ ' net Charge for rate '+ConEd.UploadConEdisonAccountBillingAdjustmentGas.GasRateCode+' for the Current period (' + ConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriod + ') net rebilled amount: ' + CAST(ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount\r\n\t\t\t\tAS varchar(18)) + ' refunded amount: ' + CAST(ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount AS varchar(18))+\r\n\t\t\t\t' refunded Therms(CCF): '+ CAST(ConEd.UploadConEdisonRate036Refunds.RefundTherms AS varchar(18))+'('+\r\n\t\t\t\tCAST(ConEd.UploadConEdisonRate036Refunds.RefundCCF AS varchar(18))+')', \r\n\t\tTotalRebilledAmount = ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount + ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount,\r\n\t\tTotalCanceledAmount = 0, \r\n\t\tTotalCCF = TotalCCF + ConEd.UploadConEdisonRate036Refunds.RefundCCF, \r\n\t\tTotalTherms =TotalTherms + ConEd.UploadConEdisonRate036Refunds.RefundTherms, \r\n\t\tCancelTotalTherms =0,\r\n\t\tCancelTotalCCF=0\r\nFROM \r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas INNER JOIN\r\n\t\tConEd.UploadConEdisonRate036Refunds ON \r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriod = ConEd.UploadConEdisonRate036Refunds.BillingPeriod AND \r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriodRevision = ConEd.UploadConEdisonRate036Refunds.BillingPeriodRevision AND \r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas.OriginalAccountNumber = ConEd.UploadConEdisonRate036Refunds.AccountNumber AND \r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas.GasRateCode = ConEd.UploadConEdisonRate036Refunds.TariffCode\r\n    --\r\n\t--    Once the refund is applied correctly to the ConEd.UploadConEdisonAccountBillingAdjustmentGas.  The cancellation record will be removed.\r\n\t--\r\n\tdelete from ConEd.UploadConEdisonCancellationSummary\r\n\tFROM \r\n\t\t\tConEd.UploadConEdisonCancellationSummary INNER JOIN\r\n\t\t\tConEd.UploadConEdisonAccountSummary ON \r\n\t\t\tConEd.UploadConEdisonCancellationSummary.BillingPeriod = ConEd.UploadConEdisonAccountSummary.BillingPeriod AND \r\n\t\t\tConEd.UploadConEdisonCancellationSummary.BillingPeriodRevision = ConEd.UploadConEdisonAccountSummary.BillingPeriodRevision AND \r\n\t\t\tConEd.UploadConEdisonCancellationSummary.OriginalAccountNumber = ConEd.UploadConEdisonAccountSummary.OriginalAccountNumber\r\n\tWHERE \r\n\t\t\t(ConEd.UploadConEdisonCancellationSummary.CancelTotalCCF = 0) AND \r\n\t\t\t(ConEd.UploadConEdisonCancellationSummary.CancelTotalTherms = 0) AND \r\n\t\t\t(ConEd.UploadConEdisonCancellationSummary.TotalCanceledAmount <> 0) AND \r\n\t\t\t(ConEd.UploadConEdisonCancellationSummary.GasRateCode in ('036','040')) and\r\n            (ConEd.UploadConEdisonCancellationSummary.NumberOfBillingPeriods = 12)\r\n\t--\r\n\tset @GasRate036RefundCount = 0\r\n\r\nend\r\n--\r\nSELECT @GasRate036RefundCount = isnull(count(*) ,0)\r\nFROM \r\n\t\tConEd.UploadConEdisonCancellationTempSummarySpanned INNER JOIN\r\n\t\tConEd.UploadConEdisonAccountSummary ON \r\n\t\tConEd.UploadConEdisonCancellationTempSummarySpanned.BillingPeriod = ConEd.UploadConEdisonAccountSummary.BillingPeriod AND \r\n\t\tConEd.UploadConEdisonCancellationTempSummarySpanned.BillingPeriodRevision = ConEd.UploadConEdisonAccountSummary.BillingPeriodRevision AND\r\n\t\tConEd.UploadConEdisonCancellationTempSummarySpanned.AccountNumber = ConEd.UploadConEdisonAccountSummary.OriginalAccountNumber\r\nWHERE \r\n\t\t(ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelCCF = 0) AND \r\n\t\t(ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelTherms = 0) AND \r\n\t\t(ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelBilledAmount <> 0) AND \r\n\t\t( ConEd.UploadConEdisonAccountSummary.GasRateCode in ('036','040'))\r\n--\r\n--\tSpanned Refund\r\n--\r\nif (@GasRate036RefundCount <> 0 )\r\nBEGIN\r\n\t--\r\n\t--\tNote:\tThe workflow has the UploadConEdisonAccountSummary (Rebilled data) loaded into the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\t\tprior to working on the cancellation data.  The correction is being applied to the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\t\tinstead of the ConEd.UploadConEdisonAccountSummary.\r\n\t--\t\t\t\r\nUPDATE    ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\nSET             \r\n\t\tNotes = \r\n\t\t\t\tCAST(ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount + ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount\r\n\t\t\t\tAS varchar(18)) \r\n\t\t\t\t+ ' net Charge for rate '+ConEd.UploadConEdisonAccountBillingAdjustmentGas.GasRateCode+' for the Current period (' + ConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriod + ') net rebilled amount: ' + CAST(ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount\r\n\t\t\t\tAS varchar(18)) + ' refunded amount: ' + CAST(ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount AS varchar(18))+\r\n\t\t\t\t' refunded Therms(CCF): '+ CAST(ConEd.UploadConEdisonRate036Refunds.RefundTherms AS varchar(18))+'('+\r\n\t\t\t\tCAST(ConEd.UploadConEdisonRate036Refunds.RefundCCF AS varchar(18))+')', \r\n\t\tTotalRebilledAmount = ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount + ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount,\r\n\t\tTotalCanceledAmount = 0, \r\n\t\tTotalCCF = TotalCCF + ConEd.UploadConEdisonRate036Refunds.RefundCCF, \r\n\t\tTotalTherms =TotalTherms + ConEd.UploadConEdisonRate036Refunds.RefundTherms, \r\n\t\tCancelTotalTherms =0,\r\n\t\tCancelTotalCCF=0\r\nFROM \r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas INNER JOIN\r\n\t\tConEd.UploadConEdisonRate036Refunds ON \r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriod = ConEd.UploadConEdisonRate036Refunds.BillingPeriod AND \r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriodRevision = ConEd.UploadConEdisonRate036Refunds.BillingPeriodRevision AND \r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas.OriginalAccountNumber = ConEd.UploadConEdisonRate036Refunds.AccountNumber AND \r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas.GasRateCode = ConEd.UploadConEdisonRate036Refunds.TariffCode\r\n\t--\r\n\t--\tOnce the refund is applied correctly to the ConEd.UploadConEdisonAccountBillingAdjustmentGas.  The cancellation record will be removed.\r\n\t--\r\n\tdelete from ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n\tFROM \r\n\t\t\tConEd.UploadConEdisonCancellationTempSummarySpanned INNER JOIN\r\n\t\t\tConEd.UploadConEdisonAccountSummary ON \r\n\t\t\tConEd.UploadConEdisonCancellationTempSummarySpanned.BillingPeriod = ConEd.UploadConEdisonAccountSummary.BillingPeriod AND \r\n\t\t\tConEd.UploadConEdisonCancellationTempSummarySpanned.BillingPeriodRevision = ConEd.UploadConEdisonAccountSummary.BillingPeriodRevision AND\r\n\t\t\tConEd.UploadConEdisonCancellationTempSummarySpanned.AccountNumber = ConEd.UploadConEdisonAccountSummary.OriginalAccountNumber\r\n\tWHERE \r\n\t\t\t(ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelCCF = 0) AND \r\n\t\t\t(ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelTherms = 0) AND \r\n\t\t\t(ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelBilledAmount <> 0) AND \r\n\t\t\t(ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelTariffCode in ('036','040')) \r\n\t--\r\n\tset @GasRate036RefundCount = 0\r\n\r\nend\r\n\r\n\r\n--\r\n\r\nend",
      "created": "2025-06-10 21:41:26.423000",
      "last_altered": "2025-06-10 21:41:26.423000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@AuthenticatedUserID",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_IdentifyRefundsForGasRate036",
      "explanation": "#### 1. Overview\n\nThe stored procedure `[ConEd].[Archive_usp_IdentifyRefundsForGasRate036]` is designed to identify and process refunds related to Con Edison Gas Rate \"036\" and \"040\". It checks for specific conditions in billing data to determine if a refund is applicable, updates the billing adjustments accordingly, and removes processed cancellation records. The procedure handles both single-period and spanned-period refunds, ensuring that the refunds are correctly applied and documented in the billing adjustment records.\n\n#### 2. Complexity Level: Medium\n\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves multiple conditional checks and updates across several tables.\n- It includes both single-period and spanned-period refund processing logic.\n- It performs data manipulation operations such as updates and deletes based on specific business rules.\n\n#### 3. Input Parameters\n\n- `@AuthenticatedUserID int`: This parameter is intended to capture the ID of the authenticated user executing the procedure. However, it is not utilized within the procedure, indicating a potential oversight or placeholder for future use.\n\n#### 4. Business Logic and Workflow\n\n1. **Initialization**: The procedure begins by declaring a variable `@GasRate036RefundCount` to track the number of refunds identified.\n\n2. **Single-Period Refund Identification**:\n   - It counts records in `ConEd.UploadConEdisonCancellationSummary` where specific conditions are met (e.g., zero CCF and Therms, non-zero canceled amount, and specific gas rate codes).\n   - If refunds are identified (`@GasRate036RefundCount` > 0), it proceeds to update the `ConEd.UploadConEdisonAccountBillingAdjustmentGas` table with the refund details, adjusting the total rebilled amount and resetting cancellation totals.\n   - After updating, it deletes the processed records from `ConEd.UploadConEdisonCancellationSummary`.\n\n3. **Spanned-Period Refund Identification**:\n   - Similar logic is applied to `ConEd.UploadConEdisonCancellationTempSummarySpanned` for refunds spanning multiple periods.\n   - Updates and deletes are performed in the same manner as single-period refunds.\n\n4. **Finalization**: The procedure resets `@GasRate036RefundCount` to zero after processing each refund type.\n\n#### 5. Performance Considerations\n\n- **Indexing**: Ensure that the tables involved in joins and where clauses are properly indexed to optimize query performance, especially given the potential size of billing data.\n- **Concurrency**: Consider the impact of concurrent executions of this procedure, as it involves updates and deletes that could lead to locking issues.\n- **Batch Processing**: If the dataset is large, consider processing in batches to reduce transaction size and improve performance.\n\n#### 6. Potential Issues or Risks\n\n- **Unused Parameter**: The `@AuthenticatedUserID` parameter is not used, which could lead to confusion or missed functionality if user tracking is required.\n- **Data Integrity**: The procedure deletes records from cancellation tables, which could lead to data loss if not properly backed up or if the logic contains errors.\n- **Error Handling**: There is no explicit error handling or logging, which could make troubleshooting difficult if issues arise during execution.\n- **Hardcoded Values**: The procedure relies on hardcoded gas rate codes ('036', '040'), which could require updates if business rules change.\n- **Scalability**: As the dataset grows, the current approach may not scale well without optimizations or architectural changes.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3598,
      "api_response_id": "chatcmpl-Byem0uLlWW7q7BWtGiMhcQvEEtm1e"
    },
    "analysis_timestamp": "2025-07-29 09:35:23"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_IdentifyUniqueNetZeroTransactionsAndRemoveByCursor",
      "definition": "CREATE  PROCEDURE [ConEd].[Archive_usp_IdentifyUniqueNetZeroTransactionsAndRemoveByCursor] (@AuthenticatedUserID int)\r\nAS\r\n\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  \r\n--*               \r\n--*               \r\n--*               \r\n--* Exec:         usp_ProcessNYPAExchangeInfo\r\n--*\r\n--* Parameter(s):         \r\n--*                            UtilityCompanySeqid int   \t   - The sequence id of the Utility Companyto be processed\r\n--*                            StatusCode  int output       \t   -  Execution Return Status \r\n--*\r\n--* Database:     OEC\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   10/26/2005\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 05/16/2006 PAH  First Version  \r\n--***************************************************************************************\r\nBegin \r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\ndeclare @BillingPeriod varchar(6)\r\n--\r\n\r\nSELECT @BillingPeriod=BillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y'\r\n--\r\n--  Find and delete the duplicate net zero transactions where the ConEd.UploadConEdisonAccount.BilledAmount + ConEd.UploadConEdisonCancellation.BilledAmount is 0\r\n--\r\ntruncate table ConEd.UploadConEdisonNetZeroTransactions\r\n--\r\ndeclare @HoldUploadConEdisonCancellationSeqid int\r\n--\r\ndeclare @CancellationBillingPeriodRevision varchar(6)\r\ndeclare @CancellationAccountNumber varchar(15)\r\ndeclare @AccountUploadConEdisonAccountSeqid int\r\ndeclare @CancellationUploadConEdisonCancellationSeqid int\r\ndeclare @AccountTherms int\r\ndeclare @CancellationTherms int\r\ndeclare @AccountCCF int\r\ndeclare @CancellationCCF int\r\ndeclare @AccountBilledAmount money\r\ndeclare @CancellationBilledAmount money\r\n--\r\nDeclare UniqueConEdisonNetZeroTransactions_record cursor for \r\nSELECT ConEd.UploadConEdisonCancellation.BillingPeriodRevision, ConEd.UploadConEdisonCancellation.AccountNumber, \r\n                      ConEd.UploadConEdisonAccount.UploadConEdisonAccountSeqid, ConEd.UploadConEdisonCancellation.UploadConEdisonCancellationSeqid, \r\n                      ConEd.UploadConEdisonAccount.Therms, ConEd.UploadConEdisonCancellation.Therms AS CancellationTherms, ConEd.UploadConEdisonAccount.CCF, \r\n                      ConEd.UploadConEdisonCancellation.CCF AS CancellationCCF, ConEd.UploadConEdisonAccount.BilledAmount, \r\n                      ConEd.UploadConEdisonCancellation.BilledAmount AS CancellationBilledAmount\r\nFROM ConEd.UploadConEdisonAccount INNER JOIN\r\n                      ConEd.UploadConEdisonCancellation ON \r\n                      ConEd.UploadConEdisonAccount.DeltaNumberOfPeriods = ConEd.UploadConEdisonCancellation.DeltaNumberOfPeriods AND \r\n                      ConEd.UploadConEdisonAccount.BillingPeriodRevision = ConEd.UploadConEdisonCancellation.BillingPeriodRevision AND \r\n                      ConEd.UploadConEdisonAccount.BillingPeriod = ConEd.UploadConEdisonCancellation.BillingPeriod AND \r\n                      ConEd.UploadConEdisonAccount.AccountNumber = ConEd.UploadConEdisonCancellation.AccountNumber /*INNER JOIN\r\n                      Billing.ApplicationTimeFrame ON ConEd.UploadConEdisonCancellation.BillingPeriodRevision = Billing.ApplicationTimeFrame.BillingPeriod*/\r\nWHERE (ConEd.UploadConEdisonAccount.BilledAmount + ConEd.UploadConEdisonCancellation.BilledAmount = 0) AND \r\n                      (ConEd.UploadConEdisonAccount.Therms + ConEd.UploadConEdisonCancellation.Therms = 0) AND \r\n                      (ConEd.UploadConEdisonAccount.CCF + ConEd.UploadConEdisonCancellation.CCF = 0) /*AND \r\n                      (Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')*/\r\nORDER BY ConEd.UploadConEdisonCancellation.UploadConEdisonCancellationSeqid\r\n--\r\nopen UniqueConEdisonNetZeroTransactions_record\r\n--\r\nset @HoldUploadConEdisonCancellationSeqid = 0\r\n--\r\n-- Read first row\r\nfetch UniqueConEdisonNetZeroTransactions_record into \r\n\t@CancellationBillingPeriodRevision,@CancellationAccountNumber,@AccountUploadConEdisonAccountSeqid,@CancellationUploadConEdisonCancellationSeqid,\r\n\t@AccountTherms, @CancellationTherms,@AccountCCF,@CancellationCCF, @AccountBilledAmount, @CancellationBilledAmount\r\n\r\n\r\nwhile @@fetch_status =0\r\n  begin\r\n  \r\n\t-- if @AccountUploadConEdisonAccountSeqid and @CancellationUploadConEdisonCancellationSeqid are not currently in the UploadConEdisonNetZeroTransactions\r\n\tif(not exists(select * from ConEd.UploadConEdisonNetZeroTransactions where UploadConEdisonAccountSeqid = @AccountUploadConEdisonAccountSeqid or UploadConEdisonCancellationSeqid = @CancellationUploadConEdisonCancellationSeqid))\r\n\tbegin\r\n\r\n\t\tINSERT INTO ConEd.UploadConEdisonNetZeroTransactions\r\n\t\t\t(BillingPeriod,BillingPeriodRevision, AccountNumber, UploadConEdisonAccountSeqid, UploadConEdisonCancellationSeqid, Therms, CancellationTherms, CCF, \r\n\t\t\tCancellationCCF, BilledAmount, CancellationBilledAmount)\r\n\t\tvalues\r\n\t\t(\r\n\t\t\t@BillingPeriod,@CancellationBillingPeriodRevision,@CancellationAccountNumber,@AccountUploadConEdisonAccountSeqid,@CancellationUploadConEdisonCancellationSeqid,\r\n\t\t\t@AccountTherms, @CancellationTherms, @AccountCCF,@CancellationCCF , @AccountBilledAmount, @CancellationBilledAmount\r\n\t\t)\r\n\t\t\r\n\tend\r\n\t\t\r\n\t\r\n\tfetch UniqueConEdisonNetZeroTransactions_record into \r\n\t\t@CancellationBillingPeriodRevision,@CancellationAccountNumber,@AccountUploadConEdisonAccountSeqid,@CancellationUploadConEdisonCancellationSeqid,\r\n\t\t@AccountTherms, @CancellationTherms,@AccountCCF,@CancellationCCF, @AccountBilledAmount, @CancellationBilledAmount\r\n end \r\n--\r\nclose UniqueConEdisonNetZeroTransactions_record\r\n\r\nDeallocate UniqueConEdisonNetZeroTransactions_record\r\n\r\nselect * from ConEd.UploadConEdisonNetZeroTransactions\r\nselect * from ConEd.uvw_ConEdisonNetZeroTransactionSummary\r\n--\r\n-- Delete Net zero transactions from UploadConEdisonAccount & UploadConEdisonCancellation\r\n--\r\ndelete ConEd.UploadConEdisonCancellation from ConEd.UploadConEdisonCancellation\r\ninner join \r\n(\r\n   select * from ConEd.UploadConEdisonNetZeroTransactions\r\n) as NetZeroTransactions on \r\nConEd.UploadConEdisonCancellation.UploadConEdisonCancellationSeqid = NetZeroTransactions.UploadConEdisonCancellationSeqid\r\n--\r\nDELETE ConEd.UploadConEdisonAccount from ConEd.UploadConEdisonAccount\r\n inner join \r\n(\r\n   select * from ConEd.UploadConEdisonNetZeroTransactions\r\n) as NetZeroTransactions on \r\nConEd.UploadConEdisonAccount.UploadConEdisonAccountSeqid = NetZeroTransactions.UploadConEdisonAccountSeqid\r\n--\r\n-- Delete Net zero transactions from UploadConEdisonAccountPreload & UploadConEdisonCancellationPreload\r\n-- Due to the insert of data using the Preload data instead of the ocnverted data\r\n--\t\t\tFROM ConEd.UploadConEdisonAccountPreload\t\t\t\r\n--\t\t\tWHERE UploadConEdisonAccountPreload.DeltaNumberOfPeriods<=1\t\r\n\r\ndelete ConEd.UploadConEdisonCancellationPreload from ConEd.UploadConEdisonCancellationPreload\r\ninner join \r\n(\r\n   select * from ConEd.UploadConEdisonNetZeroTransactions\r\n) as NetZeroTransactions on \r\nConEd.UploadConEdisonCancellationPreload.UploadConEdisonCancellationPreloadSeqid = NetZeroTransactions.UploadConEdisonCancellationSeqid\r\n--\r\ndelete ConEd.UploadConEdisonAccountPreload\r\nfrom ConEd.UploadConEdisonAccountPreload inner join \r\n(\r\n  select * from ConEd.UploadConEdisonNetZeroTransactions\r\n) as NetZeroTransactions on \r\nConEd.UploadConEdisonAccountPreload.UploadConEdisonAccountPreloadSeqid = NetZeroTransactions.UploadConEdisonAccountSeqid\r\n--\r\n--\tIdentify all meter billings that do not have an account bill for removal.  \r\n--\r\nSELECT 'Meterbilling without an associated Accountbill' AS Description, ConEd.UploadConEdisonMeter.BillingPeriod, \r\n                      ConEd.UploadConEdisonMeter.BillingPeriodRevision, ConEd.UploadConEdisonAccount.UploadConEdisonAccountSeqid, \r\n                      ConEd.UploadConEdisonMeter.AccountNumber, ConEd.UploadConEdisonMeter.MeterNumber, ConEd.UploadConEdisonMeter.FromDate, \r\n                      ConEd.UploadConEdisonMeter.ToDate, ConEd.UploadConEdisonMeter.FromReading, ConEd.UploadConEdisonMeter.ToReading, \r\n                      ConEd.UploadConEdisonMeter.CCF\r\nFROM ConEd.UploadConEdisonMeter LEFT JOIN\r\n                      ConEd.UploadConEdisonAccount ON ConEd.UploadConEdisonMeter.BillingPeriod = ConEd.UploadConEdisonAccount.BillingPeriod AND \r\n                      ConEd.UploadConEdisonMeter.BillingPeriodRevision = ConEd.UploadConEdisonAccount.BillingPeriodRevision AND \r\n                      ConEd.UploadConEdisonMeter.AccountNumber = ConEd.UploadConEdisonAccount.AccountNumber\r\nWHERE (ConEd.UploadConEdisonAccount.UploadConEdisonAccountSeqid IS NULL)\r\n--\r\n--\tRemove all meter billings that do not have an account bill.  This can occur from problematic data that is reported incorrectly\r\n--\tfrom Con Edsion data.  The net zero transactions are their way of correcting incorrect reporting within their system.\r\n--\r\ndelete from ConEd.UploadConEdisonMeter\r\nFROM ConEd.UploadConEdisonMeter LEFT JOIN\r\n                      ConEd.UploadConEdisonAccount ON ConEd.UploadConEdisonMeter.BillingPeriod = ConEd.UploadConEdisonAccount.BillingPeriod AND \r\n                      ConEd.UploadConEdisonMeter.BillingPeriodRevision = ConEd.UploadConEdisonAccount.BillingPeriodRevision AND \r\n                      ConEd.UploadConEdisonMeter.AccountNumber = ConEd.UploadConEdisonAccount.AccountNumber\r\nWHERE (ConEd.UploadConEdisonAccount.UploadConEdisonAccountSeqid IS NULL)\r\nend",
      "created": "2025-06-10 21:41:26.437000",
      "last_altered": "2025-06-10 21:41:26.437000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@AuthenticatedUserID",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_IdentifyUniqueNetZeroTransactionsAndRemoveByCursor",
      "explanation": "#### 1. Overview\n\nThe stored procedure `Archive_usp_IdentifyUniqueNetZeroTransactionsAndRemoveByCursor` is designed to identify and remove duplicate net-zero transactions from a set of tables related to billing data. It uses a cursor to iterate through transactions where the sum of billed amounts, therms, and CCF (hundred cubic feet) is zero, indicating a net-zero transaction. These transactions are inserted into a temporary table and then deleted from the original tables. The procedure also identifies and removes meter billings that do not have an associated account bill, which can occur due to incorrect data reporting.\n\n#### 2. Complexity Level: Medium\n\nThe complexity level is medium due to the use of cursors, multiple table joins, and conditional logic to identify and process net-zero transactions. The procedure involves several steps, including data selection, insertion, and deletion, which require careful handling to ensure data integrity.\n\n#### 3. Input Parameters\n\n- `@AuthenticatedUserID int`: This parameter is intended to represent the ID of the user executing the procedure. However, it is not utilized within the procedure, indicating a potential oversight or future use.\n\n#### 4. Business Logic and Workflow\n\n1. **Variable Declaration**: Several variables are declared to hold transaction details during cursor processing.\n\n2. **Billing Period Selection**: The current billing period is retrieved from the `Billing.ApplicationTimeFrame` table.\n\n3. **Temporary Table Preparation**: The `ConEd.UploadConEdisonNetZeroTransactions` table is truncated to prepare for new data insertion.\n\n4. **Cursor Declaration and Processing**:\n   - A cursor `UniqueConEdisonNetZeroTransactions_record` is declared to select transactions where the sum of billed amounts, therms, and CCF is zero.\n   - The cursor iterates through these transactions, checking if they are already in the `UploadConEdisonNetZeroTransactions` table.\n   - If not, the transaction details are inserted into the table.\n\n5. **Data Deletion**:\n   - Transactions identified as net-zero are deleted from `UploadConEdisonAccount`, `UploadConEdisonCancellation`, and their preload counterparts.\n   - Meter billings without an associated account bill are identified and deleted.\n\n6. **Final Selection**: The procedure selects all records from `UploadConEdisonNetZeroTransactions` and a summary view `uvw_ConEdisonNetZeroTransactionSummary`.\n\n#### 5. Performance Considerations\n\n- **Cursor Usage**: The use of cursors can lead to performance bottlenecks, especially with large datasets, as they process rows one at a time.\n- **Table Truncation**: Truncating the `UploadConEdisonNetZeroTransactions` table is efficient for clearing data but should be used cautiously in a production environment.\n- **Indexing**: Ensure that the tables involved in joins and where clauses are properly indexed to optimize query performance.\n\n#### 6. Potential Issues or Risks\n\n- **Unused Parameter**: The `@AuthenticatedUserID` parameter is not used, which could lead to confusion or indicate incomplete implementation.\n- **Data Integrity**: The procedure deletes data from multiple tables, which could lead to data integrity issues if not handled correctly.\n- **Concurrency**: If multiple instances of this procedure run simultaneously, it could lead to race conditions or deadlocks.\n- **Error Handling**: The procedure lacks explicit error handling, which could result in unhandled exceptions and incomplete transactions.\n- **Scalability**: The use of cursors may not scale well with increasing data volumes, potentially impacting performance.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3091,
      "api_response_id": "chatcmpl-ByemCJMHOR2aZnq1OfDqaGrKnJ3gs"
    },
    "analysis_timestamp": "2025-07-29 09:36:03"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_ParseSpannedBilledUploadConEdisonAccountInfo",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_ParseSpannedBilledUploadConEdisonAccountInfo] (@Status int output)\r\nAS\r\n--\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Parse Spanned Con Edison Bills Account Upload Information\r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--* Exec:\t\t    [ConEd].[usp_ParseSpannedBilledUploadConEdisonAccountInfo]\r\n--*\r\n--* Parameter(s):         \r\n--*\t\t\t\t\tStatusCode  int output       -  Execution Return Status \r\n--*\r\n--*\r\n--* Database:\t\tEC3database\r\n--*\r\n--* Return:\t\t\t0 Success\r\n--*                 9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   06/18/2008\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 06/18/2008 PAH  First Version  \r\n--* 03/27/2006 PAH  Revised to \r\n--***************************************************************************************\r\n--\r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\ndeclare @UploadConEdisonAccountTempSummarySpannedSeqid dbo.seqid\r\n--\r\ndeclare @Notes dbo.notes\r\ndeclare @AccountNumber dbo.acctnum\r\ndeclare @FacilityName dbo.UtilityServiceAccountName\r\ndeclare @ServiceAddress dbo.addr\r\ndeclare @TariffCode dbo.tariff\r\ndeclare @PostingDate dbo.PostingDate\r\n--\r\ndeclare @NumberOfPeriodsMinusOne dbo.Accumulator\r\ndeclare @DeltaNumberOfPeriods dbo.Accumulator\r\ndeclare @BillingPeriod dbo.yyyymm \r\ndeclare @FirstPeriodCanceled dbo.yyyymm \r\ndeclare @ThermFactor dbo.ThermsFactor \r\ndeclare @FudgedThermFactor dbo.ThermsFactor \r\ndeclare @BillingPeriodRevision dbo.yyyymm \r\ndeclare @FromDate dbo.yyyymmdd \r\ndeclare @ToDate dbo.yyyymmdd \r\ndeclare @CalculatedBillingPeriodRevision dbo.yyyymm \r\ndeclare @CalculatedFromDate dbo.yyyymmdd \r\ndeclare @CalculatedToDate dbo.yyyymmdd \r\ndeclare @BilledAmount dbo.BillingAmt \r\ndeclare @BilledAmountMonthly dbo.BillingAmt \r\ndeclare @BilledAmountMonthlySum dbo.BillingAmt \r\ndeclare @BilledAmountAverage dbo.BillingAmt \r\ndeclare @BilledAmountRemainder dbo.BillingAmt \r\ndeclare @BillingPeriodDays dbo.Accumulator \r\ndeclare @BillingPeriodDaysAverage dbo.Accumulator \r\ndeclare @BillingPeriodDaysRemainder dbo.Accumulator \r\ndeclare @Therms dbo.EnergyUnit \r\ndeclare @LastPeriodTherms dbo.EnergyUnit \r\ndeclare @ThermsAverage dbo.EnergyUnit \r\ndeclare @ThermsRemainder dbo.EnergyUnit \r\ndeclare @CCF dbo.EnergyUnit \r\ndeclare @CCFAverage dbo.EnergyUnit \r\ndeclare @CCFRemainder dbo.EnergyUnit \r\ndeclare @SumAverageCCF dbo.EnergyUnit \r\ndeclare @idx int\r\ndeclare @StartingBillingPeriodDaysIncrement int\r\ndeclare @StartingBillingPeriodCCFIncrement int\r\ndeclare @StartingBillingPeriodThermsIncrement int\r\ndeclare @IncrementBillingPeriodDays int\r\ndeclare @IncrementBillingPeriodCCF int\r\ndeclare @IncrementBillingPeriodTherms int\r\n-- \r\ndeclare @BilledAmountMonthlyLastPeriod dbo.BillingAmt\r\ndeclare @ThermsMonthlyLastPeriod dbo.EnergyUnit \r\ndeclare @CCFMonthlyLastPeriod dbo.EnergyUnit \r\n\r\ndeclare @ConEdUtilityCode dbo.seqid\r\ndeclare @ApplyMonthlyPercentage  dbo.DiscountPercentage\r\ndeclare @ThermsMonthlySum  dbo.EnergyUnit \r\ndeclare @ThermsMonthly  dbo.EnergyUnit \r\ndeclare @CCFMonthly  dbo.EnergyUnit \r\ndeclare @CCFMonthlySum  dbo.EnergyUnit \r\ndeclare @TotalGasSpannedBilledPercentage dbo.DiscountPercentage\r\ndeclare @BillingCycle dbo.MonthlyBillingCycle\r\n--\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n--SELECT @BillingPeriod = BillingPeriod FROM ApplicationTimeFrame WHERE (CurrentProcessingPeriod = 'Y')\r\n--\r\n--Set @BillingPeriod = '200607'\r\n--\r\nSELECT TOP 1 @BillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonAccount\r\n--\r\nSet @BillingCycle = 'M'\r\nset @ConEdUtilityCode = 9\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\n--\r\nDECLARE SpannedGasBillCursor CURSOR FOR\r\nSELECT UploadConEdisonAccountTempSummarySpannedSeqid FROM ConEd.UploadConEdisonAccountTempSummarySpanned \r\nwhere (DeltaNumberOfPeriods > 1) --and @BillingPeriod=@BillingPeriod\r\n--\r\nOPEN SpannedGasBillCursor;\r\n--\r\nFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonAccountTempSummarySpannedSeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n--\r\nWHILE @@FETCH_STATUS = 0\r\n   BEGIN\r\n\t--\r\n\t--\tBuffer all of the columns from the spanned row for parsing purposes\r\n\t--\r\n\tSELECT  @DeltaNumberOfPeriods=DeltaNumberOfPeriods,  @BillingPeriodRevision=BillingPeriodRevision, @FirstPeriodCanceled=FirstPeriodCanceled, \r\n\t\t\t@FromDate=FromDate,@ToDate=ToDate,@BilledAmount=BilledAmount, @CCF=CCF, @Therms=Therms, @ThermFactor=ThermFactor,@BillingPeriodDays=BillingPeriodDays,\r\n\t\t\t@BillingPeriod = BillingPeriod,@AccountNumber=AccountNumber,@FacilityName=FacilityName,@ServiceAddress =ServiceAddress,@TariffCode=TariffCode,\r\n\t\t\t@PostingDate=PostingDate\r\n\tFROM ConEd.UploadConEdisonAccountTempSummarySpanned\r\n\tWHERE   (UploadConEdisonAccountTempSummarySpannedSeqid = @UploadConEdisonAccountTempSummarySpannedSeqid) \r\n\t--\r\n\t--\tAggregate the average City wide monthly gas usage percentage for the spanned row billing periods \r\n\t--\r\n\tselect @TotalGasSpannedBilledPercentage= dbo.[CalculateTotalGasSpannedBilledPercentage] (@BillingCycle,@DeltaNumberOfPeriods,@FirstPeriodCanceled,@BillingPeriodRevision)\r\n\t--\r\n\t--\tDetermine the number of periods minus 1 to pro-rate the money and usage.  The last period will derive the money and usage\r\n\t--\tby row totals - (the n-1 aggregates of money and usage)\r\n\t--\r\n\tset @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods-1\r\n\t--\r\n\t--\tInitialize the counters for the n-1 parses\r\n\t--\r\n\tset @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n\tset @CalculatedFromDate = @FromDate\r\n\tset @CalculatedToDate = @ToDate\r\n\tset @idx = 0\r\n\tset @BilledAmountMonthlySum = 0.00\r\n\tset @ThermsMonthlySum = 0\r\n\tset @CCFMonthlySum = 0\r\n\t--\r\n\twhile (@NumberOfPeriodsMinusOne > @idx)\r\n\t\tBegin\r\n\t\t\t--\r\n\t\t\t-- The @ApplyMonthlyPercentage holds the weigthed average for the particular month\r\n\t\t\t--\r\n\t\t\tselect @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t\t\t--\r\n\t\t\t-- Apply the Monthly Percentage to the CCF,Therms and Billed Amount and accumulate the weigthed average units.\r\n\t\t\t--\r\n\t\t\tset @BilledAmountMonthly = ROUND(@BilledAmount * @ApplyMonthlyPercentage,2)\r\n\t\t\tset @BilledAmountMonthlySum = @BilledAmountMonthlySum + @BilledAmountMonthly\r\n\t\t\tset @ThermsMonthly = ROUND(@Therms * @ApplyMonthlyPercentage,0)\r\n\t\t\tset @ThermsMonthlySum = @ThermsMonthlySum + @ThermsMonthly\r\n\t\t\tset @CCFMonthly = ROUND(@CCF * @ApplyMonthlyPercentage,0)\r\n\t\t\tset @CCFMonthlySum = @CCFMonthlySum + @CCFMonthly\r\n\t\t\t--\r\n\t\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" as the derived \"Todate\" for the account.\r\n\t\t\t--\r\n\t\t\tselect @CalculatedToDate = [dbo].[DetermineConEdisonBillingPeriodProjectedToDate](@CalculatedBillingPeriodRevision,@TariffCode,@ConEdUtilityCode)\r\n\t\t\t--\r\n\t\t\tprint @AccountNumber+' '+@BillingPeriodRevision+' '+@FromDate+' '+@ToDate\r\n\t\t\t--\r\n\t\t\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t\t\t--\tIt will note in EC3 that the transaction was derived.\r\n\t\t\t--\r\n\t\t\tselect @Notes = 'Therm factor '+cast(@ThermFactor as varchar(6))+\r\n\t\t\t' for '+cast(@DeltaNumberOfPeriods as varchar(6))+' First: '+@FirstPeriodCanceled +' ( '+@FromDate+') Last: '+ \r\n\t\t\t@BillingPeriodRevision +' ( '+@FromDate+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+cast(@ApplyMonthlyPercentage as varchar(10))+\r\n\t\t\t' - Total %: '+cast(@TotalGasSpannedBilledPercentage as varchar(10))\r\n\t\t\t--\r\n\t\t\t--\tINSERT the data into the table \"ConEd.UploadConEdisonAccountSummary\"\r\n\t\t\t--\r\n\t\t\tINSERT INTO ConEd.UploadConEdisonAccountSummary\r\n\t\t\t\t\t(AccountUtilityCompanySeqid, OriginalAccountNumber, NumberOfRebillTransactions, NumberOfTransactions, DerivedFromSpannedBill,BillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, \r\n\t\t\t\t\tEstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, \r\n\t\t\t\t\tTotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, \r\n\t\t\t\t\tCanceledBilledAmount, AverageRebillCostOfGasCharge,AverageRebillThermsFactor, BillingDays, BillingDate, FromDate, ToDate, BillingAction, ProcessedInTheCurrentPeriod, \r\n\t\t\t\t\tGasRateCode, DeliveryChargeAmount,TotalCCF, TotalTherms, ThermsFactor, \r\n\t\t\t\t\tCancelFromDate, CancelToDate, CancelDeliveryChargeAmount,CancelTotalCCF, CancelTotalTherms, CancelThermsFactor, ProcessEffectiveDate, Notes,\r\n\t\t\t\t    SpannedBillingPeriodRevision,SpannedFirstCanceledBillingPeriod,SpannedBilledAmount,SpannedCCF,SpannedThermFactor,SpannedTherm,SpannedMonthlyPercentage,SpannedTotalPercentage,\r\n\t\t\t\t\tFacilityName,ServiceAddress,AuthenticatedUserID)\r\n\t\t\tSELECT \r\n\t\t\t\t@ConEdUtilityCode, \r\n\t\t\t\t@AccountNumber,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,   \r\n\t\t\t\t1, --  NumberOfRebillTransactions\r\n\t\t\t\t1, --  NumberOfTransactions\r\n\t\t\t\t'Y',  -- DerivedFromSpannedBill = 'Y'\r\n\t\t\t\tUploadConEdisonAccountTempSummarySPanned.BillingPeriod, \r\n\t\t\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n\t\t\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n\t\t\t\t'ACT',  -- EstimatedOrActualBilling needs to be updated\r\n\t\t\t\t@FromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n\t\t\t\t@ToDate, --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n\t\t\t\t1, --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n\t\t\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n\t\t\t\t@BilledAmountMonthly, --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n\t\t\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n\t\t\t\t0 AS PriorRevisedBilledAmount,\r\n\t\t\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n\t\t\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n\t\t\t\t0 AS AverageRebillCostOfGasCharge, \r\n\t\t\t\t1.00 AS AverageRebillThermsFactor, \r\n\t\t\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t\t\t[dbo].ConvertDateToYYYYMMDD (@PostingDate), -- BillingDate\r\n\t\t\t\t@CalculatedFromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n\t\t\t\t@CalculatedToDate, -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n\t\t\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END, -- 'O' as BillingAction, --@BillingPeriod\r\n\t\t\t\t'N' AS ProcessedInTheCurrentPeriod, \r\n\t\t\t\tUploadConEdisonAccountTempSummarySPanned.TariffCode, \r\n\t\t\t\t@BilledAmountMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n\t\t\t\t@CCFMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n\t\t\t\t@ThermsMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n\t\t\t\tCASE @CCFMonthly WHEN 0 THEN 1.0000 ELSE round(@ThermsMonthly*1.0 / @CCFMonthly,4) END,--  IsNull(UploadConEdisonAccountTempSummarySPanned.ThermFactor,1.0) AS ThermsFactor,\r\n\t\t\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n\t\t\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n\t\t\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n\t\t\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n\t\t\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n\t\t\t\t1.0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n\t\t\t\t[dbo].ConvertDateToYYYYMMDD (GETDATE()), -- ProcessEffectiveDate\r\n\t\t\t\t@Notes,\r\n\t\t\t    @BillingPeriodRevision,@FirstPeriodCanceled,@BilledAmount,@CCF,@ThermFactor,@Therms,@ApplyMonthlyPercentage,@TotalGasSpannedBilledPercentage,\r\n\t\t\t\t@FacilityName,@ServiceAddress,\r\n\t\t\t\t1 -- AuthenticatedUserID\r\n\t\t\tFROM ConEd.UploadConEdisonAccountTempSummarySpanned\r\n\t\t\tWHERE   (UploadConEdisonAccountTempSummarySpannedSeqid = @UploadConEdisonAccountTempSummarySpannedSeqid) \r\n\t\t\t--\r\n\t\t\t--\tSet up for the next the Revised Billing Period row.\r\n\t\t\t--\r\n\t\t\tset @SumAverageCCF = @SumAverageCCF + @CCFAverage \t  \r\n\t\t\tset @idx = @idx + 1\r\n\t\t\t--\r\n\t\t\t--\tCalculate the next the Revised Billing Period row.\r\n\t\t\tselect @CalculatedBillingPeriodRevision = [dbo].[CalculateNextBillingPeriod]  (@CalculatedBillingPeriodRevision,@BillingCycle)\r\n\t\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n\t\t\tselect @CalculatedFromDate = [dbo].[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision,@TariffCode,@ConEdUtilityCode)\r\n\t\t\t--\r\n\t\t\t--\tProcess the next Revised Billing Period row\r\n\t\t\t--\r\n\t\tEnd\r\n\t--\r\n\t--\tFinish up the last period's processing\r\n\t--\r\n\t--\tUse the (Nth -1) periods @CalculatedToDate as the \"FromDate\" and the acutal \"ToDate\" from the spanned record as the \"ToDate\"\r\n\t--\r\n\tselect @CalculatedFromDate = @CalculatedToDate\r\n\tselect @CalculatedToDate = @ToDate\r\n\t--\r\n\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\t--\r\n\tselect @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t--\r\n\t--\tDerive the net changes to avoid rounding errors\r\n\t--\r\n\tset @BilledAmountMonthlyLastPeriod = @BilledAmount - @BilledAmountMonthlySum\r\n\tset @ThermsMonthlyLastPeriod = @Therms - @ThermsMonthlySum\r\n\tset @CCFMonthlyLastPeriod = @CCF  - @CCFMonthlySum\r\n\t--\r\n\t--\tprint @AccountNumber+' '+@BillingPeriodRevision+' '+@FromDate+' '+@ToDate\r\n\t--\r\n\t--\r\n\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t--\tIt will note in EC3 that the transaction was derived.\r\n\t--\r\n\tselect @Notes = 'Therm factor '+cast(@ThermFactor as varchar(6))+\r\n\t' for '+cast(@DeltaNumberOfPeriods as varchar(6))+' First: '+@FirstPeriodCanceled +' ( '+@FromDate+') Last: '+ \r\n\t@BillingPeriodRevision +' ( '+@FromDate+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+cast(@ApplyMonthlyPercentage as varchar(10))+\r\n\t' - Total %: '+cast(@TotalGasSpannedBilledPercentage as varchar(10))\r\n\t--\r\n\t--\tINSERT the data into the table \"ConEd.UploadConEdisonAccountSummary\"\r\n\t--\r\n\tINSERT INTO ConEd.UploadConEdisonAccountSummary\r\n\t\t\t(AccountUtilityCompanySeqid, OriginalAccountNumber, NumberOfRebillTransactions, NumberOfTransactions, DerivedFromSpannedBill,BillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, \r\n\t\t\tEstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, \r\n\t\t\tTotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, \r\n\t\t\tCanceledBilledAmount, AverageRebillCostOfGasCharge,AverageRebillThermsFactor, BillingDays, BillingDate, FromDate, ToDate, BillingAction, ProcessedInTheCurrentPeriod, \r\n\t\t\tGasRateCode, DeliveryChargeAmount,TotalCCF, TotalTherms, ThermsFactor, \r\n\t\t\tCancelFromDate, CancelToDate, CancelDeliveryChargeAmount,CancelTotalCCF, CancelTotalTherms, CancelThermsFactor, ProcessEffectiveDate, Notes,\r\n\t\t    SpannedBillingPeriodRevision,SpannedFirstCanceledBillingPeriod,SpannedBilledAmount,SpannedCCF,SpannedThermFactor,SpannedTherm,SpannedMonthlyPercentage,SpannedTotalPercentage,\r\n\t\t\tFacilityName,ServiceAddress,AuthenticatedUserID)\r\n\tSELECT \r\n\t\t@ConEdUtilityCode,\r\n\t\t@AccountNumber,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,\r\n\t\t1, --  NumberOfRebillTransactions\r\n\t\t1, --  NumberOfTransactions\r\n\t\t'Y',  -- DerivedFromSpannedBill = 'Y'\r\n\t\tUploadConEdisonAccountTempSummarySPanned.BillingPeriod, \r\n\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n\t\t'ACT',  -- EstimatedOrActualBilling needs to be upodated\r\n\t\t@FromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n\t\t@ToDate, --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n\t\t[dbo].[CalculateDeltaBillingPeriods] (\r\n\t\t\t\t\t\t\t\t\t\t\t  [dbo].[CalculateNextBillingPeriod](\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[dbo].DetermineConEdisonBillingPeriodProjected(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@CalculatedFromDate,@TariffCode,@ConEdUtilityCode),@BillingCycle)\r\n\t\t\t\t\t\t\t\t\t\t\t,[dbo].DetermineConEdisonBillingPeriodProjected(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@CalculatedToDate,@TariffCode,@ConEdUtilityCode),\r\n\t\t\t\t\t\t\t\t\t\t\t@BillingCycle), --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n\t\t@BilledAmountMonthlyLastPeriod, --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n\t\t0 AS PriorRevisedBilledAmount,\r\n\t\t@BilledAmountMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n\t\t0 AS AverageRebillCostOfGasCharge, \r\n\t\t1.00 AS AverageRebillThermsFactor, \r\n\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), --IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t[dbo].ConvertDateToYYYYMMDD (@PostingDate), -- BillingDate\r\n\t\t@CalculatedFromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n\t\t@CalculatedToDate, -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END, -- 'O' as BillingAction, \r\n\t\t'N' AS ProcessedInTheCurrentPeriod, \r\n\t\tUploadConEdisonAccountTempSummarySPanned.TariffCode, \r\n\t\t@BilledAmountMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n\t\t@CCFMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n\t\t@ThermsMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n\t\tCASE @CCFMonthlyLastPeriod WHEN 0 THEN 0 ELSE round(@ThermsMonthlyLastPeriod*1.0 / @CCFMonthlyLastPeriod,4) END,--  IsNull(UploadConEdisonAccountTempSummarySPanned.ThermFactor,1.0) AS ThermsFactor,\r\n\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n\t\t1.0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n\t\t[dbo].ConvertDateToYYYYMMDD (GETDATE()), -- ProcessEffectiveDate\r\n\t\t@Notes,\r\n\t    @BillingPeriodRevision,@FirstPeriodCanceled,@BilledAmount,@CCF,@ThermFactor,@Therms,@ApplyMonthlyPercentage,@TotalGasSpannedBilledPercentage,\r\n\t\tFacilityName,ServiceAddress,\r\n\t\t1 -- AuthenticatedUserID\r\n\tFROM ConEd.UploadConEdisonAccountTempSummarySpanned\r\n\tWHERE   (UploadConEdisonAccountTempSummarySpannedSeqid = @UploadConEdisonAccountTempSummarySpannedSeqid) \r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\n\tFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonAccountTempSummarySpannedSeqid\r\n   END\r\n\r\nCLOSE SpannedGasBillCursor;\r\nDEALLOCATE SpannedGasBillCursor;",
      "created": "2025-06-10 21:41:26.453000",
      "last_altered": "2025-06-10 21:41:26.453000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@Status",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_ParseSpannedBilledUploadConEdisonAccountInfo",
      "explanation": "#### 1. Overview\n\nThe stored procedure `[ConEd].[Archive_usp_ParseSpannedBilledUploadConEdisonAccountInfo]` is designed to process and parse spanned billing records from Con Edison accounts. It handles billing records that span multiple periods, calculates prorated amounts for each period, and inserts the parsed data into a summary table. The procedure uses a cursor to iterate over records that span more than one billing period, calculates prorated billing amounts, and inserts detailed records into the `ConEd.UploadConEdisonAccountSummary` table.\n\n#### 2. Complexity Level: High\n\nThe complexity of this stored procedure is high due to the following reasons:\n- It involves multiple calculations and transformations of billing data.\n- It uses a cursor to iterate over potentially large datasets.\n- It involves several custom functions for calculations, which adds layers of complexity.\n- It handles intricate business logic related to billing periods and prorated calculations.\n\n#### 3. Input Parameters\n\n- `@Status int output`: This is an output parameter intended to return the execution status of the procedure. It is expected to return `0` for success and `9` for failure.\n\n#### 4. Business Logic and Workflow\n\n1. **Variable Declarations**: The procedure begins by declaring numerous variables to store intermediate data, such as account numbers, billing amounts, and calculated percentages.\n\n2. **Set Defaults**: It sets default values for some variables, such as `@BillingPeriod` and `@BillingCycle`.\n\n3. **Cursor Declaration and Initialization**: A cursor named `SpannedGasBillCursor` is declared to select records from `ConEd.UploadConEdisonAccountTempSummarySpanned` where the `DeltaNumberOfPeriods` is greater than 1, indicating that the billing spans multiple periods.\n\n4. **Cursor Processing**:\n   - The cursor iterates over each spanned billing record.\n   - For each record, it buffers necessary columns into local variables.\n   - It calculates the total gas spanned billed percentage using a custom function.\n   - It initializes counters and sums for prorated calculations.\n\n5. **Prorated Calculations**:\n   - For each period (except the last), it calculates prorated amounts for billed amounts, therms, and CCF using weighted averages.\n   - It inserts these prorated records into the `ConEd.UploadConEdisonAccountSummary` table.\n\n6. **Final Period Processing**:\n   - For the last period, it calculates the remaining amounts to ensure no rounding errors.\n   - It inserts the final prorated record into the summary table.\n\n7. **Cursor Cleanup**: The cursor is closed and deallocated after processing all records.\n\n#### 5. Performance Considerations\n\n- **Cursor Usage**: The use of a cursor can lead to performance bottlenecks, especially with large datasets. Cursors are generally slower than set-based operations.\n- **Function Calls**: The procedure makes multiple calls to custom functions, which can add overhead and affect performance.\n- **Transaction Management**: There is no explicit transaction management, which could lead to partial updates in case of failure.\n\n#### 6. Potential Issues or Risks\n\n- **Error Handling**: The procedure lacks error handling mechanisms, which could lead to unhandled exceptions and incomplete processing.\n- **Concurrency**: Without proper locking or transaction management, there is a risk of data inconsistency if multiple instances of the procedure run concurrently.\n- **Scalability**: The use of cursors and multiple function calls may not scale well with large datasets, leading to performance degradation.\n- **Data Integrity**: The procedure assumes that the data in the source tables is accurate and complete. Any discrepancies in the source data could lead to incorrect calculations and summaries.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 6381,
      "api_response_id": "chatcmpl-Byemqw7vMKczqcZ9ZWxq2YSCebZOZ"
    },
    "analysis_timestamp": "2025-07-29 09:36:31"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_ParseSpannedBilledUploadConEdisonCancellationInfo",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_ParseSpannedBilledUploadConEdisonCancellationInfo] (@Status int output)\r\nAS\r\n--\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Parse Spanned Con Edison Bills Cancellation Upload Information\r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--* Exec:\t\t    [ConEd].[usp_ParseSpannedBilledUploadConEdisonCancellationInfo]\r\n--*\r\n--* Parameter(s):         \r\n--*\t\t\t\t\tStatusCode  int output       -  Execution Return Status \r\n--*\r\n--*\r\n--* Database:\t\tEC3database\r\n--*\r\n--* Return:\t\t\t0 Success\r\n--*                 9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   06/18/2008\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 06/18/2008 PAH  First Version  \r\n--* 03/27/2006 PAH  Revised to \r\n--***************************************************************************************\r\n--\r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\ndeclare @UploadConEdisonCancellationTempSummarySpannedSeqid dbo.seqid\r\n--\r\ndeclare @Notes dbo.notes\r\ndeclare @AccountNumber dbo.acctnum\r\ndeclare @FacilityName dbo.UtilityServiceAccountName\r\ndeclare @ServiceAddress dbo.addr\r\ndeclare @CancelTariffCode dbo.tariff\r\ndeclare @PostingDate dbo.PostingDate\r\n--\r\ndeclare @NumberOfPeriodsMinusOne dbo.Accumulator\r\ndeclare @DeltaNumberOfPeriods dbo.Accumulator\r\ndeclare @BillingPeriod dbo.yyyymm \r\ndeclare @FirstPeriodCanceled dbo.yyyymm \r\ndeclare @CancelThermFactor dbo.ThermsFactor \r\ndeclare @FudgedThermFactor dbo.ThermsFactor \r\ndeclare @BillingPeriodRevision dbo.yyyymm \r\ndeclare @CancelFromDate dbo.yyyymmdd \r\ndeclare @CancelToDate dbo.yyyymmdd \r\ndeclare @CalculatedBillingPeriodRevision dbo.yyyymm \r\ndeclare @CalculatedFromDate dbo.yyyymmdd \r\ndeclare @CalculatedToDate dbo.yyyymmdd \r\ndeclare @CancelBilledAmount dbo.BillingAmt \r\ndeclare @CancelBilledAmountMonthly dbo.BillingAmt \r\ndeclare @CancelBilledAmountMonthlySum dbo.BillingAmt \r\ndeclare @CancelBilledAmountAverage dbo.BillingAmt \r\ndeclare @CancelBilledAmountRemainder dbo.BillingAmt \r\ndeclare @CancelBillingPeriodDays dbo.Accumulator \r\ndeclare @CancelBillingPeriodDaysAverage dbo.Accumulator \r\ndeclare @CancelBillingPeriodDaysRemainder dbo.Accumulator \r\ndeclare @CancelTherms dbo.EnergyUnit \r\ndeclare @CancelLastPeriodTherms dbo.EnergyUnit \r\ndeclare @CancelThermsAverage dbo.EnergyUnit \r\ndeclare @CancelThermsRemainder dbo.EnergyUnit \r\ndeclare @CancelCCF dbo.EnergyUnit \r\ndeclare @CancelCCFAverage dbo.EnergyUnit \r\ndeclare @CancelCCFRemainder dbo.EnergyUnit \r\ndeclare @CancelSumAverageCCF dbo.EnergyUnit \r\ndeclare @idx int\r\ndeclare @StartingBillingPeriodDaysIncrement int\r\ndeclare @StartingBillingPeriodCCFIncrement int\r\ndeclare @StartingBillingPeriodThermsIncrement int\r\ndeclare @IncrementBillingPeriodDays int\r\ndeclare @IncrementBillingPeriodCCF int\r\ndeclare @IncrementBillingPeriodTherms int\r\n-- \r\ndeclare @CancelBilledAmountMonthlyLastPeriod dbo.BillingAmt\r\ndeclare @CancelThermsMonthlyLastPeriod dbo.EnergyUnit \r\ndeclare @CancelCCFMonthlyLastPeriod dbo.EnergyUnit \r\n\r\ndeclare @ApplyMonthlyPercentage  dbo.DiscountPercentage\r\ndeclare @CancelThermsMonthlySum  dbo.EnergyUnit \r\ndeclare @CancelThermsMonthly  dbo.EnergyUnit \r\ndeclare @CancelCCFMonthly  dbo.EnergyUnit \r\ndeclare @CancelCCFMonthlySum  dbo.EnergyUnit \r\ndeclare @TotalGasSpannedBilledPercentage dbo.DiscountPercentage\r\ndeclare @BillingCycle dbo.MonthlyBillingCycle\r\ndeclare @ConEdUtilityCode dbo.Seqid\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n--SELECT @BillingPeriod = BillingPeriod FROM ApplicationTimeFrame WHERE (CurrentProcessingPeriod = 'Y')\r\n--\r\n--Set @BillingPeriod = '200607'\r\nSELECT TOP 1 @BillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonCancellation\r\n--\r\nset @ConEdUtilityCode = 9\r\nSet @BillingCycle = 'M'\r\n--\r\nDECLARE SpannedGasBillCursor CURSOR FOR\r\nSELECT UploadConEdisonCancellationTempSummarySpannedSeqid FROM ConEd.UploadConEdisonCancellationTempSummarySpanned \r\nwhere (DeltaNumberOfPeriods > 1) --and @BillingPeriod=@BillingPeriod\r\n--\r\nOPEN SpannedGasBillCursor;\r\n--\r\nFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonCancellationTempSummarySpannedSeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.  UploadConEdisonCancellationTempSummarySpannedSeqid\r\n--\r\nWHILE @@FETCH_STATUS = 0\r\n   BEGIN\r\n\t--\r\n\tSELECT  @DeltaNumberOfPeriods=DeltaNumberOfPeriods,  @BillingPeriodRevision=BillingPeriodRevision, @FirstPeriodCanceled=FirstPeriodCanceled, \r\n\t\t\t@CancelFromDate=CancelFromDate,@CancelToDate=CancelToDate,@CancelBilledAmount=CancelBilledAmount, @CancelCCF=CancelCCF, \r\n\t\t\t@CancelTherms=CancelTherms, @CancelThermFactor=CancelThermFactor,@CancelBillingPeriodDays=CancelBillingPeriodDays,\r\n\t\t\t@BillingPeriod = BillingPeriod,@AccountNumber=AccountNumber,@FacilityName=FacilityName,@ServiceAddress =ServiceAddress,\r\n\t\t\t@CancelTariffCode=CancelTariffCode,@PostingDate=PostingDate\r\n\tFROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n\tWHERE  (UploadConEdisonCancellationTempSummarySpannedSeqid = @UploadConEdisonCancellationTempSummarySpannedSeqid) \r\n\t--\r\n--\tSELECT  'Spanned Information',@DeltaNumberOfPeriods, @BillingPeriodRevision,@FirstPeriodCanceled,@CancelFromDate,@CancelFromDate,@BillingPeriodDays,@BilledAmount,@CCF,@Therms,@ThermFactor,@BillingPeriodDays\r\n\t--\r\n\tselect @TotalGasSpannedBilledPercentage= dbo.[CalculateTotalGasSpannedBilledPercentage] (@BillingCycle,@DeltaNumberOfPeriods,@FirstPeriodCanceled,@BillingPeriodRevision)\r\n\t--select @TotalGasSpannedBilledPercentage\r\n\t\r\n\t-- Correction for zero or negative numbers\r\n\tBegin\r\n\t\t--\r\n\t\tset @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods-1\r\n\t\t--\r\n\t\tset @CancelBillingPeriodDaysAverage = (@CancelBillingPeriodDays / @DeltaNumberOfPeriods)\r\n\t\tset @CancelBillingPeriodDaysRemainder = @CancelBillingPeriodDays - (@CancelBillingPeriodDaysAverage * @DeltaNumberOfPeriods)\r\n\t\tset @StartingBillingPeriodDaysIncrement = @DeltaNumberOfPeriods - @CancelBillingPeriodDaysRemainder\r\n\t\t--\r\n\t\t--\tInitialize the counters for the n-1 parses\r\n\t\t--\r\n\t\tset @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n\t\tset @CalculatedFromDate = @CancelFromDate\r\n\t\tset @CalculatedToDate = @CancelToDate\r\n\t\tset @idx = 0\r\n\t\tset @CancelBilledAmountMonthlySum = 0.00\r\n\t\tset @CancelThermsMonthlySum = 0\r\n\t\tset @CancelCCFMonthlySum = 0\r\n\t\t--\r\n\t\twhile (@NumberOfPeriodsMinusOne > @idx)\r\n\t\t\tBegin\r\n\t\t\t\t--\r\n\t\t\t\tselect @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t\t\t\t--\r\n\t\t\t\t-- Apply the Monthly Percentage to the CCF,Therms and Billed Amount and accumulate the weigthed average units.\r\n\t\t\t\t--\r\n\t\t\t\tset @CancelBilledAmountMonthly = ROUND(@CancelBilledAmount * @ApplyMonthlyPercentage,2)\r\n\t\t\t\tset @CancelBilledAmountMonthlySum = @CancelBilledAmountMonthlySum + @CancelBilledAmountMonthly\r\n\t\t\t\tset @CancelThermsMonthly = ROUND(@CancelTherms * @ApplyMonthlyPercentage,0)\r\n\t\t\t\tset @CancelThermsMonthlySum = @CancelThermsMonthlySum + @CancelThermsMonthly\r\n\t\t\t\tset @CancelCCFMonthly = ROUND(@CancelCCF * @ApplyMonthlyPercentage,0)\r\n\t\t\t\tset @CancelCCFMonthlySum = @CancelCCFMonthlySum + @CancelCCFMonthly\r\n\t\t\t\t--\r\n\t\t\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" as the derived \"Todate\" for the account.\r\n\t\t\t\t--\r\n\t\t\t\tselect @CalculatedToDate = [dbo].[DetermineConEdisonBillingPeriodProjectedToDate](@CalculatedBillingPeriodRevision,@CancelTariffCode,@ConEdUtilityCode)\r\n\t\t\t\t--\r\n\t\t\t\tselect @Notes = 'Therm factor '+cast(@CancelThermFactor as varchar(6))+\r\n\t\t\t\t' for '+cast(@DeltaNumberOfPeriods as varchar(6))+' First: '+@FirstPeriodCanceled +' ( '+@CancelFromDate+') Last: '+ \r\n\t\t\t\t@BillingPeriodRevision +' ( '+@CancelFromDate+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+cast(@ApplyMonthlyPercentage as varchar(10))+\r\n\t\t\t\t' - Total %: '+cast(@TotalGasSpannedBilledPercentage as varchar(10))\r\n\t\t\t\t--\r\n\t\t\t\t--  \r\n\t\t\t\t--\r\n\t\t\t\tINSERT INTO ConEd.UploadConEdisonCancellationSummary\r\n\t\t\t\t\t\t(AccountUtilityCompanySeqid, OriginalAccountNumber, NumberOfCancelTransactions, NumberOfTransactions, DerivedFromSpannedBill,BillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, \r\n\t\t\t\t\t\tEstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, \r\n\t\t\t\t\t\tTotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, \r\n\t\t\t\t\t\tCanceledBilledAmount, AverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, FromDate, ToDate, BilledAmount, BillingAction, ProcessedInTheCurrentPeriod, \r\n\t\t\t\t\t\tGasRateCode, DeliveryChargeAmount,TotalCCF, TotalTherms, ThermsFactor, \r\n\t\t\t\t\t\tCancelFromDate, CancelToDate, CancelDeliveryChargeAmount,CancelTotalCCF, CancelTotalTherms, CancelThermsFactor,CancelBillingDays,Notes,\r\n\t\t\t\t\t\tSpannedBillingPeriodRevision,SpannedFirstCanceledBillingPeriod,SpannedBilledAmount,SpannedCCF,SpannedThermFactor,SpannedTherm,SpannedMonthlyPercentage,SpannedTotalPercentage,\r\n\t\t\t\t\t\tBillingDate,ProcessEffectiveDate,FacilityName,ServiceAddress)\r\n\t\t\t\tSELECT \r\n\t\t\t\t\t'9',\r\n\t\t\t\t\t@AccountNumber,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,  \r\n\t\t\t\t\t1, --  NumberOfCancelTransactions\r\n\t\t\t\t\t1, --  NumberOfTransactions\r\n\t\t\t\t\t'Y',  -- DerivedFromSpannedBill = 'Y'\r\n\t\t\t\t\tBillingPeriod, \r\n\t\t\t\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n\t\t\t\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n\t\t\t\t\t'ACT',  -- EstimatedOrActualBilling needs to be upodated\r\n\t\t\t\t\t@CancelFromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n\t\t\t\t\t@CancelToDate, --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n\t\t\t\t\t[dbo].[CalculateDeltaBillingPeriods] (\r\n\t\t\t\t\t\t  [dbo].[CalculateNextBillingPeriod](\r\n\t\t\t\t\t\t\t\t\t\t\t [dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedFromDate,@CancelTariffCode,@ConEdUtilityCode),@BillingCycle)\r\n\t\t\t\t\t\t\t\t\t\t\t,[dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedToDate,@CancelTariffCode,@ConEdUtilityCode)\r\n\t\t\t\t\t\t\t\t\t\t\t,@BillingCycle), --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n\t\t\t\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate),-- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n\t\t\t\t\t0, --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n\t\t\t\t\t@CancelBilledAmountMonthly, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n\t\t\t\t\t0 AS PriorRevisedBilledAmount,\r\n\t\t\t\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n\t\t\t\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n\t\t\t\t\t0 AS AverageRebillCostOfGasCharge, \r\n\t\t\t\t\t1.00 AS AverageRebillThermsFactor, \r\n\t\t\t\t\t0,-- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t\t\t\tnull,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n\t\t\t\t\tnull, -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n\t\t\t\t\t@CancelBilledAmountMonthly, --  (IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) as  - IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0)) as BilledAmount,\r\n\t\t\t\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END, -- as BillingAction, \r\n\t\t\t\t\t'N' AS ProcessedInTheCurrentPeriod, \r\n\t\t\t\t\t@CancelTariffCode, \r\n\t\t\t\t\t@CancelBilledAmountMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n\t\t\t\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n\t\t\t\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n\t\t\t\t\t1.000, --  IsNull(UploadConEdisonAccountTempSummarySPanned.ThermFactor,1.0) AS ThermsFactor,\r\n\t\t\t\t\t@CalculatedFromDate, --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n\t\t\t\t\t@CalculatedToDate, --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n\t\t\t\t\t@CancelBilledAmountMonthly, --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n\t\t\t\t\t@CancelCCFMonthly, --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n\t\t\t\t\t@CancelThermsMonthly, --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n\t\t\t\t\tCASE @CancelCCFMonthly WHEN 0 THEN 1.0000 ELSE round(@CancelThermsMonthly*1.0 / @CancelCCFMonthly,4) END, --  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n\t\t\t\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t\t\t\t@Notes,\r\n\t\t\t\t\t@BillingPeriodRevision,@FirstPeriodCanceled,@CancelBilledAmount,@CancelCCF,@CancelThermFactor,@CancelTherms,@ApplyMonthlyPercentage,@TotalGasSpannedBilledPercentage,\r\n\t\t\t\t\t[dbo].ConvertDateToYYYYMMDD (@PostingDate),[dbo].ConvertDateToYYYYMMDD (Getdate()),\r\n\t\t\t\t\tFacilityName,ServiceAddress\r\n\t\t\t\tFROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n\t\t\t\tWHERE   (UploadConEdisonCancellationTempSummarySpannedSeqid = @UploadConEdisonCancellationTempSummarySpannedSeqid) \r\n\r\n\t\t\t\t--\r\n\t\t\t\t\t\tset @CancelSumAverageCCF = @CancelSumAverageCCF + @CancelCCFAverage \t  \r\n\t\t\t\t\t\tset @idx = @idx + 1\r\n\t\t\t\t--\r\n\t\t\t\t--\tCalculate the next the Revised Billing Period row.\r\n\t\t\t\tselect @CalculatedBillingPeriodRevision = [dbo].[CalculateNextBillingPeriod]  (@CalculatedBillingPeriodRevision,@BillingCycle)\r\n\t\t\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n\t\t\t\tselect @CalculatedFromDate = [dbo].[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision,@CancelTariffCode,@ConEdUtilityCode)\r\n\t\t\t\t--\r\n\t\t\t\t--\tProcess the next Revised Billing Period row\r\n\t\t\t\t--\r\n\t\tEnd\r\n\t\t--\r\n\t\t--\tFinish up the last period's processing\r\n\t\t--\r\n\t\t--\tUse the (Nth -1) periods @CalculatedToDate as the \"FromDate\" and the acutal \"ToDate\" from the spanned record as the \"ToDate\"\r\n\t\t--\r\n\t\tselect @CalculatedFromDate = @CalculatedToDate\r\n\t\tselect @CalculatedToDate = @CancelToDate\r\n\t\t--\r\n\t\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\t\t--\r\n\t\tselect @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t\t--\r\n\t\t--\tDerive the net changes to avoid rounding errors\r\n\t\t--\r\n\t\tset @CancelBilledAmountMonthlyLastPeriod = @CancelBilledAmount - @CancelBilledAmountMonthlySum\r\n\t\tset @CancelThermsMonthlyLastPeriod = @CancelTherms - @CancelThermsMonthlySum\r\n\t\tset @CancelCCFMonthlyLastPeriod = @CancelCCF  - @CancelCCFMonthlySum\r\n\r\n\tEnd\r\n\t--\r\n\tselect @Notes = 'Therm factor '+cast(@CancelThermFactor as varchar(6))+\r\n\t' for '+cast(@DeltaNumberOfPeriods as varchar(6))+' First: '+@FirstPeriodCanceled +' ( '+@CancelFromDate+') Last: '+ \r\n\t@BillingPeriodRevision +' ( '+@CancelFromDate+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+cast(@ApplyMonthlyPercentage as varchar(10))+\r\n\t' - Total %: '+cast(@TotalGasSpannedBilledPercentage as varchar(10))\r\n\t--\r\n\tINSERT INTO ConEd.UploadConEdisonCancellationSummary\r\n\t\t\t(AccountUtilityCompanySeqid, OriginalAccountNumber, NumberOfCancelTransactions, NumberOfTransactions, DerivedFromSpannedBill,BillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, \r\n\t\t\tEstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, \r\n\t\t\tTotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, \r\n\t\t\tCanceledBilledAmount, AverageRebillCostOfGasCharge,AverageRebillThermsFactor, BillingDays,  FromDate,ToDate, BilledAmount, BillingAction, ProcessedInTheCurrentPeriod, \r\n\t\t\tGasRateCode, DeliveryChargeAmount,TotalCCF, TotalTherms, ThermsFactor, \r\n\t\t\tCancelFromDate, CancelToDate, CancelDeliveryChargeAmount,CancelTotalCCF, CancelTotalTherms, CancelThermsFactor,CancelBillingDays,Notes,\r\n\t\t    SpannedBillingPeriodRevision,SpannedFirstCanceledBillingPeriod,SpannedBilledAmount,SpannedCCF,SpannedThermFactor,SpannedTherm,SpannedMonthlyPercentage,SpannedTotalPercentage,\r\n\t\t\tBillingDate,ProcessEffectiveDate,FacilityName,ServiceAddress)\r\n\tSELECT \r\n\t\t'9',\r\n\t\t@AccountNumber,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,\r\n\t\t1, --  NumberOfCancelTransactions\r\n\t\t1, --  NumberOfTransactions\r\n\t\t'Y',  -- DerivedFromSpannedBill = 'Y'\r\n\t\tBillingPeriod, \r\n\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n\t\t'ACT',  -- EstimatedOrActualBilling needs to be upodated\r\n\t\t@CancelFromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n\t\t@CancelToDate, --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n\t\t\t\t\t[dbo].[CalculateDeltaBillingPeriods] (\r\n\t\t\t\t\t\t  [dbo].[CalculateNextBillingPeriod](\r\n\t\t\t\t\t\t\t\t\t\t\t [dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedFromDate,@CancelTariffCode,@ConEdUtilityCode),@BillingCycle)\r\n\t\t\t\t\t\t\t\t\t\t\t,[dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedToDate,@CancelTariffCode,@ConEdUtilityCode)\r\n\t\t\t\t\t\t\t\t\t\t\t,@BillingCycle), --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n\t\t0, --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n\t\t@CancelBilledAmountMonthlyLastPeriod, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n\t\t0 AS PriorRevisedBilledAmount,\r\n\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n\t\t0 AS AverageRebillCostOfGasCharge, \r\n\t\t1.00 AS AverageRebillThermsFactor, \r\n\t\t0, --IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\tnull,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n\t\tnull, -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n\t\t@CancelBilledAmountMonthlyLastPeriod, --  (IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) as  - IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0)) as BilledAmount,\r\n\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END, -- 'O' as BillingAction, \r\n\t\t'N' AS ProcessedInTheCurrentPeriod, \r\n\t\t@CancelTariffCode, \r\n\t\t@CancelBilledAmountMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n\t\t1.0,\r\n\t\t@CalculatedFromDate, --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n\t\t@CalculatedToDate, --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n\t\t@CancelCCFMonthlyLastPeriod, --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n\t\t@CancelThermsMonthlyLastPeriod, --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n\t\tCASE @CancelCCFMonthlyLastPeriod WHEN 0 THEN 1.0000 ELSE round(@CancelThermsMonthlyLastPeriod*1.0 / @CancelCCFMonthlyLastPeriod,4) END,--  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate),-- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t@Notes,\r\n\t    @BillingPeriodRevision,@FirstPeriodCanceled,@CancelBilledAmount,@CancelCCF,@CancelThermFactor,@CancelTherms,@ApplyMonthlyPercentage,@TotalGasSpannedBilledPercentage,\r\n\t\t[dbo].ConvertDateToYYYYMMDD (@PostingDate),[dbo].ConvertDateToYYYYMMDD (Getdate()),FacilityName,ServiceAddress\r\n\r\n\tFROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n\tWHERE   (UploadConEdisonCancellationTempSummarySpannedSeqid = @UploadConEdisonCancellationTempSummarySpannedSeqid) \r\n\r\nFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonCancellationTempSummarySpannedSeqid\r\nEND\r\n\r\nCLOSE SpannedGasBillCursor;\r\nDEALLOCATE SpannedGasBillCursor;",
      "created": "2025-06-10 21:41:26.470000",
      "last_altered": "2025-06-10 21:41:26.470000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@Status",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_ParseSpannedBilledUploadConEdisonCancellationInfo",
      "explanation": "#### 1. Overview\n\nThe stored procedure `Archive_usp_ParseSpannedBilledUploadConEdisonCancellationInfo` is designed to process and archive cancellation information for spanned Con Edison bills. It parses data from temporary tables, calculates various billing metrics, and inserts the processed data into a summary table. The procedure handles multiple billing periods, calculates adjustments, and ensures that the data is correctly archived for further analysis or reporting.\n\n#### 2. Complexity Level: High\n\nThe complexity of this stored procedure is high due to several factors:\n- It involves multiple calculations and adjustments for billing periods.\n- It uses a cursor to iterate over potentially large datasets.\n- It involves complex business logic with multiple nested operations and function calls.\n- It handles a variety of data types and requires precise calculations to avoid rounding errors.\n\n#### 3. Input Parameters\n\n- `@Status int output`: This is an output parameter intended to return the execution status of the procedure. It is set to indicate success (0) or failure (9).\n\n#### 4. Business Logic and Workflow\n\n1. **Variable Declarations**: The procedure begins by declaring numerous variables to store intermediate data and results. These variables are used for calculations related to billing periods, amounts, and energy units.\n\n2. **Set Defaults**: Initial values are set for some variables, such as `@BillingPeriod` and `@ConEdUtilityCode`.\n\n3. **Cursor Initialization**: A cursor named `SpannedGasBillCursor` is declared and opened to iterate over records in the `ConEd.UploadConEdisonCancellationTempSummarySpanned` table where `DeltaNumberOfPeriods` is greater than 1.\n\n4. **Cursor Processing**: \n   - For each record, the procedure fetches relevant data into local variables.\n   - It calculates the total gas spanned billed percentage using a user-defined function.\n   - It performs a series of calculations to distribute the billed amounts, therms, and CCFs across multiple periods, adjusting for rounding errors.\n   - It inserts the calculated data into the `ConEd.UploadConEdisonCancellationSummary` table.\n\n5. **Final Adjustments**: After processing all but the last period, the procedure makes final adjustments to ensure that the last period's data is accurately calculated and inserted.\n\n6. **Cursor Cleanup**: The cursor is closed and deallocated after processing all records.\n\n#### 5. Performance Considerations\n\n- **Cursor Usage**: The use of a cursor can lead to performance bottlenecks, especially if the dataset is large. Cursors process rows one at a time, which is less efficient than set-based operations.\n- **Complex Calculations**: The procedure performs numerous calculations and function calls, which can be computationally expensive.\n- **Table Scans**: Depending on the size of the tables and the presence of indexes, the SELECT statements might result in full table scans, impacting performance.\n\n#### 6. Potential Issues or Risks\n\n- **Rounding Errors**: The procedure includes logic to handle rounding errors, but any miscalculation could lead to inaccurate financial data.\n- **Concurrency**: If multiple instances of this procedure run simultaneously, there could be issues with data consistency or locking.\n- **Error Handling**: The procedure lacks explicit error handling mechanisms. If an error occurs, it might not be captured or logged, making troubleshooting difficult.\n- **Scalability**: As the volume of data grows, the performance issues associated with cursor usage and complex calculations might become more pronounced, affecting scalability.\n- **Dependency on External Functions**: The procedure relies on several user-defined functions. Any changes to these functions could impact the procedure's behavior and results.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 6446,
      "api_response_id": "chatcmpl-ByenJlQiNKyBqAnRp0QQfZ8zifhZW"
    },
    "analysis_timestamp": "2025-07-29 09:36:52"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_ParseSpannedBilledUploadConEdisonMeterInfo",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_ParseSpannedBilledUploadConEdisonMeterInfo] (@Status int output)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\t\r\n\tDECLARE @UploadConEdisonMeterTempSummarySpannedSeqid AS dbo.seqid, @Notes AS dbo.notes\r\n\t\t,@AccountNumber AS dbo.acctnum, @TariffCode AS dbo.tariff, @OriginalMeterNumber AS meternumber \r\n\t\t,@GasRateCode AS GasRateCode, @MeterFromReading AS MeterReadingNumber7\r\n\t\t,@MeterToReading AS MeterReadingNumber7, @MeterConstant AS MeterConstantMultiplier \r\n\t\t,@ReadingCode AS ReadingCode, @NumberOfDials AS MeterDials, @NumberOfPeriodsMinusOne AS dbo.Accumulator\r\n\t\t,@DeltaNumberOfPeriods AS dbo.Accumulator, @BillingPeriod AS dbo.yyyymm, @FirstPeriodCanceled AS dbo.yyyymm\r\n\t\t,@ThermFactor AS dbo.ThermsFactor, @BillingPeriodRevision AS dbo.yyyymm, @FromDate AS dbo.yyyymmdd \r\n\t\t,@ToDate AS dbo.yyyymmdd, @CalculatedBillingPeriodRevision AS dbo.yyyymm, @CalculatedFromDate AS dbo.yyyymmdd \r\n\t\t,@CalculatedToDate AS dbo.yyyymmdd, @Therms AS dbo.EnergyUnit, @CCF AS dbo.EnergyUnit \r\n\t\t,@CCFAverage AS dbo.EnergyUnit, @SumAverageCCF AS dbo.EnergyUnit, @idx AS INT\r\n\t\t,@MeterRolloverAdjustmentFactor AS INT, @NumberOfDialsAdjustmentFactor AS INT, @MeterHasRolledOver AS BIT\r\n\t\t,@ThermsMonthlyLastPeriod AS dbo.EnergyUnit, @CCFMonthlyLastPeriod AS dbo.EnergyUnit\r\n\t\t,@CalculatedMeterFromReading AS INT, @CalculatedMeterToReading AS INT, @CalculatedMeterConstant AS DECIMAL(7, 1)\r\n\t\t,@ConEdUtilityCode AS dbo.seqid = 9, @ApplyMonthlyPercentage AS dbo.DiscountPercentage\r\n\t\t,@ThermsMonthlySum AS dbo.EnergyUnit, @ThermsMonthly AS dbo.EnergyUnit, @CCFMonthly AS dbo.EnergyUnit \r\n\t\t,@CCFMonthlySum AS dbo.EnergyUnit, @TotalGasSpannedBilledPercentage AS dbo.DiscountPercentage\r\n\t\t,@BillingCycle AS dbo.MonthlyBillingCycle = 'M', @BillingDate AS dbo.yyyymmdd;\r\n\r\n\tSELECT TOP (1) @BillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonMeter;\r\n\r\n\tDECLARE SpannedGasBillCursor CURSOR FOR\r\n\tSELECT UploadConEdisonMeterTempSummarySpannedSeqid FROM ConEd.UploadConEdisonMeterTempSummarySpanned \r\n\tWHERE DeltaNumberOfPeriods > 1\r\n\tOPEN SpannedGasBillCursor;\r\n\tFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonMeterTempSummarySpannedSeqid\r\n\tWHILE @@FETCH_STATUS = 0\r\n\tBEGIN\r\n\t\tSELECT @AccountNumber = AccountNumber,\r\n\t\t\t@OriginalMeterNumber = MeterNumber,\r\n\t\t\t@MeterFromReading = ISNULL(FromReading, 0),\r\n\t\t\t@MeterToReading = ISNULL(ToReading, 0),\r\n\t\t\t@MeterConstant = ISNULL(MeterConstant, 1),\r\n\t\t\t@ReadingCode = ReadingCode,\r\n\t\t\t@NumberOfDials = Dials,\r\n\t\t\t@DeltaNumberOfPeriods = DeltaNumberOfPeriods, \r\n\t\t\t@BillingPeriodRevision = BillingPeriodRevision,\r\n\t\t\t@FirstPeriodCanceled = FirstPeriodCanceled, \r\n\t\t\t@FromDate = FromDate,\r\n\t\t\t@ToDate = ToDate, \r\n\t\t\t@CCF = CCF, \r\n\t\t\t@ThermFactor = ThermFactor,\r\n\t\t\t@BillingPeriod = BillingPeriod\r\n\t\tFROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n\t\tWHERE UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid;\r\n\t\r\n\t--\tAggregate the average City wide monthly gas usage percentage for the spanned row billing periods \r\n\tSELECT @TotalGasSpannedBilledPercentage = dbo.CalculateTotalGasSpannedBilledPercentage(@BillingCycle\r\n\t\t,@DeltaNumberOfPeriods, @FirstPeriodCanceled, @BillingPeriodRevision);\r\n\t\r\n\t--\tDetermine the number of periods minus 1 to pro-rate the money and usage.  The last period will derive the money and usage\r\n\t--\tby row totals - (the n-1 aggregates of money and usage)\r\n\tSET @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods-1;\r\n\t\r\n\t--\tInitialize the counters for the n-1 parses\r\n\tSELECT @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n\t\t,@CalculatedFromDate = @FromDate, @CalculatedToDate = @ToDate, @idx = 0\r\n\t\t,@ThermsMonthlySum = 0, @CCFMonthlySum = 0\r\n\t\t,@CalculatedMeterFromReading = CAST(@MeterFromReading AS INT)\r\n\t\t,@CalculatedMeterToReading = CAST(@MeterToReading AS INT)\r\n\t\t,@CalculatedMeterConstant = CAST(@MeterConstant AS DECIMAL(7, 1));\r\n\r\n\t--\r\n\tSELECT @ThermFactor = dbo.DetermineConEdisonGetThermFactorFromAccountTable(@AccountNumber, @BillingPeriodRevision)\r\n\t\t,@GasRateCode = dbo.DetermineConEdisonGetGasTariffRateFromAccountTable(@AccountNumber, @BillingPeriodRevision)\r\n\t\t,@BillingDate = dbo.ConvertDatetimeToYYYYMMDD(dbo.DetermineConEdisonGetPostingDateFromAccountTable(@AccountNumber, @BillingPeriodRevision));\r\n\t\r\n\tSET @Therms = Round(@CCF * @ThermFactor, 0);\r\n\t\r\n\tset @NumberOfDialsAdjustmentFactor = CASE \r\n\t\t\t\t\t\t\t\t\t\t\t-- Standard Gas meter has from 3 to 6 dials.  \r\n\t\t\t\t\t\t\t\t\t\t\twhen 2 < @NumberOfDials and @NumberOfDials < 7 \r\n\t\t\t\t\t\t\t\t\t\t\tthen Cast (@NumberOfDials AS int)\r\n\t\t\t\t\t\t\t\t\t\t\t-- If there are no dials reported or the number of dials is outside the \r\n\t\t\t\t\t\t\t\t\t\t\t-- range of the standard number of dials (3 to 6 dials).  The sum of the \r\n\t\t\t\t\t\t\t\t\t\t\t-- MeterFromReading + total CCF will derive a number that is equal to the \r\n\t\t\t\t\t\t\t\t\t\t\t-- number of dials - 1 raised to the power of 10 plus the MeterToReading.\r\n\t\t\t\t\t\t\t\t\t\t\telse len(CAST(@CCF+@CalculatedMeterFromReading AS VARCHAR(7)))-1\r\n\t\t\t\t\t\t\t\t\t\t END;\r\n\tSELECT @MeterHasRolledOver = 0, @MeterRolloverAdjustmentFactor = POWER(10, @NumberOfDialsAdjustmentFactor);\r\n\r\n\tIF (@CalculatedMeterToReading < @CalculatedMeterFromReading\r\n\t\tOR POWER(10, @NumberOfDialsAdjustmentFactor) < = @CCF)\r\n\tBEGIN\r\n\t\tSET @MeterHasRolledOver = 1;\r\n\tEND;\r\n\t\r\n\tWHILE(@NumberOfPeriodsMinusOne > @idx)\r\n\tBEGIN\r\n\t\t-- The @ApplyMonthlyPercentage holds the weigthed average for the particular month\r\n\t\tselect @ApplyMonthlyPercentage = dbo.[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t\t\t\r\n\t\t-- Apply the Monthly Percentage to the meter reading and derive the CCF, Therms  and accumulate the weigthed average units.\r\n\t\tset @CCFMonthly = ROUND(@CCF * @ApplyMonthlyPercentage,0)\r\n\t\tset @CCFMonthlySum = @CCFMonthlySum + @CCFMonthly\r\n\t\tset @ThermsMonthly = ROUND(@Therms * @ApplyMonthlyPercentage,0)\r\n\t\tset @ThermsMonthlySum = @ThermsMonthlySum + @ThermsMonthly\r\n\t\t\t\r\n\t\t--\tThe CCF, Therms and Meter To Reading are derived.  The CCF\r\n\t\tset @CalculatedMeterToReading = @CalculatedMeterFromReading + round(@CCFMonthly/@CalculatedMeterConstant,0)\r\n\t\tset @CalculatedMeterToReading = case when @MeterHasRolledOver = 0 then @CalculatedMeterToReading \r\n\t\t\t\t\t\t\t\t\t\t\t\telse \r\n\t\t\t\t\t\t\t\t\t\t\t\t-- \r\n\t\t\t\t\t\t\t\t\t\t\t\t-- The spanned meter reading has rolled over.  If the MeterToReading is less than @NumberOfDialsAdjustmentFactor then \r\n\t\t\t\t\t\t\t\t\t\t\t\t-- the derived MeterToReading remains unadjusted. When the sum of the @CalculatedMeterFromReading + @CCFMonthly is greater\r\n\t\t\t\t\t\t\t\t\t\t\t\t-- than the @NumberOfDialsAdjustmentFactor is subtracted to make the adjustment for the rollover meter reset.\r\n\t\t\t\t\t\t\t\t\t\t\t\t-- \r\n\t\t\t\t\t\t\t\t\t\t\t\tcase when @CalculatedMeterToReading < @MeterRolloverAdjustmentFactor then @CalculatedMeterToReading\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse @CalculatedMeterToReading - @MeterRolloverAdjustmentFactor \r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\t\t--\r\n\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" AS the derived \"Todate\" for the account.\r\n\t\t--\r\n\t\tselect @CalculatedToDate = dbo.[DetermineConEdisonBillingPeriodProjectedToDate](@CalculatedBillingPeriodRevision,@TariffCode,@ConEdUtilityCode)\r\n\t\t--\r\n\t\tprint @AccountNumber+' '+@BillingPeriodRevision+' '+@FromDate+' '+@ToDate\r\n\t\t--\r\n\t\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t\t--\tIt will note in EC3 that the transaction was derived.\r\n\t\t--\r\n\t\tselect @Notes = 'CalcTherm '+CAST(@Therms AS VARCHAR(10))+' = '+CAST(@ThermFactor AS VARCHAR(6))+' * '+CAST(@CCF AS VARCHAR(10))+\r\n\t\t' for '+CAST(@DeltaNumberOfPeriods AS VARCHAR(6))+' periods, First: '+@FirstPeriodCanceled +' ( '+@MeterFromReading+') Last: '+ \r\n\t\t@BillingPeriodRevision +' ( '+@MeterToReading+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+CAST(@ApplyMonthlyPercentage AS VARCHAR(10))+\r\n\t\t' - Total %: '+CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t\t--\r\n\t\t--\tINSERT the data into the table \"ConEd.UploadConEdisonAccountSummary\"\r\n\t\t--\r\n\t\tINSERT INTO ConEd.UploadConEdisonMeterSummary (\r\n\t\t\tAccountUtilityCompanySeqid,\r\n\t\t\tOriginalAccountNumber,\r\n\t\t\tOriginalMeterNumber,\r\n\t\t\tNumberOfTransactions, \r\n\t\t\tNumberOfRebillTransactions,\r\n\t\t\tNumberOfCancelTransactions,\r\n\t\t\tBillingPeriod,\r\n\t\t\tBillingPeriodRevision,\r\n\t\t\tFirstCancelPeriod,\r\n\t\t\tBillingAction,\r\n\t\t\tInitialCancelFromDate,\r\n\t\t\tCurrentBillingToDate,\r\n\t\t\tGasRateCode,\r\n\t\t\tFromDate,\r\n\t\t\tToDate,\r\n\t\t\tMeterFromReading,\r\n\t\t\tMeterToReading,\r\n\t\t\tCcf,\r\n\t\t\tTherms,\r\n\t\t\tThermsFactor,\r\n\t\t\tMeterConstant,\r\n\t\t\tTotalBillingDaysRebilled,\r\n\t\t\tNumberOfBillingPeriods,\r\n\t\t\tBillingDays,\r\n\t\t\tBillingDate,\r\n\t\t\tReadingCode,\r\n\t\t\tNumberOfDials,\r\n\t\t\tMeterType,\r\n\t\t\tProcessedInTheCurrentPeriod,\r\n\t\t\tProcessEffectiveDate,\r\n\t\t\tInitialPostingDate,\r\n\t\t\tAuthenticatedUserID,\r\n\t\t\tNotes,\r\n\t\t\tDerivedFromSpannedBill,\r\n\t\t\tSpannedBillingPeriodRevision,\r\n\t\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\t\tSpannedCCF,\r\n\t\t\tSpannedThermFactor,\r\n\t\t\tSpannedTherm,\r\n\t\t\tSpannedMonthlyPercentage,\r\n\t\t\tSpannedTotalPercentage,\r\n\t\t\tEstimatedOrActualBilling,\r\n\t\t\tFacilityName,\r\n\t\t\tServiceAddress)\r\n\t\tSELECT @ConEdUtilityCode,\r\n\t\t\t@AccountNumber,\r\n\t\t\t@OriginalMeterNumber, \r\n\t\t\t1,-- NumberOfTransactions, \r\n\t\t\t1,-- NumberOfRebillTransactions,\r\n\t\t\t0,-- NumberOfCancelTransactions,\r\n\t\t\t@BillingPeriod, \r\n\t\t\t@CalculatedBillingPeriodRevision,\r\n\t\t\t@CalculatedBillingPeriodRevision,\r\n\t\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END,-- BillingAction, \r\n\t\t\t@CalculatedFromDate,\r\n\t\t\t@CalculatedToDate,\r\n\t\t\t@GasRateCode,\r\n\t\t\t@CalculatedFromDate,\r\n\t\t\t@CalculatedToDate,\r\n\t\t\tCAST(@CalculatedMeterFromReading AS VARCHAR(7)),  --dbo.MeterReadingNumber\r\n\t\t\tCAST(@CalculatedMeterToReading AS VARCHAR(7)),  --dbo.MeterReadingNumber\r\n\t\t\t@CCFMonthly, \r\n\t\t\t@ThermsMonthly,\r\n\t\t\t@ThermFactor,\r\n\t\t\t@MeterConstant,\r\n\t\t\tdbo.CalculateNumberOfBillingDays(@CalculatedFromDate,@CalculatedToDate), \r\n\t\t\t1, \r\n\t\t\tdbo.CalculateNumberOfBillingDays(@CalculatedFromDate,@CalculatedToDate),\r\n\t\t\t@BillingDate, \r\n\t\t\t@ReadingCode,\r\n\t\t\t@NumberOfDials,\r\n\t\t\t'G', -- MeterType,\r\n\t\t\t'N', --ProcessedInTheCurrentPeriod\r\n\t\t\tdbo.ConvertDateToYYYYMMDD (GETDATE()), -- ProcessEffectiveDate\r\n\t\t\tgetDate(), -- InitialPostingDate\r\n\t\t\t1, --\tAuthenticatedUserID,\r\n\t\t\t@Notes,\r\n\t\t\t'Y', -- DerivedFromSpannedBill\r\n\t\t\t@BillingPeriodRevision,  -- SpannedBillingPeriodRevision\r\n\t\t\t@FirstPeriodCanceled,  -- SpannedFirstPeriodCanceled\r\n\t\t\t@CCF,  -- SpannedCCF\r\n\t\t\t@ThermFactor,  -- SpannedThermFactor\r\n\t\t\t@Therms,  -- SpannedTherms\r\n\t\t\t@ApplyMonthlyPercentage,  -- SpannedApplyMonthlyPercentage\r\n\t\t\t@TotalGasSpannedBilledPercentage,  -- SpannedTotalGasSpannedBilledPercentage\r\n\t\t\t--case when @ReadingCode < 15 then 'EST' else 'ACT' end, -- EstimatedOrActualBilling\r\n\t\t\tdbo.CalculateEstimatedOrActual(@ReadingCode,9),\r\n\t\t\tFacilityName,\r\n\t\t\tServiceAddress\r\n\t\tFROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n\t\tWHERE UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid; \r\n\t\t\t\r\n\t\t--\tSet up for the next the Revised Billing Period row.\r\n\t\tset @SumAverageCCF = @SumAverageCCF + @CCFAverage \t  \r\n\t\tset @idx = @idx + 1\r\n\t\t\t\r\n\t\t--\tCalculate the next the Revised Billing Period row.\r\n\t\tselect @CalculatedBillingPeriodRevision = dbo.[CalculateNextBillingPeriod]  (@CalculatedBillingPeriodRevision,@BillingCycle)\r\n\t\t\t\r\n\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n\t\tselect @CalculatedFromDate = dbo.[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision,@TariffCode,@ConEdUtilityCode)\r\n\t\t\t\r\n\t\tselect @CalculatedMeterFromReading = @CalculatedMeterToReading \r\n\t\t-- CAST(@CalculatedMeterFromReading AS dbo.MeterReadingNumber)\r\n\t\t--\tProcess the next Revised Billing Period row\r\n\t\t--\r\n\tEND;\r\n\t\r\n\t--\tFinish up the last period's processing\r\n\t--\tUse the (Nth -1) periods @CalculatedToDate AS the \"FromDate\" and the acutal \"ToDate\" from the spanned record AS the \"ToDate\"\r\n\tselect @CalculatedFromDate = @CalculatedToDate, @CalculatedToDate = @ToDate;\r\n\t\r\n\t--\tUse the (Nth -1) periods Calculated Meter From Reading AS the \"MeterFromReading\" and the acutal \"MeterToReading\" from the spanned record AS the \"MeterToReading\"\r\n\tselect @CalculatedMeterFromReading = @CalculatedMeterToReading \r\n\tselect @CalculatedMeterToReading = CAST(@MeterToReading AS int)\r\n\t\r\n\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\tselect @ApplyMonthlyPercentage = dbo.[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t\r\n\t--\tDerive the net changes to avoid rounding errors\r\n\tset @ThermsMonthlyLastPeriod = @Therms - @ThermsMonthlySum\r\n\tset @CCFMonthlyLastPeriod = @CCF  - @CCFMonthlySum\r\n\t\r\n\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t--\tIt will note in EC3 that the transaction was derived.\r\n\tselect @Notes = 'CalcTherm '+CAST(@Therms AS VARCHAR(10))+' = '+CAST(@ThermFactor AS VARCHAR(6))+' * '+CAST(@CCF AS VARCHAR(10))+\r\n\t' for '+CAST(@DeltaNumberOfPeriods AS VARCHAR(6))+' periods, First: '+@FirstPeriodCanceled +' ( '+@MeterFromReading+') Last: '+ \r\n\t@BillingPeriodRevision +' ( '+@MeterToReading+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+CAST(@ApplyMonthlyPercentage AS VARCHAR(10))+\r\n\t' - Total %: '+CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t\r\n\t--\tINSERT the data into the table \"ConEd.UploadConEdisonMeterSummary\"\r\n\tINSERT INTO ConEd.UploadConEdisonMeterSummary (\r\n\t\tAccountUtilityCompanySeqid,\r\n\t\tOriginalAccountNumber,\r\n\t\tOriginalMeterNumber,\r\n\t\tNumberOfTransactions, \r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCancelPeriod,\r\n\t\tBillingAction,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tGasRateCode,\r\n\t\tFromDate,\r\n\t\tToDate,\r\n\t\tMeterFromReading,\r\n\t\tMeterToReading,\r\n\t\tCcf,\r\n\t\tTherms,\r\n\t\tThermsFactor,\r\n\t\tMeterConstant,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tReadingCode,\r\n\t\tNumberOfDials,\r\n\t\tMeterType,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tProcessEffectiveDate,\r\n\t\tInitialPostingDate,\r\n\t\tAuthenticatedUserID,\r\n\t\tNotes,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tFacilityName,\r\n\t\tServiceAddress)\r\n\tSELECT @ConEdUtilityCode,\r\n\t\t@AccountNumber,\r\n\t\t@OriginalMeterNumber, \r\n\t\t1,-- NumberOfTransactions, \r\n\t\t1,-- NumberOfRebillTransactions,\r\n\t\t0,-- NumberOfCancelTransactions,\r\n\t\t@BillingPeriod, \r\n\t\t@CalculatedBillingPeriodRevision,\r\n\t\t@CalculatedBillingPeriodRevision,\r\n\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END,-- BillingAction, \r\n\t\t@CalculatedFromDate,\r\n\t\t@CalculatedToDate,\r\n\t\t@GasRateCode,\r\n\t\t@CalculatedFromDate,\r\n\t\t@CalculatedToDate,\r\n\t\tCAST(@CalculatedMeterFromReading AS VARCHAR(7)),  --dbo.MeterReadingNumber\r\n\t\tCAST(@CalculatedMeterToReading AS VARCHAR(7)),  --dbo.MeterReadingNumber\r\n\t\t@CCFMonthlyLastPeriod, \r\n\t\t@ThermsMonthlyLastPeriod,\r\n\t\t@ThermFactor,\r\n\t\t@MeterConstant,\r\n\t\tdbo.CalculateNumberOfBillingDays(@CalculatedFromDate, @CalculatedToDate), \r\n\t\t1, \r\n\t\tdbo.CalculateNumberOfBillingDays(@CalculatedFromDate, @CalculatedToDate),\r\n\t\t@BillingDate, \r\n\t\t@ReadingCode,\r\n\t\t@NumberOfDials,\r\n\t\t'G', -- MeterType,\r\n\t\t'N', --ProcessedInTheCurrentPeriod\r\n\t\tdbo.ConvertDateToYYYYMMDD (GETDATE()), -- ProcessEffectiveDate\r\n\t\tgetDate(), -- InitialPostingDate\r\n\t\t1, --\tAuthenticatedUserID,\r\n\t\t@Notes,\r\n\t\t'Y', -- DerivedFromSpannedBill\r\n\t\t@BillingPeriodRevision,  -- SpannedBillingPeriodRevision\r\n\t\t@FirstPeriodCanceled,  -- SpannedFirstPeriodCanceled\r\n\t\t@CCF,  -- SpannedCCF\r\n\t\t@ThermFactor,  -- SpannedThermFactor\r\n\t\t@Therms,  -- SpannedTherms\r\n\t\t@ApplyMonthlyPercentage,  -- SpannedApplyMonthlyPercentage\r\n\t\t@TotalGasSpannedBilledPercentage,  -- SpannedTotalGasSpannedBilledPercentage\r\n\t\tdbo.CalculateEstimatedOrActual(@ReadingCode, 9),\r\n\t\tFacilityName,\r\n\t\tServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n\tWHERE UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid;\r\n\r\n\t\t--\tProcess the next row\r\n\t\tFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonMeterTempSummarySpannedSeqid\r\n\tEND;\r\n\r\n\tCLOSE SpannedGasBillCursor;\r\n\tDEALLOCATE SpannedGasBillCursor;\r\nEND;",
      "created": "2025-06-10 21:41:26.487000",
      "last_altered": "2025-06-10 21:41:26.487000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@Status",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_ParseSpannedBilledUploadConEdisonMeterInfo",
      "explanation": "#### 1. Overview\nThe stored procedure `Archive_usp_ParseSpannedBilledUploadConEdisonMeterInfo` is designed to process and archive spanned billing data for Con Edison gas meters. It handles cases where billing periods span multiple months, requiring the data to be parsed and distributed across these periods. The procedure calculates various metrics such as CCF (hundred cubic feet) and Therms, adjusts for meter rollovers, and inserts the processed data into a summary table. It uses a cursor to iterate over records that need processing, performs calculations to distribute usage across billing periods, and logs the results.\n\n#### 2. Complexity Level: High\nThe complexity of this stored procedure is high due to several factors:\n- It involves multiple calculations and conditional logic to handle meter rollovers and spanned billing periods.\n- It uses a cursor to iterate over records, which can be complex to manage and optimize.\n- It involves multiple calls to user-defined functions for calculations and date conversions.\n- The procedure handles a significant amount of data manipulation and conditional branching.\n\n#### 3. Input Parameters\n- `@Status int output`: This is an output parameter intended to return the status of the procedure execution. However, it is not used within the procedure, which might be an oversight or placeholder for future use.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: The procedure begins by declaring numerous variables to store intermediate values and results.\n2. **Cursor Setup**: A cursor is declared and opened to iterate over records in the `ConEd.UploadConEdisonMeterTempSummarySpanned` table where `DeltaNumberOfPeriods` is greater than 1, indicating spanned billing periods.\n3. **Data Retrieval and Processing**:\n   - For each record, it retrieves necessary fields such as account number, meter readings, and billing periods.\n   - It calculates the total gas spanned billed percentage using a user-defined function.\n   - It determines the number of periods minus one for pro-rating purposes.\n   - It initializes counters and performs calculations to distribute usage across billing periods.\n   - It checks for meter rollover conditions and adjusts readings accordingly.\n4. **Data Insertion**: After processing each period, it inserts the calculated data into the `ConEd.UploadConEdisonMeterSummary` table.\n5. **Final Period Processing**: After exiting the loop, it processes the last period separately to ensure all data is accounted for.\n6. **Cursor Cleanup**: The cursor is closed and deallocated to free resources.\n\n#### 5. Performance Considerations\n- **Cursor Usage**: The use of a cursor can lead to performance bottlenecks, especially with large datasets. Consider refactoring to set-based operations if possible.\n- **Function Calls**: Frequent calls to user-defined functions can impact performance. Ensure these functions are optimized.\n- **Rounding and Casting**: Multiple rounding and casting operations are performed, which can be computationally expensive. Ensure these are necessary and optimized.\n- **Transaction Management**: The procedure does not explicitly manage transactions, which could lead to issues if part of the process fails.\n\n#### 6. Potential Issues or Risks\n- **Cursor Overhead**: Cursors can be resource-intensive and may lead to performance issues if the dataset is large.\n- **Error Handling**: The procedure lacks explicit error handling, which could lead to unhandled exceptions and data inconsistencies.\n- **Unused Parameter**: The `@Status` output parameter is not utilized, which might indicate incomplete implementation or oversight.\n- **Data Integrity**: Without transaction management, partial updates could occur if an error is encountered mid-process.\n- **Scalability**: As the dataset grows, the current approach may not scale well due to the use of cursors and iterative processing.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 5511,
      "api_response_id": "chatcmpl-ByeneColsVvdbdEOx0hjcylVXLjDm"
    },
    "analysis_timestamp": "2025-07-29 09:37:19"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_ParseSplitBillingAndMeterResetsUploadConEdisonMeterInfo",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_ParseSplitBillingAndMeterResetsUploadConEdisonMeterInfo] (@Status int output)\r\nAS\r\n--\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Parse Spanned Con Edison Bills Account Upload Information\r\n--*               \r\n--*               \r\n--* Exec:\t\t    [ConEd].[usp_ParseSpannedBilledUploadConEdisonAccountInfo]\r\n--*\r\n--* Parameter(s):         \r\n--*\t\t\t\t\tStatusCode  int output       -  Execution Return Status \r\n--*\r\n--*\r\n--* Database:\t\tEC3database\r\n--*\r\n--* Return:\t\t\t0 Success\r\n--*                 9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   06/18/2008\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 06/18/2008 PAH  First Version  \r\n--* 03/27/2006 PAH  Revised to \r\n--***************************************************************************************\r\n--\r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\ndeclare @TempSplitTransactionsSeqid int\r\ndeclare @UploadConEdisonMeterSummarySeqid int\r\ndeclare @Notes dbo.notes\r\ndeclare @Success int\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n-- Find UploadConEdAccountSummary reset rows that would override UploadConEdMeterSummary\r\n-- billing revision period.  The criteria is the UploadConEdMeterSummary.ToDate is greater\r\n-- than the UploadConEdAccountSummary.FromDate and is less than and equal to the UploadConEdAccountSummary.ToDate\r\n--\r\n--\r\nupdate\tConEd.UploadConEdisonMeterSummary\r\nSET             \r\n\t\tBillingPeriodRevision = ConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod.AccountBillingPeriodRevision\r\nFROM \r\n\t\tConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod INNER JOIN\r\n\t\tConEd.UploadConEdisonMeterSummary ON \r\n\t\tConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod.UploadConEdisonMeterSummarySeqid = ConEd.UploadConEdisonMeterSummary.UploadConEdisonMeterSummarySeqid                      \r\n-- \r\n-- Once the override is completed.  Find all of the split transactions that need to be merged with the reset\r\n-- row.  Assume that the number of billing days are less than 30.\r\n--\r\ntruncate table ConEd.TempSplitTransactions\r\n\r\nINSERT INTO ConEd.TempSplitTransactions\r\n\t\t(UploadConEdisonMeterSummarySeqid,AccountUtilityCompanySeqid, AccountBilled, MeterBilled, AccountExchangeMeterTrackSeqid, \r\n\t\tAdjustedMeterBilling, AdjustedMeterBillingElectric, OriginalAccountNumber, OriginalMeterNumber, BillingPeriod, BillingPeriodRevision, \r\n\t\tFirstCancelPeriod, NumberOfTransactions, NumberOfRebillTransactions, NumberOfCancelTransactions, BillingAction, PriorRevisedBilledCCF, \r\n\t\tRevisedBilledCCF, CanceledBilledCCF, PriorRevisedBilledTherms, RevisedBilledTherms, CanceledBilledTherms, InitialCancelFromDate, \r\n\t\tCurrentBillingToDate, GasRateCode, FromDate, ToDate, MeterFromReading, MeterToReading, Ccf, Therms, ThermsFactor, MeterConstant, \r\n\t\tTotalBillingDaysRebilled, NumberOfBillingPeriods, AverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, BillingDate, \r\n\t\tReadingCode, NumberOfDials, MeterType, ProcessedInTheCurrentPeriod, ProcessEffectiveDate, CancelReadingCode, CancelFromDate, CancelToDate, \r\n\t\tCancelMeterFromReading, CancelMeterToReading, CancelCcf, CancelTherms, CancelThermsFactor, CancelMeterConstant, InitialPostingDate, \r\n\t\tDerivedFromSpannedBill, SpannedBillingPeriodRevision, SpannedFirstCanceledBillingPeriod, SpannedCCF, SpannedThermFactor, SpannedTherm, \r\n\t\tSpannedMonthlyPercentage, SpannedTotalPercentage, EstimatedOrActualBilling, FacilityName, ServiceAddress, AuthenticatedUserID, Notes, \r\n\t\tDateAdded, LastUpdate)\r\nSELECT \r\n\t\tUploadConEdisonMeterSummarySeqid,AccountUtilityCompanySeqid, AccountBilled, MeterBilled, AccountExchangeMeterTrackSeqid, AdjustedMeterBilling, AdjustedMeterBillingElectric, \r\n\t\tOriginalAccountNumber, OriginalMeterNumber, BillingPeriod, BillingPeriodRevision, FirstCancelPeriod, NumberOfTransactions, \r\n\t\tNumberOfRebillTransactions, NumberOfCancelTransactions, BillingAction, PriorRevisedBilledCCF, RevisedBilledCCF, CanceledBilledCCF, \r\n\t\tPriorRevisedBilledTherms, RevisedBilledTherms, CanceledBilledTherms, InitialCancelFromDate, CurrentBillingToDate, GasRateCode, FromDate, \r\n\t\tToDate, MeterFromReading, MeterToReading, Ccf, Therms, ThermsFactor, MeterConstant, TotalBillingDaysRebilled, NumberOfBillingPeriods, \r\n\t\tAverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, BillingDate, ReadingCode, NumberOfDials, MeterType, \r\n\t\tProcessedInTheCurrentPeriod, ProcessEffectiveDate, CancelReadingCode, CancelFromDate, CancelToDate, CancelMeterFromReading, \r\n\t\tCancelMeterToReading, CancelCcf, CancelTherms, CancelThermsFactor, CancelMeterConstant, InitialPostingDate, DerivedFromSpannedBill, \r\n\t\tSpannedBillingPeriodRevision, SpannedFirstCanceledBillingPeriod, SpannedCCF, SpannedThermFactor, SpannedTherm, SpannedMonthlyPercentage, \r\n\t\tSpannedTotalPercentage, EstimatedOrActualBilling, FacilityName, ServiceAddress, AuthenticatedUserID, Notes, DateAdded, LastUpdate\r\nFROM ConEd.UploadConEdisonMeterSummary\r\nWHERE (MeterFromReading = 0) AND (MeterToReading <> 0) and BillingDays < 30\r\nORDER BY NumberOfBillingPeriods\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\n--\r\nDECLARE SplitBillingAndMeterResetsCursor CURSOR FOR\r\nSELECT TempSplitTransactionsSeqid,UploadConEdisonMeterSummarySeqid FROM ConEd.TempSplitTransactions \r\n--\r\nOPEN SplitBillingAndMeterResetsCursor;\r\n--\r\n-- @UploadConEdisonMeterSummarySeqid holds the id of the reset meter records which will be deleted once the data is merged\r\n-- and the notes are created\r\n--\r\nFETCH NEXT FROM SplitBillingAndMeterResetsCursor INTO @TempSplitTransactionsSeqid,@UploadConEdisonMeterSummarySeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n\r\nWHILE @@FETCH_STATUS = 0\r\n   begin\r\n\t--\r\n\t--\tFetch a split row to process \r\n\t--\r\n\t--\tFind the split row to conterpart by joining the view and split table.\r\n\t--\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo \r\n\t--\t\t\tConEd.TempSplitTransactions \t\r\n\t--\tWHERE (ConEd.UploadConEdisonMeterSummary.MeterFromReading <> '0') updates the \r\n\t--\tthe merged data record with the complete summary totals for the period.\r\n\t--\r\n\tUPDATE    ConEd.UploadConEdisonMeterSummary\r\n\tSET\t\t\r\n\t\t\tFromDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationFromDate,\r\n\t\t\tToDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate,\r\n\t\t\tCurrentBillingToDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate,\r\n\t\t\tMeterFromReading =isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterFromReading,0),\r\n\t\t\tMeterToReading =isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterToReading,0), \r\n\t\t\tCcf = isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TotalCCF,0),\r\n\t\t\tTherms =isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TotalTherms,0),\r\n\t\t\tThermsFactor =isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.ThermsFactor,1.03),\r\n\t\t\tMeterConstant = isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterConstant,1),\r\n\t\t\tNotes = Common.MeterResetNotes('M',\r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationFromDate, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterFromReading, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationToDate,\r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterToReading, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationCCF, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationThermsFactor, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationTherms, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterConstant)+'--'+\r\n\t\t\t\t\tCommon.MeterResetNotes('R',\r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationFromDate, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterFromReading, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate,\r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterToReading, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationCCF, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationThermsFactor, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationTherms, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterConstant)\r\n\tFROM     \r\n\t\t\tConEd.UploadConEdisonMeterSummary INNER JOIN\r\n\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo ON \r\n\t\t\tConEd.UploadConEdisonMeterSummary.BillingPeriod = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.BillingPeriod AND \r\n\t\t\tConEd.UploadConEdisonMeterSummary.BillingPeriodRevision = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.BillingPeriodRevision\r\n\t\t\tAND \r\n\t\t\tConEd.UploadConEdisonMeterSummary.OriginalAccountNumber = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.OriginalAccountNumber\r\n\t\t\tAND \r\n\t\t\tConEd.UploadConEdisonMeterSummary.OriginalMeterNumber = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.OriginalMeterNumber\r\n\tWHERE \r\n\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TempSplitTransactionsSeqid = @TempSplitTransactionsSeqid and\r\n\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.UploadConEdisonMeterSummarySeqid = @UploadConEdisonMeterSummarySeqid\r\n\t--\r\n\tset @Success = @@rowcount\r\n\t--\r\n\t-- Complete the processing by deleteing the reset meter row from the ConEd.UploadConEdisonMeterSummary table since it was already merged.\r\n\t--\r\n\tif (@Success > 0) \r\n\t\tDELETE FROM ConEd.UploadConEdisonMeterSummary WHERE (UploadConEdisonMeterSummarySeqid = @UploadConEdisonMeterSummarySeqid)\r\n\telse\r\n\t\tprint 'Update failed for UploadConEdisonMeterSummarySeqid Seqid'+ cast(@UploadConEdisonMeterSummarySeqid as varchar(10))+' - TempSplitTransactionsSeqid'+ cast(@TempSplitTransactionsSeqid as varchar(10))\r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\nFETCH NEXT FROM SplitBillingAndMeterResetsCursor INTO @TempSplitTransactionsSeqid,@UploadConEdisonMeterSummarySeqid\r\n   END\r\n\r\nCLOSE SplitBillingAndMeterResetsCursor;\r\nDEALLOCATE SplitBillingAndMeterResetsCursor;\r\n--\r\n-- Remove the splits from the ConEd.UploadConEdisonMeterSummary after the merge\r\n--\r\nUPDATE  ConEd.UploadConEdisonMeterSummary\r\nSET              \r\n\t\tNumberOfBillingPeriods = 1,\r\n\t\tNotes = 'Zero number of billing periods set to one to process as a whole period not a merged split'\r\nWHERE \r\n\t\t(NumberOfBillingPeriods = 0) AND (Ccf <> 0)",
      "created": "2025-06-10 21:41:26.500000",
      "last_altered": "2025-06-10 21:41:26.500000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@Status",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_ParseSplitBillingAndMeterResetsUploadConEdisonMeterInfo",
      "explanation": "#### 1. Overview\n\nThe stored procedure `Archive_usp_ParseSplitBillingAndMeterResetsUploadConEdisonMeterInfo` is designed to process and merge billing and meter reset data for Con Edison accounts. It updates billing period revisions, handles split transactions, and merges them with reset rows. The procedure involves updating records, inserting data into a temporary table, and using a cursor to iterate over split transactions to merge them with reset data. After processing, it cleans up by deleting merged records and updating specific fields to ensure data consistency.\n\n#### 2. Complexity Level: Medium\n\nThe complexity level of this stored procedure is medium due to the following factors:\n- It involves multiple SQL operations, including updates, inserts, and deletes.\n- It uses a cursor to iterate over records, which can be complex and resource-intensive.\n- It involves joining multiple tables and views to update and merge data.\n- The procedure includes conditional logic to handle different scenarios, such as successful updates and error handling.\n\n#### 3. Input Parameters\n\n- `@Status int output`: This is an output parameter used to return the execution status of the procedure. It indicates success (0) or failure (9).\n\n#### 4. Business Logic and Workflow\n\n1. **Initialization**: The procedure begins by declaring variables to hold temporary data and setting default values.\n\n2. **Update Billing Period Revisions**: It updates the `BillingPeriodRevision` in the `UploadConEdisonMeterSummary` table using data from a view that identifies rows needing revision based on date criteria.\n\n3. **Handle Split Transactions**:\n   - It truncates the `TempSplitTransactions` table to prepare for new data.\n   - Inserts records into `TempSplitTransactions` from `UploadConEdisonMeterSummary` where certain conditions are met (e.g., `MeterFromReading = 0` and `BillingDays < 30`).\n\n4. **Cursor Processing**:\n   - A cursor is declared and opened to iterate over records in `TempSplitTransactions`.\n   - For each record, it updates the `UploadConEdisonMeterSummary` table by merging data from a view that contains the necessary information for merging split and reset data.\n   - If the update is successful, the corresponding reset meter record is deleted from `UploadConEdisonMeterSummary`.\n\n5. **Final Updates**:\n   - After processing all records, it updates `UploadConEdisonMeterSummary` to set `NumberOfBillingPeriods` to 1 for records with zero billing periods and non-zero CCF, ensuring they are processed as whole periods.\n\n#### 5. Performance Considerations\n\n- **Cursor Usage**: The use of a cursor can lead to performance bottlenecks, especially with large datasets, as it processes records row-by-row.\n- **Table Truncation**: Truncating `TempSplitTransactions` can be efficient for clearing data but may lock the table during the operation.\n- **Join Operations**: Multiple join operations with views can be resource-intensive, especially if the views are complex or involve large datasets.\n- **Indexing**: Ensuring proper indexing on the tables involved, especially on join and where clause columns, can improve performance.\n\n#### 6. Potential Issues or Risks\n\n- **Concurrency**: The procedure may face concurrency issues if multiple instances are run simultaneously, especially with the use of cursors and table truncation.\n- **Data Integrity**: If the procedure fails midway, it may leave the data in an inconsistent state, particularly if the cursor processing is interrupted.\n- **Error Handling**: The procedure lacks comprehensive error handling and logging, which could make troubleshooting difficult in case of failures.\n- **Scalability**: As data volume grows, the performance of the cursor and join operations may degrade, necessitating optimization or redesign.\n- **Hardcoded Values**: The procedure uses hardcoded values (e.g., `ThermsFactor = 1.03`), which may need to be parameterized for flexibility and maintainability.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3979,
      "api_response_id": "chatcmpl-Byeo4smmDVnipgsV7F6KXJIBhSQ8j"
    },
    "analysis_timestamp": "2025-07-29 09:37:48"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_PreProcessConEdisonAccountAndMeterInfo",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_PreProcessConEdisonAccountAndMeterInfo]\r\n(\r\n\t@Status AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\t--**************************************************************************************\r\n\t--* Date         Tech Description of Change\r\n\t--* ---------- ----  -------------------------------------------------------------\r\n\t--* 10/26/2005 PAH  First Version \r\n\t--* 11/29/2016  zd\tturnoff date 9999 99 99 to 99991231 \r\n\t--* 11/27/2018  VY  Changes for UniqueAccountSeqID\r\n\t--* 12/21/2018  VY  Updated for UniqueAccountSeqID\r\n\t--**************************************************************************************\r\n\tDECLARE @CurrentBillingPeriod AS VARCHAR(6);\r\n\r\n\tSELECT TOP (1) @CurrentBillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas;\r\n\r\n\t-- Intialize the table UploadConEdisonCurrentlyBilledAccounts by truncating it.\r\n\tTRUNCATE TABLE ConEd.UploadConEdisonCurrentlyBilledAccounts;\r\n\r\n\t-- Insert into UploadConEdisonCurrentlyBilledAccounts all of the distinct account numbers that were billed \r\n\t-- for the currently billing period\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonCurrentlyBilledAccounts(OriginalAccountNumber)\r\n\tSELECT DISTINCT OriginalAccountNumber\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas;\r\n\r\n\t-- Remove from the UploadConEdisonCurrentlyBilledAccounts table all of the account numbers that were billed \r\n\t-- as an original bill (Billing (BillingPeriod = BillingPeriodRevision)\r\n\r\n\tDELETE FROM ConEd.UploadConEdisonCurrentlyBilledAccounts\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\tINNER JOIN ConEd.UploadConEdisonCurrentlyBilledAccounts AS UC ON UAG.OriginalAccountNumber = UC.OriginalAccountNumber\r\n\tWHERE UAG.BillingPeriod = UAG.BillingPeriodRevision\r\n\tselect @@rowcount\r\n\r\n\t--\tAny account remaining is an adjustment account that does not have an orginal bill.  A stub will be needed to handle the net charges\r\n\t--\tas a paid adjustment and original billed amount,revised billed amount and original paid amount will be $0.00 and the energyusage\r\n\t--\twill be 0.\r\n\r\n\t--select 'Accounts Without an Original Bill',* from ConEd.UploadConEdisonCurrentlyBilledAccounts\r\n\t--\r\n\t--\tFind all of the existing accounts known to EC3 and the follwing fields\r\n\t--\t\t\t\tAdjustedAccount = A.AccountSeqid,\r\n\t--\t\t\t\tAccountStatus = A.AccountStatus, \r\n\t--\t\t\t\tAccountpreviousStatus = A.AccountPreviousStatus, \r\n\t--\t\t\t\tAccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\r\n\tUPDATE UAG\r\n\tSET AdjustedAccount = A.AccountSeqid,\r\n\t\tAccountStatus = A.AccountStatus, \r\n\t\tAccountpreviousStatus = A.AccountPreviousStatus, \r\n\t\tAccountUtilityCompanySeqid = A.UtilityAccountProvider,\r\n\t\tUniqueAccountSeqID = A.UniqueAccountSeqid /* added on 12/21/2018 */\r\n\tFROM Billing.Account AS A\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG ON A.OriginalAccountNumber = UAG.OriginalAccountNumber\r\n\tWHERE A.UtilityAccountProvider = 9;\r\n\r\n\t--\tAssume that the derived PriorRevisedXXXX,RevisedXXXX & CanceledXXXX are correct.  The next  \r\n\t--\tupdate will grab the correct information from the account billing and account billing gas that being\r\n\t--\tadjusted.\r\n\t--\tFormulas:\r\n\t--\t\tThese formulas work in the same manner Amount, CCF or Therm.\r\n\t--\t\t\tTotalRebilledAmount is the aggregated Rebilled Amount inclusive of erroneous net zero rebills reported by Con Edison\r\n\t--\r\n\t--\t\t\tTotalCanceledAmount is the aggregated Canceled Amount inclusive of erroneous net zero cancels reported by Con Edison\r\n\t--\r\n\t--\t\t\tPriorRevisedBilledAmount is the revised billed amount in EC3 or the reported TotalCanceledAmount times minus one to \r\n\t--\t\t\tsimulate the revised billed amount in EC3.\r\n\t--\r\n\t--\t\t\tCanceledBilledAmount is the revised billed amount times minus one in EC3 or the reported TotalCanceledAmount to \r\n\t--\t\t\tsimulate the Canceled billed amount in EC3.\r\n\t--\r\n\t--\t\t\tRevisedBilledAmount is derived by adding the PriorRevisedBilledAmount + TotalRebilledAmount + TotalCanceledAmount whether it was \r\n\t--\t\t\treported by Con Edison or taken from AB.RevisedBilledAmount\r\n\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET TotalRebilledAmount = IsNull(TotalRebilledAmount,0), \r\n\t\tTotalCanceledAmount = IsNUll(TotalCanceledAmount,0), \r\n\t\tPriorRevisedBilledAmount =IsNUll(TotalCanceledAmount,0)*-1.00, \r\n\t\tCanceledBilledAmount = IsNUll(TotalCanceledAmount,0), \r\n\t\tRevisedBilledAmount = IsNull(TotalRebilledAmount, 0),--IsNUll(TotalCanceledAmount,0)*-1.00+ (IsNull(TotalRebilledAmount, 0) + IsNUll(TotalCanceledAmount,0)),\r\n\t\tTotalTherms =IsNUll(TotalTherms,0),\r\n\t\tCancelTotalTherms =IsNull(CancelTotalTherms, 0),\r\n\t\tPriorRevisedTherms = CancelTotalTherms*-1, \r\n\t\tCanceledTherms = CancelTotalTherms, \r\n\t\tRevisedTherms = isnull(TotalTherms,0), -- CancelTotalTherms*-1 + (TotalTherms+CancelTotalTherms),\r\n\t\tTotalCCF = IsNull(TotalCCF,0), \r\n\t\tCancelTotalCCF = IsNull(CancelTotalCCF,0),\r\n\t\tPriorRevisedCCF = CancelTotalCCF*-1, \r\n\t\tCanceledCCF = CancelTotalCCF, \r\n\t\tRevisedCCF =isnull(TotalCCF,0), -- CancelTotalCCF*-1+(TotalCCF+CancelTotalCCF),\r\n\t\tAccountStatus = 'UA',\r\n\t\tAccountpreviousStatus = 'NU',\r\n\t\tAccountStatusPeriod = @CurrentBillingPeriod,\r\n\t\tInitialCancelFromDate = Case when InitialCancelFromDate is null then FromDate else InitialCancelFromDate end,\r\n\t\tCurrentBillingToDate = Case when CurrentBillingToDate is null then ToDate else CurrentBillingToDate end,\r\n\t\tSpannedThermFactor = Case when SpannedThermFactor is null then ThermsFactor else SpannedThermFactor end\r\n\r\n\t--\tSetup the core billing information for the current bill(UAG.BillingPeriod = @CurrentBillingPeriod)\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET TotalRebilledAmount = IsNull(TotalRebilledAmount,0), \r\n\t\tTotalCanceledAmount = IsNUll(TotalCanceledAmount,0), \r\n\t\tPriorRevisedBilledAmount =AB.RevisedBilledAmount, \r\n\t\tCanceledBilledAmount =IsNUll(TotalCanceledAmount,0) , --AB.RevisedBilledAmount*-1, \r\n\t\tRevisedBilledAmount =IsNull(TotalRebilledAmount, 0),  --AB.RevisedBilledAmount+ (IsNull(TotalRebilledAmount, 0) + IsNUll(TotalCanceledAmount,0)),\r\n\t\tTotalTherms =IsNUll(UAG.TotalTherms,0),\r\n\t\tCancelTotalTherms =IsNull(UAG.CancelTotalTherms, 0),\r\n\t\tPriorRevisedTherms = IsNull(AB.AccountEnergyUsage,0),\r\n\t\tCanceledTherms = IsNull(UAG.CancelTotalTherms,0),  -- IsNull(AB.AccountEnergyUsage*-1,0), \r\n\t\tRevisedTherms = IsNull(UAG.TotalTherms,0), --IsNull(AB.AccountEnergyUsage,0) + (IsNull(UAG.TotalTherms,0)+IsNull(UAG.CancelTotalTherms,0)),\r\n\t\tTotalCCF = IsNull(UAG.TotalCCF,0), \r\n\t\tCancelTotalCCF = IsNull(UAG.CancelTotalCCF,0), -- IsNull(UAG.CancelTotalCCF,0),\r\n\t\tPriorRevisedCCF = IsNull(ABG.TotalCCF,0), \r\n\t\tCanceledCCF = IsNull(UAG.CancelTotalCCF,0), -- IsNull(ABG.TotalCCF*-1,0),\r\n\t\tRevisedCCF = IsNull(UAG.TotalCCF,0) -- IsNull(ABG.TotalCCF,0)+(IsNull(UAG.TotalCCF,0)+IsNull(UAG.CancelTotalCCF,0))\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\tINNER JOIN Billing.AccountBilling AS AB ON UAG.BillingPeriodRevision = AB.BillingPeriod\r\n\t\t\tAND UAG.BillingPeriodRevision = AB.BillingPeriodRevision\r\n\t\t\tAND UAG.OriginalAccountNumber = AB.OriginalAccountNumber\r\n\t\tINNER JOIN Billing.AccountBillingGas AS ABG ON AB.AccountBillingSeqid = ABG.AccountBillingSeqid\r\n\tWHERE UAG.BillingPeriod = @CurrentBillingPeriod;\r\n\r\n\t--\tStart getting the existing information from EC3 about the account (ie. Sequence Id's)\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AdjustedAccount =A.AccountSeqid, \r\n\t\tAccountStatus = 'AC', -- A.AccountStatus, \r\n\t\tAccountpreviousStatus = 'AC', -- A.AccountpreviousStatus,  \r\n\t\tCurrentInvoiceAccountBillingGroup =2, -- A.CurrentInvoiceAccountGroup, \r\n\t\tAccountUtilityCompanySeqid =A.UtilityAccountProvider,\r\n\t\tEnergySource = 5, -- A.EnergySource,\r\n\t\tIsTimeOfDayAccount = 'N',\r\n\t\tLastPeriodModified =UAG.BillingPeriod,\r\n\t\tBillingCycle =  A.BillingCycle,\r\n\t\tSalesType =  A.SalesType,\r\n\t\tManualPaymentOverride = 'N',\r\n\t\tManualDataEntry  = 'N'\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\tINNER JOIN Billing.Account AS A ON UAG.OriginalAccountNumber = A.OriginalAccountNumber\r\n\t\t\tAND UAG.AccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\t\tINNER JOIN Billing.AccountBilling AS AB ON A.UniqueAccountSeqid = AB.UniqueAccountSeqId \r\n\t\t\tAND A.IsCurrentRecord = 'Y';\r\n\r\n\t--\tGet all of the prior period adjustment sequence ids from the AccountBilling and AccountBillingGas tables.\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AdjustedAccountBilling =AB.AccountBillingSeqid, \r\n\t\tAdjustedAccountBillingGas = ABG.AccountBillingGasSeqid,  -- Fixed Peter\r\n\t\tAccountStatus = case when AB.AccountBillingStatus is null then 'BA' else AB.AccountBillingStatus end , \r\n\t\tAccountpreviousStatus = case when AB.PreviousAccountBillingStatus is null then 'NB' else AB.PreviousAccountBillingStatus end , \r\n\t\tAccountStatusPeriod = case when AB.AccountBillingStatusCodePeriod is null then @CurrentBillingPeriod else AB.AccountBillingStatusCodePeriod end \r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\tINNER JOIN Billing.AccountBilling AS AB ON UAG.BillingPeriodRevision = AB.BillingPeriod\r\n\t\t\tAND UAG.BillingPeriodRevision = AB.BillingPeriodRevision AND UAG.OriginalAccountNumber = AB.OriginalAccountNumber \r\n\t\tINNER JOIN Billing.AccountBillingGas AS ABG ON AB.AccountBillingSeqid = ABG.AccountBillingSeqid \r\n\tWHERE UAG.BillingPeriod <> UAG.BillingPeriodRevision;\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AccountStatus = 'BA', \r\n\t\tAccountpreviousStatus = 'NB',\r\n\t\tAccountStatusPeriod = @CurrentBillingPeriod, \r\n\t\tPriorRevisedCCF =0, \r\n\t\tRevisedCCF =isnull(TotalCCF,0), \r\n\t\tCanceledCCF =isnull(CancelTotalCCF,0), \r\n\t\tPriorRevisedTherms =0, \r\n\t\tRevisedTherms =isnull(TotalTherms,0),\r\n\t\tCanceledTherms =isnull(CancelTotalTherms,0)\r\n\tWHERE (AccountStatus <> 'BC') AND \r\n\t\t(BillingPeriod <> BillingPeriodRevision) AND \r\n\t\t(AdjustedAccountBilling IS NULL);\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET CurrentInvoiceAccountBillingGroup = 2,        \r\n\t\tPriorRevisedCCF =0, \r\n\t\tRevisedCCF =isnull(TotalCCF,0), \r\n\t\tCanceledCCF =isnull(CancelTotalCCF,0), \r\n\t\tPriorRevisedTherms =0, \r\n\t\tRevisedTherms =isnull(TotalTherms,0),\r\n\t\tCanceledTherms =isnull(CancelTotalTherms,0)\r\n\tWHERE (AccountStatus in ('UA','AC')) AND \r\n\t\t(BillingPeriod = BillingPeriodRevision) AND \r\n\t\t(AdjustedAccountBilling IS NULL);\r\n\r\n\t-- Account and Meter Billing usage Discrepancies are noted in the meter billing and the \r\n\t-- reported information saved as the rebilled amount.\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET Notes ='Account and Meter Billing usage Discrepancies  ' +\r\n\t\tcase when netTherms <> 0 then 'Net Therms('+cast(netTherms as varchar(10))+') ' +\r\n\t\tcase when netCCF <> 0 then ')  CCF('+cast(netCCF as varchar(10))+')  '  else '' end + \r\n\t\t':           Reported: Therms('+cast(AccountTotalTherms as varchar(10)) +')           CCF('+cast(AccountTotalCcf as varchar(10)) +')           ThermsFactor('+cast(AccountTotalThermsFactor as varchar(10)) +')  ' else '' end --+\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tINNER JOIN ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS V ON \r\n\t\t\tUM.BillingPeriod = V.BillingPeriod AND UM.UniqueAccountSeqID = V.UniqueAccountSeqID\r\n\t\t\tAND UM.BillingPeriodRevision = V.BillingPeriodRevision;\r\n\r\n\t--\tAssume that all of the meter billing rows are unknown meters on existing accounts and the Meter Billing Status Period is the current processing\r\n\t--\tbilling period.  This is processing by exception.\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET NumberOfCancelTransactions = 0, \r\n\t\tMeterBillingStatus = 'UM', \r\n\t\tMeterBillingPreviousStatus = 'NU', \r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod, \r\n\t\tRevisedBilledCCF = isnull(Ccf, 0),\r\n\t\tCanceledBilledCCF = 0, \r\n\t\tRevisedBilledTherms =isnull(Therms, 0),\r\n\t\tCanceledBilledTherms = 0,\r\n\t\tMeterReset = case when Notes is null then 'N' \r\n\t\t                  else case when CHARINDEX('Reset:', Notes) <> 0 then 'Y' else 'N' end END;\r\n\t\t\r\n\t--\tThe ConEd.UploadConEdisonMeterBillingAdjustmentGas is being joined with the ConEd.UploadConEdisonAccountBillingAdjustmentGas table to link the\r\n\t--\texisting meter billing transactions with their account billing conterpart.  The account table is being joined with the UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\ttable since the all of the known accounts sequence id has been updated in that table.  The UploadConEdisonMeterBillingAdjustmentGas is being joined with \r\n\t--\tBilling.Meter and Billing.AccountExchangeMeterTrack to identify all meters and the AccountExchangeMeterTrack information that is currently known to EC3.\r\n\t--\r\n\t--\t\t\t\t\t\t\t\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\t\t\t\t\t\t\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t--\t\t\t\t\t\t\t\t\tBilling.Account\r\n\t--\t\t\t\t\t\t\t\t\tBilling.Meter \r\n\t--\t\t\t\t\t\t\t\t\tBilling.AccountExchangeMeterTrack \r\n\t--\r\n\t--\tAfter the update, all of the meters that are unknown to EC3 will have a Status code of 'UM'.\r\n\t--\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET AccountUtilityCompanySeqid =A.UtilityAccountProvider, \r\n\t\tAccountBilled =A.AccountSeqid, \r\n\t\tMeterBilled =M.MeterSeqid, \r\n\t\tAccountExchangeMeterTrackSeqid =AE.AccountExchangeMeterTrackSeqid, \r\n\t\tMeterBillingStatus ='AC',  ---  M.MeterStatus, \r\n\t\tMeterBillingPreviousStatus ='AC',  ---  M.MeterPreviousStatus, \r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod, -- M.MeterStatusCodePeriod\r\n\t\tUniqueAccountSeqID = A.UniqueAccountSeqID, -- Added on 1/2/2019\r\n\t\tUniqueMeterSeqID = M.UniqueMeterSeqid -- Added on 1/15/2019\r\n\tFROM Billing.AccountExchangeMeterTrack AS AE\r\n\t\tINNER JOIN Billing.Account AS A ON AE.OriginalAccountSeqid = A.AccountSeqid AND AE.OriginalAccountSeqid = A.AccountSeqid\r\n\t\tINNER JOIN Billing.Meter AS M ON AE.OriginalMeterSeqid = M.MeterSeqid AND AE.OriginalMeterSeqid = M.MeterSeqid\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG ON A.AccountSeqid = UAG.AdjustedAccount\r\n\t\tINNER JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM ON UAG.BillingPeriod = UM.BillingPeriod AND \r\n\t\tUAG.BillingPeriodRevision = UM.BillingPeriodRevision AND UAG.OriginalAccountNumber = UM.OriginalAccountNumber AND \r\n\t\tM.OriginalAccountNumber = UM.OriginalAccountNumber AND M.OriginalMeterNumber = UM.OriginalMeterNumber AND \r\n\t\tAE.OriginalAccountNumber = UM.OriginalAccountNumber AND AE.OriginalMeterNumber = UM.OriginalMeterNumber\r\n\r\n\t--\tThe UploadConEdisonMeterBillingAdjustmentGas is using a LEFT JOIN with the account table to find all rows whose status is 'UM'.  If the \r\n\t--\taccount exists the AccountSeqid is updated in the AccountBilled column and no change to the status code.  If the AccountSeqid is null then the \r\n\t--\tmeter and the account are unknown to EC3 and the status updated to 'UA'\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET AccountBilled =A.AccountSeqid,\r\n\t\tMeterBillingStatus = Case when A.AccountSeqid is null then 'UA' else 'UM' end\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tLEFT JOIN Billing.Account AS A ON UM.OriginalAccountNumber = A.OriginalAccountNumber AND \r\n\t\tUM.AccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\tWHERE UM.MeterBillingStatus = 'UM';\r\n\r\n\t--\tCon Edison does not provide the meter billing cancellations. The meter billing rebills with be used to search EC3 for the row that needs to\r\n\t--\tbe adjusted.  The prior billed CCF and Therms will be used as the basis for the prior billed amount and the amount to be canceled.  The negation\r\n\t--\tof the prior objects will reverse the state of the prior value.  Also, if there is a match the NumberOfCancelTransactions is set to 1 and\r\n\t--\tNumberOfTransactions is increased by one (NumberOfTransactions + 1).\r\n\t--\r\n\t--\t\tRevisedBilledCCF = IsNull(MBG.Ccf,0) + \r\n\t--\t\t\t\t\t\t  (IsNull(UM.CCF,0)+IsNull(-1 * MBG.Ccf,0)),\r\n\t--\t\tCanceledBilledCCF = IsNull(-1 * MBG.Ccf,0),\r\n\t--\t\tRevisedBilledTherms = IsNull(MB.Consumption,0)+\r\n\t--\t\t\t\t\t\t\t   (IsNull(UM.Therms,0)+IsNull(-1 * MB.Consumption,0)),\r\n\t--\t\tCanceledBilledTherms = IsNull(-1 * MB.Consumption,0),\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET NumberOfCancelTransactions = 1, \r\n\t\tNumberOfTransactions = IsNull(UM.NumberOfTransactions,0) + 1, \r\n\t\tAdjustedMeterBilling = MB.MeterBillingSeqid,\r\n\t\tAdjustedMeterBillingGas =MBG.MeterBillingGasSeqid,\r\n\t\tMeterBillingStatus = MB.MeterBillingStatus, \r\n\t\tMeterBillingPreviousStatus = MB.PreviousMeterBillingStatus, \r\n\t\tMeterBillingStatusPeriod = MB.MeterBillingStatusCodePeriod, \r\n\t\tRevisedBilledCCF = IsNull(UM.CCF,0),\r\n\t\tCanceledBilledCCF = 0, -- IsNull(UM.CCF,0), --IsNull(-1 * MBG.Ccf,0),\r\n\t\tPriorRevisedBilledCCF = IsNull(MBG.Ccf,0),\r\n\t\tCCF = IsNull(UM.CCF,0),\r\n\t\tCancelCcf = 0, -- IsNull(UM.CancelCcf,0), -- Con Edison does not report Cancellations on the meter billing level\r\n\t\tPriorRevisedBilledTherms = IsNull(MB.Consumption,0), \r\n\t\tRevisedBilledTherms = IsNull(UM.Therms,0),\r\n\t\tCanceledBilledTherms = IsNull(UM.CanceledBilledTherms,0),  -- IsNull(-1 * MB.Consumption,0),\r\n\t\tTherms = IsNull(UM.Therms,0),\r\n\t\tCancelTherms = IsNull(UM.CanceledBilledTherms,0),\r\n\t\tCancelFromDate = MBG.FromDate, \r\n\t\tCancelToDate = MBG.ToDate, \r\n\t\tCancelMeterFromReading = IsNull(MBG.MeterFromReading,0),\r\n\t\tCancelMeterToReading = IsNull(MBG.MeterToReading,0),\r\n\t\tCancelThermsFactor = IsNull(MBG.ThermsFactor, 1.03),\r\n\t\tCancelMeterConstant = IsNull(MBG.MeterConstant,1)\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tINNER JOIN Billing.MeterBilling AS MB ON UM.AccountExchangeMeterTrackSeqid = MB.AccountExchangeMeterTrackSeqid\r\n\t\t\tAND UM.BillingPeriodRevision = MB.BillingPeriodRevision AND UM.BillingPeriodRevision = MB.BillingPeriod\r\n\t\tINNER JOIN Billing.MeterBillingGas AS MBG ON MB.MeterBillingSeqid = MBG.MeterBillingSeqid\r\n\t\t\tAND MB.OriginalAccountNumber = MBG.OriginalAccountNumber AND MB.OriginalMeterNumber = MBG.OriginalMeterNumber\r\n\t\t\tAND MB.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n\tWHERE UM.AccountBilled IS NOT NULL AND UM.MeterBilled IS NOT NULL;\r\n\r\n\t--\tUpdate the meter billing adjustments with a 'BA' status if they were not found with EC3. Exclude any\r\n\t--\tmeter billing whose status starts with 'U*' since they are unknown to EC3.  They will be added as new\r\n\t--\tmeters.  If they are being added to existing accounts then OEC will have to contact Con Edison to find out\r\n\t--\twhether it was a meter exchange or an additional meter.\r\n\r\n\tUPDATE UM\r\n\tSET MeterBillingStatus = 'BA', \r\n\t\tMeterBillingPreviousStatus = 'NB', \r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod,\r\n\t\tNotes = Case when substring(Notes,1,5) = 'Meter' then Notes\r\n\t\t\t\t\twhen DerivedFromSpannedBill = 'Y' \r\n\t\t\t\t\t\tthen Notes + ' Back Billed in: '+ @CurrentBillingPeriod+ ' for Revised Billing Period: '+UM.BillingPeriodRevision\r\n\t\t\t\t\t\telse         ' Back Billed in: '+ @CurrentBillingPeriod+ ' for Revised Billing Period: '+UM.BillingPeriodRevision end \r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\tWHERE (BillingPeriod <> BillingPeriodRevision) AND \r\n\t\t(CancelThermsFactor IS NULL) AND \r\n\t\t(MeterBillingStatus NOT LIKE 'U%');\r\n\r\n\t--\tCreate Common.UploadCommonExchangeData in preparation to do the exchange processing.\r\n\r\n\tTRUNCATE TABLE Gas.UploadCommonElectronicGasExchangeData;\r\n\r\n\tINSERT INTO Gas.UploadCommonElectronicGasExchangeData\r\n\t\t(UtilityCompanyId,\r\n\t\tAccountBillingGroup,\r\n\t\tBillingPeriod,\r\n\t\tApprovedForCreation,\r\n\t\tCurrentAccountNumber,\r\n\t\tCurrentMeterNumber,\r\n\t\tExchangeCode,\r\n\t\tAccountStatus,\r\n\t\tAccountEffectiveTurnOn,\r\n\t\tAccountEffectiveTurnOff,\r\n\t\t--  KWHAccountDescription,\r\n\t\tSalesType,\r\n\t\tDeliveryServiceClass,\r\n\t\tDeliveryServiceClassEffectiveDate,\r\n\t\tProductionServiceClass,\r\n\t\tProductionServiceClassEffectiveDate,\r\n\t\tBillingCycle,\r\n\t\t--   ExcessDistributionAccount,\r\n\t\tTODAccount,\r\n\t\tTripNumber,\r\n\t\tAccountName,\r\n\t\tAccountAddress,\r\n\t\tBorough,\r\n\t\tMeterStatus,\r\n\t\tMeterEffectiveTurnOnDate,\r\n\t\tMeterEffectiveTurnOffDate,\r\n\t\tMeterType,\r\n\t\tMeterNumberofDials,\r\n\t\tMeterConstant,\r\n\t\t--    MeterTension,\r\n\t\tManualDataEntry,\r\n\t\tEnergyDeliveryCount, \r\n\t\tEnergyDeliveryType,\r\n\t\t--   EnergyDeliveryType1, \r\n\t\tauthenticatedUserID)\r\n\tSELECT Min(9) as UtilityCompanyId,\r\n\t\tmin(2) as AccountBillingGroup,\r\n\t\tmin(UM.BillingPeriod) as BillingPeriod,\r\n\t\tmin('Y') as ApprovedForCreation,\r\n\t\tUM.OriginalAccountNumber, \r\n\t\tUM.OriginalMeterNumber,\r\n\t\tUM.MeterBillingStatus as ExchangeCode,\r\n\t\tUM.MeterBillingStatus as AccountStatus,\r\n\t\tmin(UM.FromDate) as AccountEffectiveTurnOn,\r\n\t\tmin('99991231') as AccountEffectiveTurnOff,\r\n\t\t--min(null) as KWHAccountDescription,\r\n\t\tmin('BT') as SalesType,\r\n\t\tmin(UM.GasRateCode) as DeliveryServiceClass,\r\n\t\tmin(UM.FromDate) as DeliveryServiceClassEffectiveDate,\r\n\t\tmin(UM.GasRateCode) as ProductionServiceClass,\r\n\t\tmin(UM.FromDate) as ProductionServiceClassEffectiveDate,\r\n\t\tmin('M') as BillingCycle,\r\n\t\t--min(null) as ExcessDistributionAccount,\r\n\t\tmin('N') as TODAccount,\r\n\t\tmin('18') as TripNumber,\r\n\t\tmin(case when UM.FacilityName is null then 'Missing Facility Name' else UM.FacilityName end ) as AccountName,\r\n\t\tmin(case when UM.ServiceAddress is null then 'Missing Service Address' else UM.ServiceAddress end ) as AccountAddress,\r\n\t\tmin(1) as Borough,\r\n\t\tUM.MeterBillingStatus as MeterStatus,\r\n\t\tmin(UM.FromDate) as MeterEffectiveTurnOnDate,\r\n\t\tmin('99991231') as MeterEffectiveTurnOffDate,\r\n\t\tmin('G') as MeterType,\r\n\t\tmin(UM.NumberOfDials) as MeterNumberofDials,\r\n\t\tmin(MeterConstant) as MeterConstant,\r\n\t\t--min(null) as MeterTension,\r\n\t\tmin('N') as ManualDataEntry,\r\n\t\tmin(1) as EnergyDeliveryCount,\r\n\t\tmin(5) as EnergyDeliveryType,\r\n\t\t--min(null) as EnergyDeliveryType1, \r\n\t\tmin(1) as authenticatedUserID\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tFULL OUTER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG ON UM.OriginalAccountNumber = UAG.OriginalAccountNumber\r\n\t\t\tAND UM.BillingPeriod = UAG.BillingPeriod AND UM.BillingPeriodRevision = UAG.BillingPeriodRevision\r\n\tWHERE (UAG.AccountStatus LIKE 'U%' and UAG.AdjustedAccount is null) OR\r\n\t\t(UM.MeterBillingStatus LIKE 'U%' and UM.AccountExchangeMeterTrackSeqid is null)\r\n\tGROUP BY UM.OriginalAccountNumber, \r\n\t\tUM.OriginalMeterNumber,\r\n\t\tUM.MeterBillingStatus\r\n\r\n\tDELETE FROM Gas.UploadCommonElectronicGasExchangeData\r\n\tFROM Billing.AccountExchangeMeterTrack AS AE\r\n\t\tINNER JOIN Billing.Account AS A ON AE.OriginalAccountSeqid = A.AccountSeqid\r\n\t\tINNER JOIN Billing.Meter AS M ON AE.OriginalMeterSeqid = M.MeterSeqid\r\n\t\tINNER JOIN Gas.UploadCommonElectronicGasExchangeData AS GE ON M.OriginalAccountNumber = GE.CurrentAccountNumber\r\n\t\t\tAND M.OriginalMeterNumber = GE.CurrentMeterNumber AND A.UtilityAccountProvider = GE.UtilityCompanyId\r\n\t\t\tAND A.OriginalAccountNumber = GE.CurrentAccountNumber\r\n\tWHERE A.AccountStatusCodePeriod < @CurrentBillingPeriod AND M.MeterStatusCodePeriod < @CurrentBillingPeriod;\t\t\r\n\r\n\t--\tRemove any garbage row where the (CurrentAccountNumber IS NULL) OR (CurrentMeterNumber IS NULL)\r\n\r\n\tDELETE FROM Gas.UploadCommonElectronicGasExchangeData\r\n\tWHERE CurrentAccountNumber IS NULL OR CurrentMeterNumber IS NULL;\r\n\t\t\r\n\t--\tInsert the AccountBilling records from \"ConEd.UploadConEdisonCurrentlyBilledAccounts AS NoOriginalAccountBilling\" to provide\r\n\t--\ta record that can be used for the current period billing.  All of these bills will have a status code of \"BC\" back billed without\r\n\t--\ta current period bill.  The Current period usage and dollars are zero.  This was included for interuptible gas that lags billing\r\n\t--\tby a month.  The money will be count as a net paid adjustment.\r\n\t\r\n\tINSERT INTO ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\t(UniqueAccountSeqID, /* added on 12/21/2018 */\r\n\t\tFacilityName,\r\n\t\tServiceAddress,\r\n\t\tAdjustedAccount,\r\n\t\tAccountUtilityCompanySeqid,\r\n\t\tAccountStatus,\r\n\t\tAccountpreviousStatus,\r\n\t\tAccountStatusPeriod,\r\n\t\tCurrentInvoiceAccountBillingGroup,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tOriginalAccountNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCanceledBillingPeriod,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tTotalRebilledAmount,\r\n\t\tTotalCanceledAmount,\r\n\t\tPriorRevisedBilledAmount,\r\n\t\tRevisedBilledAmount,\r\n\t\tCanceledBilledAmount,\r\n\t\tPriorRevisedCCF,\r\n\t\tRevisedCCF,\r\n\t\tCanceledCCF,\r\n\t\tPriorRevisedTherms,\r\n\t\tRevisedTherms,\r\n\t\tCanceledTherms,\r\n\t\tAverageRebillCostOfGasCharge,\r\n\t\tAverageRebillThermsFactor,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tToDate,\r\n\t\tFromDate,\r\n\t\tBillingAction,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tGasRateCode,\r\n\t\tTotalCCF,\r\n\t\tTotalTherms,\r\n\t\tThermsFactor,\r\n\t\tCancelFromDate,\r\n\t\tCancelToDate,\r\n\t\tCancelTotalCCF,\r\n\t\tCancelTotalTherms,\r\n\t\tCancelThermsFactor,\r\n\t\tCancelBillingDays,\r\n\t\tProcessEffectiveDate,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedBilledAmount,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tNotes, \r\n\t\tAuthenticatedUserID)\r\n\tSELECT UAG.UniqueAccountSeqID, /* added on 12/21/2018 */\r\n\t\t-- UAG.UploadConEdisonAccountBillingAdjustmentGasSeqid, \r\n\t\tUAG.FacilityName, \r\n\t\tUAG.ServiceAddress, \r\n\t\tUAG.AdjustedAccount,\r\n\t\tUAG.AccountUtilityCompanySeqid, \r\n\t\t'BC', -- UAG.AccountStatus, \r\n\t\t'NB', -- UAG.AccountpreviousStatus, \r\n\t\t@CurrentBillingPeriod, -- UAG.AccountStatusPeriod, \r\n\t\tUAG.CurrentInvoiceAccountBillingGroup, \r\n\t\t1, -- UAG.NumberOfTransactions, \r\n\t\t1, -- UAG.NumberOfRebillTransactions,\r\n\t\t0, --  UAG.NumberOfCancelTransactions, \r\n\t\tUAG.OriginalAccountNumber, \r\n\t\t@CurrentBillingPeriod, \r\n\t\t@CurrentBillingPeriod, -- @CurrentBillingPeriodRevision, \r\n\t\t@CurrentBillingPeriod, -- UAG.FirstCanceledBillingPeriod, \r\n\t\t'EST', -- UAG.EstimatedOrActualBilling, \r\n\t\tUAG.InitialCancelFromDate, \r\n\t\tUAG.CurrentBillingToDate, \r\n\t\tUAG.NumberOfBillingPeriods, \r\n\t\tUAG.TotalBillingDaysRebilled, \r\n\t\t0, --  UAG.TotalRebilledAmount, \r\n\t\t0, --  UAG.TotalCanceledAmount, \r\n\t\t0, --  UAG.PriorRevisedBilledAmount,\r\n\t\t0, --  UAG.RevisedBilledAmount, \r\n\t\t0, --  UAG.CanceledBilledAmount, \r\n\t\t0, --  UAG.PriorRevisedCCF, \r\n\t\t0, --  UAG.RevisedCCF, \r\n\t\t0, --  UAG.CanceledCCF,\r\n\t\t0, --  UAG.PriorRevisedTherms, \r\n\t\t0, --  UAG.RevisedTherms, \r\n\t\t0, --  UAG.CanceledTherms, \r\n\t\t0, --  UAG.AverageRebillCostOfGasCharge, \r\n\t\t0, --  UAG.AverageRebillThermsFactor,\r\n\t\tdbo.[CalculateNumberOfBillingDays]  (dbo.[DetermineConEdisonBillingPeriodProjectedFromDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid),\r\n\t\t\t\t\t\t\t\t\t\t\t   dbo.[DetermineConEdisonBillingPeriodProjectedToDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid)\r\n\t\t\t\t\t\t\t\t\t\t\t   ), --  UAG.BillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD] ( getDate()), --  UAG.BillingDate,\r\n\t\tdbo.[DetermineConEdisonBillingPeriodProjectedToDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid), --  UAG.ToDate,\r\n\t\tdbo.[DetermineConEdisonBillingPeriodProjectedFromDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid), --  UAG.FromDate,\r\n\t\t'O', --  UAG.BillingAction,\r\n\t\t'N', --  UAG.ProcessedInTheCurrentPeriod,\r\n\t\tUAG.GasRateCode,\r\n\t\t0, --  UAG.TotalCCF,\r\n\t\t0, --  UAG.TotalTherms,\r\n\t\t0, --  UAG.ThermsFactor,\r\n\t\tnull, --  UAG.CancelFromDate,\r\n\t\tnull, --  UAG.CancelToDate,\r\n\t\t0, --  UAG.CancelTotalCCF,\r\n\t\t0, --  UAG.CancelTotalTherms,\r\n\t\t0, --  UAG.CancelThermsFactor,\r\n\t\t0, --  UAG.CancelBillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD] ( getDate()), --  UAG.ProcessEffectiveDate,\r\n\t\t'N', --  UAG.DerivedFromSpannedBill,\r\n\t\t0, --  UAG.SpannedBillingPeriodRevision,\r\n\t\t0, --  UAG.SpannedFirstCanceledBillingPeriod,\r\n\t\t0, --  UAG.SpannedBilledAmount,\r\n\t\t0, --  UAG.SpannedCCF,\r\n\t\t0, --  UAG.SpannedThermFactor,\r\n\t\t0, --  UAG.SpannedTherm,\r\n\t\t0, --  UAG.SpannedMonthlyPercentage,\r\n\t\t0, --  UAG.SpannedTotalPercentage,\r\n\t\t'No Current Account Billing Period record: '+@CurrentBillingPeriod, --  UAG.Notes\r\n\t\t1 -- AuthenticatedUserID\r\n\tFROM ConEd.UploadConEdisonCurrentlyBilledAccounts AS UC\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG ON UC.OriginalAccountNumber = UAG.OriginalAccountNumber\r\n\tWHERE UAG.BillingPeriodRevision = (SELECT MAX(BillingPeriodRevision) AS MaxBillingPeriodRevision\r\n\t\t\t\t\t\t\t\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS MaxRevised\r\n\t\t\t\t\t\t\t\tGROUP BY OriginalAccountNumber\r\n\t\t\t\t\t\t\t\tHAVING OriginalAccountNumber = UAG.OriginalAccountNumber);\r\n\r\n\t--\tInsert the AccountBilling records when the \"UploadConEdisonAccountBillingAdjustmentGasSeqid IS NULL and \r\n\t--\tUploadConEdisonMeterBillingAdjustmentGasSeqid is not null\".  This provides a record that can be used for the current period billing that\r\n\t--\twas not provided by Con edison.  All of these bills will have a status code of \"BM\" back billed meter billing without\r\n\t--\ta current period account bill.  The period will reflect the billing period revison and the usage is set to the CCF,Therms and Thermsfactor.  \r\n\t--\tAll dollar columns will be set to Zero (no money).\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\t(UniqueAccountSeqID, /* added on 12/21/2018 */\r\n\t\tFacilityName,\r\n\t\tServiceAddress,\r\n\t\tAdjustedAccount,\r\n\t\tAccountUtilityCompanySeqid,\r\n\t\tAccountStatus,\r\n\t\tAccountpreviousStatus,\r\n\t\tAccountStatusPeriod,\r\n\t\tCurrentInvoiceAccountBillingGroup,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tOriginalAccountNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCanceledBillingPeriod,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tTotalRebilledAmount,\r\n\t\tTotalCanceledAmount,\r\n\t\tPriorRevisedBilledAmount,\r\n\t\tRevisedBilledAmount,\r\n\t\tCanceledBilledAmount,\r\n\t\tPriorRevisedCCF,\r\n\t\tRevisedCCF,\r\n\t\tCanceledCCF,\r\n\t\tPriorRevisedTherms,\r\n\t\tRevisedTherms,\r\n\t\tCanceledTherms,\r\n\t\tAverageRebillCostOfGasCharge,\r\n\t\tAverageRebillThermsFactor,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tToDate,\r\n\t\tFromDate,\r\n\t\tBillingAction,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tGasRateCode,\r\n\t\tTotalCCF,\r\n\t\tTotalTherms,\r\n\t\tThermsFactor,\r\n\t\tCancelFromDate,\r\n\t\tCancelToDate,\r\n\t\tCancelTotalCCF,\r\n\t\tCancelTotalTherms,\r\n\t\tCancelThermsFactor,\r\n\t\tCancelBillingDays,\r\n\t\tProcessEffectiveDate,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedBilledAmount,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tNotes, \r\n\t\tAuthenticatedUserID)\r\n\tSELECT UAG.UniqueAccountSeqID, /* added on 12/21/2018 */\r\n\t\tUMG.FacilityName, \r\n\t\tUMG.ServiceAddress, \r\n\t\tUMG.AccountBilled,\r\n\t\tUMG.AccountUtilityCompanySeqid, \r\n\t\t'BM', -- UAG.AccountStatus, \r\n\t\t'NB', -- UAG.AccountpreviousStatus, \r\n\t\t@CurrentBillingPeriod, -- UAG.AccountStatusPeriod, \r\n\t\t(select A.CurrentInvoiceAccountGroup from Billing.Account AS A WHERE A.AccountSeqid =UMG.AccountBilled), --UAG.CurrentInvoiceAccountBillingGroup, \r\n\t\t0, -- UAG.NumberOfTransactions, \r\n\t\t0, -- UAG.NumberOfRebillTransactions,\r\n\t\t0, --  UAG.NumberOfCancelTransactions, \r\n\t\tUMG.OriginalAccountNumber, \r\n\t\t@CurrentBillingPeriod, \r\n\t\tUMG.BillingPeriodRevision, -- @CurrentBillingPeriodRevision, \r\n\t\tUMG.BillingPeriodRevision, -- UAG.FirstCanceledBillingPeriod, \r\n\t\t'EST', -- UAG.EstimatedOrActualBilling, \r\n\t\tUMG.FromDate, -- UAG.InitialCancelFromDate, \r\n\t\tUMG.ToDate, -- UAG.CurrentBillingToDate, \r\n\t\tUMG.NumberOfBillingPeriods, \r\n\t\tUMG.TotalBillingDaysRebilled, \r\n\t\t0, --  UAG.TotalRebilledAmount, \r\n\t\t0, --  UAG.TotalCanceledAmount, \r\n\t\t0, --  UAG.PriorRevisedBilledAmount,\r\n\t\t0, --  UAG.RevisedBilledAmount, \r\n\t\t0, --  UAG.CanceledBilledAmount, \r\n\t\t0, --  UAG.PriorRevisedCCF, \r\n\t\t0, --  UAG.RevisedCCF, \r\n\t\t0, --  UAG.CanceledCCF,\r\n\t\t0, --  UAG.PriorRevisedTherms, \r\n\t\t0, --  UAG.RevisedTherms, \r\n\t\t0, --  UAG.CanceledTherms, \r\n\t\t0, --  UAG.AverageRebillCostOfGasCharge, \r\n\t\t0, --  UAG.AverageRebillThermsFactor,\r\n\t\tUMG.BillingDays, --  UAG.BillingDays,\r\n\t\tUMG.BillingDate, -- dbo.[ConvertDatetimeToYYYYMMDD] ( getDate()), --  UAG.BillingDate,\r\n\t\tUMG.ToDate,  --  dbo.[DetermineConEdisonBillingPeriodProjectedToDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid), --  UAG.ToDate,\r\n\t\tUMG.FromDate,  --  dbo.[DetermineConEdisonBillingPeriodProjectedFromDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid), --  UAG.FromDate,\r\n\t\tUMG.BillingAction, --  UAG.BillingAction,\r\n\t\t'N', --  UAG.ProcessedInTheCurrentPeriod,\r\n\t\t(select A.CommodityTariffRate from Billing.Account AS A where A.AccountSeqid =UMG.AccountBilled), --UMG.GasRateCode,\r\n\t\t0, --  UMG.Ccf, --  UAG.TotalCCF,\r\n\t\t0, --  UMG.Therms, --  UAG.TotalTherms,\r\n\t\t0, --  UMG.ThermsFactor, --  UAG.ThermsFactor,\r\n\t\tnull, --  UAG.CancelFromDate,\r\n\t\tnull, --  UAG.CancelToDate,\r\n\t\t0, --  UAG.CancelTotalCCF,\r\n\t\t0, --  UAG.CancelTotalTherms,\r\n\t\t0, --  UAG.CancelThermsFactor,\r\n\t\t0, --  UAG.CancelBillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD] ( getDate()), --  UAG.ProcessEffectiveDate,\r\n\t\t'N', --  UAG.DerivedFromSpannedBill,\r\n\t\t0, --  UAG.SpannedBillingPeriodRevision,\r\n\t\t0, --  UAG.SpannedFirstCanceledBillingPeriod,\r\n\t\t0, --  UAG.SpannedBilledAmount,\r\n\t\t0, --  UAG.SpannedCCF,\r\n\t\t0, --  UAG.SpannedThermFactor,\r\n\t\t0, --  UAG.SpannedTherm,\r\n\t\t0, --  UAG.SpannedMonthlyPercentage,\r\n\t\t0, --  UAG.SpannedTotalPercentage,\r\n\t\t'No Account Billing record, Revision: '+UMG.BillingPeriodRevision+' Current: '+@CurrentBillingPeriod+\r\n\t\t'  CCF ('+cast(UMG.Ccf as varchar(12))+')  ThermsFactor ('+cast(UMG.ThermsFactor as varchar(12))+')   Therms ('+cast(UMG.Therms as varchar(12))+')', --  UAG.Notes\r\n\t\t1 -- AuthenticatedUserID\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\tRIGHT JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UMG ON UAG.OriginalAccountNumber = UMG.OriginalAccountNumber\r\n\t\t\tAND UAG.BillingPeriod = UMG.BillingPeriod AND UAG.BillingPeriodRevision = UMG.BillingPeriodRevision\r\n\tWHERE (UAG.UploadConEdisonAccountBillingAdjustmentGasSeqid IS NULL)\r\n      AND UMG.AccountBilled IS null\r\n\r\n\t-- Adjust ConEd.UploadConEdisonMeterBillingAdjustmentGas with information from the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t-- that is to used in the Gas.UM.  Eventually, it be inserted into the Billing.MeterBilling and\r\n\t-- MBG.  Grab BillCreationDate from the Common.UploadCycleParameters table.\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET BillCreationDate =UC.BillCreationDate, \r\n\t\tEnergySource =UAG.EnergySource, \r\n\t\tLastPeriodModified =UAG.LastPeriodModified, \r\n\t\tBillingCycle =UAG.BillingCycle, \r\n\t\tSalesType =UAG.SalesType, \r\n\t\tIsTimeOfDayAccount ='N',-- Electricity only \r\n\t\tUtilityServiceAddress =UAG.ServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\t\tON UM.AccountUtilityCompanySeqid = UAG.AccountUtilityCompanySeqid\r\n\t\t\tAND UM.OriginalAccountNumber = UAG.OriginalAccountNumber AND UM.BillingPeriod = UAG.BillingPeriod\r\n\t\t\tAND UM.BillingPeriodRevision = UAG.BillingPeriodRevision AND UM.AccountBilled = UAG.AdjustedAccount\r\n\t\tINNER JOIN Common.UploadCycleParameters AS UC ON UAG.BillingPeriod = UC.BillingPeriod\r\n\t\t\tAND UAG.AccountUtilityCompanySeqid = UC.UtilityCompanySeqid AND UAG.CurrentInvoiceAccountBillingGroup = UC.InvoiceAccountGroupSeqid\r\n\tWHERE UAG.BillingPeriod = @CurrentBillingPeriod;\r\n\r\n\t-- Adjust ConEd.UploadConEdisonMeterBillingAdjustmentGas with information from the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t-- that is to used in the Gas.UM.  Eventually, it be inserted into the Billing.MeterBilling and\r\n\t-- MBG.  Grab MeterDials from the M.\r\n\r\n\tUPDATE UM\r\n\tSET MeterDials = M.MeterDials\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tINNER JOIN Billing.Meter AS M ON UM.MeterBilled = M.MeterSeqid AND \r\n\t\t\tUM.OriginalAccountNumber = M.OriginalAccountNumber AND \r\n\t\t\tUM.OriginalMeterNumber = M.CurrentMeterNumber\r\n\tWHERE UM.BillingPeriod = @CurrentBillingPeriod;                     \r\n\r\n\t--\tIdentify all accounts and meters that were previously identified as unknown exchanges and \r\n\t--\thave not as of yet been reconciled with the utility company as to what kind of exchange was done.\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AccountpreviousStatus = AccountStatus, \r\n\t\tAccountStatus = 'AC', \r\n\t\tAccountStatusPeriod = BillingPeriod \r\n\tWHERE AccountStatus LIKE 'U%' AND AdjustedAccount IS NOT NULL;\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET MeterBillingPreviousStatus = MeterBillingStatus, \r\n\t\tMeterBillingStatus = 'AC', \r\n\t\tMeterBillingStatusPeriod = BillingPeriod\r\n\tWHERE MeterBillingStatus LIKE 'U%' AND AccountExchangeMeterTrackSeqid IS NOT NULL;\r\nEND;",
      "created": "2025-06-10 21:41:26.530000",
      "last_altered": "2025-06-10 21:41:26.530000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@Status",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_PreProcessConEdisonAccountAndMeterInfo",
      "explanation": "#### 1. Overview\n\nThe stored procedure `Archive_usp_PreProcessConEdisonAccountAndMeterInfo` is designed to preprocess billing and account information for Con Edison gas accounts. It performs a series of data manipulations and updates across several tables to prepare account and meter billing data for further processing or archival. The procedure handles billing adjustments, identifies discrepancies, and prepares data for electronic exchange processing.\n\n#### 2. Complexity Level: High\n\nThe complexity of this stored procedure is high due to the following reasons:\n- It involves multiple complex SQL operations, including `INSERT`, `UPDATE`, `DELETE`, and `TRUNCATE`.\n- It processes data across several tables with intricate joins and conditions.\n- It includes business logic for handling billing adjustments, discrepancies, and status updates.\n- The procedure contains numerous conditional logic and calculations, making it difficult to follow without a deep understanding of the underlying data model.\n\n#### 3. Input Parameters\n\n- `@Status AS INT OUTPUT`: This parameter is intended to return a status code indicating the success or failure of the procedure. However, it is not explicitly set within the procedure, which may be an oversight.\n\n#### 4. Business Logic and Workflow\n\n1. **Initialization and Setup:**\n   - The procedure begins by determining the current billing period from the `ConEd.UploadConEdisonAccountBillingAdjustmentGas` table.\n   - It then truncates the `ConEd.UploadConEdisonCurrentlyBilledAccounts` table to prepare it for new data.\n\n2. **Data Insertion and Cleanup:**\n   - Inserts distinct account numbers billed in the current period into `ConEd.UploadConEdisonCurrentlyBilledAccounts`.\n   - Deletes accounts from this table that have original bills (where `BillingPeriod = BillingPeriodRevision`).\n\n3. **Account and Meter Updates:**\n   - Updates account information with sequence IDs and status from the `Billing.Account` table.\n   - Adjusts billing amounts and therms based on predefined formulas and conditions.\n   - Updates meter billing data with discrepancies and sets default values for unknown meters.\n\n4. **Data Preparation for Exchange:**\n   - Prepares data for electronic exchange by inserting into `Gas.UploadCommonElectronicGasExchangeData`.\n   - Deletes invalid or outdated data from this table.\n\n5. **Handling Missing Billing Records:**\n   - Inserts records into `ConEd.UploadConEdisonAccountBillingAdjustmentGas` for accounts without current billing records, setting default values for various fields.\n\n6. **Final Adjustments:**\n   - Updates meter billing adjustments with information from account billing adjustments.\n   - Identifies and updates unknown exchanges that have not been reconciled.\n\n#### 5. Performance Considerations\n\n- **Table Truncation and Inserts:** Frequent truncation and insertion operations can be resource-intensive, especially if the tables are large.\n- **Complex Joins:** The use of multiple joins across large tables can lead to performance bottlenecks.\n- **Conditional Logic:** Extensive use of conditional logic in updates can slow down execution.\n- **Indexing:** Proper indexing on join and where clause columns is crucial to optimize performance.\n\n#### 6. Potential Issues or Risks\n\n- **Lack of Error Handling:** The procedure does not include error handling mechanisms, which could lead to unhandled exceptions and data inconsistencies.\n- **Output Parameter Not Set:** The `@Status` output parameter is not set, which could lead to confusion about the procedure's success or failure.\n- **Data Integrity:** The procedure performs direct updates and deletions, which could lead to data integrity issues if not carefully managed.\n- **Concurrency:** The procedure might face concurrency issues if multiple instances are run simultaneously, especially with table truncation and insertion operations.\n- **Scalability:** As data volume grows, the procedure may become less efficient, necessitating optimization or refactoring.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 11225,
      "api_response_id": "chatcmpl-ByeoXoPF4eDENeBzGip0pXEsqCooI"
    },
    "analysis_timestamp": "2025-07-29 09:38:11"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_ProcessConEdLoadRawAndTransformData",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_ProcessConEdLoadRawAndTransformData] (@Status int output)\r\nAS\r\n\r\nDECLARE @ssispath VARCHAR(1000)\r\nDECLARE @cmd VARCHAR(1000)\r\n/**********************************************\r\nUpload ConEdison Raw Data\t\r\n**********************************************/\r\n\r\n--SET @ssispath = '\\\\dcasec3sql1\\z$\\SSISpackage\\SSiSDataUpload\\ConEdison.dtsx'\r\nSET @ssispath = '\\\\MSDCASNETAPP01M\\shr_ec3_archive1$\\SSISpackage\\SSiSDataUpload\\ConEdison.dtsx'\r\nSET @cmd = 'dtexec /f \"' + @ssispath + '\"' -- set ssis path\r\nSET @cmd = @cmd + ' /SET \\Package.Variables[User::DatabaseName].Properties[Value];\"' + DB_NAME() + '\"'\r\nSET @cmd = @cmd + ' /SET \\Package.Variables[User::ServerName].Properties[Value];\"' + @@SERVERNAME + '\"' \r\n\r\nEXEC sp_configure 'show advanced options', 1\r\nRECONFIGURE\r\nEXEC sp_configure 'xp_cmdshell', 1\r\nRECONFIGURE\r\n\r\nEXEC xp_cmdshell @cmd\r\n\r\nEXEC sp_configure 'show advanced options', 1\r\nRECONFIGURE\r\nEXEC sp_configure 'xp_cmdshell', 0\r\nRECONFIGURE\r\n/************************* End Preload Data *********************/\r\n\r\n\r\n\r\n-------- Load Formated Tables\r\n\r\n--\tInitialize formatted tables prior to insertion from the flat files \r\n--\r\nTruncate table  ConEd.UploadConEdisonAccount\r\nTruncate table  ConEd.UploadConEdisonMeter\r\nTruncate table  ConEd.UploadConEdisonCancellation\r\n--\r\n\r\nINSERT INTO ConEd.[UploadConEdisonAccount]\r\n           ([BillingPeriod]\r\n           ,[BillingPeriodRevision]\r\n           ,[FirstPeriodCanceled]\r\n           ,[DeltaNumberOfPeriods]\r\n           ,[RecordType]\r\n           ,[AccountNumber]\r\n           ,[FacilityName]\r\n           ,[ServiceAddress]\r\n           ,[FromDate]\r\n           ,[ToDate]\r\n           ,[BillingPeriodDays]\r\n           ,[CCF]\r\n           ,[BilledAmount]\r\n           ,[PreviousBalance]\r\n           ,[Therms]\r\n           ,[ThermFactor]\r\n           ,[TariffCode]\r\n           ,[Dials]\r\n           ,[FiscalYear]\r\n           ,[PostingDate]\r\n           ,[AuthenticatedUserID]\r\n           ,[DateAdded]\r\n           ,[LastUpdate])\r\nSELECT\r\nBillingPeriod, BillingPeriodRevision, FirstPeriodCanceled, DeltaNumberOfPeriods, RecordType, AccountNumber, \r\nFacilityName, ServiceAddress, [dbo].[JulianDateToYYYYMMDD] (FromDate) as FromDate, [dbo].[JulianDateToYYYYMMDD] (ToDateJul) as ToDate, BillingPeriodDays, \r\ndbo.ConvertOverpunch8ToInt32(CCF) AS CCF, dbo.ConvertOverpunch9ToMoney(BilledAmount) AS BilledAmount, dbo.ConvertOverpunch9ToMoney(PreviousBalance) AS PreviousBalance, \r\ndbo.ConvertOverpunch8ToInt32(Therms) as Therms, dbo.ConvertOverpunch4ToDecimal(ThermFactor) AS ThermFactor, TariffCode, Dials, \r\n[dbo].[CalculateFiscalYear] (dbo.JulDatetoYYYYMM(ToDateJul)) as calcFiscalYear, [dbo].[JulianDateToYYYYMMDD] (PostingDate) as PostingDate, \r\n1, getdate(),getdate()\r\nFROM ConEd.UploadConEdisonAccountPreload\r\n\r\n\r\nINSERT INTO ConEd.[UploadConEdisonCancellation]\r\n           ([BillingPeriod]\r\n           ,[BillingPeriodRevision]\r\n           ,[FirstPeriodCanceled]\r\n           ,[DeltaNumberOfPeriods]\r\n           ,[RecordType]\r\n           ,[AccountNumber]\r\n           ,[MeterNumber]\r\n           ,[FacilityName]\r\n           ,[ServiceAddress]\r\n           ,[FromDate]\r\n           ,[ToDate]\r\n           ,[BillingPeriodDays]\r\n           ,[CCF]\r\n           ,[BilledAmount]\r\n           ,[Therms]\r\n           ,[ThermFactor]\r\n           ,[TariffCode]\r\n           ,[Dials]\r\n           ,[FiscalYear]\r\n           ,[PostingDate]\r\n           ,[AuthenticatedUserID]\r\n           ,[DateAdded]\r\n           ,[LastUpdate])\r\nSELECT\r\nBillingPeriod, BillingPeriodRevision, FirstPeriodCanceled, DeltaNumberOfPeriods, RecordType, AccountNumber, MeterNumber,\r\nFacilityName, ServiceAddress, [dbo].[JulianDateToYYYYMMDD] (FromDate) as FromDate, [dbo].[JulianDateToYYYYMMDD] (ToDateJul) as ToDate, BillingPeriodDays, \r\ndbo.ConvertOverpunch8ToInt32(CCF) AS CCF, dbo.ConvertOverpunch9ToMoney(BilledAmount) AS BilledAmount,\r\ndbo.ConvertOverpunch8ToInt32(Therms) as Therms, dbo.ConvertOverpunch4ToDecimal(ThermFactor) AS ThermFactor, TariffCode, Dials, \r\n[dbo].[CalculateFiscalYear] (dbo.JulDatetoYYYYMM(ToDateJul)) as calcFiscalYear, [dbo].[JulianDateToYYYYMMDD] (PostingDate) as PostingDate, \r\n1, getdate(),getdate()\r\nFROM ConEd.UploadConEdisonCancellationPreload\r\n\r\n\r\nINSERT INTO ConEd.[UploadConEdisonMeter]\r\n           ([BillingPeriod]\r\n           ,[BillingPeriodRevision]\r\n           ,[FirstPeriodCanceled]\r\n           ,[DeltaNumberOfPeriods]\r\n           ,[AccountNumber]\r\n           ,[MeterNumber]\r\n           ,[FromDate]\r\n           ,[ToDate]\r\n           ,[RecordType]\r\n           ,[FromReading]\r\n           ,[ToReading]\r\n           ,[MeterConstant]\r\n           ,[Dials]\r\n           ,[FacilityName]\r\n           ,[ReadingCode]\r\n           ,[CCF]\r\n           ,[CycleBillingDays]\r\n           ,[ThermFactor]\r\n           ,[ServiceAddress]\r\n           ,[FiscalYear]\r\n           ,[PostingDate]\r\n           ,[AuthenticatedUserID]\r\n           ,[DateAdded]\r\n           ,[LastUpdate])\r\nSELECT\r\nBillingPeriod, BillingPeriodRevision, FirstPeriodCanceled, DeltaNumberOfPeriods, AccountNumber, MeterNumber,\r\n[dbo].[JulianDateToYYYYMMDD] (FromDate) as FromDate, [dbo].[JulianDateToYYYYMMDD] (ToDate) as ToDate, RecordType,\r\n[dbo].[ConvertOverpunch6ToInt32] (FromReading) as FromReading, [dbo].[ConvertOverpunch6ToInt32] (ToReading) as ToReading, \r\nMeterConstant, Dials, FacilityName, ReadingCode, dbo.ConvertOverpunch8ToInt32(CCF) as CCF, cast(CycleBillingDays as int),\r\ndbo.ConvertOverpunch4ToDecimal(ThermFactor) as ThermFactor, ServiceAddress,\r\n[dbo].[CalculateFiscalYear] (dbo.JulDatetoYYYYMM(ToDate)) as calcFiscalYear,\r\n[dbo].[JulianDateToYYYYMMDD] (BillCreationDate),\r\n1, getdate(),getdate()\r\nFROM ConEd.UploadConEdisonMeterPreload\r\n--\r\n--\tIdentify Unique  NetZero  Transactions And Remove By Cursor from the account and cancellation tables\r\n--\r\nEXEC\t[ConEd].[usp_IdentifyUniqueNetZeroTransactionsAndRemoveByCursor] @AuthenticatedUserID = 1\r\n--\r\n--\tIdentify and correct the meter data as to consistent from and todates in the meter table\r\n--\r\nexec\t[ConEd].[usp_IdentifyAndCorrectMeterDataFromAndToDate] @AuthenticatedUserID = 1\r\n--\r\n--\r\n---Loading 0-1 Period Rebills (Temporarily here)\r\ntruncate table ConEd.UploadConEdisonAccountSummary\r\n--\r\nINSERT INTO ConEd.[UploadConEdisonAccountSummary]\t\t\t\r\n           ([AdjustedAccount]\t\t\t\r\n           ,[AccountUtilityCompanySeqid]\t\t\t\r\n           ,[NumberOfTransactions]\t\t\t\r\n           ,[NumberOfRebillTransactions]\t\t\t\r\n           ,[NumberOfCancelTransactions]\t\t\t\r\n           ,[OriginalAccountNumber]\t\t\t\r\n           ,[BillingPeriod]\t\t\t\r\n           ,[BillingPeriodRevision]\t\t\t\r\n           ,[FirstCanceledBillingPeriod]\t\t\t\r\n           ,[EstimatedOrActualBilling]\t\t\t\r\n           ,[InitialCancelFromDate]\t\t\t\r\n           ,[CurrentBillingToDate]\t\t\t\r\n           ,[NumberOfBillingPeriods]\t\t\t\r\n           ,[TotalBillingDaysRebilled]\t\t\t\r\n           ,[TotalRebilledAmount]\t\t\t\r\n           ,[TotalCanceledAmount]\t\t\t\r\n           ,[AverageRebillCostOfGasCharge]\t\t\t\r\n           ,[AverageRebillThermsFactor]\t\t\t\r\n           ,[BillingDays]\t\t\t\r\n           ,[BillingDate]\t\t\t\r\n           ,[ToDate]\t\t\t\r\n           ,[FromDate]\t\t\t\r\n           ,[MTATaxAmount]\t\t\t\r\n           ,[BillingAction]\t\t\t\r\n           ,[ProcessedInTheCurrentPeriod]\t\t\t\r\n           ,[GasRateCode]\t\t\t\r\n           ,[TotalCCF]\t\t\t\r\n           ,[TotalTherms]\t\t\t\r\n           ,[ThermsFactor]\t\t\t\r\n           ,[CancelFromDate]\t\t\t\r\n           ,[CancelToDate]\t\t\t\r\n           ,[CancelTotalCCF]\t\t\t\r\n           ,[CancelTotalTherms]\t\t\t\r\n           ,[CancelThermsFactor]\t\t\t\r\n           ,[ProcessEffectiveDate]\t\t\t\r\n           ,[Notes]\t\t\t\r\n           ,[AuthenticatedUserID]\t\t\t\r\n           ,[DateAdded]\t\t\t\r\n           ,[LastUpdate]\t\t\t\r\n           ,[DeliveryChargeAmount]\t\t\t\r\n           ,[ThermsChargeAmount]\t\t\t\r\n           ,[DiscountedAmount]\t\t\t\r\n           ,[DiscountPercentage]\t\t\t\r\n           ,[CustomerMinimumCharge]\t\t\t\r\n           ,[CostOfGasCharge]\t\t\t\r\n           ,[SpecialCharge]\t\t\t\r\n           ,[SomeCharge]\t\t\t\r\n           ,[CancelDeliveryChargeAmount]\t\t\t\r\n           ,[CancelThermsChargeAmount]\t\t\t\r\n           ,[CancelDiscountedAmount]\t\t\t\r\n           ,[CancelDiscountPercentage]\t\t\t\r\n           ,[CancelCustomerMinimumCharge]\t\t\t\r\n           ,[CancelCostOfGasCharge]\t\t\t\r\n           ,[CancelSpecialCharge]\t\t\t\r\n           ,[CancelSomeCharge]\r\n\t\t   ,[FacilityName]\r\n\t\t   ,[ServiceAddress])\t\t\t\r\nSELECT \t\t\t\r\nNULL\t,\t--\t           (<AdjustedAccount, seqid,>\r\n9\t,\t--\t           ,<AccountUtilityCompanySeqid, seqid,>\r\n1\t,\t   -- ,[NumberOfTransactions]\t\r\n1, -- ,[NumberOfRebillTransactions]\t\t\t\r\n0\t\t  , -- ,[NumberOfCancelTransactions]\t\r\nUploadConEdisonAccountPreload.AccountNumber,\t--\t           ,<OriginalAccountNumber, acctnum,>\r\nUploadConEdisonAccountPreload.BillingPeriod,\t--\t           ,<BillingPeriod, BillingPeriod,>\t\r\nUploadConEdisonAccountPreload.BillingPeriodRevision\t,\t--\t           ,<BillingPeriodRevision, BillingPeriodRevision,>\r\nUploadConEdisonAccountPreload.FirstPeriodCanceled\t,\t--\t           ,<FirstCanceledBillingPeriod, yyyymm,>\r\n[dbo].[DetermineConEdisonActualOrEstimatedBilling] (UploadConEdisonAccountPreload.AccountNumber,UploadConEdisonAccountPreload.BillingPeriodRevision)\t,\t--\t          ,<EstimatedOrActualBilling, varchar(3),>\r\nNULL\t,\t--\t           ,<InitialCancelFromDate, yyyymmdd,>\r\nNULL\t,\t--\t           ,<CurrentBillingToDate, yyyymmdd,>\r\nDeltaNumberOfPeriods,\t--\t           ,<NumberOfBillingPeriods, int,>\t\r\ndbo.CalculateNumberOfBillingDays([dbo].[JulianDateToYYYYMMDD] (UploadConEdisonAccountPreload.FromDate),[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonAccountPreload.ToDateJul))\t,\t--\t           ,<TotalBillingDaysRebilled, int,>\r\ndbo.ConvertOverpunch9ToMoney(UploadConEdisonAccountPreload.BilledAmount)\t,\t--\t           ,<TotalRebilledAmount, money,>\r\n0\t,\t--\t           ,<TotalCanceledAmount, money,>\r\ndbo.ConvertOverpunch9ToMoney(UploadConEdisonAccountPreload.CommodityCharge)\t,\t--\t           ,<AverageRebillCostOfGasCharge, money,>\r\ndbo.ConvertOverpunch4ToDecimal(UploadConEdisonAccountPreload.ThermFactor)\t,\t--\t           ,<AverageRebillThermsFactor, ThermsFactor,>\r\ndbo.CalculateNumberOfBillingDays([dbo].[JulianDateToYYYYMMDD] (UploadConEdisonAccountPreload.FromDate),[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonAccountPreload.ToDateJul))\t,\t--\t           ,<BillingDays, int,>\r\n[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonAccountPreload.PostingDate)\t,\t--\t           ,<BillingDate, int,>\r\n[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonAccountPreload.ToDateJul)\t,\t--\t           ,<ToDate, yyyymmdd,>\r\n[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonAccountPreload.FromDate)\t,\t--\t           ,<FromDate, yyyymmdd,>\r\n0\t,\t--\t           ,<MTATaxAmount, money,>\r\nCASE WHEN UploadConEdisonAccountPreload.BillingPeriod=UploadConEdisonAccountPreload.BillingPeriodRevision THEN 'O' ELSE 'A' END, -- ,<BillingAction, BillingAction,>\r\n'N'\t,\t--\t  !!!         ,<ProcessedInTheCurrentPeriod, yesno,>\r\nUploadConEdisonAccountPreload.TariffCode\t,\t--\t           ,<GasRateCode, varchar(3),>\r\ndbo.ConvertOverpunch8ToInt32(UploadConEdisonAccountPreload.CCF)\t,\t--\t           ,<TotalCCF, EnergyUnit,>\r\ndbo.ConvertOverpunch8ToInt32(UploadConEdisonAccountPreload.Therms)\t,\t--\t           ,<TotalTherms, EnergyUnit,>\r\ndbo.ConvertOverpunch4ToDecimal(UploadConEdisonAccountPreload.ThermFactor)\t,\t--\t           ,<ThermsFactor, ThermsFactor,>\r\nNULL\t,\t--\t           ,<CancelFromDate, yyyymmdd,>\r\nNULL\t,\t--\t           ,<CancelToDate, yyyymmdd,>\r\nNULL\t,\t--\t           ,<CancelTotalCCF, EnergyUnit,>\r\nNULL\t,\t--\t           ,<CancelTotalTherms, EnergyUnit,>\r\nNULL\t,\t--\t           ,<CancelThermsFactor, ThermsFactor,>\r\n[dbo].ConvertDateToYYYYMMDD (GETDATE())\t,\t--\t           ,<ProcessEffectiveDate, varchar(8),>\r\nNULL,\t\t\t\r\n1,\t\t\t\r\nGETDATE(),\t\t\t\r\nGETDATE(),\t\t\t\r\n0\t,\t--\t           ,<DeliveryChargeAmount, BillingAmt,>\r\n0\t,\t--\t           ,<ThermsChargeAmount, BillingAmt,>\r\n0\t,\t--\t           ,<DiscountedAmount, BillingAmt,>\r\n0\t,\t--\t           ,<DiscountPercentage, DiscountPercentage,>\r\n0\t,\t--\t           ,<CustomerMinimumCharge, BillingAmt,>\r\ndbo.ConvertOverpunch9ToMoney(UploadConEdisonAccountPreload.CommodityCharge)\t,\t--\t           ,<CostOfGasCharge, BillingAmt,>\r\n0\t,\t--\t           ,<SpecialCharge, BillingAmt,>\r\n0\t,\t--\t           ,<SomeCharge, money,>\r\nNULL\t,\t--\t           ,<CancelDeliveryChargeAmount, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelThermsChargeAmount, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelDiscountedAmount, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelDiscountPercentage, DiscountPercentage,>\r\nNULL\t,\t--\t           ,<CancelCustomerMinimumCharge, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelCostOfGasCharge, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelSpecialCharge, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelSomeCharge, money,>\r\nFacilityName,ServiceAddress\r\nFROM ConEd.UploadConEdisonAccountPreload\t\t\t\r\nWHERE UploadConEdisonAccountPreload.DeltaNumberOfPeriods<=1\t\r\n\r\n\r\n---Loading >1 Period Bills (Spanned Bills) (Temporarily here)\t\t\r\n\r\ntruncate table ConEd.UploadConEdisonAccountTempSummarySpanned\r\nINSERT INTO UploadConEdisonAccountTempSummarySpanned\r\n(title, AccountNumber, BillingPeriod, BillingPeriodRevision, FirstPeriodCanceled, FromDate, ToDate, BilledAmount, AveragePreviousBalance, Therms, \r\nThermFactor, CCF, TariffCode, DeltaNumberOfPeriods, BillingPeriodDays, FacilityName, ServiceAddress, PostingDate)\r\nSELECT    \r\n'SpannedAccountbilling' AS title, AccountNumber, UploadConEdisonAccount.BillingPeriod, BillingPeriodRevision, FirstPeriodCanceled as FirstPeriodCanceled, \r\nFromDate, ToDate, BilledAmount AS BilledAmount, PreviousBalance AS AveragePreviousBalance, Therms AS Therms, \r\nThermFactor AS ThermFactor, CCF AS CCF, TariffCode AS TariffCode, DeltaNumberOfPeriods AS DeltaNumberOfPeriods, \r\nBillingPeriodDays AS BillingPeriodDays, FacilityName AS FacilityName, ServiceAddress AS ServiceAddress,PostingDate AS PostingDate\r\nFROM ConEd.UploadConEdisonAccount\r\nWHERE (DeltaNumberOfPeriods > 1)\r\n\r\n---Parsing >1 Period Bills (Spanned Bills) (Temporarily here)\r\n\r\nEXECUTE ConEd.usp_ParseSpannedBilledUploadConEdisonAccountInfo 1\r\n\r\n--- Merging Rebills (Temporarily here)\r\n--\r\n--\tMake sure that the max BillingPeriodRevision is less than or equal to the current BillingPeriod\r\n--\r\nUPDATE   ConEd.UploadConEdisonAccountSummary\r\nSET              BillingPeriodRevision =case when BillingPeriodRevision> BillingPeriod then BillingPeriod else BillingPeriodRevision end \r\nWHERE (BillingPeriod < BillingPeriodRevision)\r\n--\r\ntruncate table ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\nINSERT INTO ConEd.[UploadConEdisonAccountBillingAdjustmentGas]\r\n           ([AdjustedAccount]\r\n           ,[AccountUtilityCompanySeqid]\r\n           ,[NumberOfTransactions]\r\n           ,[NumberOfRebillTransactions]\r\n           ,[NumberOfCancelTransactions]\r\n           ,[OriginalAccountNumber]\r\n           ,[BillingPeriod]\r\n           ,[BillingPeriodRevision]\r\n           ,[FirstCanceledBillingPeriod]\r\n           ,[EstimatedOrActualBilling]\r\n           ,[InitialCancelFromDate]\r\n           ,[CurrentBillingToDate]\r\n           ,[NumberOfBillingPeriods]\r\n           ,[TotalBillingDaysRebilled]\r\n           ,[TotalRebilledAmount]\r\n           ,[TotalCanceledAmount]\r\n           ,[AverageRebillCostOfGasCharge]\r\n           ,[AverageRebillThermsFactor]\r\n           ,[BillingDays]\r\n           ,[BillingDate]\r\n           ,[ToDate]\r\n           ,[FromDate]\r\n           ,[BillingAction]\r\n           ,[ProcessedInTheCurrentPeriod]\r\n           ,[GasRateCode]\r\n           ,[TotalCCF]\r\n           ,[TotalTherms]\r\n           ,[ThermsFactor]\r\n           ,[CancelFromDate]\r\n           ,[CancelToDate]\r\n           ,[CancelTotalCCF]\t\t\t\r\n           ,[CancelTotalTherms]\t\t\t\r\n           ,[CancelThermsFactor]\t\t\t\r\n           ,[ProcessEffectiveDate]\r\n           ,[DerivedFromSpannedBill]\r\n           ,[SpannedBillingPeriodRevision]\r\n           ,[SpannedFirstCanceledBillingPeriod]\r\n           ,[SpannedBilledAmount]\r\n           ,[SpannedCCF]\r\n           ,[SpannedThermFactor]\r\n           ,[SpannedTherm]\r\n           ,[SpannedMonthlyPercentage]\r\n           ,[SpannedTotalPercentage]\t\t\t\r\n           ,[Notes]\t\t\t\r\n           ,[AuthenticatedUserID]\t\t\t\r\n           ,[DateAdded]\t\t\t\r\n           ,[LastUpdate]\r\n\t\t   ,[FacilityName]\r\n\t\t   ,[ServiceAddress]\r\n\t\t   )\t\t\t\r\nSELECT \t\t\t\r\nNULL\t,\t--\t           (<AdjustedAccount, seqid,>\r\n9\t,\t--\t           ,<AccountUtilityCompanySeqid, seqid,>\r\ncount(*)\t,\t   -- ,[NumberOfTransactions]\t\r\ncount(*) , -- ,[NumberOfRebillTransactions]\t\t\t\r\n0\t\t  , -- ,[NumberOfCancelTransactions]\t\r\nUploadConEdisonAccountSummary.OriginalAccountNumber\t,\t--\t           ,<OriginalAccountNumber, acctnum,>\r\nMAX(UploadConEdisonAccountSummary.BillingPeriod),\t--\t           ,<BillingPeriod, BillingPeriod,>\t\r\nUploadConEdisonAccountSummary.BillingPeriodRevision,\t--\t           ,<BillingPeriodRevision, BillingPeriodRevision,>\r\n[dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(MIN(UploadConEdisonAccountSummary.FromDate),MIN(UploadConEdisonAccountSummary.GasRateCode),9),'M')\t,\t--\t           ,<FirstCanceledBillingPeriod, yyyymm,>\r\n[dbo].[DetermineConEdisonActualOrEstimatedBilling] (UploadConEdisonAccountSummary.OriginalAccountNumber,UploadConEdisonAccountSummary.BillingPeriodRevision)\t,\t--\t           ,<EstimatedOrActualBilling, varchar(3),>\r\nNULL\t,\t--\t           ,<InitialCancelFromDate, yyyymmdd,>\r\nNULL\t,\t--\t           ,<CurrentBillingToDate, yyyymmdd,>\r\n[dbo].[CalculateDeltaBillingPeriods] ([dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(MIN(UploadConEdisonAccountSummary.FromDate),MIN(UploadConEdisonAccountSummary.GasRateCode),9),'M'),[dbo].DetermineConEdisonBillingPeriodProjected(MAX(UploadConEdisonAccountSummary.ToDate),MAX(UploadConEdisonAccountSummary.GasRateCode),9),'M'),\t--\t           ,<NumberOfBillingPeriods, int,>\t\r\ndbo.CalculateNumberOfBillingDays(MIN(UploadConEdisonAccountSummary.FromDate),MAX(UploadConEdisonAccountSummary.ToDate))\t,\t--\t           ,<TotalBillingDaysRebilled, int,>\r\nSUM(UploadConEdisonAccountSummary.TotalRebilledAmount)\t,\t--\t           ,<TotalRebilledAmount, money,>\r\n0\t,\t--\t           ,<TotalCanceledAmount, money,>\r\nAVG(UploadConEdisonAccountSummary.CostOfGasCharge)\t,\t--\t           ,<AverageRebillCostOfGasCharge, money,>\r\nAVG(UploadConEdisonAccountSummary.ThermsFactor)\t,\t--\t           ,<AverageRebillThermsFactor, ThermsFactor,>\r\ndbo.CalculateNumberOfBillingDays(MIN(UploadConEdisonAccountSummary.FromDate),MAX(UploadConEdisonAccountSummary.ToDate))\t,\t--\t           ,<BillingDays, int,>\r\nMAX(UploadConEdisonAccountSummary.BillingDate)\t,\t--\t           ,<BillingDate, int,>\r\nMAX(UploadConEdisonAccountSummary.ToDate)\t,\t--\t           ,<ToDate, yyyymmdd,>\r\nMIN(UploadConEdisonAccountSummary.FromDate)\t,\t--\t           ,<FromDate, yyyymmdd,>\r\nCASE WHEN MAX(UploadConEdisonAccountSummary.BillingPeriod)=MIN(UploadConEdisonAccountSummary.BillingPeriodRevision) THEN 'O' ELSE 'A' END\t,\t--\t          ,<BillingAction, BillingAction,>\r\n'N'\t,\t--\t  !!!         ,<ProcessedInTheCurrentPeriod, yesno,>\r\nMAX(UploadConEdisonAccountSummary.GasRateCode)\t,\t--\t           ,<GasRateCode, varchar(3),>\r\nSUM(UploadConEdisonAccountSummary.TotalCCF)\t,\t--\t           ,<TotalCCF, EnergyUnit,>\r\nSUM(UploadConEdisonAccountSummary.TotalTherms)\t,\t--\t           ,<TotalTherms, EnergyUnit,>\r\nSUM(UploadConEdisonAccountSummary.ThermsFactor)\t,\t--\t           ,<ThermsFactor, ThermsFactor,>\r\nNULL\t,\t--\t           ,<CancelFromDate, yyyymmdd,>\r\nNULL\t,\t--\t           ,<CancelToDate, yyyymmdd,>\r\nNULL\t,\t--\t           ,<CancelTotalCCF, EnergyUnit,>\r\nNULL\t,\t--\t           ,<CancelTotalTherms, EnergyUnit,>\r\nNULL\t,\t--\t           ,<CancelThermsFactor, ThermsFactor,>\r\n[dbo].ConvertDateToYYYYMMDD (GETDATE()),\t--\t           ,<ProcessEffectiveDate, varchar(8),>\r\nMAX(UploadConEdisonAccountSummary.DerivedFromSpannedBill),\r\nMAX(UploadConEdisonAccountSummary.SpannedBillingPeriodRevision),\r\nMAX(UploadConEdisonAccountSummary.SpannedFirstCanceledBillingPeriod),\r\nMAX(UploadConEdisonAccountSummary.SpannedBilledAmount),\r\nMAX(UploadConEdisonAccountSummary.SpannedCCF),\r\nMAX(UploadConEdisonAccountSummary.SpannedThermFactor),\r\nMAX(UploadConEdisonAccountSummary.SpannedTherm),\r\nMAX(UploadConEdisonAccountSummary.SpannedMonthlyPercentage),\r\nMAX(UploadConEdisonAccountSummary.SpannedTotalPercentage),\r\nMAX(UploadConEdisonAccountSummary.Notes),\t\t\t\r\nMAX(UploadConEdisonAccountSummary.AuthenticatedUserID),\t\t\t\r\nGETDATE(),\t\t\t\r\nGETDATE(),\r\nmax(FacilityName),\r\nmax(ServiceAddress)\r\nFROM ConEd.UploadConEdisonAccountSummary\t\t\t\r\nGROUP BY UploadConEdisonAccountSummary.OriginalAccountNumber, UploadConEdisonAccountSummary.BillingPeriodRevision\t\r\n--\r\n-- ********************************************************************\r\n--\tHandle Rate 036 or 040 refunds\r\n-- ********************************************************************\r\ntruncate table ConEd.UploadConEdisonRate036Refunds\r\n--\r\n--\tFind all rate 036 account cancellations that are canceled for the current period.  Save their basic information that will be\r\n--\tused by the stored procedure (ConEd.usp_IdentifyRefundsForGasRate036).  It will net the following attributes:\r\n--\t\t\t\t\r\n--\t\t\t\tDeltaNumberOfPeriods will generally be 13.  The current month billing plus 12 refund months.\r\n--\t\t\t\tRefundCCF will probably be zero\r\n--\t\t\t\tRefundTherms will be negative and have a relationship as to the amount of money being refunded.\r\n--\t\t\t\tRefundBilledAmount is negative dollars representing the total amount \r\n--\r\ndeclare @NumberOfConEdisonRate036Refunds int\r\n--\r\nselect @NumberOfConEdisonRate036Refunds = count(*) \r\nselect count(*) \r\nFROM ConEd.UploadConEdisonCancellation\r\nWHERE (BillingPeriodRevision = BillingPeriod) AND (TariffCode in ('036','040')) and (DeltaNumberOfPeriods =12 OR DeltaNumberOfPeriods =13)\r\n--\r\nif (@NumberOfConEdisonRate036Refunds > 0)\r\nbegin\r\n\tINSERT INTO ConEd.UploadConEdisonRate036Refunds\r\n\t(AccountNumber, TariffCode, DeltaNumberOfPeriods, BillingPeriodRevision, BillingPeriod, FromDate, ToDate, RefundCCF, RefundTherms, RefundBilledAmount)\r\n\tSELECT AccountNumber, TariffCode, DeltaNumberOfPeriods, BillingPeriodRevision, BillingPeriod, FromDate, ToDate, CCF, Therms, BilledAmount\r\n\tFROM ConEd.UploadConEdisonCancellation\r\n\tWHERE (BillingPeriodRevision = BillingPeriod) AND (TariffCode in ('036','040'))  and (DeltaNumberOfPeriods =12 OR DeltaNumberOfPeriods =13)\r\n\r\n\tselect 'ConEd.UploadConEdisonRate036Refunds' as description,* FROM ConEd.UploadConEdisonRate036Refunds\r\n--\r\n--\t\tThe identified account(s) are stored in th ConEd.UploadConEdisonRate036Refunds table.  \r\n--\t\tThe ConEd.UploadConEdisonCancellationPreload and ConEd.UploadConEdisonCancellation have their Therms and CCF set to zero in EBCDIC and ascii \r\n--\t\tformat respectively.  This way forces the stored procedure (ConEd.usp_IdentifyRefundsForGasRate036) to process them as refunds.\r\n--\r\n--\t\tThis was a critical correction factor \"(DeltaNumberOfPeriods = 12)\". This isolates the annualized refund for gas rates 036 & 040.  (9/11/2009 pah)\r\n--\r\n\r\n\t--UPDATE ConEd.UploadConEdisonCancellationPreload\r\n\t--SET\t\t\t Therms = '0000000{', CCF = '0000000{'\r\n\t--WHERE\t\t(BillingPeriodRevision = BillingPeriodRevision) AND \r\n\t--\t\t\t(TariffCode IN ('036', '040')) AND \r\n\t--\t\t\t((DeltaNumberOfPeriods =12 OR DeltaNumberOfPeriods =13))\r\n\t\t\t\t\r\n\tUPDATE    ConEd.UploadConEdisonCancellation\r\n\tSET              Therms = 0, CCF = 0\r\n\tWHERE (BillingPeriodRevision = BillingPeriod) AND \r\n\t\t\t  (TariffCode in ('036','040'))\r\n\t\t\t  AND \r\n\t\t\t\t((DeltaNumberOfPeriods =12 OR DeltaNumberOfPeriods =13))\r\nend\r\n--\r\n-- ********************************************************************\r\n--\r\n------------ Now Cancels ------------------\r\n\r\n---Loading 0-1 Period Cancels (Temporarily here)\r\n\r\ntruncate table ConEd.UploadConEdisonCancellationSummary\r\nINSERT INTO ConEd.[UploadConEdisonCancellationSummary]\t\t\t\r\n           ([AdjustedAccount]\t\t\t\r\n           ,[AccountUtilityCompanySeqid]\t\t\t\r\n           ,[NumberOfTransactions]\t\t\t\r\n           ,[NumberOfRebillTransactions]\t\t\t\r\n           ,[NumberOfCancelTransactions]\t\t\t\r\n           ,[OriginalAccountNumber]\t\t\t\r\n           ,[BillingPeriod]\t\t\t\r\n           ,[BillingPeriodRevision]\t\t\t\r\n           ,[FirstCanceledBillingPeriod]\t\t\t\r\n           ,[EstimatedOrActualBilling]\t\t\t\r\n           ,[InitialCancelFromDate]\t\t\t\r\n           ,[CurrentBillingToDate]\t\t\t\r\n           ,[NumberOfBillingPeriods]\t\t\t\r\n           ,[TotalBillingDaysRebilled]\t\t\t\r\n           ,[TotalRebilledAmount]\t\t\t\r\n           ,[TotalCanceledAmount]\t\t\t\r\n           ,[AverageRebillCostOfGasCharge]\t\t\t\r\n           ,[AverageRebillThermsFactor]\t\t\t\r\n           ,[BillingDays]\t\t\t\r\n           ,[BillingDate]\t\t\t\r\n           ,[ToDate]\t\t\t\r\n           ,[FromDate]\t\t\t\r\n           ,[MTATaxAmount]\t\t\t\r\n           ,[BillingAction]\t\t\t\r\n           ,[ProcessedInTheCurrentPeriod]\t\t\t\r\n           ,[GasRateCode]\t\t\t\r\n           ,[TotalCCF]\t\t\t\r\n           ,[TotalTherms]\t\t\t\r\n           ,[ThermsFactor]\t\t\t\r\n           ,[CancelFromDate]\t\t\t\r\n           ,[CancelToDate]\t\t\t\r\n           ,[CancelTotalCCF]\t\t\t\r\n           ,[CancelTotalTherms]\t\t\t\r\n           ,[CancelThermsFactor]\r\n           ,[CancelBillingDays]\t\t\t\r\n           ,[ProcessEffectiveDate]\t\t\t\r\n           ,[Notes]\t\t\t\r\n           ,[AuthenticatedUserID]\t\t\t\r\n           ,[DateAdded]\t\t\t\r\n           ,[LastUpdate]\t\t\t\r\n           ,[DeliveryChargeAmount]\t\t\t\r\n           ,[ThermsChargeAmount]\t\t\t\r\n           ,[DiscountedAmount]\t\t\t\r\n           ,[DiscountPercentage]\t\t\t\r\n           ,[CustomerMinimumCharge]\t\t\t\r\n           ,[CostOfGasCharge]\t\t\t\r\n           ,[SpecialCharge]\t\t\t\r\n           ,[SomeCharge]\t\t\t\r\n           ,[CancelDeliveryChargeAmount]\t\t\t\r\n           ,[CancelThermsChargeAmount]\t\t\t\r\n           ,[CancelDiscountedAmount]\t\t\t\r\n           ,[CancelDiscountPercentage]\t\t\t\r\n           ,[CancelCustomerMinimumCharge]\t\t\t\r\n           ,[CancelCostOfGasCharge]\t\t\t\r\n           ,[CancelSpecialCharge]\t\t\t\r\n           ,[CancelSomeCharge]\r\n\t\t   ,[FacilityName]\r\n           ,[ServiceAddress])\t\t\t\r\nSELECT \t\t\t\r\nNULL\t,\t--\t           (<AdjustedAccount, seqid,>\r\n9\t,\t--\t           ,<AccountUtilityCompanySeqid, seqid,>\r\n1\t,\t   -- ,[NumberOfTransactions]\t\r\n0, -- ,[NumberOfRebillTransactions]\t\t\t\r\n1\t\t  , -- ,[NumberOfCancelTransactions]\t\r\nUploadConEdisonCancellationPreload.AccountNumber\t,\t--\t           ,<OriginalAccountNumber, acctnum,>\r\nUploadConEdisonCancellationPreload.BillingPeriod,\t--\t           ,<BillingPeriod, BillingPeriod,>\t\r\nUploadConEdisonCancellationPreload.BillingPeriodRevision\t,\t--\t           ,<BillingPeriodRevision, BillingPeriodRevision,>\r\nUploadConEdisonCancellationPreload.FirstPeriodCanceled\t,\t--\t           ,<FirstCanceledBillingPeriod, yyyymm,>\r\n[dbo].[DetermineConEdisonActualOrEstimatedBilling] (UploadConEdisonCancellationPreload.AccountNumber,UploadConEdisonCancellationPreload.BillingPeriodRevision)\t,\t--\t  ,<EstimatedOrActualBilling, varchar(3),>\r\n[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonCancellationPreload.FromDate)\t,\t--\t           ,<InitialCancelFromDate, yyyymmdd,>\r\n[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonCancellationPreload.ToDateJul)\t,\t--\t           ,<CurrentBillingToDate, yyyymmdd,>\r\nDeltaNumberOfPeriods,\t--\t           ,<NumberOfBillingPeriods, int,>\t\r\ndbo.CalculateNumberOfBillingDays([dbo].[JulianDateToYYYYMMDD] (UploadConEdisonCancellationPreload.FromDate),[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonCancellationPreload.ToDateJul))\t,\t--\t           ,<TotalBillingDaysRebilled, int,>\r\n0\t,\t--\t           ,<TotalRebilledAmount, money,>\r\ndbo.ConvertOverpunch9ToMoney(UploadConEdisonCancellationPreload.BilledAmount)\t,\t--\t           ,<TotalCanceledAmount, money,>\r\n0\t,\t--\t           ,<AverageRebillCostOfGasCharge, money,>\r\n1.0\t,\t--\t           ,<AverageRebillThermsFactor, ThermsFactor,>\r\n0\t,\t--\t           ,<BillingDays, int,>\r\n[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonCancellationPreload.PostingDate)\t,\t--\t           ,<BillingDate, int,>\r\nnull\t,\t--\t           ,<ToDate, yyyymmdd,>\r\nnull\t,\t--\t           ,<FromDate, yyyymmdd,>\r\n0\t,\t--\t           ,<MTATaxAmount, money,>\r\nCASE WHEN UploadConEdisonCancellationPreload.BillingPeriod=UploadConEdisonCancellationPreload.BillingPeriodRevision THEN 'O' ELSE 'A' END, -- ,<BillingAction, BillingAction,>\r\n'N'\t,\t--\t  !!!         ,<ProcessedInTheCurrentPeriod, yesno,>\r\nUploadConEdisonCancellationPreload.TariffCode\t,\t--\t           ,<GasRateCode, varchar(3),>\r\n0\t,\t--\t           ,<TotalCCF, EnergyUnit,>\r\n0\t,\t--\t           ,<TotalTherms, EnergyUnit,>\r\n1.0\t,\t--\t           ,<ThermsFactor, ThermsFactor,>\r\n[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonCancellationPreload.FromDate)\t,\t--\t           ,<CancelFromDate, yyyymmdd,>\r\n[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonCancellationPreload.ToDateJul)\t,\t--\t           ,<CancelToDate, yyyymmdd,>\r\ndbo.ConvertOverpunch8ToInt32(UploadConEdisonCancellationPreload.CCF)\t,\t--\t           ,<CancelTotalCCF, EnergyUnit,>\r\ndbo.ConvertOverpunch8ToInt32(UploadConEdisonCancellationPreload.Therms)\t,\t--\t           ,<CancelTotalTherms, EnergyUnit,>\r\ndbo.ConvertOverpunch4ToDecimal(UploadConEdisonCancellationPreload.ThermFactor)\t,\t--\t           ,<CancelThermsFactor, ThermsFactor,>\r\ndbo.CalculateNumberOfBillingDays([dbo].[JulianDateToYYYYMMDD] (UploadConEdisonCancellationPreload.FromDate),[dbo].[JulianDateToYYYYMMDD] (UploadConEdisonCancellationPreload.ToDateJul))\t,\t--\t           ,<CancelBillingDays>\r\n[dbo].ConvertDateToYYYYMMDD (GETDATE())\t,\t--\t           ,<ProcessEffectiveDate, varchar(8),>\r\nNULL,\t\t\t\r\n1,\t\t\t\r\nGETDATE(),\t\t\t\r\nGETDATE(),\t\t\t\r\n0\t,\t--\t           ,<DeliveryChargeAmount, BillingAmt,>\r\n0\t,\t--\t           ,<ThermsChargeAmount, BillingAmt,>\r\n0\t,\t--\t           ,<DiscountedAmount, BillingAmt,>\r\n0\t,\t--\t           ,<DiscountPercentage, DiscountPercentage,>\r\n0\t,\t--\t           ,<CustomerMinimumCharge, BillingAmt,>\r\ndbo.ConvertOverpunch9ToMoney(UploadConEdisonCancellationPreload.CommodityCharge)\t,\t--\t           ,<CostOfGasCharge, BillingAmt,>\r\n0\t,\t--\t           ,<SpecialCharge, BillingAmt,>\r\n0\t,\t--\t           ,<SomeCharge, money,>\r\nNULL\t,\t--\t           ,<CancelDeliveryChargeAmount, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelThermsChargeAmount, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelDiscountedAmount, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelDiscountPercentage, DiscountPercentage,>\r\nNULL\t,\t--\t           ,<CancelCustomerMinimumCharge, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelCostOfGasCharge, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelSpecialCharge, BillingAmt,>\r\nNULL\t,\t--\t           ,<CancelSomeCharge, money,>\r\nFacilityName,\r\nServiceAddress\r\nFROM ConEd.UploadConEdisonCancellationPreload\t\t\t\r\nWHERE UploadConEdisonCancellationPreload.DeltaNumberOfPeriods<=1\t\r\n\r\n\r\n---Loading >1 Period Cancels (Spanned Cancels) (Temporarily here)\r\n\r\ntruncate table ConEd.UploadConEdisonCancellationTempSummarySpanned\r\nINSERT INTO ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n                      (title, AccountNumber, MeterNumber, BillingPeriod, BillingPeriodRevision, FirstPeriodCanceled, CancelFromDate, CancelToDate, CancelBilledAmount, \r\n                      CancelTherms, CancelThermFactor, CancelCCF, CancelTariffCode, CancelBillingPeriodDays, FacilityName, ServiceAddress, DeltaNumberOfPeriods, \r\n                      Dials, PostingDate)\r\nSELECT  'SpannedCancellation' AS title,   AccountNumber, MeterNumber AS MeterNumber, BillingPeriod, BillingPeriodRevision,  FirstPeriodCanceled as FirstPeriodCanceled, FromDate as CancelFromDate, \r\nToDate as CancelToDate, BilledAmount as CancelBilledAmount, \r\n                      Therms as CancelTherms, [dbo].[CalculateGasThermFactor] (CCF,Therms) as CancelThermFactor, CCF as CancelCCF, TariffCode as CancelTariffCode, \r\n DATEDIFF(day,  [dbo].[ConvertYYYYMMDDToDatetime] (FromDate),[dbo].[ConvertYYYYMMDDToDatetime] (ToDate)) as CancelBillingPeriodDays, FacilityName as FacilityName, \r\n                      ServiceAddress as ServiceAddress, DeltaNumberOfPeriods AS DeltaNumberOfPeriods, Dials AS Dials,PostingDate\r\n--into UploadConEdisonCancellationTempSummarySpanned\r\nFROM ConEd.UploadConEdisonCancellation\r\nWHERE (DeltaNumberOfPeriods > 1)\r\n---Parsing >1 Period Cancels (Spanned Cancels) (Temporarily here)\r\n--truncate table UploadConEdisonCancellationSummary\r\n\r\n--\r\n--\tApply the Rate 036 refunds to the current period accountsummary before working with the cancellations\r\n--\r\nif (@NumberOfConEdisonRate036Refunds > 0)\r\nBegin\r\n\tEXECUTE ConEd.usp_IdentifyRefundsForGasRate036 1\r\nEnd\r\n--\r\nEXECUTE ConEd.usp_ParseSpannedBilledUploadConEdisonCancellationInfo 1\r\n\r\n\r\n--- Merging Cancels (Temporarily here)\r\n--\r\n--\tMake sure that the max BillingPeriodRevision is less than or equal to the current BillingPeriod\r\n--\r\nUPDATE  ConEd.UploadConEdisonCancellationSummary\r\nSET              BillingPeriodRevision =case when BillingPeriodRevision> BillingPeriod then BillingPeriod else BillingPeriodRevision end \r\nWHERE (BillingPeriod < BillingPeriodRevision)\r\n--\r\n\r\n\r\n\r\n-- update adjustment record found in cancellation\r\n\r\nUPDATE  UploadAdjustmentGas\r\nSET     UploadAdjustmentGas.[NumberOfTransactions] = UploadAdjustmentGas.[NumberOfTransactions]\r\n        + CancelSummary.[NumberOfTransactions],\r\n        UploadAdjustmentGas.[NumberOfCancelTransactions] = CancelSummary.[NumberOfTransactions],\r\n        UploadAdjustmentGas.[TotalCanceledAmount] = CancelSummary.[TotalCanceledAmount],\r\n        UploadAdjustmentGas.[CancelFromDate] = CancelSummary.[CancelFromDate],\r\n        UploadAdjustmentGas.[CancelToDate] = CancelSummary.[CancelToDate],\r\n        UploadAdjustmentGas.[CancelTotalCCF] = CancelSummary.[CancelTotalCCF],\r\n        UploadAdjustmentGas.[CancelTotalTherms] = CancelSummary.[CancelTotalTherms],\r\n        UploadAdjustmentGas.[CancelThermsFactor] = CancelSummary.[CancelThermsFactor],\r\n        UploadAdjustmentGas.[CancelBillingDays] = CancelSummary.[CancelBillingDays],\r\n        UploadAdjustmentGas.[Notes] = CAST(( CASE UploadAdjustmentGas.[Notes]\r\n                                               WHEN NULL THEN ''\r\n                                               ELSE 'Rebill: '\r\n                                                    + UploadAdjustmentGas.[Notes]\r\n                                                    + ' '\r\n                                             END )\r\n        + ( CASE CancelSummary.[Notes]\r\n              WHEN NULL THEN ''\r\n              ELSE 'Cancel: ' + CancelSummary.[Notes]\r\n            END ) AS VARCHAR(300))\r\nFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UploadAdjustmentGas\r\n        INNER JOIN ( SELECT UploadConEdisonCancellationSummary.OriginalAccountNumber,\r\n                            UploadConEdisonCancellationSummary.BillingPeriodRevision,\r\n                            COUNT(*) AS NumberOfTransactions,        -- ,[NumberOfTransactions] \r\n                            0 AS NumberOfRebilledTransactions, -- ,[NumberOfRebillTransactions]             \r\n                            COUNT(*) AS NumberOfCancelTransactions, -- ,[NumberOfCancelTransactions]\r\n                            SUM(TotalCanceledAmount) AS TotalCanceledAmount,\r\n                            MIN(UploadConEdisonCancellationSummary.CancelFromDate) AS CancelFromDate,     --               ,<CancelFromDate, yyyymmdd,>\r\n                            MAX(UploadConEdisonCancellationSummary.CancelToDate) AS CancelToDate,     --               ,<CancelToDate, yyyymmdd,>\r\n                            SUM(UploadConEdisonCancellationSummary.CancelTotalCCF) AS CancelTotalCCF,     --               ,<CancelTotalCCF, EnergyUnit,>\r\n                            SUM(UploadConEdisonCancellationSummary.CancelTotalTherms) CancelTotalTherms,     --               ,<CancelTotalTherms, EnergyUnit,>\r\n                            MIN(UploadConEdisonCancellationSummary.CancelThermsFactor) CancelThermsFactor,     --               ,<CancelThermsFactor, ThermsFactor,>\r\n                            dbo.CalculateNumberOfBillingDays(MIN(UploadConEdisonCancellationSummary.CancelFromDate),\r\n                                                             MAX(UploadConEdisonCancellationSummary.CancelToDate)) AS CancelBillingDays,   --               ,<CancelBillingDays, int,>\r\n                            MAX(UploadConEdisonCancellationSummary.Notes) AS notes\r\n                     FROM ConEd.UploadConEdisonCancellationSummary\r\n                     GROUP BY UploadConEdisonCancellationSummary.OriginalAccountNumber,\r\n                            UploadConEdisonCancellationSummary.BillingPeriodRevision\r\n                   ) AS CancelSummary \r\n\t\t\tON UploadAdjustmentGas.OriginalAccountNumber = CancelSummary.OriginalAccountNumber\r\n                AND UploadAdjustmentGas.BillingPeriodRevision = cancelSummary.BillingPeriodRevision\r\n\r\n\r\n\r\n\r\n-- insert cancelation record not found in current adjustment.\r\n\r\nINSERT  INTO ConEd.[UploadConEdisonAccountBillingAdjustmentGas]\r\n        (\r\n          [AdjustedAccount],\r\n          [AccountUtilityCompanySeqid],\r\n          [NumberOfTransactions],\r\n          [NumberOfRebillTransactions],\r\n          [NumberOfCancelTransactions],\r\n          [OriginalAccountNumber],\r\n          [BillingPeriod],\r\n          [BillingPeriodRevision],\r\n          [FirstCanceledBillingPeriod],\r\n          [EstimatedOrActualBilling],\r\n          [InitialCancelFromDate],\r\n          [CurrentBillingToDate],\r\n          [NumberOfBillingPeriods],\r\n          [TotalBillingDaysRebilled],\r\n          [TotalRebilledAmount],\r\n          [TotalCanceledAmount],\r\n          [AverageRebillCostOfGasCharge],\r\n          [AverageRebillThermsFactor],\r\n          [BillingDays],\r\n          [BillingDate],\r\n          [ToDate],\r\n          [FromDate],\r\n          [BillingAction],\r\n          [ProcessedInTheCurrentPeriod],\r\n          [GasRateCode],\r\n          [TotalCCF],\r\n          [TotalTherms],\r\n          [ThermsFactor],\r\n          [CancelFromDate],\r\n          [CancelToDate],\r\n          [CancelTotalCCF],\r\n          [CancelTotalTherms],\r\n          [CancelThermsFactor],\r\n          [CancelBillingDays],\r\n          [ProcessEffectiveDate],\r\n          [DerivedFromSpannedBill],\r\n          [SpannedBillingPeriodRevision],\r\n          [SpannedFirstCanceledBillingPeriod],\r\n          [SpannedBilledAmount],\r\n          [SpannedCCF],\r\n          [SpannedThermFactor],\r\n          [SpannedTherm],\r\n          [SpannedMonthlyPercentage],\r\n          [SpannedTotalPercentage],\r\n          [Notes],\r\n          [AuthenticatedUserID],\r\n          [DateAdded],\r\n          [LastUpdate],\r\n          [FacilityName],\r\n          [ServiceAddress]\r\n\r\n               \r\n        )\r\n        SELECT  NULL,     --               (<AdjustedAccount, seqid,>\r\n                9,     --               ,<AccountUtilityCompanySeqid, seqid,>\r\n                COUNT(*),        -- ,[NumberOfTransactions] \r\n                0, -- ,[NumberOfRebillTransactions]                  \r\n                COUNT(*), -- ,[NumberOfCancelTransactions]      \r\n                UploadConEdisonCancellationSummary.OriginalAccountNumber,     --                 ,<OriginalAccountNumber, acctnum,>\r\n                MAX(UploadConEdisonCancellationSummary.BillingPeriod),      --               ,<BillingPeriod, BillingPeriod,>    \r\n                UploadConEdisonCancellationSummary.BillingPeriodRevision,   --               ,<BillingPeriodRevision, BillingPeriodRevision,>\r\n                [dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(MIN(UploadConEdisonCancellationSummary.CancelFromDate), MIN(UploadConEdisonCancellationSummary.GasRateCode), 9),\r\n                                                   'M'),     --               ,<FirstCanceledBillingPeriod, yyyymm,>\r\n                [dbo].[DetermineConEdisonActualOrEstimatedBilling](UploadConEdisonCancellationSummary.OriginalAccountNumber, UploadConEdisonCancellationSummary.BillingPeriodRevision),      --               ,<EstimatedOrActualBilling, varchar(3),>\r\n                MIN(UploadConEdisonCancellationSummary.InitialCancelFromDate),      --               ,<InitialCancelFromDate, yyyymmdd,>\r\n                MAX(UploadConEdisonCancellationSummary.CurrentBillingToDate),      --               ,<CurrentBillingToDate, yyyymmdd,>\r\n                [dbo].[CalculateDeltaBillingPeriods]([dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(MIN(UploadConEdisonCancellationSummary.CancelFromDate), MIN(UploadConEdisonCancellationSummary.GasRateCode), 9), 'M'),\r\n                                                     [dbo].DetermineConEdisonBillingPeriodProjected(MAX(UploadConEdisonCancellationSummary.CancelToDate), MAX(UploadConEdisonCancellationSummary.GasRateCode), 9),\r\n                                                     'M'),    --               ,<NumberOfBillingPeriods, int,>     \r\n                dbo.CalculateNumberOfBillingDays(MIN(UploadConEdisonCancellationSummary.FromDate),\r\n                                                 MAX(UploadConEdisonCancellationSummary.ToDate)),     --                 ,<TotalBillingDaysRebilled, int,>\r\n                SUM(UploadConEdisonCancellationSummary.TotalRebilledAmount),     --                 ,<TotalRebilledAmount, money,>\r\n                SUM(UploadConEdisonCancellationSummary.TotalCanceledAmount),     --                 ,<TotalCanceledAmount, money,>\r\n                AVG(UploadConEdisonCancellationSummary.CostOfGasCharge),     --                 ,<AverageRebillCostOfGasCharge, money,>\r\n                AVG(UploadConEdisonCancellationSummary.ThermsFactor),     --               ,<AverageRebillThermsFactor, ThermsFactor,>\r\n                0,     --               ,<BillingDays, int,>\r\n                MAX(UploadConEdisonCancellationSummary.BillingDate),     --               ,<BillingDate, int,>\r\n                MAX(UploadConEdisonCancellationSummary.ToDate),     --               ,<ToDate, yyyymmdd,>\r\n                MIN(UploadConEdisonCancellationSummary.FromDate),     --               ,<FromDate, yyyymmdd,>\r\n                CASE WHEN MAX(UploadConEdisonCancellationSummary.BillingPeriod) = MIN(UploadConEdisonCancellationSummary.BillingPeriodRevision)\r\n                     THEN 'O'\r\n                     ELSE 'A'\r\n                END,     --                ,<BillingAction, BillingAction,>\r\n                'N',     --      !!!         ,<ProcessedInTheCurrentPeriod, yesno,>\r\n                MAX(UploadConEdisonCancellationSummary.GasRateCode),  -- PAH      ,<GasRateCode, varchar(3),>\r\n                SUM(UploadConEdisonCancellationSummary.TotalCCF),     --               ,<TotalCCF, EnergyUnit,>\r\n                SUM(UploadConEdisonCancellationSummary.TotalTherms),     --               ,<TotalTherms, EnergyUnit,>\r\n                MIN(UploadConEdisonCancellationSummary.ThermsFactor),     --               ,<ThermsFactor, ThermsFactor,>\r\n                MIN(UploadConEdisonCancellationSummary.CancelFromDate),     --                 ,<CancelFromDate, yyyymmdd,>\r\n                MAX(UploadConEdisonCancellationSummary.CancelToDate),     --               ,<CancelToDate, yyyymmdd,>\r\n                SUM(UploadConEdisonCancellationSummary.CancelTotalCCF),     --                 ,<CancelTotalCCF, EnergyUnit,>\r\n                SUM(UploadConEdisonCancellationSummary.CancelTotalTherms),     --                 ,<CancelTotalTherms, EnergyUnit,>\r\n                MIN(UploadConEdisonCancellationSummary.CancelThermsFactor),     --                 ,<CancelThermsFactor, ThermsFactor,>\r\n                dbo.CalculateNumberOfBillingDays(MIN(UploadConEdisonCancellationSummary.CancelFromDate),\r\n                                                 MAX(UploadConEdisonCancellationSummary.CancelToDate)),     --               ,<CancelBillingDays, int,>\r\n                [dbo].ConvertDateToYYYYMMDD(GETDATE()),  --               ,<ProcessEffectiveDate, varchar(8),>\r\n                MAX(UploadConEdisonCancellationSummary.DerivedFromSpannedBill),\r\n                MAX(UploadConEdisonCancellationSummary.SpannedBillingPeriodRevision),\r\n                MAX(UploadConEdisonCancellationSummary.SpannedFirstCanceledBillingPeriod),\r\n                CASE WHEN MAX(UploadConEdisonCancellationSummary.SpannedBilledAmount) > 0\r\n                     THEN MAX(UploadConEdisonCancellationSummary.SpannedBilledAmount)\r\n                     ELSE MIN(UploadConEdisonCancellationSummary.SpannedBilledAmount)\r\n                END AS SpannedBilledAmount,\r\n                CASE WHEN MAX(UploadConEdisonCancellationSummary.SpannedCCF) > 0\r\n                     THEN MAX(UploadConEdisonCancellationSummary.SpannedCCF)\r\n                     ELSE MIN(UploadConEdisonCancellationSummary.SpannedCCF)\r\n                END AS SpannedCCF,\r\n                MAX(UploadConEdisonCancellationSummary.SpannedThermFactor),\r\n                CASE WHEN MAX(UploadConEdisonCancellationSummary.SpannedTherm) > 0\r\n                     THEN MAX(UploadConEdisonCancellationSummary.SpannedTherm)\r\n                     ELSE MIN(UploadConEdisonCancellationSummary.SpannedTherm)\r\n                END AS SpannedTherm,\r\n                MIN(UploadConEdisonCancellationSummary.SpannedMonthlyPercentage),\r\n                MIN(UploadConEdisonCancellationSummary.SpannedTotalPercentage),\r\n                MAX(UploadConEdisonCancellationSummary.Notes),\r\n                MAX(UploadConEdisonCancellationSummary.AuthenticatedUserID),\r\n                GETDATE(),\r\n                GETDATE(),\r\n                MIN(FacilityName),\r\n                MIN(ServiceAddress)\r\n        FROM ConEd.UploadConEdisonCancellationSummary\r\n        WHERE   UploadConEdisonCancellationSummarySeqid \r\n        NOT IN (\r\n                SELECT  UploadConEdisonCancellationSummarySeqid\r\n                FROM ConEd.UploadConEdisonCancellationSummary AS cancelSum\r\n                        INNER JOIN ConEd.[UploadConEdisonAccountBillingAdjustmentGas]\r\n                       AS adj ON cancelSum.BillingPeriodRevision = adj.BillingPeriodRevision\r\n                                  AND cancelSum.OriginalAccountNumber = adj.OriginalAccountNumber \r\n        )\r\n        GROUP BY UploadConEdisonCancellationSummary.OriginalAccountNumber,\r\n                UploadConEdisonCancellationSummary.BillingPeriodRevision",
      "created": "2025-06-10 21:41:26.553000",
      "last_altered": "2025-06-10 21:41:26.553000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@Status",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_ProcessConEdLoadRawAndTransformData",
      "explanation": "#### 1. Overview\n\nThe stored procedure `[ConEd].[Archive_usp_ProcessConEdLoadRawAndTransformData]` is designed to process and transform raw data from ConEdison into a structured format suitable for further analysis or reporting. It involves executing an SSIS package to load raw data, transforming this data into formatted tables, and handling various billing and cancellation scenarios. The procedure also manages specific cases like spanned bills and rate refunds, and updates or inserts records into summary tables accordingly.\n\n#### 2. Complexity Level: High\n\nThe procedure is complex due to the following reasons:\n- It involves multiple stages of data processing, including executing an external SSIS package, data transformation, and handling specific business rules.\n- It uses several temporary tables and complex SQL operations, including joins, groupings, and conditional logic.\n- It interacts with external systems and configurations, such as enabling and disabling `xp_cmdshell` for executing command-line operations.\n\n#### 3. Input Parameters\n\n- `@Status int output`: This parameter is intended to provide an output status of the procedure execution. However, it is not used within the procedure, which might be an oversight or placeholder for future use.\n\n#### 4. Business Logic and Workflow\n\n1. **SSIS Package Execution**: The procedure begins by setting up and executing an SSIS package using `xp_cmdshell`. This package is responsible for uploading raw ConEdison data.\n\n2. **Data Initialization**: It truncates existing data in formatted tables (`UploadConEdisonAccount`, `UploadConEdisonMeter`, `UploadConEdisonCancellation`) to prepare for new data insertion.\n\n3. **Data Transformation**: \n   - Inserts data into formatted tables from preload tables, applying transformations such as date conversions and overpunch conversions.\n   - Calls additional stored procedures to identify and correct specific data issues, such as unique net-zero transactions and meter data inconsistencies.\n\n4. **Handling Rebills and Spanned Bills**: \n   - Processes 0-1 period rebills and spanned bills, inserting them into summary tables.\n   - Executes parsing and merging operations for spanned bills.\n\n5. **Handling Cancellations**: \n   - Processes 0-1 period cancellations and spanned cancellations, inserting them into summary tables.\n   - Identifies and processes refunds for specific gas rates (036 and 040).\n\n6. **Adjustments and Merging**: \n   - Updates existing adjustment records with cancellation data.\n   - Inserts new cancellation records into the adjustment table if they do not already exist.\n\n#### 5. Performance Considerations\n\n- **Use of `xp_cmdshell`**: Enabling `xp_cmdshell` can pose security risks and may impact performance if not managed properly.\n- **Truncation and Insertion**: Frequent truncation and insertion operations can lead to high I/O and locking, potentially affecting performance.\n- **Complex Queries**: The use of complex queries with multiple joins and aggregations may lead to longer execution times, especially with large datasets.\n- **Concurrency**: The procedure does not appear to handle concurrency, which could lead to issues if multiple instances are run simultaneously.\n\n#### 6. Potential Issues or Risks\n\n- **Security Risks**: The use of `xp_cmdshell` poses a security risk as it allows execution of arbitrary commands on the server.\n- **Error Handling**: The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete data processing.\n- **Scalability**: The procedure may not scale well with increasing data volumes due to its reliance on truncation and insertion operations.\n- **Data Integrity**: The procedure assumes that data in preload tables is correct and does not include validation checks, which could lead to data integrity issues if the source data is flawed.\n- **Unused Parameter**: The `@Status` parameter is not utilized, which could lead to confusion or misinterpretation of the procedure's output status.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 11882,
      "api_response_id": "chatcmpl-ByeoublkxkGItFNW0GE5NQDN1jtxx"
    },
    "analysis_timestamp": "2025-07-29 09:38:39"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_ProcessConEdTransformMeterBillingData",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_ProcessConEdTransformMeterBillingData]\r\n(\r\n\t@Status AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\t--**************************************************************************************\r\n\t--* Date         Tech Description of Change\r\n\t--* ---------- ----  -------------------------------------------------------------\r\n\t--* 10/26/2005 PAH  First Version \r\n\t--* 2019-03-12\tzd\testimate or actual calculation is updated\t\r\n\t--**************************************************************************************\r\n\t\r\n\tDECLARE @UnicodeEndOfFileMarker AS INT, @BillingPeriod AS VARCHAR(6);\r\n\r\n\tSELECT TOP 1 @BillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonMeter;\r\n\tSET @UnicodeEndOfFileMarker = 27;\r\n\t\r\n\t--**************************************************************************************\r\n\t--Main Process\r\n\t--**************************************************************************************\r\n\r\n\tTRUNCATE TABLE ConEd.UploadConEdisonMeterSummary;\r\n\tDBCC CHECKIDENT ('ConEd.[UploadConEdisonMeterSummary]', RESEED, 1);\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonMeterSummary\r\n\t\t(AccountUtilityCompanySeqid,\r\n\t\tOriginalAccountNumber,\r\n\t\tOriginalMeterNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCancelPeriod,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tBillingAction,\r\n\t\tGasRateCode,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tFromDate,\r\n\t\tToDate,\r\n\t\tMeterFromReading,\r\n\t\tMeterToReading,\r\n\t\tCcf,\r\n\t\tTherms,\r\n\t\tThermsFactor,\r\n\t\tMeterConstant,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tReadingCode,\r\n\t\tNumberOfDials,\r\n\t\tMeterType,\r\n\t\tProcessEffectiveDate,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tAuthenticatedUserID,\r\n\t\tNotes,\r\n\t\tDateAdded,\r\n\t\tLastUpdate,\r\n\t\tInitialPostingDate,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tAverageRebillThermsFactor,\r\n\t\tPriorRevisedBilledCCF,\r\n\t\tRevisedBilledCCF,\r\n\t\tCanceledBilledCCF,\r\n\t\tPriorRevisedBilledTherms,\r\n\t\tRevisedBilledTherms,\r\n\t\tCanceledBilledTherms,\r\n\t\tFacilityName,\r\n\t\tServiceAddress)\r\n\tSELECT 9 AS AccountUtilityCompanySeqid,\r\n\t\tAccountNumber,\r\n\t\tMeterNumber, \r\n\t\tBillingPeriod, \r\n\t\tcase when BillingPeriod < BillingPeriodRevision then BillingPeriod else BillingPeriodRevision end AS BillingPeriodRevision, \r\n\t\tcase when BillingPeriod < BillingPeriodRevision then BillingPeriod else BillingPeriodRevision end AS FirstPeriodCanceled, \r\n\t\t1 AS NumberOfTransactions, \r\n\t\t1 AS NumberOfRebillTransactions,\r\n\t\t0 AS NumberOfCancelTransactions,\r\n\t\tcase when BillingPeriod = BillingPeriodRevision then 'O' else 'A' end AS BillingAction,\r\n\t\tdbo.[DetermineConEdisonGetGasTariffRateFromAccountTable] (AccountNumber,BillingPeriodRevision) AS GasRateCode,\r\n\t\tFromDate, ToDate,FromDate, ToDate, FromReading AS FromMeterReading, ToReading AS ToMeterReading,\r\n\t\tCCF,\r\n\t\tcast(ccf*dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber,BillingPeriodRevision)+.501 AS int) AS Therms,\r\n\t\tdbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber,BillingPeriodRevision) AS ThermFactor, \r\n\t\tMeterConstant,\r\n\t\tdbo.[CalculateNumberOfBillingDays](FromDate, ToDate) AS TotalBillingDaysRebilled,\r\n\t\tDeltaNumberOfPeriods AS NumberOfBillingPeriods,\r\n\t\tdbo.[CalculateNumberOfBillingDays](FromDate, ToDate) AS BillingDays, \r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD] (PostingDate) AS BillingDate, \r\n\t\tReadingCode,\r\n\t\tDials AS NumberOfDials, \r\n\t\t'G' AS MeterType, \r\n\t\tnull AS ProcessEffectiveDate,\r\n\t\tcase when BillingPeriod < BillingPeriodRevision then BillingPeriod else BillingPeriodRevision end AS SpannedBillingPeriodRevision,\r\n\t\tcase when BillingPeriod < BillingPeriodRevision then BillingPeriod else BillingPeriodRevision end AS SpannedFirstCanceledBillingPeriod,\r\n\t\tCCF AS SpannedCCF,\r\n\t\tdbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber,BillingPeriodRevision) AS SpannedThermFactor,\r\n\t\tcast(ccf*dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber,BillingPeriodRevision)+.501 AS int) AS SpannedTherm,\r\n\t\t1.0 AS SpannedMonthlyPercentage,\r\n\t\t1.0 AS SpannedTotalPercentage,\r\n\t\t1 AS AuthenticatedUserID,\r\n\t\tnull AS Notes,\r\n\t\tGETDATE() AS DateAdded,\r\n\t\tGETDATE() AS LastUpdate,\r\n\t\tGETDATE() AS InitialPostingDate,\r\n\t\t--case when ReadingCode < 15 then 'EST' else 'ACT' end AS EstimatedOrActualBilling,\r\n\t\tdbo.CalculateEstimatedOrActual(ReadingCode,9) AS EstimatedOrActualBilling,\r\n\t\t1.00 AS AverageRebillThermsFactor,\r\n\t\t0 AS PriorRevisedBilledCCF,\r\n\t\t0 AS RevisedBilledCCF,\r\n\t\t0 AS CanceledBilledCCF,\r\n\t\t0 AS PriorRevisedBilledTherms,\r\n\t\t0 AS RevisedBilledTherms,\r\n\t\t0 AS CanceledBilledTherms,\r\n\t\tFacilityName,\r\n\t\tServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeter \r\n\tWHERE DeltaNumberOfPeriods < 2;\r\n\r\n\t-- Merges the reset rows that prior to the actual group by merge and removes the zero billing period rows \r\n\t-- after the merge.\r\n\r\n\tEXEC ConEd.Archive_usp_ParseSplitBillingAndMeterResetsUploadConEdisonMeterInfo 1\r\n\r\n\t---Loading >1 Period Bills (Spanned Bills) (Temporarily here)\t\t\r\n\r\n\tTRUNCATE TABLE ConEd.UploadConEdisonMeterTempSummarySpanned;\r\n\tDBCC CHECKIDENT ('ConEd.[UploadConEdisonMeterTempSummarySpanned]', RESEED, 1);\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonMeterTempSummarySpanned\r\n\t\t(title,\r\n\t\tAccountNumber,\r\n\t\tMeterNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstPeriodCanceled,\r\n\t\tFromDate,\r\n\t\tToDate,\r\n\t\tThermFactor,\r\n\t\tCCF,\r\n\t\tDeltaNumberOfPeriods,\r\n\t\tReadingCode,\r\n\t\tFromReading,\r\n\t\tToReading,\r\n\t\tMeterConstant,\r\n\t\tTripNumber,\r\n\t\tDials,\r\n\t\tFacilityName,\r\n\t\tServiceAddress)\r\n\tSELECT 'SpannedMeterbilling' AS title, \r\n\t\tAccountNumber,\r\n\t\tMeterNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstPeriodCanceled,\r\n\t\tFromDate,\r\n\t\tToDate,\r\n\t\tThermFactor,\r\n\t\tCCF,\r\n\t\tDeltaNumberOfPeriods,\r\n\t\tReadingCode,\r\n\t\tFromReading,\r\n\t\tToReading,\r\n\t\tMeterConstant,\r\n\t\tCycleBillingDays,  -- Trip Number\r\n\t\tDials,\r\n\t\tFacilityName,\r\n\t\tServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeter\r\n\tWHERE DeltaNumberOfPeriods > 1;\r\n\r\n\t-----Parsing >1 Period Bills (Spanned Bills) (Temporarily here)\r\n\r\n\tEXECUTE ConEd.Archive_usp_ParseSpannedBilledUploadConEdisonMeterInfo 1\r\n\r\n\t----- Merging Rebills (Temporarily here)\r\n\r\n\tTRUNCATE TABLE ConEd.UploadConEdisonMeterBillingAdjustmentGas;\r\n\r\n\t--\tMake sure that the max BillingPeriodRevision is less than or equal to the current BillingPeriod\r\n\tUPDATE ConEd.UploadConEdisonMeterSummary\r\n\tSET BillingPeriodRevision = CASE WHEN BillingPeriodRevision > BillingPeriod THEN BillingPeriod\r\n\t\tELSE BillingPeriodRevision END\r\n\tWHERE BillingPeriod < BillingPeriodRevision;\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t\t(AccountUtilityCompanySeqid,\r\n\t\tOriginalAccountNumber,\r\n\t\tOriginalMeterNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCancelPeriod,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tBillingAction,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tGasRateCode,\r\n\t\tFromDate,\r\n\t\tToDate,\r\n\t\tFromReadingDate,\r\n\t\tToReadingDate,\r\n\t\tMeterFromReading,\r\n\t\tMeterToReading,\r\n\t\tCcf,\r\n\t\tTherms,\r\n\t\tThermsFactor,\r\n\t\tMeterConstant,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tReadingCode,\r\n\t\tNumberOfDials,\r\n\t\tMeterType,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tProcessEffectiveDate,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tAuthenticatedUserID,\r\n\t\tNotes,\r\n\t\tInitialPostingDate,\r\n\t\tFacilityName,\r\n\t\tServiceAddress)\r\n\tSELECT MIN(AccountUtilityCompanySeqid) AS AccountUtilityCompanySeqid, OriginalAccountNumber, OriginalMeterNumber, MIN(BillingPeriod) AS BillingPeriod, \r\n\t\tBillingPeriodRevision, MIN(FirstCancelPeriod) AS FirstCancelPeriod, COUNT(NumberOfTransactions) AS NumberOfTransactions, \r\n\t\tCOUNT(NumberOfRebillTransactions) AS NumberOfRebillTransactions, min(0) AS NumberOfCancelTransactions,MIN(BillingAction) AS BillingAction, MIN(InitialCancelFromDate) \r\n\t\tAS InitialCancelFromDate, MAX(CurrentBillingToDate) AS CurrentBillingToDate, MIN(GasRateCode) AS GasRateCode, MIN(FromDate) AS FromDate, \r\n\t\tMAX(ToDate) AS ToDate, MIN(FromDate) AS FromReadingDate, MAX(ToDate) AS ToReadingDate, MAX(MeterFromReading) AS MeterFromReading, MAX(MeterToReading) AS MeterToReading, SUM(Ccf) AS Ccf, SUM(Therms) \r\n\t\tAS Therms, MIN(ThermsFactor) AS ThermsFactor, MIN(MeterConstant) AS MeterConstant, SUM(TotalBillingDaysRebilled) AS TotalBillingDaysRebilled, \r\n\t\tSUM(NumberOfBillingPeriods) AS NumberOfBillingPeriods, SUM(BillingDays) AS BillingDays, MIN(BillingDate) AS BillingDate, MIN(ReadingCode) \r\n\t\tAS ReadingCode, MIN(NumberOfDials) AS NumberOfDials, MIN(MeterType) AS MeterType, MIN(ProcessedInTheCurrentPeriod) \r\n\t\tAS ProcessedInTheCurrentPeriod, MIN(ProcessEffectiveDate) AS ProcessEffectiveDate, MIN(DerivedFromSpannedBill) AS DerivedFromSpannedBill, \r\n\t\tMIN(SpannedBillingPeriodRevision) AS SpannedBillingPeriodRevision, MIN(SpannedFirstCanceledBillingPeriod) \r\n\t\tAS SpannedFirstCanceledBillingPeriod, MIN(SpannedCCF) AS SpannedCCF, MIN(SpannedThermFactor) AS SpannedThermFactor, MIN(SpannedTherm) \r\n\t\tAS SpannedTherm, MIN(SpannedMonthlyPercentage) AS SpannedMonthlyPercentage, MIN(SpannedTotalPercentage) AS SpannedTotalPercentage, \r\n\t\tMAX(EstimatedOrActualBilling) AS EstimatedOrActualBilling, MIN(AuthenticatedUserID) AS AuthenticatedUserID, MIN(Notes) AS Notes, \r\n\t\tMIN(InitialPostingDate) AS InitialPostingDate,min(FacilityName) AS FacilityName,min(ServiceAddress) AS ServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeterSummary\r\n\tGROUP BY OriginalAccountNumber, OriginalMeterNumber, BillingPeriodRevision;\r\n\r\n\t--\tThe rebilled CCF will adjusted for the net zero adjustments on the account billing.  The meter billing will use the account billing ccf and re derive the \r\n\t--\tToMeterReading = FromMeterReading + account billing ccf.\r\n\r\n\t-- (U.NumberOfRebillTransactions > 1) is the critical way to determine if there were multiple re-bills\r\n\r\n\tUPDATE U\r\n\tSET RevisedBilledCCF = V.MeterCcf+V.netCCF, \r\n\t\tMeterToReading = U.MeterFromReading+V.MeterCcf+V.netCCF,\r\n\t\tCcf =V.MeterCcf+V.netCCF\r\n\tFROM ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS V\r\n\t\tINNER JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS U ON V.UniqueAccountSeqID = U.UniqueAccountSeqID\r\n            AND V.BillingPeriodRevision = U.BillingPeriodRevision\r\n\tWHERE V.netCCF <> 0 AND U.NumberOfRebillTransactions > 1;\r\n\r\n\t--\tIdentify all Gas Usage Discrepancies\r\n\r\n\tSELECT * FROM ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling\r\n\r\n\t--\tUpdate the notes of all meters that have a discrepancy with the account billing and\r\n\t--\tpreserve the incorrect amount AS part of what was actual reported by the utility company.\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET Notes = 'Account and Meter Billing Discrepancies  ' +\r\n\t\tCASE WHEN V.netTherms <> 0 THEN 'Net Therms('+ CAST(V.netTherms AS VARCHAR(10))+') ' +\r\n\t\tCASE WHEN V.netCCF <> 0 THEN ')  CCF('+ CAST(V.netCCF AS VARCHAR(10))+')  '  ELSE '' END + \r\n\t\t\t':           Reported: Therms('+ CAST(V.AccountTotalTherms AS VARCHAR(10)) +')           CCF('+ CAST(V.AccountTotalCcf AS VARCHAR(10)) +')           ThermsFactor('+ CAST(V.AccountTotalThermsFactor AS VARCHAR(10)) +')  ' ELSE '' END\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS U\r\n\t\tINNER JOIN ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS V ON U.BillingPeriod = V.BillingPeriod\r\n            AND U.BillingPeriodRevision = V.BillingPeriodRevision\r\n            AND U.UniqueAccountSeqID = V.UniqueAccountSeqID;\r\nEND;",
      "created": "2025-06-10 21:41:26.573000",
      "last_altered": "2025-06-10 21:41:26.573000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@Status",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_ProcessConEdTransformMeterBillingData",
      "explanation": "#### 1. Overview\nThe stored procedure `Archive_usp_ProcessConEdTransformMeterBillingData` is designed to process and transform billing data related to ConEdison meters. It performs several operations, including truncating and reseeding tables, inserting transformed data into summary tables, handling spanned billing periods, merging rebills, and identifying discrepancies between account and meter-reported billing. The procedure is part of a larger data processing workflow for managing and reconciling utility billing data.\n\n#### 2. Complexity Level: High\nThe procedure is complex due to the following reasons:\n- It involves multiple table operations, including truncation, insertion, and updates.\n- It uses several user-defined functions and other stored procedures, indicating a reliance on external logic.\n- It handles intricate business logic, such as calculating therms, managing billing periods, and reconciling discrepancies.\n- It processes data conditionally based on various criteria, such as billing period revisions and transaction counts.\n\n#### 3. Input Parameters\n- `@Status AS INT OUTPUT`: This parameter is used to return the status of the procedure execution. It is an output parameter, indicating that it is intended to communicate the result or status back to the caller.\n\n#### 4. Business Logic and Workflow\n- **Initialization**: The procedure begins by declaring variables for the Unicode end-of-file marker and billing period. It retrieves the top billing period from the `UploadConEdisonMeter` table.\n- **Truncation and Reseeding**: It truncates the `UploadConEdisonMeterSummary` table and reseeds its identity column to 1.\n- **Data Insertion**: The procedure inserts transformed data into `UploadConEdisonMeterSummary`, calculating various fields such as therms, billing days, and billing actions using user-defined functions.\n- **Handling Spanned Bills**: It processes spanned billing periods by inserting relevant data into `UploadConEdisonMeterTempSummarySpanned` and executing another stored procedure to parse these bills.\n- **Merging Rebills**: The procedure updates and inserts data into `UploadConEdisonMeterBillingAdjustmentGas`, ensuring billing period revisions are correct and merging rebills.\n- **Discrepancy Identification**: It updates records to reflect discrepancies between account and meter billing, appending notes to affected records.\n\n#### 5. Performance Considerations\n- **Table Truncation**: Frequent truncation and reseeding of tables can be resource-intensive and may impact performance if the tables are large.\n- **Complex Queries**: The use of multiple joins, aggregations, and user-defined functions can lead to performance bottlenecks, especially if indexes are not optimized.\n- **Concurrency**: The procedure's operations on shared tables may lead to locking and blocking issues in a high-concurrency environment.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: Truncating tables without proper backup or transaction management can lead to data loss.\n- **Function Dependencies**: The reliance on user-defined functions and other stored procedures can introduce risks if these dependencies are modified or removed.\n- **Error Handling**: The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete data processing.\n- **Scalability**: As data volume grows, the performance of the procedure may degrade due to its complexity and the resource-intensive nature of its operations.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 4019,
      "api_response_id": "chatcmpl-ByepMGbKrlDkp0ItDQxDcRc1scKZN"
    },
    "analysis_timestamp": "2025-07-29 09:39:05"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_ProRateConEdisonAccountBillingUsageToMeterBilling",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_ProRateConEdisonAccountBillingUsageToMeterBilling] (@Status int output)\r\nAS\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Not Used\r\n---*               \r\n--* Exec:       \t\tusp_ProRateConEdisonAccountBillingUsageToMeterBilling\r\n--*\r\n--* Parameter(s):         @Status int output\r\n--*\r\n--*\r\n--* Database:     OEC\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   5/05/2006\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 10/26/2005 PAH  First Version \r\n--**************************************************************************************\r\n\r\n--**************************************************************************************\r\n--Declare Variables\r\n--**************************************************************************************\r\n--\r\n--**************************************************************************************\r\n--Set defaults\r\n--**************************************************************************************\r\n\r\n--**************************************************************************************\r\n--Main Process \r\n--**************************************************************************************\r\n--\r\n--\tAll of the accounts that have more than one meter and were billed on more than one meter for the billing period revision will be \r\n--\tprocess through a cursor.  The meters will be processed in ascending ccf usage order.  The usage will be pro-rated \r\n--\tby the ration of the meter ccf usage divided by account ccf usage rounded to zero decimal places for n-1 meters that were billed \r\n--\tfor the billing period revision.  The last meter usage will be derived by account billing usage minus the summed n-1 meter pro-rated\r\n--\tusage.\r\n--\r\ndeclare @UploadConEdisonAccountBillingAdjustmentGasSeqid int\r\ndeclare @UploadConEdisonMeterBillingAdjustmentGasSeqid int\r\n\r\ndeclare @NumberOfMeters int\r\ndeclare @AccountBillingRevisedCCF int\r\ndeclare @AccountBillingRevisedTherms int\r\ndeclare @AccountBillingCanceledTherms int\r\ndeclare @AccountBillingCanceledCCF int\r\ndeclare @MeterCCF int\r\ndeclare @BillingPeriod varchar(6)\r\ndeclare @BillingPeriodRevision  varchar(6)\r\ndeclare @OriginalAccountNumber varchar(15) \r\ndeclare @OriginalMeterNumber  varchar(12)\r\n--\r\ndeclare @NumberOfMetersRemainToBeProcessed int\r\ndeclare @ProRatedAccountBillingCanceledCCF int\r\ndeclare @ProRatedAccountBillingCanceledTherms int\r\ndeclare @ProRatedAccountBillingRevisedTherms int\r\ndeclare @ProRatedMeterBillingCanceledCCF int\r\ndeclare @ProRatedMeterBillingRevisedTherms int\r\ndeclare @ProRatedMeterBillingCanceledTherms int\r\n--\r\ndeclare @idx int\r\nset @idx=0\r\n--\r\n\r\nDeclare IndividualMeterOnMultiMeterAccountCursor cursor for \r\nSELECT  AccountBillingAdjustmentGas.UploadConEdisonAccountBillingAdjustmentGasSeqid,\r\n\t\tMeterBillingAdjustmentGas.UploadConEdisonMeterBillingAdjustmentGasSeqid,\r\n\t\tMeterCount.NumberOfMeters,   \r\n\t\tMeterBillingAdjustmentGas.BillingPeriodRevision,  \r\n\t\tMeterBillingAdjustmentGas.OriginalAccountNumber,  \r\n\t\tMeterBillingAdjustmentGas.OriginalMeterNumber,\r\n\t\tisnull(MeterBillingAdjustmentGas.RevisedBilledCCF,0) AS mbCCF,\r\n\t\tisnull(AccountBillingAdjustmentGas.abRevisedCCF,0) as abRevisedCCF, \r\n\t\tisnull(AccountBillingAdjustmentGas.abCanceledCCF,0) as abCanceledCCF,\r\n\t\tisnull(AccountBillingAdjustmentGas.abRevisedTherms,0) as abRevisedTherms, \r\n\t\tisnull(AccountBillingAdjustmentGas.abCanceledTherms,0) as abCanceledTherms\r\nFROM \r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas AS MeterBillingAdjustmentGas \r\n\t\tinner join\r\n\t(\r\n\t\tSELECT  min(UploadConEdisonAccountBillingAdjustmentGasSeqid) as UploadConEdisonAccountBillingAdjustmentGasSeqid,   \r\n\t\t\t\tBillingPeriodRevision,OriginalAccountNumber,\r\n\t\t\t\tSUM(RevisedCCF) AS abRevisedCCF, \r\n\t\t\t\tSUM(CanceledCCF) AS abCanceledCCF,\r\n\t\t\t\tSUM(RevisedTherms) AS abRevisedTherms, \r\n\t\t\t\tSUM(CanceledTherms) AS abCanceledTherms\r\n\t\tFROM \r\n\t\t\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\tGROUP BY \r\n\t\t\t\tBillingPeriodRevision,OriginalAccountNumber\r\n\t) as AccountBillingAdjustmentGas on \r\n\t\tMeterBillingAdjustmentGas.BillingPeriodRevision = AccountBillingAdjustmentGas.BillingPeriodRevision and\r\n\t\tMeterBillingAdjustmentGas.OriginalAccountNumber = AccountBillingAdjustmentGas.OriginalAccountNumber\r\n\t\tinner join\r\n\t(\r\n\t\tSELECT \r\n\t\t\t\tBillingPeriodRevision,OriginalAccountNumber,count(*) as NumberOfMeters\r\n\t\tFROM \r\n\t\t\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t\tgroup by \r\n\t\t\t\tBillingPeriodRevision,OriginalAccountNumber\r\n\t) as MeterCount on \t\t\r\n\t\tMeterCount.BillingPeriodRevision = AccountBillingAdjustmentGas.BillingPeriodRevision and\r\n\t\tMeterCount.OriginalAccountNumber = AccountBillingAdjustmentGas.OriginalAccountNumber\r\norder by\r\n\t\tMeterBillingAdjustmentGas.BillingPeriodRevision,MeterBillingAdjustmentGas.OriginalAccountNumber,mbCCF\r\n--\r\nopen IndividualMeterOnMultiMeterAccountCursor\r\n\r\n-- Read first row\r\nfetch IndividualMeterOnMultiMeterAccountCursor into \r\n\t\t@UploadConEdisonAccountBillingAdjustmentGasSeqid,\r\n\t\t@UploadConEdisonMeterBillingAdjustmentGasSeqid,\r\n\t\t@NumberOfMeters,\r\n\t\t@BillingPeriodRevision,  \r\n\t\t@OriginalAccountNumber,  \r\n\t\t@OriginalMeterNumber,\r\n\t\t@MeterCCF,\r\n\t\t@AccountBillingRevisedCCF, \r\n\t\t@AccountBillingCanceledCCF,\r\n\t\t@AccountBillingRevisedTherms, \r\n\t\t@AccountBillingCanceledTherms\r\n--\r\n--\tInitialize the variables after the initial read\r\n--\r\nset @ProRatedAccountBillingRevisedTherms = 0\r\nset @ProRatedAccountBillingCanceledTherms = 0\r\nset @ProRatedAccountBillingCanceledCCF = 0\r\nset @NumberOfMetersRemainToBeProcessed = @NumberOfMeters\t\r\n--\r\nwhile @@fetch_status =0\r\n  begin\r\n\t--\r\n--\tset @idx = @idx+1\r\n--\tprint 'Counter [ '+cast(@idx as varchar(10))+'] - AccountSeqid: '+cast(@UploadConEdisonAccountBillingAdjustmentGasSeqid as varchar(10))+' - MeterSeqid: '+cast(@UploadConEdisonMeterBillingAdjustmentGasSeqid as varchar(10))+' - '+@BillingPeriodRevision+' - '+@OriginalAccountNumber+' - '+@OriginalMeterNumber\r\n--\tprint 'Counter [ '+cast(@idx as varchar(10))+'] - Revised Therms: '+cast(@AccountBillingRevisedTherms as varchar(10))+' - MeterCCF: '+cast(@MeterCCF as varchar(10))+' - abRevisedCCF'+cast(@AccountBillingRevisedCCF as varchar(10))+' - abCanceledTherms: '+cast(@AccountBillingCanceledTherms as varchar(10))+' - '+' - abCanceledCCF: '+cast(@AccountBillingCanceledCCF as varchar(10))\r\n\t--\r\n\tif (@NumberOfMetersRemainToBeProcessed <> 1\t)\r\n\t   begin\r\n\t\t\t--\r\n\t\t\t--\tPro-rate the usage and accummulate the usage for the n-1 meters RevisedTherms\r\n\t\t\t--\r\n\t\t\tset @ProRatedMeterBillingRevisedTherms = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingRevisedTherms * (@MeterCCF/@AccountBillingRevisedCCF),0) end \r\n\t\t\tset @ProRatedMeterBillingCanceledTherms = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledTherms * (@MeterCCF/@AccountBillingRevisedCCF),0) end\r\n\t\t\tset @ProRatedMeterBillingCanceledCCF = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledCCF * (@MeterCCF/@AccountBillingRevisedCCF),0) end \r\n\t\t\t--\r\n\t\t\tdeclare @err int\r\n\t\t\t\r\n\t\t\tselect @err = @@error\r\n\t\t\tif(@err <>0)\r\n\t\t\tbegin\r\n\t\t\t\tprint '======================================================================'\r\n\t\t\t\tprint 'meter:' + @OriginalMeterNumber\r\n\t\t\t\tprint 'AccountBillingRevisedCCF' +\tcast(@AccountBillingRevisedCCF as varchar)\r\n\t\t\t\tprint 'AccountBillingRevisedTherms' + cast(@AccountBillingRevisedTherms as varchar)\r\n\t\t\t\tprint 'MeterCCF' + cast(@MeterCCF as varchar)\r\n\t\t\t\tprint 'AccountBillingRevisedCCF' + cast(@AccountBillingRevisedCCF as varchar)\r\n\t\t\t\tprint '======================================================================'\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tset @ProRatedMeterBillingCanceledTherms = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledTherms * (@MeterCCF/@AccountBillingRevisedCCF),0) end\r\n\t\t\tset @ProRatedMeterBillingCanceledCCF = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledCCF * (@MeterCCF/@AccountBillingRevisedCCF),0) end \r\n\t\t\t--\r\n\t\t\tset @ProRatedAccountBillingRevisedTherms = @ProRatedAccountBillingRevisedTherms + @ProRatedMeterBillingRevisedTherms\r\n\t\t\tset @ProRatedAccountBillingCanceledTherms = @ProRatedAccountBillingCanceledTherms + @ProRatedMeterBillingCanceledTherms\r\n\t\t\tset @ProRatedAccountBillingCanceledCCF = @ProRatedAccountBillingCanceledCCF + @ProRatedMeterBillingCanceledCCF\r\n\t   end\r\n\telse\r\n\t   BEGIN\r\n\t\t\t--\r\n\t\t\t--\tDerive the last meters usage and reset the usage accummulators for the next set of meters\r\n\t\t\t--\r\n\t\t\tset @ProRatedMeterBillingRevisedTherms = @AccountBillingRevisedTherms - @ProRatedAccountBillingRevisedTherms\r\n\t\t\tset @ProRatedMeterBillingCanceledTherms = @AccountBillingCanceledTherms - @ProRatedAccountBillingCanceledTherms\r\n\t\t\tset @ProRatedMeterBillingCanceledCCF = @AccountBillingCanceledCCF - @ProRatedAccountBillingCanceledCCF\r\n\t\t\t--\r\n\t\t\tset @ProRatedAccountBillingRevisedTherms = 0\r\n\t\t\tset @ProRatedAccountBillingCanceledTherms = 0\r\n\t\t\tset @ProRatedAccountBillingCanceledCCF = 0\r\n\t   end\r\n\t--\r\n--\r\n--\tCheck the data for testing purposes only\r\n--\r\n--\tselect \t@BillingPeriodRevision,@OriginalAccountNumber,@OriginalMeterNumber,\r\n--\t\t\t@NumberOfMetersRemainToBeProcessed,@MeterCCF,@AccountBillingRevisedCCF,@AccountBillingRevisedTherms,@AccountBillingCanceledTherms,@AccountBillingCanceledCCF,\r\n--\t\t\t@ProRatedMeterBillingRevisedTherms,@ProRatedMeterBillingCanceledTherms,@ProRatedMeterBillingCanceledCCF,\r\n--\t\t\t@ProRatedAccountBillingRevisedTherms,@ProRatedAccountBillingCanceledTherms,@ProRatedAccountBillingCanceledCCF\r\n\t--\r\n\t--\tUpdate the meter usage\r\n\t--\r\n\tUPDATE    ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET   \r\n\t\t\tCanceledBilledCCF = @ProRatedMeterBillingCanceledCCF,\r\n\t\t\tCanceledBilledTherms = @ProRatedMeterBillingCanceledTherms,\r\n\t\t\tRevisedBilledTherms = @ProRatedMeterBillingRevisedTherms\r\n\twhere\t\r\n\t\t\tBillingPeriodRevision = @BillingPeriodRevision and \r\n\t\t\tOriginalAccountNumber = @OriginalAccountNumber and \r\n\t\t\tOriginalMeterNumber = @OriginalMeterNumber\r\n\r\n\t--\t\r\n\tfetch IndividualMeterOnMultiMeterAccountCursor into \r\n\t\t@UploadConEdisonAccountBillingAdjustmentGasSeqid,\r\n\t\t@UploadConEdisonMeterBillingAdjustmentGasSeqid,\r\n\t\t@NumberOfMeters,\r\n\t\t@BillingPeriodRevision,  \r\n\t\t@OriginalAccountNumber,  \r\n\t\t@OriginalMeterNumber,\r\n\t\t@MeterCCF,\r\n\t\t@AccountBillingRevisedCCF, \r\n\t\t@AccountBillingCanceledCCF,\r\n\t\t@AccountBillingRevisedTherms, \r\n\t\t@AccountBillingCanceledTherms\r\n\t--\t\t\t\r\n\t--\tCheck if the number of meters that remain to be processed for the account in the billing period is not equal to one.\r\n\t--\t\t\t\r\n\tif (@NumberOfMetersRemainToBeProcessed <> 1\t)\r\n\t   BEGIN\r\n\t\t\tset @NumberOfMetersRemainToBeProcessed = @NumberOfMetersRemainToBeProcessed - 1\r\n\t   end\r\n\telse\r\n\t   BEGIN\r\n\t\t\tset @NumberOfMetersRemainToBeProcessed = @NumberOfMeters\t\r\n\t   end\r\n\r\n\t\r\n--\r\n end \r\n--\r\nclose IndividualMeterOnMultiMeterAccountCursor\r\n\r\nDeallocate IndividualMeterOnMultiMeterAccountCursor",
      "created": "2025-06-10 21:41:26.587000",
      "last_altered": "2025-06-10 21:41:26.587000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@Status",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_ProRateConEdisonAccountBillingUsageToMeterBilling",
      "explanation": "#### 1. Overview\nThe stored procedure `[ConEd].[Archive_usp_ProRateConEdisonAccountBillingUsageToMeterBilling]` is designed to pro-rate gas usage for accounts with multiple meters. It processes accounts that have been billed on more than one meter for a given billing period revision. The procedure calculates the pro-rated usage for each meter based on its contribution to the total account usage. The last meter's usage is derived by subtracting the summed pro-rated usage of the other meters from the total account usage. The procedure updates the `ConEd.UploadConEdisonMeterBillingAdjustmentGas` table with the calculated values.\n\n#### 2. Complexity Level: Medium\nThe complexity level is medium due to the use of a cursor to iterate over multiple records, the calculations involved in pro-rating the usage, and the conditional logic to handle the last meter differently. The procedure involves multiple SQL operations, including joins, aggregations, and updates, which add to its complexity.\n\n#### 3. Input Parameters\n- `@Status int output`: This is an output parameter intended to return the status of the procedure execution. A value of `0` indicates success, while `9` indicates failure. However, the procedure does not currently set this parameter, which is a potential oversight.\n\n#### 4. Business Logic and Workflow\n1. **Variable Declaration**: Several variables are declared to store intermediate values such as sequence IDs, meter counts, and usage metrics.\n2. **Cursor Declaration**: A cursor named `IndividualMeterOnMultiMeterAccountCursor` is declared to iterate over accounts with multiple meters. The cursor selects data from the `ConEd.UploadConEdisonMeterBillingAdjustmentGas` and `ConEd.UploadConEdisonAccountBillingAdjustmentGas` tables, joining them to aggregate account-level data.\n3. **Cursor Processing**: \n   - The cursor fetches each row, initializing variables for usage calculations.\n   - For each meter, if it is not the last meter, the procedure calculates pro-rated usage based on the meter's contribution to the total account usage.\n   - For the last meter, the procedure calculates its usage by subtracting the accumulated pro-rated usage of the other meters from the total account usage.\n4. **Data Update**: The calculated pro-rated values are used to update the `ConEd.UploadConEdisonMeterBillingAdjustmentGas` table.\n5. **Cursor Management**: The cursor is closed and deallocated after processing all records.\n\n#### 5. Performance Considerations\n- **Cursor Usage**: The use of a cursor can lead to performance issues, especially with large datasets, as it processes rows one at a time. Consider refactoring to set-based operations if possible.\n- **Error Handling**: The procedure checks for errors during calculations but does not handle them beyond printing messages. Implementing proper error handling and setting the `@Status` parameter would improve robustness.\n- **Indexing**: Ensure that the tables involved have appropriate indexes to optimize the joins and where clauses used in the cursor.\n\n#### 6. Potential Issues or Risks\n- **Lack of Status Setting**: The `@Status` output parameter is not set within the procedure, which means the caller cannot determine the success or failure of the operation.\n- **Error Handling**: The procedure prints error messages but does not take corrective action or halt execution, which could lead to data inconsistencies.\n- **Concurrency**: If multiple instances of this procedure run simultaneously, there could be issues with data consistency or locking, especially given the update operations.\n- **Scalability**: The cursor-based approach may not scale well with large datasets, leading to long execution times and potential blocking issues in the database.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3707,
      "api_response_id": "chatcmpl-ByepmVRHRq0oqCgqilOyhtvmGDenR"
    },
    "analysis_timestamp": "2025-07-29 09:39:21"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "Archive_usp_TransferPreProcessedDataIntoGasSchemaTables",
      "definition": "CREATE PROCEDURE [ConEd].[Archive_usp_TransferPreProcessedDataIntoGasSchemaTables]\r\n(\r\n\t@Status AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\t--**************************************************************************************\r\n\t--* Date         Tech Description of Change\r\n\t--* ---------- ----  -------------------------------------------------------------\r\n\t--* 10/26/2005 PAH  First Version \r\n\t--* 12/17/2018 VY   Updated for UniqueAccountSeqID and UniqueMeterSeqID\r\n\t--**************************************************************************************\r\n\r\n\t--**************************************************************************************\r\n\t--Main Process\r\n\t--**************************************************************************************\r\n\t-- Transfer the ConEd.UploadConEdisonAccountBillingAdjustmentGas and ConEd.UploadConEdisonMeterBillingAdjustmentGas information into their\r\n\t-- gas couterparts (Gas.UploadAccountBillingAdjustmentGas, Gas.UploadMeterBillingAdjustmentGas) to be used for directly processing the data\r\n\t-- into EC3 Billing.AccountBillingXXXX and Billing.meterBillingXXXX tables.\r\n\t\r\n\ttruncate table Gas.UploadAccountBillingAdjustmentGas\r\n\ttruncate table Gas.UploadMeterBillingAdjustmentGas\r\n\t\r\n\tSET identity_insert Gas.UploadAccountBillingAdjustmentGas ON\r\n\r\n\tINSERT INTO Gas.UploadAccountBillingAdjustmentGas\r\n\t\t(UniqueAccountSeqID, /* added on 12/20/2018 */\r\n\t\tUploadAccountBillingAdjustmentGasSeqid, FacilityName, ServiceAddress, AccountSeqid, AccountBillingSeqid, AccountBillingGasSeqid, \r\n\t\tUtilityCompanySeqid, AccountStatus, AccountpreviousStatus, AccountStatusPeriod, InvoiceAccountBillingGroupSeqid, NumberOfTransactions, \r\n\t\tNumberOfRebillTransactions, NumberOfCancelTransactions, OriginalAccountNumber, BillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, \r\n\t\tEstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, TotalRebilledAmount, \r\n\t\tTotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, CanceledBilledAmount, PriorRevisedCCF, RevisedCCF, CanceledCCF, \r\n\t\tPriorRevisedTherms, RevisedTherms, CanceledTherms, AverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, BillingDate, \r\n\t\tToDate, FromDate, BillingAction, ProcessedInTheCurrentPeriod, GasRateCode, TotalCCF, TotalTherms, ThermsFactor, CancelFromDate, CancelToDate, \r\n\t\tCancelTotalCCF, CancelTotalTherms, CancelThermsFactor, CancelBillingDays, ProcessEffectiveDate, DerivedFromSpannedBill, \r\n\t\tSpannedBillingPeriodRevision, SpannedFirstCanceledBillingPeriod, SpannedBilledAmount, SpannedCCF, SpannedThermFactor, SpannedTherm, \r\n\t\tSpannedMonthlyPercentage, SpannedTotalPercentage, Notes, AuthenticatedUserID, DateAdded, LastUpdate,\r\n\t\tEnergySource,BillingCycle,SalesType,ManualPaymentOverride,ManualDataEntry,IsTimeOfDayAccount,LastPeriodModified)\r\n\tSELECT UniqueAccountSeqID, /* added on 12/20/2018 */\r\n\t\tUploadConEdisonAccountBillingAdjustmentGasSeqid, FacilityName, ServiceAddress, AdjustedAccount, AdjustedAccountBilling, \r\n\t\tAdjustedAccountBillingGas, AccountUtilityCompanySeqid, AccountStatus, AccountpreviousStatus, AccountStatusPeriod, \r\n\t\tCurrentInvoiceAccountBillingGroup, NumberOfTransactions, NumberOfRebillTransactions, NumberOfCancelTransactions, OriginalAccountNumber, \r\n\t\tBillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, EstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, \r\n\t\tNumberOfBillingPeriods, TotalBillingDaysRebilled, TotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, \r\n\t\tCanceledBilledAmount, PriorRevisedCCF, RevisedCCF, CanceledCCF, PriorRevisedTherms, RevisedTherms, CanceledTherms, \r\n\t\tAverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, BillingDate, ToDate, FromDate, BillingAction, ProcessedInTheCurrentPeriod, \r\n\t\tGasRateCode, TotalCCF, TotalTherms, ThermsFactor, CancelFromDate, CancelToDate, CancelTotalCCF, CancelTotalTherms, CancelThermsFactor, \r\n\t\tCancelBillingDays, ProcessEffectiveDate, DerivedFromSpannedBill, SpannedBillingPeriodRevision, SpannedFirstCanceledBillingPeriod, \r\n\t\tSpannedBilledAmount, SpannedCCF, SpannedThermFactor, SpannedTherm, SpannedMonthlyPercentage, SpannedTotalPercentage, Notes, \r\n\t\tAuthenticatedUserID, DateAdded, LastUpdate,\r\n\t\tIsNull(EnergySource,5),BillingCycle,SalesType,ManualPaymentOverride,ManualDataEntry,'N' /*IsTimeOfDayAccount*/,BillingPeriod--LastPeriodModified\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas;\r\n\r\n\tSET IDENTITY_INSERT Gas.UploadAccountBillingAdjustmentGas OFF;\r\n\tSET IDENTITY_INSERT Gas.UploadMeterBillingAdjustmentGas ON;\r\n\r\n\tINSERT INTO Gas.UploadMeterBillingAdjustmentGas\r\n\t\t(UniqueAccountSeqID, UniqueMeterSeqID, /* added on 12/20/2018 */\r\n\t\tUploadMeterBillingAdjustmentGasSeqid, FacilityName, ServiceAddress, UtilityCompanySeqid, AccountSeqid, MeterSeqid, \r\n\t\tAccountExchangeMeterTrackSeqid, MeterBillingSeqid, MeterBillingGasSeqid, OriginalAccountNumber, OriginalMeterNumber, BillingPeriod, \r\n\t\tBillingPeriodRevision, FirstCancelPeriod, NumberOfTransactions, NumberOfRebillTransactions, NumberOfCancelTransactions, BillingAction, \r\n\t\tMeterBillingStatus, MeterBillingPreviousStatus, MeterBillingStatusPeriod, PriorRevisedBilledCCF, RevisedBilledCCF, CanceledBilledCCF, \r\n\t\tPriorRevisedBilledTherms, RevisedBilledTherms, CanceledBilledTherms, InitialCancelFromDate, CurrentBillingToDate, GasRateCode, FromDate, \r\n\t\tToDate, FromReadingDate, ToReadingDate, MeterFromReading, MeterToReading, Ccf, Therms, ThermsFactor, MeterConstant, \r\n\t\tTotalBillingDaysRebilled, NumberOfBillingPeriods, BillingDays, BillingDate, ReadingCode, NumberOfDials, MeterType, ProcessedInTheCurrentPeriod, \r\n\t\tProcessEffectiveDate, CancelReadingCode, CancelFromDate, CancelToDate, CancelMeterFromReading, CancelMeterToReading, CancelCcf, \r\n\t\tCancelTherms, CancelThermsFactor, CancelMeterConstant, InitialPostingDate, DerivedFromSpannedBill, SpannedBillingPeriodRevision, \r\n\t\tSpannedFirstCanceledBillingPeriod, SpannedCCF, SpannedThermFactor, SpannedTherm, SpannedMonthlyPercentage, SpannedTotalPercentage, \r\n\t\tEstimatedOrActualBilling, MeterReset,AuthenticatedUserID, Notes, DateAdded, LastUpdate,LastPeriodModified,\r\n\t\tBillCreationDate,EnergySource,BillingCycle,SalesType,IsTimeOfDayAccount,UtilityServiceAddress,MeterDials)\r\n\tSELECT UniqueAccountSeqID, UniqueMeterSeqID, /* added on 12/20/2018 */  \r\n\t\tUploadConEdisonMeterBillingAdjustmentGasSeqid, FacilityName, ServiceAddress, AccountUtilityCompanySeqid, AccountBilled, MeterBilled, \r\n\t\tAccountExchangeMeterTrackSeqid, AdjustedMeterBilling, AdjustedMeterBillingGas, OriginalAccountNumber, OriginalMeterNumber, BillingPeriod, \r\n\t\tBillingPeriodRevision, FirstCancelPeriod, NumberOfTransactions, NumberOfRebillTransactions, NumberOfCancelTransactions, BillingAction, \r\n\t\tMeterBillingStatus, MeterBillingPreviousStatus, MeterBillingStatusPeriod, PriorRevisedBilledCCF, RevisedBilledCCF, CanceledBilledCCF, \r\n\t\tPriorRevisedBilledTherms, RevisedBilledTherms, CanceledBilledTherms, InitialCancelFromDate, CurrentBillingToDate, GasRateCode, FromDate, \r\n\t\tToDate, FromReadingDate, ToReadingDate, MeterFromReading, MeterToReading, Ccf, Therms, ThermsFactor, MeterConstant, \r\n\t\tTotalBillingDaysRebilled, NumberOfBillingPeriods, BillingDays, BillingDate, ReadingCode, NumberOfDials, MeterType, ProcessedInTheCurrentPeriod, \r\n\t\tProcessEffectiveDate, CancelReadingCode, CancelFromDate, CancelToDate, CancelMeterFromReading, CancelMeterToReading, CancelCcf, \r\n\t\tCancelTherms, CancelThermsFactor, CancelMeterConstant, InitialPostingDate, DerivedFromSpannedBill, SpannedBillingPeriodRevision, \r\n\t\tSpannedFirstCanceledBillingPeriod, SpannedCCF, SpannedThermFactor, SpannedTherm, SpannedMonthlyPercentage, SpannedTotalPercentage, \r\n\t\tEstimatedOrActualBilling, MeterReset,AuthenticatedUserID, Notes, DateAdded, LastUpdate,BillingPeriod, --LastPeriodModified,\r\n\t\tBillCreationDate,EnergySource,BillingCycle,SalesType,'N'/*IsTimeOfDayAccount*/,UtilityServiceAddress,MeterDials\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas;\r\n\r\n\tSET IDENTITY_INSERT Gas.UploadMeterBillingAdjustmentGas OFF;\r\n\r\n\t--\tSet the dates below into each of the account billing row.  The information is being retrieved from the\r\n\t--\tCommon.UploadCycleParameters table:\r\n\t--\t\t\t\tBillCreationDate\r\n\t--\t\t\t\tPostMarkDate \r\n\t--\t\t\t\tDatePaymentDue \r\n\t--\t\t\t\tDateAcceptanceIntoOEC\r\n\r\n\t/* added 12/17/2018 for updating UniqueAccountSeqID an UniqueMeterSeqID */\r\n\r\n\tUPDATE U\r\n\tSET UniqueAccountSeqID = A.UniqueAccountSeqid\r\n\tFROM Gas.UploadAccountBillingAdjustmentGas AS U\r\n\t\tINNER JOIN Billing.Account AS A ON U.AccountSeqid = A.AccountSeqID\r\n\tWHERE U.UniqueAccountSeqID IS NULL;\r\n\r\n\tUPDATE UM\r\n\tSET UniqueAccountSeqID = A.UniqueAccountSeqid\r\n\tFROM Gas.UploadMeterBillingAdjustmentGas AS UM\r\n\t\tINNER JOIN Billing.Account AS A ON UM.AccountSeqid = A.AccountSeqID\r\n\tWHERE UM.UniqueAccountSeqID IS NULL;\r\n\r\n\tUPDATE UM\r\n\tSET UniqueMeterSeqID = M.UniqueMeterSeqid\r\n\tFROM Gas.UploadMeterBillingAdjustmentGas AS UM\r\n\t\tINNER JOIN Billing.Meter AS M ON UM.MeterSeqID = M.MeterSeqid\r\n\tWHERE UM.UniqueMeterSeqID IS NULL;\r\n\r\n\tUPDATE U\r\n\tSET\tBillCreationDate = UCP.BillCreationDate, \r\n\t\tPostMarkDate = UCP.PostMarkDate, \r\n\t\tDatePaymentDue = UCP.DatePaymentDue,\r\n\t\tDateAcceptanceIntoOEC = UCP.DateAcceptanceIntoOEC\r\n\tFROM Gas.UploadAccountBillingAdjustmentGas AS U\r\n\t\tINNER JOIN Common.UploadCycleParameters AS UCP ON U.UtilityCompanySeqid = UCP.UtilityCompanySeqid\r\n\t\t\tAND U.BillingPeriod = UCP.BillingPeriod;\r\n\r\n\t--\tPost the non-zero NetPaidAdjustment to the current billing period account billing row\r\n\r\n\tUPDATE U\r\n\tSET PaidAdjustmentAmount = V.NetPaidAdjustment\r\n\tFROM Gas.uvw_CalculateUploadAccountBillingNetPaidAdjustment AS V\r\n\t\tINNER JOIN Gas.UploadAccountBillingAdjustmentGas AS U ON  V.UtilityCompanySeqid = U.UtilityCompanySeqid\r\n\t\t\tAND V.UniqueAccountSeqID = U.UniqueAccountSeqID\r\n\tWHERE U.BillingPeriod = U.BillingPeriodRevision;\r\nEND;",
      "created": "2025-06-10 21:41:26.600000",
      "last_altered": "2025-06-10 21:41:26.600000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@Status",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "Archive_usp_TransferPreProcessedDataIntoGasSchemaTables",
      "explanation": "#### 1. Overview\nThe stored procedure `Archive_usp_TransferPreProcessedDataIntoGasSchemaTables` is designed to transfer data from two source tables within the `ConEd` schema to corresponding target tables in the `Gas` schema. It processes billing adjustment data for accounts and meters, updating specific fields and ensuring data integrity by setting unique identifiers and additional billing-related dates. The procedure involves truncating target tables, inserting data from source tables, updating unique identifiers, and setting billing-related dates.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including data truncation, insertion, and updates across several tables. It also manages identity inserts and joins with other tables to update specific fields, which adds to its complexity. However, it does not involve complex logic or conditional branching, keeping it at a medium complexity level.\n\n#### 3. Input Parameters\n- `@Status AS INT OUTPUT`: This parameter is intended to provide an output status of the procedure execution. However, it is not utilized within the procedure, indicating a potential oversight or future implementation placeholder.\n\n#### 4. Business Logic and Workflow\n1. **Truncation of Target Tables**: The procedure begins by truncating `Gas.UploadAccountBillingAdjustmentGas` and `Gas.UploadMeterBillingAdjustmentGas` to ensure they are empty before new data is inserted.\n\n2. **Data Insertion with Identity Insert**: \n   - Identity insert is enabled for `Gas.UploadAccountBillingAdjustmentGas` and `Gas.UploadMeterBillingAdjustmentGas` to allow explicit values for identity columns.\n   - Data is inserted from `ConEd.UploadConEdisonAccountBillingAdjustmentGas` and `ConEd.UploadConEdisonMeterBillingAdjustmentGas` into their respective target tables in the `Gas` schema.\n\n3. **Updating Unique Identifiers**: \n   - Updates are performed to set `UniqueAccountSeqID` and `UniqueMeterSeqID` in the target tables by joining with `Billing.Account` and `Billing.Meter` tables, ensuring these fields are populated where they are initially null.\n\n4. **Setting Billing Dates**: \n   - Additional billing-related dates (`BillCreationDate`, `PostMarkDate`, `DatePaymentDue`, `DateAcceptanceIntoOEC`) are updated in `Gas.UploadAccountBillingAdjustmentGas` by joining with `Common.UploadCycleParameters`.\n\n5. **Updating Paid Adjustment Amount**: \n   - The procedure updates `PaidAdjustmentAmount` in `Gas.UploadAccountBillingAdjustmentGas` using data from a view `Gas.uvw_CalculateUploadAccountBillingNetPaidAdjustment`, ensuring non-zero adjustments are applied to the current billing period.\n\n#### 5. Performance Considerations\n- **Truncation and Bulk Insert**: Truncating tables and performing bulk inserts can be efficient but may cause locking issues if the tables are accessed concurrently by other processes.\n- **Identity Insert Management**: Enabling and disabling identity insert can be resource-intensive and should be managed carefully to avoid performance degradation.\n- **Join Operations**: The procedure involves multiple join operations, which can be costly in terms of performance, especially if the joined tables are large or lack proper indexing.\n\n#### 6. Potential Issues or Risks\n- **Concurrency and Locking**: Truncating tables and performing bulk operations can lead to locking issues, affecting other processes that might need to access these tables concurrently.\n- **Unused Output Parameter**: The `@Status` output parameter is not used within the procedure, which could lead to confusion or errors if expected by calling processes.\n- **Data Integrity**: The procedure assumes that the source tables have valid and complete data. Any discrepancies or missing data in the source tables could lead to incomplete or incorrect data in the target tables.\n- **Error Handling**: The procedure lacks explicit error handling, which could result in unhandled exceptions and incomplete transactions if an error occurs during execution.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3423,
      "api_response_id": "chatcmpl-Byeq2Ct10Qc1tqa0QzXos0t36bLmX"
    },
    "analysis_timestamp": "2025-07-29 09:39:44"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Information_AfterDataTransformationAndProcess",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\tSummary data after transformation\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Information_AfterDataTransformationAndProcess]\r\nAS\r\nBEGIN\r\n\r\n\t/*\r\n\tUpload Data Summary\r\n\t*/\r\n\tSELECT\r\n\t\t'Upload Data Summary' AS DataType,     \r\n\t\tBillingPeriod, CASE WHEN BillingPeriod = BillingPeriodRevision THEN 'Original Account Billing' ELSE 'Adjustment Account Billing' END AS description,\r\n\t\tSUM(TotalRebilledAmount) AS TotalRebilledAmount, MIN(ThermsFactor) AS ThermsFactor, SUM(TotalCanceledAmount) AS TotalCanceledAmount, \r\n\t\tSUM(TotalRebilledAmount + TotalCanceledAmount) AS NetBilledAmount, SUM(TotalTherms) AS TotalRebilledTherms, \r\n\t\tSUM(CAST(ROUND(ThermsFactor * TotalCCF, 0) AS int)) AS DerivedRebilledTherms, SUM(ISNULL(CancelTotalTherms, 0)) AS CancelTotalTherms, \r\n\t\tSUM(TotalTherms + ISNULL(CancelTotalTherms, 0)) AS NetTherms, \r\n\t\tSUM(TotalCCF) AS TotalRebilledCCF, SUM(CAST(ROUND(case when Isnull(ThermsFactor,0) = 0 then 0 else TotalTherms/ThermsFactor end , 0) AS int)) AS DerivedRebilledCCF,\r\n\t\tSUM(ISNULL(CancelTotalCCF, 0)) \r\n\t\tAS CancelTotalCCF, SUM(TotalCCF + ISNULL(CancelTotalCCF, 0)) AS NetCCF\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tGROUP BY BillingPeriod, CASE WHEN BillingPeriod = BillingPeriodRevision THEN 'Original Account Billing' ELSE 'Adjustment Account Billing' END\r\n\tUNION ALL\r\n\tSELECT\r\n\t\t\t'Upload Data Summary' AS DataType,         \r\n\t\t\tBillingPeriod, MIN('Total Account Billing') AS description, \r\n\t\t\tSUM(TotalRebilledAmount) AS TotalRebilledAmount, MIN(ThermsFactor) AS ThermsFactor, SUM(TotalCanceledAmount) AS TotalCanceledAmount, \r\n\t\t\tSUM(TotalRebilledAmount + TotalCanceledAmount) AS NetBilledAmount, SUM(TotalTherms) AS TotalRebilledTherms, \r\n\t\t\tSUM(CAST(ROUND(ThermsFactor * TotalCCF, 0) AS int)) AS DerivedRebilledTherms, SUM(ISNULL(CancelTotalTherms, 0)) AS CancelTotalTherms, \r\n\t\t\tSUM(TotalTherms + ISNULL(CancelTotalTherms, 0)) AS NetTherms, \r\n\t\t\tSUM(TotalCCF) AS TotalRebilledCCF, SUM(CAST(ROUND(case when Isnull(ThermsFactor,0) = 0 then 0 else TotalTherms/ThermsFactor end , 0) AS int)) AS DerivedRebilledCCF,\r\n\t\t\tSUM(ISNULL(CancelTotalCCF, 0)) \r\n\t\t\tAS CancelTotalCCF, SUM(TotalCCF + ISNULL(CancelTotalCCF, 0)) AS NetCCF\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UploadConEdisonAccountBillingAdjustmentGas_1\r\n\tGROUP BY BillingPeriod\r\n\r\n\r\nEND",
      "created": "2025-06-10 21:41:26.610000",
      "last_altered": "2025-06-10 21:41:26.610000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Information_AfterDataTransformationAndProcess",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Information_AfterDataTransformationAndProcess` is designed to generate a summary report of billing data after it has undergone a transformation process. It operates on data from the `ConEd.UploadConEdisonAccountBillingAdjustmentGas` table, aggregating billing information by `BillingPeriod` and categorizing it into \"Original Account Billing\" or \"Adjustment Account Billing\" based on whether the `BillingPeriod` matches the `BillingPeriodRevision`. The procedure outputs two sets of aggregated data: one for each billing type and another for the total account billing.\n\n#### 2. Complexity Level: Medium\nThe complexity level of this stored procedure is medium. It involves multiple aggregate functions, conditional logic, and a UNION ALL operation to combine results from two different queries. The use of conditional logic and multiple aggregate calculations increases the complexity compared to a simple SELECT statement.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on the entire dataset available in the `ConEd.UploadConEdisonAccountBillingAdjustmentGas` table.\n\n#### 4. Business Logic and Workflow\n- **Data Selection and Aggregation**: The procedure selects data from the `ConEd.UploadConEdisonAccountBillingAdjustmentGas` table and performs aggregation based on the `BillingPeriod`.\n- **Conditional Description**: It uses a CASE statement to determine whether the billing is \"Original Account Billing\" or \"Adjustment Account Billing\" based on the comparison between `BillingPeriod` and `BillingPeriodRevision`.\n- **Aggregate Calculations**: It calculates various aggregates such as `TotalRebilledAmount`, `TotalCanceledAmount`, `NetBilledAmount`, `TotalRebilledTherms`, `DerivedRebilledTherms`, `CancelTotalTherms`, `NetTherms`, `TotalRebilledCCF`, `DerivedRebilledCCF`, `CancelTotalCCF`, and `NetCCF`.\n- **Union of Results**: The procedure combines results from two queries using UNION ALL. The first query provides a breakdown by billing type, while the second query provides a total summary for each billing period.\n\n#### 5. Performance Considerations\n- **Table Scans**: If the `ConEd.UploadConEdisonAccountBillingAdjustmentGas` table is large and lacks appropriate indexing, the aggregation operations could lead to full table scans, impacting performance.\n- **Indexing**: Indexes on `BillingPeriod`, `BillingPeriodRevision`, and other frequently queried columns could improve performance by reducing the time required for data retrieval and aggregation.\n- **Resource Usage**: The use of multiple aggregate functions and conditional logic may increase CPU and memory usage, especially if the dataset is large.\n\n#### 6. Potential Issues or Risks\n- **Data Accuracy**: The procedure assumes that `ThermsFactor` is non-zero for calculations involving division. If `ThermsFactor` is zero, the procedure defaults to zero, which may not be the desired behavior.\n- **NULL Handling**: The use of `ISNULL` ensures that NULL values do not disrupt calculations, but it may mask underlying data quality issues.\n- **Scalability**: As the dataset grows, the performance of this procedure may degrade if not optimized with appropriate indexing and query tuning.\n- **Maintenance**: The lack of input parameters means the procedure cannot be easily adapted to filter or customize results without modifying the SQL code directly.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1642,
      "api_response_id": "chatcmpl-ByeqPmyZUEyK6fXyaKk0JozaZLd9G"
    },
    "analysis_timestamp": "2025-07-29 09:39:58"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Information_BeforeDataTransformationAndProcess",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Information_BeforeDataTransformationAndProcess]\r\n\t\r\nAS\r\nBEGIN\r\n\t\r\n\tDECLARE @BillingPeriod BillingPeriod\r\n\r\n\tSELECT @BillingPeriod = BillingPeriod \r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y'\r\n\r\n\r\n\tSELECT \r\n\t\t'Account with invalid billing period' AS DataType,\r\n\t\tAccountNumber, FromDate, ToDate, BillingPeriodRevision, FirstPeriodCanceled\r\n\t\tFROM ConEd.UploadConEdisonAccount\r\n\tWHERE \r\n\tBillingPeriodRevision IS NULL \r\n\tOR BillingPeriodRevision > @BillingPeriod\r\n\tOR FirstPeriodCanceled IS NULL\r\n\r\n\t\r\nEND",
      "created": "2025-06-10 21:41:26.620000",
      "last_altered": "2025-06-10 21:41:26.620000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Information_BeforeDataTransformationAndProcess",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Information_BeforeDataTransformationAndProcess` is designed to perform a validation check on account data before it undergoes further data transformation and processing. It identifies accounts with invalid billing periods by comparing the billing period information in the `ConEd.UploadConEdisonAccount` table against the current processing period defined in the `Billing.ApplicationTimeFrame` table.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, involving a simple selection of a billing period and a subsequent query to identify records that do not meet specific criteria. It does not involve complex logic, multiple joins, or intricate calculations.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates solely on the data available within the database tables `Billing.ApplicationTimeFrame` and `ConEd.UploadConEdisonAccount`.\n\n#### 4. Business Logic and Workflow\n- **Step 1:** The procedure declares a variable `@BillingPeriod` of type `BillingPeriod`.\n- **Step 2:** It assigns the current billing period to `@BillingPeriod` by selecting the `BillingPeriod` from the `Billing.ApplicationTimeFrame` table where `CurrentProcessingPeriod` is marked as 'Y'.\n- **Step 3:** The procedure then queries the `ConEd.UploadConEdisonAccount` table to identify accounts with invalid billing periods. The criteria for invalidity are:\n  - `BillingPeriodRevision` is `NULL`.\n  - `BillingPeriodRevision` is greater than the current billing period (`@BillingPeriod`).\n  - `FirstPeriodCanceled` is `NULL`.\n- **Step 4:** The results are returned with a fixed label 'Account with invalid billing period' for the `DataType` column, along with the account details.\n\n#### 5. Performance Considerations\n- **Indexing:** Ensure that the `Billing.ApplicationTimeFrame` and `ConEd.UploadConEdisonAccount` tables are indexed on columns used in the `WHERE` clause (`CurrentProcessingPeriod`, `BillingPeriodRevision`, `FirstPeriodCanceled`) to optimize query performance.\n- **Data Volume:** The performance may degrade if the `ConEd.UploadConEdisonAccount` table contains a large number of records. Regular maintenance and archiving of old data could help maintain performance.\n- **Execution Plan:** Review the execution plan to ensure that the query is optimized and not performing any unnecessary scans.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity:** If the `Billing.ApplicationTimeFrame` table does not have a row with `CurrentProcessingPeriod` set to 'Y', the procedure will not function correctly as `@BillingPeriod` will remain `NULL`.\n- **Null Handling:** The procedure assumes that `BillingPeriodRevision` and `FirstPeriodCanceled` being `NULL` is an indication of invalid data. Ensure that this aligns with business rules.\n- **Concurrency:** If the `Billing.ApplicationTimeFrame` table is updated concurrently, there might be a risk of reading an inconsistent billing period. Consider using transaction isolation levels if necessary.\n- **Error Handling:** The procedure lacks error handling mechanisms. Consider adding error handling to manage unexpected scenarios, such as missing data or database connectivity issues.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1034,
      "api_response_id": "chatcmpl-Byeqdahcd35HOrRUHO5ITklVz7dhA"
    },
    "analysis_timestamp": "2025-07-29 09:40:20"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Information_BillingSummary",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Information_BillingSummary]\r\nAS\r\nBEGIN\t\r\n\t\r\n\tDECLARE @BillingPeriod BillingPeriod\r\n\tDECLARE @CurrentInvoiceAccountBillingGroupSeqID INT\r\n\r\n\tSET @CurrentInvoiceAccountBillingGroupSeqID = 2\r\n\r\n\tSELECT @BillingPeriod = BillingPeriod \r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y'\r\n\r\n\tDECLARE @therms INT\r\n\tDECLARE @ccf INT\r\n\tDECLARE @billedAmount BillingAmt\r\n\r\n\tSELECT  \r\n\t\t'Account Level Summary' AS DataType,\r\n\t\tSUM(Billing.AccountBillingAdjustmentGas.RevisedBilledAmount) + SUM(Billing.AccountBillingAdjustmentGas.CanceledBilledAmount) TotalBilledAmount,\r\n\t\tSUM(Billing.AccountBillingAdjustmentGas.RevisedCCF) + SUM(Billing.AccountBillingAdjustmentGas.CanceledCCF) TotalCCF,\r\n\t\tSUM(RevisedTherms + CanceledTherms) TotalTherms\r\n\tFROM Billing.AccountBilling\r\n\t\tINNER JOIN Billing.AccountBillingGas \r\n\t\tON \r\n\t\t\tBilling.AccountBilling.AccountBillingSeqid = Billing.AccountBillingGas.AccountBillingSeqid\r\n\t\t\tAND \r\n\t\t\tBilling.AccountBilling.OriginalAccountNumber = Billing.AccountBillingGas.OriginalAccountNumber\r\n\t\t\tAND Billing.AccountBilling.LastPeriodModified = Billing.AccountBillingGas.LastPeriodModified\r\n\t\t\tAND Billing.AccountBilling.BillingPeriodRevision = Billing.AccountBillingGas.BillingPeriodRevision\r\n\t\t\tAND Billing.AccountBilling.BillingPeriod = Billing.AccountBillingGas.BillingPeriod\r\n\t\t\tAND Billing.AccountBilling.UtilityCompanySeqid = Billing.AccountBillingGas.UtilityCompanySeqid\r\n\t\tINNER JOIN Billing.AccountBillingAdjustmentGas \r\n\t\tON \r\n\t\t\tBilling.AccountBillingGas.LastPeriodModified = Billing.AccountBillingAdjustmentGas.BillingPeriod\r\n\t\t\tAND Billing.AccountBillingGas.OriginalAccountNumber = Billing.AccountBillingAdjustmentGas.OriginalAccountNumber\r\n\t\t\tAND Billing.AccountBillingGas.UtilityCompanySeqid = Billing.AccountBillingAdjustmentGas.UtilityCompanySeqid\r\n\t\t\tAND Billing.AccountBillingGas.BillingPeriodRevision = Billing.AccountBillingAdjustmentGas.BillingPeriodRevision\r\n\tWHERE   Billing.AccountBillingAdjustmentGas.BillingPeriod = @BillingPeriod\r\n\t\t\tAND Billing.AccountBilling.CurrentInvoiceAccountBillingGroup = @CurrentInvoiceAccountBillingGroupSeqid\r\n\r\n\t\r\n\t--EXEC\t\r\n\t--\t[Gas].[usp_GetMeterAccountBillingSummary]\r\n\t--\t@UtilityCompanySeqID = 9,\r\n\t--\t@BillingPeriod = @BillingPeriod,\r\n\t--\t@CurrentInvoiceAccountBillingGroupSeqid = 2\r\n\r\nEND",
      "created": "2025-06-10 21:41:26.627000",
      "last_altered": "2025-06-10 21:41:26.627000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Information_BillingSummary",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Information_BillingSummary` is designed to generate a summary of billing information at the account level for a specific billing period. It retrieves and aggregates billing data related to gas consumption, including billed amounts, CCF (hundred cubic feet), and therms, from several tables within the `Billing` schema. The procedure uses a specific billing period and a predefined invoice account billing group sequence ID to filter the data.\n\n#### 2. Complexity Level: Medium\nThe complexity level of this stored procedure is medium. It involves multiple table joins and aggregation operations, which require a good understanding of the database schema and relationships. The procedure also uses variables and conditional logic to determine the billing period, adding to its complexity.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters directly. Instead, it uses internal variables to determine the billing period and the invoice account billing group sequence ID. The lack of input parameters limits its flexibility for different use cases or dynamic execution contexts.\n\n#### 4. Business Logic and Workflow\n- **Variable Declaration and Initialization**: \n  - The procedure declares several variables, including `@BillingPeriod`, `@CurrentInvoiceAccountBillingGroupSeqID`, `@therms`, `@ccf`, and `@billedAmount`.\n  - `@CurrentInvoiceAccountBillingGroupSeqID` is initialized to 2, which is used to filter the billing data.\n  \n- **Determine Current Billing Period**:\n  - The procedure retrieves the current billing period by selecting from the `Billing.ApplicationTimeFrame` table where `CurrentProcessingPeriod` is 'Y'. This value is stored in the `@BillingPeriod` variable.\n\n- **Data Aggregation**:\n  - The procedure performs a complex SQL query that joins three tables: `Billing.AccountBilling`, `Billing.AccountBillingGas`, and `Billing.AccountBillingAdjustmentGas`.\n  - It aggregates the revised and canceled billed amounts, CCF, and therms to produce a total for each metric.\n  - The results are filtered based on the `@BillingPeriod` and `@CurrentInvoiceAccountBillingGroupSeqID`.\n\n- **Commented-Out Execution**:\n  - There is a commented-out section that suggests the procedure might call another stored procedure, `[Gas].[usp_GetMeterAccountBillingSummary]`, with specific parameters. This indicates potential additional functionality that is currently disabled.\n\n#### 5. Performance Considerations\n- **Joins and Aggregations**: The procedure involves multiple joins and aggregations, which can be resource-intensive, especially if the tables involved are large. Proper indexing on join columns and aggregated fields can help improve performance.\n- **Filtering**: The use of specific filters (`@BillingPeriod` and `@CurrentInvoiceAccountBillingGroupSeqID`) helps limit the data processed, which can enhance performance.\n- **Concurrency**: Since the procedure does not use any locking hints or transaction management, it should be evaluated for concurrency issues if executed in a high-transaction environment.\n\n#### 6. Potential Issues or Risks\n- **Hardcoded Values**: The procedure uses a hardcoded value for `@CurrentInvoiceAccountBillingGroupSeqID`, which reduces flexibility and may require changes in the code if the business logic changes.\n- **Lack of Input Parameters**: The absence of input parameters limits the procedure's reusability and adaptability to different contexts or requirements.\n- **Commented-Out Code**: The presence of commented-out code suggests incomplete functionality or potential future changes, which could lead to maintenance challenges.\n- **Error Handling**: The procedure lacks error handling mechanisms, which could lead to unhandled exceptions or failures during execution. Implementing TRY-CATCH blocks could mitigate this risk.\n- **Data Integrity**: The procedure assumes that the data in the joined tables is consistent and correctly related. Any discrepancies in data integrity could lead to incorrect results.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1543,
      "api_response_id": "chatcmpl-Byeqz8Nz5NXYP5N1gqdHoVqYlhi98"
    },
    "analysis_timestamp": "2025-07-29 09:40:34"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Information_ConEdisonRate036Refunds",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Information_ConEdisonRate036Refunds]\r\n\t\r\nAS\r\nBEGIN\r\n\t\r\n\tSELECT  \r\n\t\t'Con Edison Rate 036 Refunds' AS DataType,\r\n        AccountNumber ,\r\n        TariffCode ,\r\n        DeltaNumberOfPeriods ,\r\n        BillingPeriodRevision ,\r\n        BillingPeriod ,\r\n        FromDate ,\r\n        ToDate ,\r\n        RefundCCF ,\r\n        RefundTherms ,\r\n        RefundBilledAmount\r\n\tFROM ConEd.UploadConEdisonRate036Refunds\r\n\r\nEND",
      "created": "2025-06-10 21:41:26.637000",
      "last_altered": "2025-06-10 21:41:26.637000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Information_ConEdisonRate036Refunds",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Information_ConEdisonRate036Refunds` is designed to retrieve and return data related to refunds for Con Edison Rate 036. It selects specific columns from the `ConEd.UploadConEdisonRate036Refunds` table and includes a hardcoded string 'Con Edison Rate 036 Refunds' as a data type identifier in the result set. The procedure does not take any input parameters and is likely used for reporting or auditing purposes to provide insights into refund transactions associated with this specific rate.\n\n#### 2. Complexity Level: Low\nThe complexity level of this stored procedure is low. It performs a straightforward `SELECT` operation without any conditional logic, loops, or complex calculations. The procedure simply retrieves data from a single table and returns it to the caller.\n\n#### 3. Input Parameters\nThis stored procedure does not have any input parameters. It operates on the assumption that all necessary data is contained within the `ConEd.UploadConEdisonRate036Refunds` table and does not require any external input to filter or modify the data being retrieved.\n\n#### 4. Business Logic and Workflow\n- **Business Logic**: The procedure's primary function is to extract refund-related data for Con Edison Rate 036. It provides a predefined set of columns that include account details, tariff codes, billing periods, and refund amounts.\n- **Workflow**:\n  1. The procedure is executed without any input parameters.\n  2. It performs a `SELECT` query on the `ConEd.UploadConEdisonRate036Refunds` table.\n  3. The query retrieves specific columns and includes a constant string 'Con Edison Rate 036 Refunds' as a part of the result set.\n  4. The result set is returned to the caller, which could be an application, report, or another database process.\n\n#### 5. Performance Considerations\n- **Table Size**: The performance of this procedure is directly influenced by the size of the `ConEd.UploadConEdisonRate036Refunds` table. If the table is large, the query might take longer to execute.\n- **Indexes**: Ensuring that the table has appropriate indexes on columns frequently used in queries (e.g., `AccountNumber`, `TariffCode`) can improve performance.\n- **Network Load**: The amount of data returned by the query can affect network performance, especially if the result set is large.\n\n#### 6. Potential Issues or Risks\n- **Data Volume**: If the `ConEd.UploadConEdisonRate036Refunds` table contains a large volume of data, the procedure could lead to high resource consumption and slow response times.\n- **Lack of Filtering**: The absence of input parameters or filtering conditions means that the procedure always returns all rows from the table, which might not be efficient or necessary for all use cases.\n- **Data Accuracy**: The procedure assumes that the data in the `ConEd.UploadConEdisonRate036Refunds` table is accurate and up-to-date. Any issues with data integrity in the table will directly affect the output of the procedure.\n- **Security**: Without input parameters or filtering, the procedure could potentially expose sensitive data if not properly secured or if executed by unauthorized users. Proper permissions should be enforced to mitigate this risk.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1039,
      "api_response_id": "chatcmpl-ByerDyEMkgKRsEZlqOgnwsefOx09e"
    },
    "analysis_timestamp": "2025-07-29 09:40:53"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Information_ExchangeData",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Information_ExchangeData]\r\nAS\r\nBEGIN\r\n\r\n\tSELECT \r\n\t\t'Exchange Records' AS DataType,\r\n\t\tCurrentAccountNumber ,\r\n        CurrentMeterNumber ,\r\n        ExchangeCode ,\r\n        AccountStatus ,\r\n        AccountEffectiveTurnOn ,\r\n        AccountEffectiveTurnOff ,\r\n        SalesType ,\r\n        BillingCycle ,\r\n        TODAccount ,\r\n        TripNumber ,\r\n        AccountName ,\r\n        AccountAddress ,\r\n        Borough ,\r\n        MeterStatus ,\r\n        MeterEffectiveTurnOnDate ,\r\n        MeterEffectiveTurnOffDate ,\r\n        MeterType ,\r\n        MeterNumberofDials ,\r\n        MeterConstant        \r\n\tFROM Gas.UploadCommonElectronicGasExchangeData\r\n\tORDER BY CurrentAccountNumber, CurrentMeterNumber\r\n\r\n\tIF(EXISTS(SELECT * \r\n\tFROM Gas.UploadAccountBillingAdjustmentGas\r\n\twhere AccountSeqid IS NULL))\r\n\tBEGIN\t\t\r\n\t\tSELECT 'Unknown Accounts' AS DataType, OriginalAccountNumber, *\r\n\t\tFROM Gas.UploadAccountBillingAdjustmentGas\r\n\t\twhere AccountSeqid IS NULL\r\n\tEND  \r\n\r\n\r\n\tIF(EXISTS(SELECT * \r\n\tFROM Gas.UploadMeterBillingAdjustmentGas\r\n\twhere AccountExchangeMeterTrackSeqid IS NULL))\r\n\tBEGIN\t\t\r\n\t\tSELECT 'Unknown Meters' AS DataType, OriginalAccountNumber, OriginalMeterNumber, *\t \r\n\t\tFROM Gas.UploadMeterBillingAdjustmentGas\r\n\t\twhere AccountExchangeMeterTrackSeqid IS NULL\r\n\tEND  \r\n\r\nEND",
      "created": "2025-06-10 21:41:26.650000",
      "last_altered": "2025-06-10 21:41:26.650000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Information_ExchangeData",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Information_ExchangeData` is designed to retrieve and display data related to gas exchange records and identify any discrepancies or missing information in account and meter billing adjustments. It performs three main tasks: \n1. It selects and orders records from the `Gas.UploadCommonElectronicGasExchangeData` table.\n2. It checks for any records in the `Gas.UploadAccountBillingAdjustmentGas` table where the `AccountSeqid` is `NULL` and retrieves those records.\n3. It checks for any records in the `Gas.UploadMeterBillingAdjustmentGas` table where the `AccountExchangeMeterTrackSeqid` is `NULL` and retrieves those records.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, involving simple `SELECT` statements and conditional checks using `IF EXISTS`. It does not involve complex logic, loops, or transactions, which keeps the complexity low.\n\n#### 3. Input Parameters\nThe stored procedure does not take any input parameters. It operates on predefined tables within the `Gas` schema.\n\n#### 4. Business Logic and Workflow\n- **Data Retrieval**: The procedure begins by selecting data from the `Gas.UploadCommonElectronicGasExchangeData` table. It retrieves various fields related to account and meter information and orders the results by `CurrentAccountNumber` and `CurrentMeterNumber`.\n- **Data Validation**: It then checks for records in the `Gas.UploadAccountBillingAdjustmentGas` table where `AccountSeqid` is `NULL`. If such records exist, it selects these records, indicating they are \"Unknown Accounts.\"\n- **Meter Validation**: Similarly, it checks for records in the `Gas.UploadMeterBillingAdjustmentGas` table where `AccountExchangeMeterTrackSeqid` is `NULL`. If such records exist, it selects these records, indicating they are \"Unknown Meters.\"\n\n#### 5. Performance Considerations\n- **Indexing**: The performance of the `SELECT` statements, especially those with `ORDER BY` and `WHERE` clauses, can be improved if the relevant columns (`CurrentAccountNumber`, `CurrentMeterNumber`, `AccountSeqid`, `AccountExchangeMeterTrackSeqid`) are indexed.\n- **Table Scans**: The `EXISTS` checks may result in table scans if the columns used in the `WHERE` clause are not indexed, potentially impacting performance on large datasets.\n- **Concurrency**: As the procedure does not modify data, it is less likely to cause locking issues, making it suitable for concurrent execution.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: The procedure assumes that `NULL` values in `AccountSeqid` and `AccountExchangeMeterTrackSeqid` indicate unknown accounts or meters. If `NULL` values are used for other purposes, this could lead to incorrect reporting.\n- **Scalability**: As the dataset grows, the lack of input parameters and filtering options may lead to performance degradation. Introducing parameters to filter data could improve scalability.\n- **Error Handling**: The procedure lacks error handling mechanisms. If any of the tables are missing or if there are permission issues, the procedure will fail without providing meaningful feedback.\n- **Security**: Ensure that appropriate permissions are set for accessing the tables involved to prevent unauthorized data access.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1200,
      "api_response_id": "chatcmpl-ByerWASbZDqhAx64X7Y5XzLz04Sl0"
    },
    "analysis_timestamp": "2025-07-29 09:41:11"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Information_MeterBillingWithoutAccountBilling",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Information_MeterBillingWithoutAccountBilling]\r\n\t\r\nAS\r\nBEGIN\r\n\t\r\n\tSELECT  \r\n\t\t\t'Meter Billing Without Account Billing' AS DataType,\r\n\t\t\tMeterBillingWithoutAccountBillingSeqID ,\r\n\t        BillingPeriod ,\r\n\t        BillingPeriodRevision ,\r\n\t        AccountNumber ,\r\n\t        MeterNumber ,\r\n\t        FromDate ,\r\n\t        ToDate ,\r\n\t        FromReading ,\r\n\t        ToReading ,\r\n\t        CCF FROM \r\n\tconed.UploadConEdisonInfoMeterBillingWithoutAccountBilling\r\n\r\nEND",
      "created": "2025-06-10 21:41:26.660000",
      "last_altered": "2025-06-10 21:41:26.660000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Information_MeterBillingWithoutAccountBilling",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Information_MeterBillingWithoutAccountBilling` is designed to retrieve data from a table named `UploadConEdisonInfoMeterBillingWithoutAccountBilling` within the `coned` schema. The procedure selects and returns a set of columns related to meter billing information that does not have corresponding account billing data. The output includes details such as billing periods, account numbers, meter numbers, and readings.\n\n#### 2. Complexity Level: Low\nThe complexity level of this stored procedure is low. It consists of a straightforward `SELECT` statement without any conditional logic, loops, or complex operations. The procedure simply retrieves data from a single table and does not involve any input parameters or dynamic SQL.\n\n#### 3. Input Parameters\nThis stored procedure does not have any input parameters. It executes a predefined query that retrieves all records from the specified table without filtering or modifying the data based on external inputs.\n\n#### 4. Business Logic and Workflow\n- **Business Logic**: The procedure's primary function is to extract and present data related to meter billing entries that lack corresponding account billing records. This might be used for auditing, reporting, or data validation purposes.\n- **Workflow**: \n  1. The procedure is executed without any parameters.\n  2. It performs a `SELECT` operation on the `UploadConEdisonInfoMeterBillingWithoutAccountBilling` table.\n  3. The query retrieves specific columns: `MeterBillingWithoutAccountBillingSeqID`, `BillingPeriod`, `BillingPeriodRevision`, `AccountNumber`, `MeterNumber`, `FromDate`, `ToDate`, `FromReading`, `ToReading`, and `CCF`.\n  4. The result set is returned to the caller with an additional column `DataType` that contains a static string value 'Meter Billing Without Account Billing'.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the `UploadConEdisonInfoMeterBillingWithoutAccountBilling` table is appropriately indexed, especially if it contains a large number of records. Indexes on columns frequently used in queries can improve retrieval speed.\n- **Table Size**: The performance of this procedure is directly related to the size of the `UploadConEdisonInfoMeterBillingWithoutAccountBilling` table. Large datasets may lead to longer execution times.\n- **Network Traffic**: Since the procedure returns all records from the table, consider the volume of data being transmitted, which could impact network performance if the dataset is large.\n\n#### 6. Potential Issues or Risks\n- **Data Volume**: Without any filtering or pagination, the procedure may return a large dataset, which could lead to performance bottlenecks or excessive memory usage on the client side.\n- **Lack of Parameters**: The absence of input parameters means the procedure cannot be customized for specific queries, limiting its flexibility and potentially leading to inefficient data retrieval if only a subset of data is needed.\n- **Static DataType Value**: The `DataType` column is hardcoded with a static string, which might not be useful if the context of the data changes or if different categorizations are needed in the future.\n- **Schema Changes**: Any changes to the structure of the `UploadConEdisonInfoMeterBillingWithoutAccountBilling` table (e.g., column renames or deletions) could break the procedure, necessitating updates to the SQL code.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1049,
      "api_response_id": "chatcmpl-ByeroEXz2vG38YgIg0SurJa3WRGtl"
    },
    "analysis_timestamp": "2025-07-29 09:41:29"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Information_NetZeroTransactions",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Information_NetZeroTransactions]\t\r\nAS\r\nBEGIN\r\n\t\r\n\t-- return net zero transaction record\r\n\tSELECT  \r\n\t\t\t'Net Zero Transaction' AS DataType,\r\n\t\t\tBillingPeriod ,\r\n\t\t\tBillingPeriodRevision ,\r\n\t\t\tAccountNumber ,\r\n\t\t\tUploadConEdisonAccountSeqid ,\r\n\t\t\tUploadConEdisonCancellationSeqid ,\r\n\t\t\tTherms ,\r\n\t\t\tCancellationTherms ,\r\n\t\t\tCCF ,\r\n\t\t\tCancellationCCF ,\r\n\t\t\tBilledAmount ,\r\n\t\t\tCancellationBilledAmount\r\n\tFROM ConEd.UploadConEdisonNetZeroTransactions\r\n\tORDER BY AccountNumber\r\n\r\n\r\n\tSELECT \t\r\n\t'Account Transaction Record With Net-Zero Account' AS DataType,\r\n\t* \r\n\tFROM \r\n\tConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tWHERE OriginalAccountNumber IN \r\n\t(\r\n\t\tSELECT AccountNumber from ConEd.UploadConEdisonNetZeroTransactions\r\n\t)\r\n\r\n\tSELECT \r\n\t'Meter Transaction Record with Net-Zero Account' AS DataType,\r\n\t* \r\n\tFROM\r\n\tConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tWHERE OriginalAccountNumber IN \r\n\t(\r\n\t\tSELECT AccountNumber from ConEd.UploadConEdisonNetZeroTransactions\r\n\t)\r\n\r\n\r\nEND",
      "created": "2025-06-10 21:41:26.673000",
      "last_altered": "2025-06-10 21:41:26.673000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Information_NetZeroTransactions",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Information_NetZeroTransactions` is designed to retrieve and present data related to \"Net Zero Transactions\" from a SQL Server database. It queries three different tables within the `ConEd` schema: `UploadConEdisonNetZeroTransactions`, `UploadConEdisonAccountBillingAdjustmentGas`, and `UploadConEdisonMeterBillingAdjustmentGas`. The procedure returns three result sets, each prefixed with a descriptive `DataType` column to indicate the nature of the data being returned.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, involving simple SELECT statements with basic filtering and ordering. There are no complex joins, subqueries, or conditional logic that would increase its complexity.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on the entire dataset available in the specified tables.\n\n#### 4. Business Logic and Workflow\n- **First Query**: Retrieves all records from the `UploadConEdisonNetZeroTransactions` table. It selects specific columns related to billing and transaction details and orders the results by `AccountNumber`.\n- **Second Query**: Fetches records from the `UploadConEdisonAccountBillingAdjustmentGas` table where the `OriginalAccountNumber` matches any `AccountNumber` from the `UploadConEdisonNetZeroTransactions` table. This query returns all columns from the table.\n- **Third Query**: Similar to the second query, it retrieves records from the `UploadConEdisonMeterBillingAdjustmentGas` table where the `OriginalAccountNumber` matches any `AccountNumber` from the `UploadConEdisonNetZeroTransactions` table, returning all columns.\n\nEach query is designed to provide a different perspective on the \"Net Zero Transactions,\" focusing on account and meter adjustments related to these transactions.\n\n#### 5. Performance Considerations\n- **Indexes**: Ensure that the `AccountNumber` column in `UploadConEdisonNetZeroTransactions` and the `OriginalAccountNumber` columns in the other two tables are indexed to optimize the IN clause operations.\n- **Data Volume**: If the tables contain a large number of records, the performance might degrade due to the full table scans and the IN clause. Consider using JOINs if applicable, as they might be more efficient with proper indexing.\n- **Network Traffic**: The procedure returns all columns from two of the tables, which could lead to high network traffic if the tables have many columns or large data types.\n\n#### 6. Potential Issues or Risks\n- **Scalability**: As the data grows, the use of the IN clause with subqueries might become a bottleneck. Consider refactoring to use JOINs for better scalability.\n- **Data Integrity**: The procedure assumes that the `AccountNumber` in `UploadConEdisonNetZeroTransactions` will always have corresponding entries in the other two tables. If this assumption is incorrect, it might lead to incomplete data retrieval.\n- **Lack of Parameters**: Without input parameters, the procedure retrieves all data indiscriminately, which might not be efficient or necessary for all use cases. Adding parameters to filter by date range or specific accounts could improve usability and performance.\n- **Security**: Ensure that appropriate permissions are set on the tables and the stored procedure to prevent unauthorized access to sensitive billing information.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1180,
      "api_response_id": "chatcmpl-Byes6bIn9AW5MIHCZ4yBOBgtS3IPB"
    },
    "analysis_timestamp": "2025-07-29 09:41:47"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Information_PreloadSummary",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\tInformation query after the data loaded into the preload table\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Information_PreloadSummary]\r\n\r\nAS\r\nBEGIN\r\n\t\r\n\tDECLARE @BillingPeriod BillingPeriod\r\n\t\r\n\tSELECT @BillingPeriod = BillingPeriod \r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y'\r\n\r\n\t/*\r\n\tPreload summary information\r\n\t*/\r\n\tSELECT \r\n\t\t'Preload Summary' AS DataType,\r\n\t\tacc.BilledAmount + AccCancel.BilledAmount AS BilledAmount, \r\n\t\tacc.Therms + AccCancel.Therms AS Therms, \r\n\t\tacc.CCF + AccCancel.CCF AS CCF\r\n\tFROM \r\n\t(\r\n\t\tSELECT \r\n\t\t\tSUM(CAST(CAST(dbo.ConvertOverpunch(BilledAmount) AS int) * .01 AS money)) AS BilledAmount, \r\n\t\t\tSUM(CAST(dbo.ConvertOverpunch(Therms) AS int)) AS Therms    ,\r\n\t\t\tSUM(CAST(dbo.ConvertOverpunch(CCF) AS int)) AS CCF    \r\n\t\tFROM ConEd.UploadConEdisonAccountPreload\r\n\t) AS Acc,\r\n\t(\r\n\t\tSELECT \r\n\t\tSUM(CAST(CAST(dbo.ConvertOverpunch(BilledAmount) AS int) * .01 AS money)) AS BilledAmount, \r\n\t\tSUM(CAST(dbo.ConvertOverpunch(Therms) AS int)) AS Therms    ,\r\n\t\tSUM(CAST(dbo.ConvertOverpunch(CCF) AS int)) AS CCF    \r\n\t\tFROM ConEd.UploadConEdisonCancellationPreload\r\n\t) AS AccCancel\r\n\r\n\r\n\t\r\n\r\nEND",
      "created": "2025-06-10 21:41:26.683000",
      "last_altered": "2025-06-10 21:41:26.683000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Information_PreloadSummary",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Information_PreloadSummary` is designed to generate a summary report of billing data that has been preloaded into two tables: `UploadConEdisonAccountPreload` and `UploadConEdisonCancellationPreload`. It calculates the total billed amount, therms, and CCF (hundred cubic feet) by summing the values from these tables. The procedure also retrieves the current billing period from the `Billing.ApplicationTimeFrame` table, although this value is not used further in the procedure.\n\n#### 2. Complexity Level: Low\nThe procedure is relatively straightforward, involving simple data retrieval and aggregation operations. It does not include any complex logic, conditional branching, or iterative processes.\n\n#### 3. Input Parameters\nThe stored procedure does not accept any input parameters. It operates on the assumption that the necessary data is available in the specified tables and that the current processing period is marked in the `Billing.ApplicationTimeFrame` table.\n\n#### 4. Business Logic and Workflow\n- The procedure begins by declaring a variable `@BillingPeriod` of type `BillingPeriod`.\n- It retrieves the current billing period from the `Billing.ApplicationTimeFrame` table where `CurrentProcessingPeriod` is 'Y'. This value is stored in the `@BillingPeriod` variable but is not used further in the procedure.\n- The main logic involves two subqueries:\n  - The first subquery aggregates data from the `UploadConEdisonAccountPreload` table, converting and summing the `BilledAmount`, `Therms`, and `CCF` fields.\n  - The second subquery performs similar operations on the `UploadConEdisonCancellationPreload` table.\n- The results of these subqueries are combined to produce a single row of output, which sums the corresponding fields from both subqueries to provide a total `BilledAmount`, `Therms`, and `CCF`.\n- The output is labeled as 'Preload Summary' under the `DataType` column.\n\n#### 5. Performance Considerations\n- The procedure performs aggregation operations on potentially large tables, which could impact performance if the tables contain a significant amount of data.\n- The use of the `dbo.ConvertOverpunch` function suggests that the data may require conversion from a specific format, which could add overhead depending on the complexity and efficiency of this function.\n- The procedure does not use any indexes explicitly, but performance could be improved if the underlying tables are indexed appropriately on the columns involved in the aggregation.\n\n#### 6. Potential Issues or Risks\n- The procedure retrieves the current billing period but does not utilize this information, which may indicate incomplete logic or a missed requirement.\n- The reliance on the `dbo.ConvertOverpunch` function for data conversion introduces a dependency that could lead to errors if the function is not implemented correctly or if it is modified without considering its impact on this procedure.\n- The procedure assumes that there is always a single current processing period marked with 'Y'. If this assumption is violated (e.g., multiple periods marked as current), it could lead to unexpected behavior or errors.\n- The lack of input parameters and hardcoded logic limits the flexibility and reusability of the procedure for different contexts or datasets.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1235,
      "api_response_id": "chatcmpl-ByesPS1fNxQnpUvWJthVcZssPLA6b"
    },
    "analysis_timestamp": "2025-07-29 09:42:03"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Information_SpannedAccountRecords",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Information_SpannedAccountRecords]\r\n\t\r\nAS\r\nBEGIN\r\n\t\r\n\tSELECT  \r\n\t\t\t'Spanned Account Records' AS DataType,\r\n\t        AccountNumber ,\r\n\t        BillingPeriod ,\r\n\t        BillingPeriodRevision ,\r\n\t        FirstPeriodCanceled ,\r\n\t        FromDate ,\r\n\t        ToDate ,\r\n\t        BilledAmount ,\r\n\t        AveragePreviousBalance ,\r\n\t        Therms ,\r\n\t        ThermFactor ,\r\n\t        CCF ,\r\n\t        TariffCode ,\r\n\t        DeltaNumberOfPeriods ,\r\n\t        BillingPeriodDays ,\r\n\t        FacilityName ,\r\n\t        ServiceAddress \r\n\tFROM \r\n\t[ConEd].[UploadConEdisonAccountTempSummarySpanned]\r\n\tORDER BY AccountNumber\r\n\r\nEND",
      "created": "2025-06-10 21:41:26.693000",
      "last_altered": "2025-06-10 21:41:26.693000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Information_SpannedAccountRecords",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Information_SpannedAccountRecords` is designed to retrieve and return a set of records from a table named `UploadConEdisonAccountTempSummarySpanned` within the `ConEd` schema. The procedure selects various columns related to account billing information and orders the results by `AccountNumber`. The output includes details such as billing periods, billed amounts, and service addresses, with a constant string 'Spanned Account Records' added as a `DataType` column to each row.\n\n#### 2. Complexity Level: Low\nThe complexity level of this stored procedure is low. It performs a straightforward `SELECT` operation without any input parameters, conditional logic, or complex data transformations. The procedure simply retrieves and orders data from a single table.\n\n#### 3. Input Parameters\nThis stored procedure does not have any input parameters. It operates on a fixed dataset from the `UploadConEdisonAccountTempSummarySpanned` table and does not require any external input to execute.\n\n#### 4. Business Logic and Workflow\n- **Business Logic**: The procedure's primary function is to extract and present data from the `UploadConEdisonAccountTempSummarySpanned` table. It adds a constant value 'Spanned Account Records' to each row under the `DataType` column, which could be used for categorization or identification purposes in the context of larger data processing or reporting workflows.\n- **Workflow**: \n  1. The procedure begins execution without any parameters.\n  2. It performs a `SELECT` query on the `UploadConEdisonAccountTempSummarySpanned` table.\n  3. The query retrieves specific columns related to account billing and service information.\n  4. The results are ordered by `AccountNumber`.\n  5. The procedure ends by returning the ordered dataset to the caller.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the `AccountNumber` column is indexed to optimize the `ORDER BY` operation, especially if the table contains a large number of records.\n- **Table Size**: The performance of this procedure is directly related to the size of the `UploadConEdisonAccountTempSummarySpanned` table. Larger datasets may require additional resources and time to process.\n- **Network Traffic**: Since the procedure returns all rows from the table, consider the impact on network traffic if the table is large and the procedure is called frequently.\n\n#### 6. Potential Issues or Risks\n- **Data Volume**: If the table contains a large volume of data, the procedure could lead to high memory usage and longer execution times, potentially affecting database performance.\n- **Lack of Filtering**: The absence of input parameters or filtering criteria means that every execution returns the entire dataset, which may not be efficient or necessary for all use cases.\n- **Schema Changes**: Any changes to the structure of the `UploadConEdisonAccountTempSummarySpanned` table, such as renaming columns or altering data types, could break the procedure if not updated accordingly.\n- **Security**: Ensure that appropriate permissions are set for accessing the `ConEd` schema and executing this procedure to prevent unauthorized data access.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1042,
      "api_response_id": "chatcmpl-ByesesdMAxoKtYB7cv3kD5dj2fgJK"
    },
    "analysis_timestamp": "2025-07-29 09:42:24"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Process_GetCurrentStep",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Process_GetCurrentStep]\r\n\t@StepGroup INT\r\nAS\r\nBEGIN\r\n\r\nSELECT * FROM \r\nConEd.ConEdDataUploadStep\r\nWHERE ConedUploadStepSeqID = \r\n(\r\n\tSELECT MIN(ConedUploadStepSeqID)\r\n\tFROM ConEd.ConEdDataUploadStep\r\n\tWHERE StepGroupID = @StepGroup\r\n\tAND IsCompleted = 0\r\n)\r\n\r\nEND",
      "created": "2025-06-10 21:41:26.703000",
      "last_altered": "2025-06-10 21:41:26.703000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@StepGroup",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "usp_Process_GetCurrentStep",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Process_GetCurrentStep` is designed to retrieve the current step in a process from the `ConEd.ConEdDataUploadStep` table. It identifies the step with the smallest sequence ID (`ConedUploadStepSeqID`) within a specified group (`StepGroupID`) that has not yet been completed (`IsCompleted = 0`). This procedure is useful for tracking the progress of a multi-step process and determining the next step that needs to be executed.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, involving a simple SELECT query with a subquery to determine the minimum sequence ID of incomplete steps within a specified group. There are no complex joins, conditional logic, or iterative processes involved.\n\n#### 3. Input Parameters\n- `@StepGroup INT`: This parameter specifies the group of steps from which the procedure should retrieve the current step. It is used to filter the records in the `ConEd.ConEdDataUploadStep` table to those belonging to the specified group.\n\n#### 4. Business Logic and Workflow\n- The procedure begins by executing a SELECT statement to retrieve all columns from the `ConEd.ConEdDataUploadStep` table.\n- It filters the results to include only the row with the minimum `ConedUploadStepSeqID` for the specified `StepGroupID` where `IsCompleted` is 0.\n- The subquery `(SELECT MIN(ConedUploadStepSeqID) FROM ConEd.ConEdDataUploadStep WHERE StepGroupID = @StepGroup AND IsCompleted = 0)` identifies the smallest sequence ID of the incomplete steps within the specified group.\n- The main query then selects the row corresponding to this sequence ID, effectively retrieving the next step to be processed.\n\n#### 5. Performance Considerations\n- The performance of this procedure largely depends on the indexing of the `ConEd.ConEdDataUploadStep` table. An index on `StepGroupID` and `ConedUploadStepSeqID` would optimize the subquery and main query, respectively.\n- The procedure performs well for small to moderately sized datasets. However, as the size of the `ConEd.ConEdDataUploadStep` table grows, the performance may degrade if appropriate indexing is not in place.\n- The use of `MIN` in the subquery is efficient for finding the smallest value but could become a bottleneck if the dataset is large and not indexed.\n\n#### 6. Potential Issues or Risks\n- If there are no incomplete steps (`IsCompleted = 0`) for the specified `StepGroupID`, the subquery will return NULL, and the main query will return an empty result set. This behavior should be handled appropriately by the calling application to avoid unexpected results.\n- The procedure assumes that `ConedUploadStepSeqID` is unique within each `StepGroupID`. If this assumption is violated, the procedure may return multiple rows, which could lead to ambiguity in determining the current step.\n- Changes to the schema of the `ConEd.ConEdDataUploadStep` table, such as renaming columns or altering data types, could break the procedure if not updated accordingly.\n- The procedure does not include error handling or logging, which could make troubleshooting difficult if issues arise during execution.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 997,
      "api_response_id": "chatcmpl-ByeszsVz24AXoT4u8hQ3UmAJfGo8Q"
    },
    "analysis_timestamp": "2025-07-29 09:42:41"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Process_ResetProcess",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Process_ResetProcess]\r\n\t\r\nAS\r\nBEGIN\r\n\r\n\tDECLARE @CurrentBillingPeriod BillingPeriod\r\n\t\r\n\tSELECT @CurrentBillingPeriod = MAX(BillingPeriod) FROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y'\r\n\r\n\t-- skip reset if current period has been processed\r\n\tIF(EXISTS(SELECT * \r\n\t\tFROM ConEd.ConEdDataUploadStep \r\n\t\tWHERE (CurrentBillingPeriod <> @CurrentBillingPeriod)\r\n\t\tOR (CurrentBillingPeriod = @CurrentBillingPeriod AND IsCompleted = 0)\r\n\t\t))\r\n\tbegin\r\n\r\n\t\t-- reset steps table for the current \r\n\t\tUPDATE ConEd.ConEdDataUploadStep\r\n\t\tSET CurrentBillingPeriod = @CurrentBillingPeriod,\r\n\t\t\tisCompleted = 0,\r\n\t\t\tisErrorTriggered = 0,\r\n\t\t\tStepStartedBy = NULL,\r\n\t\t\tDateStepStartedAt = NULL\r\n\tend\r\nEND",
      "created": "2025-06-10 21:41:26.710000",
      "last_altered": "2025-06-10 21:41:26.710000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Process_ResetProcess",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Process_ResetProcess` is designed to reset the status of data upload steps for the current billing period within a specific application. It identifies the current billing period from the `Billing.ApplicationTimeFrame` table and updates the `ConEd.ConEdDataUploadStep` table to reset certain fields if the current billing period has not been fully processed.\n\n#### 2. Complexity Level: Low\nThe procedure is relatively straightforward, involving a simple selection of the current billing period, a conditional check, and an update operation. It does not involve complex logic, multiple joins, or intricate data manipulations.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates based on the data available in the `Billing.ApplicationTimeFrame` and `ConEd.ConEdDataUploadStep` tables.\n\n#### 4. Business Logic and Workflow\n- **Determine Current Billing Period**: The procedure begins by declaring a variable `@CurrentBillingPeriod` of type `BillingPeriod`. It assigns the maximum billing period from the `Billing.ApplicationTimeFrame` table where `CurrentProcessingPeriod` is 'Y'. This identifies the current billing period that is being processed.\n  \n- **Conditional Check**: The procedure checks if there are any records in the `ConEd.ConEdDataUploadStep` table where the `CurrentBillingPeriod` is not equal to the determined current billing period or if the current billing period is equal but the step is not completed (`IsCompleted = 0`).\n\n- **Reset Operation**: If the condition is met, the procedure updates the `ConEd.ConEdDataUploadStep` table for the current billing period. It resets the `isCompleted` and `isErrorTriggered` flags to 0, and clears the `StepStartedBy` and `DateStepStartedAt` fields, effectively resetting the status of the steps for the current billing period.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the `BillingPeriod` and `CurrentProcessingPeriod` columns in the `Billing.ApplicationTimeFrame` table, as well as the `CurrentBillingPeriod` and `IsCompleted` columns in the `ConEd.ConEdDataUploadStep` table, are indexed to optimize the SELECT and UPDATE operations.\n  \n- **Concurrency**: The procedure does not include any explicit transaction handling or locking mechanisms, which could lead to concurrency issues if multiple instances of this procedure are executed simultaneously.\n\n- **Scalability**: The procedure's performance may degrade if the `ConEd.ConEdDataUploadStep` table grows significantly, especially if the condition check involves a large number of records.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: The procedure assumes that the `BillingPeriod` data type and the logic for determining the current billing period are correctly implemented. Any discrepancies in the data could lead to incorrect resets.\n  \n- **Concurrency Issues**: Without explicit transaction management, there is a risk of race conditions if multiple processes attempt to reset the steps simultaneously.\n\n- **Error Handling**: The procedure lacks error handling mechanisms. If any part of the procedure fails, it could leave the data in an inconsistent state without any notification or rollback.\n\n- **Assumptions on Data State**: The procedure assumes that the `ConEd.ConEdDataUploadStep` table will always have entries for the current billing period. If this assumption is violated, the procedure may not perform as expected.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1135,
      "api_response_id": "chatcmpl-ByetGkin6FmdeGsJn56Zui50Hm5hf"
    },
    "analysis_timestamp": "2025-07-29 09:42:59"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_1_LoadRawData",
      "definition": "CREATE PROCEDURE [ConEd].[usp_Upload_1_LoadRawData]\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @ssispath AS VARCHAR(1000), @cmd VARCHAR(1000);\r\n\r\n\t/***************** Upload ConEdison Raw Data *******************/\r\n\tSET @ssispath = '\\\\dcas.nycnet\\dfs\\shr_ec3_archive1$\\SSISpackage\\SSISDataUpload\\ConEdison.dtsx';\r\n\tSET @cmd = 'dtexec /f \"' + @ssispath + '\"';\r\n\tSET @cmd = @cmd + ' /SET \\Package.Variables[User::DatabaseName].Properties[Value];\"' + DB_NAME() + '\"';\r\n\tSET @cmd = @cmd + ' /SET \\Package.Variables[User::ServerName].Properties[Value];\"' + CAST(SERVERPROPERTY('servername') AS VARCHAR(50)) + '\"';\r\n\r\n\tEXEC sp_configure 'show advanced options', 1;\r\n\tRECONFIGURE;\r\n\tEXEC sp_configure 'xp_cmdshell', 1;\r\n\tRECONFIGURE;\r\n\tEXEC xp_cmdshell @cmd;\r\n\tEXEC sp_configure 'show advanced options', 1;\r\n\tRECONFIGURE;\r\n\tEXEC sp_configure 'xp_cmdshell', 0;\r\n\tRECONFIGURE;\r\n\t/************************* End Preload Data *********************/\r\n\t\r\n\t-- check if current period has been processed\r\n\tEXEC ConEd.usp_Validation_CheckCurrentProcessingPeriod;\r\n\r\n\tDELETE FROM ConEd.UploadConEdisonMeterPreload WHERE AccountNumber LIKE '%495018303000024%';\r\n\tDELETE FROM ConEd.UploadConEdisonAccountPreload WHERE AccountNumber ='495018303000024';\r\n\tDELETE FROM ConEd.UploadConEdisonCancellationPreload WHERE AccountNumber ='495018303000024';\r\n\r\n\tDELETE FROM ConEd.UploadConEdisonMeterPreload WHERE AccountNumber LIKE '%295018365200019%';\r\n\tDELETE FROM ConEd.UploadConEdisonAccountPreload WHERE AccountNumber ='295018365200019';\r\n\tDELETE FROM ConEd.UploadConEdisonCancellationPreload WHERE AccountNumber ='295018365200019';\r\n\r\n\t-- validate preload data summary\r\n\tEXEC coned.usp_Validation_CheckRawDataTotal;\r\nEND;",
      "created": "2025-06-10 21:41:26.720000",
      "last_altered": "2025-06-10 21:41:26.720000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_1_LoadRawData",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_1_LoadRawData` is designed to automate the process of loading raw data from ConEdison into a SQL Server database. It achieves this by executing an SSIS (SQL Server Integration Services) package using the `xp_cmdshell` command. The procedure also includes steps to validate the current processing period, clean up specific records from preload tables, and validate the data summary.\n\n#### 2. Complexity Level: Medium\nThe complexity level of this stored procedure is considered medium due to the following factors:\n- It involves executing an external SSIS package using `xp_cmdshell`, which requires enabling and configuring advanced options.\n- It includes multiple steps for data validation and cleanup.\n- It interacts with several database objects and system configurations.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates based on the current database context and server environment.\n\n#### 4. Business Logic and Workflow\n- **SSIS Package Execution**: The procedure constructs a command to execute an SSIS package located on a network path. The package path and execution command are dynamically built using the current database name and server name.\n- **Configuration Changes**: The procedure temporarily enables the `xp_cmdshell` feature to allow the execution of the SSIS package. This involves changing server configurations to show advanced options and enable `xp_cmdshell`.\n- **Data Cleanup**: Specific records are deleted from three preload tables based on hardcoded account numbers. This step ensures that certain unwanted or erroneous data is removed before further processing.\n- **Validation**: The procedure calls another stored procedure to check if the current processing period has been handled and to validate the raw data totals.\n\n#### 5. Performance Considerations\n- **Use of `xp_cmdshell`**: Enabling `xp_cmdshell` can have security implications and may affect performance if not managed properly. It is crucial to ensure that this feature is disabled after use.\n- **Network Dependency**: The SSIS package is located on a network path, which could introduce latency or failure points if the network is slow or unavailable.\n- **Hardcoded Values**: The use of hardcoded account numbers for deletion could lead to inefficiencies if the list of accounts to be deleted changes frequently.\n\n#### 6. Potential Issues or Risks\n- **Security Risks**: Enabling `xp_cmdshell` poses a security risk as it allows execution of shell commands. It is essential to ensure that only authorized users can execute this procedure.\n- **Hardcoded Account Numbers**: The procedure uses hardcoded account numbers for deletion, which reduces flexibility and requires manual updates if the account numbers change.\n- **Error Handling**: The procedure lacks explicit error handling, which could lead to unhandled exceptions or failures during SSIS package execution or data operations.\n- **Configuration Changes**: Frequent changes to server configurations (enabling/disabling `xp_cmdshell`) could lead to configuration drift or unintended side effects if not properly managed.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1279,
      "api_response_id": "chatcmpl-ByetYaLmWHftjxovP0olCBvHiXWXq"
    },
    "analysis_timestamp": "2025-07-29 09:43:12"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_10_ProcessSinglePeriodMeterBilling",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n--* 2019-03-12\tzd\testimate or actual calculation is updated\t\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_10_ProcessSinglePeriodMeterBilling]\r\nAS \r\n    BEGIN\r\n\t\r\n\t\r\n\t/*\r\n\tput single period data into ConEd.UploadConEdisonMeterSummary\r\n\t*/\r\n        BEGIN\r\n            TRUNCATE TABLE ConEd.UploadConEdisonMeterSummary\r\n            DBCC CHECKIDENT ('ConEd.[UploadConEdisonMeterSummary]', RESEED, 1)\r\n\r\n\r\n            INSERT  INTO ConEd.UploadConEdisonMeterSummary\r\n                    (AccountUtilityCompanySeqid\r\n                    ,OriginalAccountNumber\r\n                    ,OriginalMeterNumber\r\n                    ,BillingPeriod\r\n                    ,BillingPeriodRevision\r\n                    ,FirstCancelPeriod\r\n                    ,NumberOfTransactions\r\n                    ,NumberOfRebillTransactions\r\n                    ,NumberOfCancelTransactions\r\n                    ,BillingAction\r\n                    ,GasRateCode\r\n                    ,InitialCancelFromDate\r\n                    ,CurrentBillingToDate\r\n                    ,FromDate\r\n                    ,ToDate\r\n                    ,MeterFromReading\r\n                    ,MeterToReading\r\n                    ,Ccf\r\n                    ,Therms\r\n                    ,ThermsFactor\r\n                    ,MeterConstant\r\n                    ,TotalBillingDaysRebilled\r\n                    ,NumberOfBillingPeriods\r\n                    ,BillingDays\r\n                    ,BillingDate\r\n                    ,ReadingCode\r\n                    ,NumberOfDials\r\n                    ,MeterType\r\n                    ,ProcessEffectiveDate\r\n                    ,SpannedBillingPeriodRevision\r\n                    ,SpannedFirstCanceledBillingPeriod\r\n                    ,SpannedCCF\r\n                    ,SpannedThermFactor\r\n                    ,SpannedTherm\r\n                    ,SpannedMonthlyPercentage\r\n                    ,SpannedTotalPercentage\r\n                    ,AuthenticatedUserID\r\n                    ,Notes\r\n                    ,DateAdded\r\n                    ,LastUpdate\r\n                    ,InitialPostingDate\r\n                    ,EstimatedOrActualBilling\r\n                    ,AverageRebillThermsFactor\r\n                    ,PriorRevisedBilledCCF\r\n                    ,RevisedBilledCCF\r\n                    ,CanceledBilledCCF\r\n                    ,PriorRevisedBilledTherms\r\n                    ,RevisedBilledTherms\r\n                    ,CanceledBilledTherms\r\n                    ,FacilityName\r\n                    ,ServiceAddress\r\n                    )\r\n            SELECT  9 AS AccountUtilityCompanySeqid\r\n            ,       AccountNumber\r\n            ,       MeterNumber\r\n            ,       BillingPeriod\r\n            ,       CASE WHEN BillingPeriod < BillingPeriodRevision THEN BillingPeriod ELSE BillingPeriodRevision END AS BillingPeriodRevision\r\n            ,       CASE WHEN BillingPeriod < BillingPeriodRevision THEN BillingPeriod ELSE BillingPeriodRevision END AS FirstPeriodCanceled\r\n            ,       1 AS NumberOfTransactions\r\n            ,       1 AS NumberOfRebillTransactions\r\n            ,       0 AS NumberOfCancelTransactions\r\n            ,       CASE WHEN BillingPeriod = BillingPeriodRevision THEN 'O' ELSE 'A' END AS BillingAction\r\n            ,       [dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable](AccountNumber, BillingPeriodRevision) AS GasRateCode\r\n            ,       FromDate\r\n            ,       ToDate\r\n            ,       FromDate\r\n            ,       ToDate\r\n            ,       FromReading AS FromMeterReading\r\n            ,       ToReading AS ToMeterReading\r\n            ,       CCF\r\n            ,       CAST(CCF * dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber, BillingPeriodRevision) + .501 AS INT) AS Therms\r\n            ,       dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber, BillingPeriodRevision) AS ThermFactor\r\n            ,       MeterConstant\r\n            ,       [dbo].[CalculateNumberOfBillingDays](FromDate, ToDate) AS TotalBillingDaysRebilled\r\n            ,       DeltaNumberOfPeriods AS NumberOfBillingPeriods\r\n            ,       [dbo].[CalculateNumberOfBillingDays](FromDate, ToDate) AS BillingDays\r\n            ,       [dbo].[ConvertDatetimeToYYYYMMDD](PostingDate) AS BillingDate\r\n            ,       ReadingCode\r\n            ,       Dials AS NumberOfDials\r\n            ,       'G' AS MeterType\r\n            ,       NULL AS ProcessEffectiveDate\r\n            ,       CASE WHEN BillingPeriod < BillingPeriodRevision THEN BillingPeriod ELSE BillingPeriodRevision END AS SpannedBillingPeriodRevision\r\n            ,       CASE WHEN BillingPeriod < BillingPeriodRevision THEN BillingPeriod ELSE BillingPeriodRevision END AS SpannedFirstCanceledBillingPeriod\r\n            ,       CCF AS SpannedCCF\r\n            ,       dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber, BillingPeriodRevision) AS SpannedThermFactor\r\n            ,       CAST(CCF * dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber, BillingPeriodRevision) + .501 AS INT) AS SpannedTherm\r\n            ,       1.0 AS SpannedMonthlyPercentage\r\n            ,       1.0 AS SpannedTotalPercentage\r\n            ,       1 AS AuthenticatedUserID\r\n            ,       NULL AS Notes\r\n            ,       GETDATE() AS DateAdded\r\n            ,       GETDATE() AS LastUpdate\r\n            ,       GETDATE() AS InitialPostingDate\r\n            --,       CASE WHEN ReadingCode < 15 THEN 'EST' ELSE 'ACT' END AS EstimatedOrActualBilling\r\n\t\t\t,\t\tdbo.CalculateEstimatedOrActual(ReadingCode,9) AS EstimatedOrActualBilling\r\n            ,       1.00 AS AverageRebillThermsFactor\r\n            ,       0 AS PriorRevisedBilledCCF\r\n            ,       0 AS RevisedBilledCCF\r\n            ,       0 AS CanceledBilledCCF\r\n            ,       0 AS PriorRevisedBilledTherms\r\n            ,       0 AS RevisedBilledTherms\r\n            ,       0 AS CanceledBilledTherms\r\n            ,       FacilityName\r\n            ,       ServiceAddress\r\n            FROM ConEd.UploadConEdisonMeter\r\n            WHERE   DeltaNumberOfPeriods < 2\r\n  \r\n        END -- ends  \r\n\r\n   \r\n\r\n    END",
      "created": "2025-06-10 21:41:26.733000",
      "last_altered": "2025-06-10 21:41:26.733000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_10_ProcessSinglePeriodMeterBilling",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_10_ProcessSinglePeriodMeterBilling` is designed to process and insert single-period meter billing data into the `ConEd.UploadConEdisonMeterSummary` table. It first clears the existing data in the target table and resets its identity column. Then, it populates the table with data from the `ConEd.UploadConEdisonMeter` table, applying various transformations and calculations to the data as it is inserted.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves data transformation and calculation using multiple functions.\n- It includes conditional logic to determine certain field values.\n- It interacts with multiple tables and functions, which requires a good understanding of the database schema and business rules.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on the data available in the `ConEd.UploadConEdisonMeter` table.\n\n#### 4. Business Logic and Workflow\n- **Data Preparation**: The procedure begins by truncating the `ConEd.UploadConEdisonMeterSummary` table to remove all existing records. It then resets the identity column of this table to start from 1.\n  \n- **Data Insertion**: The procedure inserts data into `ConEd.UploadConEdisonMeterSummary` from `ConEd.UploadConEdisonMeter` where `DeltaNumberOfPeriods` is less than 2. This condition filters the records to be processed.\n\n- **Field Calculations and Transformations**:\n  - **Billing Period Revision**: Uses conditional logic to determine the correct billing period revision.\n  - **Billing Action**: Determines whether the action is 'Original' or 'Adjustment' based on the billing period comparison.\n  - **Gas Rate Code**: Obtained using a function that determines the gas tariff rate.\n  - **Therms Calculation**: Calculates therms using a custom function to get the therm factor and applies a rounding logic.\n  - **Date Calculations**: Uses functions to calculate billing days and format dates.\n  - **Estimated or Actual Billing**: Uses a function to determine if the billing is estimated or actual based on the reading code.\n\n- **Static and Default Values**: Some fields are populated with static values or defaults, such as `MeterType` set to 'G', `AuthenticatedUserID` set to 1, and various fields initialized to zero.\n\n#### 5. Performance Considerations\n- **Truncation and Identity Reset**: Truncating the table and resetting the identity column can be efficient for clearing data but may not be suitable for high-frequency operations due to potential locking and blocking issues.\n- **Function Calls**: The use of scalar functions in the SELECT statement can impact performance, especially if these functions are complex or involve additional database access.\n- **Batch Processing**: The procedure processes all eligible records in one batch, which could lead to performance issues if the source table contains a large number of records.\n\n#### 6. Potential Issues or Risks\n- **Data Loss**: Truncating the table results in complete data loss of the existing records, which may not be desirable in all scenarios.\n- **Concurrency**: The procedure does not handle concurrency explicitly, which could lead to issues if multiple processes attempt to execute it simultaneously.\n- **Function Dependencies**: The procedure relies on several user-defined functions, which must be correctly implemented and performant. Any changes or issues in these functions could affect the procedure's output.\n- **Error Handling**: There is no explicit error handling in the procedure, which means any runtime errors could cause the procedure to fail without logging or handling the error gracefully.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2256,
      "api_response_id": "chatcmpl-ByetljLbwLa4NILEo6WL8uWyft2JT"
    },
    "analysis_timestamp": "2025-07-29 09:43:31"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_11_ProcessSplitMeterBilling",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_11_ProcessSplitMeterBilling]\r\nAS \r\n    BEGIN\r\n\t\r\n\t\r\n\t /*\r\n\tprocess split records and put them into ConEd.UploadConEdisonMeterSummary. This is achieved by \r\n\tusing cursor on temporary staging table called UploadConEdisonMeterTempSummarySpanned \r\n\t*/\r\n\r\n\r\n        BEGIN\r\n            DECLARE @TempSplitTransactionsSeqid INT\r\n            DECLARE @UploadConEdisonMeterSummarySeqid INT\r\n            DECLARE @Notes dbo.notes\r\n            DECLARE @Success INT\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n-- Find UploadConEdAccountSummary reset rows that would override UploadConEdMeterSummary\r\n-- billing revision period.  The criteria is the UploadConEdMeterSummary.ToDate is greater\r\n-- than the UploadConEdAccountSummary.FromDate and is less than and equal to the UploadConEdAccountSummary.ToDate\r\n--\r\n--\r\n            UPDATE  ConEd.UploadConEdisonMeterSummary\r\n            SET     BillingPeriodRevision = ConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod.AccountBillingPeriodRevision\r\n            FROM ConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod\r\n                    INNER JOIN ConEd.UploadConEdisonMeterSummary ON ConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod.UploadConEdisonMeterSummarySeqid = ConEd.UploadConEdisonMeterSummary.UploadConEdisonMeterSummarySeqid                      \r\n-- \r\n-- Once the override is completed.  Find all of the split transactions that need to be merged with the reset\r\n-- row.  Assume that the number of billing days are less than 30.\r\n--\r\n            TRUNCATE TABLE ConEd.TempSplitTransactions\r\n\r\n            INSERT  INTO ConEd.TempSplitTransactions\r\n                    ( UploadConEdisonMeterSummarySeqid ,\r\n                      AccountUtilityCompanySeqid ,\r\n                      AccountBilled ,\r\n                      MeterBilled ,\r\n                      AccountExchangeMeterTrackSeqid ,\r\n                      AdjustedMeterBilling ,\r\n                      AdjustedMeterBillingElectric ,\r\n                      OriginalAccountNumber ,\r\n                      OriginalMeterNumber ,\r\n                      BillingPeriod ,\r\n                      BillingPeriodRevision ,\r\n                      FirstCancelPeriod ,\r\n                      NumberOfTransactions ,\r\n                      NumberOfRebillTransactions ,\r\n                      NumberOfCancelTransactions ,\r\n                      BillingAction ,\r\n                      PriorRevisedBilledCCF ,\r\n                      RevisedBilledCCF ,\r\n                      CanceledBilledCCF ,\r\n                      PriorRevisedBilledTherms ,\r\n                      RevisedBilledTherms ,\r\n                      CanceledBilledTherms ,\r\n                      InitialCancelFromDate ,\r\n                      CurrentBillingToDate ,\r\n                      GasRateCode ,\r\n                      FromDate ,\r\n                      ToDate ,\r\n                      MeterFromReading ,\r\n                      MeterToReading ,\r\n                      Ccf ,\r\n                      Therms ,\r\n                      ThermsFactor ,\r\n                      MeterConstant ,\r\n                      TotalBillingDaysRebilled ,\r\n                      NumberOfBillingPeriods ,\r\n                      AverageRebillCostOfGasCharge ,\r\n                      AverageRebillThermsFactor ,\r\n                      BillingDays ,\r\n                      BillingDate ,\r\n                      ReadingCode ,\r\n                      NumberOfDials ,\r\n                      MeterType ,\r\n                      ProcessedInTheCurrentPeriod ,\r\n                      ProcessEffectiveDate ,\r\n                      CancelReadingCode ,\r\n                      CancelFromDate ,\r\n                      CancelToDate ,\r\n                      CancelMeterFromReading ,\r\n                      CancelMeterToReading ,\r\n                      CancelCcf ,\r\n                      CancelTherms ,\r\n                      CancelThermsFactor ,\r\n                      CancelMeterConstant ,\r\n                      InitialPostingDate ,\r\n                      DerivedFromSpannedBill ,\r\n                      SpannedBillingPeriodRevision ,\r\n                      SpannedFirstCanceledBillingPeriod ,\r\n                      SpannedCCF ,\r\n                      SpannedThermFactor ,\r\n                      SpannedTherm ,\r\n                      SpannedMonthlyPercentage ,\r\n                      SpannedTotalPercentage ,\r\n                      EstimatedOrActualBilling ,\r\n                      FacilityName ,\r\n                      ServiceAddress ,\r\n                      AuthenticatedUserID ,\r\n                      Notes ,\r\n                      DateAdded ,\r\n                      LastUpdate\r\n                    )\r\n                    SELECT  UploadConEdisonMeterSummarySeqid ,\r\n                            AccountUtilityCompanySeqid ,\r\n                            AccountBilled ,\r\n                            MeterBilled ,\r\n                            AccountExchangeMeterTrackSeqid ,\r\n                            AdjustedMeterBilling ,\r\n                            AdjustedMeterBillingElectric ,\r\n                            OriginalAccountNumber ,\r\n                            OriginalMeterNumber ,\r\n                            BillingPeriod ,\r\n                            BillingPeriodRevision ,\r\n                            FirstCancelPeriod ,\r\n                            NumberOfTransactions ,\r\n                            NumberOfRebillTransactions ,\r\n                            NumberOfCancelTransactions ,\r\n                            BillingAction ,\r\n                            PriorRevisedBilledCCF ,\r\n                            RevisedBilledCCF ,\r\n                            CanceledBilledCCF ,\r\n                            PriorRevisedBilledTherms ,\r\n                            RevisedBilledTherms ,\r\n                            CanceledBilledTherms ,\r\n                            InitialCancelFromDate ,\r\n                            CurrentBillingToDate ,\r\n                            GasRateCode ,\r\n                            FromDate ,\r\n                            ToDate ,\r\n                            MeterFromReading ,\r\n                            MeterToReading ,\r\n                            Ccf ,\r\n                            Therms ,\r\n                            ThermsFactor ,\r\n                            MeterConstant ,\r\n                            TotalBillingDaysRebilled ,\r\n                            NumberOfBillingPeriods ,\r\n                            AverageRebillCostOfGasCharge ,\r\n                            AverageRebillThermsFactor ,\r\n                            BillingDays ,\r\n                            BillingDate ,\r\n                            ReadingCode ,\r\n                            NumberOfDials ,\r\n                            MeterType ,\r\n                            ProcessedInTheCurrentPeriod ,\r\n                            ProcessEffectiveDate ,\r\n                            CancelReadingCode ,\r\n                            CancelFromDate ,\r\n                            CancelToDate ,\r\n                            CancelMeterFromReading ,\r\n                            CancelMeterToReading ,\r\n                            CancelCcf ,\r\n                            CancelTherms ,\r\n                            CancelThermsFactor ,\r\n                            CancelMeterConstant ,\r\n                            InitialPostingDate ,\r\n                            DerivedFromSpannedBill ,\r\n                            SpannedBillingPeriodRevision ,\r\n                            SpannedFirstCanceledBillingPeriod ,\r\n                            SpannedCCF ,\r\n                            SpannedThermFactor ,\r\n                            SpannedTherm ,\r\n                            SpannedMonthlyPercentage ,\r\n                            SpannedTotalPercentage ,\r\n                            EstimatedOrActualBilling ,\r\n                            FacilityName ,\r\n                            ServiceAddress ,\r\n                            AuthenticatedUserID ,\r\n                            Notes ,\r\n                            DateAdded ,\r\n                            LastUpdate\r\n                    FROM ConEd.UploadConEdisonMeterSummary\r\n                    WHERE   ( MeterFromReading = 0 )\r\n                            AND ( MeterToReading <> 0 )\r\n                            AND BillingDays < 30\r\n                    ORDER BY NumberOfBillingPeriods\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\n--\r\n            DECLARE SplitBillingAndMeterResetsCursor CURSOR\r\n            FOR\r\n                SELECT  TempSplitTransactionsSeqid ,\r\n                        UploadConEdisonMeterSummarySeqid\r\n                FROM ConEd.TempSplitTransactions \r\n--\r\n            OPEN SplitBillingAndMeterResetsCursor;\r\n--\r\n-- @UploadConEdisonMeterSummarySeqid holds the id of the reset meter records which will be deleted once the data is merged\r\n-- and the notes are created\r\n--\r\n            FETCH NEXT FROM SplitBillingAndMeterResetsCursor INTO @TempSplitTransactionsSeqid,\r\n                @UploadConEdisonMeterSummarySeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n\r\n            WHILE @@FETCH_STATUS = 0 \r\n                BEGIN\r\n\t--\r\n\t--\tFetch a split row to process \r\n\t--\r\n\t--\tFind the split row to conterpart by joining the view and split table.\r\n\t--\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo \r\n\t--\t\t\tConEd.TempSplitTransactions \t\r\n\t--\tWHERE (ConEd.UploadConEdisonMeterSummary.MeterFromReading <> '0') updates the \r\n\t--\tthe merged data record with the complete summary totals for the period.\r\n\t--\r\n                    UPDATE  ConEd.UploadConEdisonMeterSummary\r\n                    SET     FromDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationFromDate ,\r\n                            ToDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate ,\r\n                            CurrentBillingToDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate ,\r\n                            MeterFromReading = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterFromReading,\r\n                                                      0) ,\r\n                            MeterToReading = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterToReading,\r\n                                                    0) ,\r\n                            Ccf = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TotalCCF,\r\n                                         0) ,\r\n                            Therms = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TotalTherms,\r\n                                            0) ,\r\n                            ThermsFactor = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.ThermsFactor,\r\n                                                  1.03) ,\r\n                            MeterConstant = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterConstant,\r\n                                                   1) ,\r\n\t\t\t\t\t\t\tNotes = \r\n\t\t\t\t\t\t\tleft(\r\n\t\t\t\t\t\t\t(Common.MeterResetNotes('M',\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationFromDate,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterFromReading,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationToDate,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterToReading,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationCCF,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationThermsFactor,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationTherms,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterConstant)\r\n                            + '--' + Common.MeterResetNotes('R',\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationFromDate,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterFromReading,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterToReading,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationCCF,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationThermsFactor,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationTherms,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterConstant))\r\n\t\t\t\t\t\t\t, 300)\r\n\r\n\r\n                    FROM ConEd.UploadConEdisonMeterSummary\r\n                            INNER JOIN ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo ON ConEd.UploadConEdisonMeterSummary.BillingPeriod = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonMeterSummary.BillingPeriodRevision = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonMeterSummary.OriginalAccountNumber = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.OriginalAccountNumber\r\n                                                              AND ConEd.UploadConEdisonMeterSummary.OriginalMeterNumber = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.OriginalMeterNumber\r\n                    WHERE   ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TempSplitTransactionsSeqid = @TempSplitTransactionsSeqid\r\n                            AND ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.UploadConEdisonMeterSummarySeqid = @UploadConEdisonMeterSummarySeqid\r\n\t--\r\n                    SET @Success = @@rowcount\r\n\t--\r\n\t-- Complete the processing by deleteing the reset meter row from the ConEd.UploadConEdisonMeterSummary table since it was already merged.\r\n\t--\r\n                    IF ( @Success > 0 ) \r\n                        DELETE  FROM ConEd.UploadConEdisonMeterSummary\r\n                        WHERE   ( UploadConEdisonMeterSummarySeqid = @UploadConEdisonMeterSummarySeqid )\r\n                    ELSE \r\n                        PRINT 'Update failed for UploadConEdisonMeterSummarySeqid Seqid'\r\n                            + CAST(@UploadConEdisonMeterSummarySeqid AS VARCHAR(10))\r\n                            + ' - TempSplitTransactionsSeqid'\r\n                            + CAST(@TempSplitTransactionsSeqid AS VARCHAR(10))\r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\n                    FETCH NEXT FROM SplitBillingAndMeterResetsCursor INTO @TempSplitTransactionsSeqid,\r\n                        @UploadConEdisonMeterSummarySeqid\r\n                END\r\n\r\n            CLOSE SplitBillingAndMeterResetsCursor;\r\n            DEALLOCATE SplitBillingAndMeterResetsCursor;\r\n--\r\n-- Remove the splits from the ConEd.UploadConEdisonMeterSummary after the merge\r\n--\r\n            UPDATE  ConEd.UploadConEdisonMeterSummary\r\n            SET     NumberOfBillingPeriods = 1 ,\r\n                    Notes = 'Zero number of billing periods set to one to process as a whole period not a merged split'\r\n            WHERE   ( NumberOfBillingPeriods = 0 )\r\n                    AND ( Ccf <> 0 )\r\n  \r\n        END -- 2 ends  \r\n    \r\n   \r\n\r\n    END",
      "created": "2025-06-10 21:41:26.747000",
      "last_altered": "2025-06-10 21:41:26.747000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_11_ProcessSplitMeterBilling",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Upload_11_ProcessSplitMeterBilling` is designed to process and merge split meter billing records into a summary table, `ConEd.UploadConEdisonMeterSummary`. It uses a temporary staging table, `ConEd.TempSplitTransactions`, to handle split transactions that need to be merged. The procedure involves updating billing period revisions, inserting split transactions into a temporary table, and using a cursor to iterate over these transactions to merge them into the summary table. After merging, it deletes the reset meter records and updates the summary table to ensure consistency.\n\n#### 2. Complexity Level: Medium\n\nThe complexity level is medium due to the use of cursors, multiple table joins, and conditional logic for updating and deleting records. The procedure involves several steps and operations that require careful handling of data integrity and consistency.\n\n#### 3. Input Parameters\n\nThis stored procedure does not take any input parameters. It operates on predefined tables and views within the `ConEd` schema.\n\n#### 4. Business Logic and Workflow\n\n- **Initialization**: Declares variables to hold sequence IDs and success status.\n  \n- **Update Billing Period Revisions**: Updates the `BillingPeriodRevision` in `ConEd.UploadConEdisonMeterSummary` using data from a view that determines which account summaries should override meter summary billing revisions.\n\n- **Prepare Temporary Table**: Truncates `ConEd.TempSplitTransactions` to ensure it's empty before inserting new data.\n\n- **Insert Split Transactions**: Inserts records into `ConEd.TempSplitTransactions` from `ConEd.UploadConEdisonMeterSummary` where certain conditions are met (e.g., `MeterFromReading = 0` and `BillingDays < 30`).\n\n- **Cursor Processing**: \n  - Declares and opens a cursor to iterate over records in `ConEd.TempSplitTransactions`.\n  - For each record, it updates the corresponding record in `ConEd.UploadConEdisonMeterSummary` with merged data from a view.\n  - If the update is successful, it deletes the reset meter record from the summary table.\n  - If the update fails, it prints an error message.\n\n- **Final Updates**: Updates records in `ConEd.UploadConEdisonMeterSummary` to set `NumberOfBillingPeriods` to 1 where it is zero and `Ccf` is not zero.\n\n#### 5. Performance Considerations\n\n- **Use of Cursors**: Cursors can be performance-intensive, especially if the dataset is large. Consider replacing the cursor with set-based operations if possible.\n\n- **Truncation and Insertion**: Truncating and inserting into `ConEd.TempSplitTransactions` can be optimized by ensuring that the table is indexed appropriately for the operations performed.\n\n- **Joins and Updates**: The procedure involves multiple joins and updates, which can be resource-intensive. Ensure that the tables involved are indexed on the columns used in joins and where clauses to improve performance.\n\n#### 6. Potential Issues or Risks\n\n- **Data Integrity**: The procedure deletes records from `ConEd.UploadConEdisonMeterSummary` after merging. Ensure that this deletion logic is correct to prevent accidental data loss.\n\n- **Concurrency**: If multiple instances of this procedure run concurrently, it could lead to race conditions or deadlocks. Consider implementing transaction isolation levels or locks to manage concurrency.\n\n- **Error Handling**: The procedure has minimal error handling. Consider adding more robust error handling and logging to capture and manage exceptions.\n\n- **Scalability**: As the volume of data grows, the use of cursors and the current logic might not scale well. Regular performance reviews and optimizations may be necessary.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3889,
      "api_response_id": "chatcmpl-Byeu5X1e8NUEbFeN7Ol2QE6Ld9jJQ"
    },
    "analysis_timestamp": "2025-07-29 09:43:48"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_12_ProcessSpannedMeterBilling",
      "definition": "-- =============================================\r\n-- UPDATE by zd\t2019-03-12\testimate or actual calculation is updated\t\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_12_ProcessSpannedMeterBilling]\r\nAS \r\nBEGIN\r\n\t/*\r\n\tSteps:\r\n\t1) Input spanned data into UploadConEdisonMeterTempSummarySpanned\r\n\t2) Process spanned records, put final records into UploadConEdisonMeterSummary\r\n\t*/\r\n\r\n\t/*\r\n\t1) Input spanned data into \r\n\t*/\r\n        BEGIN\r\n            TRUNCATE TABLE ConEd.UploadConEdisonMeterTempSummarySpanned\r\n            DBCC CHECKIDENT ('ConEd.[UploadConEdisonMeterTempSummarySpanned]', RESEED,1)\r\n\r\n            INSERT  INTO ConEd.UploadConEdisonMeterTempSummarySpanned\r\n                    ( title ,\r\n                      AccountNumber ,\r\n                      MeterNumber ,\r\n                      BillingPeriod ,\r\n                      BillingPeriodRevision ,\r\n                      FirstPeriodCanceled ,\r\n                      FromDate ,\r\n                      ToDate ,\r\n                      ThermFactor ,\r\n                      CCF ,\r\n                      DeltaNumberOfPeriods ,\r\n                      ReadingCode ,\r\n                      FromReading ,\r\n                      ToReading ,\r\n                      MeterConstant ,\r\n                      TripNumber ,\r\n                      Dials ,\r\n                      FacilityName ,\r\n                      ServiceAddress\r\n                    )\r\n                    SELECT  'SpannedMeterbilling' AS title ,\r\n                            AccountNumber ,\r\n                            MeterNumber ,\r\n                            BillingPeriod ,\r\n                            BillingPeriodRevision ,\r\n                            FirstPeriodCanceled ,\r\n                            FromDate ,\r\n                            ToDate ,\r\n                            ThermFactor ,\r\n                            CCF ,\r\n                            DeltaNumberOfPeriods ,\r\n                            ReadingCode ,\r\n                            FromReading ,\r\n                            ToReading ,\r\n                            MeterConstant ,\r\n                            CASE WHEN CycleBillingDays > 99 THEN 99 ELSE CycleBillingDays END ,  -- Trip Number\r\n                            Dials ,\r\n                            FacilityName ,\r\n                            ServiceAddress\r\n                    FROM ConEd.UploadConEdisonMeter\r\n                    WHERE   ( DeltaNumberOfPeriods > 1 )\r\n  \r\n  \r\n\r\n        END -- end 1  \r\n\r\n\t/*\r\n\t2) Process spanned records, put final records into UploadConEdisonMeterSummary\r\n\t*/\r\n        BEGIN\r\n\t\t\r\n            DECLARE @UploadConEdisonMeterTempSummarySpannedSeqid dbo.seqid\r\n--\r\n            DECLARE @Notes dbo.notes\r\n            DECLARE @AccountNumber dbo.acctnum\r\n            DECLARE @FacilityName dbo.UtilityServiceAccountName\r\n            DECLARE @ServiceAddress dbo.addr\r\n            DECLARE @TariffCode dbo.tariff\r\n            DECLARE @PostingDate dbo.PostingDate\r\n--\r\n            DECLARE @OriginalMeterNumber meternumber \r\n            DECLARE @GasRateCode GasRateCode \r\n            DECLARE @MeterFromReading MeterReadingNumber7 \r\n            DECLARE @MeterToReading MeterReadingNumber7 \r\n            DECLARE @MeterConstant MeterConstantMultiplier \r\n            DECLARE @ReadingCode ReadingCode \r\n            DECLARE @NumberOfDials MeterDials \r\n--\r\n            DECLARE @NumberOfPeriodsMinusOne dbo.Accumulator\r\n            DECLARE @DeltaNumberOfPeriods dbo.Accumulator\r\n            DECLARE @BillingPeriod dbo.yyyymm \r\n            DECLARE @FirstPeriodCanceled dbo.yyyymm \r\n            DECLARE @ThermFactor dbo.ThermsFactor \r\n            DECLARE @FudgedThermFactor dbo.ThermsFactor \r\n            DECLARE @BillingPeriodRevision dbo.yyyymm \r\n            DECLARE @FromDate dbo.yyyymmdd \r\n            DECLARE @ToDate dbo.yyyymmdd \r\n            DECLARE @CalculatedBillingPeriodRevision dbo.yyyymm \r\n            DECLARE @CalculatedFromDate dbo.yyyymmdd \r\n            DECLARE @CalculatedToDate dbo.yyyymmdd \r\n            DECLARE @BilledAmount dbo.BillingAmt \r\n            DECLARE @BilledAmountMonthly dbo.BillingAmt \r\n            DECLARE @BilledAmountAverage dbo.BillingAmt \r\n            DECLARE @BilledAmountRemainder dbo.BillingAmt \r\n            DECLARE @BillingPeriodDays dbo.Accumulator \r\n            DECLARE @BillingPeriodDaysAverage dbo.Accumulator \r\n            DECLARE @BillingPeriodDaysRemainder dbo.Accumulator \r\n            DECLARE @Therms dbo.EnergyUnit \r\n            DECLARE @LastPeriodTherms dbo.EnergyUnit \r\n            DECLARE @ThermsAverage dbo.EnergyUnit \r\n            DECLARE @ThermsRemainder dbo.EnergyUnit \r\n            DECLARE @CCF dbo.EnergyUnit \r\n            DECLARE @CCFAverage dbo.EnergyUnit \r\n            DECLARE @CCFRemainder dbo.EnergyUnit \r\n            DECLARE @SumAverageCCF dbo.EnergyUnit \r\n            DECLARE @idx INT\r\n            DECLARE @StartingBillingPeriodDaysIncrement INT\r\n            DECLARE @StartingBillingPeriodCCFIncrement INT\r\n            DECLARE @StartingBillingPeriodThermsIncrement INT\r\n            DECLARE @IncrementBillingPeriodDays INT\r\n            DECLARE @IncrementBillingPeriodCCF INT\r\n            DECLARE @IncrementBillingPeriodTherms INT\r\n--\r\n            DECLARE @MeterRolloverAdjustmentFactor INT\r\n            DECLARE @NumberOfDialsAdjustmentFactor INT\r\n            DECLARE @MeterHasRolledOver BIT\r\n\r\n--\r\n            DECLARE @ThermsMonthlyLastPeriod dbo.EnergyUnit \r\n            DECLARE @CCFMonthlyLastPeriod dbo.EnergyUnit \r\n\r\n            DECLARE @CalculatedMeterFromReading INT \r\n            DECLARE @CalculatedMeterToReading INT\r\n            DECLARE @CalculatedMeterConstant DECIMAL(7, 1)\r\n--\r\n            DECLARE @ConEdUtilityCode dbo.seqid\r\n            DECLARE @ApplyMonthlyPercentage dbo.DiscountPercentage\r\n            DECLARE @ThermsMonthlySum dbo.EnergyUnit \r\n            DECLARE @ThermsMonthly dbo.EnergyUnit \r\n            DECLARE @CCFMonthly dbo.EnergyUnit \r\n            DECLARE @CCFMonthlySum dbo.EnergyUnit \r\n            DECLARE @TotalGasSpannedBilledPercentage dbo.DiscountPercentage\r\n            DECLARE @BillingCycle dbo.MonthlyBillingCycle\r\n            DECLARE @BillingDate dbo.yyyymmdd\r\n--\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n--SELECT @BillingPeriod = BillingPeriod FROM ApplicationTimeFrame WHERE (CurrentProcessingPeriod = 'Y')\r\n--\r\n--Set @BillingPeriod = '200607'\r\n            SELECT TOP 1\r\n                    @BillingPeriod = BillingPeriod\r\n            FROM ConEd.UploadConEdisonMeter\r\n--\r\n            SET @BillingCycle = 'M'\r\n            SET @ConEdUtilityCode = 9\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\n--\r\n            DECLARE SpannedGasBillCursor CURSOR\r\n            FOR\r\n                SELECT  UploadConEdisonMeterTempSummarySpannedSeqid\r\n                FROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n                WHERE   ( DeltaNumberOfPeriods > 1 ) --and @BillingPeriod=@BillingPeriod\r\n--\r\n            OPEN SpannedGasBillCursor;\r\n--\r\n            FETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonMeterTempSummarySpannedSeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n--\r\n            WHILE @@FETCH_STATUS = 0 \r\n                BEGIN\r\n\t--\r\n\t--\tBuffer all of the columns from the spanned row for parsing purposes\r\n\t--\r\n\t--\r\n                    SELECT  @AccountNumber = AccountNumber ,\r\n                            @OriginalMeterNumber = MeterNumber ,\r\n                            @MeterFromReading = ISNULL(FromReading, 0) ,\r\n                            @MeterToReading = ISNULL(ToReading, 0) ,\r\n                            @MeterConstant = ISNULL(CASE WHEN MeterConstant = 0 THEN 1 ELSE MeterConstant END, 1) ,\r\n                            @ReadingCode = ReadingCode ,\r\n                            @NumberOfDials = Dials ,\r\n                            @DeltaNumberOfPeriods = DeltaNumberOfPeriods ,\r\n                            @BillingPeriodRevision = BillingPeriodRevision ,\r\n                            @FirstPeriodCanceled = FirstPeriodCanceled ,\r\n                            @FromDate = FromDate ,\r\n                            @ToDate = ToDate ,\r\n                            @CCF = CCF ,\r\n                            @ThermFactor = ThermFactor ,\r\n                            @BillingPeriod = BillingPeriod ,\r\n                            @FacilityName = FacilityName ,\r\n                            @ServiceAddress = ServiceAddress\r\n                    FROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n                    WHERE   ( UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid ) \r\n\t--\r\n\t--\tAggregate the average City wide monthly gas usage percentage for the spanned row billing periods \r\n\t--\r\n                    SELECT  @TotalGasSpannedBilledPercentage = [dbo].[CalculateTotalGasSpannedBilledPercentage](@BillingCycle,\r\n                                                              @DeltaNumberOfPeriods,\r\n                                                              @FirstPeriodCanceled,\r\n                                                              @BillingPeriodRevision)\r\n\t--\r\n\t--\tDetermine the number of periods minus 1 to pro-rate the money and usage.  The last period will derive the money and usage\r\n\t--\tby row totals - (the n-1 aggregates of money and usage)\r\n\t--\r\n                    SET @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods - 1\r\n\t--\r\n\t--\tInitialize the counters for the n-1 parses\r\n\t--\r\n                    SET @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n                    SET @CalculatedFromDate = @FromDate\r\n                    SET @CalculatedToDate = @ToDate\r\n                    SET @idx = 0\r\n                    SET @ThermsMonthlySum = 0\r\n                    SET @CCFMonthlySum = 0\r\n                    SET @CalculatedMeterFromReading = CAST(@MeterFromReading AS INT)\r\n                    SET @CalculatedMeterToReading = CAST(@MeterToReading AS INT)\r\n                    SET @CalculatedMeterConstant = CAST(@MeterConstant AS DECIMAL(7,\r\n                                                              1))\r\n\r\n\t--\r\n                    SELECT  @ThermFactor = dbo.DetermineConEdisonGetThermFactorFromAccountTable(@AccountNumber,\r\n                                                              @BillingPeriodRevision)\r\n                    SELECT  @GasRateCode = dbo.DetermineConEdisonGetGasTariffRateFromAccountTable(@AccountNumber,\r\n                                                              @BillingPeriodRevision)\r\n                    SELECT  @BillingDate = dbo.ConvertDatetimeToYYYYMMDD(dbo.[DetermineConEdisonGetPostingDateFromAccountTable](@AccountNumber,\r\n                                                              @BillingPeriodRevision))\r\n\t--\r\n                    SET @Therms = ROUND(@CCF * @ThermFactor, 0)\r\n\t--\r\n                    SET @NumberOfDialsAdjustmentFactor = CASE \r\n\t\t\t\t\t\t\t\t\t\t\t-- Standard Gas meter has from 3 to 6 dials.  \r\n                                                              WHEN 2 < @NumberOfDials\r\n                                                              AND @NumberOfDials < 7\r\n                                                              THEN CAST(@NumberOfDials AS INT)\r\n\t\t\t\t\t\t\t\t\t\t\t-- If there are no dials reported or the number of dials is outside the \r\n\t\t\t\t\t\t\t\t\t\t\t-- range of the standard number of dials (3 to 6 dials).  The sum of the \r\n\t\t\t\t\t\t\t\t\t\t\t-- MeterFromReading + total CCF will derive a number that is equal to the \r\n\t\t\t\t\t\t\t\t\t\t\t-- number of dials - 1 raised to the power of 10 plus the MeterToReading.\r\n                                                              ELSE LEN(CAST(@CCF\r\n                                                              + @CalculatedMeterFromReading AS VARCHAR(7)))\r\n                                                              - 1\r\n                                                         END\r\n                    SET @MeterHasRolledOver = 0\r\n                    SET @MeterRolloverAdjustmentFactor = POWER(10,\r\n                                                              @NumberOfDialsAdjustmentFactor)\r\n                    IF ( @CalculatedMeterToReading < @CalculatedMeterFromReading\r\n                         OR POWER(10, @NumberOfDialsAdjustmentFactor) <= @CCF\r\n                       ) \r\n                        BEGIN\r\n                            SET @MeterHasRolledOver = 1\r\n                        END\r\n\t--\r\n\t--\r\n                    WHILE ( @NumberOfPeriodsMinusOne > @idx ) \r\n                        BEGIN\r\n\t\t\t--\r\n\t\t\t-- The @ApplyMonthlyPercentage holds the weigthed average for the particular month\r\n\t\t\t--\r\n                            SELECT  @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled](@CalculatedBillingPeriodRevision,\r\n                                                              @TotalGasSpannedBilledPercentage)\r\n\t\t\t--\r\n\t\t\t-- Apply the Monthly Percentage to the meter reading and derive the CCF, Therms  and accumulate the weigthed average units.\r\n\t\t\t--\r\n                            SET @CCFMonthly = ROUND(@CCF\r\n                                                    * @ApplyMonthlyPercentage,\r\n                                                    0)\r\n                            SET @CCFMonthlySum = @CCFMonthlySum + @CCFMonthly\r\n                            SET @ThermsMonthly = ROUND(@Therms\r\n                                                       * @ApplyMonthlyPercentage,\r\n                                                       0)\r\n                            SET @ThermsMonthlySum = @ThermsMonthlySum\r\n                                + @ThermsMonthly\r\n\t\t\t--\r\n\t\t\t--\tThe CCF, Therms and Meter To Reading are derived.  The CCF\r\n\t\t\t--\r\n                            SET @CalculatedMeterToReading = @CalculatedMeterFromReading\r\n                                + ROUND(@CCFMonthly / @CalculatedMeterConstant,\r\n                                        0)\r\n                            SET @CalculatedMeterToReading = CASE\r\n                                                              WHEN @MeterHasRolledOver = 0\r\n                                                              THEN @CalculatedMeterToReading\r\n                                                              ELSE \r\n\t\t\t\t\t\t\t\t\t\t\t\t -- \r\n\t\t\t\t\t\t\t\t\t\t\t\t -- The spanned meter reading has rolled over.  If the MeterToReading is less than @NumberOfDialsAdjustmentFactor then \r\n\t\t\t\t\t\t\t\t\t\t\t\t -- the derived MeterToReading remains unadjusted. When the sum of the @CalculatedMeterFromReading + @CCFMonthly is greater\r\n\t\t\t\t\t\t\t\t\t\t\t\t -- than the @NumberOfDialsAdjustmentFactor is subtracted to make the adjustment for the rollover meter reset.\r\n\t\t\t\t\t\t\t\t\t\t\t\t -- \r\n                                                              CASE\r\n                                                              WHEN @CalculatedMeterToReading < @MeterRolloverAdjustmentFactor\r\n                                                              THEN @CalculatedMeterToReading\r\n                                                              ELSE @CalculatedMeterToReading\r\n                                                              - @MeterRolloverAdjustmentFactor\r\n                                                              END\r\n                                                            END\r\n\t\t\t--\r\n\t\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" as the derived \"Todate\" for the account.\r\n\t\t\t--\r\n                            SELECT  @CalculatedToDate = [dbo].[DetermineConEdisonBillingPeriodProjectedToDate](@CalculatedBillingPeriodRevision,\r\n                                                              @TariffCode,\r\n                                                              @ConEdUtilityCode)\r\n\t\t\t--\r\n                            PRINT @AccountNumber + ' '\r\n                                + @BillingPeriodRevision + ' ' + @FromDate\r\n                                + ' ' + @ToDate\r\n\t\t\t--\r\n\t\t\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t\t\t--\tIt will note in EC3 that the transaction was derived.\r\n\t\t\t--\r\n                            SELECT  @Notes = 'CalcTherm '\r\n                                    + CAST(@Therms AS VARCHAR(10)) + ' = '\r\n                                    + CAST(@ThermFactor AS VARCHAR(6)) + ' * '\r\n                                    + CAST(@CCF AS VARCHAR(10)) + ' for '\r\n                                    + CAST(@DeltaNumberOfPeriods AS VARCHAR(6))\r\n                                    + ' periods, First: '\r\n                                    + @FirstPeriodCanceled + ' ( '\r\n                                    + @MeterFromReading + ') Last: '\r\n                                    + @BillingPeriodRevision + ' ( '\r\n                                    + @MeterToReading + '). ' + ' period: '\r\n                                    + @CalculatedBillingPeriodRevision\r\n                                    + ' Month %: '\r\n                                    + CAST(@ApplyMonthlyPercentage AS VARCHAR(10))\r\n                                    + ' - Total %: '\r\n                                    + CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t\t\t--\r\n\t\t\t--\tINSERT the data into the table \"ConEd.UploadConEdisonAccountSummary\"\r\n\t\t\t--\r\n                            INSERT  INTO ConEd.UploadConEdisonMeterSummary\r\n                                    ( AccountUtilityCompanySeqid ,\r\n                                      OriginalAccountNumber ,\r\n                                      OriginalMeterNumber ,\r\n                                      NumberOfTransactions ,\r\n                                      NumberOfRebillTransactions ,\r\n                                      NumberOfCancelTransactions ,\r\n                                      BillingPeriod ,\r\n                                      BillingPeriodRevision ,\r\n                                      FirstCancelPeriod ,\r\n                                      BillingAction ,\r\n                                      InitialCancelFromDate ,\r\n                                      CurrentBillingToDate ,\r\n                                      GasRateCode ,\r\n                                      FromDate ,\r\n                                      ToDate ,\r\n                                      MeterFromReading ,\r\n                                      MeterToReading ,\r\n                                      Ccf ,\r\n                                      Therms ,\r\n                                      ThermsFactor ,\r\n                                      MeterConstant ,\r\n                                      TotalBillingDaysRebilled ,\r\n                                      NumberOfBillingPeriods ,\r\n                                      BillingDays ,\r\n                                      BillingDate ,\r\n                                      ReadingCode ,\r\n                                      NumberOfDials ,\r\n                                      MeterType ,\r\n                                      ProcessedInTheCurrentPeriod ,\r\n                                      ProcessEffectiveDate ,\r\n                                      InitialPostingDate ,\r\n                                      AuthenticatedUserID ,\r\n                                      Notes ,\r\n                                      DerivedFromSpannedBill ,\r\n                                      SpannedBillingPeriodRevision ,\r\n                                      SpannedFirstCanceledBillingPeriod ,\r\n                                      SpannedCCF ,\r\n                                      SpannedThermFactor ,\r\n                                      SpannedTherm ,\r\n                                      SpannedMonthlyPercentage ,\r\n                                      SpannedTotalPercentage ,\r\n                                      EstimatedOrActualBilling ,\r\n                                      FacilityName ,\r\n                                      ServiceAddress\r\n\t\t\t\t                    )\r\n                                    SELECT  @ConEdUtilityCode ,\r\n                                            @AccountNumber ,\r\n                                            @OriginalMeterNumber ,\r\n                                            1 ,-- NumberOfTransactions, \r\n                                            1 ,-- NumberOfRebillTransactions,\r\n                                            0 ,-- NumberOfCancelTransactions,\r\n                                            @BillingPeriod ,\r\n                                            @CalculatedBillingPeriodRevision ,\r\n                                            @CalculatedBillingPeriodRevision ,\r\n                                            CASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision\r\n                                                 THEN 'O'\r\n                                                 ELSE 'A'\r\n                                            END ,-- BillingAction, \r\n                                            @CalculatedFromDate ,\r\n                                            @CalculatedToDate ,\r\n                                            @GasRateCode ,\r\n                                            @CalculatedFromDate ,\r\n                                            @CalculatedToDate ,\r\n                                            CAST(@CalculatedMeterFromReading AS VARCHAR(7)) ,  --dbo.MeterReadingNumber\r\n                                            CAST(@CalculatedMeterToReading AS VARCHAR(7)) ,  --dbo.MeterReadingNumber\r\n                                            @CCFMonthly ,\r\n                                            @ThermsMonthly ,\r\n                                            @ThermFactor ,\r\n                                            @MeterConstant ,\r\n                                            [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) ,\r\n                                            1 ,\r\n                                            [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) ,\r\n                                            @BillingDate ,\r\n                                            @ReadingCode ,\r\n                                            @NumberOfDials ,\r\n                                            'G' , -- MeterType,\r\n                                            'N' , --ProcessedInTheCurrentPeriod\r\n                                            [dbo].ConvertDateToYYYYMMDD(GETDATE()) , -- ProcessEffectiveDate\r\n                                            GETDATE() , -- InitialPostingDate\r\n                                            1 , --\tAuthenticatedUserID,\r\n                                            @Notes ,\r\n                                            'Y' , -- DerivedFromSpannedBill\r\n                                            @BillingPeriodRevision ,  -- SpannedBillingPeriodRevision\r\n                                            @FirstPeriodCanceled ,  -- SpannedFirstPeriodCanceled\r\n                                            @CCF ,  -- SpannedCCF\r\n                                            @ThermFactor ,  -- SpannedThermFactor\r\n                                            @Therms ,  -- SpannedTherms\r\n                                            @ApplyMonthlyPercentage ,  -- SpannedApplyMonthlyPercentage\r\n                                            @TotalGasSpannedBilledPercentage ,  -- SpannedTotalGasSpannedBilledPercentage\r\n                                            --CASE WHEN @ReadingCode < 15 THEN 'EST' ELSE 'ACT' END , -- EstimatedOrActualBilling\r\n                                            dbo.CalculateEstimatedOrActual(@ReadingCode,9)\r\n\t\t\t\t\t\t\t\t\t\t\t,FacilityName ,\r\n                                            ServiceAddress\r\n                                    FROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n                                    WHERE   ( UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid ) \r\n\t\t\t--\r\n\t\t\t--\tSet up for the next the Revised Billing Period row.\r\n\t\t\t--\r\n                            SET @SumAverageCCF = @SumAverageCCF + @CCFAverage \t  \r\n                            SET @idx = @idx + 1\r\n\t\t\t--\r\n\t\t\t--\tCalculate the next the Revised Billing Period row.\r\n                            SELECT  @CalculatedBillingPeriodRevision = [dbo].[CalculateNextBillingPeriod](@CalculatedBillingPeriodRevision,\r\n                                                              @BillingCycle)\r\n\t\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n                            SELECT  @CalculatedFromDate = [dbo].[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision,\r\n                                                              @TariffCode,\r\n                                                              @ConEdUtilityCode)\r\n\t\t\t--\r\n                            SELECT  @CalculatedMeterFromReading = @CalculatedMeterToReading \r\n\t\t\t-- Cast(@CalculatedMeterFromReading as dbo.MeterReadingNumber)\r\n\t\t\t--\tProcess the next Revised Billing Period row\r\n\t\t\t--\r\n                        END\r\n\t--\r\n\t--\tFinish up the last period's processing\r\n\t--\r\n\t--\tUse the (Nth -1) periods @CalculatedToDate as the \"FromDate\" and the acutal \"ToDate\" from the spanned record as the \"ToDate\"\r\n\t--\r\n                    SELECT  @CalculatedFromDate = @CalculatedToDate\r\n                    SELECT  @CalculatedToDate = @ToDate\r\n\t--\r\n\t--\tUse the (Nth -1) periods Calculated Meter From Reading as the \"MeterFromReading\" and the acutal \"MeterToReading\" from the spanned record as the \"MeterToReading\"\r\n\t--\r\n                    SELECT  @CalculatedMeterFromReading = @CalculatedMeterToReading \r\n                    SELECT  @CalculatedMeterToReading = CAST(@MeterToReading AS INT)\r\n\t--\r\n\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\t--\r\n                    SELECT  @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled](@CalculatedBillingPeriodRevision,\r\n                                                              @TotalGasSpannedBilledPercentage)\r\n\t--\r\n\t--\tDerive the net changes to avoid rounding errors\r\n\t--\r\n--\tset @BilledAmountMonthlyLastPeriod = @BilledAmount - @BilledAmountMonthlySum\r\n                    SET @ThermsMonthlyLastPeriod = @Therms - @ThermsMonthlySum\r\n                    SET @CCFMonthlyLastPeriod = @CCF - @CCFMonthlySum\r\n\t--\r\n\t--\tprint @AccountNumber+' '+@BillingPeriodRevision+' '+@FromDate+' '+@ToDate\r\n\t--\r\n\t--\r\n\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t--\tIt will note in EC3 that the transaction was derived.\r\n\t--\r\n                    SELECT  @Notes = 'CalcTherm '\r\n                            + CAST(@Therms AS VARCHAR(10)) + ' = '\r\n                            + CAST(@ThermFactor AS VARCHAR(6)) + ' * '\r\n                            + CAST(@CCF AS VARCHAR(10)) + ' for '\r\n                            + CAST(@DeltaNumberOfPeriods AS VARCHAR(6))\r\n                            + ' periods, First: ' + @FirstPeriodCanceled\r\n                            + ' ( ' + @MeterFromReading + ') Last: '\r\n                            + @BillingPeriodRevision + ' ( ' + @MeterToReading\r\n                            + '). ' + ' period: '\r\n                            + @CalculatedBillingPeriodRevision + ' Month %: '\r\n                            + CAST(@ApplyMonthlyPercentage AS VARCHAR(10))\r\n                            + ' - Total %: '\r\n                            + CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t--\r\n\t--\tINSERT the data into the table \"ConEd.UploadConEdisonMeterSummary\"\r\n\t--\r\n                    INSERT  INTO ConEd.UploadConEdisonMeterSummary\r\n                            ( AccountUtilityCompanySeqid ,\r\n                              OriginalAccountNumber ,\r\n                              OriginalMeterNumber ,\r\n                              NumberOfTransactions ,\r\n                              NumberOfRebillTransactions ,\r\n                              NumberOfCancelTransactions ,\r\n                              BillingPeriod ,\r\n                              BillingPeriodRevision ,\r\n                              FirstCancelPeriod ,\r\n                              BillingAction ,\r\n                              InitialCancelFromDate ,\r\n                              CurrentBillingToDate ,\r\n                              GasRateCode ,\r\n                              FromDate ,\r\n                              ToDate ,\r\n                              MeterFromReading ,\r\n                              MeterToReading ,\r\n                              Ccf ,\r\n                              Therms ,\r\n                              ThermsFactor ,\r\n                              MeterConstant ,\r\n                              TotalBillingDaysRebilled ,\r\n                              NumberOfBillingPeriods ,\r\n                              BillingDays ,\r\n                              BillingDate ,\r\n                              ReadingCode ,\r\n                              NumberOfDials ,\r\n                              MeterType ,\r\n                              ProcessedInTheCurrentPeriod ,\r\n                              ProcessEffectiveDate ,\r\n                              InitialPostingDate ,\r\n                              AuthenticatedUserID ,\r\n                              Notes ,\r\n                              DerivedFromSpannedBill ,\r\n                              SpannedBillingPeriodRevision ,\r\n                              SpannedFirstCanceledBillingPeriod ,\r\n                              SpannedCCF ,\r\n                              SpannedThermFactor ,\r\n                              SpannedTherm ,\r\n                              SpannedMonthlyPercentage ,\r\n                              SpannedTotalPercentage ,\r\n                              EstimatedOrActualBilling ,\r\n                              FacilityName ,\r\n                              ServiceAddress\r\n\t\t                    )\r\n                            SELECT  @ConEdUtilityCode ,\r\n                                    @AccountNumber ,\r\n                                    @OriginalMeterNumber ,\r\n                                    1 ,-- NumberOfTransactions, \r\n                                    1 ,-- NumberOfRebillTransactions,\r\n                                    0 ,-- NumberOfCancelTransactions,\r\n                                    @BillingPeriod ,\r\n                                    @CalculatedBillingPeriodRevision ,\r\n                                    @CalculatedBillingPeriodRevision ,\r\n                                    CASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision\r\n                                         THEN 'O'\r\n                                         ELSE 'A'\r\n                                    END ,-- BillingAction, \r\n                                    @CalculatedFromDate ,\r\n                                    @CalculatedToDate ,\r\n                                    @GasRateCode ,\r\n                                    @CalculatedFromDate ,\r\n                                    @CalculatedToDate ,\r\n                                    CAST(@CalculatedMeterFromReading AS VARCHAR(7)) ,  --dbo.MeterReadingNumber\r\n                                    CAST(@CalculatedMeterToReading AS VARCHAR(7)) ,  --dbo.MeterReadingNumber\r\n                                    @CCFMonthlyLastPeriod ,\r\n                                    @ThermsMonthlyLastPeriod ,\r\n                                    @ThermFactor ,\r\n                                    @MeterConstant ,\r\n                                    [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) ,\r\n                                    1 ,\r\n                                    [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) ,\r\n                                    @BillingDate ,\r\n                                    @ReadingCode ,\r\n                                    @NumberOfDials ,\r\n                                    'G' , -- MeterType,\r\n                                    'N' , --ProcessedInTheCurrentPeriod\r\n                                    [dbo].ConvertDateToYYYYMMDD(GETDATE()) , -- ProcessEffectiveDate\r\n                                    GETDATE() , -- InitialPostingDate\r\n                                    1 , --\tAuthenticatedUserID,\r\n                                    @Notes ,\r\n                                    'Y' , -- DerivedFromSpannedBill\r\n                                    @BillingPeriodRevision ,  -- SpannedBillingPeriodRevision\r\n                                    @FirstPeriodCanceled ,  -- SpannedFirstPeriodCanceled\r\n                                    @CCF ,  -- SpannedCCF\r\n                                    @ThermFactor ,  -- SpannedThermFactor\r\n                                    @Therms ,  -- SpannedTherms\r\n                                    @ApplyMonthlyPercentage ,  -- SpannedApplyMonthlyPercentage\r\n                                    @TotalGasSpannedBilledPercentage ,  -- SpannedTotalGasSpannedBilledPercentage\r\n                                    --CASE WHEN @ReadingCode < 15 THEN 'EST' ELSE 'ACT' END  -- EstimatedOrActualBilling\r\n\t\t\t\t\t\t\t\t\tdbo.CalculateEstimatedOrActual(@ReadingCode,9)\r\n                                    ,FacilityName ,\r\n                                    ServiceAddress\r\n                            FROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n                            WHERE   ( UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid ) \r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\n                    FETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonMeterTempSummarySpannedSeqid\r\n                END\r\n\r\n            CLOSE SpannedGasBillCursor;\r\n            DEALLOCATE SpannedGasBillCursor;\r\n\r\n\r\n\r\n        END -- 2 ends\r\nEND;",
      "created": "2025-06-10 21:41:26.763000",
      "last_altered": "2025-06-10 21:41:26.763000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_12_ProcessSpannedMeterBilling",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_12_ProcessSpannedMeterBilling` is designed to process spanned meter billing records for ConEdison. It performs two main tasks: first, it inputs spanned data into a temporary table, and second, it processes these spanned records to generate final billing records, which are then inserted into a summary table. The procedure handles complex calculations related to billing periods, meter readings, and energy usage, particularly for cases where billing spans multiple periods.\n\n#### 2. Complexity Level: High\nThe complexity of this stored procedure is high due to several factors:\n- It involves multiple steps with intricate calculations and logic to handle spanned billing periods.\n- It uses a cursor to iterate over records, which adds complexity and potential performance concerns.\n- The procedure includes numerous variable declarations and complex conditional logic to handle various scenarios, such as meter rollovers and billing period adjustments.\n- It relies on several user-defined functions for calculations, which adds layers of abstraction.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on data already present in the `ConEd.UploadConEdisonMeter` table and processes it into temporary and summary tables.\n\n#### 4. Business Logic and Workflow\n- **Step 1: Input Spanned Data**\n  - The procedure begins by truncating the `ConEd.UploadConEdisonMeterTempSummarySpanned` table and reseeding its identity column.\n  - It then inserts records from `ConEd.UploadConEdisonMeter` into this temporary table where `DeltaNumberOfPeriods` is greater than 1, indicating spanned billing periods.\n\n- **Step 2: Process Spanned Records**\n  - A cursor is declared to iterate over records in the temporary table.\n  - For each record, various calculations are performed to determine billing details such as therms, CCF, and meter readings.\n  - The procedure calculates the percentage of gas usage for each billing period and adjusts readings for meter rollovers.\n  - It inserts processed records into `ConEd.UploadConEdisonMeterSummary`, including detailed notes on how the data was derived.\n  - The cursor continues to fetch and process records until all are handled.\n\n#### 5. Performance Considerations\n- **Cursor Usage**: The use of a cursor can lead to performance bottlenecks, especially with large datasets, as it processes records row by row.\n- **Complex Calculations**: The procedure performs numerous calculations and calls to user-defined functions, which can be resource-intensive.\n- **Table Truncation**: Truncating and reseeding the temporary table could be costly if the table is large or frequently accessed by other processes.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: The procedure truncates a table, which could lead to data loss if other processes are writing to it simultaneously.\n- **Error Handling**: There is no explicit error handling within the procedure, which could lead to unhandled exceptions and data inconsistencies.\n- **Scalability**: The use of a cursor and complex logic may not scale well with increasing data volumes, potentially leading to long execution times.\n- **Data Integrity**: The procedure assumes that all necessary data is present and correctly formatted, which may not always be the case, leading to incorrect calculations or data corruption.\n\nOverall, while the stored procedure is comprehensive in handling spanned meter billing, its complexity and potential performance issues warrant careful consideration and testing, especially in a production environment.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 6603,
      "api_response_id": "chatcmpl-ByeuLJdsLn79W8JDMF4gzVKBBKHeD"
    },
    "analysis_timestamp": "2025-07-29 09:44:14"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_13_FinalizeMeterBillingProcessing",
      "definition": "CREATE PROCEDURE [ConEd].[usp_Upload_13_FinalizeMeterBillingProcessing]\r\nAS \r\nBEGIN\r\n\t/*\r\n\tSteps:\r\n\t1) Merge single period and spaned meter record into one meter record per period\r\n\t2) Correct billingperiod\r\n\t3) Update note for meter discrepancy\r\n\t*/\r\n\t\r\n\t/*\r\n\tMerge single period and spaned meter record into one meter record per period\r\n\t*/\r\n\tTRUNCATE TABLE ConEd.UploadConEdisonMeterBillingAdjustmentGas;\r\n\r\n\t--\tMake sure that the max BillingPeriodRevision is less than or equal to the current BillingPeriod\r\n\tUPDATE ConEd.UploadConEdisonMeterSummary\r\n\tSET BillingPeriodRevision =case when BillingPeriodRevision> BillingPeriod then BillingPeriod else BillingPeriodRevision end \r\n\tWHERE BillingPeriod < BillingPeriodRevision;\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t\t\t(AccountUtilityCompanySeqid,\r\n\t\t\tOriginalAccountNumber,\r\n\t\t\tOriginalMeterNumber,\r\n\t\t\tBillingPeriod,\r\n\t\t\tBillingPeriodRevision,\r\n\t\t\tFirstCancelPeriod,\r\n\t\t\tNumberOfTransactions,\r\n\t\t\tNumberOfRebillTransactions,\r\n\t\t\tNumberOfCancelTransactions,\r\n\t\t\tBillingAction,\r\n\t\t\tInitialCancelFromDate,\r\n\t\t\tCurrentBillingToDate,\r\n\t\t\tGasRateCode,\r\n\t\t\tFromDate,\r\n\t\t\tToDate,\r\n\t\t\tFromReadingDate,\r\n\t\t\tToReadingDate,\r\n\t\t\tMeterFromReading,\r\n\t\t\tMeterToReading,\r\n\t\t\tCcf,\r\n\t\t\tTherms,\r\n\t\t\tThermsFactor,\r\n\t\t\tMeterConstant,\r\n\t\t\tTotalBillingDaysRebilled,\r\n\t\t\tNumberOfBillingPeriods,\r\n\t\t\tBillingDays,\r\n\t\t\tBillingDate,\r\n\t\t\tReadingCode,\r\n\t\t\tNumberOfDials,\r\n\t\t\tMeterType,\r\n\t\t\tProcessedInTheCurrentPeriod,\r\n\t\t\tProcessEffectiveDate,\r\n\t\t\tDerivedFromSpannedBill,\r\n\t\t\tSpannedBillingPeriodRevision,\r\n\t\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\t\tSpannedCCF,\r\n\t\t\tSpannedThermFactor,\r\n\t\t\tSpannedTherm,\r\n\t\t\tSpannedMonthlyPercentage,\r\n\t\t\tSpannedTotalPercentage,\r\n\t\t\tEstimatedOrActualBilling,\r\n\t\t\tAuthenticatedUserID,\r\n\t\t\tNotes,\r\n\t\t\tInitialPostingDate,\r\n\t\t\tFacilityName,\r\n\t\t\tServiceAddress,\r\n\t\t\tBillingCycle)\r\n\tSELECT MIN(AccountUtilityCompanySeqid) AS AccountUtilityCompanySeqid\r\n\t\t,OriginalAccountNumber\r\n\t\t,OriginalMeterNumber\r\n\t\t,MIN(BillingPeriod) AS BillingPeriod\r\n\t\t,BillingPeriodRevision\r\n\t\t,MIN(FirstCancelPeriod) AS FirstCancelPeriod\r\n\t\t,COUNT(NumberOfTransactions) AS NumberOfTransactions\r\n\t\t,COUNT(NumberOfRebillTransactions) AS NumberOfRebillTransactions\r\n\t\t,MIN(0) AS NumberOfCancelTransactions\r\n\t\t,MIN(BillingAction) AS BillingAction\r\n\t\t,MIN(InitialCancelFromDate) AS InitialCancelFromDate\r\n\t\t,MAX(CurrentBillingToDate) AS CurrentBillingToDate\r\n\t\t,MIN(GasRateCode) AS GasRateCode\r\n\t\t,MIN(FromDate) AS FromDate\r\n\t\t,MAX(ToDate) AS ToDate\r\n\t\t,MIN(FromDate) AS FromReadingDate\r\n\t\t,MAX(ToDate) AS ToReadingDate\r\n\t\t,MAX(MeterFromReading) AS MeterFromReading\r\n\t\t,MAX(MeterToReading) AS MeterToReading\r\n\t\t,SUM(Ccf) AS Ccf\r\n\t\t,SUM(Therms) AS Therms\r\n\t\t,MIN(ThermsFactor) AS ThermsFactor\r\n\t\t,MIN(MeterConstant) AS MeterConstant\r\n\t\t,SUM(TotalBillingDaysRebilled) AS TotalBillingDaysRebilled\r\n\t\t,SUM(NumberOfBillingPeriods) AS NumberOfBillingPeriods\r\n\t\t,SUM(BillingDays) AS BillingDays\r\n\t\t,MIN(BillingDate) AS BillingDate\r\n\t\t,MIN(ReadingCode) AS ReadingCode\r\n\t\t,MIN(NumberOfDials) AS NumberOfDials\r\n\t\t,MIN(MeterType) AS MeterType\r\n\t\t,MIN(ProcessedInTheCurrentPeriod) AS ProcessedInTheCurrentPeriod\r\n\t\t,MIN(ProcessEffectiveDate) AS ProcessEffectiveDate\r\n\t\t,MIN(DerivedFromSpannedBill) AS DerivedFromSpannedBill\r\n\t\t,MIN(SpannedBillingPeriodRevision) AS SpannedBillingPeriodRevision\r\n\t\t,MIN(SpannedFirstCanceledBillingPeriod) AS SpannedFirstCanceledBillingPeriod\r\n\t\t,MIN(SpannedCCF) AS SpannedCCF\r\n\t\t,MIN(SpannedThermFactor) AS SpannedThermFactor\r\n\t\t,MIN(SpannedTherm) AS SpannedTherm\r\n\t\t,MIN(SpannedMonthlyPercentage) AS SpannedMonthlyPercentage\r\n\t\t,MIN(SpannedTotalPercentage) AS SpannedTotalPercentage\r\n\t\t,MAX(EstimatedOrActualBilling) AS EstimatedOrActualBilling\r\n\t\t,MIN(AuthenticatedUserID) AS AuthenticatedUserID\r\n\t\t,MIN(Notes) AS Notes\r\n\t\t,MIN(InitialPostingDate) AS InitialPostingDate\r\n\t\t,MIN(FacilityName) AS FacilityName\r\n\t\t,MIN(ServiceAddress) AS ServiceAddress\r\n\t\t,'M'\r\n\tFROM ConEd.UploadConEdisonMeterSummary\r\n\tGROUP BY OriginalAccountNumber, OriginalMeterNumber, BillingPeriodRevision;\r\n\r\n\t-- setting the unique seq IDs\r\n\tUPDATE G\r\n\tSET UniqueAccountSeqID = Common.udf_GetUniqueAccountSeqId(G.OriginalAccountNumber)\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G\r\n\tWHERE G.UniqueAccountSeqID IS NULL;\r\n\r\n\tUPDATE MG \r\n\tSET UniqueMeterSeqID = Common.udf_GetUniqueMeterSeqId(MG.OriginalMeterNumber)\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG\r\n\tWHERE MG.UniqueMeterSeqID IS NULL;\r\n\r\n\tUPDATE MG \r\n\tSET UniqueAccountSeqID = Common.udf_GetUniqueAccountSeqId(MG.OriginalAccountNumber)\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG  \r\n\tWHERE MG.UniqueAccountSeqID is NULL;\r\n\r\n\t/*\r\n\t2) Correct billingperiod\r\n\t*/\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET RevisedBilledCCF = vGU.MeterCcf + vGU.netCCF\r\n\t\t,MeterToReading = CASE WHEN (UCM.MeterFromReading + vGU.MeterCcf + vGU.netCCF) > 9999999 THEN 9999999\r\n\t\t\tELSE (UCM.MeterFromReading + vGU.MeterCcf + vGU.netCCF) END\r\n\t\t,Ccf = vGU.MeterCcf + vGU.netCCF\r\n\tFROM ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS vGU\r\n\t\tINNER JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UCM\r\n\t\t\tON vGU.UniqueAccountSeqID = UCM.UniqueAccountSeqID\r\n\t\t\t\tAND vGU.BillingPeriodRevision = UCM.BillingPeriodRevision\r\n\tWHERE vGU.netCCF <> 0 AND UCM.NumberOfRebillTransactions > 1;\r\n\r\n\t/*\r\n    UPDATE G\r\n    SET RevisedBilledCCF = D.MeterCcf + D.netCCF\r\n\t\t,MeterToReading = G.MeterFromReading + D.MeterCcf + D.netCCF\r\n\t\t,Ccf = D.MeterCcf + D.netCCF\r\n    FROM ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS D\r\n        INNER JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS G ON D.UniqueAccountSeqID = G.UniqueAccountSeqID\r\n\t\t\tAND D.BillingPeriodRevision = G.BillingPeriodRevision\r\n    WHERE D.netCCF <> 0 AND G.NumberOfRebillTransactions > 1;\r\n\t*/\r\n\r\n\t/*\r\n\t3)  Update note for meter discrepancy \r\n\t*/\r\n      \r\n\t--\tIdentify all Gas Usage Discrepancies\r\n    SELECT * FROM ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling;\r\n\t\r\n\t--\tUpdate the notes of all meters that have a discrepancy with the account billing and\r\n\t--\tpreserve the incorrect amount as part of what was actual reported by the utility company.\r\n    UPDATE G\r\n    SET Notes = 'Account and Meter Billing Discrepancies  '\r\n        + CASE WHEN D.netTherms <> 0 THEN 'Net Therms(' + CAST(D.netTherms AS VARCHAR(10)) + ') '\r\n\t\t+ CASE WHEN D.netCCF <> 0 THEN ')  CCF(' + CAST(D.netCCF AS VARCHAR(10)) + ')  ' ELSE ''\r\n        END + ':           Reported: Therms(' + CAST(D.AccountTotalTherms AS VARCHAR(10)) + ')           CCF('\r\n        + CAST(D.AccountTotalCcf AS VARCHAR(10)) + ')           ThermsFactor(' + CAST(D.AccountTotalThermsFactor AS VARCHAR(10)) + ')  '\r\n\t\tELSE '' END\r\n    FROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS G\r\n\t\tINNER JOIN ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS D ON G.BillingPeriod = D.BillingPeriod\r\n\t\t\tAND G.BillingPeriodRevision = D.BillingPeriodRevision AND G.UniqueAccountSeqID = D.UniqueAccountSeqID;\r\nEND;",
      "created": "2025-06-10 21:41:26.780000",
      "last_altered": "2025-06-10 21:41:26.780000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_13_FinalizeMeterBillingProcessing",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_13_FinalizeMeterBillingProcessing` is designed to process and finalize meter billing data for a utility company, specifically focusing on gas usage. It performs several key operations: merging meter records, correcting billing periods, and updating notes for discrepancies between account and meter-reported billing. The procedure involves data manipulation across multiple tables, ensuring data consistency and accuracy in billing records.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is medium due to the following factors:\n- It involves multiple SQL operations, including `TRUNCATE`, `UPDATE`, `INSERT`, and `SELECT`.\n- It uses aggregate functions and conditional logic to process data.\n- It interacts with multiple tables and views, requiring a good understanding of the database schema.\n- It includes business logic for handling discrepancies and updating records accordingly.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on predefined tables and views within the `ConEd` schema.\n\n#### 4. Business Logic and Workflow\n1. **Merge Meter Records**: \n   - The procedure starts by truncating the `UploadConEdisonMeterBillingAdjustmentGas` table to remove existing data.\n   - It updates the `BillingPeriodRevision` in `UploadConEdisonMeterSummary` to ensure it does not exceed the `BillingPeriod`.\n   - It inserts aggregated and merged meter records into `UploadConEdisonMeterBillingAdjustmentGas`, consolidating data from `UploadConEdisonMeterSummary`.\n\n2. **Set Unique Identifiers**:\n   - Updates are performed to set unique sequence IDs for accounts and meters using user-defined functions `udf_GetUniqueAccountSeqId` and `udf_GetUniqueMeterSeqId`.\n\n3. **Correct Billing Period**:\n   - Updates are made to `UploadConEdisonMeterBillingAdjustmentGas` to adjust `RevisedBilledCCF`, `MeterToReading`, and `Ccf` based on discrepancies identified in `uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling`.\n\n4. **Update Notes for Discrepancies**:\n   - The procedure identifies gas usage discrepancies and updates the `Notes` field in `UploadConEdisonMeterBillingAdjustmentGas` to reflect these discrepancies, preserving the reported values.\n\n#### 5. Performance Considerations\n- **Truncation and Bulk Operations**: The use of `TRUNCATE` and bulk `INSERT` operations can be efficient for large datasets but may cause locking issues if not managed properly.\n- **Indexing**: Ensure that the tables involved have appropriate indexing to optimize `JOIN` and `UPDATE` operations, especially on columns like `UniqueAccountSeqID` and `BillingPeriodRevision`.\n- **Concurrency**: The procedure should be tested for concurrency to ensure it handles simultaneous executions without data integrity issues.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: The procedure modifies critical billing data. Any errors in logic or execution could lead to incorrect billing records.\n- **Concurrency and Locking**: The use of `TRUNCATE` and large `UPDATE` operations could lead to locking issues, affecting other transactions.\n- **Error Handling**: The procedure lacks explicit error handling, which could result in unhandled exceptions and incomplete processing.\n- **Scalability**: As data volume grows, the performance of the procedure should be monitored and optimized, particularly the aggregation and update steps.\n- **Dependency on External Functions**: The procedure relies on user-defined functions for generating unique IDs, which must be maintained and optimized to prevent bottlenecks.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2937,
      "api_response_id": "chatcmpl-ByeulGI0um3nHjBsYjMx5nddXvj7R"
    },
    "analysis_timestamp": "2025-07-29 09:44:31"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_14_PrepareDataTransfer",
      "definition": "-- =============================================\r\n-- Update History:\r\n-- UPDATE  VY  11/27/2018 Modified for UniqueAccountSeqID\r\n-- UPDATE  VY  12/20/2018 Modified for UniqueMeterSeqID\r\n-- update\tzd\t4/16/2019 added udf_GetAccountSeqId when the process picks up account seq id for new transactions\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_14_PrepareDataTransfer]\r\nAS\r\nBEGIN\r\n\tDECLARE @CurrentBillingPeriod AS VARCHAR(6);\r\n\r\n\tSELECT TOP (1) @CurrentBillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas;\r\n\r\n\t-- Intialize the table UploadConEdisonCurrentlyBilledAccounts by truncating it.\r\n\tTRUNCATE table ConEd.UploadConEdisonCurrentlyBilledAccounts;\r\n\r\n\t-- Insert into UploadConEdisonCurrentlyBilledAccounts all of the distinct account numbers that were billed \r\n\t-- for the currently billing period\r\n\tINSERT INTO ConEd.UploadConEdisonCurrentlyBilledAccounts(OriginalAccountNumber)\r\n\tSELECT DISTINCT OriginalAccountNumber FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas;\r\n\r\n\t-- Remove from the UploadConEdisonCurrentlyBilledAccounts table all of the account numbers that were billed \r\n\t-- as an original bill (Billing (BillingPeriod = BillingPeriodRevision)\r\n\tDELETE FROM ConEd.UploadConEdisonCurrentlyBilledAccounts\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G\r\n\t\tINNER JOIN ConEd.UploadConEdisonCurrentlyBilledAccounts AS C ON G.OriginalAccountNumber = C.OriginalAccountNumber\r\n\tWHERE G.BillingPeriod = G.BillingPeriodRevision;\r\n\tSELECT @@rowcount;\r\n\r\n\t--\tAny account remaining is an adjustment account that does not have an orginal bill.  A stub will be needed to handle the net charges\r\n\t--\tas a paid adjustment and original billed amount,revised billed amount and original paid amount will be $0.00 and the energyusage\r\n\t--\twill be 0.\r\n\t--\r\n\t--select 'Accounts Without an Original Bill',* from ConEd.UploadConEdisonCurrentlyBilledAccounts\r\n\t--\r\n\t--\tFind all of the existing accounts known to EC3 and the follwing fields\r\n\t--\t\tAdjustedAccount =Account.AccountSeqid,\r\n\t--\t\tAccountStatus =Account.AccountStatus,\r\n\t--\t\tAccountpreviousStatus =Account.AccountPreviousStatus,\r\n\t--\t\tAccountUtilityCompanySeqid =Account.UtilityAccountProvider\r\n\r\n\t-- setting the unique seq IDs\r\n\tUPDATE G\r\n\tSET UniqueAccountSeqID = Common.udf_GetUniqueAccountSeqId(G.OriginalAccountNumber)\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G\r\n\tWHERE G.UniqueAccountSeqID IS NULL;\r\n\r\n\tUPDATE MG \r\n\tSET UniqueMeterSeqID = Common.udf_GetUniqueMeterSeqId(MG.OriginalMeterNumber)\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG\r\n\tWHERE MG.UniqueMeterSeqID IS NULL;\r\n\r\n\tUPDATE MG \r\n\tSET UniqueAccountSeqID = Common.udf_GetUniqueAccountSeqId(MG.OriginalAccountNumber)\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG  \r\n\tWHERE MG.UniqueAccountSeqID is null\r\n    \r\n\tupdate AEMT set AEMT.UniqueMeterSeqID =  M.UniqueMeterSeqid, AEMT.UniqueAccountSeqID= M.UniqueAccountSeqID\r\n\tfrom Billing.AccountExchangeMeterTrack as AEMT\r\n\tinner join Billing.Meter as M on M.MeterSeqid = AEMT.OriginalMeterSeqid\r\n\twhere AEMT.UniqueMeterSeqID is null\r\n\r\n\t-------------------\r\n\r\n\tUPDATE G\r\n\tSET AdjustedAccount = A.AccountSeqid,\r\n\t\tAccountStatus = A.AccountStatus,\r\n\t\tAccountpreviousStatus = A.AccountPreviousStatus,\r\n\t\tAccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\tFROM Billing.Account AS A INNER JOIN\r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas AS G ON A.OriginalAccountNumber = G.OriginalAccountNumber\r\n\tWHERE A.UtilityAccountProvider = 9;\r\n\r\n\t--\tAssume that the derived PriorRevisedXXXX,RevisedXXXX & CanceledXXXX are correct.  The next  \r\n\t--\tupdate will grab the correct information from the account billing and account billing gas that being\r\n\t--\tadjusted.\r\n\t--\r\n\t--\tFormulas:\r\n\t--\r\n\t--\tThese formulas work in the same manner Amount,CCF or Therm.\r\n\t--\t\tTotalRebilledAmount is the aggregated Rebilled Amount inclusive of erroneous net zero rebills reported by Con Edison\r\n\t--\t\tTotalCanceledAmount is the aggregated Canceled Amount inclusive of erroneous net zero cancels reported by Con Edison\r\n\t--\t\tPriorRevisedBilledAmount is the revised billed amount in EC3 or the reported TotalCanceledAmount times minus one to \r\n\t--\t\tsimulate the revised billed amount in EC3.\r\n\t--\r\n\t--\t\tCanceledBilledAmount is the revised billed amount times minus one in EC3 or the reported TotalCanceledAmount to \r\n\t--\t\tsimulate the Canceled billed amount in EC3.\r\n\t--\r\n\t--\t\tRevisedBilledAmount is derived by adding the PriorRevisedBilledAmount + TotalRebilledAmount + TotalCanceledAmount whether it was \r\n\t--\t\treported by Con Edison or taken from AB.RevisedBilledAmount\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET TotalRebilledAmount = ISNULL(TotalRebilledAmount, 0),\r\n\t\tTotalCanceledAmount = ISNULL(TotalCanceledAmount, 0),\r\n\t\tPriorRevisedBilledAmount = ISNULL(TotalCanceledAmount, 0)*-1.00,\r\n\t\tCanceledBilledAmount = ISNULL(TotalCanceledAmount, 0),\r\n\t\tRevisedBilledAmount = ISNULL(TotalRebilledAmount, 0),--ISNULL(TotalCanceledAmount, 0)*-1.00+ (ISNULL(TotalRebilledAmount, 0) + ISNULL(TotalCanceledAmount, 0)),\r\n\t\tTotalTherms = ISNULL(TotalTherms, 0),\r\n\t\tCancelTotalTherms = ISNULL(CancelTotalTherms, 0),\r\n\t\tPriorRevisedTherms = CancelTotalTherms*-1,\r\n\t\tCanceledTherms = CancelTotalTherms,\r\n\t\tRevisedTherms = ISNULL(TotalTherms, 0),-- CancelTotalTherms*-1 + (TotalTherms+CancelTotalTherms),\r\n\t\tTotalCCF = ISNULL(TotalCCF, 0),\r\n\t\tCancelTotalCCF = ISNULL(CancelTotalCCF, 0),\r\n\t\tPriorRevisedCCF = CancelTotalCCF*-1,\r\n\t\tCanceledCCF = CancelTotalCCF,\r\n\t\tRevisedCCF = ISNULL(TotalCCF, 0),-- CancelTotalCCF*-1+(TotalCCF+CancelTotalCCF),\r\n\t\tAccountStatus = 'UA',\r\n\t\tAccountpreviousStatus = 'NU',\r\n\t\tAccountStatusPeriod = @CurrentBillingPeriod,\r\n\t\tInitialCancelFromDate = Case when InitialCancelFromDate is NULL then FromDate else InitialCancelFromDate end,\r\n\t\tCurrentBillingToDate = Case when CurrentBillingToDate is NULL then ToDate else CurrentBillingToDate end,\r\n\t\tSpannedThermFactor = Case when SpannedThermFactor is NULL then ThermsFactor else SpannedThermFactor END;\r\n\r\n\t--\tSetup the core billing information for the current bill(G.BillingPeriod = @CurrentBillingPeriod)\r\n\tUPDATE G\r\n\tSET TotalRebilledAmount = ISNULL(TotalRebilledAmount, 0),\r\n\t\tTotalCanceledAmount = ISNULL(TotalCanceledAmount, 0),\r\n\t\tPriorRevisedBilledAmount =AB.RevisedBilledAmount,\r\n\t\tCanceledBilledAmount = ISNULL(TotalCanceledAmount, 0) ,--AB.RevisedBilledAmount*-1,\r\n\t\tRevisedBilledAmount = ISNULL(TotalRebilledAmount, 0), --AB.RevisedBilledAmount+ (ISNULL(TotalRebilledAmount, 0) + ISNULL(TotalCanceledAmount, 0)),\r\n\t\tTotalTherms = ISNULL(G.TotalTherms, 0),\r\n\t\tCancelTotalTherms = ISNULL(G.CancelTotalTherms, 0),\r\n\t\tPriorRevisedTherms = ISNULL(AB.AccountEnergyUsage, 0),\r\n\t\tCanceledTherms = ISNULL(G.CancelTotalTherms, 0), -- ISNULL(AB.AccountEnergyUsage*-1, 0),\r\n\t\tRevisedTherms = ISNULL(G.TotalTherms, 0),--ISNULL(AB.AccountEnergyUsage, 0) + (ISNULL(G.TotalTherms, 0)+ISNULL(G.CancelTotalTherms, 0)),\r\n\t\tTotalCCF = ISNULL(G.TotalCCF, 0),\r\n\t\tCancelTotalCCF = ISNULL(G.CancelTotalCCF, 0),-- ISNULL(G.CancelTotalCCF, 0),\r\n\t\tPriorRevisedCCF = ISNULL(BG.TotalCCF, 0),\r\n\t\tCanceledCCF = ISNULL(G.CancelTotalCCF, 0),-- ISNULL(BG.TotalCCF*-1, 0),\r\n\t\tRevisedCCF = ISNULL(G.TotalCCF, 0) -- ISNULL(BG.TotalCCF, 0)+(ISNULL(G.TotalCCF, 0)+ISNULL(G.CancelTotalCCF, 0))\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G INNER JOIN\r\n\t\tBilling.AccountBilling AS AB ON G.BillingPeriodRevision = AB.BillingPeriod AND \r\n\t\tG.BillingPeriodRevision = AB.BillingPeriodRevision \r\n\t\t--AND G.OriginalAccountNumber = AB.OriginalAccountNumber\r\n\t\tAND G.UniqueAccountSeqID = AB.UniqueAccountSeqId\r\n\t\tINNER JOIN Billing.AccountBillingGas AS BG ON AB.AccountBillingSeqid = BG.AccountBillingSeqid\r\n\tWHERE G.BillingPeriod = @CurrentBillingPeriod;\r\n\r\n\t--\tStart getting the existing information from EC3 about the account (ie. Sequence Id's)\r\n\tUPDATE G\r\n\tSET AdjustedAccount = A.AccountSeqid,\r\n\t\tAccountStatus = 'AC',-- A.AccountStatus,\r\n\t\tAccountpreviousStatus = 'AC',-- A.AccountpreviousStatus, \r\n\t\tCurrentInvoiceAccountBillingGroup = 2,-- A.CurrentInvoiceAccountGroup,\r\n\t\tAccountUtilityCompanySeqid = A.UtilityAccountProvider,\r\n\t\tEnergySource = 5,-- A.EnergySource,\r\n\t\tIsTimeOfDayAccount = 'N',\r\n\t\tLastPeriodModified = G.BillingPeriod,\r\n\t\tBillingCycle = A.BillingCycle,\r\n\t\tSalesType = A.SalesType,\r\n\t\tManualPaymentOverride = 'N',\r\n\t\tManualDataEntry = 'N'\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G INNER JOIN\r\n\t\tBilling.Account AS A ON G.UniqueAccountSeqID = A.UniqueAccountSeqid AND A.IsCurrentRecord = 'Y' AND G.AccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\t\tINNER JOIN Billing.AccountBilling AS AB ON A.UniqueAccountSeqid = AB.UniqueAccountSeqId AND A.IsCurrentRecord = 'Y';\r\n\r\n\t--\tGet all of the prior period adjustment sequence ids from the AccountBilling and AccountBillingGas tables.\r\n\tUPDATE G\r\n\tSET AdjustedAccountBilling =AB.AccountBillingSeqid,\r\n\t\tAdjustedAccountBillingGas = BG.AccountBillingGasSeqid, -- Fixed Peter\r\n\t\tAccountStatus = CASE WHEN AB.AccountBillingStatus IS NULL THEN 'BA' ELSE AB.AccountBillingStatus END ,\r\n\t\tAccountpreviousStatus = CASE WHEN AB.PreviousAccountBillingStatus IS NULL THEN 'NB' ELSE AB.PreviousAccountBillingStatus END ,\r\n\t\tAccountStatusPeriod = CASE WHEN AB.AccountBillingStatusCodePeriod IS NULL THEN @CurrentBillingPeriod ELSE AB.AccountBillingStatusCodePeriod END \r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G \r\n\tINNER JOIN Billing.AccountBilling AS AB ON \r\n\t\tG.BillingPeriodRevision = AB.BillingPeriod \r\n\t\tAND G.BillingPeriodRevision = AB.BillingPeriodRevision \r\n\t\tAND G.UniqueAccountSeqID = AB.UniqueAccountSeqId\r\n\t\t--AND G.OriginalAccountNumber = AB.OriginalAccountNumber \r\n\r\n\t\tINNER JOIN Billing.AccountBillingGas AS BG ON AB.AccountBillingSeqid = BG.AccountBillingSeqid \r\n\tWHERE G.BillingPeriod <> G.BillingPeriodRevision;\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AccountStatus = 'BA',\r\n\t\tAccountpreviousStatus = 'NB',\r\n\t\tAccountStatusPeriod = @CurrentBillingPeriod,\r\n\t\tPriorRevisedCCF = 0,\r\n\t\tRevisedCCF = ISNULL(TotalCCF, 0),\r\n\t\tCanceledCCF = ISNULL(CancelTotalCCF, 0),\r\n\t\tPriorRevisedTherms =0,\r\n\t\tRevisedTherms = ISNULL(TotalTherms, 0),\r\n\t\tCanceledTherms = ISNULL(CancelTotalTherms, 0)\r\n\tWHERE AccountStatus <> 'BC' AND BillingPeriod <> BillingPeriodRevision AND AdjustedAccountBilling IS NULL;\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET CurrentInvoiceAccountBillingGroup = 2,  \r\n\t\tPriorRevisedCCF = 0,\r\n\t\tRevisedCCF = ISNULL(TotalCCF, 0),\r\n\t\tCanceledCCF = ISNULL(CancelTotalCCF, 0),\r\n\t\tPriorRevisedTherms = 0,\r\n\t\tRevisedTherms = ISNULL(TotalTherms, 0),\r\n\t\tCanceledTherms = ISNULL(CancelTotalTherms, 0)\r\n\tWHERE AccountStatus IN ('UA','AC') AND BillingPeriod = BillingPeriodRevision AND AdjustedAccountBilling IS NULL;\r\n\r\n\t-- Account and Meter Billing usage Discrepancies are noted in the meter billing and the \r\n\t-- reported information saved as the rebilled amount.\r\n\tUPDATE MG\r\n\tSET Notes ='Account and Meter Billing usage Discrepancies  ' +\r\n\t\tCASE WHEN netTherms <> 0 THEN 'Net Therms('+CAST(netTherms AS VARCHAR(10))+') ' +\r\n\t\tCASE WHEN netCCF <> 0 THEN ')  CCF('+CAST(netCCF AS VARCHAR(10))+')  '  ELSE '' END + \r\n\t\t':  Reported: Therms('+CAST(AccountTotalTherms AS VARCHAR(10)) +')  CCF('+CAST(AccountTotalCcf AS VARCHAR(10)) +')  ThermsFactor('+CAST(AccountTotalThermsFactor AS VARCHAR(10)) +')  ' ELSE '' END --+\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG \r\n\t\tINNER JOIN ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS UR \r\n\t\tON MG.BillingPeriod = UR.BillingPeriod \r\n\t\tAND MG.UniqueAccountSeqID = UR.UniqueAccountSeqID\r\n\t\t--AND MG.OriginalAccountNumber = UR.OriginalAccountNumber\r\n\t\tAND MG.BillingPeriodRevision = UR.BillingPeriodRevision;\r\n\r\n\t--\tAssume that all of the meter billing rows are unknown meters on existing accounts and the Meter Billing Status Period is the current processing\r\n\t--\tbilling period.  This is processing by exception.\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET NumberOfCancelTransactions = 0,\r\n\t\tMeterBillingStatus = 'UM',\r\n\t\tMeterBillingPreviousStatus = 'NU',\r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod,\r\n\t\tRevisedBilledCCF = ISNULL(Ccf, 0),\r\n\t\tCanceledBilledCCF = 0,\r\n\t\tRevisedBilledTherms = ISNULL(Therms, 0),\r\n\t\tCanceledBilledTherms = 0,\r\n\t\tMeterReset = CASE WHEN Notes IS NULL THEN 'N' \r\n\t\t\tELSE CASE WHEN CHARINDEX('Reset:',Notes) <> 0 THEN 'Y' ELSE 'N' END\r\n\t\t\tEND\r\n\t\t\r\n\t--\tThe ConEd.UploadConEdisonMeterBillingAdjustmentGas is being joined with the ConEd.UploadConEdisonAccountBillingAdjustmentGas table to link the\r\n\t--\texisting meter billing transactions with their account billing conterpart.  The account table is being joined with the UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\ttable since the all of the known accounts sequence id has been updated in that table.  The UploadConEdisonMeterBillingAdjustmentGas is being joined with \r\n\t--\tBilling.Meter and Billing.AccountExchangeMeterTrack to identify all meters and the AccountExchangeMeterTrack information that is currently known to EC3.\r\n\t--\r\n\t--\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t--\t\tBilling.Account\r\n\t--\t\tBilling.Meter \r\n\t--\t\tBilling.AccountExchangeMeterTrack \r\n\t--\r\n\t--\tAfter the update,all of the meters that are unknown to EC3 will have a Status code of 'UM'.\r\n\tUPDATE MG\r\n\tSET AccountUtilityCompanySeqid =A.UtilityAccountProvider,\r\n\t\tAccountBilled =A.AccountSeqid,\r\n\t\tMeterBilled =M.MeterSeqid,\r\n\t\tAccountExchangeMeterTrackSeqid = NULL , --AEMT.AccountExchangeMeterTrackSeqid,\r\n\t\tMeterBillingStatus ='AC', ---  M.MeterStatus,\r\n\t\tMeterBillingPreviousStatus ='AC', ---  M.MeterPreviousStatus,\r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod -- M.MeterStatusCodePeriod\r\n\tFROM Billing.Account AS A \r\n\t\tINNER JOIN Billing.Meter AS M ON M.UniqueAccountSeqID = A.UniqueAccountSeqid AND A.IsCurrentRecord ='Y' AND M.IsCurrentRecord ='Y'\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G  ON G.UniqueAccountSeqID = A.UniqueAccountSeqid\r\n\t\tINNER JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG \r\n\t\tON MG.UniqueAccountSeqID = G.UniqueAccountSeqID \r\n\t\tAND mg.UniqueMeterSeqID = m.UniqueMeterSeqid\r\n\t\tAND G.BillingPeriod = MG.BillingPeriod \r\n\t\tAND G.BillingPeriodRevision = MG.BillingPeriodRevision \r\n\r\n\t--FROM Billing.AccountExchangeMeterTrack AS AEMT \r\n\t--\tINNER JOIN Billing.Account AS A ON AEMT.OriginalAccountSeqid = A.AccountSeqid AND AEMT.OriginalAccountSeqid = A.AccountSeqid \r\n\t--\tINNER JOIN Billing.Meter AS M ON  AEMT.OriginalMeterSeqid = M.MeterSeqid AND AEMT.OriginalMeterSeqid = M.MeterSeqid \r\n\t--\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G \r\n\t--\tINNER JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG \r\n\t--\tON G.BillingPeriod = MG.BillingPeriod AND G.BillingPeriodRevision = MG.BillingPeriodRevision\r\n\t--\tAND G.OriginalAccountNumber = MG.OriginalAccountNumber \r\n\t--\tON A.AccountSeqid = G.AdjustedAccount \r\n\t--\t--AND M.OriginalAccountNumber = MG.OriginalAccountNumber AND M.OriginalMeterNumber = MG.OriginalMeterNumber \r\n\t--\tAND AEMT.OriginalAccountNumber = MG.OriginalAccountNumber AND AEMT.OriginalMeterNumber = MG.OriginalMeterNumber\r\n\t--\tAND mg.UniqueMeterSeqID = m.UniqueMeterSeqid\r\n\t--WHERE A.IsCurrentRecord ='Y' AND M.IsCurrentRecord ='Y'\r\n\r\n-- UPDATING AccountExchangeMeterTrackSeqid for legacy\r\nUPDATE MG SET MG.AccountExchangeMeterTrackSeqid =  AEMT.AccountExchangeMeterTrackSeqid \r\nFROM conEd.UploadConEdisonMeterBillingAdjustmentGas MG\r\nINNER JOIN Billing.AccountExchangeMeterTrack AS AEMT \r\nON AEMT.UniqueMeterSeqID= mg.UniqueMeterSeqID\r\nAND AEMT.UniqueAccountSeqID = mg.UniqueAccountSeqID\r\nINNER JOIN Billing.Meter AS M ON M.UniqueMeterSeqid = AEMT.UniqueMeterSeqID AND M.IsCurrentRecord ='Y'\r\nINNER JOIN Billing.Account AS A ON AEMT.UniqueAccountSeqID = a.UniqueAccountSeqid  AND A.IsCurrentRecord ='Y'\r\nAND A.AccountSeqid = AEMT.OriginalAccountSeqid\r\n\r\n\t---- added by dho - 10/8/2013 - previous update fails to handle span meter records for single period account record\r\n\t--UPDATE MG\r\n\t--SET AccountUtilityCompanySeqid =A.UtilityAccountProvider,\r\n\t--\tAccountBilled =A.AccountSeqid,\r\n\t--\tMeterBilled =M.MeterSeqid,\r\n\t--\tAccountExchangeMeterTrackSeqid =AEMT.AccountExchangeMeterTrackSeqid,\r\n\t--\tMeterBillingStatus ='AC', ---  M.MeterStatus,\r\n\t--\tMeterBillingPreviousStatus ='AC', ---  M.MeterPreviousStatus,\r\n\t--\tMeterBillingStatusPeriod = @CurrentBillingPeriod -- M.MeterStatusCodePeriod\r\n\t--FROM Billing.AccountExchangeMeterTrack AS AEMT INNER JOIN Billing.Account AS A ON AEMT.OriginalAccountSeqid = A.AccountSeqid AND \r\n\t--\tAEMT.OriginalAccountSeqid = A.AccountSeqid INNER JOIN Billing.Meter AS M ON AEMT.OriginalMeterSeqid = M.MeterSeqid AND \r\n\t--\tAEMT.OriginalMeterSeqid = M.MeterSeqid INNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G INNER JOIN\r\n\t--\tConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG ON G.BillingPeriod = MG.BillingPeriod\r\n\t--\tAND G.OriginalAccountNumber = MG.OriginalAccountNumber ON A.AccountSeqid = G.AdjustedAccount AND \r\n\t--\tM.OriginalAccountNumber = MG.OriginalAccountNumber AND M.OriginalMeterNumber = MG.OriginalMeterNumber AND \r\n\t--\tAEMT.OriginalAccountNumber = MG.OriginalAccountNumber AND AEMT.OriginalMeterNumber = MG.OriginalMeterNumber\r\n\t--WHERE MG.AccountExchangeMeterTrackSeqid IS NULL;\r\n\r\n\t--\tThe UploadConEdisonMeterBillingAdjustmentGas is using a LEFT JOIN with the account table to find all rows whose status is 'UM'.  If the \r\n\t--\taccount exists the AccountSeqid is updated in the AccountBilled column and no change to the status code.  If the AccountSeqid is NULL then the \r\n\t--\tmeter and the account are unknown to EC3 and the status updated to 'UA'\r\n\tUPDATE MG\r\n\tSET AccountBilled =A.AccountSeqid,\r\n\t\tMeterBillingStatus = CASE WHEN A.AccountSeqid IS NULL THEN 'UA' ELSE 'UM' END\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG LEFT JOIN\r\n\t\tBilling.Account AS A ON MG.UniqueAccountSeqID = A.UniqueAccountSeqid AND \r\n\t\t--Billing.Account AS A ON MG.OriginalAccountNumber = A.OriginalAccountNumber AND \r\n\t\tMG.AccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\tWHERE MG.MeterBillingStatus = 'UM';\r\n\r\n\r\n-- update missing ids\r\nupdate MG \r\nset MG.AdjustedMeterBilling = MB.MeterBillingSeqid\r\n,MG.AdjustedMeterBillingGas =MBG.MeterBillingGasSeqid\r\n\r\nfrom ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG\r\n\tINNER JOIN\tBilling.MeterBilling AS MB ON MB.UniqueMeterSeqId = MG.UniqueMeterSeqID \r\n\t\tAND\tMG.BillingPeriodRevision = MB.BillingPeriodRevision \r\n\t\tAND MG.BillingPeriodRevision = MB.BillingPeriod \r\n\tINNER JOIN Billing.MeterBillingGas MBG ON \r\n\t\t--MB.MeterBillingSeqid = MBG.MeterBillingSeqid AND \r\n\t\tMB.UniqueAccountSeqId = MBG.UniqueAccountSeqId \r\n\t\tAND MB.UniqueMeterSeqId = MBG.UniqueMeterSeqId\r\n\t\tAND MB.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n\tWHERE \r\n\tMG.AdjustedMeterBilling is null\r\n\r\n\r\n\t--\tCon Edison does not provide the meter billing cancellations. The meter billing rebills with be used to search EC3 for the row that needs to\r\n\t--\tbe adjusted.  The prior billed CCF and Therms will be used as the basis for the prior billed amount and the amount to be canceled.  The negation\r\n\t--\tof the prior objects will reverse the state of the prior value.  Also,if there is a match the NumberOfCancelTransactions is set to 1 and\r\n\t--\tNumberOfTransactions is increased by one (NumberOfTransactions + 1).\r\n\t--\r\n\t--\t\tRevisedBilledCCF = ISNULL(Billing.MeterBillingGas.Ccf, 0) + \r\n\t--\t\t\t\t\t\t  (ISNULL(MG.CCF, 0)+ISNULL(-1 * Billing.MeterBillingGas.Ccf, 0)),\r\n\t--\t\tCanceledBilledCCF = ISNULL(-1 * Billing.MeterBillingGas.Ccf, 0),\r\n\t--\t\tRevisedBilledTherms = ISNULL(MB.Consumption, 0)+\r\n\t--\t\t\t\t\t\t\t   (ISNULL(MG.Therms, 0)+ISNULL(-1 * MB.Consumption, 0)),\r\n\t--\t\tCanceledBilledTherms = ISNULL(-1 * MB.Consumption, 0),\r\n\tUPDATE MG\r\n\tSET\tNumberOfCancelTransactions = 1,\r\n\t\tNumberOfTransactions = ISNULL(MG.NumberOfTransactions, 0) + 1,\r\n\t\tAdjustedMeterBilling = MB.MeterBillingSeqid,\r\n\t\tAdjustedMeterBillingGas =MBG.MeterBillingGasSeqid,\r\n\t\tMeterBillingStatus = MB.MeterBillingStatus,\r\n\t\tMeterBillingPreviousStatus = MB.PreviousMeterBillingStatus,\r\n\t\tMeterBillingStatusPeriod = MB.MeterBillingStatusCodePeriod,\r\n\t\tRevisedBilledCCF = ISNULL(MG.CCF, 0),\r\n\t\tCanceledBilledCCF = 0,-- ISNULL(MG.CCF, 0),--ISNULL(-1 * Billing.MeterBillingGas.Ccf, 0),\r\n\t\tPriorRevisedBilledCCF = ISNULL(MBG.Ccf, 0),\r\n\t\tCCF = ISNULL(MG.CCF, 0),\r\n\t\tCancelCcf = 0,-- ISNULL(MG.CancelCcf, 0),-- Con Edison does not report Cancellations on the meter billing level\r\n\t\tPriorRevisedBilledTherms = ISNULL(MB.Consumption, 0),\r\n\t\tRevisedBilledTherms = ISNULL(MG.Therms, 0),\r\n\t\tCanceledBilledTherms = ISNULL(MG.CanceledBilledTherms, 0), -- ISNULL(-1 * MB.Consumption, 0),\r\n\t\tTherms = ISNULL(MG.Therms, 0),\r\n\t\tCancelTherms = ISNULL(MG.CanceledBilledTherms, 0),\r\n\t\tCancelFromDate = MBG.FromDate,\r\n\t\tCancelToDate = MBG.ToDate,\r\n\t\tCancelMeterFromReading = ISNULL(MBG.MeterFromReading, 0),\r\n\t\tCancelMeterToReading = ISNULL(MBG.MeterToReading, 0),\r\n\t\tCancelThermsFactor = ISNULL(MBG.ThermsFactor,1.03),\r\n\t\tCancelMeterConstant = ISNULL(MBG.MeterConstant,1)\r\n\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG\r\n\tINNER JOIN\tBilling.MeterBilling AS MB ON MB.UniqueMeterSeqId = MG.UniqueMeterSeqID \r\n\t\tAND\tMG.BillingPeriodRevision = MB.BillingPeriodRevision \r\n\t\tAND MG.BillingPeriodRevision = MB.BillingPeriod \r\n\tINNER JOIN Billing.MeterBillingGas MBG ON MB.MeterBillingSeqid = MBG.MeterBillingSeqid \r\n\t\tAND MB.UniqueAccountSeqId = MBG.UniqueAccountSeqId \r\n\t\tAND MB.UniqueMeterSeqId = MBG.UniqueMeterSeqId\r\n\t\tAND MB.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n\tWHERE MG.AccountBilled IS NOT NULL AND MG.MeterBilled IS NOT NULL;\r\n\r\n\t--\tUpdate the meter billing adjustments with a 'BA' status if they were not found with EC3. Exclude any\r\n\t--\tmeter billing whose status starts with 'U*' since they are unknown to EC3.  They will be added as new\r\n\t--\tmeters.  If they are being added to existing accounts then OEC will have to contact Con Edison to find out\r\n\t--\twhether it was a meter exchange or an additional meter.\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET MeterBillingStatus = 'BA',\r\n\t\tMeterBillingPreviousStatus = 'NB',\r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod,\r\n\t\tNotes = CASE WHEN SUBSTRING(Notes,1,5) = 'Meter' THEN Notes\r\n\t\t\t\t\tWHEN DerivedFromSpannedBill = 'Y' \r\n\t\t\t\t\t\tTHEN Notes + ' Back Billed in: '+ @CurrentBillingPeriod+ ' for Revised Billing Period: '+ BillingPeriodRevision\r\n\t\t\t\t\t\tELSE' Back Billed in: '+ @CurrentBillingPeriod+ ' for Revised Billing Period: '+ BillingPeriodRevision END \r\n\tWHERE BillingPeriod <> BillingPeriodRevision AND CancelThermsFactor IS NULL AND MeterBillingStatus NOT LIKE 'U%';\r\n\t\r\n\t--\tInsert the AccountBilling records from \"ConEd.UploadConEdisonCurrentlyBilledAccounts AS NoOriginalAccountBilling\" to provide\r\n\t--\ta record that can be used for the current period billing.  All of these bills will have a status code of \"BC\" back billed without\r\n\t--\ta current period bill.  The Current period usage and dollars are zero.  This was included for interuptible gas that lags billing\r\n\t--\tby a month.  The money will be count as a net paid adjustment.\r\n\tINSERT INTO ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\t(FacilityName,\r\n\t\tServiceAddress,\r\n\t\tAdjustedAccount,\r\n\t\tAccountUtilityCompanySeqid,\r\n\t\tAccountStatus,\r\n\t\tAccountpreviousStatus,\r\n\t\tAccountStatusPeriod,\r\n\t\tCurrentInvoiceAccountBillingGroup,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tOriginalAccountNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCanceledBillingPeriod,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tTotalRebilledAmount,\r\n\t\tTotalCanceledAmount,\r\n\t\tPriorRevisedBilledAmount,\r\n\t\tRevisedBilledAmount,\r\n\t\tCanceledBilledAmount,\r\n\t\tPriorRevisedCCF,\r\n\t\tRevisedCCF,\r\n\t\tCanceledCCF,\r\n\t\tPriorRevisedTherms,\r\n\t\tRevisedTherms,\r\n\t\tCanceledTherms,\r\n\t\tAverageRebillCostOfGasCharge,\r\n\t\tAverageRebillThermsFactor,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tToDate,\r\n\t\tFromDate,\r\n\t\tBillingAction,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tGasRateCode,\r\n\t\tTotalCCF,\r\n\t\tTotalTherms,\r\n\t\tThermsFactor,\r\n\t\tCancelFromDate,\r\n\t\tCancelToDate,\r\n\t\tCancelTotalCCF,\r\n\t\tCancelTotalTherms,\r\n\t\tCancelThermsFactor,\r\n\t\tCancelBillingDays,\r\n\t\tProcessEffectiveDate,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedBilledAmount,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tNotes,\r\n\t\tAuthenticatedUserID,\r\n\t\tBillingCycle)\r\n\tSELECT  \r\n\t\tABA.FacilityName,\r\n\t\tABA.ServiceAddress,\r\n\t\tABA.AdjustedAccount,\r\n\t\tABA.AccountUtilityCompanySeqid,\r\n\t\t'BC',-- ABA.AccountStatus,\r\n\t\t'NB',-- ABA.AccountpreviousStatus,\r\n\t\t@CurrentBillingPeriod,-- ABA.AccountStatusPeriod,\r\n\t\tABA.CurrentInvoiceAccountBillingGroup,\r\n\t\t1,-- ABA.NumberOfTransactions,\r\n\t\t1,-- ABA.NumberOfRebillTransactions,\r\n\t\t0,--  ABA.NumberOfCancelTransactions,\r\n\t\tABA.OriginalAccountNumber,\r\n\t\t@CurrentBillingPeriod,\r\n\t\t@CurrentBillingPeriod,-- @CurrentBillingPeriodRevision,\r\n\t\t@CurrentBillingPeriod,-- ABA.FirstCanceledBillingPeriod,\r\n\t\t'EST',-- ABA.EstimatedOrActualBilling,\r\n\t\tABA.InitialCancelFromDate,\r\n\t\tABA.CurrentBillingToDate,\r\n\t\tABA.NumberOfBillingPeriods,\r\n\t\tABA.TotalBillingDaysRebilled,\r\n\t\t0,--  ABA.TotalRebilledAmount,\r\n\t\t0,--  ABA.TotalCanceledAmount,\r\n\t\t0,--  ABA.PriorRevisedBilledAmount,\r\n\t\t0,--  ABA.RevisedBilledAmount,\r\n\t\t0,--  ABA.CanceledBilledAmount,\r\n\t\t0,--  ABA.PriorRevisedCCF,\r\n\t\t0,--  ABA.RevisedCCF,\r\n\t\t0,--  ABA.CanceledCCF,\r\n\t\t0,--  ABA.PriorRevisedTherms,\r\n\t\t0,--  ABA.RevisedTherms,\r\n\t\t0,--  ABA.CanceledTherms,\r\n\t\t0,--  ABA.AverageRebillCostOfGasCharge,\r\n\t\t0,--  ABA.AverageRebillThermsFactor,\r\n\t\tdbo.[CalculateNumberOfBillingDays](dbo.[DetermineConEdisonBillingPeriodProjectedFromDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid),\r\n\t\t\t\t\t\t\t\t\t\t\t   dbo.[DetermineConEdisonBillingPeriodProjectedToDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid)\r\n\t\t\t\t\t\t\t\t\t\t\t   ),--  ABA.BillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD](GETDATE()),--  ABA.BillingDate,\r\n\t\tdbo.[DetermineConEdisonBillingPeriodProjectedToDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid),--  ABA.ToDate,\r\n\t\tdbo.[DetermineConEdisonBillingPeriodProjectedFromDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid),--  ABA.FromDate,\r\n\t\t'O',--  ABA.BillingAction,\r\n\t\t'N',--  ABA.ProcessedInTheCurrentPeriod,\r\n\t\tABA.GasRateCode,\r\n\t\t0,--  ABA.TotalCCF,\r\n\t\t0,--  ABA.TotalTherms,\r\n\t\t0,--  ABA.ThermsFactor,\r\n\t\tNULL,--  ABA.CancelFromDate,\r\n\t\tNULL,--  ABA.CancelToDate,\r\n\t\t0,--  ABA.CancelTotalCCF,\r\n\t\t0,--  ABA.CancelTotalTherms,\r\n\t\t0,--  ABA.CancelThermsFactor,\r\n\t\t0,--  ABA.CancelBillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD](GETDATE()),--  ABA.ProcessEffectiveDate,\r\n\t\t'N',--  ABA.DerivedFromSpannedBill,\r\n\t\t0,--  ABA.SpannedBillingPeriodRevision,\r\n\t\t0,--  ABA.SpannedFirstCanceledBillingPeriod,\r\n\t\t0,--  ABA.SpannedBilledAmount,\r\n\t\t0,--  ABA.SpannedCCF,\r\n\t\t0,--  ABA.SpannedThermFactor,\r\n\t\t0,--  ABA.SpannedTherm,\r\n\t\t0,--  ABA.SpannedMonthlyPercentage,\r\n\t\t0,--  ABA.SpannedTotalPercentage,\r\n\t\t'No Current Account Billing Period record: ' + @CurrentBillingPeriod,--  ABA.Notes\r\n\t\t1,-- AuthenticatedUserID,\r\n\t\t'M'\r\n\tFROM ConEd.UploadConEdisonCurrentlyBilledAccounts AS CB INNER JOIN\r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas AS ABA ON \r\n\t\tCB.OriginalAccountNumber = ABA.OriginalAccountNumber\r\n\tWHERE ABA.BillingPeriodRevision = (SELECT MAX(BillingPeriodRevision) FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\tGROUP BY OriginalAccountNumber HAVING OriginalAccountNumber = ABA.OriginalAccountNumber);\r\n\r\n\t--\tInsert the AccountBilling records when the \"UploadConEdisonAccountBillingAdjustmentGasSeqid IS NULL and \r\n\t--\tUploadConEdisonMeterBillingAdjustmentGasSeqid is not NULL\".  This provides a record that can be used for the current period billing that\r\n\t--\twas not provided by Con edison.  All of these bills will have a status code of \"BM\" back billed meter billing without\r\n\t--\ta current period account bill.  The period will reflect the billing period revison and the usage is set to the CCF,Therms and Thermsfactor.  \r\n\t--\tAll dollar columns will be set to Zero (no money).\r\n\tINSERT INTO ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\t(FacilityName,\r\n\t\tServiceAddress,\r\n\t\tAdjustedAccount,\r\n\t\tAccountUtilityCompanySeqid,\r\n\t\tAccountStatus,\r\n\t\tAccountpreviousStatus,\r\n\t\tAccountStatusPeriod,\r\n\t\tCurrentInvoiceAccountBillingGroup,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tOriginalAccountNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCanceledBillingPeriod,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tTotalRebilledAmount,\r\n\t\tTotalCanceledAmount,\r\n\t\tPriorRevisedBilledAmount,\r\n\t\tRevisedBilledAmount,\r\n\t\tCanceledBilledAmount,\r\n\t\tPriorRevisedCCF,\r\n\t\tRevisedCCF,\r\n\t\tCanceledCCF,\r\n\t\tPriorRevisedTherms,\r\n\t\tRevisedTherms,\r\n\t\tCanceledTherms,\r\n\t\tAverageRebillCostOfGasCharge,\r\n\t\tAverageRebillThermsFactor,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tToDate,\r\n\t\tFromDate,\r\n\t\tBillingAction,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tGasRateCode,\r\n\t\tTotalCCF,\r\n\t\tTotalTherms,\r\n\t\tThermsFactor,\r\n\t\tCancelFromDate,\r\n\t\tCancelToDate,\r\n\t\tCancelTotalCCF,\r\n\t\tCancelTotalTherms,\r\n\t\tCancelThermsFactor,\r\n\t\tCancelBillingDays,\r\n\t\tProcessEffectiveDate,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedBilledAmount,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tNotes,\r\n\t\tAuthenticatedUserID)\r\n\tSELECT MG.FacilityName,\r\n\t\tMG.ServiceAddress,\r\n\t\tMG.AccountBilled,\r\n\t\tMG.AccountUtilityCompanySeqid,\r\n\t\t'BM',-- ABA.AccountStatus,\r\n\t\t'NB',-- ABA.AccountpreviousStatus,\r\n\t\t@CurrentBillingPeriod,-- ABA.AccountStatusPeriod,\r\n\t\t(SELECT A.CurrentInvoiceAccountGroup FROM Billing.Account AS A WHERE A.AccountSeqid = MG.AccountBilled),--ABA.CurrentInvoiceAccountBillingGroup,\r\n\t\t0,-- ABA.NumberOfTransactions,\r\n\t\t0,-- ABA.NumberOfRebillTransactions,\r\n\t\t0,--  ABA.NumberOfCancelTransactions,\r\n\t\tMG.OriginalAccountNumber,\r\n\t\t@CurrentBillingPeriod,\r\n\t\tMG.BillingPeriodRevision,-- @CurrentBillingPeriodRevision,\r\n\t\tMG.BillingPeriodRevision,-- ABA.FirstCanceledBillingPeriod,\r\n\t\t'EST',-- ABA.EstimatedOrActualBilling,\r\n\t\tMG.FromDate,-- ABA.InitialCancelFromDate,\r\n\t\tMG.ToDate,-- ABA.CurrentBillingToDate,\r\n\t\tMG.NumberOfBillingPeriods,\r\n\t\tMG.TotalBillingDaysRebilled,\r\n\t\t0,--  ABA.TotalRebilledAmount,\r\n\t\t0,--  ABA.TotalCanceledAmount,\r\n\t\t0,--  ABA.PriorRevisedBilledAmount,\r\n\t\t0,--  ABA.RevisedBilledAmount,\r\n\t\t0,--  ABA.CanceledBilledAmount,\r\n\t\t0,--  ABA.PriorRevisedCCF,\r\n\t\t0,--  ABA.RevisedCCF,\r\n\t\t0,--  ABA.CanceledCCF,\r\n\t\t0,--  ABA.PriorRevisedTherms,\r\n\t\t0,--  ABA.RevisedTherms,\r\n\t\t0,--  ABA.CanceledTherms,\r\n\t\t0,--  ABA.AverageRebillCostOfGasCharge,\r\n\t\t0,--  ABA.AverageRebillThermsFactor,\r\n\t\tMG.BillingDays,--  ABA.BillingDays,\r\n\t\tMG.BillingDate,-- dbo.[ConvertDatetimeToYYYYMMDD](GETDATE()),--  ABA.BillingDate,\r\n\t\tMG.ToDate, --  dbo.[DetermineConEdisonBillingPeriodProjectedToDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid),--  ABA.ToDate,\r\n\t\tMG.FromDate, --  dbo.[DetermineConEdisonBillingPeriodProjectedFromDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid),--  ABA.FromDate,\r\n\t\tMG.BillingAction,--  ABA.BillingAction,\r\n\t\t'N',--  ABA.ProcessedInTheCurrentPeriod,\r\n\t\t(SELECT A.CommodityTariffRate from Billing.Account AS A WHERE A.AccountSeqid = MG.AccountBilled),--MG.GasRateCode,\r\n\t\t0,--  MG.Ccf,--  ABA.TotalCCF,\r\n\t\t0,--  MG.Therms,--  ABA.TotalTherms,\r\n\t\t0,--  MG.ThermsFactor,--  ABA.ThermsFactor,\r\n\t\tNULL,--  ABA.CancelFromDate,\r\n\t\tNULL,--  ABA.CancelToDate,\r\n\t\t0,--  ABA.CancelTotalCCF,\r\n\t\t0,--  ABA.CancelTotalTherms,\r\n\t\t0,--  ABA.CancelThermsFactor,\r\n\t\t0,--  ABA.CancelBillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD](GETDATE()),--  ABA.ProcessEffectiveDate,\r\n\t\t'N',--  ABA.DerivedFromSpannedBill,\r\n\t\t0,--  ABA.SpannedBillingPeriodRevision,\r\n\t\t0,--  ABA.SpannedFirstCanceledBillingPeriod,\r\n\t\t0,--  ABA.SpannedBilledAmount,\r\n\t\t0,--  ABA.SpannedCCF,\r\n\t\t0,--  ABA.SpannedThermFactor,\r\n\t\t0,--  ABA.SpannedTherm,\r\n\t\t0,--  ABA.SpannedMonthlyPercentage,\r\n\t\t0,--  ABA.SpannedTotalPercentage,\r\n\t\t'No Account Billing record,Revision: '+MG.BillingPeriodRevision+' Current: ' + @CurrentBillingPeriod+\r\n\t\t'  CCF ('+cast(MG.Ccf as varchar(12))+')  ThermsFactor ('+cast(MG.ThermsFactor as varchar(12))+')   Therms ('+cast(MG.Therms as varchar(12))+')',--  ABA.Notes\r\n\t\t1 -- AuthenticatedUserID\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G RIGHT JOIN\r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG ON G.OriginalAccountNumber = MG.OriginalAccountNumber\r\n\t\tAND G.BillingPeriod = MG.BillingPeriod AND G.BillingPeriodRevision = MG.BillingPeriodRevision\r\n\tWHERE G.UploadConEdisonAccountBillingAdjustmentGasSeqid IS NULL AND MG.AccountBilled IS NULL;\r\n\r\n\t-- Adjust ConEd.UploadConEdisonMeterBillingAdjustmentGas with information from the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t-- that is to used in the Gas.MG.  Eventually,it be inserted into the Billing.MeterBilling and\r\n\t-- Billing.MeterBillingGas.  Grab BillCreationDate from the Common.UploadCycleParameters table.\r\n\tUPDATE MG\r\n\tSET BillCreationDate =CP.BillCreationDate ,\r\n\t\tEnergySource =G.EnergySource,\r\n\t\tLastPeriodModified =G.LastPeriodModified,\r\n\t\tBillingCycle =G.BillingCycle,\r\n\t\tSalesType =G.SalesType,\r\n\t\tIsTimeOfDayAccount ='N',-- Electricity only \r\n\t\tUtilityServiceAddress =G.ServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG INNER JOIN\r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas AS G ON MG.AccountUtilityCompanySeqid = G.AccountUtilityCompanySeqid\r\n\t\tAND MG.OriginalAccountNumber = G.OriginalAccountNumber AND MG.BillingPeriod = G.BillingPeriod AND \r\n\t\tMG.BillingPeriodRevision = G.BillingPeriodRevision AND MG.AccountBilled = G.AdjustedAccount INNER JOIN\r\n\t\tCommon.UploadCycleParameters AS CP ON G.BillingPeriod = CP.BillingPeriod AND \r\n\t\tG.AccountUtilityCompanySeqid = CP.UtilityCompanySeqid AND G.CurrentInvoiceAccountBillingGroup = CP.InvoiceAccountGroupSeqid\r\n\tWHERE G.BillingPeriod = @CurrentBillingPeriod;\r\n\r\n\t-- Adjust ConEd.UploadConEdisonMeterBillingAdjustmentGas with information from the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t-- that is to used in the Gas.MG.  Eventually,it be inserted into the Billing.MeterBilling and\r\n\t-- Billing.MeterBillingGas.  Grab MeterDials from the M.\r\n\tUPDATE MG\r\n\tSET MeterDials =M.MeterDials\r\n\t\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG \r\n\t\tINNER JOIN Billing.Meter AS M ON MG.MeterBilled = M.MeterSeqid \r\n\t\tAND MG.UniqueAccountSeqID = M.UniqueAccountSeqID\r\n\t\tAND M.UniqueMeterSeqid = MG.UniqueMeterSeqID\r\n\tWHERE MG.BillingPeriod = @CurrentBillingPeriod;   \r\n\r\n\t--\tIdentify all accounts and meters that were previously identified as unknown exchanges and \r\n\t--\thave not as of yet been reconciled with the utility company as to what kind of exchange was done.\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AccountpreviousStatus = AccountStatus,\r\n\t\tAccountStatus = 'AC',\r\n\t\tAccountStatusPeriod = BillingPeriod \r\n\tWHERE AccountStatus LIKE 'U%' AND AdjustedAccount IS NOT NULL;\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET MeterBillingPreviousStatus =MeterBillingStatus,\r\n\t\tMeterBillingStatus = 'AC',\r\n\t\tMeterBillingStatusPeriod =BillingPeriod\r\n\tWHERE MeterBillingStatus LIKE 'U%' AND AccountExchangeMeterTrackSeqid IS NOT NULL;\r\n\r\n\t-- update accounts or actual flag\r\n\tUPDATE AccountEstOrAct \r\n\tSET AccountEstOrAct.EstimatedOrActualBilling = MeterEstOrAct.EstimatedOrActualBilling\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS AccountEstOrAct\r\n\tINNER JOIN \r\n\t\t(\r\n\t\t\tSELECT ucembag.UniqueAccountSeqID,MAX(ucembag.EstimatedOrActualBilling) AS EstimatedOrActualBilling,BillingPeriodRevision \r\n\t\t\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS ucembag\r\n\t\t\tGROUP BY ucembag.UniqueAccountSeqID,BillingPeriodRevision\r\n\t\t) AS MeterEstOrAct ON AccountEstOrAct.BillingPeriodRevision = MeterEstOrAct.BillingPeriodRevision\r\n\tAND AccountEstOrAct.UniqueAccountSeqID = MeterEstOrAct.UniqueAccountSeqID\r\n\tAND AccountEstOrAct.EstimatedOrActualBilling <> MeterEstOrAct.EstimatedOrActualBilling\r\n\tAND MeterEstOrAct.EstimatedOrActualBilling <> dbo.[DetermineConEdisonActualOrEstimatedBilling](\r\n\tAccountEstOrAct.OriginalAccountNumber,AccountEstOrAct.BillingPeriodRevision)\r\n\t\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET UniqueAccountSeqID = Common.udf_GetUniqueAccountSeqId(OriginalAccountNumber)\r\n\tWHERE UniqueAccountSeqID IS NULL;\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET UniqueAccountSeqID = Common.udf_GetUniqueAccountSeqId(OriginalAccountNumber)\r\n\tWHERE UniqueAccountSeqID IS NULL;\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET UniqueMeterSeqID = Common.udf_GetUniqueMeterSeqId(OriginalMeterNumber)\r\n\tWHERE UniqueMeterSeqID IS NULL;\r\n\r\n\t/* Validation*/\r\n\tEXEC ConEd.[usp_Validation_CheckUploadDataSummary]\r\n\tEXEC ConEd.usp_Validation_CheckMeterBillingAdjustmentGas\r\nEND;",
      "created": "2025-06-10 21:41:26.810000",
      "last_altered": "2025-06-10 21:41:26.810000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_14_PrepareDataTransfer",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Upload_14_PrepareDataTransfer` is designed to process and prepare billing data for Con Edison gas accounts and meters. It performs a series of data manipulations and updates across several tables to ensure that billing adjustments are correctly recorded and reconciled. The procedure handles unique identifiers for accounts and meters, updates billing statuses, and inserts records for accounts and meters that require adjustments. It also performs validation checks at the end to ensure data integrity.\n\n#### 2. Complexity Level: High\n\nThis stored procedure is complex due to the following reasons:\n- It involves multiple tables and complex joins.\n- It performs numerous updates and inserts, which require careful handling of data dependencies.\n- It includes business logic that handles various billing scenarios, such as adjustments, cancellations, and rebills.\n- It uses user-defined functions and other stored procedures for certain operations, adding layers of abstraction.\n\n#### 3. Input Parameters\n\nThe stored procedure does not take any input parameters directly. However, it uses local variables, such as `@CurrentBillingPeriod`, which is derived from the data within the procedure.\n\n#### 4. Business Logic and Workflow\n\n1. **Initialization and Setup:**\n   - The procedure starts by determining the current billing period from the `UploadConEdisonAccountBillingAdjustmentGas` table.\n   - It truncates the `UploadConEdisonCurrentlyBilledAccounts` table to prepare it for new data.\n\n2. **Data Insertion and Cleanup:**\n   - Inserts distinct account numbers billed in the current period into `UploadConEdisonCurrentlyBilledAccounts`.\n   - Deletes accounts that were billed as original bills (where `BillingPeriod` equals `BillingPeriodRevision`).\n\n3. **Unique Identifier Assignment:**\n   - Updates tables to assign unique sequence IDs to accounts and meters using user-defined functions.\n\n4. **Billing Adjustments:**\n   - Updates billing adjustment tables with calculated values for rebilled and canceled amounts, therms, and CCFs.\n   - Handles accounts and meters without original bills by setting default values.\n\n5. **Status Updates:**\n   - Updates account and meter statuses based on various conditions, such as whether they are known to the system or require adjustments.\n\n6. **Data Validation:**\n   - Executes validation procedures to ensure the integrity of the uploaded data.\n\n#### 5. Performance Considerations\n\n- **Table Truncation:** Truncating tables can be efficient but may lead to data loss if not handled correctly.\n- **Complex Joins:** The use of multiple joins can impact performance, especially if indexes are not optimized.\n- **Batch Updates:** Large batch updates can lead to locking and blocking issues, affecting concurrency.\n- **Use of Functions:** User-defined functions can add overhead, especially if they are scalar functions called in large datasets.\n\n#### 6. Potential Issues or Risks\n\n- **Data Integrity:** The procedure relies heavily on the assumption that data in various tables is consistent and accurate. Any discrepancies can lead to incorrect billing adjustments.\n- **Concurrency Issues:** The procedure performs multiple updates and inserts, which can lead to locking and blocking in a high-concurrency environment.\n- **Error Handling:** The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete transactions.\n- **Scalability:** As data volume grows, the complexity and number of operations in this procedure may lead to performance degradation.\n- **Dependency on External Functions:** The reliance on user-defined functions and other stored procedures means that changes in those components can affect the behavior of this procedure.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 11123,
      "api_response_id": "chatcmpl-Byev2LBk7At5sEpv5bTl8ijV9xfoi"
    },
    "analysis_timestamp": "2025-07-29 09:44:54"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_15_PrepareExchangeData",
      "definition": "--**************************************************************************************\r\n--* Description:\t\r\n--*\r\n--* AUTHOR:       \r\n--* Created On:   \r\n--**************************************************************************************\r\n--* Change Log\r\n--* xx/xx/xxxx\txx  First Version \r\n--* 11/29/2016\tzd\tturn off date to 99991231\r\n--***************************************************************************************\r\nCREATE PROCEDURE [ConEd].[usp_Upload_15_PrepareExchangeData]\r\nAS\r\nBEGIN\r\n\r\ndeclare @CurrentBillingPeriod varchar(6)\r\n--\r\n--**************************************************************************************\r\n--Set defaults\r\n--**************************************************************************************\r\n--\r\nSELECT TOP (1) @CurrentBillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\r\n--\tCreate Common.UploadCommonExchangeData in preparation to do the exchange processing.\r\n--\r\ntruncate table Gas.UploadCommonElectronicGasExchangeData\r\n--\r\nINSERT INTO Gas.UploadCommonElectronicGasExchangeData\r\n\t(\r\n\t\tUtilityCompanyId,\r\n\t\tAccountBillingGroup,\r\n\t\tBillingPeriod,\r\n\t\tApprovedForCreation,\r\n\t\tCurrentAccountNumber,\r\n\t\tCurrentMeterNumber,\r\n\t\tExchangeCode,\r\n\t\tAccountStatus,\r\n\t\tAccountEffectiveTurnOn,\r\n\t\tAccountEffectiveTurnOff,\r\n\t\t--  KWHAccountDescription,\r\n\t\tSalesType,\r\n\t\tDeliveryServiceClass,\r\n\t\tDeliveryServiceClassEffectiveDate,\r\n\t\tProductionServiceClass,\r\n\t\tProductionServiceClassEffectiveDate,\r\n\t\tBillingCycle,\r\n\t\t--   ExcessDistributionAccount,\r\n\t\tTODAccount,\r\n\t\tTripNumber,\r\n\t\tAccountName,\r\n\t\tAccountAddress,\r\n\t\tBorough,\r\n\t\tMeterStatus,\r\n\t\tMeterEffectiveTurnOnDate,\r\n\t\tMeterEffectiveTurnOffDate,\r\n\t\tMeterType,\r\n\t\tMeterNumberofDials,\r\n\t\tMeterConstant,\r\n\t\t--    MeterTension,\r\n\t\tManualDataEntry,\r\n\t\tEnergyDeliveryCount, \r\n\t\tEnergyDeliveryType,\r\n\t\t--   EnergyDeliveryType1, \r\n\t\tauthenticatedUserID \r\n\t)\r\nSELECT \r\n\t\tMin(9) as UtilityCompanyId,\r\n\t\tmin(2) as AccountBillingGroup,\r\n\t\tmin(ConEd.UploadConEdisonMeterBillingAdjustmentGas.BillingPeriod) as BillingPeriod,\r\n\t\tmin('Y') as ApprovedForCreation,\r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas.OriginalAccountNumber, \r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas.OriginalMeterNumber,\r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas.MeterBillingStatus as ExchangeCode,\r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas.MeterBillingStatus as AccountStatus,\r\n\t\tmin(ConEd.UploadConEdisonMeterBillingAdjustmentGas.FromDate) as AccountEffectiveTurnOn,\r\n\t\tmin('99991231') as AccountEffectiveTurnOff,\r\n\t\t--min(null) as KWHAccountDescription,\r\n\t\tmin('BT') as SalesType,\r\n\t\tmin(ConEd.UploadConEdisonMeterBillingAdjustmentGas.GasRateCode) as DeliveryServiceClass,\r\n\t\tmin(ConEd.UploadConEdisonMeterBillingAdjustmentGas.FromDate) as DeliveryServiceClassEffectiveDate,\r\n\t\tmin(ConEd.UploadConEdisonMeterBillingAdjustmentGas.GasRateCode) as ProductionServiceClass,\r\n\t\tmin(ConEd.UploadConEdisonMeterBillingAdjustmentGas.FromDate) as ProductionServiceClassEffectiveDate,\r\n\t\tmin('M') as BillingCycle,\r\n\t\t--min(null) as ExcessDistributionAccount,\r\n\t\tmin('N') as TODAccount,\r\n\t\tmin('18') as TripNumber,\r\n\t\tmin(case when ConEd.UploadConEdisonMeterBillingAdjustmentGas.FacilityName is null then 'Missing Facility Name' else ConEd.UploadConEdisonMeterBillingAdjustmentGas.FacilityName end ) as AccountName,\r\n\t\tmin(case when ConEd.UploadConEdisonMeterBillingAdjustmentGas.ServiceAddress is null then 'Missing Service Address' else ConEd.UploadConEdisonMeterBillingAdjustmentGas.ServiceAddress end ) as AccountAddress,\r\n\t\tmin(1) as Borough,\r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas.MeterBillingStatus as MeterStatus,\r\n\t\tmin(ConEd.UploadConEdisonMeterBillingAdjustmentGas.FromDate) as MeterEffectiveTurnOnDate,\r\n\t\tmin('99991231') as MeterEffectiveTurnOffDate,\r\n\t\tmin('G') as MeterType,\r\n\t\tmin(NumberOfDials) as MeterNumberofDials,\r\n\t\tmin(MeterConstant) as MeterConstant,\r\n\t\t--min(null) as MeterTension,\r\n\t\tmin('N') as ManualDataEntry,\r\n\t\tmin(1) as EnergyDeliveryCount,\r\n\t\tmin(5) as EnergyDeliveryType,\r\n\t\t--min(null) as EnergyDeliveryType1, \r\n\t\tmin(1) as authenticatedUserID\r\nFROM \r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas FULL OUTER JOIN\r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas ON \r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas.OriginalAccountNumber = ConEd.UploadConEdisonAccountBillingAdjustmentGas.OriginalAccountNumber\r\n\t\tAND ConEd.UploadConEdisonMeterBillingAdjustmentGas.BillingPeriod = ConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriod AND \r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas.BillingPeriodRevision = ConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriodRevision\r\nWHERE \r\n\t\t(ConEd.UploadConEdisonAccountBillingAdjustmentGas.AccountStatus LIKE 'U%' and ConEd.UploadConEdisonAccountBillingAdjustmentGas.AdjustedAccount is null) OR\r\n\t\t(ConEd.UploadConEdisonMeterBillingAdjustmentGas.MeterBillingStatus LIKE 'U%' and ConEd.UploadConEdisonMeterBillingAdjustmentGas.AccountExchangeMeterTrackSeqid is null)\r\ngroup by \r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas.OriginalAccountNumber, \r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas.OriginalMeterNumber,\r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas.MeterBillingStatus\r\n--\r\n--\r\nDELETE FROM Gas.UploadCommonElectronicGasExchangeData\r\nFROM Billing.AccountExchangeMeterTrack INNER JOIN\r\n                      Billing.Account ON Billing.AccountExchangeMeterTrack.OriginalAccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n                      Billing.Meter ON Billing.AccountExchangeMeterTrack.OriginalMeterSeqid = Billing.Meter.MeterSeqid INNER JOIN\r\n                      Gas.UploadCommonElectronicGasExchangeData ON \r\n                      Billing.Meter.OriginalAccountNumber = Gas.UploadCommonElectronicGasExchangeData.CurrentAccountNumber AND \r\n                      Billing.Meter.OriginalMeterNumber = Gas.UploadCommonElectronicGasExchangeData.CurrentMeterNumber AND \r\n                      Billing.Account.UtilityAccountProvider = Gas.UploadCommonElectronicGasExchangeData.UtilityCompanyId AND \r\n                      Billing.Account.OriginalAccountNumber = Gas.UploadCommonElectronicGasExchangeData.CurrentAccountNumber\r\nWHERE (Billing.Account.AccountStatusCodePeriod < @CurrentBillingPeriod) AND (Billing.Meter.MeterStatusCodePeriod < @CurrentBillingPeriod)\t\t\r\n--\r\n--\tRemove any garbage row where the (CurrentAccountNumber IS NULL) OR (CurrentMeterNumber IS NULL)\r\n--\r\nDELETE FROM Gas.UploadCommonElectronicGasExchangeData\r\nWHERE (CurrentAccountNumber IS NULL) OR\r\n                      (CurrentMeterNumber IS NULL)\r\nEND",
      "created": "2025-06-10 21:41:26.827000",
      "last_altered": "2025-06-10 21:41:26.827000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_15_PrepareExchangeData",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Upload_15_PrepareExchangeData` is designed to prepare data for electronic gas exchange processing. It operates within the `ConEd` schema and primarily interacts with tables related to billing adjustments and meter data. The procedure performs several key operations: it initializes a billing period, truncates a target table, inserts processed data into this table, and then cleans up the data by removing certain rows based on specific conditions.\n\n#### 2. Complexity Level: Medium\n\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves multiple operations, including data selection, insertion, and deletion.\n- It uses a `FULL OUTER JOIN` to combine data from two tables, which can be complex to manage and optimize.\n- The procedure includes conditional logic in the form of `CASE` statements and `WHERE` clauses.\n- It involves data cleanup operations that require careful consideration of business rules.\n\n#### 3. Input Parameters\n\nThis stored procedure does not take any input parameters. It operates on predefined tables and uses hardcoded values and logic to perform its tasks.\n\n#### 4. Business Logic and Workflow\n\n1. **Initialization**: \n   - A variable `@CurrentBillingPeriod` is declared to store the current billing period. It is set by selecting the top billing period from the `UploadConEdisonAccountBillingAdjustmentGas` table.\n\n2. **Data Preparation**:\n   - The `Gas.UploadCommonElectronicGasExchangeData` table is truncated to remove any existing data, ensuring a clean slate for new data insertion.\n\n3. **Data Insertion**:\n   - Data is inserted into `Gas.UploadCommonElectronicGasExchangeData` from a `FULL OUTER JOIN` of `UploadConEdisonMeterBillingAdjustmentGas` and `UploadConEdisonAccountBillingAdjustmentGas`.\n   - The `SELECT` statement includes various fields, some of which use `MIN` to handle potential duplicates or null values.\n   - The `WHERE` clause filters records based on account and meter status conditions.\n\n4. **Data Cleanup**:\n   - The procedure deletes rows from `Gas.UploadCommonElectronicGasExchangeData` where the account and meter status codes are less than the current billing period.\n   - It also removes rows where either the `CurrentAccountNumber` or `CurrentMeterNumber` is null, ensuring data integrity.\n\n#### 5. Performance Considerations\n\n- **Truncation**: The use of `TRUNCATE TABLE` is efficient for clearing data but should be used cautiously as it cannot be rolled back if the procedure is part of a larger transaction.\n- **Joins**: The `FULL OUTER JOIN` can be resource-intensive, especially if the tables involved are large. Indexing on join columns can help improve performance.\n- **Aggregation**: The use of `MIN` functions in the `SELECT` statement can impact performance, particularly if the dataset is large.\n- **Data Deletion**: The `DELETE` operations are based on joins and conditions, which can be costly in terms of performance. Ensuring proper indexing on the involved columns can mitigate this.\n\n#### 6. Potential Issues or Risks\n\n- **Data Integrity**: The procedure relies on the assumption that the data in the source tables is accurate and complete. Any discrepancies could lead to incorrect data being inserted or deleted.\n- **Hardcoded Values**: The use of hardcoded values (e.g., '99991231' for dates) may not be flexible for future changes or different business rules.\n- **Lack of Input Parameters**: The absence of input parameters means the procedure cannot be easily adapted for different contexts or billing periods without modification.\n- **Concurrency**: If multiple instances of this procedure run simultaneously, there could be contention issues, especially during the `TRUNCATE` and `DELETE` operations.\n- **Error Handling**: The procedure lacks explicit error handling, which could lead to unhandled exceptions and potential data inconsistencies.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2507,
      "api_response_id": "chatcmpl-ByevPzf00xaKydSmFFAVNPsnBj7e2"
    },
    "analysis_timestamp": "2025-07-29 09:45:14"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_16_ProRateConEdisonAccountBillingUsageToMeterBilling",
      "definition": "CREATE PROCEDURE [ConEd].[usp_Upload_16_ProRateConEdisonAccountBillingUsageToMeterBilling] \r\nAS\r\nBEGIN\r\n\t--\r\n\t--\tAll of the accounts that have more than one meter and were billed on more than one meter for the billing period revision will be \r\n\t--\tprocess through a cursor.  The meters will be processed in ascending ccf usage order.  The usage will be pro-rated \r\n\t--\tby the ration of the meter ccf usage divided by account ccf usage rounded to zero decimal places for n-1 meters that were billed \r\n\t--\tfor the billing period revision.  The last meter usage will be derived by account billing usage minus the summed n-1 meter pro-rated\r\n\t--\tusage.\r\n\t--\r\n\tdeclare @UploadConEdisonAccountBillingAdjustmentGasSeqid int\r\n\tdeclare @UploadConEdisonMeterBillingAdjustmentGasSeqid int\r\n\r\n\tdeclare @NumberOfMeters int\r\n\tdeclare @AccountBillingRevisedCCF int\r\n\tdeclare @AccountBillingRevisedTherms int\r\n\tdeclare @AccountBillingCanceledTherms int\r\n\tdeclare @AccountBillingCanceledCCF int\r\n\tdeclare @MeterCCF int\r\n\tdeclare @BillingPeriod varchar(6)\r\n\tdeclare @BillingPeriodRevision  varchar(6)\r\n\tdeclare @OriginalAccountNumber varchar(15) \r\n\tdeclare @OriginalMeterNumber  varchar(12)\r\n\t--\r\n\tdeclare @NumberOfMetersRemainToBeProcessed int\r\n\tdeclare @ProRatedAccountBillingCanceledCCF int\r\n\tdeclare @ProRatedAccountBillingCanceledTherms int\r\n\tdeclare @ProRatedAccountBillingRevisedTherms int\r\n\tdeclare @ProRatedMeterBillingCanceledCCF int\r\n\tdeclare @ProRatedMeterBillingRevisedTherms int\r\n\tdeclare @ProRatedMeterBillingCanceledTherms int\r\n\t--\r\n\tdeclare @idx int\r\n\tset @idx=0\r\n\t--\r\n\r\n\tDeclare IndividualMeterOnMultiMeterAccountCursor cursor for \r\n\tSELECT  AccountBillingAdjustmentGas.UploadConEdisonAccountBillingAdjustmentGasSeqid,\r\n\t\t\tMeterBillingAdjustmentGas.UploadConEdisonMeterBillingAdjustmentGasSeqid,\r\n\t\t\tMeterCount.NumberOfMeters,   \r\n\t\t\tMeterBillingAdjustmentGas.BillingPeriodRevision,  \r\n\t\t\tMeterBillingAdjustmentGas.OriginalAccountNumber,  \r\n\t\t\tMeterBillingAdjustmentGas.OriginalMeterNumber,\r\n\t\t\tisnull(MeterBillingAdjustmentGas.RevisedBilledCCF,0) AS mbCCF,\r\n\t\t\tisnull(AccountBillingAdjustmentGas.abRevisedCCF,0) as abRevisedCCF, \r\n\t\t\tisnull(AccountBillingAdjustmentGas.abCanceledCCF,0) as abCanceledCCF,\r\n\t\t\tisnull(AccountBillingAdjustmentGas.abRevisedTherms,0) as abRevisedTherms, \r\n\t\t\tisnull(AccountBillingAdjustmentGas.abCanceledTherms,0) as abCanceledTherms\r\n\r\n\tFROM \r\n\t\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas AS MeterBillingAdjustmentGas \r\n\t\t\tinner join\r\n\t\t(\r\n\t\t\tSELECT  min(UploadConEdisonAccountBillingAdjustmentGasSeqid) as UploadConEdisonAccountBillingAdjustmentGasSeqid,   \r\n\t\t\t\t\tBillingPeriodRevision,UniqueAccountSeqID,\r\n\t\t\t\t\tSUM(RevisedCCF) AS abRevisedCCF, \r\n\t\t\t\t\tSUM(CanceledCCF) AS abCanceledCCF,\r\n\t\t\t\t\tSUM(RevisedTherms) AS abRevisedTherms, \r\n\t\t\t\t\tSUM(CanceledTherms) AS abCanceledTherms\r\n\t\t\tFROM \r\n\t\t\t\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\t\tGROUP BY \r\n\t\t\t\t\tBillingPeriodRevision,UniqueAccountSeqID\r\n\t\t) as AccountBillingAdjustmentGas on \r\n\t\t\tMeterBillingAdjustmentGas.BillingPeriodRevision = AccountBillingAdjustmentGas.BillingPeriodRevision and\r\n\t\t\tMeterBillingAdjustmentGas.UniqueAccountSeqID = AccountBillingAdjustmentGas.UniqueAccountSeqID\r\n\t\t\tinner join\r\n\t\t(\r\n\t\t\tSELECT \r\n\t\t\t\t\tBillingPeriodRevision,UniqueAccountSeqID,count(*) as NumberOfMeters\r\n\t\t\tFROM \r\n\t\t\t\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t\t\tgroup by \r\n\t\t\t\t\tBillingPeriodRevision,UniqueAccountSeqID\r\n\t\t) as MeterCount on \t\t\r\n\t\t\tMeterCount.BillingPeriodRevision = AccountBillingAdjustmentGas.BillingPeriodRevision and\r\n\t\t\tMeterCount.UniqueAccountSeqID = AccountBillingAdjustmentGas.UniqueAccountSeqID\r\n\torder by\r\n\t\t\tMeterBillingAdjustmentGas.BillingPeriodRevision,MeterBillingAdjustmentGas.OriginalAccountNumber,mbCCF\r\n\t--\r\n\topen IndividualMeterOnMultiMeterAccountCursor\r\n\r\n\t-- Read first row\r\n\tfetch IndividualMeterOnMultiMeterAccountCursor into \r\n\t\t\t@UploadConEdisonAccountBillingAdjustmentGasSeqid,\r\n\t\t\t@UploadConEdisonMeterBillingAdjustmentGasSeqid,\r\n\t\t\t@NumberOfMeters,\r\n\t\t\t@BillingPeriodRevision,  \r\n\t\t\t@OriginalAccountNumber,  \r\n\t\t\t@OriginalMeterNumber,\r\n\t\t\t@MeterCCF,\r\n\t\t\t@AccountBillingRevisedCCF, \r\n\t\t\t@AccountBillingCanceledCCF,\r\n\t\t\t@AccountBillingRevisedTherms, \r\n\t\t\t@AccountBillingCanceledTherms\r\n\t--\r\n\t--\tInitialize the variables after the initial read\r\n\t--\r\n\tset @ProRatedAccountBillingRevisedTherms = 0\r\n\tset @ProRatedAccountBillingCanceledTherms = 0\r\n\tset @ProRatedAccountBillingCanceledCCF = 0\r\n\tset @NumberOfMetersRemainToBeProcessed = @NumberOfMeters\t\r\n\t--\r\n\twhile @@fetch_status =0\r\n\t  begin\r\n\t\t--\r\n\t--\tset @idx = @idx+1\r\n\t--\tprint 'Counter [ '+cast(@idx as varchar(10))+'] - AccountSeqid: '+cast(@UploadConEdisonAccountBillingAdjustmentGasSeqid as varchar(10))+' - MeterSeqid: '+cast(@UploadConEdisonMeterBillingAdjustmentGasSeqid as varchar(10))+' - '+@BillingPeriodRevision+' - '+@OriginalAccountNumber+' - '+@OriginalMeterNumber\r\n\t--\tprint 'Counter [ '+cast(@idx as varchar(10))+'] - Revised Therms: '+cast(@AccountBillingRevisedTherms as varchar(10))+' - MeterCCF: '+cast(@MeterCCF as varchar(10))+' - abRevisedCCF'+cast(@AccountBillingRevisedCCF as varchar(10))+' - abCanceledTherms: '+cast(@AccountBillingCanceledTherms as varchar(10))+' - '+' - abCanceledCCF: '+cast(@AccountBillingCanceledCCF as varchar(10))\r\n\t\t--\r\n\t\tif (@NumberOfMetersRemainToBeProcessed <> 1\t)\r\n\t\t   begin\r\n\t\t\t\t--\r\n\t\t\t\t--\tPro-rate the usage and accummulate the usage for the n-1 meters RevisedTherms\r\n\t\t\t\t--\r\n\t\t\t\tset @ProRatedMeterBillingRevisedTherms = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingRevisedTherms * (@MeterCCF/@AccountBillingRevisedCCF),0) end \r\n\t\t\t\tset @ProRatedMeterBillingCanceledTherms = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledTherms * (@MeterCCF/@AccountBillingRevisedCCF),0) end\r\n\t\t\t\tset @ProRatedMeterBillingCanceledCCF = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledCCF * (@MeterCCF/@AccountBillingRevisedCCF),0) end \r\n\t\t\t\t--\r\n\t\t\t\tdeclare @err int\r\n\t\t\t\r\n\t\t\t\tselect @err = @@error\r\n\t\t\t\tif(@err <>0)\r\n\t\t\t\tbegin\r\n\t\t\t\t\tprint '======================================================================'\r\n\t\t\t\t\tprint 'meter:' + @OriginalMeterNumber\r\n\t\t\t\t\tprint 'AccountBillingRevisedCCF' +\tcast(@AccountBillingRevisedCCF as varchar)\r\n\t\t\t\t\tprint 'AccountBillingRevisedTherms' + cast(@AccountBillingRevisedTherms as varchar)\r\n\t\t\t\t\tprint 'MeterCCF' + cast(@MeterCCF as varchar)\r\n\t\t\t\t\tprint 'AccountBillingRevisedCCF' + cast(@AccountBillingRevisedCCF as varchar)\r\n\t\t\t\t\tprint '======================================================================'\r\n\t\t\t\tend\r\n\t\t\t\r\n\t\t\t\tset @ProRatedMeterBillingCanceledTherms = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledTherms * (@MeterCCF/@AccountBillingRevisedCCF),0) end\r\n\t\t\t\tset @ProRatedMeterBillingCanceledCCF = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledCCF * (@MeterCCF/@AccountBillingRevisedCCF),0) end \r\n\t\t\t\t--\r\n\t\t\t\tset @ProRatedAccountBillingRevisedTherms = @ProRatedAccountBillingRevisedTherms + @ProRatedMeterBillingRevisedTherms\r\n\t\t\t\tset @ProRatedAccountBillingCanceledTherms = @ProRatedAccountBillingCanceledTherms + @ProRatedMeterBillingCanceledTherms\r\n\t\t\t\tset @ProRatedAccountBillingCanceledCCF = @ProRatedAccountBillingCanceledCCF + @ProRatedMeterBillingCanceledCCF\r\n\t\t   end\r\n\t\telse\r\n\t\t   BEGIN\r\n\t\t\t\t--\r\n\t\t\t\t--\tDerive the last meters usage and reset the usage accummulators for the next set of meters\r\n\t\t\t\t--\r\n\t\t\t\tset @ProRatedMeterBillingRevisedTherms = @AccountBillingRevisedTherms - @ProRatedAccountBillingRevisedTherms\r\n\t\t\t\tset @ProRatedMeterBillingCanceledTherms = @AccountBillingCanceledTherms - @ProRatedAccountBillingCanceledTherms\r\n\t\t\t\tset @ProRatedMeterBillingCanceledCCF = @AccountBillingCanceledCCF - @ProRatedAccountBillingCanceledCCF\r\n\t\t\t\t--\r\n\t\t\t\tset @ProRatedAccountBillingRevisedTherms = 0\r\n\t\t\t\tset @ProRatedAccountBillingCanceledTherms = 0\r\n\t\t\t\tset @ProRatedAccountBillingCanceledCCF = 0\r\n\t\t   end\r\n\t\t--\r\n\t--\r\n\t--\tCheck the data for testing purposes only\r\n\t--\r\n\t--\tselect \t@BillingPeriodRevision,@OriginalAccountNumber,@OriginalMeterNumber,\r\n\t--\t\t\t@NumberOfMetersRemainToBeProcessed,@MeterCCF,@AccountBillingRevisedCCF,@AccountBillingRevisedTherms,@AccountBillingCanceledTherms,@AccountBillingCanceledCCF,\r\n\t--\t\t\t@ProRatedMeterBillingRevisedTherms,@ProRatedMeterBillingCanceledTherms,@ProRatedMeterBillingCanceledCCF,\r\n\t--\t\t\t@ProRatedAccountBillingRevisedTherms,@ProRatedAccountBillingCanceledTherms,@ProRatedAccountBillingCanceledCCF\r\n\t\t--\r\n\t\t--\tUpdate the meter usage\r\n\t\t--\r\n\t\tUPDATE    ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t\tSET   \r\n\t\t\t\tCanceledBilledCCF = @ProRatedMeterBillingCanceledCCF,\r\n\t\t\t\tCanceledBilledTherms = @ProRatedMeterBillingCanceledTherms,\r\n\t\t\t\tRevisedBilledTherms = @ProRatedMeterBillingRevisedTherms\r\n\t\twhere\t\r\n\t\t\t\tBillingPeriodRevision = @BillingPeriodRevision and \r\n\t\t\t\tOriginalAccountNumber = @OriginalAccountNumber and \r\n\t\t\t\tOriginalMeterNumber = @OriginalMeterNumber\r\n\r\n\t\t--\t\r\n\t\tfetch IndividualMeterOnMultiMeterAccountCursor into \r\n\t\t\t@UploadConEdisonAccountBillingAdjustmentGasSeqid,\r\n\t\t\t@UploadConEdisonMeterBillingAdjustmentGasSeqid,\r\n\t\t\t@NumberOfMeters,\r\n\t\t\t@BillingPeriodRevision,  \r\n\t\t\t@OriginalAccountNumber,  \r\n\t\t\t@OriginalMeterNumber,\r\n\t\t\t@MeterCCF,\r\n\t\t\t@AccountBillingRevisedCCF, \r\n\t\t\t@AccountBillingCanceledCCF,\r\n\t\t\t@AccountBillingRevisedTherms, \r\n\t\t\t@AccountBillingCanceledTherms\r\n\t\t--\t\t\t\r\n\t\t--\tCheck if the number of meters that remain to be processed for the account in the billing period is not equal to one.\r\n\t\t--\t\t\t\r\n\t\tif (@NumberOfMetersRemainToBeProcessed <> 1\t)\r\n\t\t   BEGIN\r\n\t\t\t\tset @NumberOfMetersRemainToBeProcessed = @NumberOfMetersRemainToBeProcessed - 1\r\n\t\t   end\r\n\t\telse\r\n\t\t   BEGIN\r\n\t\t\t\tset @NumberOfMetersRemainToBeProcessed = @NumberOfMeters\t\r\n\t\t   end\r\n\r\n\t\r\n\t--\r\n\t end \r\n\t--\r\n\tclose IndividualMeterOnMultiMeterAccountCursor\r\n\r\n\tDeallocate IndividualMeterOnMultiMeterAccountCursor\r\nEND;",
      "created": "2025-06-10 21:41:26.837000",
      "last_altered": "2025-06-10 21:41:26.837000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_16_ProRateConEdisonAccountBillingUsageToMeterBilling",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Upload_16_ProRateConEdisonAccountBillingUsageToMeterBilling` is designed to handle the pro-rating of gas usage for Con Edison accounts that have multiple meters. It processes accounts where more than one meter was billed during a specific billing period revision. The procedure uses a cursor to iterate through these accounts and meters, calculating pro-rated usage for each meter based on its contribution to the total account usage. The pro-rated values are then updated in the `ConEd.UploadConEdisonMeterBillingAdjustmentGas` table.\n\n#### 2. Complexity Level: Medium\n\nThe complexity of this stored procedure is medium due to the following factors:\n- It involves multiple SQL operations, including joins, aggregations, and updates.\n- It uses a cursor to iterate over a result set, which can be complex to manage and optimize.\n- The logic for pro-rating usage involves conditional calculations and accumulations.\n\n#### 3. Input Parameters\n\nThis stored procedure does not take any input parameters. It operates on data already present in the database tables.\n\n#### 4. Business Logic and Workflow\n\n- **Data Preparation**: The procedure begins by declaring several variables to hold data for processing each meter and account.\n- **Cursor Definition**: A cursor named `IndividualMeterOnMultiMeterAccountCursor` is defined to select accounts with multiple meters. It joins and aggregates data from `UploadConEdisonMeterBillingAdjustmentGas` and `UploadConEdisonAccountBillingAdjustmentGas` tables to prepare the data for processing.\n- **Cursor Processing**: \n  - The cursor is opened, and the first row is fetched into local variables.\n  - A loop processes each row fetched by the cursor:\n    - If more than one meter remains to be processed, the procedure calculates pro-rated usage for the current meter based on its CCF usage relative to the total account CCF usage.\n    - If only one meter remains, the procedure calculates the remaining usage for this meter by subtracting the accumulated pro-rated usage from the total account usage.\n    - The calculated pro-rated values are used to update the `UploadConEdisonMeterBillingAdjustmentGas` table.\n    - The loop continues until all rows are processed.\n- **Cursor Cleanup**: The cursor is closed and deallocated after processing.\n\n#### 5. Performance Considerations\n\n- **Cursor Usage**: Cursors can be slow, especially with large datasets, as they process rows one at a time. Consider replacing the cursor with set-based operations if possible.\n- **Indexing**: Ensure that the tables involved have appropriate indexes on columns used in joins and where clauses to improve performance.\n- **Error Handling**: The procedure includes basic error checking using `@@error`, but it could be enhanced with more robust error handling mechanisms.\n\n#### 6. Potential Issues or Risks\n\n- **Performance**: The use of a cursor can lead to performance bottlenecks, especially with large datasets. This could impact the overall efficiency of the procedure.\n- **Division by Zero**: The procedure checks for division by zero when calculating pro-rated values, but any changes to the logic or data could introduce risks if not carefully managed.\n- **Data Integrity**: The procedure updates the `UploadConEdisonMeterBillingAdjustmentGas` table. Ensure that the logic correctly handles all edge cases to maintain data integrity.\n- **Concurrency**: If this procedure is run concurrently by multiple processes, it could lead to locking issues or data inconsistencies. Consider implementing transaction management and isolation levels if necessary.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3562,
      "api_response_id": "chatcmpl-ByevjWeXkz06BDd0GPxqPNAEJkZW7"
    },
    "analysis_timestamp": "2025-07-29 09:45:31"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_17_TransferPreProcessedDataIntoGasSchemaTables",
      "definition": "CREATE PROCEDURE [ConEd].[usp_Upload_17_TransferPreProcessedDataIntoGasSchemaTables] \r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\t-- Transfer the ConEd.UploadConEdisonAccountBillingAdjustmentGas and ConEd.UploadConEdisonMeterBillingAdjustmentGas information into their\r\n\t-- gas couterparts (Gas.UploadAccountBillingAdjustmentGas, Gas.UploadMeterBillingAdjustmentGas) to be used for directly processing the data\r\n\t-- into EC3 Billing.AccountBillingXXXX and Billing.meterBillingXXXX tables.\r\n\tDECLARE @invoiceGroupId INT;\r\n\tSET @invoiceGroupId = 2;\r\n\r\n\tTRUNCATE TABLE Gas.UploadAccountBillingAdjustmentGas;\r\n\tTRUNCATE TABLE Gas.UploadMeterBillingAdjustmentGas;\r\n\t\r\n\tSET IDENTITY_INSERT Gas.UploadAccountBillingAdjustmentGas ON;\r\n\r\n\tINSERT INTO Gas.UploadAccountBillingAdjustmentGas\r\n\t\t(UploadAccountBillingAdjustmentGasSeqid, FacilityName, ServiceAddress, AccountSeqid, AccountBillingSeqid, AccountBillingGasSeqid, \r\n\t\tUtilityCompanySeqid, AccountStatus, AccountpreviousStatus, AccountStatusPeriod, InvoiceAccountBillingGroupSeqid, NumberOfTransactions, \r\n\t\tNumberOfRebillTransactions, NumberOfCancelTransactions, OriginalAccountNumber, BillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, \r\n\t\tEstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, TotalRebilledAmount, \r\n\t\tTotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, CanceledBilledAmount, PriorRevisedCCF, RevisedCCF, CanceledCCF, \r\n\t\tPriorRevisedTherms, RevisedTherms, CanceledTherms, AverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, BillingDate, \r\n\t\tToDate, FromDate, BillingAction, ProcessedInTheCurrentPeriod, GasRateCode, TotalCCF, TotalTherms, ThermsFactor, CancelFromDate, CancelToDate, \r\n\t\tCancelTotalCCF, CancelTotalTherms, CancelThermsFactor, CancelBillingDays, ProcessEffectiveDate, DerivedFromSpannedBill, \r\n\t\tSpannedBillingPeriodRevision, SpannedFirstCanceledBillingPeriod, SpannedBilledAmount, SpannedCCF, SpannedThermFactor, SpannedTherm, \r\n\t\tSpannedMonthlyPercentage, SpannedTotalPercentage, Notes, AuthenticatedUserID, DateAdded, LastUpdate,\r\n\t\tEnergySource,BillingCycle,SalesType,ManualPaymentOverride,ManualDataEntry,IsTimeOfDayAccount,LastPeriodModified, UniqueAccountSeqID)\r\n\tSELECT \r\n\t\tUploadConEdisonAccountBillingAdjustmentGasSeqid, FacilityName, ServiceAddress, AdjustedAccount, AdjustedAccountBilling, \r\n\t\tAdjustedAccountBillingGas, AccountUtilityCompanySeqid, AccountStatus, AccountpreviousStatus, AccountStatusPeriod, \r\n\t\t@invoiceGroupId, NumberOfTransactions, NumberOfRebillTransactions, NumberOfCancelTransactions, OriginalAccountNumber, \r\n\t\tBillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, EstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, \r\n\t\tNumberOfBillingPeriods, TotalBillingDaysRebilled, TotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, \r\n\t\tCanceledBilledAmount, PriorRevisedCCF, RevisedCCF, CanceledCCF, PriorRevisedTherms, RevisedTherms, CanceledTherms, \r\n\t\tAverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, BillingDate, ToDate, FromDate, BillingAction, ProcessedInTheCurrentPeriod, \r\n\t\tGasRateCode, TotalCCF, TotalTherms, ThermsFactor, CancelFromDate, CancelToDate, CancelTotalCCF, CancelTotalTherms, CancelThermsFactor, \r\n\t\tCancelBillingDays, ProcessEffectiveDate, DerivedFromSpannedBill, SpannedBillingPeriodRevision, SpannedFirstCanceledBillingPeriod, \r\n\t\tSpannedBilledAmount, SpannedCCF, SpannedThermFactor, SpannedTherm, SpannedMonthlyPercentage, SpannedTotalPercentage, Notes, \r\n\t\tAuthenticatedUserID, DateAdded, LastUpdate,\r\n\t\tIsNull(EnergySource,5), BillingCycle,SalesType,ManualPaymentOverride,ManualDataEntry,'N' /*IsTimeOfDayAccount*/,BillingPeriod--LastPeriodModified\r\n\t\t,UniqueAccountSeqID\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas;\r\n\r\n\tSET IDENTITY_INSERT Gas.UploadAccountBillingAdjustmentGas OFF;\r\n\tSET IDENTITY_INSERT Gas.UploadMeterBillingAdjustmentGas ON;\r\n\r\n\tINSERT INTO Gas.UploadMeterBillingAdjustmentGas\r\n\t\t(UploadMeterBillingAdjustmentGasSeqid, FacilityName, ServiceAddress, UtilityCompanySeqid, AccountSeqid, MeterSeqid, \r\n\t\tAccountExchangeMeterTrackSeqid, MeterBillingSeqid, MeterBillingGasSeqid, OriginalAccountNumber, OriginalMeterNumber, BillingPeriod, \r\n\t\tBillingPeriodRevision, FirstCancelPeriod, NumberOfTransactions, NumberOfRebillTransactions, NumberOfCancelTransactions, BillingAction, \r\n\t\tMeterBillingStatus, MeterBillingPreviousStatus, MeterBillingStatusPeriod, PriorRevisedBilledCCF, RevisedBilledCCF, CanceledBilledCCF, \r\n\t\tPriorRevisedBilledTherms, RevisedBilledTherms, CanceledBilledTherms, InitialCancelFromDate, CurrentBillingToDate, GasRateCode, FromDate, \r\n\t\tToDate, FromReadingDate, ToReadingDate, MeterFromReading, MeterToReading, Ccf, Therms, ThermsFactor, MeterConstant, \r\n\t\tTotalBillingDaysRebilled, NumberOfBillingPeriods, BillingDays, BillingDate, ReadingCode, NumberOfDials, MeterType, ProcessedInTheCurrentPeriod, \r\n\t\tProcessEffectiveDate, CancelReadingCode, CancelFromDate, CancelToDate, CancelMeterFromReading, CancelMeterToReading, CancelCcf, \r\n\t\tCancelTherms, CancelThermsFactor, CancelMeterConstant, InitialPostingDate, DerivedFromSpannedBill, SpannedBillingPeriodRevision, \r\n\t\tSpannedFirstCanceledBillingPeriod, SpannedCCF, SpannedThermFactor, SpannedTherm, SpannedMonthlyPercentage, SpannedTotalPercentage, \r\n\t\tEstimatedOrActualBilling, MeterReset,AuthenticatedUserID, Notes, DateAdded, LastUpdate,LastPeriodModified,\r\n\t\tBillCreationDate,EnergySource,BillingCycle,SalesType,IsTimeOfDayAccount,UtilityServiceAddress,MeterDials, UniqueAccountSeqID, UniqueMeterSeqID)\r\n\tSELECT UploadConEdisonMeterBillingAdjustmentGasSeqid, FacilityName, ServiceAddress, AccountUtilityCompanySeqid, AccountBilled, MeterBilled, \r\n\t\tAccountExchangeMeterTrackSeqid, AdjustedMeterBilling, AdjustedMeterBillingGas, OriginalAccountNumber, OriginalMeterNumber, BillingPeriod, \r\n\t\tBillingPeriodRevision, FirstCancelPeriod, NumberOfTransactions, NumberOfRebillTransactions, NumberOfCancelTransactions, BillingAction, \r\n\t\tMeterBillingStatus, MeterBillingPreviousStatus, MeterBillingStatusPeriod, PriorRevisedBilledCCF, RevisedBilledCCF, CanceledBilledCCF, \r\n\t\tPriorRevisedBilledTherms, RevisedBilledTherms, CanceledBilledTherms, InitialCancelFromDate, CurrentBillingToDate, GasRateCode, FromDate, \r\n\t\tToDate, FromReadingDate, ToReadingDate, MeterFromReading, MeterToReading, Ccf, Therms, ThermsFactor, MeterConstant, \r\n\t\tTotalBillingDaysRebilled, NumberOfBillingPeriods, BillingDays, BillingDate, ReadingCode, NumberOfDials, MeterType, ProcessedInTheCurrentPeriod, \r\n\t\tProcessEffectiveDate, CancelReadingCode, CancelFromDate, CancelToDate, CancelMeterFromReading, CancelMeterToReading, CancelCcf, \r\n\t\tCancelTherms, CancelThermsFactor, CancelMeterConstant, InitialPostingDate, DerivedFromSpannedBill, SpannedBillingPeriodRevision, \r\n\t\tSpannedFirstCanceledBillingPeriod, SpannedCCF, SpannedThermFactor, SpannedTherm, SpannedMonthlyPercentage, SpannedTotalPercentage, \r\n\t\tEstimatedOrActualBilling, MeterReset,AuthenticatedUserID, Notes, DateAdded, LastUpdate,BillingPeriod, --LastPeriodModified,\r\n\t\tBillCreationDate,EnergySource,BillingCycle,SalesType,'N'/*IsTimeOfDayAccount*/,UtilityServiceAddress,MeterDials,UniqueAccountSeqID, UniqueMeterSeqID\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas;\r\n\r\n\tSET IDENTITY_INSERT Gas.UploadMeterBillingAdjustmentGas OFF;\r\n\r\n\t--\tSet the dates below into each of the account billing row.  The information is being retrieved from the\r\n\t--\tCommon.UploadCycleParameters table:--\r\n\t--\t\tBillCreationDate\r\n\t--\t\tPostMarkDate \r\n\t--\t\tDatePaymentDue \r\n\t--\t\tDateAcceptanceIntoOEC\r\n\tUPDATE G\r\n\tSET\tBillCreationDate = P.BillCreationDate, \r\n\t\tPostMarkDate = P.PostMarkDate, \r\n\t\tDatePaymentDue = P.DatePaymentDue,\r\n\t\tDateAcceptanceIntoOEC = P.DateAcceptanceIntoOEC\r\n\tFROM Gas.UploadAccountBillingAdjustmentGas AS G INNER JOIN Common.UploadCycleParameters AS P ON \r\n\t\tG.UtilityCompanySeqid = P.UtilityCompanySeqid AND G.BillingPeriod = P.BillingPeriod;\r\n\r\n\t--\tPost the non-zero NetPaidAdjustment to the current billing period account billing row\r\n\tUPDATE Gas.UploadAccountBillingAdjustmentGas\r\n\tSET PaidAdjustmentAmount = VC.NetPaidAdjustment\r\n\tFROM Gas.uvw_CalculateUploadAccountBillingNetPaidAdjustment AS VC\r\n\t\tINNER JOIN Gas.UploadAccountBillingAdjustmentGas AS G ON \r\n\t\tVC.UtilityCompanySeqid = G.UtilityCompanySeqid \r\n\t\tAND G.UniqueAccountSeqID = VC.UniqueAccountSeqID\r\n\tWHERE G.BillingPeriod = G.BillingPeriodRevision;\r\n\r\n\t/* Validation */\r\n\tEXEC ConEd.usp_Validation_CheckedTransformedData;\r\nEND;",
      "created": "2025-06-10 21:41:26.850000",
      "last_altered": "2025-06-10 21:41:26.850000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_17_TransferPreProcessedDataIntoGasSchemaTables",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Upload_17_TransferPreProcessedDataIntoGasSchemaTables` is designed to transfer data from two source tables in the `ConEd` schema to their corresponding destination tables in the `Gas` schema. The procedure handles data related to account and meter billing adjustments for gas services. It involves truncating destination tables, inserting data from source tables, updating certain fields with additional information from another table, and finally executing a validation procedure.\n\n#### 2. Complexity Level: Medium\n\nThe procedure involves multiple steps, including data truncation, insertion with identity insert management, updates with joins, and a final validation step. The complexity arises from the need to manage identity columns, ensure data integrity during transfers, and perform updates based on joined data from another table.\n\n#### 3. Input Parameters\n\nThis stored procedure does not take any input parameters. It operates on predefined tables and uses a hardcoded value for `@invoiceGroupId`.\n\n#### 4. Business Logic and Workflow\n\n1. **Initialization**: \n   - `SET NOCOUNT ON;` is used to prevent the message about the number of rows affected by SQL statements from being returned.\n\n2. **Data Preparation**:\n   - The procedure begins by truncating the destination tables `Gas.UploadAccountBillingAdjustmentGas` and `Gas.UploadMeterBillingAdjustmentGas` to ensure they are empty before new data is inserted.\n\n3. **Data Transfer**:\n   - **Account Billing Adjustments**: \n     - Identity insert is enabled for `Gas.UploadAccountBillingAdjustmentGas` to allow explicit values to be inserted into the identity column.\n     - Data is inserted from `ConEd.UploadConEdisonAccountBillingAdjustmentGas` into `Gas.UploadAccountBillingAdjustmentGas`, with a hardcoded `@invoiceGroupId` set to 2.\n     - Identity insert is then disabled.\n\n   - **Meter Billing Adjustments**:\n     - Similarly, identity insert is enabled for `Gas.UploadMeterBillingAdjustmentGas`.\n     - Data is inserted from `ConEd.UploadConEdisonMeterBillingAdjustmentGas` into `Gas.UploadMeterBillingAdjustmentGas`.\n     - Identity insert is then disabled.\n\n4. **Data Enrichment**:\n   - The procedure updates the `Gas.UploadAccountBillingAdjustmentGas` table with additional date information (`BillCreationDate`, `PostMarkDate`, `DatePaymentDue`, `DateAcceptanceIntoOEC`) from `Common.UploadCycleParameters` based on matching `UtilityCompanySeqid` and `BillingPeriod`.\n\n5. **Net Paid Adjustment Update**:\n   - It updates the `PaidAdjustmentAmount` in `Gas.UploadAccountBillingAdjustmentGas` using data from a view `Gas.uvw_CalculateUploadAccountBillingNetPaidAdjustment`, ensuring only non-zero adjustments are applied.\n\n6. **Validation**:\n   - The procedure concludes by executing `ConEd.usp_Validation_CheckedTransformedData` to validate the transformed data.\n\n#### 5. Performance Considerations\n\n- **Truncation**: Truncating tables can be efficient but may not be suitable if the tables are large or if data needs to be retained for auditing.\n- **Identity Insert Management**: Enabling and disabling identity insert can be resource-intensive if not managed properly.\n- **Join Operations**: The update operations involve joins, which can be costly if the tables involved are large and not indexed appropriately.\n- **Concurrency**: The procedure does not handle concurrency explicitly, which could lead to issues if multiple instances are run simultaneously.\n\n#### 6. Potential Issues or Risks\n\n- **Data Loss**: Truncating tables without backup can lead to data loss if the procedure is executed unintentionally.\n- **Hardcoded Values**: The use of hardcoded values like `@invoiceGroupId = 2` can reduce flexibility and may require changes in the code if business logic changes.\n- **Identity Insert**: Incorrect management of identity insert settings can lead to data integrity issues.\n- **Lack of Error Handling**: The procedure does not include error handling, which could lead to unhandled exceptions and incomplete data processing.\n- **Dependency on External Procedures**: The final validation step relies on another stored procedure, `ConEd.usp_Validation_CheckedTransformedData`, which must be correctly implemented and maintained.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3225,
      "api_response_id": "chatcmpl-Byew0bkdTKAjBa6qLol8vkE2HP5dm"
    },
    "analysis_timestamp": "2025-07-29 09:45:56"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_18_Helper_ProcessCommonElectronicGasUnknownExchangeCode",
      "definition": "--**************************************************************************************\r\n--* Change Log\r\n--* xx/xx/xxxx\txx  First Version \r\n--* 11/29/2016\tzd\tturn off date 9999 99 99 to 99991231\r\n--* 04/09/2019  VY  Modified for EnergySubTypeID\r\n\r\n/*\r\n\tPAH\t\t2013-12-20\r\n\tHard coded these values that failed the validation rule.  They are not important to the meter information.\r\n\t\t'Y',  --Meter.IsOECDefinedMeter,\r\n\t\t'Y', --Meter.IsUploadProcessed,\r\n\t\t'Y', --Meter.IsMeterUsageTracked,\r\n*/\r\n--***************************************************************************************  \r\nCREATE PROCEDURE [ConEd].[usp_Upload_18_Helper_ProcessCommonElectronicGasUnknownExchangeCode]\r\n(\r\n    @AuthenticatedUserID INT\r\n\t,@ExchangeSeqid INT\r\n\t,@StatusCode INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n    DECLARE @CheckForProcessing INT, @UnknownAgencySeqid INT, @UnknownFacilitySeqid INT\r\n\t\t,@EnergyDeliveryTypeSeqid INT, @TransactionalTimeStamp DATETIME, @AccountSeqid INT\r\n\t\t,@AccountPreviousStatus VARCHAR(2), @AccountStatusCodePeriod VARCHAR(8), @MeterSeqid INT\r\n\t\t,@AccountExchangeMeterTrack INT, @TurnOffPeriod VARCHAR(6), @TurnOffDate VARCHAR(8)\r\n\t\t,@PreviousStatus VARCHAR(2), @Yes VARCHAR(1), @No VARCHAR(1), @UtilityCompanyId INT           \r\n\t\t,@AccountBillingGroup INT, @BillingPeriod VARCHAR(6), @CurrentAccountNumber VARCHAR(15)\r\n\t\t,@CurrentMeterNumber VARCHAR(7), @ExchangeCode VARCHAR(2), @AccountStatus VARCHAR(2)\r\n\t\t,@AccountEffectiveTurnOn VARCHAR(8), @AccountEffectiveTurnOff VARCHAR(8), @KWHAccountDescription VARCHAR(3)\r\n\t\t,@SalesType VARCHAR(2), @DeliveryServiceClass VARCHAR(3), @DeliveryServiceClassEffectiveDate VARCHAR(8)\r\n\t\t,@ProductionServiceClass VARCHAR(4), @ProductionServiceClassEffectiveDate VARCHAR(8), @BillingCycle VARCHAR(1)\r\n\t\t,@ExcessDistributionAccount VARCHAR(15), @TODAccount VARCHAR(1), @TripNumber VARCHAR(2)\r\n\t\t,@AccountName VARCHAR(60), @AccountAddress VARCHAR(40), @MeterStatus VARCHAR(2), @MeterEffectiveTurnOnDate VARCHAR(8)\r\n\t\t,@MeterEffectiveTurnOffDate VARCHAR(8), @MeterType VARCHAR(1), @MeterNumberofDials VARCHAR(1)           \r\n\t\t,@MeterConstant VARCHAR(5), @MeterTension VARCHAR(1), @ManualDataEntry VARCHAR(1), @EnergyDeliveryCount INT\r\n\t\t,@EnergyDeliveryType INT, @EnergyDeliveryType1 INT, @AddressSeqid INT, @EnergySource INT, @Last3OfAccountNumber VARCHAR(3)\r\n\t\t,@First12OfAccountNumber VARCHAR(12), @SplitableAccountNumber VARCHAR(1), @AccountNumber VARCHAR(15), @AccountNumber1 VARCHAR(15)\r\n\t\t,@Counter INT, @XchangeCode VARCHAR(2), @CurrentBillingPeriod VARCHAR(6), @UtilityCompanySeqid INT\r\n\t\t,@ConEdisonElectronicGas INT, @NationalGridWestElectronicGas INT;\r\n\r\n    SELECT @UnknownAgencySeqid = 396, @UnknownFacilitySeqid = 4623, @EnergyDeliveryTypeSeqid = 1\r\n\t\t,@TurnOffPeriod = '999912', @TurnOffDate = '99991231', @PreviousStatus = 'NU', @Yes = 'Y', @No = 'N'\r\n\t\t,@ConEdisonElectronicGas = 9, @NationalGridWestElectronicGas = 2, @StatusCode = 9;\r\n        \r\n\tSELECT TOP 1\r\n        @CurrentBillingPeriod = BillingPeriod\r\n    FROM Gas.UploadCommonElectronicGasExchangeData\r\n\r\n\t-- Read the exchange file and process the singleton exchange\r\n\t-- Load the variables with the data from the singleton  \r\n    SELECT @UtilityCompanyId = UtilityCompanyId,\r\n\t\t@AccountBillingGroup = AccountBillingGroup,\r\n\t\t@BillingPeriod = BillingPeriod,\r\n\t\t@CurrentAccountNumber = CurrentAccountNumber,\r\n\t\t@CurrentMeterNumber = CurrentMeterNumber,\r\n\t\t@ExchangeCode = CASE WHEN ExchangeCode = 'UN' THEN 'UA' ELSE ExchangeCode END, --Fix to make sure that Un known accounts always have a 'UA' ststus\r\n        @AccountStatus = AccountStatus,\r\n        @AccountEffectiveTurnOn = AccountEffectiveTurnOn,\r\n        @AccountEffectiveTurnOff = AccountEffectiveTurnOff,\r\n        @KWHAccountDescription = KWHAccountDescription,\r\n        @SalesType = SalesType,\r\n        @DeliveryServiceClass = DeliveryServiceClass,\r\n        @DeliveryServiceClassEffectiveDate = DeliveryServiceClassEffectiveDate,\r\n        @ProductionServiceClass = ProductionServiceClass,\r\n        @ProductionServiceClassEffectiveDate = ProductionServiceClassEffectiveDate,\r\n        @BillingCycle = BillingCycle,\r\n        @ExcessDistributionAccount = ExcessDistributionAccount,\r\n        @TODAccount = TODAccount,\r\n        @TripNumber = TripNumber,\r\n        @AccountName = AccountName,\r\n        @AccountAddress = AccountAddress,\r\n        @MeterStatus = MeterStatus,\r\n        @MeterEffectiveTurnOnDate = MeterEffectiveTurnOnDate,\r\n        @MeterEffectiveTurnOffDate = MeterEffectiveTurnOffDate,\r\n        @MeterType = MeterType,\r\n        @MeterNumberofDials = MeterNumberofDials,\r\n        @MeterConstant = MeterConstant,\r\n        @MeterTension = MeterTension,\r\n        @ManualDataEntry = ManualDataEntry,\r\n        @EnergyDeliveryCount = EnergyDeliveryCount,\r\n        @EnergyDeliveryType = EnergyDeliveryType,\r\n        @EnergyDeliveryType1 = EnergyDeliveryType1\r\n    FROM Gas.UploadCommonElectronicGasExchangeData\r\n    WHERE UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\tDECLARE @T VARCHAR(10) = 'tranProcessExchangeRecord'\r\n\tSET XACT_ABORT ON\r\n\t\t\r\n\tBEGIN TRY\r\n\t\tBEGIN TRANSACTION @T\r\n\r\n\t\t-- check if account number exists\r\n        IF (NOT EXISTS (SELECT DISTINCT * FROM Gas.UploadCommonElectronicGasExchangeData G\r\n            INNER JOIN Billing.Account A ON G.CurrentAccountNumber = A.OriginalAccountNumber\r\n            WHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid)) \r\n        BEGIN\r\n\t\t\t-- Account is non-existent\r\n\t\t\t--\r\n\t\t\t--Create new account based upon the exchange data, create default values to be modified at a later date if necessary and use the account variables default values for columns that \r\n\t\t\t-- are initially unknown.\r\n            INSERT  INTO Billing.Account\r\n\t\t\t\t(ExcessDistributionAssocEnergyAccount,\r\n                IsExcessDistribution,\r\n                CommodityAssocDeliveryAccount,\r\n                IsCommodityAccount,\r\n                UtilityAccountProvider,\r\n                AgencyAccount,\r\n                FacilityAccount,\r\n                ManualDataEntry,\r\n                CurrentAccountNumber,\r\n                OriginalAccountNumber,\r\n                AccountStatus,\r\n                AccountPreviousStatus,\r\n                AccountStatusCodePeriod,\r\n                CurrentInvoiceAccountGroup,\r\n                AccountEffectiveTurnOn,\r\n                AccountEffectiveTurnOff,\r\n                EnergySource,\r\n                EnergyAccountDescription,\r\n\t\t\t\tEnergyDeliverySubTypeId,\r\n                SalesType,\r\n                DeliveryTariffRate,\r\n                DeliveryTariffEffectiveDate, \r\n                CommodityTariffRate, \r\n                CommodityTariffEffectiveDate,\r\n                BillingCycle,\r\n                Delivery,\r\n                AccountInMultipleBuildings,\r\n                SourceOfRevenue,\r\n                TurnOnDate,\r\n                TurnOffDate,\r\n                IsTimeOfDayAccount, \r\n                Territory,\r\n                Tension,\r\n                TripNumber, \r\n                UtilityServiceAccountName,\r\n                UtilityServiceAddress,\r\n                Borough,\r\n                Block,\r\n                LotNumber,\r\n                CityPlanningBIN,\r\n                ELOAgencyAddress,\r\n                LastPeriodOriginalBilled,\r\n                LastPeriodAdjustmentBilled,\r\n                LastZeroDollarsBillingPeriod,\r\n                AdjustmentRecordSeqid,\r\n                Notes,\r\n                AuthenticatedUserID,\r\n                DateAdded,\r\n                LastUpdate)\r\n            SELECT DISTINCT\r\n                A.ExcessDistributionAssocEnergyAccount,\r\n                @No,\r\n                A.CommodityAssocDeliveryAccount,\r\n                @No,\r\n                G.UtilityCompanyId,\r\n                @UnknownAgencySeqid,\r\n                @UnknownFacilitySeqid,\r\n                @ManualDataEntry,\r\n                G.CurrentAccountNumber,\r\n                G.CurrentAccountNumber,\r\n                @ExchangeCode,\r\n                @PreviousStatus,\r\n                @CurrentBillingPeriod,\r\n                G.AccountBillingGroup,\r\n                G.AccountEffectiveTurnOn,\r\n                @TurnOffDate,\r\n                5, -- Default Value for Gas Energy Source, \r\n                1,--G.KWHAccountDescription, \r\n\t\t\t\t7, -- SubType is Natural Gas for value 7 - added on 4/9/2019 \r\n                G.SalesType,\r\n                G.DeliveryServiceClass,\r\n                G.DeliveryServiceClassEffectiveDate, \r\n                G.ProductionServiceClass,\r\n                G.ProductionServiceClassEffectiveDate,\r\n                G.BillingCycle,\r\n                @Yes,\r\n                @No,\r\n                @No,\r\n                @CurrentBillingPeriod,\r\n                @TurnOffPeriod,\r\n                G.TODAccount, \r\n                A.Territory,\r\n                G.MeterTension,\r\n                G.TripNumber,\r\n                G.AccountName,\r\n                G.AccountAddress,\r\n                G.Borough,\r\n                A.Block,\r\n                A.LotNumber,\r\n                A.CityPlanningBIN,\r\n                A.ELOAgencyAddress,\r\n                A.LastPeriodOriginalBilled,\r\n                A.LastPeriodAdjustmentBilled,\r\n                A.LastZeroDollarsBillingPeriod,\r\n                A.AdjustmentRecordSeqid,\r\n                A.Notes,\r\n                @AuthenticatedUserID,\r\n                GETDATE(),\r\n                GETDATE()\r\n            FROM Gas.UploadCommonElectronicGasExchangeData G\r\n                LEFT JOIN Billing.Account A ON G.CurrentAccountNumber = A.OriginalAccountNumber AND G.CurrentAccountNumber = A.CurrentAccountNumber\r\n            WHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid\r\n\t\t\t\t\t\t\t\r\n\t\t\t-- Get the Account sequence id after it is inserted\r\n            SELECT  @AccountSeqid = IDENT_CURRENT('Billing.Account')\r\n\t\t\t\t\t\t\t\r\n            INSERT INTO Billing.Address\r\n                (AccountSeqid,\r\n                Address1,\r\n                OECLegacyAddress,\r\n                Borough,\r\n                City,\r\n                UtilityCompanySeqid,\r\n                State,\r\n                OriginalAccountNumber,\r\n                HouseNumber,\r\n                StreetName,\r\n                AuthenticatedUserID,\r\n                DateAdded,\r\n                LastUpdate)\r\n            SELECT  @AccountSeqid,\r\n                G.AccountAddress,\r\n                G.AccountAddress,\r\n                G.Borough,\r\n                CASE G.Borough\r\n                    WHEN '1' THEN 'Manahttan'\r\n                    WHEN '2' THEN 'Bronx'\r\n                    WHEN '3' THEN 'Brooklyn'\r\n                    WHEN '4' THEN 'Queens'\r\n                    WHEN '5' THEN 'Staten Island'\r\n                    ELSE 'Up State  '\r\n                END City,\r\n                G.UtilityCompanyId,\r\n                'NY',\r\n                G.CurrentAccountNumber,\r\n                CASE WHEN '0' <= SUBSTRING(G.AccountAddress, 1, 1) AND SUBSTRING(G.AccountAddress, 1, 1) <= '9'\r\n                    THEN [dbo].[GetHouseNumberFromAddress](dbo.CutStreetFromAddress(G.AccountAddress))\r\n                    ELSE '  ' END HouseNumber,\r\n                CASE WHEN '0' <= SUBSTRING(G.AccountAddress, 1, 1) AND SUBSTRING(G.AccountAddress, 1, 1) <= '9'\r\n                    THEN [dbo].[GetStreetFromAddress](dbo.CutStreetFromAddress(G.AccountAddress))\r\n                    ELSE '  ' END StreetName,\r\n                G.authenticatedUserID,\r\n                G.DateAdded,\r\n                G.LastUpdate\r\n\t\t\tFROM Gas.UploadCommonElectronicGasExchangeData G LEFT JOIN Billing.Account A \r\n\t\t\t\tON G.UtilityCompanyId = A.UtilityAccountProvider AND G.CurrentAccountNumber = A.OriginalAccountNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid\r\n\t\t\t\t\t\t\t\r\n\t\t\t-- Get the Account sequence id after it is inserted\r\n            SELECT  @AddressSeqid = IDENT_CURRENT('Billing.Address')\r\n\t\t\t\t\t\t\t--\r\n            UPDATE  Billing.Account\r\n            SET     ELOAgencyAddress = @AddressSeqid\r\n            WHERE   (AccountSeqid = @AccountSeqid)\r\n        END;\r\n        ELSE \r\n        BEGIN\r\n\t\t\t-- Account exists, now check status code for appropriate action \t\t\r\n            SELECT DISTINCT\r\n                @AccountSeqid = A.AccountSeqid,\r\n                @AccountStatus = A.AccountStatus,\r\n                @AccountPreviousStatus = A.AccountPreviousStatus,\r\n                @AccountStatusCodePeriod = A.AccountStatusCodePeriod\r\n            FROM Billing.Account A INNER JOIN Gas.UploadCommonElectronicGasExchangeData G\r\n\t\t\t\tON A.CurrentAccountNumber = G.CurrentAccountNumber AND A.OriginalAccountNumber = G.CurrentAccountNumber\r\n            WHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid AND A.UtilityAccountProvider = @UtilityCompanySeqid;\r\n        END;\r\n\t\t\t\r\n\t\t-- Check for Legacy Account and NYPA re-using the Account for another agency\r\n\t\t-- Check that the Account is turned off, NYPA is re-using it for another agency\r\n\t\t-- else\r\n\t\t-- The account exists and is active and the account insertion is skipped but in any case the \r\n\t\t-- internal sequence id is maintained in @AccountSeqid for the meter insertion\r\n        IF (@AccountStatus = 'LG' OR @AccountStatus = '27') \r\n        BEGIN\r\n\t\t\tINSERT INTO Billing.Account\r\n\t\t\t\t(ExcessDistributionAssocEnergyAccount,\r\n                IsExcessDistribution,\r\n                CommodityAssocDeliveryAccount,\r\n                IsCommodityAccount,\r\n                UtilityAccountProvider,\r\n                AgencyAccount,\r\n                FacilityAccount,\r\n                ManualDataEntry,\r\n                CurrentAccountNumber,\r\n                OriginalAccountNumber,\r\n                AccountStatus,\r\n                AccountPreviousStatus,\r\n                AccountStatusCodePeriod,\r\n                CurrentInvoiceAccountGroup,\r\n                AccountEffectiveTurnOn,\r\n                AccountEffectiveTurnOff,\r\n                EnergySource,\r\n                EnergyAccountDescription,\r\n\t\t\t\tEnergyDeliverySubTypeId,\r\n                SalesType,\r\n                DeliveryTariffRate,\r\n                DeliveryTariffEffectiveDate,\r\n                CommodityTariffRate,\r\n                CommodityTariffEffectiveDate,\r\n                BillingCycle,\r\n                Delivery,\r\n                AccountInMultipleBuildings,\r\n                SourceOfRevenue,\r\n                TurnOnDate,\r\n                TurnOffDate,\r\n                IsTimeOfDayAccount, \r\n                Territory,\r\n                TripNumber, \r\n                UtilityServiceAccountName,\r\n                UtilityServiceAddress,\r\n                Borough,\r\n                Block,\r\n                LotNumber,\r\n                CityPlanningBIN,\r\n                ELOAgencyAddress,\r\n                LastPeriodOriginalBilled,\r\n                LastPeriodAdjustmentBilled,\r\n                LastZeroDollarsBillingPeriod,\r\n                AdjustmentRecordSeqid,\r\n                Notes,\r\n                AuthenticatedUserID,\r\n                DateAdded,\r\n                LastUpdate)\r\n            SELECT DISTINCT\r\n                A.ExcessDistributionAssocEnergyAccount,\r\n                @No,\r\n                A.CommodityAssocDeliveryAccount,\r\n                @No,\r\n                G.UtilityCompanyId,\r\n                @UnknownAgencySeqid,\r\n                @UnknownFacilitySeqid,\r\n                @ManualDataEntry,\r\n                G.CurrentAccountNumber,\r\n                G.CurrentAccountNumber,\r\n                @ExchangeCode,\r\n                @PreviousStatus,\r\n                @CurrentBillingPeriod,\r\n                G.AccountBillingGroup,\r\n                G.AccountEffectiveTurnOn,\r\n                @TurnOffDate,\r\n                G.EnergyDeliveryType,\r\n                G.KWHAccountDescription,\r\n\t\t\t\t7,\r\n                G.SalesType,\r\n                G.DeliveryServiceClass,\r\n                G.DeliveryServiceClassEffectiveDate,\r\n                G.ProductionServiceClass,\r\n                G.ProductionServiceClassEffectiveDate,\r\n                G.BillingCycle,\r\n                @Yes,\r\n                @No,\r\n                @No,\r\n                @CurrentBillingPeriod,\r\n                @TurnOffPeriod,\r\n                G.TODAccount, \r\n                A.Territory,\r\n                G.TripNumber,\r\n                G.AccountName,\r\n                G.AccountAddress,\r\n                A.Borough,\r\n                A.Block,\r\n                A.LotNumber,\r\n                A.CityPlanningBIN,\r\n                A.ELOAgencyAddress,\r\n                A.LastPeriodOriginalBilled,\r\n                A.LastPeriodAdjustmentBilled,\r\n                A.LastZeroDollarsBillingPeriod,\r\n                A.AdjustmentRecordSeqid,\r\n                A.Notes,\r\n                @AuthenticatedUserID,\r\n                GETDATE(),\r\n                GETDATE()\r\n\t\t\tFROM Billing.Account A INNER JOIN Gas.UploadCommonElectronicGasExchangeData G\r\n\t\t\t\tON A.CurrentAccountNumber = G.CurrentAccountNumber AND A.OriginalAccountNumber = G.CurrentAccountNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid AND A.UtilityAccountProvider = @UtilityCompanySeqid;\r\n\r\n\t\t\t-- Get the Account sequence id after it is inserted \r\n            SELECT  @AccountSeqid = IDENT_CURRENT('Billing.Account')\r\n        END;\r\n\t\t\t\t--\r\n        IF (NOT EXISTS(SELECT DISTINCT *, E.UtilityCompanySeqid FROM Billing.AccountExchangeMeterTrack E\r\n            INNER JOIN Gas.UploadCommonElectronicGasExchangeData G ON E.OriginalAccountNumber = G.CurrentAccountNumber\r\n                AND E.OriginalMeterNumber =G.CurrentMeterNumber\r\n            WHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid)) \r\n        BEGIN\r\n\t\t\t----Create new meter based upon the exchange data, create default values to be modified at a later date if necessary and use the meter variables default values for columns that \r\n\t\t\t---- are initially unknown.  The account sequence id  (@AccountSeqid) is passed to the meter insertion to link the account to the meter without having to join the account table to the meter and \r\n\t\t\t---- and exchange table.\r\n            IF (NOT EXISTS(SELECT * FROM Billing.Meter M INNER JOIN Gas.UploadCommonElectronicGasExchangeData G\r\n\t\t\t\t\tON M.OriginalAccountNumber = G.CurrentAccountNumber AND M.CurrentMeterNumber = G.CurrentMeterNumber\r\n\t\t\t\t\t\tAND M.OriginalMeterNumber = G.CurrentMeterNumber\r\n\t\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid)) \r\n            BEGIN\r\n                INSERT INTO Billing.Meter\r\n                    (UtilityServiceAddress,\r\n                    OriginalAccountNumber,\r\n                    CurrentMeterNumber,\r\n                    OriginalMeterNumber,\r\n                    Tension,\r\n                    IsOECDefinedMeter,\r\n                    IsUploadProcessed,\r\n                    IsMeterUsageTracked,\r\n                    EnergySource,\r\n                    EnergyAccountDescription,\r\n                    MeterStatus,\r\n                    MeterPreviousStatus,\r\n                    MeterStatusCodePeriod, \r\n                    AgencyELOMeterLocation,\r\n                    UtilityAddressMeterLocation,\r\n                    MeterSquareFootageCoverage,\r\n                    TurnOnDate,\r\n                    TurnOffDate,\r\n                    MeterEffectiveOnDate,\r\n                    MeterEffectiveOffDate,\r\n                    MeterType,\r\n                    MeterDials,\r\n                    MeterConstant,\r\n                    LastPeriodOriginalBilled,\r\n                    LastPeriodAdjustmentBilled,\r\n                    LastZeroUsageBillingPeriod,\r\n                    AdjustmentRecordSeqid,\r\n                    Notes,\r\n                    AuthenticatedUserID,\r\n                    DateAdded,\r\n                    LastUpdate)\r\n\t\t\t\tSELECT G.AccountAddress,\r\n                    G.CurrentAccountNumber,\r\n                    G.CurrentMeterNumber,\r\n                    G.CurrentMeterNumber,\r\n                    G.MeterTension,\r\n                    'Y',  --Meter.IsOECDefinedMeter,\r\n                    'Y', --Meter.IsUploadProcessed,\r\n                    'Y', --Meter.IsMeterUsageTracked,\r\n                    M.EnergySource,\r\n                    M.EnergyAccountDescription,\r\n                    @ExchangeCode,\r\n                    @PreviousStatus,\r\n                    @CurrentBillingPeriod,\r\n                    M.AgencyELOMeterLocation,\r\n                    M.UtilityAddressMeterLocation,\r\n                    M.MeterSquareFootageCoverage,\r\n                    @CurrentBillingPeriod,\r\n                    @TurnOffPeriod,\r\n                    G.MeterEffectiveTurnOnDate,\r\n                    @TurnOffDate,\r\n                    G.MeterType,\r\n                    G.MeterNumberofDials,\r\n                    G.MeterConstant,\r\n                    M.LastPeriodOriginalBilled,\r\n                    M.LastPeriodAdjustmentBilled,\r\n                    M.LastZeroUsageBillingPeriod,\r\n                    M.AdjustmentRecordSeqid,\r\n                    M.Notes,\r\n                    @AuthenticatedUserID,\r\n                    GETDATE(),\r\n                    GETDATE()\r\n\t\t\t\tFROM Billing.AccountExchangeMeterTrack EM\r\n                    INNER JOIN Billing.Meter M ON EM.OriginalMeterSeqid = M.MeterSeqid\r\n                    RIGHT JOIN Gas.UploadCommonElectronicGasExchangeData G ON EM.OriginalAccountNumber = G.CurrentAccountNumber AND EM.OriginalMeterNumber = G.CurrentMeterNumber\r\n\t\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t--Get the Meter sequence id after it is inserted\r\n                SELECT  @MeterSeqid = IDENT_CURRENT('Billing.Meter')\r\n            END;\r\n\r\n\t\t\t--  Insert the new account or existing account and new meter combination\r\n            INSERT  INTO Billing.AccountExchangeMeterTrack\r\n\t\t\t\t(UtilityCompanySeqid,\r\n\t\t\t\tOriginalAgencyDivisionSeqid,\r\n\t\t\t\tOriginalFacilitySeqid,\r\n\t\t\t\tOriginalAccountSeqid,\r\n\t\t\t\tOriginalMeterSeqid,\r\n\t\t\t\tOriginalAccountNumber,\r\n\t\t\t\tOriginalMeterNumber,\r\n\t\t\t\tAuthenticatedUserID,\r\n\t\t\t\tDateAdded,\r\n\t\t\t\tLastUpdate)\r\n            SELECT A.UtilityAccountProvider,\r\n                A.AgencyAccount,\r\n                A.FacilityAccount,\r\n                A.AccountSeqid,\r\n                M.MeterSeqid,\r\n                M.OriginalAccountNumber,\r\n                M.OriginalMeterNumber,\r\n                @AuthenticatedUserID,\r\n                GETDATE(),\r\n                GETDATE()\r\n            FROM Billing.Meter M\r\n                INNER JOIN Gas.UploadCommonElectronicGasExchangeData G ON M.OriginalAccountNumber = G.CurrentAccountNumber AND M.OriginalMeterNumber = G.CurrentMeterNumber\r\n                INNER JOIN Billing.Account A ON M.OriginalAccountNumber = A.OriginalAccountNumber\r\n            WHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid;\r\n\t\t\t\t\t\t\t\r\n\t\t\t--AccountExchangeMeterTrack\r\n\t\t\t-- Get the AccountExchangeMeterTrack sequence id after it is inserted\r\n            SELECT  @AccountExchangeMeterTrack = IDENT_CURRENT('Billing.AccountExchangeMeterTrack')\r\n\t\tEND;\r\n\r\n\t\tCOMMIT TRANSACTION @T\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tDECLARE @ErrorMessage NVARCHAR(MAX), @ErrorSeverity INT, @ErrorState INT;\r\n\t\tSELECT @ErrorMessage = ERROR_MESSAGE() + ' Line ' + CAST(ERROR_LINE() AS NVARCHAR(5)), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();\r\n\t\tROLLBACK TRANSACTION;\r\n\t\tRAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);\r\n\tEND CATCH;\r\nEND;",
      "created": "2025-06-10 21:41:26.873000",
      "last_altered": "2025-06-10 21:41:26.873000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@AuthenticatedUserID",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@ExchangeSeqid",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@StatusCode",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_18_Helper_ProcessCommonElectronicGasUnknownExchangeCode",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_18_Helper_ProcessCommonElectronicGasUnknownExchangeCode` is designed to process electronic gas exchange data, specifically handling cases where the exchange code is unknown. It performs several tasks, including checking for existing accounts, creating new accounts and meters if necessary, and updating or inserting records into various tables related to billing and account management. The procedure is part of a larger system that manages utility billing and account tracking, particularly for gas services.\n\n#### 2. Complexity Level: High\nThe complexity of this stored procedure is high due to several factors:\n- It involves multiple conditional logic branches and nested transactions.\n- It interacts with multiple tables, performing both read and write operations.\n- It includes error handling with transaction management, which adds to the complexity.\n- The procedure handles various business rules and data transformations, making it intricate to follow.\n\n#### 3. Input Parameters\n- `@AuthenticatedUserID INT`: Represents the ID of the user executing the procedure, used for auditing purposes.\n- `@ExchangeSeqid INT`: The unique identifier for the exchange data record being processed.\n- `@StatusCode INT OUTPUT`: An output parameter used to return the status code of the operation, initialized to 9 within the procedure.\n\n#### 4. Business Logic and Workflow\n- **Initialization**: Sets default values for several variables, including unknown agency and facility IDs, and default status codes.\n- **Data Retrieval**: Fetches the current billing period and other relevant data from the `Gas.UploadCommonElectronicGasExchangeData` table using the `@ExchangeSeqid`.\n- **Account Processing**:\n  - Checks if the account exists by matching the current account number with records in the `Billing.Account` table.\n  - If the account does not exist, it inserts a new account record with default and retrieved values.\n  - If the account exists, it retrieves the account sequence ID and status information.\n- **Legacy Account Handling**: If the account status indicates a legacy account, it inserts a new account record.\n- **Meter Processing**:\n  - Checks if a meter record exists for the account and meter combination.\n  - If not, it inserts a new meter record with default and retrieved values.\n- **Account-Meter Tracking**: Inserts a record into `Billing.AccountExchangeMeterTrack` to track the relationship between accounts and meters.\n- **Transaction Management**: Uses a transaction to ensure atomicity, with error handling to rollback in case of failure.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the tables involved, especially those frequently joined or filtered (`Billing.Account`, `Gas.UploadCommonElectronicGasExchangeData`), are properly indexed to optimize query performance.\n- **Batch Processing**: If this procedure is called frequently or with large datasets, consider batch processing or optimizing the logic to reduce the number of database operations.\n- **Concurrency**: The use of transactions and potential locks on tables could impact performance in a high-concurrency environment.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: While the procedure includes error handling, the use of `RAISERROR` without a specific error message format could lead to less informative error logs.\n- **Data Integrity**: The procedure assumes certain default values and hard-coded IDs, which could lead to data integrity issues if these values are not managed correctly.\n- **Scalability**: The complexity and number of operations could impact scalability, especially if the procedure is executed frequently or with large datasets.\n- **Maintenance**: The hard-coded values and complex logic make the procedure difficult to maintain and adapt to changing business requirements.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 5514,
      "api_response_id": "chatcmpl-ByewPvDrndjjgj6PboqYQwspetJAP"
    },
    "analysis_timestamp": "2025-07-29 09:46:14"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_18_ProcessExchange",
      "definition": "CREATE PROCEDURE [ConEd].[usp_Upload_18_ProcessExchange] \r\nAS\r\nBegin \r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\n--\r\ndeclare @BillingPeriod varchar(6)\r\nDeclare @UploadCommonElectronicGasExchangeDataSeqid int\r\ndeclare @StatusCode INT\r\nDECLARE @AuthenticatedUserID INT\r\n\r\nSET @AuthenticatedUserID = 1\r\n--\r\n--  Find the current active billing period\r\n--\r\nSELECT top 1 @BillingPeriod = IsNull(BillingPeriod,'187601') FROM\tGas.UploadCommonElectronicGasExchangeData\r\n--\r\nif ( @BillingPeriod = '187601' )    return -100\r\n\r\n\r\nDELETE FROM Gas.UploadCommonElectronicGasExchangeData\r\nFROM Billing.AccountExchangeMeterTrack INNER JOIN\r\n                      Billing.Account ON Billing.AccountExchangeMeterTrack.OriginalAccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n                      Billing.Meter ON Billing.AccountExchangeMeterTrack.OriginalMeterSeqid = Billing.Meter.MeterSeqid INNER JOIN\r\n                      Gas.UploadCommonElectronicGasExchangeData ON \r\n                      Billing.Meter.OriginalAccountNumber = Gas.UploadCommonElectronicGasExchangeData.CurrentAccountNumber AND \r\n                      Billing.Meter.OriginalMeterNumber = Gas.UploadCommonElectronicGasExchangeData.CurrentMeterNumber AND \r\n                      Billing.Account.UtilityAccountProvider = Gas.UploadCommonElectronicGasExchangeData.UtilityCompanyId AND \r\n                      Billing.Account.OriginalAccountNumber = Gas.UploadCommonElectronicGasExchangeData.CurrentAccountNumber\r\nWHERE (Billing.Account.AccountStatusCodePeriod < @BillingPeriod) AND (Billing.Meter.MeterStatusCodePeriod < @BillingPeriod)\t\t\r\n--\r\n--************************************************************************************** \r\n--\tDeclare Cursor\r\n--**************************************************************************************\r\n----\r\ndeclare @NumberExchangesApprovedForCreation int\r\n--\r\nSELECT\t@NumberExchangesApprovedForCreation = count(*) FROM Gas.UploadCommonElectronicGasExchangeData WHERE (ApprovedForCreation = 'Y')\r\n--\r\n--\r\n--\r\nif (@NumberExchangesApprovedForCreation = 0)  return \r\n--\r\nDeclare read_exchange_record cursor for \r\nSELECT\tUploadCommonElectronicGasExchangeDataSeqid\r\nFROM\tGas.UploadCommonElectronicGasExchangeData\r\n--WHERE \r\n--\t\t(ApprovedForCreation = 'Y')\r\nORDER BY \r\n\t\tCurrentAccountNumber, AccountEffectiveTurnOn\r\n--************************************************************************************** \r\n--\tMain Processing\r\n--**************************************************************************************\r\n--\r\nselect * from Gas.uvw_XcheckAccountMeterAndTrackTablesSeqid\r\n--\r\n--  Save the max sequence ids of the tables prior to the exchange process.\r\ntruncate table Gas.AccountMeterAndTrackTablesSeqidPriorToGasExchange\r\n--\r\ninsert into Gas.AccountMeterAndTrackTablesSeqidPriorToGasExchange\r\n(\r\n\t\t [BillingPeriod]\r\n\t\t,[TableName]\r\n\t\t,[MaxTableSeqid]\r\n\t\t,[TableRowCount]\r\n\t\t,[MaxDateAdded]\r\n)\r\nSELECT   @BillingPeriod\r\n\t\t,[TableName]\r\n\t\t,[MaxTableSeqid]\r\n\t\t,[TableRowCount]\r\n\t\t,[MaxDateAdded]\r\nFROM [Gas].[uvw_XcheckAccountMeterAndTrackTablesSeqid]\r\n\r\n--\r\nopen read_exchange_record\r\n\r\n-- Read first row\r\nfetch read_exchange_record into @UploadCommonElectronicGasExchangeDataSeqid\r\n\r\nwhile @@fetch_status =0\r\n  begin\r\n\t--\r\n\texecute ConEd.usp_Upload_18_Helper_ProcessCommonElectronicGasUnknownExchangeCode @AuthenticatedUserID,@UploadCommonElectronicGasExchangeDataSeqid,@StatusCode\r\n\t--\r\n\t-- Assumes that the exchange was completed and sets the ApprovedForCreation to 'N' so in the event that the exchange is reprocessed.  The\r\n\t-- rows that have ApprovedForCreation = 'N' will be ignored\r\n\t--\r\n\tUPDATE\tGas.UploadCommonElectronicGasExchangeData\r\n\tSET\t\tApprovedForCreation = 'N'\r\n\tWHERE \r\n\t\t\t(UploadCommonElectronicGasExchangeDataSeqid = @UploadCommonElectronicGasExchangeDataSeqid)\r\n\r\n\tfetch read_exchange_record into    @UploadCommonElectronicGasExchangeDataSeqid\r\n end \r\n--\r\nclose read_exchange_record\r\n\r\nDeallocate read_exchange_record\r\n--\r\nselect * from Gas.uvw_XcheckAccountMeterAndTrackTablesSeqid\r\n--\r\n--\tUpdate the Gas.UploadAccountBillingAdjustmentGas.AccountSeqid = Billing.Account.AccountSeqid with the seqid from the newly created account\r\n--\tfrom the Common Gas exchange data(ProcessCommonElectronicGasUnknownExchange) \r\n--\r\nupdate\tGas.UploadAccountBillingAdjustmentGas\r\nSET \r\n\t\tAccountSeqid = Billing.Account.AccountSeqid\r\nFROM \r\n\t\tGas.UploadCommonElectronicGasExchangeData INNER JOIN\r\n\t\tBilling.Account ON Gas.UploadCommonElectronicGasExchangeData.CurrentAccountNumber = Billing.Account.OriginalAccountNumber AND \r\n\t\tGas.UploadCommonElectronicGasExchangeData.UtilityCompanyId = Billing.Account.UtilityAccountProvider INNER JOIN\r\n\t\tGas.UploadAccountBillingAdjustmentGas ON \r\n\t\tGas.UploadCommonElectronicGasExchangeData.CurrentAccountNumber = Gas.UploadAccountBillingAdjustmentGas.OriginalAccountNumber\r\nwhere\t(Gas.UploadAccountBillingAdjustmentGas.AccountSeqid IS NULL)\r\nselect 'Updated Gas.UploadAccountBillingAdjustmentGas transaction Sequence ids:',@@rowcount\r\n--\r\n--update\tGas.UploadMeterBillingAdjustmentGas\r\n--\r\nupdate\tGas.UploadMeterBillingAdjustmentGas\r\nSET              \r\n\t\tAccountSeqid = Billing.AccountExchangeMeterTrack.OriginalAccountSeqid, \r\n\t\tMeterSeqid = Billing.AccountExchangeMeterTrack.OriginalMeterSeqid, \r\n\t\tAccountExchangeMeterTrackSeqid = Billing.AccountExchangeMeterTrack.AccountExchangeMeterTrackSeqid, \r\n\t\tUtilityCompanySeqid =Billing.AccountExchangeMeterTrack.UtilityCompanySeqid\r\nFROM \r\n\t\tGas.UploadCommonElectronicGasExchangeData INNER JOIN\r\n\t\tBilling.Account ON Gas.UploadCommonElectronicGasExchangeData.CurrentAccountNumber = Billing.Account.OriginalAccountNumber AND \r\n\t\tGas.UploadCommonElectronicGasExchangeData.UtilityCompanyId = Billing.Account.UtilityAccountProvider INNER JOIN\r\n\t\tBilling.AccountExchangeMeterTrack ON Billing.Account.AccountSeqid = Billing.AccountExchangeMeterTrack.OriginalAccountSeqid AND \r\n\t\tBilling.Account.OriginalAccountNumber = Billing.AccountExchangeMeterTrack.OriginalAccountNumber INNER JOIN\r\n\t\tBilling.Meter ON Billing.AccountExchangeMeterTrack.OriginalMeterSeqid = Billing.Meter.MeterSeqid AND \r\n\t\tBilling.AccountExchangeMeterTrack.OriginalMeterSeqid = Billing.Meter.MeterSeqid AND \r\n\t\tBilling.AccountExchangeMeterTrack.OriginalAccountNumber = Billing.Meter.OriginalAccountNumber AND \r\n\t\tBilling.AccountExchangeMeterTrack.OriginalMeterNumber = Billing.Meter.OriginalMeterNumber INNER JOIN\r\n\t\tGas.UploadMeterBillingAdjustmentGas ON Billing.Meter.OriginalAccountNumber = Gas.UploadMeterBillingAdjustmentGas.OriginalAccountNumber AND \r\n\t\tBilling.Meter.CurrentMeterNumber = Gas.UploadMeterBillingAdjustmentGas.OriginalMeterNumber AND \r\n\t\tBilling.Account.UtilityAccountProvider = Gas.UploadMeterBillingAdjustmentGas.UtilityCompanySeqid AND \r\n\t\tBilling.Account.OriginalAccountNumber = Gas.UploadMeterBillingAdjustmentGas.OriginalAccountNumber\r\nWHERE (Billing.Meter.MeterStatus LIKE 'U%')\r\n--\r\nselect 'Updated Gas.UploadMeterBillingAdjustmentGas transaction Sequence ids:',@@rowcount\r\n--\r\n--\r\nend",
      "created": "2025-06-10 21:41:26.887000",
      "last_altered": "2025-06-10 21:41:26.887000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_18_ProcessExchange",
      "explanation": "#### 1. Overview\nThe stored procedure `[ConEd].[usp_Upload_18_ProcessExchange]` is designed to process electronic gas exchange data within a billing system. It performs several key operations: identifying the current billing period, deleting outdated records, processing approved exchange records, updating sequence IDs, and adjusting billing data. The procedure involves multiple table operations, cursor usage for iterative processing, and calls to a helper stored procedure for detailed processing.\n\n#### 2. Complexity Level: Medium\nThe complexity level is considered medium due to the following factors:\n- The procedure involves multiple SQL operations, including SELECT, DELETE, UPDATE, and INSERT.\n- It uses a cursor for iterative processing, which adds complexity.\n- It interacts with several tables and involves conditional logic.\n- It calls an external helper stored procedure, adding another layer of complexity.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters directly. Instead, it uses internal variables and constants to manage its operations. The `@AuthenticatedUserID` is set to a constant value of 1, which might be used for auditing or logging purposes.\n\n#### 4. Business Logic and Workflow\n1. **Variable Declaration and Initialization**: \n   - Declares variables for billing period, sequence IDs, status codes, and user ID.\n   - Sets `@AuthenticatedUserID` to 1.\n\n2. **Determine Current Billing Period**:\n   - Retrieves the current billing period from `Gas.UploadCommonElectronicGasExchangeData`.\n   - If the billing period is not found, it returns an error code `-100`.\n\n3. **Delete Outdated Records**:\n   - Deletes records from `Gas.UploadCommonElectronicGasExchangeData` that are associated with accounts and meters having status codes older than the current billing period.\n\n4. **Cursor Declaration and Processing**:\n   - Counts records approved for creation.\n   - If no records are approved, the procedure exits.\n   - Declares a cursor to iterate over records in `Gas.UploadCommonElectronicGasExchangeData`.\n   - For each record, it calls a helper procedure `ConEd.usp_Upload_18_Helper_ProcessCommonElectronicGasUnknownExchangeCode`.\n   - Updates the `ApprovedForCreation` flag to 'N' after processing each record.\n\n5. **Update Sequence IDs**:\n   - Updates sequence IDs in `Gas.UploadAccountBillingAdjustmentGas` and `Gas.UploadMeterBillingAdjustmentGas` based on the processed exchange data.\n\n6. **Final Output**:\n   - Outputs the number of rows updated in the billing adjustment tables.\n\n#### 5. Performance Considerations\n- **Cursor Usage**: The use of a cursor can lead to performance issues, especially with large datasets, as it processes records row-by-row.\n- **Table Scans**: The procedure involves multiple SELECT and DELETE operations that may result in full table scans if indexes are not properly utilized.\n- **Concurrency**: The procedure does not include explicit transaction management, which could lead to concurrency issues if multiple instances run simultaneously.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: The procedure lacks comprehensive error handling, which could lead to unhandled exceptions or incorrect data processing.\n- **Hardcoded Values**: The use of hardcoded values, such as `@AuthenticatedUserID = 1`, reduces flexibility and may not be suitable for all environments.\n- **Data Integrity**: The deletion and update operations could potentially affect data integrity if not carefully managed, especially without transaction control.\n- **Scalability**: The use of cursors and lack of transaction management may impact scalability as data volume increases.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2416,
      "api_response_id": "chatcmpl-ByewhSpoNd0aclpM3t7RxvN33yajI"
    },
    "analysis_timestamp": "2025-07-29 09:46:33"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_19_helper_FixServiceClassificationDiscrepancy",
      "definition": "CREATE   PROCEDURE [ConEd].[usp_Upload_19_helper_FixServiceClassificationDiscrepancy]\r\nAS\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Automate the account level service classification discrepancy for con edison.\r\n--*\r\n--*\t\t\t1. Identify current period Account Level Service Classification Discrepancies\r\n--\t\t\t2. Get the BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\t\t\t3. Update account with new UtilityTariffRateInformation\r\n--\t\t\t4. Update AccountLevelServiceClassificationDiscrepancy with AccountIsUpdated = 'Y' for all of the accounts that were changed.\r\n--\t\t\t5. Drop temp table #MinFromDate if it exists and recreate it\r\n--\t\t\t6. Update account with new Tariff Effective Date from upload data based upon the minimum from date of the billing\r\n--\t\t\t7. A view for common usage.\r\n--*               \r\n--* Exec:       \t\t[ConEd].[usp_ConEdAccountLevelServiceClassificationDiscrepancy]\r\n--*\r\n--* Parameter(s):         @Status int output\r\n--*\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   08/16/2011\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 08/16/2011 PAH  First Version \r\n--**************************************************************************************\r\n\r\n--**************************************************************************************\r\n--Declare Variables\r\n--**************************************************************************************\r\n--\r\ndeclare @CurrentInvoiceAccountGroup int = 2\r\ndeclare @UtilityCompanySeqid int = 9\r\ndeclare @BillingPeriod varchar(6)\r\n\r\n--**************************************************************************************\r\n--Main Process\r\n--**************************************************************************************\r\nBEGIN\r\n--\r\n--\t\t\t1. Identify current period Account Level Service Classification Discrepancies\r\n--\r\ninsert  into  Billing.AccountLevelServiceClassificationDiscrepancy\r\n\t\t(CurrentInvoiceAccountGroup,UtilityTariffRateInformationSeqid, BillingPeriod, CurrentAccountNumber, AccountSeqid, \r\n\t\tUtilityServiceAddress, UtilityCompanyShortDesc, AgencyCodeOEC, AgencyShortDesc, OecFacilityNumber, FacilityName, Address1, \r\n\t\tBudgetRateClassDescription, Description, ShortDesc, AccountStatus, AccountStatusCodePeriod, IsTimeOfDayAccount, DeliveryTariffRate, TariffCode, \r\n\t\tUtilityCompanySeqid, IsTOD, AuthenticatedUserID, Notes, DateAdded, LastUpdate)\r\n--\r\nSELECT distinct\t\t\r\n\t\tBilling.Account.CurrentInvoiceAccountGroup,Billing.Account.UtilityTariffRateInformationSeqid,ConEd.UploadConEdisonAccount.BillingPeriod,   Billing.Account.CurrentAccountNumber, Billing.Account.AccountSeqid, Billing.Account.UtilityServiceAddress, Billing.UtilityCompany.ShortDesc AS UtilityCompanyShortDesc, \r\n\t\tBilling.AgencyDivision.AgencyCodeOEC, Billing.AgencyDivision.AgencyShortDesc, Billing.Facility.OecFacilityNumber, Billing.Facility.FacilityName, \r\n\t\tBilling.Facility.Address1, Billing.UtilityTariffRateInformation.BudgetRateClassDescription, Billing.UtilityTariffRateInformation.Description, \r\n\t\tBilling.UtilityTariffRateInformation.ShortDesc, Billing.Account.AccountStatus, Billing.Account.AccountStatusCodePeriod, Billing.Account.IsTimeOfDayAccount, \r\n\t\tBilling.UtilityTariffRateInformation.DeliveryTariffRate, ConEd.UploadConEdisonAccount.TariffCode, 9 AS UtilityCompanySeqid, 'N' AS IsTOD,\r\n\t\t1,null,getdate(),getdate()\r\nFROM \r\n\t\tBilling.Account INNER JOIN\r\n\t\tConEd.UploadConEdisonAccount ON Billing.Account.CurrentAccountNumber = ConEd.UploadConEdisonAccount.AccountNumber INNER JOIN\r\n\t\tBilling.UtilityTariffRateInformation ON \r\n\t\tBilling.UtilityTariffRateInformation.UtilityTariffRateInformationSeqid = Billing.Account.UtilityTariffRateInformationSeqid AND \r\n\t\tConEd.UploadConEdisonAccount.TariffCode <> Billing.UtilityTariffRateInformation.DeliveryTariffRate INNER JOIN\r\n\t\tBilling.AgencyDivision ON Billing.Account.AgencyAccount = Billing.AgencyDivision.AgencyDivisionSeqid INNER JOIN\r\n\t\tBilling.Facility ON Billing.Account.FacilityAccount = Billing.Facility.FacilitySeqid INNER JOIN\r\n\t\tBilling.UtilityCompany ON Billing.Account.UtilityAccountProvider = Billing.UtilityCompany.UtilityCompanySeqid AND \r\n\t\tBilling.UtilityTariffRateInformation.UtilityCompanyTariff = Billing.UtilityCompany.UtilityCompanySeqid AND \r\n\t\tBilling.UtilityTariffRateInformation.UtilityCompanyTariff = Billing.UtilityCompany.UtilityCompanySeqid\r\nWHERE \r\n\t\t(Billing.Account.CurrentInvoiceAccountGroup = 2) AND \r\n\t\t(Billing.Account.AccountStatus NOT IN ('AX'))\r\n--\r\n--\t\t\t2. Get the BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\r\nSELECT  top 1   @BillingPeriod = BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\r\n--\t\t\t3. Update account with new UtilityTariffRateInformation\r\n--\r\nUPDATE    Billing.Account\r\nSET              \r\n\t\tUtilityTariffRateInformationSeqid =Billing.UtilityTariffRateInformation.UtilityTariffRateInformationSeqid, \r\n\t\tIsTimeOfDayAccount =Billing.UtilityTariffRateInformation.IsTod, \r\n\t\tDeliveryTariffRate =Billing.UtilityTariffRateInformation.DeliveryTariffRate, \r\n\t\tCommodityTariffRate =Billing.UtilityTariffRateInformation.DeliveryTariffRate, \r\n\t\tAccountStatusCodePeriod = @BillingPeriod, \r\n\t\tFireAuditTrigger = 'Y', \r\n\t\tNotes = 'Automated Service Classification update', \r\n\t\tAuthenticatedUserID = 1, \r\n\t\tLastUpdate = GETDATE()\r\nFROM \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy INNER JOIN\r\n\t\tBilling.Account ON Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n\t\tBilling.UtilityTariffRateInformation ON \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.TariffCode = Billing.UtilityTariffRateInformation.DeliveryTariffRate AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.UtilityCompanySeqid = Billing.UtilityTariffRateInformation.UtilityCompanyTariff AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.IsTOD = Billing.UtilityTariffRateInformation.IsTod\r\nWHERE \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod) AND \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup) and\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.AccountIsUpdated = 'N')\r\n--\r\n--\t\t\t4. Update AccountLevelServiceClassificationDiscrepancy with AccountIsUpdated = 'Y' for all of the accounts that were changed.\r\n--\r\n\t\r\nupdate\tBilling.AccountLevelServiceClassificationDiscrepancy\r\nSET              \r\n\t\tAccountIsUpdated = 'Y',\r\n\t\tDeliveryTariffRateExistsInEC3 = 'Y'\r\nFROM \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy INNER JOIN\r\n\t\tBilling.Account ON Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n\t\tBilling.UtilityTariffRateInformation ON \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.TariffCode = Billing.UtilityTariffRateInformation.DeliveryTariffRate AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.UtilityCompanySeqid = Billing.UtilityTariffRateInformation.UtilityCompanyTariff AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.IsTOD = Billing.UtilityTariffRateInformation.IsTod\r\nWHERE \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod) AND \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup) and\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.AccountIsUpdated = 'N')\r\n--\r\n--\t\t\t5. Drop temp table #MinFromDate if it exists and recreate it\r\n--\r\nIF OBJECT_ID('tempdb..#MinFromDate') IS NOT NULL DROP TABLE #MinFromDate\r\n--\r\nSELECT  \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.BillingPeriod,   \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber, \r\n\t\tConEd.UploadConEdisonAccount.AccountNumber,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.AccountSeqid,\r\n\t\tmin(ConEd.UploadConEdisonAccount.FromDate) as DeliveryTariffEffectiveDate,\r\n\t\tAccountIsUpdated,\r\n\t\tDeliveryTariffRateExistsInEC3\r\n\t\r\ninto\t#MinFromDate\r\nFROM \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy INNER JOIN\r\n\t\tConEd.UploadConEdisonAccount ON \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = ConEd.UploadConEdisonAccount.BillingPeriod AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber = ConEd.UploadConEdisonAccount.AccountNumber\r\nwhere\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod) and\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup)\t\t\r\ngroup by \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.BillingPeriod,   \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber, \r\n\t\tConEd.UploadConEdisonAccount.AccountNumber,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.AccountSeqid,\r\n\t\tAccountIsUpdated,\r\n\t\tDeliveryTariffRateExistsInEC3\r\n--\r\n--\t\t\t6. Update account with new Tariff Effective Date from upload data based upon the minimum from date of the billing\r\n--\r\nUPDATE    Billing.Account\r\nSET              \r\n\t\tDeliveryTariffEffectiveDate = [#MinFromDate].DeliveryTariffEffectiveDate, \r\n\t\tCommodityTariffEffectiveDate =[#MinFromDate].DeliveryTariffEffectiveDate\r\nFROM \r\n\t\t[#MinFromDate] INNER JOIN\r\n\t\tBilling.Account ON [#MinFromDate].AccountSeqid = Billing.Account.AccountSeqid\r\nWHERE \r\n\t\t([#MinFromDate].AccountIsUpdated = 'Y') AND \r\n\t\t([#MinFromDate].DeliveryTariffRateExistsInEC3 = 'Y')\r\n--\r\n--\t\t\t7. Common view.\r\n--\r\nSELECT * \r\nFROM Common.uvw_AccountLevelServiceClassificationDiscrepancyCorrectionFromUploadData vw\r\nWHERE \r\n\t\t(vw.BillingPeriod = @BillingPeriod) AND \r\n\t\t(vw.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup)\r\n--\r\nEND",
      "created": "2025-06-10 21:41:26.900000",
      "last_altered": "2025-06-10 21:41:26.900000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_19_helper_FixServiceClassificationDiscrepancy",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_19_helper_FixServiceClassificationDiscrepancy` is designed to automate the resolution of service classification discrepancies at the account level for Con Edison. It identifies discrepancies between the current account data and uploaded data, updates account records with new tariff information, and logs these changes. The procedure also manages temporary data for processing and provides a view of the updated discrepancies.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including data insertion, updates, temporary table management, and complex joins across several tables. While it is not overly complex in terms of logic, the number of operations and dependencies on various tables and conditions elevate its complexity.\n\n#### 3. Input Parameters\n- The procedure does not take any input parameters directly. However, it uses internal variables such as `@CurrentInvoiceAccountGroup`, `@UtilityCompanySeqid`, and `@BillingPeriod` to control its logic flow.\n\n#### 4. Business Logic and Workflow\n1. **Identify Discrepancies**: Inserts records into `Billing.AccountLevelServiceClassificationDiscrepancy` for accounts where the uploaded tariff code does not match the current delivery tariff rate.\n2. **Retrieve Billing Period**: Selects the billing period from `ConEd.UploadConEdisonAccount` to use in subsequent updates.\n3. **Update Accounts**: Updates `Billing.Account` records with new tariff information and marks them for audit.\n4. **Log Updates**: Updates `Billing.AccountLevelServiceClassificationDiscrepancy` to indicate which accounts have been updated.\n5. **Manage Temporary Data**: Drops and recreates a temporary table `#MinFromDate` to store the minimum `FromDate` for each account.\n6. **Update Effective Dates**: Updates accounts with new tariff effective dates based on the temporary data.\n7. **View Updated Discrepancies**: Selects from a view to display updated discrepancies for the current billing period and invoice account group.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the tables involved in joins and where clauses are properly indexed to optimize query performance.\n- **Temporary Table Usage**: The use of a temporary table can be resource-intensive. Ensure that the server has adequate resources and that the tempdb is optimized.\n- **Concurrency**: The procedure may lock rows in the `Billing.Account` and `Billing.AccountLevelServiceClassificationDiscrepancy` tables during updates, potentially impacting concurrent transactions.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: The procedure assumes that the uploaded data is accurate. Incorrect data in `ConEd.UploadConEdisonAccount` could lead to erroneous updates.\n- **Error Handling**: The procedure lacks explicit error handling. Failures in any step could leave the database in an inconsistent state.\n- **Scalability**: As the volume of data grows, the performance of the procedure may degrade, especially if the temporary table operations are not optimized.\n- **Hardcoded Values**: The procedure uses hardcoded values (e.g., `UtilityCompanySeqid = 9`), which may need to be updated if the underlying business logic changes.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3156,
      "api_response_id": "chatcmpl-Byex0bIlOCN2LCwslFmD71NZ9KYmZ"
    },
    "analysis_timestamp": "2025-07-29 09:46:49"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_19_helper_UploadAccountDataToEC3",
      "definition": "-- =============================================\r\n-- Update History:\r\n--\r\n-- UPDATE   VY  12/20/2018  Modified for  UniqueAccountSeqID and UniqueMeterSeqID\r\n-- =============================================\r\nCREATE  PROCEDURE [ConEd].[usp_Upload_19_helper_UploadAccountDataToEC3]\r\nAS \r\nBEGIN \r\n    DECLARE @NumberOfAdjustmentsAdded INT\r\n    DECLARE @CurrentBillingPeriod VARCHAR(8)\r\n    DECLARE @InvoiceAccountBillingGroupSeqid INT \r\n    DECLARE @UtilityCompanySeqid INT\r\n    DECLARE @HasAccountBillingAdjustmentGasBeenProcessed INT\r\n    DECLARE @HasAccountBillingGasBeenProcessed INT\r\n    DECLARE @HasAccountBillingBeenProcessed INT\r\n    DECLARE @BillingAccountBillingGasUpdateTransactionCount INT\r\n    DECLARE @BillingAccountBillingUpdateTransactionCount INT \r\n    DECLARE @BillingAccountBillingGasInsertTransactionCount INT\r\n    DECLARE @BillingAccountBillingInsertTransactionCount INT \r\n\r\n\t-- Get all of the generalized parameters needed to process the account billing from the Gas.UploadAccountBillingAdjustmentGas\r\n    SELECT TOP (1) @CurrentBillingPeriod = BillingPeriod,\r\n        @InvoiceAccountBillingGroupSeqid = InvoiceAccountBillingGroupSeqid,\r\n        @UtilityCompanySeqid = UtilityCompanySeqid\r\n    FROM Gas.UploadAccountBillingAdjustmentGas\r\n\r\n    SELECT  @HasAccountBillingAdjustmentGasBeenProcessed = COUNT(*)\r\n    FROM Billing.AccountBillingAdjustmentGas\r\n    WHERE   BillingPeriod = @CurrentBillingPeriod AND @UtilityCompanySeqid = UtilityCompanySeqid\r\n            AND InvoiceAccountGroupSeqid = @InvoiceAccountBillingGroupSeqid\r\n\r\n\tDECLARE @T VARCHAR(10) = 'tranProcessAccount' \r\n\tDECLARE @errMessage VARCHAR(max)\r\n\tSET XACT_ABORT ON\r\n\t\r\n\tBEGIN TRY\r\n        IF ( ISNULL(@HasAccountBillingAdjustmentGasBeenProcessed, 1) = 0 ) \r\n        BEGIN\r\n            DECLARE @maxAccountBillingAdjustmentGasSeqid INT\r\n            SELECT  @maxAccountBillingAdjustmentGasSeqid = ISNULL(MAX(AccountBillingAdjustmentGasSeqid), 0)\r\n            FROM Billing.AccountBillingAdjustmentGas\r\n\t\t\r\n\t\t\tINSERT  INTO Billing.AccountBillingAdjustmentGas\r\n\t\t\t\t(UniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\t\tUploadAccountBillingAdjustmentGasSeqid,\r\n\t\t\t\tAccountSeqid,\r\n\t\t\t\tAccountBillingSeqid,\r\n\t\t\t\tAccountBillingGasSeqid,\r\n\t\t\t\tUtilityCompanySeqid,\r\n\t\t\t\tInvoiceAccountGroupSeqid,\r\n\t\t\t\tOriginalAccountNumber,\r\n\t\t\t\tFacilityName,\r\n\t\t\t\tServiceAddress,\r\n\t\t\t\tBillingPeriod,\r\n\t\t\t\tBillingPeriodRevision,\r\n\t\t\t\tAccountStatus,\r\n\t\t\t\tAccountpreviousStatus,\r\n\t\t\t\tAccountStatusPeriod,\r\n\t\t\t\tNumberOfTransactions,\r\n\t\t\t\tNumberOfRebillTransactions,\r\n\t\t\t\tNumberOfCancelTransactions,\r\n\t\t\t\tFirstCanceledBillingPeriod,\r\n\t\t\t\tEstimatedOrActualBilling,\r\n\t\t\t\tInitialCancelFromDate,\r\n\t\t\t\tCurrentBillingToDate,\r\n\t\t\t\tNumberOfBillingPeriods,\r\n\t\t\t\tTotalBillingDaysRebilled,\r\n\t\t\t\tTotalRebilledAmount,\r\n\t\t\t\tTotalCanceledAmount,\r\n\t\t\t\tPriorRevisedBilledAmount,\r\n\t\t\t\tRevisedBilledAmount,\r\n\t\t\t\tCanceledBilledAmount,\r\n\t\t\t\tPriorRevisedCCF,\r\n\t\t\t\tRevisedCCF,\r\n\t\t\t\tCanceledCCF,\r\n\t\t\t\tPriorRevisedTherms,\r\n\t\t\t\tRevisedTherms,\r\n\t\t\t\tCanceledTherms,\r\n\t\t\t\tAverageRebillCostOfGasCharge,\r\n\t\t\t\tAverageRebillThermsFactor,\r\n\t\t\t\tBillingDays,\r\n\t\t\t\tBillingDate,\r\n\t\t\t\tToDate,\r\n\t\t\t\tFromDate,\r\n\t\t\t\tBillingAction,\r\n\t\t\t\tProcessedInTheCurrentPeriod,\r\n\t\t\t\tGasRateCode,\r\n\t\t\t\tTotalCCF,\r\n\t\t\t\tTotalTherms,\r\n\t\t\t\tThermsFactor,\r\n\t\t\t\tCancelFromDate,\r\n\t\t\t\tCancelToDate,\r\n\t\t\t\tCancelTotalCCF,\r\n\t\t\t\tCancelTotalTherms,\r\n\t\t\t\tCancelThermsFactor,\r\n\t\t\t\tCancelBillingDays,\r\n\t\t\t\tProcessEffectiveDate,\r\n\t\t\t\tDerivedFromSpannedBill,\r\n\t\t\t\tSpannedBillingPeriodRevision,\r\n\t\t\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\t\t\tSpannedBilledAmount,\r\n\t\t\t\tSpannedCCF,\r\n\t\t\t\tSpannedThermFactor,\r\n\t\t\t\tSpannedTherm,\r\n\t\t\t\tSpannedMonthlyPercentage,\r\n\t\t\t\tSpannedTotalPercentage,\r\n\t\t\t\tBillCreationDate,\r\n\t\t\t\tPostMarkDate,\r\n\t\t\t\tDatePaymentDue,\r\n\t\t\t\tDateAcceptanceIntoOEC,\r\n\t\t\t\tPaidAdjustmentAmount,\r\n\t\t\t\tNotes,\r\n\t\t\t\tAuthenticatedUserID,\r\n\t\t\t\tDateAdded,\r\n\t\t\t\tLastUpdate,\r\n\t\t\t\tEnergySource,\r\n\t\t\t\tBillingCycle,\r\n\t\t\t\tSalesType,\r\n\t\t\t\tManualPaymentOverride,\r\n\t\t\t\tManualDataEntry,\r\n\t\t\t\tIsTimeOfDayAccount,\r\n\t\t\t\tLastPeriodModified,\r\n\t\t\t\tDiscountedAmount,\r\n\t\t\t\tDiscountPercentage,\r\n\t\t\t\tBalanceDollars,\r\n\t\t\t\tCreditDollars)\r\n\t\t\tSELECT  UniqueAccountSeqID, /* added on 12/20/2018 */ \r\n\t\t\t\tUploadAccountBillingAdjustmentGasSeqid,\r\n\t\t\t\tAccountSeqid,\r\n\t\t\t\tAccountBillingSeqid,\r\n\t\t\t\tAccountBillingGasSeqid,\r\n\t\t\t\tUtilityCompanySeqid,\r\n\t\t\t\t@InvoiceAccountBillingGroupSeqid, --  InvoiceAccountBillingGroupSeqid Con Edison = 2 and National Grid West is 3 or 4\r\n\t\t\t\tOriginalAccountNumber,\r\n\t\t\t\tFacilityName,\r\n\t\t\t\tServiceAddress,\r\n\t\t\t\tBillingPeriod,\r\n\t\t\t\tBillingPeriodRevision,\r\n\t\t\t\tAccountStatus,\r\n\t\t\t\tAccountpreviousStatus,\r\n\t\t\t\tAccountStatusPeriod,\r\n\t\t\t\tNumberOfTransactions,\r\n\t\t\t\tNumberOfRebillTransactions,\r\n\t\t\t\tNumberOfCancelTransactions,\r\n\t\t\t\tFirstCanceledBillingPeriod,\r\n\t\t\t\tEstimatedOrActualBilling,\r\n\t\t\t\tInitialCancelFromDate,\r\n\t\t\t\tCurrentBillingToDate,\r\n\t\t\t\tNumberOfBillingPeriods,\r\n\t\t\t\tTotalBillingDaysRebilled,\r\n\t\t\t\tTotalRebilledAmount,\r\n\t\t\t\tTotalCanceledAmount,\r\n\t\t\t\tPriorRevisedBilledAmount,\r\n\t\t\t\tRevisedBilledAmount,\r\n\t\t\t\tCanceledBilledAmount,\r\n\t\t\t\tPriorRevisedCCF,\r\n\t\t\t\tRevisedCCF,\r\n\t\t\t\tCanceledCCF,\r\n\t\t\t\tPriorRevisedTherms,\r\n\t\t\t\tRevisedTherms,\r\n\t\t\t\tCanceledTherms,\r\n\t\t\t\tAverageRebillCostOfGasCharge,\r\n\t\t\t\tAverageRebillThermsFactor,\r\n\t\t\t\tBillingDays,\r\n\t\t\t\tBillingDate,\r\n\t\t\t\tToDate,\r\n\t\t\t\tFromDate,\r\n\t\t\t\tBillingAction,\r\n\t\t\t\tProcessedInTheCurrentPeriod,\r\n\t\t\t\tGasRateCode,\r\n\t\t\t\tTotalCCF,\r\n\t\t\t\tTotalTherms,\r\n\t\t\t\tThermsFactor,\r\n\t\t\t\tCancelFromDate,\r\n\t\t\t\tCancelToDate,\r\n\t\t\t\tCancelTotalCCF,\r\n\t\t\t\tCancelTotalTherms,\r\n\t\t\t\tCancelThermsFactor,\r\n\t\t\t\tCancelBillingDays,\r\n\t\t\t\tProcessEffectiveDate,\r\n\t\t\t\tDerivedFromSpannedBill,\r\n\t\t\t\tSpannedBillingPeriodRevision,\r\n\t\t\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\t\t\tSpannedBilledAmount,\r\n\t\t\t\tSpannedCCF,\r\n\t\t\t\tSpannedThermFactor,\r\n\t\t\t\tSpannedTherm,\r\n\t\t\t\tSpannedMonthlyPercentage,\r\n\t\t\t\tSpannedTotalPercentage,\r\n\t\t\t\tBillCreationDate,\r\n\t\t\t\tPostMarkDate,\r\n\t\t\t\tDatePaymentDue,\r\n\t\t\t\tDateAcceptanceIntoOEC,\r\n\t\t\t\tPaidAdjustmentAmount,\r\n\t\t\t\tNotes,\r\n\t\t\t\tAuthenticatedUserID,\r\n\t\t\t\tDateAdded,\r\n\t\t\t\tLastUpdate,\r\n\t\t\t\tEnergySource,\r\n\t\t\t\tBillingCycle,\r\n\t\t\t\tSalesType,\r\n\t\t\t\tManualPaymentOverride,\r\n\t\t\t\tManualDataEntry,\r\n\t\t\t\tIsTimeOfDayAccount,\r\n\t\t\t\tLastPeriodModified,\r\n\t\t\t\tDiscountedAmount,\r\n\t\t\t\tDiscountPercentage,\r\n\t\t\t\tBalanceDollars,\r\n\t\t\t\tCreditDollars\r\n\t\t\tFROM Gas.UploadAccountBillingAdjustmentGas\r\n                \r\n\t\t\tSET @NumberOfAdjustmentsAdded = @@rowcount\r\n            SELECT  @NumberOfAdjustmentsAdded\r\n        END;\r\n\t\r\n\t-- Update the adjustments first since the Billing.AccountBillingAdjustmentGas for the current period\r\n\t-- has indetified all of the adjustments that exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t-- is not null and the Billing.AccountBillingGas AccountBillingGasSeqid is not null.\r\n\t-- \r\n\t-- The key to this update is the setting of the LastUpdate to a null value so the audit trigger preserves\r\n\t-- the prior state of the row before the Billing.AccountBilling or Billing.AccountBillingGas are updated\r\n\t-- with the adjusted values.\r\n        SELECT  @HasAccountBillingBeenProcessed = COUNT(*)\r\n        FROM Billing.AccountBillingGas ABG\r\n                INNER JOIN Billing.AccountBilling AB ON ABG.AccountBillingSeqid = AB.AccountBillingSeqid\r\n                                                     AND ABG.UniqueAccountSeqId = AB.UniqueAccountSeqId\r\n                                                     AND ABG.BillingPeriod = AB.BillingPeriod\r\n                                                     AND ABG.BillingPeriodRevision = AB.BillingPeriodRevision\r\n        WHERE   ( ABG.BillingPeriod = @CurrentBillingPeriod )\r\n                AND ( ABG.UtilityCompanySeqid = @UtilityCompanySeqid )\r\n                AND ( AB.CurrentInvoiceAccountBillingGroup = @InvoiceAccountBillingGroupSeqid )\r\n\t--\r\n\t-- if this occurs \"isnull(@HasAccountBillingBeenProcessed,1)= 0\" then set the value to 1 or @HasAccountBillingBeenProcessed > 0 Then do not process\r\n\t--\r\n        IF ( ISNULL(@HasAccountBillingBeenProcessed, 1) = 0 ) \r\n            BEGIN\r\n\t\t--\r\n\t\t--\tNational Grid West Special Ledger current period discount.\r\n\t\t--\tRevisedBilledAmount =Billing.AccountBillingAdjustmentGas.RevisedBilledAmount+Billing.AccountBillingAdjustmentGas.DiscountedAmount\r\n\t\t--\tNote:\r\n\t\t--\t\t\tBilling.AccountBillingAdjustmentGas.DiscountedAmount is zero for Con Ed and National Grid West CRIS accounts\r\n\t\t--\r\n                UPDATE  AB\r\n                SET     LastPeriodModified = ABAG.BillingPeriod,\r\n                        FromDate = ABAG.FromDate,\r\n                        ToDate = ABAG.ToDate,\r\n                        AccountBillingStatus = ABAG.AccountStatus,\r\n                        PreviousAccountBillingStatus = ABAG.AccountpreviousStatus,\r\n                        AccountBillingStatusCodePeriod = ABAG.AccountStatusPeriod,\r\n                        RevisedBilledAmount = ABAG.RevisedBilledAmount\r\n                        + ISNULL(ABAG.DiscountedAmount,\r\n                                 0),\r\n                        AccountEnergyUsage = ABAG.RevisedTherms,\r\n                        NetEnergyUsageChange = ABAG.TotalTherms\r\n                        + ABAG.CancelTotalTherms,\r\n                        NetDollarChange = ABAG.TotalRebilledAmount\r\n                        + ABAG.TotalCanceledAmount,\r\n                        BillingPeriodDays = ABAG.BillingDays,\r\n                        BillingAction = ABAG.BillingAction,\r\n                        UploadFileSeqid = ABAG.AccountBillingAdjustmentGasSeqid,\r\n                        SplitFiscalYear = [dbo].[IsFiscalYearSplit](ABAG.FromDate,\r\n                                                              ABAG.ToDate), -- SplitFiscalYear\r\n                        ChargeToFiscalYear = [dbo].[CalculateFiscalYearIfSplit](ABAG.FromDate,\r\n                                                              ABAG.ToDate,\r\n                                                              'T'), --ChargeToFiscalYear \t\r\n                        ChargeToPriorFiscalYear = [dbo].[CalculateFiscalYearIfSplit](ABAG.FromDate,\r\n                                                              ABAG.ToDate,\r\n                                                              'F'), -- ChargeToPriorFiscalYear\r\n                        LastUpdate = GETDATE(),\r\n                        FireAuditTrigger = 'Y',\r\n\t\t\t\t\t\tActualOrEstimated = ABAG.EstimatedOrActualBilling\r\n                FROM Billing.AccountBillingAdjustmentGas ABAG\r\n                        INNER JOIN Billing.AccountBilling AB ON ABAG.AccountBillingSeqid = AB.AccountBillingSeqid\r\n                                                             AND ABAG.UtilityCompanySeqid = AB.UtilityCompanySeqid\r\n                                                             AND ABAG.UniqueAccountSeqId = AB.UniqueAccountSeqId\r\n                                                             AND ABAG.BillingPeriodRevision = AB.BillingPeriodRevision\r\n                WHERE   ( ABAG.BillingPeriod = @CurrentBillingPeriod )--@CurrentBillingPeriod \r\n\r\n                SET @BillingAccountBillingUpdateTransactionCount = @@rowcount\r\n\t\t--\r\n\t\t--\r\n\t\t-- Update the adjustments first since the Billing.AccountBillingAdjustmentGas for the current period\r\n\t\t-- has indetified all of the adjustments that exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t\t-- is not null and the Billing.AccountBillingGas AccountBillingGasSeqid is not null.\r\n\t\t-- \r\n\t\t-- The key to this update is the setting of the LastUpdate to a null value so the audit trigger preserves\r\n\t\t-- the prior state of the row before the Billing.AccountBilling or Billing.AccountBillingGas are updated\r\n\t\t-- with the adjusted values.\r\n\t\t--\r\n\t\t--  Note: Legacy BalanceDollars & CreditDollars will never be adjusted.  PAH\r\n\t\t--\r\n        UPDATE  ABG\r\n\t\tSET LastPeriodModified = ABAG.BillingPeriod,\r\n            AccountBillingGasRowState = cast( CASE WHEN ISNULL(AccountBillingGasRowState,\r\n                                                    0) + 1 > 1\r\n                                                THEN 2\r\n                                                ELSE 1\r\n                                        END as varchar(1)),\r\n            BilledAmount = ABAG.RevisedBilledAmount,\r\n            DiscountedAmount = ISNULL(ABAG.DiscountedAmount, 0),\r\n            DiscountPercentage = ISNULL(ABAG.DiscountPercentage,0.0),\r\n            TotalCCF = ABAG.RevisedCCF,\r\n            ThermsFactor = ABAG.ThermsFactor,\r\n            TotalTherms = ABAG.RevisedTherms,\r\n            Notes = ABAG.Notes,\r\n            AccountBillingAdjustmentGasSeqid = ABAG.AccountBillingAdjustmentGasSeqid,\r\n            LastUpdate = GETDATE(),\r\n            FireAuditTrigger = 'Y'\r\n        FROM Billing.AccountBillingAdjustmentGas ABAG\r\n            INNER JOIN Billing.AccountBilling AB ON ABAG.AccountBillingSeqid = AB.AccountBillingSeqid\r\n\t\t\t\tAND ABAG.UniqueAccountSeqId = AB.UniqueAccountSeqId\r\n\t\t\t\tAND ABAG.BillingPeriodRevision = AB.BillingPeriodRevision\r\n\t\t\t\tAND ABAG.BillingPeriodRevision = AB.BillingPeriod\r\n\t\t\t\tAND ABAG.AccountBillingSeqid IS NOT NULL\r\n            INNER JOIN Billing.AccountBillingGas ABG ON AB.AccountBillingSeqid = ABG.AccountBillingSeqid\r\n                AND AB.BillingPeriod = ABG.BillingPeriod\r\n                AND AB.BillingPeriodRevision = ABG.BillingPeriodRevision\r\n                AND ABAG.BillingPeriod = @CurrentBillingPeriod --@CurrentBillingPeriod   \r\n\t\t\t\t           \r\n            SET @BillingAccountBillingGasUpdateTransactionCount = @@rowcount\r\n        END;\r\n\t\t--\r\n\t\t--\r\n\t\t-- At this point the Billing.AccountBillingAdjustmentGas for the current period has indetified all of the adjustments or \r\n\t\t-- original bill rows that do not exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t\t-- is null and the Billing.AccountBillingGas AccountBillingGasSeqid is null.\r\n\t\t-- \r\n\t\t--\r\n        DECLARE @maxAccountBillingSeqid INT\r\n        DECLARE @maxAccountBillingGasSeqid INT\r\n        DECLARE @HasAccountBillingInsertsBeenProcessed INT\r\n\r\n        SELECT  @maxAccountBillingSeqid = MAX(AccountBillingSeqid)\r\n        FROM Billing.AccountBilling\t\r\n        SELECT  @maxAccountBillingGasSeqid = MAX(AccountBillingGasSeqid)\r\n        FROM Billing.AccountBillingGas\t\r\n\r\n        SELECT  @HasAccountBillingInsertsBeenProcessed = COUNT(*)\r\n        FROM Billing.AccountBillingAdjustmentGas\r\n        WHERE   AccountBillingSeqid IS NULL\r\n                AND BillingPeriod = @CurrentBillingPeriod\r\n\r\n\t-- if this occurs in the case of \"isnull(@HasAccountBillingInsertsBeenProcessed,1)\" then set the value to 0 and not process\r\n\t-- also if the count of the AccountBillingSeqid that are null is zero do not process since they have already been processed.\r\n    IF (ISNULL(@HasAccountBillingInsertsBeenProcessed, 0) <> 0) \r\n    BEGIN\r\n\t\t--\tCorrection for 'BA' Accounts   FIX this \r\n\t\t--\r\n\t\t--\tcase when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end as OriginalBilledAmount,\r\n\t\t--\tRevisedBilledAmount, --RevisedBilledAmount,\r\n\t\t--\tcase when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end as OriginalBilledAmountPaid,\r\n\t\t--\tPaidAdjustmentAmount,\r\n\t\t--\tIsNull(case when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end,0)+IsNull(PaidAdjustmentAmount,0) as TotalAmountDue,\r\n\t\t--\tIsNull(case when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end,0)+IsNull(PaidAdjustmentAmount,0) as CreditedPaidAmount,\r\n        INSERT  INTO Billing.AccountBilling\r\n            (UniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\tOriginalAccountNumber,\r\n            AccountSeqid,\r\n            CurrentInvoiceAccountBillingGroup,\r\n            UtilityCompanySeqid,\r\n            EnergySource,\r\n            IsTimeOfDayAccount,\r\n            LastPeriodModified,\r\n            BillingCycle,\r\n            SalesType,\r\n            PreviousBillingPeriod,\r\n            BillingPeriod,\r\n            BillingPeriodRevision,\r\n            NextMeterReading,\r\n            NextBillingPeriod,\r\n            FromDate,\r\n            ToDate,\r\n            AccountBillingStatus,\r\n            PreviousAccountBillingStatus,\r\n            AccountBillingStatusCodePeriod,\r\n            ManualPaymentOverride,\r\n            OriginalBilledAmount,\r\n            RevisedBilledAmount,\r\n            OriginalBilledAmountPaid,\r\n            PaidAdjustmentAmount,\r\n            TotalAmountDue,\r\n            CreditedPaidAmount,\r\n            CreditedPaidAmountDate,\r\n            AccountEnergyUsage,\r\n            OriginalEnergyUsage,\r\n            AccountDemandUsage,\r\n            AccountEnergyUsage1,\r\n            AccountDemandUsage1,\r\n            ManualDataEntry,\r\n            ProductionAndDeliveryTariff,\r\n            BillingPeriodDays,\r\n            BillCreationDate,\r\n            PostMarkDate,\r\n            DatePaymentDue,\r\n            DateAcceptanceIntoOEC,\r\n            BillingAction,\r\n            ProcessedInTheCurrentPeriod,\r\n            ManualPaymentOverrideAmount,\r\n            InitialPostingDate,\r\n            UploadFileSeqid,\r\n            SplitFiscalYear,\r\n            ChargeToFiscalYear,\r\n            ChargeToPriorFiscalYear,\r\n            Notes,\r\n            AuthenticatedUserID,\r\n            DateAdded,\r\n            LastUpdate,\r\n            NetDollarChange,\r\n            NetEnergyUsageChange,\r\n            NetDemandUsageChange,\r\n\t\t\tActualOrEstimated)\r\n        SELECT  \r\n\t\t\tUniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\tOriginalAccountNumber,\r\n            AccountSeqid,\r\n            InvoiceAccountGroupSeqid,\r\n            UtilityCompanySeqid,\r\n            EnergySource,\r\n            IsTimeOfDayAccount,\r\n            LastPeriodModified,\r\n            BillingCycle,\r\n            SalesType,\r\n            dbo.CreatePreviousPeriod(ABAG.BillingPeriod,\r\n                                        BillingCycle), -- PreviousBillingPeriod\r\n            BillingPeriodRevision, -- BillingPeriod\r\n            BillingPeriodRevision,\r\n            ToDate,\r\n            dbo.CreateNextPeriod(ABAG.BillingPeriod,\r\n                                    BillingCycle),-- NextBillingPeriod\r\n            FromDate, -- NextMeterReading\r\n            ToDate,\r\n            AccountStatus,\r\n            AccountpreviousStatus,\r\n            AccountStatusPeriod,\r\n            ManualPaymentOverride,\r\n            CASE WHEN BillingAction = 'O'\r\n                    THEN ISNULL(RevisedBilledAmount, 0)\r\n                        + ISNULL(DiscountedAmount, 0)\r\n                    ELSE 0.00\r\n            END, -- OriginalBilledAmount,\r\n            RevisedBilledAmount + ISNULL(DiscountedAmount,\r\n                                            0), --RevisedBilledAmount+Discount Amount,\r\n            RevisedBilledAmount + ISNULL(DiscountedAmount,\r\n                                            0), --OriginalBilledAmountPaid,\r\n            PaidAdjustmentAmount,\r\n            CASE WHEN BillingAction = 'O'\r\n                    THEN ISNULL(RevisedBilledAmount\r\n                                + ISNULL(DiscountedAmount, 0),\r\n                                0)\r\n                    ELSE 0.00\r\n            END + ISNULL(PaidAdjustmentAmount, 0), --TotalAmountDue,\r\n            CASE WHEN BillingAction = 'O'\r\n                    THEN ISNULL(RevisedBilledAmount\r\n                                + ISNULL(DiscountedAmount, 0),\r\n                                0)\r\n                    ELSE 0.00\r\n            END + ISNULL(PaidAdjustmentAmount, 0), --CreditedPaidAmount\r\n            DatePaymentDue, --CreditedPaidAmountDate\t\r\n            RevisedTherms, -- AccountEnergyUsage\r\n            RevisedTherms, -- OriginalEnergyUsage\r\n            NULL, --AccountDemandUsage,\r\n            NULL, --AccountEnergyUsage1,\r\n            NULL, --AccountDemandUsage1,\r\n            ManualDataEntry,\r\n            [Common].[CalculateProductionAndDeliveryTariff](UtilityCompanySeqid,\r\n                                            GasRateCode), -- ProductionAndDeliveryTariff,\r\n            BillingDays,\r\n            BillCreationDate,\r\n            PostMarkDate,\r\n            DatePaymentDue,\r\n            DateAcceptanceIntoOEC,\r\n            BillingAction,\r\n            'Y', -- ProcessedInTheCurrentPeriod,\r\n            0.00, -- ManualPaymentOverrideAmount,\r\n            GETDATE(), -- InitialPostingDate\r\n            UploadAccountBillingAdjustmentGasSeqid,\r\n            [dbo].[IsFiscalYearSplit](ABAG.FromDate,\r\n                                        ABAG.ToDate), -- SplitFiscalYear\r\n            [dbo].[CalculateFiscalYearIfSplit](ABAG.FromDate,\r\n                                            ABAG.ToDate,\r\n                                            'T'), --ChargeToFiscalYear\r\n            [dbo].[CalculateFiscalYearIfSplit](ABAG.FromDate,\r\n                                            ABAG.ToDate,\r\n                                            'F'), -- ChargeToPriorFiscalYear\r\n            Notes,\r\n            AuthenticatedUserID,\r\n            GETDATE(), -- DateAdded,\r\n            GETDATE(), -- LastUpdate\r\n            0.00,  --NetDollarChange\r\n            0,--NetEnergyUsageChange\r\n            0.0, --NetDemandUsageChange,\r\n\t\t\tEstimatedOrActualBilling\r\n\t\tFROM Billing.AccountBillingAdjustmentGas ABAG\r\n\t\tWHERE   AccountBillingSeqid IS NULL\r\n            AND BillingPeriod = @CurrentBillingPeriod --@CurrentBillingPeriod\r\n\t\r\n        SET @BillingAccountBillingInsertTransactionCount = @@rowcount\r\n\r\n\t\t-- At this point the Billing.AccountBillingAdjustmentGas for the current period has indetified all of the adjustments or \r\n\t\t-- original bill rows that do not exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t\t-- is null and the Billing.AccountBillingGas AccountBillingGasSeqid is null.\r\n        INSERT  INTO Billing.AccountBillingGas\r\n\t\t\t(UniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\tAccountBillingSeqid,\r\n            UtilityCompanySeqid,\r\n            AccountBillingAdjustmentGasSeqid,\r\n            OriginalAccountNumber,\r\n            LastPeriodModified,\r\n            BillingPeriod,\r\n            BillingPeriodRevision,\r\n            AccountBillingGasRowState,\r\n            CommodityTariffRate,\r\n            CommodityTariffEffectiveDate,\r\n            BillCreationDate,\r\n            PostMarkDate,\r\n            DatePaymentDue,\r\n            DateAcceptanceIntoOEC,\r\n            BilledAmount,\r\n            TotalCCF,\r\n            ThermsFactor,\r\n            TotalTherms,\r\n            LevelPaymentPlan,\r\n            DiscountedAmount,\r\n            DiscountPercentage,\r\n            Notes,\r\n            AuthenticatedUserID,\r\n            DateAdded,\r\n            LastUpdate,\r\n            BalanceDollars,\r\n            CreditDollars)\r\n        SELECT  \r\n\t\t\tUniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\tAccountBillingSeqid,\r\n            UtilityCompanySeqid,\r\n            AccountBillingAdjustmentGasSeqid,\r\n            OriginalAccountNumber,\r\n            BillingPeriod,\r\n            BillingPeriodRevision,\r\n            BillingPeriodRevision,\r\n            '1',\r\n            GasRateCode,\r\n            NULL,\r\n            BillCreationDate,\r\n            PostMarkDate,\r\n            DatePaymentDue,\r\n            DateAcceptanceIntoOEC,\r\n            RevisedBilledAmount,\r\n            RevisedCCF,\r\n            ThermsFactor,\r\n            RevisedTherms,\r\n            'N',\r\n            ISNULL(DiscountedAmount, 0),\r\n            ISNULL(DiscountPercentage, 0.0),\r\n            Notes,\r\n            AuthenticatedUserID,\r\n            GETDATE(), -- DateAdded,\r\n            GETDATE(), -- LastUpdate\r\n            BalanceDollars,\r\n            CreditDollars\r\n\t\tFROM Billing.AccountBillingAdjustmentGas\r\n\t\tWHERE AccountBillingSeqid IS NULL\r\n            AND BillingPeriod = @CurrentBillingPeriod --@CurrentBillingPeriod\r\n\r\n        SET @BillingAccountBillingGasInsertTransactionCount = @@rowcount\r\n\t\r\n\t\t\t\t-- The Billing.AccountBilling and the Billing.AccountBillingGas rows have been inserted and their sequence ids were created.\r\n\t\t\t\t-- The two tables are joined to update the sequence id of the the Billing.AccountBilling in the the Billing.AccountBillingGas table. \r\n\t\t\t\t-- It inforces the referential integrity between the two tables.\r\n                UPDATE  Billing.AccountBillingGas\r\n                SET     AccountBillingSeqid = AB.AccountBillingSeqid\r\n                FROM Billing.AccountBilling AB\r\n                        INNER JOIN Billing.AccountBillingGas ABG ON AB.UtilityCompanySeqid = ABG.UtilityCompanySeqid\r\n                                                              AND AB.BillingPeriod = ABG.BillingPeriod\r\n                                                              AND AB.BillingPeriodRevision = ABG.BillingPeriodRevision\r\n                                                              AND AB.UniqueAccountSeqId = ABG.UniqueAccountSeqId\r\n                        INNER JOIN Billing.AccountBillingAdjustmentGas ABAG ON AB.UtilityCompanySeqid = ABAG.UtilityCompanySeqid\r\n                                                              AND AB.BillingPeriod = ABAG.BillingPeriodRevision\r\n                                                              AND AB.BillingPeriodRevision = ABAG.BillingPeriodRevision\r\n                                                              AND AB.UniqueAccountSeqId = ABAG.UniqueAccountSeqId\r\n                WHERE   ( ABAG.AccountBillingSeqid IS NULL )\r\n                        AND ( ABAG.UtilityCompanySeqid = @UtilityCompanySeqid )\r\n                        AND ( ABAG.InvoiceAccountGroupSeqid = @InvoiceAccountBillingGroupSeqid )\r\n                        AND ( ABAG.BillingPeriod = @CurrentBillingPeriod )\r\n\t\t\t--\r\n\t\t\t-- The Billing.AccountBillingAdjustmentGas and the Billing.AccountBillingGas are joined to update the repective sequence ids of the \r\n\t\t\t-- Billing.AccountBilling and the Billing.AccountBillingGas in the Billing.AccountBillingAdjustmentGas table. \r\n\t\t\t-- It inforces the referential integrity between all three tables.\r\n\t\t\t--\r\n\t\t\t--\t\t\t\tBilling.AccountBilling\r\n\t\t\t--\t\t\t\tBilling.AccountBillingGas\r\n\t\t\t--\t\t\t\tBilling.AccountBillingAdjustmentGas\r\n\t\t\tUPDATE ABAG\r\n\t\t\tSET AccountBillingSeqid = ABG.AccountBillingSeqid,\r\n\t\t\t\tAccountBillingGasSeqid = ABG.AccountBillingGasSeqid\r\n\t\t\tFROM Billing.AccountBilling AB\r\n\t\t\t\tINNER JOIN Billing.AccountBillingGas ABG ON AB.UtilityCompanySeqid = ABG.UtilityCompanySeqid\r\n\t\t\t\t\tAND AB.BillingPeriod = ABG.BillingPeriod\r\n\t\t\t\t\tAND AB.BillingPeriodRevision = ABG.BillingPeriodRevision\r\n\t\t\t\t\tAND AB.UniqueAccountSeqId = ABG.UniqueAccountSeqId\r\n\t\t\t\tINNER JOIN Billing.AccountBillingAdjustmentGas ABAG ON AB.UtilityCompanySeqid = ABAG.UtilityCompanySeqid\r\n\t\t\t\t\tAND AB.BillingPeriod = ABAG.BillingPeriodRevision\r\n\t\t\t\t\tAND AB.BillingPeriodRevision = ABAG.BillingPeriodRevision\r\n\t\t\t\t\tAND AB.UniqueAccountSeqId = ABAG.UniqueAccountSeqId\r\n\t\t\tWHERE (ABAG.AccountBillingSeqid IS NULL)\r\n\t\t\t\tAND (ABAG.UtilityCompanySeqid = @UtilityCompanySeqid)\r\n\t\t\t\tAND (ABAG.InvoiceAccountGroupSeqid = @InvoiceAccountBillingGroupSeqid )\r\n\t\t\t\tAND (ABAG.BillingPeriod = @CurrentBillingPeriod)\r\n        END;\t\r\n\r\n\t\t-- update manual payment override amount\r\n        UPDATE  billing.AccountBilling\r\n        SET     ManualPaymentOverrideAmount = TotalAmountDue,\r\n                ManualPaymentOverride = 'Y'\r\n        WHERE   CurrentInvoiceAccountBillingGroup = 2\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\t SELECT @errMessage =  ERROR_MESSAGE()\r\n\t\t RAISERROR(@errMessage, 12, 1)\r\n\tEND CATCH;\r\nEND;",
      "created": "2025-06-10 21:41:26.920000",
      "last_altered": "2025-06-10 21:41:26.920000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_19_helper_UploadAccountDataToEC3",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Upload_19_helper_UploadAccountDataToEC3` is designed to handle the processing and updating of account billing data related to gas adjustments. It interacts with several tables, primarily `Billing.AccountBillingAdjustmentGas`, `Billing.AccountBilling`, and `Billing.AccountBillingGas`, to insert and update records based on the current billing period and utility company sequence ID. The procedure ensures that adjustments are processed, new records are inserted where necessary, and referential integrity is maintained across the tables.\n\n#### 2. Complexity Level: High\n\nThe complexity of this stored procedure is high due to several factors:\n- It involves multiple conditional checks and branching logic.\n- It performs a series of complex SQL operations, including inserts, updates, and joins across multiple tables.\n- It includes error handling with a TRY-CATCH block.\n- It manages referential integrity and updates sequence IDs across related tables.\n- It uses dynamic calculations and function calls to determine fiscal year splits and other derived values.\n\n#### 3. Input Parameters\n\nThis stored procedure does not take any input parameters directly. Instead, it initializes and uses several local variables to manage its operations, such as `@CurrentBillingPeriod`, `@UtilityCompanySeqid`, and `@InvoiceAccountBillingGroupSeqid`.\n\n#### 4. Business Logic and Workflow\n\n- **Initialization**: The procedure begins by declaring several local variables to store intermediate results and control flow.\n  \n- **Parameter Retrieval**: It retrieves the current billing period, invoice account billing group sequence ID, and utility company sequence ID from the `Gas.UploadAccountBillingAdjustmentGas` table.\n\n- **Adjustment Processing**: \n  - It checks if adjustments for the current billing period have already been processed in `Billing.AccountBillingAdjustmentGas`.\n  - If not processed, it inserts new adjustment records from `Gas.UploadAccountBillingAdjustmentGas` into `Billing.AccountBillingAdjustmentGas`.\n\n- **Billing Updates**:\n  - It updates existing records in `Billing.AccountBilling` and `Billing.AccountBillingGas` if they match the current billing period and utility company sequence ID.\n  - The updates include setting various fields like `RevisedBilledAmount`, `AccountEnergyUsage`, and `LastUpdate`.\n\n- **New Record Insertion**:\n  - If there are records in `Billing.AccountBillingAdjustmentGas` without corresponding entries in `Billing.AccountBilling` or `Billing.AccountBillingGas`, it inserts new records into these tables.\n  - It then updates the sequence IDs to maintain referential integrity.\n\n- **Manual Payment Override**: Updates the `ManualPaymentOverrideAmount` for specific billing groups.\n\n- **Error Handling**: The procedure includes a TRY-CATCH block to handle any errors that occur during execution, raising an error message if an exception is caught.\n\n#### 5. Performance Considerations\n\n- **Indexing**: Ensure that the tables involved have appropriate indexes on columns used in joins and WHERE clauses to optimize query performance.\n- **Batch Processing**: The procedure processes data in bulk, which can be resource-intensive. Consider breaking down operations into smaller batches if performance issues arise.\n- **Concurrency**: The use of `XACT_ABORT ON` ensures that transactions are rolled back in case of errors, but it may also lead to blocking if multiple instances of the procedure run concurrently.\n\n#### 6. Potential Issues or Risks\n\n- **Data Integrity**: The procedure relies heavily on maintaining referential integrity across multiple tables. Any failure in updating sequence IDs could lead to orphaned records.\n- **Error Handling**: While the TRY-CATCH block captures errors, it only raises the error message without additional context, which might make troubleshooting difficult.\n- **Scalability**: As the volume of data grows, the complexity and number of operations in this procedure could lead to performance bottlenecks.\n- **Hardcoded Values**: The procedure contains hardcoded values (e.g., `CurrentInvoiceAccountBillingGroup = 2`), which may need to be updated if business rules change.\n- **Lack of Input Parameters**: The absence of input parameters makes the procedure less flexible and harder to reuse for different scenarios or datasets.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 6789,
      "api_response_id": "chatcmpl-ByexGm24FoMWrgBuYYVCIGatpbqGt"
    },
    "analysis_timestamp": "2025-07-29 09:47:14"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_19_helper_UploadMeterDataToEC3",
      "definition": "CREATE PROCEDURE [ConEd].[usp_Upload_19_helper_UploadMeterDataToEC3]\r\nAS \r\nBEGIN \r\n\t-- =============================================\r\n\t-- Update History:\r\n\t--\r\n\t-- UPDATE   VY  11/27/2018  Modified for UniqueAccountSeqID\r\n\t-- UPDATE   VY  12/20/2018  Modified for UniqueMeterSeqID\r\n\t-- UPDATE   VY  01/17/2018  Modified by removing OriginalAccountNumber from the join\r\n\t-- =============================================\r\n\t--Declare Variables                                            \r\n\t--**************************************************************************************\r\n\t--\r\n    DECLARE @RC INT\r\n--\r\n    DECLARE @NumberOfAdjustmentsAdded INT\r\n    DECLARE @CurrentBillingPeriod VARCHAR(8)\r\n    DECLARE @InvoiceAccountBillingGroupSeqid INT \r\n    DECLARE @UtilityCompanySeqid INT\r\n--\r\n    DECLARE @HasMeterBillingAdjustmentGasBeenProcessed INT\r\n    DECLARE @HasMeterBillingGasBeenProcessed INT\r\n    DECLARE @HasMeterBillingBeenProcessed INT\r\n    DECLARE @HasMeterBillingInsertsBeenProcessed INT\r\n--\r\n    DECLARE @BillingMeterBillingGasUpdateTransactionCount INT\r\n    DECLARE @BillingMeterBillingUpdateTransactionCount INT \r\n--\r\n    DECLARE @BillingMeterBillingGasInsertTransactionCount INT\r\n    DECLARE @BillingMeterBillingInsertTransactionCount INT \r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n--************************************************************************************** \r\n--\tMain Processing\r\n--**************************************************************************************\r\n--\r\n--\r\n    SELECT TOP ( 1 )\r\n            @CurrentBillingPeriod = BillingPeriod ,\r\n            @InvoiceAccountBillingGroupSeqid = InvoiceAccountBillingGroupSeqid ,\r\n            @UtilityCompanySeqid = UtilityCompanySeqid\r\n    FROM Gas.UploadAccountBillingAdjustmentGas\r\n--\r\n    SELECT  @HasMeterBillingAdjustmentGasBeenProcessed = COUNT(*)\r\n    FROM Billing.MeterBillingAdjustmentGas MBAG\r\n            INNER JOIN Billing.Account A ON MBAG.UniqueAccountSeqId = A.UniqueAccountSeqid \r\n\t\t\tAND A.IsCurrentRecord = 'Y' \r\n\t\t\tAND MBAG.UtilityCompanySeqid = A.UtilityAccountProvider\r\n            --AND MBAG.OriginalAccountNumber = Billing.Account.OriginalAccountNumber\r\n    WHERE   MBAG.LastPeriodModified = @CurrentBillingPeriod\r\n            AND MBAG.UtilityCompanySeqid = @UtilityCompanySeqid\r\n            AND A.CurrentInvoiceAccountGroup = @InvoiceAccountBillingGroupSeqid\r\n--\r\n\tDECLARE @errMessage VARCHAR(max)\r\n\tSET XACT_ABORT ON\r\n\tBEGIN TRY\r\n\r\n\r\n    IF ( @HasMeterBillingAdjustmentGasBeenProcessed = 0 ) \r\n        BEGIN\r\n\t--\r\n            INSERT  INTO Billing.MeterBillingAdjustmentGas\r\n                    ( UploadMeterBillingAdjustmentGasSeqid ,\r\n                        FacilityName ,\r\n                        ServiceAddress ,\r\n                        UtilityCompanySeqid ,\r\n                        AccountSeqid ,\r\n\t\t\t\t\t\tUniqueAccountSeqId, /* added on 12/20/2018 */\r\n                        MeterSeqid ,\r\n\t\t\t\t\t\tUniqueMeterSeqId, /* added on 12/20/2018 */\r\n                        AccountExchangeMeterTrackSeqid ,\r\n                        MeterBillingSeqid ,\r\n                        MeterBillingGasSeqid ,\r\n                        OriginalAccountNumber ,\r\n                        OriginalMeterNumber ,\r\n                        LastPeriodModified ,\r\n                        BillingPeriod ,\r\n                        BillingPeriodRevision ,\r\n                        FirstCancelPeriod ,\r\n                        NumberOfTransactions ,\r\n                        NumberOfRebillTransactions ,\r\n                        NumberOfCancelTransactions ,\r\n                        BillingAction ,\r\n                        MeterBillingStatus ,\r\n                        MeterBillingPreviousStatus ,\r\n                        MeterBillingStatusPeriod ,\r\n                        PriorRevisedBilledCCF ,\r\n                        RevisedBilledCCF ,\r\n                        CanceledBilledCCF ,\r\n                        PriorRevisedBilledTherms ,\r\n                        RevisedBilledTherms ,\r\n                        CanceledBilledTherms ,\r\n                        InitialCancelFromDate ,\r\n                        CurrentBillingToDate ,\r\n                        GasRateCode ,\r\n                        FromDate ,\r\n                        ToDate ,\r\n                        FromReadingDate ,\r\n                        ToReadingDate ,\r\n                        MeterFromReading ,\r\n                        MeterToReading ,\r\n                        Ccf ,\r\n                        Therms ,\r\n                        ThermsFactor ,\r\n                        MeterConstant ,\r\n                        TotalBillingDaysRebilled ,\r\n                        NumberOfBillingPeriods ,\r\n                        BillingDays ,\r\n                        BillingDate ,\r\n                        ReadingCode ,\r\n                        NumberOfDials ,\r\n                        MeterType ,\r\n                        ProcessedInTheCurrentPeriod ,\r\n                        ProcessEffectiveDate ,\r\n                        CancelReadingCode ,\r\n                        CancelFromDate ,\r\n                        CancelToDate ,\r\n                        CancelMeterFromReading ,\r\n                        CancelMeterToReading ,\r\n                        CancelCcf ,\r\n                        CancelTherms ,\r\n                        CancelThermsFactor ,\r\n                        CancelMeterConstant ,\r\n                        InitialPostingDate ,\r\n                        DerivedFromSpannedBill ,\r\n                        SpannedBillingPeriodRevision ,\r\n                        SpannedFirstCanceledBillingPeriod ,\r\n                        SpannedCCF ,\r\n                        SpannedThermFactor ,\r\n                        SpannedTherm ,\r\n                        SpannedMonthlyPercentage ,\r\n                        SpannedTotalPercentage ,\r\n                        EstimatedOrActualBilling ,\r\n                        MeterReset ,\r\n                        AuthenticatedUserID ,\r\n                        Notes ,\r\n                        DateAdded ,\r\n                        LastUpdate ,\r\n                        BillCreationDate ,\r\n                        EnergySource ,\r\n                        BillingCycle ,\r\n                        SalesType ,\r\n                        IsTimeOfDayAccount ,\r\n                        MeterDials ,\r\n                        GasCorrectionFactor\r\n                    )\r\n                    SELECT  UploadMeterBillingAdjustmentGasSeqid ,\r\n                            FacilityName ,\r\n                            ServiceAddress ,\r\n                            UtilityCompanySeqid ,\r\n                            AccountSeqid ,\r\n\t\t\t\t\t\t\tUniqueAccountSeqid, /* added on 12/20/2018 */\r\n                            MeterSeqid ,\r\n\t\t\t\t\t\t\tUniqueMeterSeqId, /* added on 12/20/2018 */\r\n                            AccountExchangeMeterTrackSeqid ,\r\n                            MeterBillingSeqid ,\r\n                            MeterBillingGasSeqid ,\r\n                            OriginalAccountNumber ,\r\n                            OriginalMeterNumber ,\r\n                            BillingPeriod , --LastPeriodModified, \r\n                            BillingPeriod ,\r\n                            BillingPeriodRevision ,\r\n                            FirstCancelPeriod ,\r\n                            NumberOfTransactions ,\r\n                            NumberOfRebillTransactions ,\r\n                            NumberOfCancelTransactions ,\r\n                            BillingAction ,\r\n                            MeterBillingStatus ,\r\n                            MeterBillingPreviousStatus ,\r\n                            MeterBillingStatusPeriod ,\r\n                            PriorRevisedBilledCCF ,\r\n                            RevisedBilledCCF ,\r\n                            CanceledBilledCCF ,\r\n                            PriorRevisedBilledTherms ,\r\n                            RevisedBilledTherms ,\r\n                            CanceledBilledTherms ,\r\n                            InitialCancelFromDate ,\r\n                            CurrentBillingToDate ,\r\n                            GasRateCode ,\r\n                            FromDate ,\r\n                            ToDate ,\r\n                            FromReadingDate ,\r\n                            ToReadingDate ,\r\n                            MeterFromReading ,\r\n                            MeterToReading ,\r\n                            Ccf ,\r\n                            Therms ,\r\n                            ThermsFactor ,\r\n                            MeterConstant ,\r\n                            TotalBillingDaysRebilled ,\r\n                            NumberOfBillingPeriods ,\r\n                            BillingDays ,\r\n                            BillingDate ,\r\n                            ReadingCode ,\r\n                            NumberOfDials ,\r\n                            MeterType ,\r\n                            ProcessedInTheCurrentPeriod ,\r\n                            ProcessEffectiveDate ,\r\n                            CancelReadingCode ,\r\n                            CancelFromDate ,\r\n                            CancelToDate ,\r\n                            CancelMeterFromReading ,\r\n                            CancelMeterToReading ,\r\n                            CancelCcf ,\r\n                            CancelTherms ,\r\n                            CancelThermsFactor ,\r\n                            CancelMeterConstant ,\r\n                            InitialPostingDate ,\r\n                            DerivedFromSpannedBill ,\r\n                            SpannedBillingPeriodRevision ,\r\n                            SpannedFirstCanceledBillingPeriod ,\r\n                            SpannedCCF ,\r\n                            SpannedThermFactor ,\r\n                            SpannedTherm ,\r\n                            SpannedMonthlyPercentage ,\r\n                            SpannedTotalPercentage ,\r\n                            EstimatedOrActualBilling ,\r\n                            MeterReset ,\r\n                            AuthenticatedUserID ,\r\n                            Notes ,\r\n                            DateAdded ,\r\n                            LastUpdate ,\r\n                            BillCreationDate ,\r\n                            EnergySource ,\r\n                            BillingCycle ,\r\n                            SalesType ,\r\n                            IsTimeOfDayAccount ,\r\n                            MeterDials ,\r\n                            GasCorrectionFactor\r\n                    FROM Gas.UploadMeterBillingAdjustmentGas\r\n        END\r\n--\r\n--\r\n-- Update the adjustments first since the Billing.AccountBillingAdjustmentGas for the current period\r\n-- has indetified all of the adjustments that exist in EC3.  The Billing.MeterBilling MeterBillingSeqid\r\n-- is not null and the Billing.MeterBillingGas MeterBillingGasSeqid is not null.\r\n-- \r\n-- The key to this update is the setting of the LastUpdate to a null value so the audit trigger preserves\r\n-- the prior state of the row before the Billing.AccountBilling or Billing.AccountBillingGas are updated\r\n-- with the adjusted values.\r\n--\r\n--\tselect @HasMeterBillingGasBeenProcessed = count(*) from Billing.MeterBillingGas  where BillingPeriod = @CurrentBillingPeriod and @UtilityCompanySeqid=UtilityCompanySeqid\r\n--\tselect @HasMeterBillingBeenProcessed = count(*) from Billing.MeterBilling  \r\n--\twhere BillingPeriod = @CurrentBillingPeriod and @UtilityCompanySeqid=AccountUtilityCompanySeqid\r\n--\r\n    DECLARE @HasMeterBillingUpdatedBeenProcessed INT\r\n--\r\n    SELECT  @HasMeterBillingUpdatedBeenProcessed = COUNT(*)\r\n\tSELECT COUNT(*)\r\n    FROM Billing.MeterBillingAdjustmentGas MBAG\r\n            INNER JOIN Billing.Account A \r\n\t\t\t\tON MBAG.UniqueAccountSeqId = A.UniqueAccountSeqid \r\n\t\t\t\tAND A.IscurrentRecord = 'Y' \r\n\t\t\t\tAND MBAG.UtilityCompanySeqid = A.UtilityAccountProvider\r\n\t\t\tLEFT JOIN Billing.MeterBilling MB \r\n\t\t\t\tON MBAG.MeterBillingSeqid = MB.MeterBillingSeqid\r\n\t\t\t\tAND MBAG.UniqueAccountSeqId = MB.UniqueAccountSeqId\r\n\t\t\t\tAND MBAG.UniqueMeterSeqId = MB.UniqueMeterSeqId\r\n\t\t\t\tAND MBAG.LastPeriodModified = MB.LastPeriodModified\r\n    WHERE   ( MBAG.MeterBillingSeqid IS NOT NULL )\r\n            AND MBAG.LastPeriodModified = @CurrentBillingPeriod\r\n            AND MBAG.UtilityCompanySeqid = @UtilityCompanySeqid\r\n            AND A.CurrentInvoiceAccountGroup = @InvoiceAccountBillingGroupSeqid\r\n\r\n--\r\n-- if this occurs \"isnull(@HasMeterBillingInsertsBeenProcessed,1)\"  then set the value to 1 and do not process\r\n--\r\n    IF ( ISNULL(@HasMeterBillingUpdatedBeenProcessed, 0) <> 0 ) \r\n        BEGIN\r\n\t--\r\n\t--\tUpdate the existing Billing.MeterBilling adjustments prior to inserting the adjustments\r\n\t--\r\n            UPDATE  Billing.MeterBilling\r\n            SET     IsDerived = MBAG.DerivedFromSpannedBill ,\r\n                    UploadFileSeqid = MBAG.UploadMeterBillingAdjustmentGasSeqid ,\r\n                    LastPeriodModified = MBAG.LastPeriodModified ,\r\n                    MeterBillingStatus = MBAG.MeterBillingStatus ,\r\n                    PreviousMeterBillingStatus = MBAG.MeterBillingPreviousStatus ,\r\n                    MeterBillingStatusCodePeriod = MBAG.MeterBillingStatusPeriod ,\r\n                    EstimatedReading = MBAG.EstimatedOrActualBilling ,\r\n                    ConsecutivePeriodsEstimatedReading = [Common].[CalculateConsecutiveNumberOfEstimatedReadings](MB.OriginalAccountNumber,\r\n                                                            MB.OriginalMeterNumber,\r\n                                                            MB.AccountUtilityCompanySeqid,\r\n                                                            MB.BillingPeriodRevision,\r\n                                                            MBAG.BillingCycle,\r\n                                                            MBAG.EstimatedOrActualBilling) ,\r\n                    BillingPeriodDays = MBAG.BillingDays ,\r\n                    FromDate = MBAG.FromDate ,\r\n                    ToDate = MBAG.ToDate ,\r\n                    ToReadingDate = MBAG.ToReadingDate ,\r\n                    FromReadingDate = MBAG.FromReadingDate ,\r\n                    Consumption = MBAG.RevisedBilledTherms ,\r\n                    AdjustmentRecordSeqid = MBAG.MeterBillingAdjustmentGasSeqid ,\r\n                    AuthenticatedUserID = MBAG.AuthenticatedUserID ,\r\n                    Notes = MBAG.Notes ,\r\n                    LastUpdate = GETDATE() ,\r\n                    FireAuditTrigger = 'Y'\r\n            FROM Billing.MeterBillingAdjustmentGas MBAG\r\n                    INNER JOIN Billing.MeterBilling MB ON MBAG.UniqueAccountSeqId = MB.UniqueAccountSeqId\r\n                                                        AND MBAG.UniqueMeterSeqId = MB.UniqueMeterSeqId\r\n                                                        AND MBAG.UtilityCompanySeqid = MB.AccountUtilityCompanySeqid\r\n                                                        AND MBAG.BillingPeriodRevision = MB.BillingPeriod\r\n                                                        AND MBAG.BillingPeriodRevision = MB.BillingPeriodRevision\r\n            WHERE   ( MBAG.MeterBillingSeqid IS NOT NULL )\r\n                    AND ( MBAG.BillingPeriod = @CurrentBillingPeriod )\r\n\t--\r\n            SET @BillingMeterBillingUpdateTransactionCount = @@rowcount\r\n\t--\r\n\t--\tUpdate the existing Billing.MeterBillingGas adjustments prior to inserting the adjustments\r\n\t--\r\n\t--\tNote:  The legacy GasCorrectionFactor will never be adjusted.\r\n\t--\r\n            UPDATE  Billing.MeterBillingGas\r\n            SET     MeterBillingAdjustmentGasSeqid = MBAG.MeterBillingAdjustmentGasSeqid ,\r\n                    MeterBillingRowState = '2' ,\r\n                    FromDate = MBAG.FromDate ,\r\n                    ToDate = MBAG.ToDate ,\r\n                    FromReadingDate = MBAG.FromReadingDate ,\r\n                    ToReadingDate = MBAG.ToReadingDate ,\r\n                    ReadingCode = MBAG.ReadingCode ,\r\n                    MeterReset = MBAG.MeterReset ,\r\n                    MeterFromReading = MBAG.MeterFromReading ,\r\n                    MeterToReading = MBAG.MeterToReading ,\r\n                    MeterConstant = MBAG.MeterConstant ,\r\n                    Ccf = MBAG.RevisedBilledCCF ,\r\n                    ThermsFactor = MBAG.ThermsFactor ,\r\n                    Therms = MBAG.RevisedBilledTherms ,\r\n                    AuthenticatedUserID = MBAG.AuthenticatedUserID ,\r\n                    Notes = MBAG.Notes ,\r\n                    LastPeriodModified = MBAG.LastPeriodModified ,\r\n                    LastUpdate = GETDATE() ,\r\n                    FireAuditTrigger = 'Y'\r\n            FROM Billing.MeterBillingAdjustmentGas MBAG\r\n                    INNER JOIN Billing.MeterBillingGas MBG ON MBAG.UniqueAccountSeqId = MBG.UniqueAccountSeqId\r\n                                                            AND MBAG.UniqueMeterSeqId = MBG.UniqueMeterSeqId\r\n                                                            AND MBAG.UtilityCompanySeqid = MBG.UtilityCompanySeqid\r\n                                                            AND MBAG.BillingPeriodRevision = MBG.BillingPeriod\r\n                                                            AND MBAG.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n            WHERE   ( MBAG.MeterBillingSeqid IS NOT NULL )\r\n                    AND ( MBAG.BillingPeriod = @CurrentBillingPeriod )\r\n            SET @BillingMeterBillingGasUpdateTransactionCount = @@rowcount\r\n        END\r\n--\r\n    DECLARE @HasMeterBillingInsertedBeenProcessed INT\r\n--\r\n--\tselect @HasMeterBillingInsertedBeenProcessed = count(*) from Billing.MeterBilling  \r\n--\twhere BillingPeriod = @CurrentBillingPeriod and @UtilityCompanySeqid=AccountUtilityCompanySeqid\r\n--\r\n    SELECT  @HasMeterBillingInsertedBeenProcessed = COUNT(*)\r\n    FROM Billing.MeterBillingAdjustmentGas MBAG\r\n            INNER JOIN Billing.Account A \r\n\t\t\t\tON MBAG.UniqueAccountSeqId = A.UniqueAccountSeqid \r\n\t\t\t\tAND A.IsCurrentRecord = 'Y' \r\n\t\t\t\tAND MBAG.UtilityCompanySeqid = A.UtilityAccountProvider\r\n\t\t\tLEFT JOIN Billing.MeterBilling MB \r\n\t\t\t\tON MBAG.MeterBillingSeqid = MB.MeterBillingSeqid\r\n\t\t\t\tAND MBAG.UniqueAccountSeqId = MB.UniqueAccountSeqId\r\n\t\t\t\tAND MBAG.UniqueMeterSeqId = MB.UniqueMeterSeqId\r\n                AND MBAG.LastPeriodModified = MB.LastPeriodModified\r\n    WHERE   ( MB.MeterBillingSeqid IS NULL )\r\n            AND ( MBAG.MeterBillingSeqid IS NULL )\r\n            AND MBAG.LastPeriodModified = @CurrentBillingPeriod\r\n            AND MBAG.UtilityCompanySeqid = @UtilityCompanySeqid\r\n            AND A.CurrentInvoiceAccountGroup = @InvoiceAccountBillingGroupSeqid\r\n--\r\n-- if this occurs in either case \"isnull(@HasMeterBillingGasBeenProcessed,1)\" or \"isnull(@HasMeterBillingBeenProcessed\" then set the value to 1 and not process\r\n--\r\n    IF ( ISNULL(@HasMeterBillingInsertedBeenProcessed, 0) <> 0 ) \r\n        BEGIN\r\n            DECLARE @maxMeterBillingSeqid INT\r\n            DECLARE @maxMeterBillingGasSeqid INT\r\n\t--\r\n            SELECT  @maxMeterBillingSeqid = MAX(MeterBillingSeqid)\r\n            FROM Billing.MeterBilling\t\r\n            SELECT  @maxMeterBillingGasSeqid = MAX(MeterBillingGasSeqid)\r\n            FROM Billing.MeterBillingGas\t\r\n\t--\r\n            INSERT  INTO Billing.MeterBilling\r\n                    ( UniqueAccountSeqID, /* added on 12/20/2018 */\r\n\t\t\t\t\t\tUniqueMeterSeqID, /* added on 12/20/2018 */\r\n\t\t\t\t\t\tAccountExchangeMeterTrackSeqid ,\r\n                        IsTimeOfDayAccount ,\r\n                        IsDerived ,\r\n                        OriginalAccountNumber ,\r\n                        OriginalMeterNumber ,\r\n                        AccountUtilityCompanySeqid ,\r\n                        UploadFileSeqid ,\r\n                        LastPeriodModified ,\r\n                        BillingPeriod ,\r\n                        BillingPeriodRevision ,\r\n                        NextBillingPeriod ,\r\n                        PreviousBillingPeriod ,\r\n                        BillCreationDate ,\r\n                        BillingAction ,\r\n                        MeterBillingStatus ,\r\n                        PreviousMeterBillingStatus ,\r\n                        MeterBillingStatusCodePeriod ,\r\n                        EnergySource ,\r\n                        ProcessedInTheCurrentPeriod ,\r\n                        SalesType ,\r\n                        MeterType ,\r\n                        UtilityServiceAddress ,\r\n                        MeterDials ,\r\n                        MeterConstant ,\r\n                        Tension ,\r\n                        EstimatedReading ,\r\n                        ConsecutivePeriodsEstimatedReading ,\r\n                        ProductionAndDeliveryTariff ,\r\n                        BillingPeriodDays ,\r\n                        FromDate ,\r\n                        ToDate ,\r\n                        ToReadingDate ,\r\n                        FromReadingDate ,\r\n                        Consumption ,\r\n                        Demand ,\r\n                        InitialPostingDate ,\r\n                        AdjustmentRecordSeqid ,\r\n                        AuthenticatedUserID ,\r\n                        Notes ,\r\n                        DateAdded ,\r\n                        LastUpdate\r\n\t\t            )\r\n                    SELECT  UniqueAccountSeqID, /* added on 12/20/2018 */\r\n\t\t\t\t\t\t    UniqueMeterSeqID, /* added on 12/20/2018 */ \r\n\t\t\t\t\t\t    AccountExchangeMeterTrackSeqid ,\r\n                            IsTimeOfDayAccount ,\r\n                            [DerivedFromSpannedBill] ,\r\n                            [OriginalAccountNumber] ,\r\n                            [OriginalMeterNumber] ,\r\n                            [UtilityCompanySeqid] ,\r\n                            [UploadMeterBillingAdjustmentGasSeqid] ,\r\n                            [LastPeriodModified] ,\r\n                            [BillingPeriodRevision] ,\r\n                            [BillingPeriodRevision] ,\r\n                            dbo.CreateNextPeriod(MBAG.BillingPeriod,\r\n                                                    BillingCycle) , -- [NextBillingPeriod] \r\n                            dbo.CreatePreviousPeriod(MBAG.BillingPeriod,\r\n                                                        BillingCycle) , -- PreviousBillingPeriod\r\n                            [BillCreationDate] ,\r\n                            [BillingAction] ,\r\n                            [MeterBillingStatus] ,\r\n                            [MeterBillingPreviousStatus] ,\r\n                            [MeterBillingStatusPeriod] ,\r\n                            EnergySource ,\r\n                            [ProcessedInTheCurrentPeriod] ,\r\n                            SalesType ,\r\n                            MeterType ,\r\n                            ServiceAddress ,\r\n                            MeterDials ,\r\n                            [MeterConstant] ,\r\n                            NULL , -- Demand currently only Electric\r\n                            [EstimatedOrActualBilling] ,\r\n                            [Common].[CalculateConsecutiveNumberOfEstimatedReadings](OriginalAccountNumber,\r\n                                                            OriginalMeterNumber,\r\n                                                            UtilityCompanySeqid,\r\n                                                            BillingPeriodRevision,\r\n                                                            BillingCycle,\r\n                                                            EstimatedOrActualBilling) , -- correct function Gas\r\n                            Common.CalculateProductionAndDeliveryTariff(UtilityCompanySeqid,\r\n                                                            GasRateCode) ,\r\n                            BillingDays ,\r\n                            [FromDate] ,\r\n                            [ToDate] ,\r\n                            [FromReadingDate] ,\r\n                            [ToReadingDate] ,\r\n                            [RevisedBilledTherms] ,\r\n                            NULL , --[Demand]\r\n                            [InitialPostingDate] ,\r\n                            [MeterBillingAdjustmentGasSeqid] ,\r\n                            [AuthenticatedUserID] ,\r\n                            [Notes] ,\r\n                            [DateAdded] ,\r\n                            [LastUpdate]\r\n                    FROM [Billing].[MeterBillingAdjustmentGas] MBAG\r\n                    WHERE   MeterBillingSeqid IS NULL\r\n                            AND BillingPeriod = @CurrentBillingPeriod\r\n\t--\r\n            SET @BillingMeterBillingInsertTransactionCount = @@rowcount\r\n\t--\r\n\t--\r\n            INSERT  INTO Billing.MeterBillingGas\r\n                    ( UniqueAccountSeqid, /* added on 12/20/2018 */\r\n\t\t\t\t\t\tUniqueMeterSeqid, /* added on 12/20/2018 */ \r\n\t\t\t\t\t\tMeterBillingSeqid ,\r\n                        MeterBillingAdjustmentGasSeqid ,\r\n                        UtilityCompanySeqid ,\r\n                        OriginalAccountNumber ,\r\n                        OriginalMeterNumber ,\r\n                        LastPeriodModified ,\r\n                        BillingPeriod ,\r\n                        BillingPeriodRevision ,\r\n                        MeterBillingRowState ,\r\n                        FromDate ,\r\n                        ToDate ,\r\n                        FromReadingDate ,\r\n                        ToReadingDate ,\r\n                        ReadingCode ,\r\n                        MeterReset ,\r\n                        MeterFromReading ,\r\n                        MeterToReading ,\r\n                        MeterConstant ,\r\n                        Ccf ,\r\n                        ThermsFactor ,\r\n                        Therms ,\r\n                        AuthenticatedUserID ,\r\n                        Notes ,\r\n                        DateAdded ,\r\n                        LastUpdate ,\r\n                        GasCorrectionFactor\r\n\t\t\t\t    )\r\n                    SELECT  UniqueAccountSeqid, /* added on 12/20/2018 */\r\n\t\t\t\t\t\t    UniqueMeterSeqid, /* added on 12/20/2018 */\r\n\t\t\t\t\t\t    MeterBillingSeqid ,\r\n                            MeterBillingAdjustmentGasSeqid ,\r\n                            UtilityCompanySeqid ,\r\n                            OriginalAccountNumber ,\r\n                            OriginalMeterNumber ,\r\n                            LastPeriodModified ,\r\n                            BillingPeriodRevision ,\r\n                            BillingPeriodRevision ,\r\n                            '1' AS MeterBillingRowState ,\r\n                            FromDate ,\r\n                            ToDate ,\r\n                            FromReadingDate ,\r\n                            ToReadingDate ,\r\n                            ReadingCode ,\r\n                            MeterReset ,\r\n                            MeterFromReading ,\r\n                            MeterToReading ,\r\n                            MeterConstant ,\r\n                            RevisedBilledCCF ,\r\n                            ThermsFactor ,\r\n                            RevisedBilledTherms ,\r\n                            AuthenticatedUserID ,\r\n                            Notes ,\r\n                            DateAdded ,\r\n                            LastUpdate ,\r\n                            GasCorrectionFactor\r\n                    FROM Billing.MeterBillingAdjustmentGas\r\n                    WHERE   MeterBillingSeqid IS NULL\r\n                            AND BillingPeriod = @CurrentBillingPeriod\r\n\t--\r\n            SET @BillingMeterBillingGasInsertTransactionCount = @@rowcount\r\n\t--\r\n            UPDATE  Billing.MeterBillingGas \r\n            SET     MeterBillingSeqid = MB.MeterBillingSeqid\r\n            FROM Billing.MeterBilling MB\r\n                    INNER JOIN Billing.MeterBillingGas MBG \r\n\t\t\t\t\t\tON MB.LastPeriodModified = MBG.LastPeriodModified\r\n                        AND MB.UniqueAccountSeqId = MBG.UniqueAccountSeqId\r\n                        AND MB.UniqueMeterSeqId = MBG.UniqueMeterSeqId\r\n                        AND MB.AccountUtilityCompanySeqid = MBG.UtilityCompanySeqid\r\n                        AND MB.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n                        AND MB.BillingPeriod = MBG.BillingPeriod\r\n\t\t\t\t\t\tAND MBG.OriginalMeterNumber = MB.OriginalMeterNumber\r\n                    INNER JOIN Billing.Account A \r\n\t\t\t\t\t\tON MBG.UniqueAccountSeqId= A.UniqueAccountSeqid\r\n                        AND A.IsCurrentRecord ='Y'\r\n\t\t\t\t\t\tAND MBG.UtilityCompanySeqid = A.UtilityAccountProvider\r\n            WHERE   ( MB.LastPeriodModified = @CurrentBillingPeriod )\r\n                    AND ( A.CurrentInvoiceAccountGroup = @InvoiceAccountBillingGroupSeqid )\r\n                    AND ( A.UtilityAccountProvider = @UtilityCompanySeqid )\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n            UPDATE  Billing.MeterBillingAdjustmentGas\r\n            SET     MeterBillingSeqid = MBG.MeterBillingSeqid ,\r\n                    MeterBillingGasSeqid = MBG.MeterBillingGasSeqid\r\n            FROM Billing.MeterBilling MB\r\n                    INNER JOIN Billing.MeterBillingGas MBG ON MB.LastPeriodModified = MBG.LastPeriodModified\r\n                    AND MB.UniqueAccountSeqId = MBG.UniqueAccountSeqId\r\n                    AND MB.UniqueMeterSeqId = MBG.UniqueMeterSeqId\r\n                    AND MB.AccountUtilityCompanySeqid = MBG.UtilityCompanySeqid\r\n                    AND MB.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n                    AND MB.BillingPeriod = MBG.BillingPeriod\r\n                    INNER JOIN Billing.Account A ON MBG.UniqueAccountSeqId= A.UniqueAccountSeqid\r\n                                                    AND MBG.UtilityCompanySeqid = A.UtilityAccountProvider\r\n                    INNER JOIN Billing.MeterBillingAdjustmentGas MBAG ON MB.UniqueAccountSeqId= MBAG.UniqueAccountSeqId\r\n                    AND MB.UniqueMeterSeqId= MBAG.UniqueMeterSeqId\r\n                    AND MB.BillingPeriod = MBAG.BillingPeriodRevision\r\n                    AND MB.BillingPeriodRevision = MBAG.BillingPeriodRevision\r\n                    AND MB.LastPeriodModified = MBAG.BillingPeriod\r\n            WHERE   ( MB.LastPeriodModified = @CurrentBillingPeriod )\r\n                    AND ( A.CurrentInvoiceAccountGroup = @InvoiceAccountBillingGroupSeqid )\r\n                    AND ( A.UtilityAccountProvider = @UtilityCompanySeqid )\t\t\r\n\t--\r\n        END\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @errMessage =  ERROR_MESSAGE()\r\n\t\t\t\t\r\n\t\tIF XACT_STATE() <> 0\r\n\t\tROLLBACK TRANSACTION\r\n\t\tRAISERROR(@errMessage, 12, 1)\r\n\tEND CATCH;          \r\nEND;",
      "created": "2025-06-10 21:41:26.940000",
      "last_altered": "2025-06-10 21:41:26.940000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_19_helper_UploadMeterDataToEC3",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Upload_19_helper_UploadMeterDataToEC3` is designed to manage and process gas meter billing adjustments within a SQL Server database. It primarily interacts with tables related to billing adjustments, meter billing, and account information. The procedure checks if certain billing adjustments have been processed, updates existing records, and inserts new records as necessary. It also handles transaction management and error handling to ensure data integrity.\n\n#### 2. Complexity Level: High\n\nThe complexity of this stored procedure is high due to several factors:\n- It involves multiple conditional checks and branching logic.\n- It performs a series of complex SQL operations, including joins, inserts, updates, and conditional logic.\n- It manages transactions and error handling, which adds to the complexity.\n- It interacts with multiple tables and requires careful coordination of data across these tables.\n\n#### 3. Input Parameters\n\nThis stored procedure does not take any input parameters. Instead, it relies on internal queries to retrieve necessary data from the database tables.\n\n#### 4. Business Logic and Workflow\n\n- **Variable Declaration**: The procedure begins by declaring several variables to store intermediate results and control flow.\n  \n- **Initial Data Retrieval**: It retrieves the current billing period, invoice account billing group sequence ID, and utility company sequence ID from the `Gas.UploadAccountBillingAdjustmentGas` table.\n\n- **Check for Processed Adjustments**: It checks if meter billing adjustments for gas have already been processed for the current billing period and utility company.\n\n- **Insert New Adjustments**: If no adjustments have been processed, it inserts new records into the `Billing.MeterBillingAdjustmentGas` table from the `Gas.UploadMeterBillingAdjustmentGas` table.\n\n- **Update Existing Records**: If adjustments have been processed, it updates existing records in the `Billing.MeterBilling` and `Billing.MeterBillingGas` tables with new data from the `Billing.MeterBillingAdjustmentGas` table.\n\n- **Insert New Meter Billing Records**: If there are new meter billing records to be inserted, it inserts them into the `Billing.MeterBilling` and `Billing.MeterBillingGas` tables.\n\n- **Update Adjustment Records**: Finally, it updates the `Billing.MeterBillingAdjustmentGas` table to link the newly inserted or updated records with their corresponding sequence IDs.\n\n- **Error Handling**: The procedure includes a `TRY...CATCH` block to handle any errors that occur during execution, rolling back the transaction and raising an error message if necessary.\n\n#### 5. Performance Considerations\n\n- **Indexing**: Ensure that the tables involved in joins and where clauses are properly indexed to improve query performance.\n  \n- **Transaction Management**: The use of transactions ensures data integrity but can also lead to locking and blocking issues if not managed properly.\n\n- **Batch Processing**: If the volume of data is large, consider processing in batches to reduce the load on the database and avoid long-running transactions.\n\n- **Concurrency**: The procedure should be tested for concurrency issues, especially if multiple instances might run simultaneously.\n\n#### 6. Potential Issues or Risks\n\n- **Data Integrity**: The procedure relies on accurate data in the `Gas.UploadAccountBillingAdjustmentGas` and related tables. Any discrepancies can lead to incorrect processing.\n\n- **Error Handling**: While the procedure includes error handling, it may not cover all possible exceptions. Ensure comprehensive testing to identify edge cases.\n\n- **Scalability**: As the volume of data grows, the procedure may need optimization to handle larger datasets efficiently.\n\n- **Deadlocks**: The complex update and insert operations could lead to deadlocks, especially in a high-concurrency environment.\n\n- **Maintenance**: The high complexity of the procedure makes it challenging to maintain and understand, which could lead to errors during future modifications.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 6025,
      "api_response_id": "chatcmpl-ByexfkC5XOSVG0vM43uX3lnIOiKF6"
    },
    "analysis_timestamp": "2025-07-29 09:47:32"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_19_UploadDataToEC3",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_19_UploadDataToEC3]\r\n\t\r\nAS\r\nBEGIN\r\n\t\r\n\tDECLARE @T VARCHAR(10) = 'tranMoveDataToEC3' \r\n\tDECLARE @errMessage VARCHAR(max)\r\n\tSET XACT_ABORT ON\r\n\t\r\n\tBEGIN TRY\r\n\tBEGIN TRANSACTION @T\r\n\t\tEXEC [ConEd].[usp_Upload_19_helper_UploadAccountDataToEC3]\r\n\t\t\r\n\t\tEXEC [ConEd].[usp_Upload_19_helper_UploadMeterDataToEC3]\r\n\r\n\t\tEXEC [ConEd].[usp_Upload_19_helper_FixServiceClassificationDiscrepancy]\r\n\r\n\tCOMMIT TRANSACTION @T\r\n\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\t SELECT @errMessage =  ERROR_MESSAGE()\r\n\t\t\t\t\r\n\t\t IF XACT_STATE() <> 0\r\n\t\t\tROLLBACK TRANSACTION\r\n\t\t RAISERROR(@errMessage, 12, 1)\r\n\tEND CATCH\r\n\r\nEND",
      "created": "2025-06-10 21:41:26.953000",
      "last_altered": "2025-06-10 21:41:26.953000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_19_UploadDataToEC3",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_19_UploadDataToEC3` is designed to manage a transaction that involves uploading data to a system referred to as EC3. It orchestrates the execution of three helper stored procedures: `usp_Upload_19_helper_UploadAccountDataToEC3`, `usp_Upload_19_helper_UploadMeterDataToEC3`, and `usp_Upload_19_helper_FixServiceClassificationDiscrepancy`. The procedure ensures that all operations are executed within a transaction, providing atomicity and consistency. If any part of the transaction fails, the entire transaction is rolled back to maintain data integrity.\n\n#### 2. Complexity Level: Medium\nThe complexity level is considered medium due to the following factors:\n- It involves transaction management with error handling.\n- It coordinates multiple helper procedures, which may have their own complexities.\n- It uses error handling mechanisms to ensure robustness.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates independently, likely relying on internal logic or data within the helper procedures it calls.\n\n#### 4. Business Logic and Workflow\n- **Transaction Management**: The procedure begins by declaring a transaction named `tranMoveDataToEC3` and sets `XACT_ABORT` to ON, ensuring that if a runtime error occurs, the transaction is automatically rolled back.\n- **Execution of Helper Procedures**:\n  - `usp_Upload_19_helper_UploadAccountDataToEC3`: This procedure is likely responsible for uploading account-related data to EC3.\n  - `usp_Upload_19_helper_UploadMeterDataToEC3`: This procedure probably handles the uploading of meter-related data.\n  - `usp_Upload_19_helper_FixServiceClassificationDiscrepancy`: This procedure might address any discrepancies in service classification data.\n- **Error Handling**: The procedure uses a TRY...CATCH block to handle exceptions. If an error occurs, it captures the error message and checks the transaction state. If the transaction is still active, it rolls back the transaction and raises an error with the captured message.\n\n#### 5. Performance Considerations\n- **Transaction Scope**: The procedure wraps multiple operations in a single transaction, which can be beneficial for maintaining data integrity but may also lead to longer locks on resources, potentially affecting concurrency.\n- **Error Handling Overhead**: The use of TRY...CATCH blocks introduces some overhead, but it is necessary for robust error handling.\n- **Helper Procedure Performance**: The performance of this procedure is heavily dependent on the efficiency of the helper procedures it calls. If these procedures are complex or involve large data operations, they could impact overall performance.\n\n#### 6. Potential Issues or Risks\n- **Transaction Duration**: Long-running transactions can lead to blocking and deadlocks, especially if the helper procedures involve significant data processing.\n- **Error Propagation**: The procedure captures and raises errors but does not provide detailed context about which helper procedure failed, which could make troubleshooting more challenging.\n- **Scalability**: As the procedure does not take parameters, it may not be easily adaptable for different contexts or datasets without modification.\n- **Lack of Input Validation**: Since there are no input parameters, input validation is not a concern here, but any assumptions about data states within the helper procedures should be carefully managed to avoid unexpected errors.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1142,
      "api_response_id": "chatcmpl-ByexynB2pv9DLT5fq53cIjT3mdgiG"
    },
    "analysis_timestamp": "2025-07-29 09:47:48"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_2_TransformRawData",
      "definition": "CREATE PROCEDURE [ConEd].[usp_Upload_2_TransformRawData]\r\nAS \r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\t-- truncate upload data\r\n    TRUNCATE TABLE ConEd.UploadConEdisonAccount;\r\n    TRUNCATE TABLE ConEd.UploadConEdisonMeter;\r\n    TRUNCATE TABLE ConEd.UploadConEdisonCancellation;\r\n\r\n\t---------------------\r\n\tUPDATE UCEEDP\r\n\tSET UCEEDP.ACT# =REPLACE(UCEEDP.[ACT#],' ','')+'0000'\r\n\t, UCEEDP.[O-ACT#] =REPLACE(UCEEDP.[O-ACT#],' ','')+'0000'\r\n\t, UCEEDP.[N-ACT#] =REPLACE(UCEEDP.[N-ACT#],' ','')+'0000'\r\n\tFROM coned.UploadConEdisonExchangeDataPreload AS UCEEDP\r\n\tWHERE LEN(UCEEDP.ACT#)<15\r\n\t\r\n\tUPDATE UCEAP\r\n\tSET UCEAP.AccountNumber =REPLACE(UCEAP.AccountNumber,' ','')+'0000'\r\n\tFROM coned.UploadConEdisonAccountPreload AS UCEAP\r\n\tWHERE LEN(AccountNumber)<15\r\n\t\r\n\tUPDATE UCECP\r\n\tSET UCECP.AccountNumber =REPLACE(UCECP.AccountNumber,' ','')+'0000'\r\n\tFROM coned.UploadConEdisonCancellationPreload AS UCECP\r\n\tWHERE LEN(AccountNumber)<15\t\r\n\r\n\tUPDATE UCEMP\r\n\tSET UCEMP.AccountNumber =REPLACE(UCEMP.AccountNumber,' ','')+'0000'\r\n\tFROM coned.UploadConEdisonMeterPreload AS UCEMP\r\n\tWHERE LEN(AccountNumber)<15\r\n\r\n\t---------------------\r\n\r\n    INSERT INTO ConEd.[UploadConEdisonAccount]\r\n        ([BillingPeriod],\r\n        [BillingPeriodRevision],\r\n        [FirstPeriodCanceled],\r\n        [DeltaNumberOfPeriods],\r\n        [RecordType],\r\n        [AccountNumber],\r\n        [FacilityName],\r\n        [ServiceAddress],\r\n        [FromDate],\r\n        [ToDate],\r\n        [BillingPeriodDays],\r\n        [CCF],\r\n        [BilledAmount],\r\n        [PreviousBalance],\r\n        [Therms],\r\n        [ThermFactor],\r\n        [TariffCode],\r\n        [Dials],\r\n        [FiscalYear],\r\n        [PostingDate],\r\n        [AuthenticatedUserID],\r\n        [DateAdded],\r\n        [LastUpdate])\r\n    SELECT BillingPeriod,\r\n        BillingPeriodRevision,\r\n        FirstPeriodCanceled,\r\n        DeltaNumberOfPeriods,\r\n        RecordType,\r\n\t\tAccountNumber,\r\n        FacilityName,\r\n        ServiceAddress,\r\n        [dbo].[JulianDateToYYYYMMDD](FromDate) AS FromDate,\r\n        [dbo].[JulianDateToYYYYMMDD](ToDateJul) AS ToDate,\r\n        BillingPeriodDays,\r\n        dbo.ConvertOverpunch8ToInt32(CCF) AS CCF,\r\n        dbo.ConvertOverpunch9ToMoney(BilledAmount) AS BilledAmount,\r\n        dbo.ConvertOverpunch9ToMoney(PreviousBalance) AS PreviousBalance,\r\n        dbo.ConvertOverpunch8ToInt32(Therms) AS Therms,\r\n        dbo.ConvertOverpunch4ToDecimal(ThermFactor) AS ThermFactor,\r\n        TariffCode,\r\n        Dials,\r\n        [dbo].[CalculateFiscalYear](dbo.JulDatetoYYYYMM(ToDateJul)) AS calcFiscalYear,\r\n        [dbo].[JulianDateToYYYYMMDD](PostingDate) AS PostingDate,\r\n        1,\r\n        GETDATE(),\r\n        GETDATE()\r\n    FROM ConEd.UploadConEdisonAccountPreload;\r\n\r\n    INSERT INTO ConEd.[UploadConEdisonCancellation]\r\n        ([BillingPeriod],\r\n        [BillingPeriodRevision],\r\n        [FirstPeriodCanceled],\r\n        [DeltaNumberOfPeriods],\r\n        [RecordType],\r\n        [AccountNumber],\r\n        [MeterNumber],\r\n        [FacilityName],\r\n        [ServiceAddress],\r\n        [FromDate],\r\n        [ToDate],\r\n        [BillingPeriodDays],\r\n        [CCF],\r\n        [BilledAmount],\r\n        [Therms],\r\n        [ThermFactor],\r\n        [TariffCode],\r\n        [Dials],\r\n        [FiscalYear],\r\n        [PostingDate],\r\n        [AuthenticatedUserID],\r\n        [DateAdded],\r\n        [LastUpdate])\r\n    SELECT  BillingPeriod,\r\n        BillingPeriodRevision,\r\n        FirstPeriodCanceled,\r\n        DeltaNumberOfPeriods,\r\n        RecordType,\r\n\t\tAccountNumber,\r\n        MeterNumber,\r\n        FacilityName,\r\n        ServiceAddress,\r\n        [dbo].[JulianDateToYYYYMMDD](FromDate) AS FromDate,\r\n        [dbo].[JulianDateToYYYYMMDD](ToDateJul) AS ToDate,\r\n        BillingPeriodDays,\r\n        dbo.ConvertOverpunch8ToInt32(CCF) AS CCF,\r\n        dbo.ConvertOverpunch9ToMoney(BilledAmount) AS BilledAmount,\r\n        dbo.ConvertOverpunch8ToInt32(Therms) AS Therms,\r\n        dbo.ConvertOverpunch4ToDecimal(ThermFactor) AS ThermFactor,\r\n        TariffCode,\r\n        Dials,\r\n        [dbo].[CalculateFiscalYear](dbo.JulDatetoYYYYMM(ToDateJul)) AS calcFiscalYear,\r\n        [dbo].[JulianDateToYYYYMMDD](PostingDate) AS PostingDate,\r\n        1,\r\n        GETDATE(),\r\n        GETDATE()\r\n    FROM ConEd.UploadConEdisonCancellationPreload;\r\n\r\n    INSERT INTO ConEd.[UploadConEdisonMeter]\r\n        ([BillingPeriod],\r\n        [BillingPeriodRevision],\r\n        [FirstPeriodCanceled],\r\n        [DeltaNumberOfPeriods],\r\n        [AccountNumber],\r\n        [MeterNumber],\r\n        [FromDate],\r\n        [ToDate],\r\n        [RecordType],\r\n        [FromReading],\r\n        [ToReading],\r\n        [MeterConstant],\r\n        [Dials],\r\n        [FacilityName],\r\n        [ReadingCode],\r\n        [CCF],\r\n        [CycleBillingDays],\r\n        [ThermFactor],\r\n        [ServiceAddress],\r\n        [FiscalYear],\r\n        [PostingDate],\r\n        [AuthenticatedUserID],\r\n        [DateAdded],\r\n        [LastUpdate])\r\n    SELECT BillingPeriod,\r\n        BillingPeriodRevision,\r\n        FirstPeriodCanceled,\r\n        DeltaNumberOfPeriods,\r\n\t\tAccountNumber,\r\n        MeterNumber,\r\n        [dbo].[JulianDateToYYYYMMDD](FromDate) AS FromDate,\r\n        [dbo].[JulianDateToYYYYMMDD](ToDate) AS ToDate,\r\n        RecordType,\r\n        [dbo].[ConvertOverpunch7ToInt32](FromReading) AS FromReading,\r\n        [dbo].[ConvertOverpunch7ToInt32](ToReading) AS ToReading,\r\n        MeterConstant,\r\n        Dials,\r\n        FacilityName,\r\n        ReadingCode,\r\n        dbo.ConvertOverpunch8ToInt32(CCF) AS CCF,\r\n        CAST(CycleBillingDays AS INT),\r\n        dbo.ConvertOverpunch4ToDecimal(ThermFactor) AS ThermFactor,\r\n        ServiceAddress,\r\n        [dbo].[CalculateFiscalYear](dbo.JulDatetoYYYYMM(ToDate)) AS calcFiscalYear,\r\n        [dbo].[JulianDateToYYYYMMDD](BillCreationDate),\r\n        1,\r\n        GETDATE(),\r\n        GETDATE()\r\n    FROM ConEd.UploadConEdisonMeterPreload;\r\n\r\n\t--------------------\r\n\r\n\tDECLARE @BillingPeriod AS BillingPeriod;\r\n\r\n\tSELECT @BillingPeriod = BillingPeriod \r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y';\r\n\r\n\tUPDATE ucea\r\n\tSET ucea.ToDate = bpp.EndofPeriodTodate, ucea.BillingPeriodRevision = bpp.BillingPeriod\r\n\tFROM coned.UploadConEdisonAccount AS ucea\r\n\tLEFT JOIN [Billing].BillingPeriodProjected AS bpp\r\n\tON bpp.BillingPeriod = @BillingPeriod AND bpp.UtilityCompanySeqid = 9\r\n\tWHERE ucea.BillingPeriodRevision > @BillingPeriod;\r\n\r\n\t---- Exchange data table synched- re-run is ok\r\n\tEXECUTE [Common].[CopyConEdExchangeDataUploadToCommon];\r\n\t------\r\n\t\r\n\t-- in case main exchanges have problem\r\n\t-- start\r\n\r\n\t-- New Step to integrate common.exchangedate table usage\r\n\t-- This process compare billing file and billing table and adds missing accounts and meters as exchange data record.\r\n\r\n\r\n\t---------------------------------------------------------------------------\r\n\r\n\t-- This process executes the monthly exchange data file issues.\r\n\t--EXEC [Common].[usp_CONED_HandleExchangeDataIssues]\r\n\r\n\t---- TODO include defult fixes like exchanging same meternumber\r\n\t--UPDATE ED \tSET ED.Exclude = 'Y'\tFROM Common.ExchangeData AS ED\tWHERE ED.BillingPeriod ='202404' AND ED.CurrentMeterNumber ='3979164'\tAND ED.UtilityCompanySeqid = 9\tAND ED.ExchangeCode = '45'\r\n\t--UPDATE ED \tSET ED.Exclude = 'Y'\tFROM Common.ExchangeData AS ED\tWHERE ED.BillingPeriod ='202404' AND ED.CurrentAccountNumber ='613115200030000'\tAND ED.UtilityCompanySeqid = 9\tAND ED.ExchangeCode = '28'\r\n\tUPDATE ED \tSET ED.Exclude = 'Y'\tFROM Common.ExchangeData AS ED\tWHERE ED.BillingPeriod ='202409' AND ED.CurrentAccountNumber ='744132000020000'\tAND ED.UtilityCompanySeqid = 9\tAND ED.ExchangeCode = '47'\r\n\tUPDATE ED \tSET ED.Exclude = 'Y'\tFROM Common.ExchangeData AS ED\tWHERE ED.BillingPeriod ='202409' AND ED.CurrentAccountNumber ='424904200090000'\tAND ED.UtilityCompanySeqid = 9\tAND ED.ExchangeCode = '28'\r\n\r\n\r\n\t---- TODO run this by default\r\n\t--UPDATE ED\r\n\t--SET ED.CurrentMeterNumber = ED.OriginalMeterNumber\r\n\t--FROM Common.ExchangeData AS ED\r\n\t--WHERE ED.BillingPeriod ='202404'\r\n\t--AND ED.UtilityCompanySeqid = 9\r\n\t--AND ED.CurrentMeterNumber = '       '\r\n\t--AND ED.ExchangeCode = '27'\r\n\t---------------------------------------------------------------------------\r\n\t-- end\r\n\r\n\r\n\t--preocess exchanges\r\n\tDECLARE @InvoiceBillingGroupdSeqidOrOption AS VARCHAR(1), @StatusCode3 AS INT, @Message3 AS VARCHAR(1000);\r\n\tSET @InvoiceBillingGroupdSeqidOrOption = '2';\r\n\tEXECUTE [Common].[usp_ProcessExchangeData] @InvoiceBillingGroupdSeqidOrOption, @StatusCode3 OUTPUT, @Message3 OUTPUT;\r\n\r\n\t\r\n\t-- add missing leftover exchange records\r\n\t--eXECUTE [Common].[CopyConEdExchangeDataToCommon]\r\n\r\n\r\n\r\n\t--DECLARE @InvoiceBillingGroupdSeqidOrOption1 AS VARCHAR(1), @StatusCode4 AS INT, @Message4 AS VARCHAR(1000);\r\n\t--SET @InvoiceBillingGroupdSeqidOrOption1 = '2';\r\n\t--EXECUTE [Common].[usp_ProcessExchangeData] @InvoiceBillingGroupdSeqidOrOption1, @StatusCode4 OUTPUT, @Message4 OUTPUT;\r\n\r\n\r\n\t-- check the records with incorrect billing period revision\r\n\tEXECUTE [ConEd].[usp_Validation_AccountRecordsWithIncorrectBillingPeriodRevision];\r\n\r\n\t-- Check reading code which is used to find out if the reading is est or act\r\n\tEXEC [ConEd].[usp_Validation_CheckReadingCode];\r\nEND;",
      "created": "2025-06-10 21:41:26.967000",
      "last_altered": "2025-06-10 21:41:26.967000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_2_TransformRawData",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_2_TransformRawData` is designed to process and transform raw data related to Con Edison accounts, meters, and cancellations. It performs several key operations: truncating existing data in target tables, updating account numbers in preload tables, inserting transformed data into target tables, updating billing periods, and handling exchange data. The procedure also includes validation steps to ensure data integrity.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including data truncation, transformation, insertion, and validation. It interacts with several tables and uses various user-defined functions for data conversion. The complexity is increased by the inclusion of conditional logic and external procedure calls for data processing and validation.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on predefined tables and uses internal logic to determine the current billing period and other necessary values.\n\n#### 4. Business Logic and Workflow\n- **Data Truncation**: The procedure begins by truncating three tables: `UploadConEdisonAccount`, `UploadConEdisonMeter`, and `UploadConEdisonCancellation`. This ensures that the tables are empty before new data is inserted.\n  \n- **Data Transformation**: \n  - Updates are performed on preload tables to standardize account numbers by removing spaces and appending '0000' to ensure a consistent length.\n  - Data from preload tables is inserted into corresponding target tables (`UploadConEdisonAccount`, `UploadConEdisonCancellation`, `UploadConEdisonMeter`) with transformations applied using user-defined functions for date and numeric conversions.\n\n- **Billing Period Update**: The procedure retrieves the current billing period and updates the `ToDate` and `BillingPeriodRevision` fields in the `UploadConEdisonAccount` table based on projected billing period data.\n\n- **Exchange Data Handling**: \n  - The procedure executes a stored procedure to synchronize exchange data.\n  - It includes commented-out sections for handling exchange data issues and updating records based on specific conditions.\n  - It processes exchange data using another stored procedure, `usp_ProcessExchangeData`.\n\n- **Validation**: The procedure concludes with calls to validation procedures to check for incorrect billing period revisions and validate reading codes.\n\n#### 5. Performance Considerations\n- **Truncation**: Truncating tables is efficient but should be used with caution as it removes all data without logging individual row deletions.\n- **Batch Updates**: The procedure performs updates on potentially large datasets, which could be optimized by batching or indexing strategies.\n- **Function Calls**: The use of user-defined functions for data transformation can impact performance, especially if they are not optimized.\n- **Concurrency**: The procedure does not handle concurrency explicitly, which could lead to issues if multiple instances are run simultaneously.\n\n#### 6. Potential Issues or Risks\n- **Data Loss**: Truncating tables without backup or logging could lead to data loss if the procedure is executed unintentionally.\n- **Data Integrity**: The procedure assumes that all transformations and updates are correct, but errors in logic or data could lead to incorrect data being inserted.\n- **Scalability**: As data volume grows, the performance of updates and inserts could degrade, necessitating optimization.\n- **Error Handling**: The procedure lacks explicit error handling, which could make troubleshooting difficult if an error occurs during execution.\n- **Hardcoded Values**: The use of hardcoded values for billing periods and utility company IDs could lead to maintenance challenges and errors if these values change.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3231,
      "api_response_id": "chatcmpl-ByeyDkjbjUjRGXlO2HgYTXjrkBKMF"
    },
    "analysis_timestamp": "2025-07-29 09:48:03"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_20_CorrectConEdAccountLevelServiceClassificationDiscrepancy",
      "definition": "--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Automate the account level service classification discrepancy for con edison.\r\n--*\r\n--*\t\t\t1. Identify current period Account Level Service Classification Discrepancies\r\n--\t\t\t2. Get the BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\t\t\t3. Update account with new UtilityTariffRateInformation\r\n--\t\t\t4. Update AccountLevelServiceClassificationDiscrepancy with AccountIsUpdated = 'Y' for all of the accounts that were changed.\r\n--\t\t\t5. Drop temp table #MinFromDate if it exists and recreate it\r\n--\t\t\t6. Update account with new Tariff Effective Date from upload data based upon the minimum from date of the billing\r\n--\t\t\t7. A view for common usage.\r\n--*               \r\n--* Exec:       \t\t[ConEd].[usp_ConEdAccountLevelServiceClassificationDiscrepancy]\r\n--*\r\n--* Parameter(s):         @Status int output\r\n--*\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   08/16/2011\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 08/16/2011 PAH  First Version \r\n--* 2017-08-11\tZD\t[usp_UpdateUniqueSeqIDsForAllTables] SP is added at the end of the process\r\n--**************************************************************************************\r\nCREATE PROCEDURE [ConEd].[usp_Upload_20_CorrectConEdAccountLevelServiceClassificationDiscrepancy]\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\t\r\n\t\r\n    DECLARE @CurrentInvoiceAccountGroup INT = 2, @UtilityCompanySeqid INT = 9, @BillingPeriod VARCHAR(6);\r\n\r\n--**************************************************************************************\r\n--Main Process\r\n--**************************************************************************************\r\n    \r\n--\r\n--\t\t\t1. Identify current period Account Level Service Classification Discrepancies\r\n--\r\n        INSERT  INTO Billing.AccountLevelServiceClassificationDiscrepancy\r\n                ( CurrentInvoiceAccountGroup ,\r\n                  UtilityTariffRateInformationSeqid ,\r\n                  BillingPeriod ,\r\n                  CurrentAccountNumber ,\r\n                  AccountSeqid ,\r\n                  UtilityServiceAddress ,\r\n                  UtilityCompanyShortDesc ,\r\n                  AgencyCodeOEC ,\r\n                  AgencyShortDesc ,\r\n                  OecFacilityNumber ,\r\n                  FacilityName ,\r\n                  Address1 ,\r\n                  BudgetRateClassDescription ,\r\n                  Description ,\r\n                  ShortDesc ,\r\n                  AccountStatus ,\r\n                  AccountStatusCodePeriod ,\r\n                  IsTimeOfDayAccount ,\r\n                  DeliveryTariffRate ,\r\n                  TariffCode ,\r\n                  UtilityCompanySeqid ,\r\n                  IsTOD ,\r\n                  AuthenticatedUserID ,\r\n                  Notes ,\r\n                  DateAdded ,\r\n                  LastUpdate\r\n                )\r\n--\r\n                SELECT DISTINCT\r\n                        Billing.Account.CurrentInvoiceAccountGroup ,\r\n                        Billing.Account.UtilityTariffRateInformationSeqid ,\r\n                        ConEd.UploadConEdisonAccount.BillingPeriod ,\r\n                        Billing.Account.CurrentAccountNumber ,\r\n                        Billing.Account.AccountSeqid ,\r\n                        Billing.Account.UtilityServiceAddress ,\r\n                        Billing.UtilityCompany.ShortDesc AS UtilityCompanyShortDesc ,\r\n                        Billing.AgencyDivision.AgencyCodeOEC ,\r\n                        Billing.AgencyDivision.AgencyShortDesc ,\r\n                        Billing.Facility.OecFacilityNumber ,\r\n                        Billing.Facility.FacilityName ,\r\n                        Billing.Facility.Address1 ,\r\n                        Billing.UtilityTariffRateInformation.BudgetRateClassDescription ,\r\n                        Billing.UtilityTariffRateInformation.Description ,\r\n                        Billing.UtilityTariffRateInformation.ShortDesc ,\r\n                        Billing.Account.AccountStatus ,\r\n                        Billing.Account.AccountStatusCodePeriod ,\r\n                        Billing.Account.IsTimeOfDayAccount ,\r\n                        Billing.UtilityTariffRateInformation.DeliveryTariffRate ,\r\n                        ConEd.UploadConEdisonAccount.TariffCode ,\r\n                        9 AS UtilityCompanySeqid ,\r\n                        'N' AS IsTOD ,\r\n                        1 ,\r\n                        NULL ,\r\n                        GETDATE() ,\r\n                        GETDATE()\r\n                FROM Billing.Account\r\n                        INNER JOIN ConEd.UploadConEdisonAccount ON Billing.Account.CurrentAccountNumber = ConEd.UploadConEdisonAccount.AccountNumber\r\n                        INNER JOIN Billing.UtilityTariffRateInformation ON Billing.UtilityTariffRateInformation.UtilityTariffRateInformationSeqid = Billing.Account.UtilityTariffRateInformationSeqid\r\n                                                              AND ConEd.UploadConEdisonAccount.TariffCode <> Billing.UtilityTariffRateInformation.DeliveryTariffRate\r\n                        INNER JOIN Billing.AgencyDivision ON Billing.Account.AgencyAccount = Billing.AgencyDivision.AgencyDivisionSeqid\r\n                        INNER JOIN Billing.Facility ON Billing.Account.FacilityAccount = Billing.Facility.FacilitySeqid\r\n                        INNER JOIN Billing.UtilityCompany ON Billing.Account.UtilityAccountProvider = Billing.UtilityCompany.UtilityCompanySeqid\r\n                                                             AND Billing.UtilityTariffRateInformation.UtilityCompanyTariff = Billing.UtilityCompany.UtilityCompanySeqid\r\n                                                             AND Billing.UtilityTariffRateInformation.UtilityCompanyTariff = Billing.UtilityCompany.UtilityCompanySeqid\r\n                WHERE   ( Billing.Account.CurrentInvoiceAccountGroup = 2 )\r\n                        AND ( Billing.Account.AccountStatus NOT IN ( 'AX' ) )\r\n--\r\n--\t\t\t2. Get the BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\r\n        SELECT TOP 1\r\n                @BillingPeriod = BillingPeriod\r\n        FROM ConEd.UploadConEdisonAccount\r\n--\r\n--\t\t\t3. Update account with new UtilityTariffRateInformation\r\n--\r\n        UPDATE  Billing.Account\r\n        SET     UtilityTariffRateInformationSeqid = Billing.UtilityTariffRateInformation.UtilityTariffRateInformationSeqid ,\r\n                IsTimeOfDayAccount = Billing.UtilityTariffRateInformation.IsTod ,\r\n                DeliveryTariffRate = Billing.UtilityTariffRateInformation.DeliveryTariffRate ,\r\n                CommodityTariffRate = Billing.UtilityTariffRateInformation.DeliveryTariffRate ,\r\n                AccountStatusCodePeriod = @BillingPeriod ,\r\n                FireAuditTrigger = 'Y' ,\r\n                Notes = 'Automated Service Classification update' ,\r\n                AuthenticatedUserID = 1 ,\r\n                LastUpdate = GETDATE()\r\n        FROM Billing.AccountLevelServiceClassificationDiscrepancy\r\n                INNER JOIN Billing.Account ON Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid = Billing.Account.AccountSeqid\r\n                INNER JOIN Billing.UtilityTariffRateInformation ON Billing.AccountLevelServiceClassificationDiscrepancy.TariffCode = Billing.UtilityTariffRateInformation.DeliveryTariffRate\r\n                                                              AND Billing.AccountLevelServiceClassificationDiscrepancy.UtilityCompanySeqid = Billing.UtilityTariffRateInformation.UtilityCompanyTariff\r\n                                                              AND Billing.AccountLevelServiceClassificationDiscrepancy.IsTOD = Billing.UtilityTariffRateInformation.IsTod\r\n        WHERE   ( Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod )\r\n                AND ( Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup )\r\n                AND ( Billing.AccountLevelServiceClassificationDiscrepancy.AccountIsUpdated = 'N' )\r\n--\r\n--\t\t\t4. Update AccountLevelServiceClassificationDiscrepancy with AccountIsUpdated = 'Y' for all of the accounts that were changed.\r\n--\r\n\t\r\n        UPDATE  Billing.AccountLevelServiceClassificationDiscrepancy\r\n        SET     AccountIsUpdated = 'Y' ,\r\n                DeliveryTariffRateExistsInEC3 = 'Y'\r\n        FROM Billing.AccountLevelServiceClassificationDiscrepancy\r\n                INNER JOIN Billing.Account ON Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid = Billing.Account.AccountSeqid\r\n                INNER JOIN Billing.UtilityTariffRateInformation ON Billing.AccountLevelServiceClassificationDiscrepancy.TariffCode = Billing.UtilityTariffRateInformation.DeliveryTariffRate\r\n                                                              AND Billing.AccountLevelServiceClassificationDiscrepancy.UtilityCompanySeqid = Billing.UtilityTariffRateInformation.UtilityCompanyTariff\r\n                                                              AND Billing.AccountLevelServiceClassificationDiscrepancy.IsTOD = Billing.UtilityTariffRateInformation.IsTod\r\n        WHERE   ( Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod )\r\n                AND ( Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup )\r\n                AND ( Billing.AccountLevelServiceClassificationDiscrepancy.AccountIsUpdated = 'N' )\r\n--\r\n--\t\t\t5. Drop temp table #MinFromDate if it exists and recreate it\r\n--\r\n        IF OBJECT_ID('tempdb..#MinFromDate') IS NOT NULL \r\n            DROP TABLE #MinFromDate\r\n--\r\n        SELECT  Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber ,\r\n                ConEd.UploadConEdisonAccount.AccountNumber ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid ,\r\n                MIN(ConEd.UploadConEdisonAccount.FromDate) AS DeliveryTariffEffectiveDate ,\r\n                AccountIsUpdated ,\r\n                DeliveryTariffRateExistsInEC3\r\n        INTO    #MinFromDate\r\n        FROM Billing.AccountLevelServiceClassificationDiscrepancy\r\n                INNER JOIN ConEd.UploadConEdisonAccount ON Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = ConEd.UploadConEdisonAccount.BillingPeriod\r\n                                                           AND Billing.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber = ConEd.UploadConEdisonAccount.AccountNumber\r\n        WHERE   ( Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod )\r\n                AND ( Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup )\r\n        GROUP BY Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber ,\r\n                ConEd.UploadConEdisonAccount.AccountNumber ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid ,\r\n                AccountIsUpdated ,\r\n                DeliveryTariffRateExistsInEC3\r\n--\r\n--\t\t\t6. Update account with new Tariff Effective Date from upload data based upon the minimum from date of the billing\r\n--\r\n        UPDATE  Billing.Account\r\n        SET     DeliveryTariffEffectiveDate = [#MinFromDate].DeliveryTariffEffectiveDate ,\r\n                CommodityTariffEffectiveDate = [#MinFromDate].DeliveryTariffEffectiveDate\r\n        FROM [#MinFromDate]\r\n                INNER JOIN Billing.Account ON [#MinFromDate].AccountSeqid = Billing.Account.AccountSeqid\r\n        WHERE   ( [#MinFromDate].AccountIsUpdated = 'Y' )\r\n                AND ( [#MinFromDate].DeliveryTariffRateExistsInEC3 = 'Y' )\r\n\r\n        DROP TABLE #MinFromDate\r\n\t\t\r\n\t\tUPDATE a\r\n\t\tset\r\n\t\ta.UtilityTariffRateInformationSeqid = u.UtilityTariffRateInformationSeqid\r\n\t\tFROM Billing.Account AS a\r\n\t\tINNER JOIN Billing.UtilityTariffRateInformation AS u\r\n\t\tON a.UtilityAccountProvider = u.UtilityCompanyTariff\r\n\t\tAND a.IsTimeOfDayAccount = u.IsTod\r\n\t\tAND a.DeliveryTariffRate = u.DeliveryTariffRate\r\n\t\tWHERE a.UtilityTariffRateInformationSeqid IS NULL\r\n\t\tAND a.CurrentInvoiceAccountGroup = 2 AND a.UtilityAccountProvider = 9\r\n--\r\n--\t\t\t7. Common view.\r\n--\r\n        SELECT  *\r\n        FROM Common.uvw_AccountLevelServiceClassificationDiscrepancyCorrectionFromUploadData vw\r\n        WHERE   ( vw.BillingPeriod = @BillingPeriod )\r\n                AND ( vw.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup );\r\nEND;",
      "created": "2025-06-10 21:41:26.980000",
      "last_altered": "2025-06-10 21:41:26.980000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_20_CorrectConEdAccountLevelServiceClassificationDiscrepancy",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_20_CorrectConEdAccountLevelServiceClassificationDiscrepancy` is designed to automate the correction of account-level service classification discrepancies for Con Edison. It identifies discrepancies between uploaded account data and existing billing records, updates account information with new tariff rates, and logs these updates. The procedure also manages temporary data for processing and provides a view for common usage.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including data insertion, updates, temporary table management, and joins across several tables. The complexity arises from the need to handle various conditions and ensure data integrity across multiple related tables.\n\n#### 3. Input Parameters\n- `@Status int output`: This parameter is intended to return the status of the procedure execution, indicating success (0) or failure (9).\n\n#### 4. Business Logic and Workflow\n1. **Identify Discrepancies**: Inserts records into `Billing.AccountLevelServiceClassificationDiscrepancy` for accounts where the uploaded tariff code does not match the existing delivery tariff rate.\n2. **Retrieve Billing Period**: Fetches the billing period from `ConEd.UploadConEdisonAccount` to use in subsequent updates.\n3. **Update Accounts**: Updates `Billing.Account` with new tariff rate information and flags the account as updated.\n4. **Log Updates**: Marks the discrepancies as resolved in `Billing.AccountLevelServiceClassificationDiscrepancy`.\n5. **Manage Temporary Data**: Drops and recreates a temporary table `#MinFromDate` to store the minimum effective date for tariff updates.\n6. **Update Effective Dates**: Updates accounts with the new tariff effective date based on the minimum from date.\n7. **Ensure Data Consistency**: Updates accounts with missing tariff rate information based on existing conditions.\n8. **Provide Common View**: Selects data from a common view for further analysis or reporting.\n\n#### 5. Performance Considerations\n- **Joins and Indexing**: The procedure involves multiple joins, which can be resource-intensive. Ensuring proper indexing on join columns can improve performance.\n- **Temporary Table Usage**: The use of a temporary table can impact performance, especially if the dataset is large. Consider optimizing the creation and usage of temporary tables.\n- **Concurrency**: The procedure updates multiple tables and may face concurrency issues if executed simultaneously by multiple users. Implementing transaction management could help maintain data integrity.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: Incorrect joins or updates could lead to data inconsistencies. Thorough testing is necessary to ensure that updates are applied correctly.\n- **Scalability**: As the volume of data grows, the performance of the procedure may degrade. Regular performance monitoring and optimization may be required.\n- **Error Handling**: The procedure lacks explicit error handling. Implementing try-catch blocks and logging errors can help diagnose issues during execution.\n- **Hardcoded Values**: The procedure uses hardcoded values (e.g., `UtilityCompanySeqid = 9`), which may need to be parameterized for flexibility and maintainability.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3256,
      "api_response_id": "chatcmpl-ByeyTUnBkN2JbT3zs4wzhQgkN6nPJ"
    },
    "analysis_timestamp": "2025-07-29 09:48:29"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_3_RemoveNetZeroTransaction",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\tRemove records if cancellation amount = current amount ($, therms and CCF)\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_3_RemoveNetZeroTransaction]\r\nAS \r\n    BEGIN\r\n\t\r\n        DECLARE @BillingPeriod VARCHAR(6)\r\n--\r\n\r\n        SELECT  @BillingPeriod = BillingPeriod\r\n        FROM Billing.ApplicationTimeFrame\r\n        WHERE   CurrentProcessingPeriod = 'Y'\r\n--\r\n--  Find and delete the duplicate net zero transactions where the ConEd.UploadConEdisonAccount.BilledAmount + ConEd.UploadConEdisonCancellation.BilledAmount is 0\r\n--\r\n        TRUNCATE TABLE ConEd.UploadConEdisonNetZeroTransactions\r\n--\r\n        DECLARE @HoldUploadConEdisonCancellationSeqid INT\r\n--\r\n        DECLARE @CancellationBillingPeriodRevision VARCHAR(6)\r\n        DECLARE @CancellationAccountNumber VARCHAR(15)\r\n        DECLARE @AccountUploadConEdisonAccountSeqid INT\r\n        DECLARE @CancellationUploadConEdisonCancellationSeqid INT\r\n        DECLARE @AccountTherms INT\r\n        DECLARE @CancellationTherms INT\r\n        DECLARE @AccountCCF INT\r\n        DECLARE @CancellationCCF INT\r\n        DECLARE @AccountBilledAmount MONEY\r\n        DECLARE @CancellationBilledAmount MONEY\r\n--\r\n        DECLARE UniqueConEdisonNetZeroTransactions_record CURSOR\r\n        FOR\r\n            SELECT  ConEd.UploadConEdisonCancellation.BillingPeriodRevision ,\r\n                    ConEd.UploadConEdisonCancellation.AccountNumber ,\r\n                    ConEd.UploadConEdisonAccount.UploadConEdisonAccountSeqid ,\r\n                    ConEd.UploadConEdisonCancellation.UploadConEdisonCancellationSeqid ,\r\n                    ConEd.UploadConEdisonAccount.Therms ,\r\n                    ConEd.UploadConEdisonCancellation.Therms AS CancellationTherms ,\r\n                    ConEd.UploadConEdisonAccount.CCF ,\r\n                    ConEd.UploadConEdisonCancellation.CCF AS CancellationCCF ,\r\n                    ConEd.UploadConEdisonAccount.BilledAmount ,\r\n                    ConEd.UploadConEdisonCancellation.BilledAmount AS CancellationBilledAmount\r\n            FROM ConEd.UploadConEdisonAccount\r\n                    INNER JOIN ConEd.UploadConEdisonCancellation ON ConEd.UploadConEdisonAccount.DeltaNumberOfPeriods = ConEd.UploadConEdisonCancellation.DeltaNumberOfPeriods\r\n                                                              AND ConEd.UploadConEdisonAccount.BillingPeriodRevision = ConEd.UploadConEdisonCancellation.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonAccount.BillingPeriod = ConEd.UploadConEdisonCancellation.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonAccount.AccountNumber = ConEd.UploadConEdisonCancellation.AccountNumber\r\n            WHERE   ( ConEd.UploadConEdisonAccount.BilledAmount\r\n                      + ConEd.UploadConEdisonCancellation.BilledAmount = 0 )\r\n                    AND ( ConEd.UploadConEdisonAccount.Therms\r\n                          + ConEd.UploadConEdisonCancellation.Therms = 0 )\r\n                    AND ( ConEd.UploadConEdisonAccount.CCF\r\n                          + ConEd.UploadConEdisonCancellation.CCF = 0 )\r\n            ORDER BY ConEd.UploadConEdisonCancellation.UploadConEdisonCancellationSeqid\r\n--\r\n        OPEN UniqueConEdisonNetZeroTransactions_record\r\n--\r\n        SET @HoldUploadConEdisonCancellationSeqid = 0\r\n--\r\n-- Read first row\r\n        FETCH UniqueConEdisonNetZeroTransactions_record INTO @CancellationBillingPeriodRevision,\r\n            @CancellationAccountNumber, @AccountUploadConEdisonAccountSeqid,\r\n            @CancellationUploadConEdisonCancellationSeqid, @AccountTherms,\r\n            @CancellationTherms, @AccountCCF, @CancellationCCF,\r\n            @AccountBilledAmount, @CancellationBilledAmount\r\n\r\n\r\n        WHILE @@fetch_status = 0 \r\n            BEGIN\r\n  \r\n\t-- if @AccountUploadConEdisonAccountSeqid and @CancellationUploadConEdisonCancellationSeqid are not currently in the UploadConEdisonNetZeroTransactions\r\n                IF ( NOT EXISTS ( SELECT    *\r\n                                  FROM   ConEd.UploadConEdisonNetZeroTransactions\r\n                                  WHERE UploadConEdisonAccountSeqid = @AccountUploadConEdisonAccountSeqid\r\n                                            OR UploadConEdisonCancellationSeqid = @CancellationUploadConEdisonCancellationSeqid )\r\n                   ) \r\n                    BEGIN\r\n\t\t\r\n                        INSERT  INTO ConEd.UploadConEdisonNetZeroTransactions\r\n                                ( BillingPeriod ,\r\n                                  BillingPeriodRevision ,\r\n                                  AccountNumber ,\r\n                                  UploadConEdisonAccountSeqid ,\r\n                                  UploadConEdisonCancellationSeqid ,\r\n                                  Therms ,\r\n                                  CancellationTherms ,\r\n                                  CCF ,\r\n                                  CancellationCCF ,\r\n                                  BilledAmount ,\r\n                                  CancellationBilledAmount\r\n                                )\r\n                        VALUES  ( @BillingPeriod ,\r\n                                  @CancellationBillingPeriodRevision ,\r\n                                  @CancellationAccountNumber ,\r\n                                  @AccountUploadConEdisonAccountSeqid ,\r\n                                  @CancellationUploadConEdisonCancellationSeqid ,\r\n                                  @AccountTherms ,\r\n                                  @CancellationTherms ,\r\n                                  @AccountCCF ,\r\n                                  @CancellationCCF ,\r\n                                  @AccountBilledAmount ,\r\n                                  @CancellationBilledAmount\r\n\t\t                        )\r\n\t\t\r\n                    END\r\n\t\t\r\n\t\r\n                FETCH UniqueConEdisonNetZeroTransactions_record INTO @CancellationBillingPeriodRevision,\r\n                    @CancellationAccountNumber,\r\n                    @AccountUploadConEdisonAccountSeqid,\r\n                    @CancellationUploadConEdisonCancellationSeqid,\r\n                    @AccountTherms, @CancellationTherms, @AccountCCF,\r\n                    @CancellationCCF, @AccountBilledAmount,\r\n                    @CancellationBilledAmount\r\n            END \r\n--\r\n        CLOSE UniqueConEdisonNetZeroTransactions_record\r\n\r\n        DEALLOCATE UniqueConEdisonNetZeroTransactions_record\r\n\r\n \r\n\r\n\t\t--\r\n\t\t-- Delete Net zero transactions from UploadConEdisonAccount & UploadConEdisonCancellation\r\n\t\t--\r\n        DELETE  ConEd.UploadConEdisonCancellation\r\n        FROM ConEd.UploadConEdisonCancellation\r\n                INNER JOIN ( SELECT *\r\n                             FROM ConEd.UploadConEdisonNetZeroTransactions\r\n                           ) AS NetZeroTransactions ON ConEd.UploadConEdisonCancellation.UploadConEdisonCancellationSeqid = NetZeroTransactions.UploadConEdisonCancellationSeqid\r\n--\r\n        DELETE  ConEd.UploadConEdisonAccount\r\n        FROM ConEd.UploadConEdisonAccount\r\n                INNER JOIN ( SELECT *\r\n                             FROM ConEd.UploadConEdisonNetZeroTransactions\r\n                           ) AS NetZeroTransactions ON ConEd.UploadConEdisonAccount.UploadConEdisonAccountSeqid = NetZeroTransactions.UploadConEdisonAccountSeqid\r\n\r\n\t\t\r\n        DELETE  ConEd.UploadConEdisonCancellationPreload\r\n        FROM ConEd.UploadConEdisonCancellationPreload\r\n                INNER JOIN ( SELECT *\r\n                             FROM ConEd.UploadConEdisonNetZeroTransactions\r\n                           ) AS NetZeroTransactions ON ConEd.UploadConEdisonCancellationPreload.UploadConEdisonCancellationPreloadSeqid = NetZeroTransactions.UploadConEdisonCancellationSeqid\r\n--\r\n        DELETE  ConEd.UploadConEdisonAccountPreload\r\n        FROM ConEd.UploadConEdisonAccountPreload\r\n                INNER JOIN ( SELECT *\r\n                             FROM ConEd.UploadConEdisonNetZeroTransactions\r\n                           ) AS NetZeroTransactions ON ConEd.UploadConEdisonAccountPreload.UploadConEdisonAccountPreloadSeqid = NetZeroTransactions.UploadConEdisonAccountSeqid\r\n\r\n\r\n    END",
      "created": "2025-06-10 21:41:26.993000",
      "last_altered": "2025-06-10 21:41:26.993000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_3_RemoveNetZeroTransaction",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_3_RemoveNetZeroTransaction` is designed to identify and remove \"net zero\" transactions from various tables in a SQL Server database. A \"net zero\" transaction is defined as a transaction where the sum of billed amounts, therms, and CCF (hundred cubic feet) between an account and its corresponding cancellation is zero. The procedure first identifies these transactions, stores them temporarily, and then deletes them from the main and preload tables.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is medium due to the use of cursors, multiple table joins, and conditional logic to manage transactions. The procedure involves several steps, including data selection, insertion, and deletion across multiple tables, which adds to its complexity.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on the current processing period, which it retrieves from the `Billing.ApplicationTimeFrame` table.\n\n#### 4. Business Logic and Workflow\n- **Retrieve Current Billing Period**: The procedure starts by selecting the current billing period from the `Billing.ApplicationTimeFrame` table where `CurrentProcessingPeriod` is 'Y'.\n  \n- **Truncate Temporary Table**: It truncates the `ConEd.UploadConEdisonNetZeroTransactions` table to ensure it is empty before storing new net zero transactions.\n\n- **Declare Variables**: Several variables are declared to hold data retrieved from the database, including billing period revisions, account numbers, sequence IDs, therms, CCF, and billed amounts.\n\n- **Cursor for Net Zero Transactions**: A cursor named `UniqueConEdisonNetZeroTransactions_record` is declared and opened to iterate over transactions where the sum of billed amounts, therms, and CCF is zero. This involves joining `ConEd.UploadConEdisonAccount` and `ConEd.UploadConEdisonCancellation` tables on several conditions.\n\n- **Insert Net Zero Transactions**: For each record fetched by the cursor, the procedure checks if the transaction is already in the `ConEd.UploadConEdisonNetZeroTransactions` table. If not, it inserts the transaction into this table.\n\n- **Delete Net Zero Transactions**: After processing all records, the procedure deletes the identified net zero transactions from `ConEd.UploadConEdisonAccount`, `ConEd.UploadConEdisonCancellation`, and their respective preload tables using inner joins with the `ConEd.UploadConEdisonNetZeroTransactions` table.\n\n#### 5. Performance Considerations\n- **Cursor Usage**: The use of a cursor can be a performance bottleneck, especially if the dataset is large. Cursors process rows one at a time, which is less efficient than set-based operations.\n  \n- **Table Truncation**: Truncating the `ConEd.UploadConEdisonNetZeroTransactions` table is efficient for clearing data but should be used cautiously if the table is large or if there are dependencies like foreign keys.\n\n- **Indexing**: Ensure that the tables involved in joins and where clauses are properly indexed to improve query performance.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: The procedure does not handle concurrency explicitly. If multiple instances run simultaneously, it could lead to race conditions or deadlocks, especially during the deletion phase.\n\n- **Data Integrity**: Truncating the `ConEd.UploadConEdisonNetZeroTransactions` table without checks could lead to data loss if the procedure is interrupted or fails after truncation.\n\n- **Error Handling**: The procedure lacks error handling mechanisms. Any failure during execution could leave the database in an inconsistent state.\n\n- **Scalability**: As the data grows, the performance of the cursor-based approach may degrade, necessitating a review and potential refactoring to a set-based approach.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2519,
      "api_response_id": "chatcmpl-ByeysdvmYW7nlIB601QXnV4o7KaRi"
    },
    "analysis_timestamp": "2025-07-29 09:48:57"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_4_RemoveMeterBillingWithoutAssociatedAccountBilling",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\tRemove record from meter billing that do not have associated account billing\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_4_RemoveMeterBillingWithoutAssociatedAccountBilling]\r\nAS \r\n    BEGIN\r\n\r\n\t\tINSERT INTO coned.UploadConEdisonInfoMeterBillingWithoutAccountBilling\r\n\t\t        ( BillingPeriod ,\r\n\t\t          BillingPeriodRevision ,\r\n\t\t          AccountNumber ,\r\n\t\t          MeterNumber ,\r\n\t\t          FromDate ,\r\n\t\t          ToDate ,\r\n\t\t          FromReading ,\r\n\t\t          ToReading ,\r\n\t\t          CCF\r\n\t\t        )\r\n        SELECT  ConEd.UploadConEdisonMeter.BillingPeriod ,\r\n                ConEd.UploadConEdisonMeter.BillingPeriodRevision ,\r\n                ConEd.UploadConEdisonMeter.AccountNumber ,\r\n                ConEd.UploadConEdisonMeter.MeterNumber ,\r\n                ConEd.UploadConEdisonMeter.FromDate ,\r\n                ConEd.UploadConEdisonMeter.ToDate ,\r\n                ConEd.UploadConEdisonMeter.FromReading ,\r\n                ConEd.UploadConEdisonMeter.ToReading ,\r\n                ConEd.UploadConEdisonMeter.CCF\r\n        FROM ConEd.UploadConEdisonMeter\r\n                LEFT JOIN ConEd.UploadConEdisonAccount ON ConEd.UploadConEdisonMeter.BillingPeriod = ConEd.UploadConEdisonAccount.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonMeter.BillingPeriodRevision = ConEd.UploadConEdisonAccount.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonMeter.AccountNumber = ConEd.UploadConEdisonAccount.AccountNumber\r\n        WHERE   ( ConEd.UploadConEdisonAccount.UploadConEdisonAccountSeqid IS NULL )\r\n--\r\n--\tRemove all meter billings that do not have an account bill.  This can occur from problematic data that is reported incorrectly\r\n--\tfrom Con Edsion data.  The net zero transactions are their way of correcting incorrect reporting within their system.\r\n--\r\n        DELETE  FROM ConEd.UploadConEdisonMeter\r\n        FROM ConEd.UploadConEdisonMeter\r\n                LEFT JOIN ConEd.UploadConEdisonAccount ON ConEd.UploadConEdisonMeter.BillingPeriod = ConEd.UploadConEdisonAccount.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonMeter.BillingPeriodRevision = ConEd.UploadConEdisonAccount.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonMeter.AccountNumber = ConEd.UploadConEdisonAccount.AccountNumber\r\n        WHERE   ( ConEd.UploadConEdisonAccount.UploadConEdisonAccountSeqid IS NULL )\r\n\r\n    END",
      "created": "2025-06-10 21:41:27.003000",
      "last_altered": "2025-06-10 21:41:27.003000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_4_RemoveMeterBillingWithoutAssociatedAccountBilling",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_4_RemoveMeterBillingWithoutAssociatedAccountBilling` is designed to manage data integrity between two tables: `UploadConEdisonMeter` and `UploadConEdisonAccount`. It identifies and removes records from the `UploadConEdisonMeter` table that do not have corresponding entries in the `UploadConEdisonAccount` table. This is achieved in two steps: first, by inserting such records into a separate table for logging or auditing purposes, and second, by deleting these records from the `UploadConEdisonMeter` table.\n\n#### 2. Complexity Level: Medium\nThe procedure involves a straightforward use of SQL operations such as `INSERT`, `SELECT`, and `DELETE`, combined with a `LEFT JOIN` to identify unmatched records. The complexity arises from ensuring data consistency and integrity across related tables, which requires careful handling of joins and conditions.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on the entire dataset within the specified tables, `UploadConEdisonMeter` and `UploadConEdisonAccount`.\n\n#### 4. Business Logic and Workflow\n- **Step 1: Logging Unmatched Records**\n  - The procedure begins by inserting records from `UploadConEdisonMeter` into `UploadConEdisonInfoMeterBillingWithoutAccountBilling` where there is no matching record in `UploadConEdisonAccount`. This is determined using a `LEFT JOIN` and checking for `NULL` in the `UploadConEdisonAccountSeqid` field.\n  - This step serves as a logging mechanism to track which records are being removed due to lack of association.\n\n- **Step 2: Deleting Unmatched Records**\n  - After logging, the procedure deletes the same unmatched records from `UploadConEdisonMeter`.\n  - The `DELETE` operation uses a similar `LEFT JOIN` condition to ensure only records without a corresponding account entry are removed.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the columns used in the join conditions (`BillingPeriod`, `BillingPeriodRevision`, `AccountNumber`) are indexed to optimize the join operations.\n- **Table Size**: The performance impact will vary based on the size of the `UploadConEdisonMeter` and `UploadConEdisonAccount` tables. Large datasets may require additional optimization or partitioning strategies.\n- **Transaction Management**: Consider wrapping the operations in a transaction to maintain atomicity, especially if the procedure is part of a larger batch process.\n\n#### 6. Potential Issues or Risks\n- **Data Loss**: The procedure permanently deletes records from `UploadConEdisonMeter`. Ensure that the logging table (`UploadConEdisonInfoMeterBillingWithoutAccountBilling`) is adequately monitored and managed to prevent data loss.\n- **Concurrency**: If the tables are being accessed or modified concurrently by other processes, consider implementing locking mechanisms to prevent data inconsistencies.\n- **Error Handling**: The procedure lacks explicit error handling. Consider adding try-catch blocks or error logging to capture and manage exceptions.\n- **Scalability**: As data volume grows, the procedure may require optimization to handle larger datasets efficiently without impacting system performance.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1404,
      "api_response_id": "chatcmpl-ByezLMlpVYwayrTKRYJjwblPcOAKn"
    },
    "analysis_timestamp": "2025-07-29 09:49:13"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_5_CorrectMeterDateRange",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_5_CorrectMeterDateRange]\r\nAS \r\n    BEGIN\r\n\t\r\n\t\r\n\t\t/*\r\n\t\t\tFor each meter, meter record with the largest fromDate will have the largest toDate.\r\n\t\t\tIf there are more than one record with the largest fromDate, the record with the largest current toDate value and with the same fromDate will \r\n\t\t\tbe updated with the largest toDate value.\r\n\t\t*/\r\n        UPDATE  ConEd.UploadConEdisonMeter\r\n        SET     IsEC3Corrected = 'Y' ,\r\n                toDate = ( SELECT   MAX(todate)\r\n                           FROM  ConEd.UploadConEdisonMeter AS meter\r\n                           WHERE    meter.AccountNumber = ConEd.UploadConEdisonMeter.AccountNumber\r\n                                    AND meter.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n                         )\r\n        FROM ConEd.UploadConEdisonMeter -- as UploadConEdisonMeterCorrection\r\n        WHERE   fromDate = ( SELECT MAX(fromDate)\r\n                             FROM ConEd.UploadConEdisonMeter AS meter2\r\n                             WHERE  meter2.AccountNumber = ConEd.UploadConEdisonMeter.AccountNumber\r\n                                    AND meter2.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n                           )\r\n                AND toDate = ( SELECT   MAX(meter3.toDate)\r\n                               FROM  ConEd.UploadConEdisonMeter AS meter3\r\n                               WHERE    meter3.AccountNumber = ConEd.UploadConEdisonMeter.AccountNumber\r\n                                        AND meter3.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n                                        AND meter3.fromDate = ConEd.UploadConEdisonMeter.fromDate\r\n                             )\r\n\t\t\t\t\r\n\t\t--\r\n\t\t--\tAssume the meter billing range is always correct.  Problems may occur when there are splits spans\r\n\t\t--\tor just plain errors from Con Edison.  The data is corrected in the UploadConEdisonMeterUncorrected table.\r\n\t\t--\r\n        UPDATE  ConEd.UploadConEdisonMeter\r\n        SET     IsEC3Corrected = 'Y' ,\r\n                toDate = (\r\n\t\t\t\t-- \r\n\t\t\t\t-- Finding the minimum from date for the account and meter combination and the todate is equal to\r\n\t\t\t\t-- the fromdate of the next meter reading\r\n\t\t\t\t-- \r\n                           SELECT   MIN(Fromdate)\r\n                           FROM  ConEd.UploadConEdisonMeter AS t2\r\n                           WHERE    t2.FromDate > ConEd.UploadConEdisonMeter.FromDate\r\n                                    AND t2.AccountNumber = ConEd.UploadConEdisonMeter.AccountNumber\r\n                                    AND t2.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n                         )\r\n        FROM ConEd.UploadConEdisonMeter -- as UploadConEdisonMeterCorrection\r\n\t\t\t-- \r\n\t\t\t-- This processes n-1 meter billing transaction for the account and meter combination and\r\n\t\t\t-- always assumes that min(from date) to the max(todate) is equal to the account billing range.\r\n\t\t\t-- Note: the nth transaction is skipped due to being correct by using \"is not null\" in the where clause.\r\n\t\t\t--\r\n        WHERE   ( SELECT    MIN(Fromdate)\r\n                  FROM   ConEd.UploadConEdisonMeter AS t2\r\n                  WHERE t2.FromDate > ConEd.UploadConEdisonMeter.FromDate\r\n                            AND t2.AccountNumber = ConEd.UploadConEdisonMeter.AccountNumber\r\n                            AND t2.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n                ) IS NOT NULL\r\n--\r\n\r\n\t\t-- After the fromdates || toDates are corrected, the billing period information need to be corrected also\r\n        UPDATE  ConEd.UploadConEdisonMeter\r\n        SET     BillingPeriodRevision = [dbo].[DetermineConEdisonBillingPeriodProjected](ToDate,\r\n                                                              [dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable](AccountNumber,\r\n                                                              BillingPeriodRevision),\r\n                                                              9) ,\r\n                FirstPeriodCanceled = [dbo].[CalculateNextBillingPeriod]([dbo].[DetermineConEdisonBillingPeriodProjected](FromDate,\r\n                                                              [dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable](AccountNumber,\r\n                                                              BillingPeriodRevision),\r\n                                                              9), 'M') ,\r\n                DeltaNumberOfPeriods = [dbo].[CalculateDeltaBillingPeriods]([dbo].[CalculateNextBillingPeriod]([dbo].[DetermineConEdisonBillingPeriodProjected](FromDate,\r\n                                                              [dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable](AccountNumber,\r\n                                                              BillingPeriodRevision),\r\n                                                              9), 'M'),\r\n                                                              [dbo].[DetermineConEdisonBillingPeriodProjected](ToDate,\r\n                                                              [dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable](AccountNumber,\r\n                                                              BillingPeriodRevision),\r\n                                                              9), 'M') ,\r\n                CycleBillingDays = dbo.[CalculateNumberOfBillingDays](FromDate,\r\n                                                              ToDate)\r\n        WHERE   IsEC3Corrected = 'Y'\r\n--\r\n        SELECT  'Number of Meter transactions corrected in the UploadConEdisonMeter table: ' ,\r\n                @@rowcount\r\n\r\n\r\n\r\n    END",
      "created": "2025-06-10 21:41:27.013000",
      "last_altered": "2025-06-10 21:41:27.013000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_5_CorrectMeterDateRange",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_5_CorrectMeterDateRange` is designed to correct date ranges and billing period information for meter records in the `ConEd.UploadConEdisonMeter` table. It performs updates to ensure that the date ranges for meter readings are consistent and corrects billing period information based on these date ranges. The procedure involves multiple updates to the table, focusing on adjusting the `toDate` and `fromDate` fields and recalculating billing period details.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is medium due to the following factors:\n- It involves multiple nested subqueries to determine the maximum and minimum dates for updates.\n- It uses several user-defined functions to calculate billing periods and related information.\n- The logic requires understanding of the business rules around meter reading date ranges and billing periods.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on the entire `ConEd.UploadConEdisonMeter` table.\n\n#### 4. Business Logic and Workflow\n- **First Update Block**: \n  - Corrects the `toDate` for records with the largest `fromDate` for each meter. If multiple records have the same largest `fromDate`, it updates the record with the largest `toDate`.\n  - Sets `IsEC3Corrected` to 'Y' for these records.\n\n- **Second Update Block**:\n  - Adjusts the `toDate` for records where the `toDate` should match the `fromDate` of the next meter reading.\n  - This ensures that the billing range is continuous and corrects any discrepancies due to split spans or errors.\n  - Sets `IsEC3Corrected` to 'Y' for these records.\n\n- **Third Update Block**:\n  - Updates billing period information for records marked as corrected (`IsEC3Corrected = 'Y'`).\n  - Uses user-defined functions to determine projected billing periods, calculate the next billing period, and compute the number of billing days.\n\n- **Final Output**:\n  - Returns the number of records updated in the `UploadConEdisonMeter` table.\n\n#### 5. Performance Considerations\n- The use of nested subqueries for each update can be resource-intensive, especially if the table is large.\n- The procedure updates the entire table without filtering, which may lead to performance issues if the table contains a significant number of records.\n- Indexes on `AccountNumber`, `MeterNumber`, `fromDate`, and `toDate` could improve performance by reducing the time taken for subquery evaluations.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: The procedure updates the entire table, which could lead to locking issues if other processes are accessing the table simultaneously.\n- **Data Integrity**: If the logic for determining the correct `toDate` or billing period is flawed, it could lead to incorrect data updates.\n- **Scalability**: As the table grows, the performance of this procedure may degrade due to the complexity of the subqueries and the lack of input parameters to limit the scope of updates.\n- **Error Handling**: The procedure lacks error handling, which means any runtime errors could cause the procedure to fail without logging or notifying the user.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1988,
      "api_response_id": "chatcmpl-ByezbhoIMlIb3bXF3Oc87vX4BVLaL"
    },
    "analysis_timestamp": "2025-07-29 09:49:30"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_6_ProcessSpannedBills",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_6_ProcessSpannedBills]\r\nAS \r\n    BEGIN\r\n    \r\n\t/*\r\n\tSteps:\r\n\t1) Insert 0-1 period data into UploadConEdisonAccountSummary\r\n\t2) insert processed spanned data UploadConEdisonAccountSummary\r\n\t3) Merge data (one record per account + billingperiodrevision\r\n\t*/\r\n\r\n\t\t/*\r\n\t\t1) Insert 0-1 period data into UploadConEdisonAccountSummary\r\n\t\t*/\r\n        BEGIN\r\n        \r\n            TRUNCATE TABLE ConEd.UploadConEdisonAccountSummary\r\n            INSERT  INTO ConEd.[UploadConEdisonAccountSummary]\r\n                    ([AdjustedAccount]\r\n                    ,[AccountUtilityCompanySeqid]\r\n                    ,[NumberOfTransactions]\r\n                    ,[NumberOfRebillTransactions]\r\n                    ,[NumberOfCancelTransactions]\r\n                    ,[OriginalAccountNumber]\r\n                    ,[BillingPeriod]\r\n                    ,[BillingPeriodRevision]\r\n                    ,[FirstCanceledBillingPeriod]\r\n                    ,[EstimatedOrActualBilling]\r\n                    ,[InitialCancelFromDate]\r\n                    ,[CurrentBillingToDate]\r\n                    ,[NumberOfBillingPeriods]\r\n                    ,[TotalBillingDaysRebilled]\r\n                    ,[TotalRebilledAmount]\r\n                    ,[TotalCanceledAmount]\r\n                    ,[AverageRebillCostOfGasCharge]\r\n                    ,[AverageRebillThermsFactor]\r\n                    ,[BillingDays]\r\n                    ,[BillingDate]\r\n                    ,[ToDate]\r\n                    ,[FromDate]\r\n                    ,[MTATaxAmount]\r\n                    ,[BillingAction]\r\n                    ,[ProcessedInTheCurrentPeriod]\r\n                    ,[GasRateCode]\r\n                    ,[TotalCCF]\r\n                    ,[TotalTherms]\r\n                    ,[ThermsFactor]\r\n                    ,[CancelFromDate]\r\n                    ,[CancelToDate]\r\n                    ,[CancelTotalCCF]\r\n                    ,[CancelTotalTherms]\r\n                    ,[CancelThermsFactor]\r\n                    ,[ProcessEffectiveDate]\r\n                    ,[Notes]\r\n                    ,[AuthenticatedUserID]\r\n                    ,[DateAdded]\r\n                    ,[LastUpdate]\r\n                    ,[DeliveryChargeAmount]\r\n                    ,[ThermsChargeAmount]\r\n                    ,[DiscountedAmount]\r\n                    ,[DiscountPercentage]\r\n                    ,[CustomerMinimumCharge]\r\n                    ,[CostOfGasCharge]\r\n                    ,[SpecialCharge]\r\n                    ,[SomeCharge]\r\n                    ,[CancelDeliveryChargeAmount]\r\n                    ,[CancelThermsChargeAmount]\r\n                    ,[CancelDiscountedAmount]\r\n                    ,[CancelDiscountPercentage]\r\n                    ,[CancelCustomerMinimumCharge]\r\n                    ,[CancelCostOfGasCharge]\r\n                    ,[CancelSpecialCharge]\r\n                    ,[CancelSomeCharge]\r\n                    ,[FacilityName]\r\n                    ,[ServiceAddress] )\r\n            SELECT  'AdjustedAccount' = NULL\r\n            ,       'AccountUtilityCompanySeqid' = 9\r\n            ,       'NumberOfTransactions' = 1\r\n            ,       'NumberOfRebillTransactions' = 1\r\n            ,       'NumberOfCancelTransactions' = 0\r\n            ,       'OriginalAccountNumber' = UploadConEdisonAccountPreload.AccountNumber\r\n            ,       'BillingPeriod' = UploadConEdisonAccountPreload.BillingPeriod\r\n            ,       'BillingPeriodRevision' = UploadConEdisonAccountPreload.BillingPeriodRevision\r\n            ,       'FirstCanceledBillingPeriod' = UploadConEdisonAccountPreload.FirstPeriodCanceled\r\n            ,       'EstimatedOrActualBilling' = [dbo].[DetermineConEdisonActualOrEstimatedBilling](UploadConEdisonAccountPreload.AccountNumber, UploadConEdisonAccountPreload.BillingPeriodRevision)\r\n            ,       'InitialCancelFromDate' = NULL\r\n            ,       'CurrentBillingToDate' = NULL\r\n            ,       'NumberOfBillingPeriods' = DeltaNumberOfPeriods\r\n            ,       'TotalBillingDaysRebilled' = dbo.CalculateNumberOfBillingDays([dbo].[JulianDateToYYYYMMDD](UploadConEdisonAccountPreload.FromDate), [dbo].[JulianDateToYYYYMMDD](UploadConEdisonAccountPreload.ToDateJul))\r\n            ,       'TotalRebilledAmount' = dbo.ConvertOverpunch9ToMoney(UploadConEdisonAccountPreload.BilledAmount)\r\n            ,       'TotalCanceledAmount' = 0\r\n            ,       'AverageRebillCostOfGasCharge' = dbo.ConvertOverpunch9ToMoney(UploadConEdisonAccountPreload.CommodityCharge)\r\n            ,       'AverageRebillThermsFactor' = dbo.ConvertOverpunch4ToDecimal(UploadConEdisonAccountPreload.ThermFactor)\r\n            ,       'BillingDays' = dbo.CalculateNumberOfBillingDays([dbo].[JulianDateToYYYYMMDD](UploadConEdisonAccountPreload.FromDate), [dbo].[JulianDateToYYYYMMDD](UploadConEdisonAccountPreload.ToDateJul))\r\n            ,       'BillingDate' = [dbo].[JulianDateToYYYYMMDD](UploadConEdisonAccountPreload.PostingDate)\r\n            ,       'ToDate' = [dbo].[JulianDateToYYYYMMDD](UploadConEdisonAccountPreload.ToDateJul)\r\n            ,       'FromDate' = [dbo].[JulianDateToYYYYMMDD](UploadConEdisonAccountPreload.FromDate)\r\n            ,       'MTATaxAmount' = 0\r\n            ,       'BillingAction' = CASE WHEN UploadConEdisonAccountPreload.BillingPeriod = UploadConEdisonAccountPreload.BillingPeriodRevision THEN 'O' ELSE 'A' END\r\n            ,       'ProcessedInTheCurrentPeriod' = 'N'\r\n            ,       'GasRateCode' = UploadConEdisonAccountPreload.TariffCode\r\n            ,       'TotalCCF' = dbo.ConvertOverpunch8ToInt32(UploadConEdisonAccountPreload.CCF)\r\n            ,       'TotalTherms' = dbo.ConvertOverpunch8ToInt32(UploadConEdisonAccountPreload.Therms)\r\n            ,       'ThermsFactor' = dbo.ConvertOverpunch4ToDecimal(UploadConEdisonAccountPreload.ThermFactor)\r\n            ,       'CancelFromDate' = NULL\r\n            ,       'CancelToDate' = NULL\r\n            ,       'CancelTotalCCF' = NULL\r\n            ,       'CancelTotalTherms' = NULL\r\n            ,       'CancelThermsFactor' = NULL\r\n            ,       'ProcessEffectiveDate' = [dbo].ConvertDateToYYYYMMDD(GETDATE())\r\n            ,       'Notes' = NULL\r\n            ,       'AuthenticatedUserID' = 1\r\n            ,       'DateAdded' = GETDATE()\r\n            ,       'LastUpdate' = GETDATE()\r\n            ,       'DeliveryChargeAmount' = 0\r\n            ,       'ThermsChargeAmount' = 0\r\n            ,       'DiscountedAmount' = 0\r\n            ,       'DiscountPercentage' = 0\r\n            ,       'CustomerMinimumCharge' = 0\r\n            ,       'CostOfGasCharge' = dbo.ConvertOverpunch9ToMoney(UploadConEdisonAccountPreload.CommodityCharge)\r\n            ,       'SpecialCharge' = 0\r\n            ,       'SomeCharge' = 0\r\n            ,       'CancelDeliveryChargeAmount' = NULL\r\n            ,       'CancelThermsChargeAmount' = NULL\r\n            ,       'CancelDiscountedAmount' = NULL\r\n            ,       'CancelDiscountPercentage' = NULL\r\n            ,       'CancelCustomerMinimumCharge' = NULL\r\n            ,       'CancelCostOfGasCharge' = NULL\r\n            ,       'CancelSpecialCharge' = NULL\r\n            ,       'CancelSomeCharge' = NULL\r\n            ,       FacilityName\r\n            ,       ServiceAddress\r\n            FROM ConEd.UploadConEdisonAccountPreload\r\n            WHERE   UploadConEdisonAccountPreload.DeltaNumberOfPeriods <= 1;\t\r\n\r\n        END -- 1 ends\t\r\n\r\n\r\n\t\t/*\r\n\t\t2) insert processed spanned data UploadConEdisonAccountSummary\r\n\t\t*/\r\n\r\n\t\t/*\r\n\t\t2.1) Loading >1 Period Bills (Spanned Bills) (Temporarily here)\r\n\t\t*/ \t\t\t\r\n        BEGIN\r\n        \r\n            TRUNCATE TABLE ConEd.UploadConEdisonAccountTempSummarySpanned\r\n\r\n            INSERT  INTO UploadConEdisonAccountTempSummarySpanned\r\n                    (title\r\n                    ,AccountNumber\r\n                    ,BillingPeriod\r\n                    ,BillingPeriodRevision\r\n                    ,FirstPeriodCanceled\r\n                    ,FromDate\r\n                    ,ToDate\r\n                    ,BilledAmount\r\n                    ,AveragePreviousBalance\r\n                    ,Therms\r\n                    ,ThermFactor\r\n                    ,CCF\r\n                    ,TariffCode\r\n                    ,DeltaNumberOfPeriods\r\n                    ,BillingPeriodDays\r\n                    ,FacilityName\r\n                    ,ServiceAddress\r\n                    ,PostingDate )\r\n            SELECT  'title' = 'SpannedAccountbilling'\r\n            ,       AccountNumber\r\n            ,       UploadConEdisonAccount.BillingPeriod\r\n            ,       BillingPeriodRevision\r\n            ,       FirstPeriodCanceled\r\n            ,       FromDate\r\n            ,       ToDate\r\n            ,       BilledAmount\r\n            ,       'AveragePreviousBalance' = PreviousBalance\r\n            ,       Therms\r\n            ,       ThermFactor\r\n            ,       CCF\r\n            ,       TariffCode\r\n            ,       DeltaNumberOfPeriods\r\n            ,       BillingPeriodDays\r\n            ,       FacilityName\r\n            ,       ServiceAddress\r\n            ,       PostingDate\r\n            FROM ConEd.UploadConEdisonAccount\r\n            WHERE   ( DeltaNumberOfPeriods > 1 );\t\t\r\n\t\t\r\n        END -- 2.1 ends\r\n\r\n\t\t/*\r\n\t\t2.2) Processed and insert spanned data into UploadConEdisonAccountSummary\r\n\t\t*/\r\n        BEGIN\r\n            DECLARE @UploadConEdisonAccountTempSummarySpannedSeqid dbo.seqid\r\n--\r\n            DECLARE @Notes dbo.notes\r\n            DECLARE @AccountNumber dbo.acctnum\r\n            DECLARE @FacilityName dbo.UtilityServiceAccountName\r\n            DECLARE @ServiceAddress dbo.addr\r\n            DECLARE @TariffCode dbo.tariff\r\n            DECLARE @PostingDate dbo.PostingDate\r\n--\r\n            DECLARE @NumberOfPeriodsMinusOne dbo.Accumulator\r\n            DECLARE @DeltaNumberOfPeriods dbo.Accumulator\r\n            DECLARE @BillingPeriod dbo.yyyymm \r\n            DECLARE @FirstPeriodCanceled dbo.yyyymm \r\n            DECLARE @ThermFactor dbo.ThermsFactor \r\n            DECLARE @FudgedThermFactor dbo.ThermsFactor \r\n            DECLARE @BillingPeriodRevision dbo.yyyymm \r\n            DECLARE @FromDate dbo.yyyymmdd \r\n            DECLARE @ToDate dbo.yyyymmdd \r\n            DECLARE @CalculatedBillingPeriodRevision dbo.yyyymm \r\n            DECLARE @CalculatedFromDate dbo.yyyymmdd \r\n            DECLARE @CalculatedToDate dbo.yyyymmdd \r\n            DECLARE @BilledAmount dbo.BillingAmt \r\n            DECLARE @BilledAmountMonthly dbo.BillingAmt \r\n            DECLARE @BilledAmountMonthlySum dbo.BillingAmt \r\n            DECLARE @BilledAmountAverage dbo.BillingAmt \r\n            DECLARE @BilledAmountRemainder dbo.BillingAmt \r\n            DECLARE @BillingPeriodDays dbo.Accumulator \r\n            DECLARE @BillingPeriodDaysAverage dbo.Accumulator \r\n            DECLARE @BillingPeriodDaysRemainder dbo.Accumulator \r\n            DECLARE @Therms dbo.EnergyUnit \r\n            DECLARE @LastPeriodTherms dbo.EnergyUnit \r\n            DECLARE @ThermsAverage dbo.EnergyUnit \r\n            DECLARE @ThermsRemainder dbo.EnergyUnit \r\n            DECLARE @CCF dbo.EnergyUnit \r\n            DECLARE @CCFAverage dbo.EnergyUnit \r\n            DECLARE @CCFRemainder dbo.EnergyUnit \r\n            DECLARE @SumAverageCCF dbo.EnergyUnit \r\n            DECLARE @idx INT\r\n            DECLARE @StartingBillingPeriodDaysIncrement INT\r\n            DECLARE @StartingBillingPeriodCCFIncrement INT\r\n            DECLARE @StartingBillingPeriodThermsIncrement INT\r\n            DECLARE @IncrementBillingPeriodDays INT\r\n            DECLARE @IncrementBillingPeriodCCF INT\r\n            DECLARE @IncrementBillingPeriodTherms INT\r\n-- \r\n            DECLARE @BilledAmountMonthlyLastPeriod dbo.BillingAmt\r\n            DECLARE @ThermsMonthlyLastPeriod dbo.EnergyUnit \r\n            DECLARE @CCFMonthlyLastPeriod dbo.EnergyUnit \r\n\r\n            DECLARE @ConEdUtilityCode dbo.seqid\r\n            DECLARE @ApplyMonthlyPercentage dbo.DiscountPercentage\r\n            DECLARE @ThermsMonthlySum dbo.EnergyUnit \r\n            DECLARE @ThermsMonthly dbo.EnergyUnit \r\n            DECLARE @CCFMonthly dbo.EnergyUnit \r\n            DECLARE @CCFMonthlySum dbo.EnergyUnit \r\n            DECLARE @TotalGasSpannedBilledPercentage dbo.DiscountPercentage\r\n            DECLARE @BillingCycle dbo.MonthlyBillingCycle\r\n--\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n\r\n            SELECT TOP 1\r\n                    @BillingPeriod = BillingPeriod\r\n            FROM ConEd.UploadConEdisonAccount\r\n--\r\n            SET @BillingCycle = 'M'\r\n            SET @ConEdUtilityCode = 9\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\n--\r\n            DECLARE SpannedGasBillCursor CURSOR\r\n            FOR\r\n                SELECT  UploadConEdisonAccountTempSummarySpannedSeqid\r\n                FROM ConEd.UploadConEdisonAccountTempSummarySpanned\r\n                WHERE   ( DeltaNumberOfPeriods > 1 ) --and @BillingPeriod=@BillingPeriod\r\n--\r\n            OPEN SpannedGasBillCursor;\r\n--\r\n            FETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonAccountTempSummarySpannedSeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n--\r\n            WHILE @@FETCH_STATUS = 0 \r\n                BEGIN\r\n\t--\r\n\t--\tBuffer all of the columns from the spanned row for parsing purposes\r\n\t--\r\n                    SELECT  @DeltaNumberOfPeriods = DeltaNumberOfPeriods ,\r\n                            @BillingPeriodRevision = BillingPeriodRevision ,\r\n                            @FirstPeriodCanceled = FirstPeriodCanceled ,\r\n                            @FromDate = FromDate ,\r\n                            @ToDate = ToDate ,\r\n                            @BilledAmount = BilledAmount ,\r\n                            @CCF = CCF ,\r\n                            @Therms = Therms ,\r\n                            @ThermFactor = ThermFactor ,\r\n                            @BillingPeriodDays = BillingPeriodDays ,\r\n                            @BillingPeriod = BillingPeriod ,\r\n                            @AccountNumber = AccountNumber ,\r\n                            @FacilityName = FacilityName ,\r\n                            @ServiceAddress = ServiceAddress ,\r\n                            @TariffCode = TariffCode ,\r\n                            @PostingDate = PostingDate\r\n                    FROM ConEd.UploadConEdisonAccountTempSummarySpanned\r\n                    WHERE   ( UploadConEdisonAccountTempSummarySpannedSeqid = @UploadConEdisonAccountTempSummarySpannedSeqid ) \r\n\t--\r\n\t--\tAggregate the average City wide monthly gas usage percentage for the spanned row billing periods \r\n\t--\r\n                    SELECT  @TotalGasSpannedBilledPercentage = [dbo].[CalculateTotalGasSpannedBilledPercentage](@BillingCycle, @DeltaNumberOfPeriods, @FirstPeriodCanceled, @BillingPeriodRevision)\r\n\t--\r\n\t--\tDetermine the number of periods minus 1 to pro-rate the money and usage.  The last period will derive the money and usage\r\n\t--\tby row totals - (the n-1 aggregates of money and usage)\r\n\t--\r\n                    SET @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods - 1\r\n\t--\r\n\t--\tInitialize the counters for the n-1 parses\r\n\t--\r\n                    SET @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n                    SET @CalculatedFromDate = @FromDate\r\n                    SET @CalculatedToDate = @ToDate\r\n                    SET @idx = 0\r\n                    SET @BilledAmountMonthlySum = 0.00\r\n                    SET @ThermsMonthlySum = 0\r\n                    SET @CCFMonthlySum = 0\r\n\t--\r\n                    WHILE ( @NumberOfPeriodsMinusOne > @idx ) \r\n                        BEGIN\r\n\t\t\t--\r\n\t\t\t-- The @ApplyMonthlyPercentage holds the weigthed average for the particular month\r\n\t\t\t--\r\n                            SELECT  @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled](@CalculatedBillingPeriodRevision,\r\n                                                              @TotalGasSpannedBilledPercentage)\r\n\t\t\t--\r\n\t\t\t-- Apply the Monthly Percentage to the CCF,Therms and Billed Amount and accumulate the weigthed average units.\r\n\t\t\t--\r\n                            SET @BilledAmountMonthly = ROUND(@BilledAmount * @ApplyMonthlyPercentage, 2)\r\n                            SET @BilledAmountMonthlySum = @BilledAmountMonthlySum + @BilledAmountMonthly\r\n                            SET @ThermsMonthly = ROUND(@Therms * @ApplyMonthlyPercentage, 0)\r\n                            SET @ThermsMonthlySum = @ThermsMonthlySum + @ThermsMonthly\r\n                            SET @CCFMonthly = ROUND(@CCF * @ApplyMonthlyPercentage, 0)\r\n                            SET @CCFMonthlySum = @CCFMonthlySum + @CCFMonthly\r\n\t\t\t--\r\n\t\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" as the derived \"Todate\" for the account.\r\n\t\t\t--\r\n                            SELECT  @CalculatedToDate = [dbo].[DetermineConEdisonBillingPeriodProjectedToDate](@CalculatedBillingPeriodRevision, @TariffCode, @ConEdUtilityCode)\r\n\t\t\t--\r\n                            PRINT @AccountNumber + ' ' + @BillingPeriodRevision + ' ' + @FromDate + ' ' + @ToDate\r\n\t\t\t--\r\n\t\t\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t\t\t--\tIt will note in EC3 that the transaction was derived.\r\n\t\t\t--\r\n                            SELECT  @Notes = 'Therm factor '\r\n                                    + CAST(@ThermFactor AS VARCHAR(6))\r\n                                    + ' for '\r\n                                    + CAST(@DeltaNumberOfPeriods AS VARCHAR(6))\r\n                                    + ' First: ' + @FirstPeriodCanceled\r\n                                    + ' ( ' + @FromDate + ') Last: '\r\n                                    + @BillingPeriodRevision + ' ( '\r\n                                    + @FromDate + '). ' + ' period: '\r\n                                    + @CalculatedBillingPeriodRevision\r\n                                    + ' Month %: '\r\n                                    + CAST(@ApplyMonthlyPercentage AS VARCHAR(10))\r\n                                    + ' - Total %: '\r\n                                    + CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t\t\t--\r\n\t\t\t--\tINSERT the data into the table \"ConEd.UploadConEdisonAccountSummary\"\r\n\t\t\t--\r\n                            INSERT  INTO ConEd.UploadConEdisonAccountSummary\r\n                                    (AccountUtilityCompanySeqid\r\n                                    ,OriginalAccountNumber\r\n                                    ,NumberOfRebillTransactions\r\n                                    ,NumberOfTransactions\r\n                                    ,DerivedFromSpannedBill\r\n                                    ,BillingPeriod\r\n                                    ,BillingPeriodRevision\r\n                                    ,FirstCanceledBillingPeriod\r\n                                    ,EstimatedOrActualBilling\r\n                                    ,InitialCancelFromDate\r\n                                    ,CurrentBillingToDate\r\n                                    ,NumberOfBillingPeriods\r\n                                    ,TotalBillingDaysRebilled\r\n                                    ,TotalRebilledAmount\r\n                                    ,TotalCanceledAmount\r\n                                    ,PriorRevisedBilledAmount\r\n                                    ,RevisedBilledAmount\r\n                                    ,CanceledBilledAmount\r\n                                    ,AverageRebillCostOfGasCharge\r\n                                    ,AverageRebillThermsFactor\r\n                                    ,BillingDays\r\n                                    ,BillingDate\r\n                                    ,FromDate\r\n                                    ,ToDate\r\n                                    ,BillingAction\r\n                                    ,ProcessedInTheCurrentPeriod\r\n                                    ,GasRateCode\r\n                                    ,DeliveryChargeAmount\r\n                                    ,TotalCCF\r\n                                    ,TotalTherms\r\n                                    ,ThermsFactor\r\n                                    ,CancelFromDate\r\n                                    ,CancelToDate\r\n                                    ,CancelDeliveryChargeAmount\r\n                                    ,CancelTotalCCF\r\n                                    ,CancelTotalTherms\r\n                                    ,CancelThermsFactor\r\n                                    ,ProcessEffectiveDate\r\n                                    ,Notes\r\n                                    ,SpannedBillingPeriodRevision\r\n                                    ,SpannedFirstCanceledBillingPeriod\r\n                                    ,SpannedBilledAmount\r\n                                    ,SpannedCCF\r\n                                    ,SpannedThermFactor\r\n                                    ,SpannedTherm\r\n                                    ,SpannedMonthlyPercentage\r\n                                    ,SpannedTotalPercentage\r\n                                    ,FacilityName\r\n                                    ,ServiceAddress\r\n                                    ,AuthenticatedUserID )\r\n                            SELECT  'AccountUtilityCompanySeqid' = @ConEdUtilityCode\r\n                            ,       'OriginalAccountNumber' = @AccountNumber\r\n                            ,       'NumberOfRebillTransactions' = 1\r\n                            ,       'NumberOfTransactions' = 1\r\n                            ,       'DerivedFromSpannedBill' = 'Y'\r\n                            ,       UploadConEdisonAccountTempSummarySpanned.BillingPeriod\r\n                            ,       'BillingPeriodRevision' = @CalculatedBillingPeriodRevision\r\n                            ,       'FirstCanceledBillingPeriod' = @CalculatedBillingPeriodRevision\r\n                            ,       'EstimatedOrActualBilling' = 'ACT'\r\n                            ,       'InitialCancelFromDate' = @FromDate\r\n                            ,       'CurrentBillingToDate' = @ToDate\r\n                            ,       'NumberOfBillingPeriods' = 1\r\n                            ,       'TotalBillingDaysRebilled' = [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate, @CalculatedToDate)\r\n                            ,       'TotalRebilledAmount' = @BilledAmountMonthly\r\n                            ,       'TotalCanceledAmount' = 0\r\n                            ,       'PriorRevisedBilledAmount' = 0\r\n                            ,       'RevisedBilledAmount' = 0\r\n                            ,       'CanceledBilledAmount' = 0\r\n                            ,       'AverageRebillCostOfGasCharge' = 0\r\n                            ,       'AverageRebillThermsFactor' = 1.00\r\n                            ,       'BillingDays' = [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate, @CalculatedToDate)\r\n                            ,       'BillingDate' = [dbo].ConvertDateToYYYYMMDD(@PostingDate)\r\n                            ,       'FromDate' = @CalculatedFromDate\r\n                            ,       'ToDate' = @CalculatedToDate\r\n                            ,       'BillingAction' = CASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END\r\n                            ,       'ProcessedInTheCurrentPeriod' = 'N'\r\n                            ,       'GasRateCode' = UploadConEdisonAccountTempSummarySpanned.TariffCode\r\n                            ,       'DeliveryChargeAmount' = @BilledAmountMonthly\r\n                            ,       'TotalCCF' = @CCFMonthly\r\n                            ,       'TotalTherms' = @ThermsMonthly\r\n                            ,       'ThermsFactor' = CASE @CCFMonthly WHEN 0 THEN 1.0000 ELSE ROUND(@ThermsMonthly * 1.0 / @CCFMonthly, 4) END\r\n                            ,       'CancelFromDate' = NULL\r\n                            ,       'CancelToDate' = NULL\r\n                            ,       'CancelDeliveryChargeAmount' = 0\r\n                            ,       'CancelTotalCCF' = 0\r\n                            ,       'CancelTotalTherms' = 0\r\n                            ,       'CancelThermsFactor' = 1.0\r\n                            ,       'ProcessEffectiveDate' = [dbo].ConvertDateToYYYYMMDD(GETDATE())\r\n                            ,       'Notes' = @Notes\r\n                            ,       'SpannedBillingPeriodRevision' = @BillingPeriodRevision\r\n                            ,       'SpannedFirstCanceledBillingPeriod' = @FirstPeriodCanceled\r\n                            ,       'SpannedBilledAmount' = @BilledAmount\r\n                            ,       'SpannedCCF' = @CCF\r\n                            ,       'SpannedThermFactor' = @ThermFactor\r\n                            ,       'SpannedTherm' = @Therms\r\n                            ,       'SpannedMonthlyPercentage' = @ApplyMonthlyPercentage\r\n                            ,       'SpannedTotalPercentage' = @TotalGasSpannedBilledPercentage\r\n                            ,       'FacilityName' = @FacilityName\r\n                            ,       'ServiceAddress' = @ServiceAddress\r\n                            ,       'AuthenticatedUserID' = 1 -- AuthenticatedUserID\r\n                            FROM ConEd.UploadConEdisonAccountTempSummarySpanned\r\n                            WHERE   ( UploadConEdisonAccountTempSummarySpannedSeqid = @UploadConEdisonAccountTempSummarySpannedSeqid ); \r\n\t\t\t--\r\n\t\t\t--\tSet up for the next the Revised Billing Period row.\r\n\t\t\t--\r\n                            SET @SumAverageCCF = @SumAverageCCF + @CCFAverage \t  \r\n                            SET @idx = @idx + 1\r\n\t\t\t--\r\n\t\t\t--\tCalculate the next the Revised Billing Period row.\r\n                            SELECT  @CalculatedBillingPeriodRevision = [dbo].[CalculateNextBillingPeriod](@CalculatedBillingPeriodRevision, @BillingCycle)\r\n\t\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n                            SELECT  @CalculatedFromDate = [dbo].[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision, @TariffCode, @ConEdUtilityCode)\r\n\t\t\t--\r\n\t\t\t--\tProcess the next Revised Billing Period row\r\n\t\t\t--\r\n                        END\r\n\t--\r\n\t--\tFinish up the last period's processing\r\n\t--\r\n\t--\tUse the (Nth -1) periods @CalculatedToDate as the \"FromDate\" and the acutal \"ToDate\" from the spanned record as the \"ToDate\"\r\n\t--\r\n                    SELECT  @CalculatedFromDate = @CalculatedToDate\r\n                    SELECT  @CalculatedToDate = @ToDate\r\n\t--\r\n\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\t--\r\n                    SELECT  @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled](@CalculatedBillingPeriodRevision, @TotalGasSpannedBilledPercentage)\r\n\t--\r\n\t--\tDerive the net changes to avoid rounding errors\r\n\t--\r\n                    SET @BilledAmountMonthlyLastPeriod = @BilledAmount - @BilledAmountMonthlySum\r\n                    SET @ThermsMonthlyLastPeriod = @Therms - @ThermsMonthlySum\r\n                    SET @CCFMonthlyLastPeriod = @CCF - @CCFMonthlySum\r\n\t--\r\n\t--\tprint @AccountNumber+' '+@BillingPeriodRevision+' '+@FromDate+' '+@ToDate\r\n\t--\r\n\t--\r\n\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t--\tIt will note in EC3 that the transaction was derived.\r\n\t--\r\n                    SELECT  @Notes = 'Therm factor '\r\n                            + CAST(@ThermFactor AS VARCHAR(6)) + ' for '\r\n                            + CAST(@DeltaNumberOfPeriods AS VARCHAR(6))\r\n                            + ' First: ' + @FirstPeriodCanceled + ' ( '\r\n                            + @FromDate + ') Last: ' + @BillingPeriodRevision\r\n                            + ' ( ' + @FromDate + '). ' + ' period: '\r\n                            + @CalculatedBillingPeriodRevision + ' Month %: '\r\n                            + CAST(@ApplyMonthlyPercentage AS VARCHAR(10))\r\n                            + ' - Total %: '\r\n                            + CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t--\r\n\t--\tINSERT the data into the table \"ConEd.UploadConEdisonAccountSummary\"\r\n\t--\r\n                    INSERT  INTO ConEd.UploadConEdisonAccountSummary\r\n                            (AccountUtilityCompanySeqid\r\n                            ,OriginalAccountNumber\r\n                            ,NumberOfRebillTransactions\r\n                            ,NumberOfTransactions\r\n                            ,DerivedFromSpannedBill\r\n                            ,BillingPeriod\r\n                            ,BillingPeriodRevision\r\n                            ,FirstCanceledBillingPeriod\r\n                            ,EstimatedOrActualBilling\r\n                            ,InitialCancelFromDate\r\n                            ,CurrentBillingToDate\r\n                            ,NumberOfBillingPeriods\r\n                            ,TotalBillingDaysRebilled\r\n                            ,TotalRebilledAmount\r\n                            ,TotalCanceledAmount\r\n                            ,PriorRevisedBilledAmount\r\n                            ,RevisedBilledAmount\r\n                            ,CanceledBilledAmount\r\n                            ,AverageRebillCostOfGasCharge\r\n                            ,AverageRebillThermsFactor\r\n                            ,BillingDays\r\n                            ,BillingDate\r\n                            ,FromDate\r\n                            ,ToDate\r\n                            ,BillingAction\r\n                            ,ProcessedInTheCurrentPeriod\r\n                            ,GasRateCode\r\n                            ,DeliveryChargeAmount\r\n                            ,TotalCCF\r\n                            ,TotalTherms\r\n                            ,ThermsFactor\r\n                            ,CancelFromDate\r\n                            ,CancelToDate\r\n                            ,CancelDeliveryChargeAmount\r\n                            ,CancelTotalCCF\r\n                            ,CancelTotalTherms\r\n                            ,CancelThermsFactor\r\n                            ,ProcessEffectiveDate\r\n                            ,Notes\r\n                            ,SpannedBillingPeriodRevision\r\n                            ,SpannedFirstCanceledBillingPeriod\r\n                            ,SpannedBilledAmount\r\n                            ,SpannedCCF\r\n                            ,SpannedThermFactor\r\n                            ,SpannedTherm\r\n                            ,SpannedMonthlyPercentage\r\n                            ,SpannedTotalPercentage\r\n                            ,FacilityName\r\n                            ,ServiceAddress\r\n                            ,AuthenticatedUserID )\r\n                    SELECT  'AccountUtilityCompanySeqid' = @ConEdUtilityCode\r\n                    ,       'OriginalAccountNumber' = @AccountNumber\r\n                    ,       'NumberOfRebillTransactions' = 1\r\n                    ,       'NumberOfTransactions' = 1\r\n                    ,       'DerivedFromSpannedBill' = 'Y'\r\n                    ,       'BillingPeriod' = UploadConEdisonAccountTempSummarySpanned.BillingPeriod\r\n                    ,       'BillingPeriodRevision' = @CalculatedBillingPeriodRevision\r\n                    ,       'FirstCanceledBillingPeriod' = @CalculatedBillingPeriodRevision\r\n                    ,       'EstimatedOrActualBilling' = 'ACT'\r\n                    ,       'InitialCancelFromDate' = @FromDate\r\n                    ,       'CurrentBillingToDate' = @ToDate\r\n                    ,       'NumberOfBillingPeriods' = [dbo].[CalculateDeltaBillingPeriods]([dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedFromDate,\r\n                                                              @TariffCode,\r\n                                                              @ConEdUtilityCode),\r\n                                                              @BillingCycle),\r\n                                                              [dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedToDate,\r\n                                                              @TariffCode,\r\n                                                              @ConEdUtilityCode),\r\n                                                              @BillingCycle)\r\n                    ,       'TotalBillingDaysRebilled' = [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate, @CalculatedToDate)\r\n                    ,       'TotalRebilledAmount' = @BilledAmountMonthlyLastPeriod\r\n                    ,       'TotalCanceledAmount' = 0\r\n                    ,       'PriorRevisedBilledAmount' = 0\r\n                    ,       'RevisedBilledAmount' = @BilledAmountMonthly\r\n                    ,       'CanceledBilledAmount' = 0\r\n                    ,       'AverageRebillCostOfGasCharge' = 0\r\n                    ,       'AverageRebillThermsFactor' = 1.00\r\n                    ,       'BillingDays' = [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate, @CalculatedToDate)\r\n                    ,       'BillingDate' = [dbo].ConvertDateToYYYYMMDD(@PostingDate)\r\n                    ,       'FromDate' = @CalculatedFromDate\r\n                    ,       'ToDate' = @CalculatedToDate\r\n                    ,       'BillingAction' = CASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END\r\n                    ,       'ProcessedInTheCurrentPeriod' = 'N'\r\n                    ,       'GasRateCode' = UploadConEdisonAccountTempSummarySpanned.TariffCode\r\n                    ,       'DeliveryChargeAmount' = @BilledAmountMonthlyLastPeriod\r\n                    ,       'TotalCCF' = @CCFMonthlyLastPeriod\r\n                    ,       'TotalTherms' = @ThermsMonthlyLastPeriod\r\n                    ,       'ThermsFactor' = CASE @CCFMonthlyLastPeriod WHEN 0 THEN 0 ELSE ROUND(@ThermsMonthlyLastPeriod * 1.0 / @CCFMonthlyLastPeriod, 4) END\r\n                    ,       'CancelFromDate' = NULL\r\n                    ,       'CancelToDate' = NULL\r\n                    ,       'CancelDeliveryChargeAmount' = 0\r\n                    ,       'CancelTotalCCF' = 0\r\n                    ,       'CancelTotalTherms' = 0\r\n                    ,       'CancelThermsFactor' = 1.0\r\n                    ,       'ProcessEffectiveDate' = [dbo].ConvertDateToYYYYMMDD(GETDATE())\r\n                    ,       'Notes' = @Notes\r\n                    ,       'SpannedBillingPeriodRevision' = @BillingPeriodRevision\r\n                    ,       'SpannedFirstCanceledBillingPeriod' = @FirstPeriodCanceled\r\n                    ,       'SpannedBilledAmount' = @BilledAmount\r\n                    ,       'SpannedCCF' = @CCF\r\n                    ,       'SpannedThermFactor' = @ThermFactor\r\n                    ,       'SpannedTherm' = @Therms\r\n                    ,       'SpannedMonthlyPercentage' = @ApplyMonthlyPercentage\r\n                    ,       'SpannedTotalPercentage' = @TotalGasSpannedBilledPercentage\r\n                    ,       'FacilityName' = FacilityName\r\n                    ,       'ServiceAddress' = ServiceAddress\r\n                    ,       'AuthenticatedUserID' = 1 -- AuthenticatedUserID\r\n                    FROM ConEd.UploadConEdisonAccountTempSummarySpanned\r\n                    WHERE   ( UploadConEdisonAccountTempSummarySpannedSeqid = @UploadConEdisonAccountTempSummarySpannedSeqid ); \r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\n                    FETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonAccountTempSummarySpannedSeqid\r\n                END\r\n\r\n            CLOSE SpannedGasBillCursor;\r\n            DEALLOCATE SpannedGasBillCursor;\r\n\r\n        END -- 2.2 ends\r\n\r\n\t\t/*\r\n\t\t2.3) Correct billing period\r\n\t\t*/\r\n\t\t--\tMake sure that the max BillingPeriodRevision is less than or equal to the current BillingPeriod\r\n        BEGIN\r\n            UPDATE  ConEd.UploadConEdisonAccountSummary\r\n            SET     BillingPeriodRevision = CASE WHEN BillingPeriodRevision > BillingPeriod THEN BillingPeriod ELSE BillingPeriodRevision END\r\n            WHERE   ( BillingPeriod < BillingPeriodRevision )\r\n        END -- end 2.3\r\n\r\n\t\t/*\r\n\t\t3) Merge data. One record for each account + billingperiodrevision. Save data into the adjustment gas table\r\n\t\t*/\r\n        BEGIN\r\n            TRUNCATE TABLE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n            INSERT  INTO ConEd.[UploadConEdisonAccountBillingAdjustmentGas]\r\n                    ([AdjustedAccount]\r\n                    ,[AccountUtilityCompanySeqid]\r\n                    ,[NumberOfTransactions]\r\n                    ,[NumberOfRebillTransactions]\r\n                    ,[NumberOfCancelTransactions]\r\n                    ,[OriginalAccountNumber]\r\n                    ,[BillingPeriod]\r\n                    ,[BillingPeriodRevision]\r\n                    ,[FirstCanceledBillingPeriod]\r\n                    ,[EstimatedOrActualBilling]\r\n                    ,[InitialCancelFromDate]\r\n                    ,[CurrentBillingToDate]\r\n                    ,[NumberOfBillingPeriods]\r\n                    ,[TotalBillingDaysRebilled]\r\n                    ,[TotalRebilledAmount]\r\n                    ,[TotalCanceledAmount]\r\n                    ,[AverageRebillCostOfGasCharge]\r\n                    ,[AverageRebillThermsFactor]\r\n                    ,[BillingDays]\r\n                    ,[BillingDate]\r\n                    ,[ToDate]\r\n                    ,[FromDate]\r\n                    ,[BillingAction]\r\n                    ,[ProcessedInTheCurrentPeriod]\r\n                    ,[GasRateCode]\r\n                    ,[TotalCCF]\r\n                    ,[TotalTherms]\r\n                    ,[ThermsFactor]\r\n                    ,[CancelFromDate]\r\n                    ,[CancelToDate]\r\n                    ,[CancelTotalCCF]\r\n                    ,[CancelTotalTherms]\r\n                    ,[CancelThermsFactor]\r\n                    ,[ProcessEffectiveDate]\r\n                    ,[DerivedFromSpannedBill]\r\n                    ,[SpannedBillingPeriodRevision]\r\n                    ,[SpannedFirstCanceledBillingPeriod]\r\n                    ,[SpannedBilledAmount]\r\n                    ,[SpannedCCF]\r\n                    ,[SpannedThermFactor]\r\n                    ,[SpannedTherm]\r\n                    ,[SpannedMonthlyPercentage]\r\n                    ,[SpannedTotalPercentage]\r\n                    ,[Notes]\r\n                    ,[AuthenticatedUserID]\r\n                    ,[DateAdded]\r\n                    ,[LastUpdate]\r\n                    ,[FacilityName]\r\n                    ,[ServiceAddress]\r\n                    ,[BillingCycle] )\r\n            SELECT  'AdjustedAccount' = NULL\r\n            ,       'AccountUtilityCompanySeqid' = 9\r\n            ,       'NumberOfTransactions' = COUNT(*)\r\n            ,       'NumberOfRebillTransactions' = COUNT(*)\r\n            ,       'NumberOfCancelTransactions' = 0\r\n            ,       'OriginalAccountNumber' = UploadConEdisonAccountSummary.OriginalAccountNumber\r\n            ,       'BillingPeriod' = MAX(UploadConEdisonAccountSummary.BillingPeriod)\r\n            ,       'BillingPeriodRevision' = UploadConEdisonAccountSummary.BillingPeriodRevision\r\n            ,       'FirstCanceledBillingPeriod' = [dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(MIN(UploadConEdisonAccountSummary.FromDate), MIN(UploadConEdisonAccountSummary.GasRateCode), 9), 'M')\r\n            ,       'EstimatedOrActualBilling' = [dbo].[DetermineConEdisonActualOrEstimatedBilling](UploadConEdisonAccountSummary.OriginalAccountNumber, UploadConEdisonAccountSummary.BillingPeriodRevision)\r\n            ,       'InitialCancelFromDate' = NULL\r\n            ,       'CurrentBillingToDate' = NULL\r\n            ,       'NumberOfBillingPeriods' = [dbo].[CalculateDeltaBillingPeriods]([dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(MIN(UploadConEdisonAccountSummary.FromDate), MIN(UploadConEdisonAccountSummary.GasRateCode), 9), 'M'), [dbo].DetermineConEdisonBillingPeriodProjected(MAX(UploadConEdisonAccountSummary.ToDate), MAX(UploadConEdisonAccountSummary.GasRateCode), 9), 'M')\r\n            ,       'TotalBillingDaysRebilled' = dbo.CalculateNumberOfBillingDays(MIN(UploadConEdisonAccountSummary.FromDate), MAX(UploadConEdisonAccountSummary.ToDate))\r\n            ,       'TotalRebilledAmount' = SUM(UploadConEdisonAccountSummary.TotalRebilledAmount)\r\n            ,       'TotalCanceledAmount' = 0\r\n            ,       'AverageRebillCostOfGasCharge' = AVG(UploadConEdisonAccountSummary.CostOfGasCharge)\r\n            ,       'AverageRebillThermsFactor' = AVG(UploadConEdisonAccountSummary.ThermsFactor)\r\n            ,       'BillingDays' = dbo.CalculateNumberOfBillingDays(MIN(UploadConEdisonAccountSummary.FromDate), MAX(UploadConEdisonAccountSummary.ToDate))\r\n            ,       'BillingDate' = MAX(UploadConEdisonAccountSummary.BillingDate)\r\n            ,       'ToDate' = MAX(UploadConEdisonAccountSummary.ToDate)\r\n            ,       'FromDate' = MIN(UploadConEdisonAccountSummary.FromDate)\r\n            ,       'BillingAction' = CASE WHEN MAX(UploadConEdisonAccountSummary.BillingPeriod) = MIN(UploadConEdisonAccountSummary.BillingPeriodRevision) THEN 'O' ELSE 'A' END\r\n            ,       'ProcessedInTheCurrentPeriod' = 'N'\r\n            ,       'GasRateCode' = MAX(UploadConEdisonAccountSummary.GasRateCode)\r\n            ,       'TotalCCF' = SUM(UploadConEdisonAccountSummary.TotalCCF)\r\n            ,       'TotalTherms' = SUM(UploadConEdisonAccountSummary.TotalTherms)\r\n            ,       'ThermsFactor' = SUM(UploadConEdisonAccountSummary.ThermsFactor)\r\n            ,       'CancelFromDate' = NULL\r\n            ,       'CancelToDate' = NULL\r\n            ,       'CancelTotalCCF' = NULL\r\n            ,       'CancelTotalTherms' = NULL\r\n            ,       'CancelThermsFactor' = NULL\r\n            ,       'ProcessEffectiveDate' = [dbo].ConvertDateToYYYYMMDD(GETDATE())\r\n            ,       'DerivedFromSpannedBill' = MAX(UploadConEdisonAccountSummary.DerivedFromSpannedBill)\r\n            ,       'SpannedBillingPeriodRevision' = MAX(UploadConEdisonAccountSummary.SpannedBillingPeriodRevision)\r\n            ,       'SpannedFirstCanceledBillingPeriod' = MAX(UploadConEdisonAccountSummary.SpannedFirstCanceledBillingPeriod)\r\n            ,       'SpannedBilledAmount' = MAX(UploadConEdisonAccountSummary.SpannedBilledAmount)\r\n            ,       'SpannedCCF' = MAX(UploadConEdisonAccountSummary.SpannedCCF)\r\n            ,       'SpannedThermFactor' = MAX(UploadConEdisonAccountSummary.SpannedThermFactor)\r\n            ,       'SpannedTherm' = MAX(UploadConEdisonAccountSummary.SpannedTherm)\r\n            ,       'SpannedMonthlyPercentage' = MAX(UploadConEdisonAccountSummary.SpannedMonthlyPercentage)\r\n            ,       'SpannedTotalPercentage' = MAX(UploadConEdisonAccountSummary.SpannedTotalPercentage)\r\n            ,       'Notes' = MAX(UploadConEdisonAccountSummary.Notes)\r\n            ,       'AuthenticatedUserID' = MAX(UploadConEdisonAccountSummary.AuthenticatedUserID)\r\n            ,       'DateAdded' = GETDATE()\r\n            ,       'LastUpdate' = GETDATE()\r\n            ,       'FacilityName' = MAX(FacilityName)\r\n            ,       'ServiceAddress' = MAX(ServiceAddress)\r\n            ,       'BillingCycle] )' = 'M'\r\n            FROM ConEd.UploadConEdisonAccountSummary\r\n            GROUP BY UploadConEdisonAccountSummary.OriginalAccountNumber, UploadConEdisonAccountSummary.BillingPeriodRevision;\t\r\n        END -- 3 end\r\n    END",
      "created": "2025-06-10 21:41:27.033000",
      "last_altered": "2025-06-10 21:41:27.033000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_6_ProcessSpannedBills",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Upload_6_ProcessSpannedBills` is designed to process billing data for Con Edison accounts, specifically focusing on handling \"spanned bills,\" which are bills that cover more than one billing period. The procedure performs several key operations: it first processes and inserts data for accounts with 0-1 billing periods, then handles spanned bills (those with more than one billing period), and finally merges the processed data into a summary table for further analysis or reporting.\n\n#### 2. Complexity Level: High\nThe complexity of this stored procedure is high due to several factors:\n- It involves multiple steps with intricate logic for handling different types of billing data.\n- It uses cursors for row-by-row processing, which adds complexity and potential performance overhead.\n- It includes numerous calculations and transformations using user-defined functions.\n- The procedure manages multiple temporary and permanent tables, requiring careful coordination of data flow.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on predefined tables within the `ConEd` schema.\n\n#### 4. Business Logic and Workflow\nThe procedure is structured into several main sections:\n\n1. **Insert 0-1 Period Data**: \n   - Truncates the `UploadConEdisonAccountSummary` table.\n   - Inserts data from `UploadConEdisonAccountPreload` where the number of periods (`DeltaNumberOfPeriods`) is 0 or 1.\n   - Utilizes various user-defined functions to calculate billing days, convert dates, and determine billing types.\n\n2. **Process Spanned Bills**:\n   - **2.1**: Truncates and populates a temporary table `UploadConEdisonAccountTempSummarySpanned` with data for accounts having more than one billing period.\n   - **2.2**: Uses a cursor to iterate over the spanned bills, calculating monthly percentages and prorating amounts across periods. Inserts processed data back into `UploadConEdisonAccountSummary`.\n   - **2.3**: Updates the `BillingPeriodRevision` to ensure it does not exceed the `BillingPeriod`.\n\n3. **Merge Data**:\n   - Truncates `UploadConEdisonAccountBillingAdjustmentGas`.\n   - Aggregates and inserts data from `UploadConEdisonAccountSummary` into `UploadConEdisonAccountBillingAdjustmentGas`, ensuring one record per account and billing period revision.\n\n#### 5. Performance Considerations\n- **Cursors**: The use of cursors for processing spanned bills can lead to performance bottlenecks, especially with large datasets. Consider refactoring to set-based operations if possible.\n- **Table Truncation**: Frequent truncation of tables can be resource-intensive and may impact performance if the tables are large.\n- **Function Calls**: The procedure relies heavily on user-defined functions, which can add overhead. Ensure these functions are optimized for performance.\n- **Concurrency**: The procedure does not handle concurrency explicitly, which could lead to issues if multiple instances run simultaneously.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: Truncating tables without backup or logging could lead to data loss if the procedure fails mid-execution.\n- **Error Handling**: The procedure lacks explicit error handling, which could result in unhandled exceptions and incomplete data processing.\n- **Scalability**: The use of cursors and row-by-row processing may not scale well with increasing data volumes.\n- **Maintenance**: The complexity and reliance on multiple user-defined functions make the procedure difficult to maintain and troubleshoot.\n- **Concurrency Issues**: Without proper locking mechanisms, concurrent executions could lead to data inconsistencies or race conditions.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 9803,
      "api_response_id": "chatcmpl-Byezr5Kjp4KsTfGVorFKoyJWgjSZ5"
    },
    "analysis_timestamp": "2025-07-29 09:49:52"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_7_PrepareCancellationData",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_7_PrepareCancellationData]\r\nAS \r\n\r\nbegin\r\n\t\r\n\t---Loading 0-1 Period Cancels (Temporarily here)\r\n    TRUNCATE TABLE ConEd.UploadConEdisonCancellationSummary\r\n    INSERT  INTO ConEd.[UploadConEdisonCancellationSummary]\r\n            ( [AdjustedAccount] ,\r\n                [AccountUtilityCompanySeqid] ,\r\n                [NumberOfTransactions] ,\r\n                [NumberOfRebillTransactions] ,\r\n                [NumberOfCancelTransactions] ,\r\n                [OriginalAccountNumber] ,\r\n                [BillingPeriod] ,\r\n                [BillingPeriodRevision] ,\r\n                [FirstCanceledBillingPeriod] ,\r\n                [EstimatedOrActualBilling] ,\r\n                [InitialCancelFromDate] ,\r\n                [CurrentBillingToDate] ,\r\n                [NumberOfBillingPeriods] ,\r\n                [TotalBillingDaysRebilled] ,\r\n                [TotalRebilledAmount] ,\r\n                [TotalCanceledAmount] ,\r\n                [AverageRebillCostOfGasCharge] ,\r\n                [AverageRebillThermsFactor] ,\r\n                [BillingDays] ,\r\n                [BillingDate] ,\r\n                [ToDate] ,\r\n                [FromDate] ,\r\n                [MTATaxAmount] ,\r\n                [BillingAction] ,\r\n                [ProcessedInTheCurrentPeriod] ,\r\n                [GasRateCode] ,\r\n                [TotalCCF] ,\r\n                [TotalTherms] ,\r\n                [ThermsFactor] ,\r\n                [CancelFromDate] ,\r\n                [CancelToDate] ,\r\n                [CancelTotalCCF] ,\r\n                [CancelTotalTherms] ,\r\n                [CancelThermsFactor] ,\r\n                [CancelBillingDays] ,\r\n                [ProcessEffectiveDate] ,\r\n                [Notes] ,\r\n                [AuthenticatedUserID] ,\r\n                [DateAdded] ,\r\n                [LastUpdate] ,\r\n                [DeliveryChargeAmount] ,\r\n                [ThermsChargeAmount] ,\r\n                [DiscountedAmount] ,\r\n                [DiscountPercentage] ,\r\n                [CustomerMinimumCharge] ,\r\n                [CostOfGasCharge] ,\r\n                [SpecialCharge] ,\r\n                [SomeCharge] ,\r\n                [CancelDeliveryChargeAmount] ,\r\n                [CancelThermsChargeAmount] ,\r\n                [CancelDiscountedAmount] ,\r\n                [CancelDiscountPercentage] ,\r\n                [CancelCustomerMinimumCharge] ,\r\n                [CancelCostOfGasCharge] ,\r\n                [CancelSpecialCharge] ,\r\n                [CancelSomeCharge] ,\r\n                [FacilityName] ,\r\n                [ServiceAddress]\r\n            )\r\n            SELECT  NULL ,\t--\t           (<AdjustedAccount, seqid,>\r\n                    9 ,\t--\t           ,<AccountUtilityCompanySeqid, seqid,>\r\n                    1 ,\t   -- ,[NumberOfTransactions]\t\r\n                    0 , -- ,[NumberOfRebillTransactions]\t\t\t\r\n                    1 , -- ,[NumberOfCancelTransactions]\t\r\n                    UploadConEdisonCancellationPreload.AccountNumber ,\t--\t           ,<OriginalAccountNumber, acctnum,>\r\n                    UploadConEdisonCancellationPreload.BillingPeriod ,\t--\t           ,<BillingPeriod, BillingPeriod,>\t\r\n                    UploadConEdisonCancellationPreload.BillingPeriodRevision ,\t--\t           ,<BillingPeriodRevision, BillingPeriodRevision,>\r\n                    UploadConEdisonCancellationPreload.FirstPeriodCanceled ,\t--\t           ,<FirstCanceledBillingPeriod, yyyymm,>\r\n                    [dbo].[DetermineConEdisonActualOrEstimatedBilling](UploadConEdisonCancellationPreload.AccountNumber,\r\n                                                            UploadConEdisonCancellationPreload.BillingPeriodRevision) ,\t--\t  ,<EstimatedOrActualBilling, varchar(3),>\r\n                    [dbo].[JulianDateToYYYYMMDD](UploadConEdisonCancellationPreload.FromDate) ,\t--\t           ,<InitialCancelFromDate, yyyymmdd,>\r\n                    [dbo].[JulianDateToYYYYMMDD](UploadConEdisonCancellationPreload.ToDateJul) ,\t--\t           ,<CurrentBillingToDate, yyyymmdd,>\r\n                    DeltaNumberOfPeriods ,\t--\t           ,<NumberOfBillingPeriods, int,>\t\r\n                    dbo.CalculateNumberOfBillingDays([dbo].[JulianDateToYYYYMMDD](UploadConEdisonCancellationPreload.FromDate),\r\n                                                        [dbo].[JulianDateToYYYYMMDD](UploadConEdisonCancellationPreload.ToDateJul)) ,\t--\t           ,<TotalBillingDaysRebilled, int,>\r\n                    0 ,\t--\t           ,<TotalRebilledAmount, money,>\r\n                    dbo.ConvertOverpunch9ToMoney(UploadConEdisonCancellationPreload.BilledAmount) ,\t--\t           ,<TotalCanceledAmount, money,>\r\n                    0 ,\t--\t           ,<AverageRebillCostOfGasCharge, money,>\r\n                    1.0 ,\t--\t           ,<AverageRebillThermsFactor, ThermsFactor,>\r\n                    0 ,\t--\t           ,<BillingDays, int,>\r\n                    [dbo].[JulianDateToYYYYMMDD](UploadConEdisonCancellationPreload.PostingDate) ,\t--\t           ,<BillingDate, int,>\r\n                    NULL ,\t--\t           ,<ToDate, yyyymmdd,>\r\n                    NULL ,\t--\t           ,<FromDate, yyyymmdd,>\r\n                    0 ,\t--\t           ,<MTATaxAmount, money,>\r\n                    CASE WHEN UploadConEdisonCancellationPreload.BillingPeriod = UploadConEdisonCancellationPreload.BillingPeriodRevision\r\n                            THEN 'O'\r\n                            ELSE 'A'\r\n                    END , -- ,<BillingAction, BillingAction,>\r\n                    'N' ,\t--\t  !!!         ,<ProcessedInTheCurrentPeriod, yesno,>\r\n                    UploadConEdisonCancellationPreload.TariffCode ,\t--\t           ,<GasRateCode, varchar(3),>\r\n                    0 ,\t--\t           ,<TotalCCF, EnergyUnit,>\r\n                    0 ,\t--\t           ,<TotalTherms, EnergyUnit,>\r\n                    1.0 ,\t--\t           ,<ThermsFactor, ThermsFactor,>\r\n                    [dbo].[JulianDateToYYYYMMDD](UploadConEdisonCancellationPreload.FromDate) ,\t--\t           ,<CancelFromDate, yyyymmdd,>\r\n                    [dbo].[JulianDateToYYYYMMDD](UploadConEdisonCancellationPreload.ToDateJul) ,\t--\t           ,<CancelToDate, yyyymmdd,>\r\n                    dbo.ConvertOverpunch8ToInt32(UploadConEdisonCancellationPreload.CCF) ,\t--\t           ,<CancelTotalCCF, EnergyUnit,>\r\n                    dbo.ConvertOverpunch8ToInt32(UploadConEdisonCancellationPreload.Therms) ,\t--\t           ,<CancelTotalTherms, EnergyUnit,>\r\n                    dbo.ConvertOverpunch4ToDecimal(UploadConEdisonCancellationPreload.ThermFactor) ,\t--\t           ,<CancelThermsFactor, ThermsFactor,>\r\n                    dbo.CalculateNumberOfBillingDays([dbo].[JulianDateToYYYYMMDD](UploadConEdisonCancellationPreload.FromDate),\r\n                                                        [dbo].[JulianDateToYYYYMMDD](UploadConEdisonCancellationPreload.ToDateJul)) ,\t--\t           ,<CancelBillingDays>\r\n                    [dbo].ConvertDateToYYYYMMDD(GETDATE()) ,\t--\t           ,<ProcessEffectiveDate, varchar(8),>\r\n                    NULL ,\r\n                    1 ,\r\n                    GETDATE() ,\r\n                    GETDATE() ,\r\n                    0 ,\t--\t           ,<DeliveryChargeAmount, BillingAmt,>\r\n                    0 ,\t--\t           ,<ThermsChargeAmount, BillingAmt,>\r\n                    0 ,\t--\t           ,<DiscountedAmount, BillingAmt,>\r\n                    0 ,\t--\t           ,<DiscountPercentage, DiscountPercentage,>\r\n                    0 ,\t--\t           ,<CustomerMinimumCharge, BillingAmt,>\r\n                    dbo.ConvertOverpunch9ToMoney(UploadConEdisonCancellationPreload.CommodityCharge) ,\t--\t           ,<CostOfGasCharge, BillingAmt,>\r\n                    0 ,\t--\t           ,<SpecialCharge, BillingAmt,>\r\n                    0 ,\t--\t           ,<SomeCharge, money,>\r\n                    NULL ,\t--\t           ,<CancelDeliveryChargeAmount, BillingAmt,>\r\n                    NULL ,\t--\t           ,<CancelThermsChargeAmount, BillingAmt,>\r\n                    NULL ,\t--\t           ,<CancelDiscountedAmount, BillingAmt,>\r\n                    NULL ,\t--\t           ,<CancelDiscountPercentage, DiscountPercentage,>\r\n                    NULL ,\t--\t           ,<CancelCustomerMinimumCharge, BillingAmt,>\r\n                    NULL ,\t--\t           ,<CancelCostOfGasCharge, BillingAmt,>\r\n                    NULL ,\t--\t           ,<CancelSpecialCharge, BillingAmt,>\r\n                    NULL ,\t--\t           ,<CancelSomeCharge, money,>\r\n                    FacilityName ,\r\n                    ServiceAddress\r\n            FROM ConEd.UploadConEdisonCancellationPreload\r\n            WHERE   UploadConEdisonCancellationPreload.DeltaNumberOfPeriods <= 1\t\r\n\r\n\t-- loading >1 period cancels\t\r\n\ttruncate table ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n\tINSERT INTO ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n\t\t\t\t\t\t\t(title, AccountNumber, MeterNumber, BillingPeriod, BillingPeriodRevision, FirstPeriodCanceled, CancelFromDate, CancelToDate, CancelBilledAmount, \r\n\t\t\t\t\t\t\tCancelTherms, CancelThermFactor, CancelCCF, CancelTariffCode, CancelBillingPeriodDays, FacilityName, ServiceAddress, DeltaNumberOfPeriods, \r\n\t\t\t\t\t\t\tDials, PostingDate)\r\n\tSELECT  'SpannedCancellation' AS title,   AccountNumber, MeterNumber AS MeterNumber, BillingPeriod, BillingPeriodRevision,  FirstPeriodCanceled as FirstPeriodCanceled, FromDate as CancelFromDate, \r\n\tToDate as CancelToDate, BilledAmount as CancelBilledAmount, \r\n\t\t\t\t\t\t\tTherms as CancelTherms, [dbo].[CalculateGasThermFactor] (CCF,Therms) as CancelThermFactor, CCF as CancelCCF, TariffCode as CancelTariffCode, \r\n\t\tDATEDIFF(day,  [dbo].[ConvertYYYYMMDDToDatetime] (FromDate),[dbo].[ConvertYYYYMMDDToDatetime] (ToDate)) as CancelBillingPeriodDays, FacilityName as FacilityName, \r\n\t\t\t\t\t\t\tServiceAddress as ServiceAddress, DeltaNumberOfPeriods AS DeltaNumberOfPeriods, Dials AS Dials,PostingDate\r\n\t--into UploadConEdisonCancellationTempSummarySpanned\r\n\tFROM ConEd.UploadConEdisonCancellation\r\n\tWHERE (DeltaNumberOfPeriods > 1)\r\n\r\nEND",
      "created": "2025-06-10 21:41:27.050000",
      "last_altered": "2025-06-10 21:41:27.050000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_7_PrepareCancellationData",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Upload_7_PrepareCancellationData` is designed to process cancellation data related to utility billing for ConEdison. It performs two main tasks: \n1. It processes cancellation records for billing periods that span 0 to 1 period and inserts them into the `UploadConEdisonCancellationSummary` table.\n2. It processes cancellation records for billing periods that span more than one period and inserts them into the `UploadConEdisonCancellationTempSummarySpanned` table.\n\n#### 2. Complexity Level: Medium\n\nThe procedure involves multiple steps, including truncating tables, inserting data with transformations, and using several user-defined functions. The complexity arises from the use of these functions and the handling of different billing period scenarios.\n\n#### 3. Input Parameters\n\nThis stored procedure does not take any input parameters. It operates on data already present in the `ConEd.UploadConEdisonCancellationPreload` and `ConEd.UploadConEdisonCancellation` tables.\n\n#### 4. Business Logic and Workflow\n\n- **Truncation of Tables**: \n  - The procedure begins by truncating the `UploadConEdisonCancellationSummary` table to remove any existing data, ensuring that only the latest processed data is stored.\n\n- **Processing 0-1 Period Cancels**:\n  - Data is inserted into `UploadConEdisonCancellationSummary` from `UploadConEdisonCancellationPreload` where `DeltaNumberOfPeriods` is less than or equal to 1.\n  - Various transformations and calculations are performed using user-defined functions such as `DetermineConEdisonActualOrEstimatedBilling`, `JulianDateToYYYYMMDD`, `CalculateNumberOfBillingDays`, and `ConvertOverpunch9ToMoney`.\n  - The procedure sets default values for certain fields and calculates others based on the data from the preload table.\n\n- **Processing >1 Period Cancels**:\n  - The `UploadConEdisonCancellationTempSummarySpanned` table is truncated.\n  - Data is inserted into this table from `UploadConEdisonCancellation` where `DeltaNumberOfPeriods` is greater than 1.\n  - Similar transformations and calculations are performed, with additional fields like `CancelThermFactor` being calculated using the `CalculateGasThermFactor` function.\n\n#### 5. Performance Considerations\n\n- **Truncation Operations**: Truncating tables can be efficient for clearing data but may impact performance if the tables are large or if there are many concurrent operations.\n- **Function Calls**: The use of multiple user-defined functions can introduce overhead, especially if these functions are complex or inefficient.\n- **Data Volume**: The performance will depend on the volume of data in the `UploadConEdisonCancellationPreload` and `UploadConEdisonCancellation` tables. Large datasets may require optimization or indexing strategies.\n\n#### 6. Potential Issues or Risks\n\n- **Data Loss**: Truncating tables without backing up data can lead to data loss if the procedure is executed unintentionally.\n- **Function Dependencies**: The procedure relies heavily on user-defined functions. Any changes or errors in these functions could affect the procedure's output.\n- **Concurrency**: If multiple instances of this procedure are run simultaneously, it could lead to contention or locking issues, especially during truncation and insertion operations.\n- **Error Handling**: The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete data processing in case of failures.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3155,
      "api_response_id": "chatcmpl-Byf0D7hjefWnvqObuk5ub7AQx9iUw"
    },
    "analysis_timestamp": "2025-07-29 09:50:13"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_8_Process36Or40Refunds",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_8_Process36Or40Refunds]\r\nAS \r\n    BEGIN\r\n\t--\r\n-- ********************************************************************\r\n--\tHandle Rate 036 or 040 refunds\r\n-- ********************************************************************\r\n        TRUNCATE TABLE ConEd.UploadConEdisonRate036Refunds\r\n--\r\n--\tFind all rate 036 account cancellations that are canceled for the current period.  Save their basic information that will be\r\n--\tused by the stored procedure (ConEd.usp_IdentifyRefundsForGasRate036).  It will net the following attributes:\r\n--\t\t\t\t\r\n--\t\t\t\tDeltaNumberOfPeriods will generally be 13.  The current month billing plus 12 refund months.\r\n--\t\t\t\tRefundCCF will probably be zero\r\n--\t\t\t\tRefundTherms will be negative and have a relationship as to the amount of money being refunded.\r\n--\t\t\t\tRefundBilledAmount is negative dollars representing the total amount \r\n--\r\n        DECLARE @NumberOfConEdisonRate036Refunds INT\r\n--\r\n        SELECT  @NumberOfConEdisonRate036Refunds = COUNT(*) \r\n        SELECT  COUNT(*)\r\n        FROM ConEd.UploadConEdisonCancellation\r\n        WHERE   ( BillingPeriodRevision = BillingPeriod )\r\n                AND ( TariffCode IN ( '036', '040' ) )\r\n                AND ( DeltaNumberOfPeriods = 12\r\n                      OR DeltaNumberOfPeriods = 13\r\n                    )\r\n--\r\n        IF ( @NumberOfConEdisonRate036Refunds > 0 ) \r\n            BEGIN\r\n                INSERT  INTO ConEd.UploadConEdisonRate036Refunds\r\n                        ( AccountNumber ,\r\n                          TariffCode ,\r\n                          DeltaNumberOfPeriods ,\r\n                          BillingPeriodRevision ,\r\n                          BillingPeriod ,\r\n                          FromDate ,\r\n                          ToDate ,\r\n                          RefundCCF ,\r\n                          RefundTherms ,\r\n                          RefundBilledAmount\r\n                        )\r\n                        SELECT  AccountNumber ,\r\n                                TariffCode ,\r\n                                DeltaNumberOfPeriods ,\r\n                                BillingPeriodRevision ,\r\n                                BillingPeriod ,\r\n                                FromDate ,\r\n                                ToDate ,\r\n                                CCF ,\r\n                                Therms ,\r\n                                BilledAmount\r\n                        FROM ConEd.UploadConEdisonCancellation\r\n                        WHERE   ( BillingPeriodRevision = BillingPeriod )\r\n                                AND ( TariffCode IN ( '036', '040' ) )\r\n                                AND ( DeltaNumberOfPeriods = 12\r\n                                      OR DeltaNumberOfPeriods = 13\r\n                                    )\r\n\r\n                SELECT  'ConEd.UploadConEdisonRate036Refunds' AS description ,\r\n                        *\r\n                FROM ConEd.UploadConEdisonRate036Refunds\r\n--\r\n--\t\tThe identified account(s) are stored in th ConEd.UploadConEdisonRate036Refunds table.  \r\n--\t\tThe ConEd.UploadConEdisonCancellationPreload and ConEd.UploadConEdisonCancellation have their Therms and CCF set to zero in EBCDIC and ascii \r\n--\t\tformat respectively.  This way forces the stored procedure (ConEd.usp_IdentifyRefundsForGasRate036) to process them as refunds.\r\n--\r\n--\t\tThis was a critical correction factor \"(DeltaNumberOfPeriods = 12)\". This isolates the annualized refund for gas rates 036 & 040.  (9/11/2009 pah)\r\n--\r\n\r\n                UPDATE  ConEd.UploadConEdisonCancellationPreload\r\n                SET     Therms = '0000000{' ,\r\n                        CCF = '0000000{'\r\n                WHERE   ( BillingPeriodRevision = BillingPeriodRevision )\r\n                        AND ( TariffCode IN ( '036', '040' ) )\r\n                        AND ( (DeltaNumberOfPeriods = 12\r\n                              OR DeltaNumberOfPeriods = 13)\r\n                            )\r\n\t\t\t\t\r\n                UPDATE  ConEd.UploadConEdisonCancellation\r\n                SET     Therms = 0 ,\r\n                        CCF = 0\r\n                WHERE   ( BillingPeriodRevision = BillingPeriod )\r\n                        AND ( TariffCode IN ( '036', '040' ) )\r\n                        AND ( (DeltaNumberOfPeriods = 12\r\n                              OR DeltaNumberOfPeriods = 13)\r\n                            )\r\n\t\t\t\t\r\n                UPDATE  ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n                SET     CancelCCF = 0 ,\r\n                        CancelTherms = 0\r\n                WHERE   ( BillingPeriodRevision = BillingPeriod )\r\n                        AND ( CancelTariffCode IN ( '036', '040' ) )\r\n                        AND ( (DeltaNumberOfPeriods = 12\r\n                              OR DeltaNumberOfPeriods = 13)\r\n                            )\r\n\r\n            END\r\n  \r\n\r\n        DECLARE @GasRate036RefundCount INT\r\n--\r\n        SELECT  @GasRate036RefundCount = ISNULL(COUNT(*), 0)\r\n        FROM ConEd.UploadConEdisonCancellationSummary\r\n                INNER JOIN ConEd.UploadConEdisonAccountSummary ON ConEd.UploadConEdisonCancellationSummary.BillingPeriod = ConEd.UploadConEdisonAccountSummary.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonCancellationSummary.BillingPeriodRevision = ConEd.UploadConEdisonAccountSummary.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonCancellationSummary.OriginalAccountNumber = ConEd.UploadConEdisonAccountSummary.OriginalAccountNumber\r\n        WHERE   ( ConEd.UploadConEdisonCancellationSummary.CancelTotalCCF = 0 )\r\n                AND ( ConEd.UploadConEdisonCancellationSummary.CancelTotalTherms = 0 )\r\n                AND ( ConEd.UploadConEdisonCancellationSummary.TotalCanceledAmount <> 0 )\r\n                AND ( ConEd.UploadConEdisonCancellationSummary.GasRateCode IN (\r\n                      '036', '040' ) )\r\n\r\n--\tOne Period Refund\r\n--\r\n        IF ( @GasRate036RefundCount <> 0 ) \r\n            BEGIN\r\n\t--\r\n\t--\tNote:\tThe workflow has the UploadConEdisonAccountSummary (Rebilled data) loaded into the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\t\tprior to working on the cancellation data.  The correction is being applied to the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\t\tinstead of the ConEd.UploadConEdisonAccountSummary.\r\n\t--\t\r\n                UPDATE  ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n                SET     Notes = CAST(ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount\r\n                        + ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount AS VARCHAR(18))\r\n                        + ' net Charge for rate '\r\n                        + ConEd.UploadConEdisonAccountBillingAdjustmentGas.GasRateCode\r\n                        + ' for the Current period ('\r\n                        + ConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriod\r\n                        + ') net rebilled amount: '\r\n                        + CAST(ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount AS VARCHAR(18))\r\n                        + ' refunded amount: '\r\n                        + CAST(ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount AS VARCHAR(18))\r\n                        + ' refunded Therms(CCF): '\r\n                        + CAST(ConEd.UploadConEdisonRate036Refunds.RefundTherms AS VARCHAR(18))\r\n                        + '('\r\n                        + CAST(ConEd.UploadConEdisonRate036Refunds.RefundCCF AS VARCHAR(18))\r\n                        + ')' ,\r\n                        TotalRebilledAmount = ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount\r\n                        + ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount ,\r\n                        TotalCanceledAmount = 0 ,\r\n                        TotalCCF = TotalCCF\r\n                        + ConEd.UploadConEdisonRate036Refunds.RefundCCF ,\r\n                        TotalTherms = TotalTherms\r\n                        + ConEd.UploadConEdisonRate036Refunds.RefundTherms ,\r\n                        CancelTotalTherms = 0 ,\r\n                        CancelTotalCCF = 0\r\n                FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n                        INNER JOIN ConEd.UploadConEdisonRate036Refunds ON ConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriod = ConEd.UploadConEdisonRate036Refunds.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriodRevision = ConEd.UploadConEdisonRate036Refunds.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonAccountBillingAdjustmentGas.OriginalAccountNumber = ConEd.UploadConEdisonRate036Refunds.AccountNumber\r\n                                                              AND ConEd.UploadConEdisonAccountBillingAdjustmentGas.GasRateCode = ConEd.UploadConEdisonRate036Refunds.TariffCode\r\n    --\r\n\t--    Once the refund is applied correctly to the ConEd.UploadConEdisonAccountBillingAdjustmentGas.  The cancellation record will be removed.\r\n\t--\r\n                DELETE  FROM ConEd.UploadConEdisonCancellationSummary\r\n                FROM ConEd.UploadConEdisonCancellationSummary\r\n                        INNER JOIN ConEd.UploadConEdisonAccountSummary ON ConEd.UploadConEdisonCancellationSummary.BillingPeriod = ConEd.UploadConEdisonAccountSummary.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonCancellationSummary.BillingPeriodRevision = ConEd.UploadConEdisonAccountSummary.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonCancellationSummary.OriginalAccountNumber = ConEd.UploadConEdisonAccountSummary.OriginalAccountNumber\r\n                WHERE   ( ConEd.UploadConEdisonCancellationSummary.CancelTotalCCF = 0 )\r\n                        AND ( ConEd.UploadConEdisonCancellationSummary.CancelTotalTherms = 0 )\r\n                        AND ( ConEd.UploadConEdisonCancellationSummary.TotalCanceledAmount <> 0 )\r\n                        AND ( ConEd.UploadConEdisonCancellationSummary.GasRateCode IN (\r\n                              '036', '040' ) )\r\n                        AND ( ConEd.UploadConEdisonCancellationSummary.NumberOfBillingPeriods = 12 )\r\n\t--\r\n                SET @GasRate036RefundCount = 0\r\n\r\n            END\r\n--\r\n        SELECT  @GasRate036RefundCount = ISNULL(COUNT(*), 0)\r\n        FROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n                INNER JOIN ConEd.UploadConEdisonAccountSummary ON ConEd.UploadConEdisonCancellationTempSummarySpanned.BillingPeriod = ConEd.UploadConEdisonAccountSummary.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonCancellationTempSummarySpanned.BillingPeriodRevision = ConEd.UploadConEdisonAccountSummary.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonCancellationTempSummarySpanned.AccountNumber = ConEd.UploadConEdisonAccountSummary.OriginalAccountNumber\r\n        WHERE   ( ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelCCF = 0 )\r\n                AND ( ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelTherms = 0 )\r\n                AND ( ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelBilledAmount <> 0 )\r\n                AND ( ConEd.UploadConEdisonAccountSummary.GasRateCode IN (\r\n                      '036', '040' ) )\r\n--\r\n--\tSpanned Refund\r\n--\r\n        IF ( @GasRate036RefundCount <> 0 ) \r\n            BEGIN\r\n\t--\r\n\t--\tNote:\tThe workflow has the UploadConEdisonAccountSummary (Rebilled data) loaded into the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\t\tprior to working on the cancellation data.  The correction is being applied to the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\t\tinstead of the ConEd.UploadConEdisonAccountSummary.\r\n\t--\t\t\t\r\n                UPDATE  ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n                SET     Notes = CAST(ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount\r\n                        + ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount AS VARCHAR(18))\r\n                        + ' net Charge for rate '\r\n                        + ConEd.UploadConEdisonAccountBillingAdjustmentGas.GasRateCode\r\n                        + ' for the Current period ('\r\n                        + ConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriod\r\n                        + ') net rebilled amount: '\r\n                        + CAST(ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount AS VARCHAR(18))\r\n                        + ' refunded amount: '\r\n                        + CAST(ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount AS VARCHAR(18))\r\n                        + ' refunded Therms(CCF): '\r\n                        + CAST(ConEd.UploadConEdisonRate036Refunds.RefundTherms AS VARCHAR(18))\r\n                        + '('\r\n                        + CAST(ConEd.UploadConEdisonRate036Refunds.RefundCCF AS VARCHAR(18))\r\n                        + ')' ,\r\n                        TotalRebilledAmount = ConEd.UploadConEdisonAccountBillingAdjustmentGas.TotalRebilledAmount\r\n                        + ConEd.UploadConEdisonRate036Refunds.RefundBilledAmount ,\r\n                        TotalCanceledAmount = 0 ,\r\n                        TotalCCF = TotalCCF\r\n                        + ConEd.UploadConEdisonRate036Refunds.RefundCCF ,\r\n                        TotalTherms = TotalTherms\r\n                        + ConEd.UploadConEdisonRate036Refunds.RefundTherms ,\r\n                        CancelTotalTherms = 0 ,\r\n                        CancelTotalCCF = 0\r\n                FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n                        INNER JOIN ConEd.UploadConEdisonRate036Refunds ON ConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriod = ConEd.UploadConEdisonRate036Refunds.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonAccountBillingAdjustmentGas.BillingPeriodRevision = ConEd.UploadConEdisonRate036Refunds.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonAccountBillingAdjustmentGas.OriginalAccountNumber = ConEd.UploadConEdisonRate036Refunds.AccountNumber\r\n                                                              AND ConEd.UploadConEdisonAccountBillingAdjustmentGas.GasRateCode = ConEd.UploadConEdisonRate036Refunds.TariffCode\r\n\t--\r\n\t--\tOnce the refund is applied correctly to the ConEd.UploadConEdisonAccountBillingAdjustmentGas.  The cancellation record will be removed.\r\n\t--\r\n                DELETE  FROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n                FROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n                        INNER JOIN ConEd.UploadConEdisonAccountSummary ON ConEd.UploadConEdisonCancellationTempSummarySpanned.BillingPeriod = ConEd.UploadConEdisonAccountSummary.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonCancellationTempSummarySpanned.BillingPeriodRevision = ConEd.UploadConEdisonAccountSummary.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonCancellationTempSummarySpanned.AccountNumber = ConEd.UploadConEdisonAccountSummary.OriginalAccountNumber\r\n                WHERE   ( ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelCCF = 0 )\r\n                        AND ( ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelTherms = 0 )\r\n                        AND ( ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelBilledAmount <> 0 )\r\n                        AND ( ConEd.UploadConEdisonCancellationTempSummarySpanned.CancelTariffCode IN (\r\n                              '036', '040' ) ) \r\n\t--\r\n                SET @GasRate036RefundCount = 0\r\n\r\n            END\r\n\r\n\r\n\t\t          \r\n    END",
      "created": "2025-06-10 21:41:27.063000",
      "last_altered": "2025-06-10 21:41:27.063000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_8_Process36Or40Refunds",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Upload_8_Process36Or40Refunds` is designed to handle refunds for accounts with specific tariff codes ('036' and '040') in the ConEd database. It processes account cancellations for the current billing period, identifies eligible refunds, updates related tables, and removes processed cancellation records. The procedure involves multiple steps, including data truncation, selection, insertion, updating, and deletion across several tables.\n\n#### 2. Complexity Level: Medium\n\nThe procedure involves multiple SQL operations, including conditional logic, data manipulation across several tables, and complex string concatenation for logging purposes. The complexity arises from the need to handle different refund scenarios and ensure data consistency across related tables.\n\n#### 3. Input Parameters\n\nThe stored procedure does not take any input parameters. It operates on the data available in the specified tables within the `ConEd` schema.\n\n#### 4. Business Logic and Workflow\n\n1. **Truncate Table**: The procedure begins by truncating the `ConEd.UploadConEdisonRate036Refunds` table to ensure it starts with a clean slate for the current operation.\n\n2. **Identify Eligible Refunds**: It counts and selects records from `ConEd.UploadConEdisonCancellation` where the `BillingPeriodRevision` matches the `BillingPeriod`, and the `TariffCode` is either '036' or '040'. The `DeltaNumberOfPeriods` must be 12 or 13, indicating a full year or slightly more.\n\n3. **Insert Refund Data**: If eligible refunds are found, the procedure inserts relevant data into `ConEd.UploadConEdisonRate036Refunds`.\n\n4. **Update Cancellation Records**: It updates `Therms` and `CCF` to zero in both `ConEd.UploadConEdisonCancellationPreload` and `ConEd.UploadConEdisonCancellation` to mark them as processed for refunds.\n\n5. **Process One Period Refunds**: It checks for one-period refunds in `ConEd.UploadConEdisonCancellationSummary` and updates `ConEd.UploadConEdisonAccountBillingAdjustmentGas` with refund details. Processed records are then deleted from `ConEd.UploadConEdisonCancellationSummary`.\n\n6. **Process Spanned Refunds**: Similar to one-period refunds, it processes spanned refunds in `ConEd.UploadConEdisonCancellationTempSummarySpanned` and updates `ConEd.UploadConEdisonAccountBillingAdjustmentGas`. Processed records are deleted from `ConEd.UploadConEdisonCancellationTempSummarySpanned`.\n\n#### 5. Performance Considerations\n\n- **Truncation**: The use of `TRUNCATE TABLE` is efficient for clearing data but should be used cautiously as it cannot be rolled back.\n- **Conditional Logic**: The procedure uses conditional checks to determine the flow, which can be optimized by ensuring indexes are present on columns used in WHERE clauses.\n- **String Operations**: The concatenation of strings for the `Notes` field could be optimized or minimized if performance issues arise.\n- **Batch Processing**: If the tables involved have a large number of records, consider batch processing to reduce transaction size and lock contention.\n\n#### 6. Potential Issues or Risks\n\n- **Data Integrity**: The procedure directly manipulates and deletes records, which could lead to data integrity issues if not carefully managed.\n- **Concurrency**: The procedure may face concurrency issues if multiple instances run simultaneously, especially with updates and deletions.\n- **Error Handling**: There is no explicit error handling in the procedure. Consider adding TRY...CATCH blocks to manage exceptions and ensure rollback in case of failures.\n- **Scalability**: As data volume grows, the performance of the procedure may degrade. Regular monitoring and optimization may be necessary.\n- **Logging**: The procedure does not include logging for auditing purposes, which could be beneficial for tracking changes and debugging.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 4211,
      "api_response_id": "chatcmpl-Byf0Yy1DnE5YH7BZtmpruYiFzulzn"
    },
    "analysis_timestamp": "2025-07-29 09:50:34"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Upload_9_ProcessSpannedCancellation",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_9_ProcessSpannedCancellation]\r\nAS \r\n    BEGIN\r\n\t\r\n\t/*\r\n\tSteps:\r\n\t1. put spanned data into UploadConEdisonCancellationSummary\r\n\t2. Make sure that the max BillingPeriodRevision is less than or equal to the current BillingPeriod\r\n\t3. Update record with cancellation information\r\n\t4. Insert cancellation without rebill\r\n\t*/\r\n\r\n\t/*\r\n\t1) put spanned data into UploadConEdisonCancellationSummary\r\n\t*/\r\n        BEGIN\r\n  \r\n            DECLARE @UploadConEdisonCancellationTempSummarySpannedSeqid dbo.seqid\r\n--\r\n            DECLARE @Notes dbo.notes\r\n            DECLARE @AccountNumber dbo.acctnum\r\n            DECLARE @FacilityName dbo.UtilityServiceAccountName\r\n            DECLARE @ServiceAddress dbo.addr\r\n            DECLARE @CancelTariffCode dbo.tariff\r\n            DECLARE @PostingDate dbo.PostingDate\r\n--\r\n            DECLARE @NumberOfPeriodsMinusOne dbo.Accumulator\r\n            DECLARE @DeltaNumberOfPeriods dbo.Accumulator\r\n            DECLARE @BillingPeriod dbo.yyyymm \r\n            DECLARE @FirstPeriodCanceled dbo.yyyymm \r\n            DECLARE @CancelThermFactor dbo.ThermsFactor \r\n            DECLARE @FudgedThermFactor dbo.ThermsFactor \r\n            DECLARE @BillingPeriodRevision dbo.yyyymm \r\n            DECLARE @CancelFromDate dbo.yyyymmdd \r\n            DECLARE @CancelToDate dbo.yyyymmdd \r\n            DECLARE @CalculatedBillingPeriodRevision dbo.yyyymm \r\n            DECLARE @CalculatedFromDate dbo.yyyymmdd \r\n            DECLARE @CalculatedToDate dbo.yyyymmdd \r\n            DECLARE @CancelBilledAmount dbo.BillingAmt \r\n            DECLARE @CancelBilledAmountMonthly dbo.BillingAmt \r\n            DECLARE @CancelBilledAmountMonthlySum dbo.BillingAmt \r\n            DECLARE @CancelBilledAmountAverage dbo.BillingAmt \r\n            DECLARE @CancelBilledAmountRemainder dbo.BillingAmt \r\n            DECLARE @CancelBillingPeriodDays dbo.Accumulator \r\n            DECLARE @CancelBillingPeriodDaysAverage dbo.Accumulator \r\n            DECLARE @CancelBillingPeriodDaysRemainder dbo.Accumulator \r\n            DECLARE @CancelTherms dbo.EnergyUnit \r\n            DECLARE @CancelLastPeriodTherms dbo.EnergyUnit \r\n            DECLARE @CancelThermsAverage dbo.EnergyUnit \r\n            DECLARE @CancelThermsRemainder dbo.EnergyUnit \r\n            DECLARE @CancelCCF dbo.EnergyUnit \r\n            DECLARE @CancelCCFAverage dbo.EnergyUnit \r\n            DECLARE @CancelCCFRemainder dbo.EnergyUnit \r\n            DECLARE @CancelSumAverageCCF dbo.EnergyUnit \r\n            DECLARE @idx INT\r\n            DECLARE @StartingBillingPeriodDaysIncrement INT\r\n            DECLARE @StartingBillingPeriodCCFIncrement INT\r\n            DECLARE @StartingBillingPeriodThermsIncrement INT\r\n            DECLARE @IncrementBillingPeriodDays INT\r\n            DECLARE @IncrementBillingPeriodCCF INT\r\n            DECLARE @IncrementBillingPeriodTherms INT\r\n-- \r\n            DECLARE @CancelBilledAmountMonthlyLastPeriod dbo.BillingAmt\r\n            DECLARE @CancelThermsMonthlyLastPeriod dbo.EnergyUnit \r\n            DECLARE @CancelCCFMonthlyLastPeriod dbo.EnergyUnit \r\n\r\n            DECLARE @ApplyMonthlyPercentage dbo.DiscountPercentage\r\n            DECLARE @CancelThermsMonthlySum dbo.EnergyUnit \r\n            DECLARE @CancelThermsMonthly dbo.EnergyUnit \r\n            DECLARE @CancelCCFMonthly dbo.EnergyUnit \r\n            DECLARE @CancelCCFMonthlySum dbo.EnergyUnit \r\n            DECLARE @TotalGasSpannedBilledPercentage dbo.DiscountPercentage\r\n            DECLARE @BillingCycle dbo.MonthlyBillingCycle\r\n            DECLARE @ConEdUtilityCode dbo.Seqid\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n--SELECT @BillingPeriod = BillingPeriod FROM ApplicationTimeFrame WHERE (CurrentProcessingPeriod = 'Y')\r\n--\r\n--Set @BillingPeriod = '200607'\r\n            SELECT TOP 1\r\n                    @BillingPeriod = BillingPeriod\r\n            FROM ConEd.UploadConEdisonCancellation\r\n--\r\n            SET @ConEdUtilityCode = 9\r\n            SET @BillingCycle = 'M'\r\n--\r\n            DECLARE SpannedGasBillCursor CURSOR\r\n            FOR\r\n                SELECT  UploadConEdisonCancellationTempSummarySpannedSeqid\r\n                FROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n                WHERE   ( DeltaNumberOfPeriods > 1 ) --and @BillingPeriod=@BillingPeriod\r\n--\r\n            OPEN SpannedGasBillCursor;\r\n--\r\n            FETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonCancellationTempSummarySpannedSeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.  UploadConEdisonCancellationTempSummarySpannedSeqid\r\n--\r\n            WHILE @@FETCH_STATUS = 0 \r\n                BEGIN\r\n\t--\r\n                    SELECT  @DeltaNumberOfPeriods = DeltaNumberOfPeriods ,\r\n                            @BillingPeriodRevision = BillingPeriodRevision ,\r\n                            @FirstPeriodCanceled = FirstPeriodCanceled ,\r\n                            @CancelFromDate = CancelFromDate ,\r\n                            @CancelToDate = CancelToDate ,\r\n                            @CancelBilledAmount = CancelBilledAmount ,\r\n                            @CancelCCF = CancelCCF ,\r\n                            @CancelTherms = CancelTherms ,\r\n                            @CancelThermFactor = CancelThermFactor ,\r\n                            @CancelBillingPeriodDays = CancelBillingPeriodDays ,\r\n                            @BillingPeriod = BillingPeriod ,\r\n                            @AccountNumber = AccountNumber ,\r\n                            @FacilityName = FacilityName ,\r\n                            @ServiceAddress = ServiceAddress ,\r\n                            @CancelTariffCode = CancelTariffCode ,\r\n                            @PostingDate = PostingDate\r\n                    FROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n                    WHERE   ( UploadConEdisonCancellationTempSummarySpannedSeqid = @UploadConEdisonCancellationTempSummarySpannedSeqid ) \r\n\t--\r\n--\tSELECT  'Spanned Information',@DeltaNumberOfPeriods, @BillingPeriodRevision,@FirstPeriodCanceled,@CancelFromDate,@CancelFromDate,@BillingPeriodDays,@BilledAmount,@CCF,@Therms,@ThermFactor,@BillingPeriodDays\r\n\t--\r\n                    SELECT  @TotalGasSpannedBilledPercentage = [dbo].[CalculateTotalGasSpannedBilledPercentage](@BillingCycle,\r\n                                                              @DeltaNumberOfPeriods,\r\n                                                              @FirstPeriodCanceled,\r\n                                                              @BillingPeriodRevision)\r\n\t--select @TotalGasSpannedBilledPercentage\r\n\t\r\n\t-- Correction for zero or negative numbers\r\n                    BEGIN\r\n\t\t--\r\n                        SET @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods\r\n                            - 1\r\n\t\t--\r\n                        SET @CancelBillingPeriodDaysAverage = ( @CancelBillingPeriodDays\r\n                                                              / @DeltaNumberOfPeriods )\r\n                        SET @CancelBillingPeriodDaysRemainder = @CancelBillingPeriodDays\r\n                            - ( @CancelBillingPeriodDaysAverage\r\n                                * @DeltaNumberOfPeriods )\r\n                        SET @StartingBillingPeriodDaysIncrement = @DeltaNumberOfPeriods\r\n                            - @CancelBillingPeriodDaysRemainder\r\n\t\t--\r\n\t\t--\tInitialize the counters for the n-1 parses\r\n\t\t--\r\n                        SET @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n                        SET @CalculatedFromDate = @CancelFromDate\r\n                        SET @CalculatedToDate = @CancelToDate\r\n                        SET @idx = 0\r\n                        SET @CancelBilledAmountMonthlySum = 0.00\r\n                        SET @CancelThermsMonthlySum = 0\r\n                        SET @CancelCCFMonthlySum = 0\r\n\t\t--\r\n                        WHILE ( @NumberOfPeriodsMinusOne > @idx ) \r\n                            BEGIN\r\n\t\t\t\t--\r\n                                SELECT  @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled](@CalculatedBillingPeriodRevision,\r\n                                                              @TotalGasSpannedBilledPercentage)\r\n\t\t\t\t--\r\n\t\t\t\t-- Apply the Monthly Percentage to the CCF,Therms and Billed Amount and accumulate the weigthed average units.\r\n\t\t\t\t--\r\n                                SET @CancelBilledAmountMonthly = ROUND(@CancelBilledAmount\r\n                                                              * @ApplyMonthlyPercentage,\r\n                                                              2)\r\n                                SET @CancelBilledAmountMonthlySum = @CancelBilledAmountMonthlySum\r\n                                    + @CancelBilledAmountMonthly\r\n                                SET @CancelThermsMonthly = ROUND(@CancelTherms\r\n                                                              * @ApplyMonthlyPercentage,\r\n                                                              0)\r\n                                SET @CancelThermsMonthlySum = @CancelThermsMonthlySum\r\n                                    + @CancelThermsMonthly\r\n                                SET @CancelCCFMonthly = ROUND(@CancelCCF\r\n                                                              * @ApplyMonthlyPercentage,\r\n                                                              0)\r\n                                SET @CancelCCFMonthlySum = @CancelCCFMonthlySum\r\n                                    + @CancelCCFMonthly\r\n\t\t\t\t--\r\n\t\t\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" as the derived \"Todate\" for the account.\r\n\t\t\t\t--\r\n                                SELECT  @CalculatedToDate = [dbo].[DetermineConEdisonBillingPeriodProjectedToDate](@CalculatedBillingPeriodRevision,\r\n                                                              @CancelTariffCode,\r\n                                                              @ConEdUtilityCode)\r\n\t\t\t\t--\r\n                                SELECT  @Notes = 'Therm factor '\r\n                                        + CAST(@CancelThermFactor AS VARCHAR(6))\r\n                                        + ' for '\r\n                                        + CAST(@DeltaNumberOfPeriods AS VARCHAR(6))\r\n                                        + ' First: ' + @FirstPeriodCanceled\r\n                                        + ' ( ' + @CancelFromDate + ') Last: '\r\n                                        + @BillingPeriodRevision + ' ( '\r\n                                        + @CancelFromDate + '). '\r\n                                        + ' period: '\r\n                                        + @CalculatedBillingPeriodRevision\r\n                                        + ' Month %: '\r\n                                        + CAST(@ApplyMonthlyPercentage AS VARCHAR(10))\r\n                                        + ' - Total %: '\r\n                                        + CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t\t\t\t--\r\n\t\t\t\t--  \r\n\t\t\t\t--\r\n                                INSERT  INTO ConEd.UploadConEdisonCancellationSummary\r\n                                        ( AccountUtilityCompanySeqid ,\r\n                                          OriginalAccountNumber ,\r\n                                          NumberOfCancelTransactions ,\r\n                                          NumberOfTransactions ,\r\n                                          DerivedFromSpannedBill ,\r\n                                          BillingPeriod ,\r\n                                          BillingPeriodRevision ,\r\n                                          FirstCanceledBillingPeriod ,\r\n                                          EstimatedOrActualBilling ,\r\n                                          InitialCancelFromDate ,\r\n                                          CurrentBillingToDate ,\r\n                                          NumberOfBillingPeriods ,\r\n                                          TotalBillingDaysRebilled ,\r\n                                          TotalRebilledAmount ,\r\n                                          TotalCanceledAmount ,\r\n                                          PriorRevisedBilledAmount ,\r\n                                          RevisedBilledAmount ,\r\n                                          CanceledBilledAmount ,\r\n                                          AverageRebillCostOfGasCharge ,\r\n                                          AverageRebillThermsFactor ,\r\n                                          BillingDays ,\r\n                                          FromDate ,\r\n                                          ToDate ,\r\n                                          BilledAmount ,\r\n                                          BillingAction ,\r\n                                          ProcessedInTheCurrentPeriod ,\r\n                                          GasRateCode ,\r\n                                          DeliveryChargeAmount ,\r\n                                          TotalCCF ,\r\n                                          TotalTherms ,\r\n                                          ThermsFactor ,\r\n                                          CancelFromDate ,\r\n                                          CancelToDate ,\r\n                                          CancelDeliveryChargeAmount ,\r\n                                          CancelTotalCCF ,\r\n                                          CancelTotalTherms ,\r\n                                          CancelThermsFactor ,\r\n                                          CancelBillingDays ,\r\n                                          Notes ,\r\n                                          SpannedBillingPeriodRevision ,\r\n                                          SpannedFirstCanceledBillingPeriod ,\r\n                                          SpannedBilledAmount ,\r\n                                          SpannedCCF ,\r\n                                          SpannedThermFactor ,\r\n                                          SpannedTherm ,\r\n                                          SpannedMonthlyPercentage ,\r\n                                          SpannedTotalPercentage ,\r\n                                          BillingDate ,\r\n                                          ProcessEffectiveDate ,\r\n                                          FacilityName ,\r\n                                          ServiceAddress\r\n                                        )\r\n                                        SELECT  '9' ,\r\n                                                @AccountNumber ,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,  \r\n                                                1 , --  NumberOfCancelTransactions\r\n                                                1 , --  NumberOfTransactions\r\n                                                'Y' ,  -- DerivedFromSpannedBill = 'Y'\r\n                                                BillingPeriod ,\r\n                                                @CalculatedBillingPeriodRevision , -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n                                                @CalculatedBillingPeriodRevision , -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n                                                'ACT' ,  -- EstimatedOrActualBilling needs to be upodated\r\n                                                @CancelFromDate ,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n                                                @CancelToDate , --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n                                                [dbo].[CalculateDeltaBillingPeriods]([dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedFromDate,\r\n                                                              @CancelTariffCode,\r\n                                                              @ConEdUtilityCode),\r\n                                                              @BillingCycle),\r\n                                                              [dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedToDate,\r\n                                                              @CancelTariffCode,\r\n                                                              @ConEdUtilityCode),\r\n                                                              @BillingCycle) , --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n                                                [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) ,-- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n                                                0 , --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n                                                @CancelBilledAmountMonthly , -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n                                                0 AS PriorRevisedBilledAmount ,\r\n                                                0 , --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n                                                0 , -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n                                                0 AS AverageRebillCostOfGasCharge ,\r\n                                                1.00 AS AverageRebillThermsFactor ,\r\n                                                0 ,-- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n                                                NULL ,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n                                                NULL , -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n                                                @CancelBilledAmountMonthly , --  (IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) as  - IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0)) as BilledAmount,\r\n                                                CASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision\r\n                                                     THEN 'O'\r\n                                                     ELSE 'A'\r\n                                                END , -- as BillingAction, \r\n                                                'N' AS ProcessedInTheCurrentPeriod ,\r\n                                                @CancelTariffCode ,\r\n                                                @CancelBilledAmountMonthly , --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n                                                0 , --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n                                                0 , --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n                                                1.000 , --  IsNull(UploadConEdisonAccountTempSummarySPanned.ThermFactor,1.0) AS ThermsFactor,\r\n                                                @CalculatedFromDate , --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n                                                @CalculatedToDate , --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n                                                @CancelBilledAmountMonthly , --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n                                                @CancelCCFMonthly , --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n                                                @CancelThermsMonthly , --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n                                                CASE @CancelCCFMonthly\r\n                                                  WHEN 0 THEN 1.0000\r\n                                                  ELSE ROUND(@CancelThermsMonthly\r\n                                                             * 1.0\r\n                                                             / @CancelCCFMonthly,\r\n                                                             4)\r\n                                                END , --  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n                                                [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) , -- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n                                                @Notes ,\r\n                                                @BillingPeriodRevision ,\r\n                                                @FirstPeriodCanceled ,\r\n                                                @CancelBilledAmount ,\r\n                                                @CancelCCF ,\r\n                                                @CancelThermFactor ,\r\n                                                @CancelTherms ,\r\n                                                @ApplyMonthlyPercentage ,\r\n                                                @TotalGasSpannedBilledPercentage ,\r\n                                                [dbo].ConvertDateToYYYYMMDD(@PostingDate) ,\r\n                                                [dbo].ConvertDateToYYYYMMDD(GETDATE()) ,\r\n                                                FacilityName ,\r\n                                                ServiceAddress\r\n                                        FROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n                                        WHERE   ( UploadConEdisonCancellationTempSummarySpannedSeqid = @UploadConEdisonCancellationTempSummarySpannedSeqid ) \r\n\r\n\t\t\t\t--\r\n                                SET @CancelSumAverageCCF = @CancelSumAverageCCF\r\n                                    + @CancelCCFAverage \t  \r\n                                SET @idx = @idx + 1\r\n\t\t\t\t--\r\n\t\t\t\t--\tCalculate the next the Revised Billing Period row.\r\n                                SELECT  @CalculatedBillingPeriodRevision = [dbo].[CalculateNextBillingPeriod](@CalculatedBillingPeriodRevision,\r\n                                                              @BillingCycle)\r\n\t\t\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n                                SELECT  @CalculatedFromDate = [dbo].[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision,\r\n                                                              @CancelTariffCode,\r\n                                                              @ConEdUtilityCode)\r\n\t\t\t\t--\r\n\t\t\t\t--\tProcess the next Revised Billing Period row\r\n\t\t\t\t--\r\n                            END\r\n\t\t--\r\n\t\t--\tFinish up the last period's processing\r\n\t\t--\r\n\t\t--\tUse the (Nth -1) periods @CalculatedToDate as the \"FromDate\" and the acutal \"ToDate\" from the spanned record as the \"ToDate\"\r\n\t\t--\r\n                        SELECT  @CalculatedFromDate = @CalculatedToDate\r\n                        SELECT  @CalculatedToDate = @CancelToDate\r\n\t\t--\r\n\t\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\t\t--\r\n                        SELECT  @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled](@CalculatedBillingPeriodRevision,\r\n                                                              @TotalGasSpannedBilledPercentage)\r\n\t\t--\r\n\t\t--\tDerive the net changes to avoid rounding errors\r\n\t\t--\r\n                        SET @CancelBilledAmountMonthlyLastPeriod = @CancelBilledAmount\r\n                            - @CancelBilledAmountMonthlySum\r\n                        SET @CancelThermsMonthlyLastPeriod = @CancelTherms\r\n                            - @CancelThermsMonthlySum\r\n                        SET @CancelCCFMonthlyLastPeriod = @CancelCCF\r\n                            - @CancelCCFMonthlySum\r\n\r\n                    END\r\n\t--\r\n                    SELECT  @Notes = 'Therm factor '\r\n                            + CAST(@CancelThermFactor AS VARCHAR(6)) + ' for '\r\n                            + CAST(@DeltaNumberOfPeriods AS VARCHAR(6))\r\n                            + ' First: ' + @FirstPeriodCanceled + ' ( '\r\n                            + @CancelFromDate + ') Last: '\r\n                            + @BillingPeriodRevision + ' ( ' + @CancelFromDate\r\n                            + '). ' + ' period: '\r\n                            + @CalculatedBillingPeriodRevision + ' Month %: '\r\n                            + CAST(@ApplyMonthlyPercentage AS VARCHAR(10))\r\n                            + ' - Total %: '\r\n                            + CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t--\r\n                    INSERT  INTO ConEd.UploadConEdisonCancellationSummary\r\n                            ( AccountUtilityCompanySeqid ,\r\n                              OriginalAccountNumber ,\r\n                              NumberOfCancelTransactions ,\r\n                              NumberOfTransactions ,\r\n                              DerivedFromSpannedBill ,\r\n                              BillingPeriod ,\r\n                              BillingPeriodRevision ,\r\n                              FirstCanceledBillingPeriod ,\r\n                              EstimatedOrActualBilling ,\r\n                              InitialCancelFromDate ,\r\n                              CurrentBillingToDate ,\r\n                              NumberOfBillingPeriods ,\r\n                              TotalBillingDaysRebilled ,\r\n                              TotalRebilledAmount ,\r\n                              TotalCanceledAmount ,\r\n                              PriorRevisedBilledAmount ,\r\n                              RevisedBilledAmount ,\r\n                              CanceledBilledAmount ,\r\n                              AverageRebillCostOfGasCharge ,\r\n                              AverageRebillThermsFactor ,\r\n                              BillingDays ,\r\n                              FromDate ,\r\n                              ToDate ,\r\n                              BilledAmount ,\r\n                              BillingAction ,\r\n                              ProcessedInTheCurrentPeriod ,\r\n                              GasRateCode ,\r\n                              DeliveryChargeAmount ,\r\n                              TotalCCF ,\r\n                              TotalTherms ,\r\n                              ThermsFactor ,\r\n                              CancelFromDate ,\r\n                              CancelToDate ,\r\n                              CancelDeliveryChargeAmount ,\r\n                              CancelTotalCCF ,\r\n                              CancelTotalTherms ,\r\n                              CancelThermsFactor ,\r\n                              CancelBillingDays ,\r\n                              Notes ,\r\n                              SpannedBillingPeriodRevision ,\r\n                              SpannedFirstCanceledBillingPeriod ,\r\n                              SpannedBilledAmount ,\r\n                              SpannedCCF ,\r\n                              SpannedThermFactor ,\r\n                              SpannedTherm ,\r\n                              SpannedMonthlyPercentage ,\r\n                              SpannedTotalPercentage ,\r\n                              BillingDate ,\r\n                              ProcessEffectiveDate ,\r\n                              FacilityName ,\r\n                              ServiceAddress\r\n                            )\r\n                            SELECT  '9' ,\r\n                                    @AccountNumber ,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,\r\n                                    1 , --  NumberOfCancelTransactions\r\n                                    1 , --  NumberOfTransactions\r\n                                    'Y' ,  -- DerivedFromSpannedBill = 'Y'\r\n                                    BillingPeriod ,\r\n                                    @CalculatedBillingPeriodRevision , -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n                                    @CalculatedBillingPeriodRevision , -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n                                    'ACT' ,  -- EstimatedOrActualBilling needs to be upodated\r\n                                    @CancelFromDate ,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n                                    @CancelToDate , --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n                                    [dbo].[CalculateDeltaBillingPeriods]([dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedFromDate,\r\n                                                              @CancelTariffCode,\r\n                                                              @ConEdUtilityCode),\r\n                                                              @BillingCycle),\r\n                                                              [dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedToDate,\r\n                                                              @CancelTariffCode,\r\n                                                              @ConEdUtilityCode),\r\n                                                              @BillingCycle) , --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n                                    [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) , -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n                                    0 , --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n                                    @CancelBilledAmountMonthlyLastPeriod , -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n                                    0 AS PriorRevisedBilledAmount ,\r\n                                    0 , --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n                                    0 , -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n                                    0 AS AverageRebillCostOfGasCharge ,\r\n                                    1.00 AS AverageRebillThermsFactor ,\r\n                                    0 , --IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n                                    NULL ,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n                                    NULL , -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n                                    @CancelBilledAmountMonthlyLastPeriod , --  (IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) as  - IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0)) as BilledAmount,\r\n                                    CASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision\r\n                                         THEN 'O'\r\n                                         ELSE 'A'\r\n                                    END , -- 'O' as BillingAction, \r\n                                    'N' AS ProcessedInTheCurrentPeriod ,\r\n                                    @CancelTariffCode ,\r\n                                    @CancelBilledAmountMonthlyLastPeriod , --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n                                    0 , --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n                                    0 , --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n                                    1.0 ,\r\n                                    @CalculatedFromDate , --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n                                    @CalculatedToDate , --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n                                    0 , --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n                                    @CancelCCFMonthlyLastPeriod , --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n                                    @CancelThermsMonthlyLastPeriod , --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n                                    CASE @CancelCCFMonthlyLastPeriod\r\n                                      WHEN 0 THEN 1.0000\r\n                                      ELSE ROUND(@CancelThermsMonthlyLastPeriod\r\n                                                 * 1.0\r\n                                                 / @CancelCCFMonthlyLastPeriod,\r\n                                                 4)\r\n                                    END ,--  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n                                    [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) ,-- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n                                    @Notes ,\r\n                                    @BillingPeriodRevision ,\r\n                                    @FirstPeriodCanceled ,\r\n                                    @CancelBilledAmount ,\r\n                                    @CancelCCF ,\r\n                                    @CancelThermFactor ,\r\n                                    @CancelTherms ,\r\n                                    @ApplyMonthlyPercentage ,\r\n                                    @TotalGasSpannedBilledPercentage ,\r\n                                    [dbo].ConvertDateToYYYYMMDD(@PostingDate) ,\r\n                                    [dbo].ConvertDateToYYYYMMDD(GETDATE()) ,\r\n                                    FacilityName ,\r\n                                    ServiceAddress\r\n                            FROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n                            WHERE   ( UploadConEdisonCancellationTempSummarySpannedSeqid = @UploadConEdisonCancellationTempSummarySpannedSeqid ) \r\n\r\n                    FETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonCancellationTempSummarySpannedSeqid\r\n                END\r\n\r\n            CLOSE SpannedGasBillCursor;\r\n            DEALLOCATE SpannedGasBillCursor;\r\n\r\n\r\n\t\r\n        END  -- 1 ends\r\n\r\n  \r\n  /*\r\n  2) Make sure that the max BillingPeriodRevision is less than or equal to the current BillingPeriod\r\n  */  \r\n        BEGIN\r\n  \r\n            UPDATE  ConEd.UploadConEdisonCancellationSummary\r\n            SET     BillingPeriodRevision = CASE WHEN BillingPeriodRevision > BillingPeriod\r\n                                                 THEN BillingPeriod\r\n                                                 ELSE BillingPeriodRevision\r\n                                            END\r\n            WHERE   ( BillingPeriod < BillingPeriodRevision )\r\n        END -- 2 ends\r\n  \r\n  /*\r\n  3) Update record with cancellation information\r\n  */\r\n        BEGIN\r\n            UPDATE  UploadAdjustmentGas\r\n            SET     UploadAdjustmentGas.[NumberOfTransactions] = UploadAdjustmentGas.[NumberOfTransactions]\r\n                    + CancelSummary.[NumberOfTransactions] ,\r\n                    UploadAdjustmentGas.[NumberOfCancelTransactions] = CancelSummary.[NumberOfTransactions] ,\r\n                    UploadAdjustmentGas.[TotalCanceledAmount] = CancelSummary.[TotalCanceledAmount] ,\r\n                    UploadAdjustmentGas.[CancelFromDate] = CancelSummary.[CancelFromDate] ,\r\n                    UploadAdjustmentGas.[CancelToDate] = CancelSummary.[CancelToDate] ,\r\n                    UploadAdjustmentGas.[CancelTotalCCF] = CancelSummary.[CancelTotalCCF] ,\r\n                    UploadAdjustmentGas.[CancelTotalTherms] = CancelSummary.[CancelTotalTherms] ,\r\n                    UploadAdjustmentGas.[CancelThermsFactor] = CancelSummary.[CancelThermsFactor] ,\r\n                    UploadAdjustmentGas.[CancelBillingDays] = CancelSummary.[CancelBillingDays] ,\r\n                    UploadAdjustmentGas.[Notes] = CAST(( CASE UploadAdjustmentGas.[Notes]\r\n                                                           WHEN NULL THEN ''\r\n                                                           ELSE 'Rebill: '\r\n                                                              + UploadAdjustmentGas.[Notes]\r\n                                                              + ' '\r\n                                                         END )\r\n                    + ( CASE CancelSummary.[Notes]\r\n                          WHEN NULL THEN ''\r\n                          ELSE 'Cancel: ' + CancelSummary.[Notes]\r\n                        END ) AS VARCHAR(300))\r\n            FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UploadAdjustmentGas\r\n                    INNER JOIN ( SELECT UploadConEdisonCancellationSummary.OriginalAccountNumber ,\r\n                                        UploadConEdisonCancellationSummary.BillingPeriodRevision ,\r\n                                        COUNT(*) AS NumberOfTransactions ,        -- ,[NumberOfTransactions] \r\n                                        0 AS NumberOfRebilledTransactions , -- ,[NumberOfRebillTransactions]             \r\n                                        COUNT(*) AS NumberOfCancelTransactions , -- ,[NumberOfCancelTransactions]\r\n                                        SUM(TotalCanceledAmount) AS TotalCanceledAmount ,\r\n                                        MIN(UploadConEdisonCancellationSummary.CancelFromDate) AS CancelFromDate ,     --               ,<CancelFromDate, yyyymmdd,>\r\n                                        MAX(UploadConEdisonCancellationSummary.CancelToDate) AS CancelToDate ,     --               ,<CancelToDate, yyyymmdd,>\r\n                                        SUM(UploadConEdisonCancellationSummary.CancelTotalCCF) AS CancelTotalCCF ,     --               ,<CancelTotalCCF, EnergyUnit,>\r\n                                        SUM(UploadConEdisonCancellationSummary.CancelTotalTherms) CancelTotalTherms ,     --               ,<CancelTotalTherms, EnergyUnit,>\r\n                                        MIN(UploadConEdisonCancellationSummary.CancelThermsFactor) CancelThermsFactor ,     --               ,<CancelThermsFactor, ThermsFactor,>\r\n                                        dbo.CalculateNumberOfBillingDays(MIN(UploadConEdisonCancellationSummary.CancelFromDate),\r\n                                                              MAX(UploadConEdisonCancellationSummary.CancelToDate)) AS CancelBillingDays ,   --               ,<CancelBillingDays, int,>\r\n                                        MAX(UploadConEdisonCancellationSummary.Notes) AS notes\r\n                                 FROM ConEd.UploadConEdisonCancellationSummary\r\n                                 GROUP BY UploadConEdisonCancellationSummary.OriginalAccountNumber ,\r\n                                        UploadConEdisonCancellationSummary.BillingPeriodRevision\r\n                               ) AS CancelSummary ON UploadAdjustmentGas.OriginalAccountNumber = CancelSummary.OriginalAccountNumber\r\n                                                     AND UploadAdjustmentGas.BillingPeriodRevision = cancelSummary.BillingPeriodRevision\r\n        END -- end 3\r\n\r\n\t/*\r\n\t4) Insert cancellation without rebill\r\n\t*/\r\n        BEGIN\r\n            INSERT  INTO ConEd.[UploadConEdisonAccountBillingAdjustmentGas]\r\n                    ( [AdjustedAccount] ,\r\n                      [AccountUtilityCompanySeqid] ,\r\n                      [NumberOfTransactions] ,\r\n                      [NumberOfRebillTransactions] ,\r\n                      [NumberOfCancelTransactions] ,\r\n                      [OriginalAccountNumber] ,\r\n                      [BillingPeriod] ,\r\n                      [BillingPeriodRevision] ,\r\n                      [FirstCanceledBillingPeriod] ,\r\n                      [EstimatedOrActualBilling] ,\r\n                      [InitialCancelFromDate] ,\r\n                      [CurrentBillingToDate] ,\r\n                      [NumberOfBillingPeriods] ,\r\n                      [TotalBillingDaysRebilled] ,\r\n                      [TotalRebilledAmount] ,\r\n                      [TotalCanceledAmount] ,\r\n                      [AverageRebillCostOfGasCharge] ,\r\n                      [AverageRebillThermsFactor] ,\r\n                      [BillingDays] ,\r\n                      [BillingDate] ,\r\n                      [ToDate] ,\r\n                      [FromDate] ,\r\n                      [BillingAction] ,\r\n                      [ProcessedInTheCurrentPeriod] ,\r\n                      [GasRateCode] ,\r\n                      [TotalCCF] ,\r\n                      [TotalTherms] ,\r\n                      [ThermsFactor] ,\r\n                      [CancelFromDate] ,\r\n                      [CancelToDate] ,\r\n                      [CancelTotalCCF] ,\r\n                      [CancelTotalTherms] ,\r\n                      [CancelThermsFactor] ,\r\n                      [CancelBillingDays] ,\r\n                      [ProcessEffectiveDate] ,\r\n                      [DerivedFromSpannedBill] ,\r\n                      [SpannedBillingPeriodRevision] ,\r\n                      [SpannedFirstCanceledBillingPeriod] ,\r\n                      [SpannedBilledAmount] ,\r\n                      [SpannedCCF] ,\r\n                      [SpannedThermFactor] ,\r\n                      [SpannedTherm] ,\r\n                      [SpannedMonthlyPercentage] ,\r\n                      [SpannedTotalPercentage] ,\r\n                      [Notes] ,\r\n                      [AuthenticatedUserID] ,\r\n                      [DateAdded] ,\r\n                      [LastUpdate] ,\r\n                      [FacilityName] ,\r\n                      [ServiceAddress]\r\n\r\n               \r\n                    )\r\n                    SELECT  NULL ,     --               (<AdjustedAccount, seqid,>\r\n                            9 ,     --               ,<AccountUtilityCompanySeqid, seqid,>\r\n                            COUNT(*) ,        -- ,[NumberOfTransactions] \r\n                            0 , -- ,[NumberOfRebillTransactions]                  \r\n                            COUNT(*) , -- ,[NumberOfCancelTransactions]      \r\n                            UploadConEdisonCancellationSummary.OriginalAccountNumber ,     --                 ,<OriginalAccountNumber, acctnum,>\r\n                            MAX(UploadConEdisonCancellationSummary.BillingPeriod) ,      --               ,<BillingPeriod, BillingPeriod,>    \r\n                            UploadConEdisonCancellationSummary.BillingPeriodRevision ,   --               ,<BillingPeriodRevision, BillingPeriodRevision,>\r\n                            [dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(MIN(UploadConEdisonCancellationSummary.CancelFromDate),\r\n                                                              MIN(UploadConEdisonCancellationSummary.GasRateCode),\r\n                                                              9), 'M') ,     --               ,<FirstCanceledBillingPeriod, yyyymm,>\r\n                            [dbo].[DetermineConEdisonActualOrEstimatedBilling](UploadConEdisonCancellationSummary.OriginalAccountNumber,\r\n                                                              UploadConEdisonCancellationSummary.BillingPeriodRevision) ,      --               ,<EstimatedOrActualBilling, varchar(3),>\r\n                            MIN(UploadConEdisonCancellationSummary.InitialCancelFromDate) ,      --               ,<InitialCancelFromDate, yyyymmdd,>\r\n                            MAX(UploadConEdisonCancellationSummary.CurrentBillingToDate) ,      --               ,<CurrentBillingToDate, yyyymmdd,>\r\n                            [dbo].[CalculateDeltaBillingPeriods]([dbo].[CalculateNextBillingPeriod]([dbo].DetermineConEdisonBillingPeriodProjected(MIN(UploadConEdisonCancellationSummary.CancelFromDate),\r\n                                                              MIN(UploadConEdisonCancellationSummary.GasRateCode),\r\n                                                              9), 'M'),\r\n                                                              [dbo].DetermineConEdisonBillingPeriodProjected(MAX(UploadConEdisonCancellationSummary.CancelToDate),\r\n                                                              MAX(UploadConEdisonCancellationSummary.GasRateCode),\r\n                                                              9), 'M') ,    --               ,<NumberOfBillingPeriods, int,>     \r\n                            dbo.CalculateNumberOfBillingDays(MIN(UploadConEdisonCancellationSummary.FromDate),\r\n                                                             MAX(UploadConEdisonCancellationSummary.ToDate)) ,     --                 ,<TotalBillingDaysRebilled, int,>\r\n                            SUM(UploadConEdisonCancellationSummary.TotalRebilledAmount) ,     --                 ,<TotalRebilledAmount, money,>\r\n                            SUM(UploadConEdisonCancellationSummary.TotalCanceledAmount) ,     --                 ,<TotalCanceledAmount, money,>\r\n                            AVG(UploadConEdisonCancellationSummary.CostOfGasCharge) ,     --                 ,<AverageRebillCostOfGasCharge, money,>\r\n                            AVG(UploadConEdisonCancellationSummary.ThermsFactor) ,     --               ,<AverageRebillThermsFactor, ThermsFactor,>\r\n                            0 ,     --               ,<BillingDays, int,>\r\n                            MAX(UploadConEdisonCancellationSummary.BillingDate) ,     --               ,<BillingDate, int,>\r\n                            MAX(UploadConEdisonCancellationSummary.ToDate) ,     --               ,<ToDate, yyyymmdd,>\r\n                            MIN(UploadConEdisonCancellationSummary.FromDate) ,     --               ,<FromDate, yyyymmdd,>\r\n                            CASE WHEN MAX(UploadConEdisonCancellationSummary.BillingPeriod) = MIN(UploadConEdisonCancellationSummary.BillingPeriodRevision)\r\n                                 THEN 'O'\r\n                                 ELSE 'A'\r\n                            END ,     --                ,<BillingAction, BillingAction,>\r\n                            'N' ,     --      !!!         ,<ProcessedInTheCurrentPeriod, yesno,>\r\n                            MAX(UploadConEdisonCancellationSummary.GasRateCode) ,  -- PAH      ,<GasRateCode, varchar(3),>\r\n                            SUM(UploadConEdisonCancellationSummary.TotalCCF) ,     --               ,<TotalCCF, EnergyUnit,>\r\n                            SUM(UploadConEdisonCancellationSummary.TotalTherms) ,     --               ,<TotalTherms, EnergyUnit,>\r\n                            MIN(UploadConEdisonCancellationSummary.ThermsFactor) ,     --               ,<ThermsFactor, ThermsFactor,>\r\n                            MIN(UploadConEdisonCancellationSummary.CancelFromDate) ,     --                 ,<CancelFromDate, yyyymmdd,>\r\n                            MAX(UploadConEdisonCancellationSummary.CancelToDate) ,     --               ,<CancelToDate, yyyymmdd,>\r\n                            SUM(UploadConEdisonCancellationSummary.CancelTotalCCF) ,     --                 ,<CancelTotalCCF, EnergyUnit,>\r\n                            SUM(UploadConEdisonCancellationSummary.CancelTotalTherms) ,     --                 ,<CancelTotalTherms, EnergyUnit,>\r\n                            MIN(UploadConEdisonCancellationSummary.CancelThermsFactor) ,     --                 ,<CancelThermsFactor, ThermsFactor,>\r\n                            dbo.CalculateNumberOfBillingDays(MIN(UploadConEdisonCancellationSummary.CancelFromDate),\r\n                                                             MAX(UploadConEdisonCancellationSummary.CancelToDate)) ,     --               ,<CancelBillingDays, int,>\r\n                            [dbo].ConvertDateToYYYYMMDD(GETDATE()) ,  --               ,<ProcessEffectiveDate, varchar(8),>\r\n                            MAX(UploadConEdisonCancellationSummary.DerivedFromSpannedBill) ,\r\n                            MAX(UploadConEdisonCancellationSummary.SpannedBillingPeriodRevision) ,\r\n                            MAX(UploadConEdisonCancellationSummary.SpannedFirstCanceledBillingPeriod) ,\r\n                            CASE WHEN MAX(UploadConEdisonCancellationSummary.SpannedBilledAmount) > 0\r\n                                 THEN MAX(UploadConEdisonCancellationSummary.SpannedBilledAmount)\r\n                                 ELSE MIN(UploadConEdisonCancellationSummary.SpannedBilledAmount)\r\n                            END AS SpannedBilledAmount ,\r\n                            CASE WHEN MAX(UploadConEdisonCancellationSummary.SpannedCCF) > 0\r\n                                 THEN MAX(UploadConEdisonCancellationSummary.SpannedCCF)\r\n                                 ELSE MIN(UploadConEdisonCancellationSummary.SpannedCCF)\r\n                            END AS SpannedCCF ,\r\n                            MAX(UploadConEdisonCancellationSummary.SpannedThermFactor) ,\r\n                            CASE WHEN MAX(UploadConEdisonCancellationSummary.SpannedTherm) > 0\r\n                                 THEN MAX(UploadConEdisonCancellationSummary.SpannedTherm)\r\n                                 ELSE MIN(UploadConEdisonCancellationSummary.SpannedTherm)\r\n                            END AS SpannedTherm ,\r\n                            MIN(UploadConEdisonCancellationSummary.SpannedMonthlyPercentage) ,\r\n                            MIN(UploadConEdisonCancellationSummary.SpannedTotalPercentage) ,\r\n                            MAX(UploadConEdisonCancellationSummary.Notes) ,\r\n                            MAX(UploadConEdisonCancellationSummary.AuthenticatedUserID) ,\r\n                            GETDATE() ,\r\n                            GETDATE() ,\r\n                            MIN(FacilityName) ,\r\n                            MIN(ServiceAddress)\r\n                    FROM ConEd.UploadConEdisonCancellationSummary\r\n                    WHERE   UploadConEdisonCancellationSummarySeqid NOT IN (\r\n                            SELECT  UploadConEdisonCancellationSummarySeqid\r\n                            FROM ConEd.UploadConEdisonCancellationSummary\r\n                                   AS cancelSum\r\n                                    INNER JOIN ConEd.[UploadConEdisonAccountBillingAdjustmentGas]\r\n                                   AS adj ON cancelSum.BillingPeriodRevision = adj.BillingPeriodRevision\r\n                                              AND cancelSum.OriginalAccountNumber = adj.OriginalAccountNumber )\r\n                    GROUP BY UploadConEdisonCancellationSummary.OriginalAccountNumber ,\r\n                            UploadConEdisonCancellationSummary.BillingPeriodRevision    \r\n  \r\n        END -- 4 ends  \r\n\r\n    END",
      "created": "2025-06-10 21:41:27.087000",
      "last_altered": "2025-06-10 21:41:27.087000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Upload_9_ProcessSpannedCancellation",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Upload_9_ProcessSpannedCancellation` is designed to process spanned cancellations for ConEdison utility accounts. It performs several tasks, including inserting spanned data into a summary table, ensuring billing period revisions are correct, updating records with cancellation information, and inserting cancellations without rebills. The procedure involves complex calculations and data manipulations to handle billing adjustments and cancellations over multiple periods.\n\n#### 2. Complexity Level: High\n\nThis stored procedure is complex due to the following reasons:\n- It involves multiple steps with intricate calculations and logic.\n- It uses cursors for row-by-row processing, which adds complexity.\n- It interacts with several tables and performs multiple inserts and updates.\n- It involves complex business logic for calculating billing periods, percentages, and adjustments.\n\n#### 3. Input Parameters\n\nThe stored procedure does not take any input parameters. It relies on data from existing tables within the database to perform its operations.\n\n#### 4. Business Logic and Workflow\n\n1. **Insert Spanned Data**: \n   - The procedure begins by declaring several variables to store data from the `UploadConEdisonCancellationTempSummarySpanned` table.\n   - It uses a cursor to iterate over records where `DeltaNumberOfPeriods` is greater than 1.\n   - For each record, it calculates various billing and cancellation metrics, such as monthly percentages and billing period revisions.\n   - It inserts calculated data into the `UploadConEdisonCancellationSummary` table.\n\n2. **Ensure Correct Billing Period Revisions**:\n   - It updates the `UploadConEdisonCancellationSummary` table to ensure that `BillingPeriodRevision` does not exceed the current `BillingPeriod`.\n\n3. **Update Records with Cancellation Information**:\n   - It updates the `UploadAdjustmentGas` table with aggregated cancellation data from the `UploadConEdisonCancellationSummary` table.\n   - This includes updating transaction counts, cancellation amounts, and notes.\n\n4. **Insert Cancellations Without Rebill**:\n   - It inserts new records into the `UploadConEdisonAccountBillingAdjustmentGas` table for cancellations that have not been rebilled.\n   - It aggregates data from the `UploadConEdisonCancellationSummary` table for this purpose.\n\n#### 5. Performance Considerations\n\n- **Cursor Usage**: The use of cursors can lead to performance issues, especially with large datasets, as they process rows one at a time.\n- **Complex Calculations**: The procedure performs numerous calculations and function calls, which can be resource-intensive.\n- **Table Scans**: The lack of indexes on the tables involved could lead to full table scans, impacting performance.\n- **Concurrency**: The procedure involves multiple updates and inserts, which could lead to locking and blocking issues in a high-concurrency environment.\n\n#### 6. Potential Issues or Risks\n\n- **Data Integrity**: The procedure performs complex calculations and updates, which could lead to data integrity issues if not carefully managed.\n- **Error Handling**: There is no explicit error handling within the procedure, which could lead to unhandled exceptions and data inconsistencies.\n- **Scalability**: The use of cursors and complex logic may not scale well with large datasets, leading to performance degradation.\n- **Maintenance**: The complexity of the procedure makes it difficult to maintain and understand, increasing the risk of errors during modifications or enhancements.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 9414,
      "api_response_id": "chatcmpl-Byf1LRGLC3F45gNKZeFnAeVZMlyqN"
    },
    "analysis_timestamp": "2025-07-29 09:51:35"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Validation_AccountRecordsWithIncorrectBillingPeriodRevision",
      "definition": "CREATE PROCEDURE [ConEd].[usp_Validation_AccountRecordsWithIncorrectBillingPeriodRevision]\t\r\nAS\r\nBEGIN\t\r\n\tDECLARE @BillingPeriod AS BillingPeriod, @errMessage AS VARCHAR(MAX);\r\n\r\n\tSELECT @BillingPeriod = BillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\t\r\n\tIF(EXISTS(SELECT UploadConEdisonAccountSeqid FROM ConEd.UploadConEdisonAccount\r\n\t\tWHERE BillingPeriodRevision IS NULL OR BillingPeriodRevision > @BillingPeriod OR FirstPeriodCanceled IS NULL))\r\n\tBEGIN\t\t\r\n\t\tSET @errMessage = 'There are account with incorrect billing period information.';\r\n\t\tRAISERROR(@errMessage, 12, 1);\r\n\tEND;\t\r\n\t\r\n\tIF(EXISTS(SELECT ExchangeDataSeqid FROM Common.ExchangeData\r\n\t\tWHERE IsProcessed = 'N' AND Exclude = 'N' AND BillingPeriod = @BillingPeriod AND AccountBillingGroupSeqid = 2))\r\n\tBEGIN\t\t\r\n\t\tSET @errMessage = 'There is/are some ExchangeData thats is not processed. Please contact IT.';\r\n\t\tRAISERROR(@errMessage, 12, 1);\r\n\tEND;\r\nEND;",
      "created": "2025-06-10 21:41:27.097000",
      "last_altered": "2025-06-10 21:41:27.097000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Validation_AccountRecordsWithIncorrectBillingPeriodRevision",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Validation_AccountRecordsWithIncorrectBillingPeriodRevision` is designed to validate account records and exchange data for a specific billing period within a SQL Server database. It checks for discrepancies in billing period revisions and unprocessed exchange data, raising errors if any issues are found. This procedure is part of the `ConEd` schema and interacts with tables related to billing and data exchange processes.\n\n#### 2. Complexity Level: Medium\nThe complexity level of this stored procedure is medium. It involves multiple conditional checks and interacts with different tables to validate data integrity. The logic is straightforward but requires understanding of the business rules related to billing periods and data processing.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It relies on internal queries to fetch the necessary data for validation.\n\n#### 4. Business Logic and Workflow\n- **Billing Period Retrieval**: The procedure starts by declaring a variable `@BillingPeriod` to store the current billing period. It retrieves this value from the `Billing.ApplicationTimeFrame` table where `CurrentProcessingPeriod` is marked as 'Y'.\n  \n- **Validation of Account Records**: \n  - The procedure checks the `ConEd.UploadConEdisonAccount` table for records where:\n    - `BillingPeriodRevision` is either `NULL` or greater than the current billing period.\n    - `FirstPeriodCanceled` is `NULL`.\n  - If such records exist, it sets an error message indicating incorrect billing period information and raises an error with severity level 12.\n\n- **Validation of Exchange Data**:\n  - It checks the `Common.ExchangeData` table for records that:\n    - Are not processed (`IsProcessed = 'N'`).\n    - Are not excluded (`Exclude = 'N'`).\n    - Belong to the current billing period.\n    - Have an `AccountBillingGroupSeqid` of 2.\n  - If such records exist, it sets an error message indicating unprocessed exchange data and raises an error with severity level 12.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the columns used in the `WHERE` clauses, such as `BillingPeriodRevision`, `FirstPeriodCanceled`, `IsProcessed`, `Exclude`, and `BillingPeriod`, are indexed to improve query performance.\n- **Concurrency**: The procedure reads from tables that might be frequently updated. Consider the impact on performance and potential locking issues.\n- **Error Handling**: The use of `RAISERROR` with severity level 12 indicates a user-defined error that does not terminate the procedure but requires attention. Ensure that error handling mechanisms are in place to manage these errors effectively.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: If the `Billing.ApplicationTimeFrame` table does not have a row with `CurrentProcessingPeriod = 'Y'`, the procedure will fail to retrieve the current billing period, leading to potential errors.\n- **Error Messaging**: The error messages are generic and may not provide enough detail for troubleshooting. Consider enhancing the messages with more specific information.\n- **Scalability**: As the volume of data grows, the performance of the `EXISTS` checks may degrade if not properly indexed.\n- **Concurrency and Locking**: The procedure may cause locking issues if executed concurrently with other operations that modify the same tables. Consider using appropriate isolation levels to mitigate this risk.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1159,
      "api_response_id": "chatcmpl-Byf1sKJkJwmw6gwq8XrxO63Py1HgZ"
    },
    "analysis_timestamp": "2025-07-29 09:51:52"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Validation_CheckBillingDataSummary",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Validation_CheckBillingDataSummary]\r\nAS\r\nBEGIN\r\n\t\r\n\tDECLARE @BillingPeriod BillingPeriod\r\n\tDECLARE @CurrentInvoiceAccountBillingGroupSeqID INT\r\n\r\n\tSET @CurrentInvoiceAccountBillingGroupSeqID = 2\r\n\r\n\tSELECT @BillingPeriod = BillingPeriod \r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y'\r\n\r\n\tDECLARE @therms INT\r\n\tDECLARE @ccf INT\r\n\tDECLARE @billedAmount BillingAmt\r\n\r\n\tSELECT  \r\n\t\t@billedAmount = SUM(Billing.AccountBillingAdjustmentGas.RevisedBilledAmount) + SUM(Billing.AccountBillingAdjustmentGas.CanceledBilledAmount),\r\n\t\t@ccf = SUM(Billing.AccountBillingAdjustmentGas.RevisedCCF) + SUM(Billing.AccountBillingAdjustmentGas.CanceledCCF),\r\n\t\t@therms = SUM(RevisedTherms + CanceledTherms)\r\n\tFROM Billing.AccountBilling\r\n\t\tINNER JOIN Billing.AccountBillingGas \r\n\t\tON \r\n\t\t\tBilling.AccountBilling.AccountBillingSeqid = Billing.AccountBillingGas.AccountBillingSeqid\r\n\t\t\tAND \r\n\t\t\tBilling.AccountBilling.OriginalAccountNumber = Billing.AccountBillingGas.OriginalAccountNumber\r\n\t\t\tAND Billing.AccountBilling.LastPeriodModified = Billing.AccountBillingGas.LastPeriodModified\r\n\t\t\tAND Billing.AccountBilling.BillingPeriodRevision = Billing.AccountBillingGas.BillingPeriodRevision\r\n\t\t\tAND Billing.AccountBilling.BillingPeriod = Billing.AccountBillingGas.BillingPeriod\r\n\t\t\tAND Billing.AccountBilling.UtilityCompanySeqid = Billing.AccountBillingGas.UtilityCompanySeqid\r\n\t\tINNER JOIN Billing.AccountBillingAdjustmentGas \r\n\t\tON \r\n\t\t\tBilling.AccountBillingGas.LastPeriodModified = Billing.AccountBillingAdjustmentGas.BillingPeriod\r\n\t\t\tAND Billing.AccountBillingGas.OriginalAccountNumber = Billing.AccountBillingAdjustmentGas.OriginalAccountNumber\r\n\t\t\tAND Billing.AccountBillingGas.UtilityCompanySeqid = Billing.AccountBillingAdjustmentGas.UtilityCompanySeqid\r\n\t\t\tAND Billing.AccountBillingGas.BillingPeriodRevision = Billing.AccountBillingAdjustmentGas.BillingPeriodRevision\r\n\tWHERE   Billing.AccountBillingAdjustmentGas.BillingPeriod = @BillingPeriod\r\n\t\t\tAND Billing.AccountBilling.CurrentInvoiceAccountBillingGroup = @CurrentInvoiceAccountBillingGroupSeqid\r\n\r\n\tDECLARE @errMessage VARCHAR(MAX)\r\n\r\n\tIF(NOT EXISTS (SELECT * FROM ConEd.ConEdCoversheet WHERE BillingPeriod = @BillingPeriod AND CCF = @ccf AND Therm = @therms AND TotalBilledAmount = @billedAmount))\r\n\tBEGIN\r\n\t\tSET @errMessage = 'Account level data in the billing does not match data from provided coversheet'\r\n\t\tRAISERROR(@errMessage, 12, 1)\r\n\tEND\r\n\r\nEND",
      "created": "2025-06-10 21:41:27.107000",
      "last_altered": "2025-06-10 21:41:27.107000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Validation_CheckBillingDataSummary",
      "explanation": "#### 1. Overview\n\nThe stored procedure `usp_Validation_CheckBillingDataSummary` is designed to validate billing data by comparing calculated billing metrics against a coversheet record. It retrieves the current billing period and calculates the total billed amount, CCF (hundred cubic feet), and therms from the `Billing.AccountBilling`, `Billing.AccountBillingGas`, and `Billing.AccountBillingAdjustmentGas` tables. It then checks if these calculated values match a record in the `ConEd.ConEdCoversheet` table for the same billing period. If there is a mismatch, it raises an error indicating that the account-level data does not match the coversheet data.\n\n#### 2. Complexity Level: Medium\n\nThe complexity level is considered medium due to the following factors:\n- The procedure involves multiple table joins and aggregate calculations.\n- It includes conditional logic to handle validation and error reporting.\n- It interacts with several tables, requiring a good understanding of the database schema.\n\n#### 3. Input Parameters\n\nThis stored procedure does not take any input parameters. It relies on internal variables and constants to perform its operations.\n\n#### 4. Business Logic and Workflow\n\n1. **Variable Declaration and Initialization:**\n   - Declares variables for `BillingPeriod`, `CurrentInvoiceAccountBillingGroupSeqID`, `therms`, `ccf`, and `billedAmount`.\n   - Initializes `CurrentInvoiceAccountBillingGroupSeqID` to 2.\n\n2. **Retrieve Current Billing Period:**\n   - Queries the `Billing.ApplicationTimeFrame` table to get the current billing period where `CurrentProcessingPeriod` is 'Y'.\n\n3. **Calculate Billing Metrics:**\n   - Joins `Billing.AccountBilling`, `Billing.AccountBillingGas`, and `Billing.AccountBillingAdjustmentGas` tables.\n   - Calculates the sum of revised and canceled billed amounts, CCF, and therms for the current billing period and invoice account billing group.\n\n4. **Validation Against Coversheet:**\n   - Checks if a record exists in the `ConEd.ConEdCoversheet` table with matching billing period, CCF, therms, and total billed amount.\n   - If no matching record is found, raises an error with a specific message.\n\n#### 5. Performance Considerations\n\n- **Joins and Aggregations:** The procedure involves multiple joins and aggregate functions, which can be resource-intensive, especially if the tables contain a large number of records.\n- **Indexing:** Ensure that the columns used in joins and where clauses are indexed to improve query performance.\n- **Error Handling:** The procedure uses `RAISERROR` for error reporting, which is efficient for raising exceptions but does not provide detailed error handling or logging.\n\n#### 6. Potential Issues or Risks\n\n- **Data Integrity:** If the data in the `ConEd.ConEdCoversheet` table is not updated in sync with the billing tables, it may lead to frequent mismatches and errors.\n- **Scalability:** As the volume of data grows, the performance of the joins and aggregations may degrade if not properly indexed.\n- **Hardcoded Values:** The procedure uses a hardcoded value for `CurrentInvoiceAccountBillingGroupSeqID`, which may need to be updated manually if business requirements change.\n- **Error Messaging:** The error message is generic and does not provide specific details about which part of the data does not match, which could make troubleshooting difficult.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1477,
      "api_response_id": "chatcmpl-Byf29pXdlI4FlHA3xH3JhT5PwzLIT"
    },
    "analysis_timestamp": "2025-07-29 09:52:11"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Validation_CheckCurrentProcessingPeriod",
      "definition": "-- =============================================\r\n-- Author:\t\tDHO\r\n-- Create date: <Create Date,,>\r\n-- Description:\tcheck if current period has been processed\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Validation_CheckCurrentProcessingPeriod]\r\n\t\r\nAS\r\nBEGIN\r\n\r\n\tDECLARE @BillingPeriod BillingPeriod\r\n\r\n\tSELECT @BillingPeriod = BillingPeriod \r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y'\r\n\r\n\tDECLARE @errMessage VARCHAR(MAX)\r\n\r\n\tIF(EXISTS(SELECT * FROM billing.AccountBilling\r\n\tWHERE BillingPeriodRevision = @BillingPeriod AND CurrentInvoiceAccountBillingGroup = 2))\r\n\tBEGIN\r\n\t\tSET @errMessage = 'ConEd data for period ' + @BillingPeriod + ' has already been processed. The application timeframe might need to be updated.' \r\n\r\n\t\tUPDATE ConEd.ConEdDataUploadStep\r\n\t\tSET CurrentBillingPeriod = @BillingPeriod,\r\n\t\t\tisCompleted = 1\r\n        \r\n\t\tRAISERROR(@errMessage, 12, 1)\r\n\tEND  \r\n\r\nEND",
      "created": "2025-06-10 21:41:27.117000",
      "last_altered": "2025-06-10 21:41:27.117000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Validation_CheckCurrentProcessingPeriod",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Validation_CheckCurrentProcessingPeriod` is designed to verify whether the current billing period has already been processed. It retrieves the current processing period from the `Billing.ApplicationTimeFrame` table and checks if there are any records in the `billing.AccountBilling` table with a specific billing period revision and a particular account billing group. If such records exist, it updates the `ConEd.ConEdDataUploadStep` table to mark the billing period as completed and raises an error message indicating that the data for the period has already been processed.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, involving basic SQL operations such as variable declaration, simple SELECT queries, conditional logic with an IF statement, and an UPDATE operation. It does not involve complex joins, subqueries, or intricate business logic, making it relatively simple to understand and maintain.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates based on the data available in the database tables it queries.\n\n#### 4. Business Logic and Workflow\n- **Step 1:** Declare a variable `@BillingPeriod` of type `BillingPeriod` to store the current billing period.\n- **Step 2:** Retrieve the current billing period from the `Billing.ApplicationTimeFrame` table where `CurrentProcessingPeriod` is marked as 'Y'.\n- **Step 3:** Declare a variable `@errMessage` to store error messages.\n- **Step 4:** Check if there are any records in the `billing.AccountBilling` table with the retrieved billing period and `CurrentInvoiceAccountBillingGroup` equal to 2.\n- **Step 5:** If such records exist:\n  - Construct an error message indicating that the data for the period has already been processed.\n  - Update the `ConEd.ConEdDataUploadStep` table to set `CurrentBillingPeriod` to the retrieved billing period and mark `isCompleted` as 1.\n  - Raise an error with the constructed message.\n\n#### 5. Performance Considerations\n- The procedure performs a simple SELECT query to retrieve the current billing period, which should be efficient if the `Billing.ApplicationTimeFrame` table is indexed appropriately.\n- The EXISTS check on the `billing.AccountBilling` table could be optimized with proper indexing on `BillingPeriodRevision` and `CurrentInvoiceAccountBillingGroup` to ensure quick lookups.\n- The UPDATE operation on `ConEd.ConEdDataUploadStep` is straightforward but should be monitored for performance if the table grows significantly.\n\n#### 6. Potential Issues or Risks\n- **Concurrency Issues:** If multiple processes attempt to run this procedure simultaneously, there could be race conditions, especially during the UPDATE operation. Implementing transaction handling or locking mechanisms might be necessary.\n- **Error Handling:** The procedure uses `RAISERROR` to signal an error, but it does not handle exceptions or rollback transactions, which could lead to partial updates if an error occurs.\n- **Data Integrity:** The procedure assumes that there is always a current processing period marked as 'Y'. If this assumption fails, the procedure might not function correctly.\n- **Scalability:** As the data grows, the performance of the EXISTS check and the UPDATE operation might degrade if not properly indexed or optimized.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1089,
      "api_response_id": "chatcmpl-Byf2TeW5pczdSueyJszI1dd5JYoCq"
    },
    "analysis_timestamp": "2025-07-29 09:52:26"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Validation_CheckedTransformedData",
      "definition": "-- =============================================\r\n-- Author:\t\tdho\r\n-- Create date: 3/25/2013\r\n-- Description:\tFinal validation before transfering data to EC3\r\n-- ============================================\r\nCREATE PROCEDURE [ConEd].[usp_Validation_CheckedTransformedData]\r\nAS\r\nBEGIN\r\n\t\r\n\t-- check if billing cycle is empty\r\n\tDECLARE @errMessage VARCHAR(MAX)\r\n\r\n\tIF(EXISTS(SELECT * \r\n\tFROM Gas.UploadMeterBillingAdjustmentGas\r\n\tWHERE BillingCycle IS NULL OR BillingCycle = ''))\r\n\tBEGIN\t\t\r\n\t\tSET @errMessage = 'There are meter records with null billing cycle'\r\n\t\tRAISERROR(@errMessage, 12, 1)  \r\n\tEND  \r\n\t\r\n\tIF(EXISTS(SELECT * \r\n\tFROM Gas.UploadAccountBillingAdjustmentGas\r\n\tWHERE BillingCycle IS NULL OR BillingCycle = ''))\r\n\tBEGIN\t\t\r\n\t\tSET @errMessage = 'There are account records with null billing cycle'\r\n\t\tRAISERROR(@errMessage, 12, 1)  \r\n\tEND  \r\n\r\n\r\n\tIF(EXISTS(SELECT * \r\n\tFROM Gas.UploadMeterBillingAdjustmentGas\r\n\tWHERE BillingPeriodRevision IS NULL OR BillingPeriodRevision = ''))\r\n\tBEGIN\t\t\r\n\t\tSET @errMessage = 'There are meter records with null billing cycle'\r\n\t\tRAISERROR(@errMessage, 12, 1)  \r\n\tEND  \r\n\r\n\tIF(EXISTS(SELECT * \r\n\tFROM Gas.UploadAccountBillingAdjustmentGas\r\n\tWHERE BillingCycle IS NULL OR BillingCycle = ''))\r\n\tBEGIN\t\t\r\n\t\tSET @errMessage = 'There are account records with null billing cycle'\r\n\t\tRAISERROR(@errMessage, 12, 1)  \r\n\tEND  \r\n\r\n\r\n\tDECLARE @BillingPeriod BillingPeriod\r\n\r\n\tSELECT @BillingPeriod = BillingPeriod \r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y'\r\n\r\n\tDECLARE @therms INT\r\n\tDECLARE @ccf INT\r\n\tDECLARE @billedAmount BillingAmt\r\n\r\n\tSELECT  \r\n        @billedAmount = SUM(TotalRebilledAmount + TotalCanceledAmount)  ,\r\n        @therms = SUM(TotalTherms + ISNULL(CancelTotalTherms, 0)) ,\r\n        @ccf = SUM(TotalCCF + ISNULL(CancelTotalCCF, 0)) \r\n\tFROM Gas.UploadAccountBillingAdjustmentGas\r\n\r\n\r\n\tIF(NOT EXISTS (SELECT * FROM ConEd.ConEdCoversheet WHERE BillingPeriod = @BillingPeriod AND CCF = @ccf AND Therm = @therms AND TotalBilledAmount = @billedAmount))\r\n\tBEGIN\r\n\t\tSET @errMessage = 'Data in the account table does not match data from provided coversheet'\r\n\t\tRAISERROR(@errMessage, 12, 1)\r\n\tEND\r\n    \r\n\r\nEND",
      "created": "2025-06-10 21:41:27.127000",
      "last_altered": "2025-06-10 21:41:27.127000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Validation_CheckedTransformedData",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Validation_CheckedTransformedData` is designed to perform a series of validation checks on data before it is transferred to another system, referred to as EC3. It checks for the presence of null or empty values in specific columns of two tables: `Gas.UploadMeterBillingAdjustmentGas` and `Gas.UploadAccountBillingAdjustmentGas`. Additionally, it verifies that aggregated data from `Gas.UploadAccountBillingAdjustmentGas` matches a record in the `ConEd.ConEdCoversheet` table based on the current billing period.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple conditional checks and data aggregation, which adds a moderate level of complexity. It does not involve complex joins or subqueries, but it does require understanding of the business rules and data relationships.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on predefined tables and retrieves the current billing period from the `Billing.ApplicationTimeFrame` table.\n\n#### 4. Business Logic and Workflow\n- **Null or Empty Checks**: The procedure first checks for null or empty `BillingCycle` and `BillingPeriodRevision` fields in the `Gas.UploadMeterBillingAdjustmentGas` and `Gas.UploadAccountBillingAdjustmentGas` tables. If any records are found with these issues, an error is raised with a severity level of 12, which indicates a non-fatal error that can be caught by the application.\n  \n- **Current Billing Period Retrieval**: It retrieves the current billing period from the `Billing.ApplicationTimeFrame` table where `CurrentProcessingPeriod` is 'Y'.\n\n- **Data Aggregation**: The procedure calculates the total billed amount, therms, and CCF (hundred cubic feet) from the `Gas.UploadAccountBillingAdjustmentGas` table. It sums up the `TotalRebilledAmount`, `TotalCanceledAmount`, `TotalTherms`, and `TotalCCF`, accounting for potential null values in `CancelTotalTherms` and `CancelTotalCCF`.\n\n- **Data Validation Against Coversheet**: Finally, it checks if the aggregated values match a record in the `ConEd.ConEdCoversheet` table for the current billing period. If no matching record is found, an error is raised.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the columns used in the `EXISTS` and `SELECT` statements are indexed to improve query performance, especially `BillingCycle`, `BillingPeriodRevision`, and `BillingPeriod`.\n  \n- **Aggregation**: The aggregation of large datasets can be resource-intensive. Consider optimizing the query or using indexed views if performance issues arise.\n\n- **Error Handling**: The use of `RAISERROR` with a severity level of 12 allows for error handling without terminating the procedure, which is suitable for validation checks.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: If the data in the `Gas.UploadAccountBillingAdjustmentGas` and `Gas.UploadMeterBillingAdjustmentGas` tables is not regularly validated, there could be a risk of data integrity issues that this procedure might not catch.\n  \n- **Concurrency**: If the tables are being updated concurrently while this procedure is running, it could lead to inconsistent results. Consider using transaction isolation levels to mitigate this risk.\n\n- **Error Messages**: The error messages for null `BillingCycle` and `BillingPeriodRevision` are identical for meter records, which could lead to confusion. Consider differentiating these messages for clarity.\n\n- **Scalability**: As the volume of data grows, the performance of this procedure may degrade. Regular monitoring and optimization may be necessary to maintain efficiency.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1527,
      "api_response_id": "chatcmpl-Byf2i7fndMC1b4sJGbbGKTtzm843X"
    },
    "analysis_timestamp": "2025-07-29 09:52:47"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Validation_CheckEstOrActInconsistency",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Validation_CheckEstOrActInconsistency]\r\nAS \r\n    BEGIN\r\n\t\tDECLARE @errMessage VARCHAR(MAX)  \r\n        IF ( EXISTS ( SELECT    AccountEstOrAct.OriginalAccountNumber ,\r\n                                AccountEstOrAct.EstimatedOrActualBilling ,\r\n                                MeterEstOrAct.EstimatedOrActualBilling ,\r\n                                AccountEstOrAct.BillingPeriodRevision\r\n                      FROM   coned.UploadConEdisonAccountBillingAdjustmentGas\r\n                               AS AccountEstOrAct\r\n                                INNER JOIN ( SELECT ucembag.OriginalAccountNumber ,\r\n                                                    MAX(ucembag.EstimatedOrActualBilling) AS EstimatedOrActualBilling ,\r\n                                                    BillingPeriodRevision\r\n                                             FROM coned.UploadConEdisonMeterBillingAdjustmentGas\r\n                                                   AS ucembag\r\n                                             GROUP BY OriginalAccountNumber ,\r\n                                                    BillingPeriodRevision\r\n                                           ) AS MeterEstOrAct ON AccountEstOrAct.BillingPeriodRevision = MeterEstOrAct.BillingPeriodRevision\r\n                                                              AND AccountEstOrAct.OriginalAccountNumber = MeterEstOrAct.OriginalAccountNumber\r\n                                                              AND AccountEstOrAct.EstimatedOrActualBilling <> MeterEstOrAct.EstimatedOrActualBilling ) ) \r\n            BEGIN\r\n                SET @errMessage = 'EstOrAct flag is not consistent between meter and account record'\r\n                RAISERROR(@errMessage, 12, 1)\r\n            END\r\n    \r\n\t\r\n    END",
      "created": "2025-06-10 21:41:27.137000",
      "last_altered": "2025-06-10 21:41:27.137000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Validation_CheckEstOrActInconsistency",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Validation_CheckEstOrActInconsistency` is designed to validate data consistency between two tables: `UploadConEdisonAccountBillingAdjustmentGas` and `UploadConEdisonMeterBillingAdjustmentGas`. It checks for discrepancies in the `EstimatedOrActualBilling` flag for records that share the same `OriginalAccountNumber` and `BillingPeriodRevision`. If any inconsistencies are found, the procedure raises an error with a specific message.\n\n#### 2. Complexity Level: Medium\nThe complexity level of this stored procedure is medium. It involves a nested query with a `GROUP BY` clause and an `INNER JOIN`, which requires a moderate understanding of SQL joins and aggregation. The logic is straightforward but involves multiple steps to ensure data consistency.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on the entire dataset within the specified tables.\n\n#### 4. Business Logic and Workflow\n- **Data Selection**: The procedure checks for inconsistencies in the `EstimatedOrActualBilling` flag between two tables.\n  - **Inner Query**: Aggregates data from `UploadConEdisonMeterBillingAdjustmentGas` to find the maximum `EstimatedOrActualBilling` value for each combination of `OriginalAccountNumber` and `BillingPeriodRevision`.\n  - **Outer Query**: Joins the aggregated results with `UploadConEdisonAccountBillingAdjustmentGas` on `OriginalAccountNumber` and `BillingPeriodRevision`.\n- **Inconsistency Check**: The procedure checks if there are any records where the `EstimatedOrActualBilling` values do not match between the two tables.\n- **Error Handling**: If inconsistencies are found, an error is raised with a message indicating the issue.\n\n#### 5. Performance Considerations\n- **Indexes**: Ensure that `OriginalAccountNumber` and `BillingPeriodRevision` are indexed in both tables to optimize join and group operations.\n- **Data Volume**: The performance may degrade with large datasets due to the `GROUP BY` and `JOIN` operations. Consider partitioning or archiving old data if performance issues arise.\n- **Error Handling**: The use of `RAISERROR` can be resource-intensive if inconsistencies are frequent. Consider logging errors instead of raising them if performance is a concern.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: The procedure assumes that the maximum `EstimatedOrActualBilling` value is the correct one for comparison. This assumption may not hold if the data contains anomalies or if the business logic changes.\n- **Error Management**: The procedure raises an error for any inconsistency, which could interrupt processes that depend on this validation. Consider implementing a logging mechanism to capture inconsistencies without halting execution.\n- **Scalability**: As data grows, the performance of this procedure may degrade. Regular monitoring and optimization may be necessary to maintain efficiency.\n- **Concurrency**: If the tables are frequently updated, ensure that the procedure is executed in a transaction-safe manner to avoid reading inconsistent data.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1162,
      "api_response_id": "chatcmpl-Byf32WhU6ev3H8AMQ9A39lXsEZsYu"
    },
    "analysis_timestamp": "2025-07-29 09:53:02"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Validation_CheckMeterBillingAdjustmentGas",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Validation_CheckMeterBillingAdjustmentGas]\r\n\r\nAS\r\nBEGIN\r\n\t\r\n\tDECLARE @errMessage VARCHAR(MAX)\r\n\r\n\tIF(EXISTS (\r\n\t\t\r\n\t\t\tSELECT DISTINCT ad.OriginalAccountNumber, ad.OriginalMeterNumber, ad.BillingPeriodRevision\r\n\t\t\tFROM \r\n\t\t\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas ad\r\n\t\t\t\tINNER JOIN billing.MeterBilling AS mb\r\n\t\t\t\tON ad.OriginalAccountNumber = mb.OriginalAccountNumber\r\n\t\t\t\tAND ad.OriginalMeterNumber = mb.OriginalMeterNumber\r\n\t\t\t\tAND ad.BillingPeriodRevision = mb.BillingPeriodRevision\r\n\t\t\tWHERE ad.AccountExchangeMeterTrackSeqid IS NULL OR ad.AccountBilled IS NULL OR ad.AdjustedMeterBilling IS null\r\n\t\t)\r\n\t)\r\n\tBEGIN\r\n\t\tSET @errMessage = 'There are records in UploadConEdisonMeterBillingAdjustmentGas with missing exchange meter track.'\r\n\t\tRAISERROR(@errMessage, 12, 1)\r\n\tEND\r\n    \r\nEND",
      "created": "2025-06-10 21:41:27.143000",
      "last_altered": "2025-06-10 21:41:27.143000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Validation_CheckMeterBillingAdjustmentGas",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Validation_CheckMeterBillingAdjustmentGas` is designed to validate data within the `ConEd.UploadConEdisonMeterBillingAdjustmentGas` table. It checks for records where certain critical fields are null, specifically `AccountExchangeMeterTrackSeqid`, `AccountBilled`, or `AdjustedMeterBilling`. If such records exist, it raises an error message indicating the presence of incomplete data.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, involving a single validation check using a simple `IF EXISTS` condition. It does not involve complex logic, multiple steps, or intricate data manipulations.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates on the data present in the `ConEd.UploadConEdisonMeterBillingAdjustmentGas` table and the `billing.MeterBilling` table.\n\n#### 4. Business Logic and Workflow\n- **Data Validation**: The procedure checks for the existence of records in the `ConEd.UploadConEdisonMeterBillingAdjustmentGas` table that have null values in any of the specified columns (`AccountExchangeMeterTrackSeqid`, `AccountBilled`, `AdjustedMeterBilling`).\n- **Join Operation**: It performs an inner join with the `billing.MeterBilling` table to ensure that the records being validated have corresponding entries in the `billing.MeterBilling` table based on `OriginalAccountNumber`, `OriginalMeterNumber`, and `BillingPeriodRevision`.\n- **Error Handling**: If such records are found, the procedure sets an error message and raises an error with severity level 12, which is typically used for user-defined errors.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the columns used in the join condition (`OriginalAccountNumber`, `OriginalMeterNumber`, `BillingPeriodRevision`) are indexed to improve the performance of the join operation.\n- **Table Size**: The performance of this procedure can be affected by the size of the `ConEd.UploadConEdisonMeterBillingAdjustmentGas` and `billing.MeterBilling` tables. Large datasets may result in slower execution times.\n- **Selectivity**: The use of `SELECT DISTINCT` may impact performance if there are many duplicate records. However, in this context, it is used to ensure unique combinations of the selected columns.\n\n#### 6. Potential Issues or Risks\n- **Error Severity**: The procedure uses a severity level of 12 for the `RAISERROR` statement. While this is appropriate for user-defined errors, it may not halt execution in all contexts. Ensure that the calling application or process handles this error appropriately.\n- **Null Checks**: The procedure assumes that the presence of null values in the specified columns is an error condition. Ensure that this aligns with business rules and that null values are indeed invalid in this context.\n- **Scalability**: As the volume of data grows, the performance of the procedure may degrade if appropriate indexing and query optimization strategies are not in place.\n- **Error Message**: The error message is generic and may not provide enough context for troubleshooting. Consider including more details, such as the number of affected records or specific identifiers, to aid in debugging.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1118,
      "api_response_id": "chatcmpl-Byf3HYznbd9kT2LTPc867mznjFIW9"
    },
    "analysis_timestamp": "2025-07-29 09:53:17"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Validation_CheckRawDataTotal",
      "definition": "-- =============================================\r\n-- Description:\tvalidate preload data by comparing total with the coversheet number\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Validation_CheckRawDataTotal]\r\nAS\r\nBEGIN\r\n\tDECLARE @BillingPeriod AS BillingPeriod;\r\n\r\n\tSELECT @BillingPeriod = BillingPeriod\r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y';\r\n\r\n\tDECLARE @therms AS INT, @ccf AS INT, @billedAmount AS BillingAmt;\r\n\r\n\tSELECT @billedAmount = acc.BilledAmount + AccCancel.BilledAmount\r\n\t\t,@therms = acc.Therms + AccCancel.Therms\r\n\t\t,@ccf = acc.CCF + AccCancel.CCF\r\n\tFROM (SELECT SUM(CAST(CAST(dbo.ConvertOverpunch(BilledAmount) AS INT) * .01 AS MONEY)) AS BilledAmount\r\n\t\t\t,SUM(CAST(dbo.ConvertOverpunch(Therms) AS int)) AS Therms\r\n\t\t\t,SUM(CAST(dbo.ConvertOverpunch(CCF) AS INT)) AS CCF\r\n\t\tFROM ConEd.UploadConEdisonAccountPreload) AS Acc,\r\n\t(SELECT ISNULL(SUM(CAST(CAST(dbo.ConvertOverpunch(BilledAmount) AS int) * .01 AS MONEY)), 0) AS BilledAmount\r\n\t\t,ISNULL(SUM(CAST(dbo.ConvertOverpunch(Therms) AS INT)), 0) AS Therms\r\n\t\t,ISNULL(SUM(CAST(dbo.ConvertOverpunch(CCF) AS INT)), 0) AS CCF\r\n\tFROM ConEd.UploadConEdisonCancellationPreload) AS AccCancel;\r\n\r\n\tIF(NOT EXISTS(SELECT * FROM ConEd.ConEdCoversheet WHERE BillingPeriod = @BillingPeriod AND CCF = @ccf AND Therm = @therms AND TotalBilledAmount = @billedAmount))\r\n\tBEGIN\r\n\t\tDECLARE @errMessage AS VARCHAR(MAX);\r\n\t\tSET @errMessage = 'Preload data does not match data record from coversheet';\r\n\t\tRAISERROR(@errMessage, 12, 1);\r\n\tEND;\r\nEND;",
      "created": "2025-06-10 21:41:27.153000",
      "last_altered": "2025-06-10 21:41:27.153000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Validation_CheckRawDataTotal",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Validation_CheckRawDataTotal` is designed to validate preloaded billing data by comparing it with a coversheet record. It checks if the sum of billed amounts, therms, and CCF (hundred cubic feet) from two preloaded datasets matches the corresponding values in a coversheet for the current billing period. If there is a discrepancy, it raises an error.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including data aggregation, conversion, and validation against another dataset. It uses subqueries, conditional logic, and error handling, which adds to its complexity.\n\n#### 3. Input Parameters\nThe procedure does not take any input parameters. It relies on internal queries to determine the current billing period and to fetch and compare data.\n\n#### 4. Business Logic and Workflow\n- **Determine Current Billing Period**: The procedure starts by selecting the current billing period from the `Billing.ApplicationTimeFrame` table where `CurrentProcessingPeriod` is marked as 'Y'.\n  \n- **Aggregate Preload Data**: It calculates the total billed amount, therms, and CCF from two datasets: `ConEd.UploadConEdisonAccountPreload` and `ConEd.UploadConEdisonCancellationPreload`. The `dbo.ConvertOverpunch` function is used to convert overpunched values, and the results are summed up. The cancellation data is handled separately and then added to the account preload data.\n\n- **Validation Against Coversheet**: The aggregated values are compared against the `ConEd.ConEdCoversheet` table for the current billing period. If no matching record is found, an error is raised indicating a mismatch.\n\n#### 5. Performance Considerations\n- **Data Conversion and Aggregation**: The use of `CAST` and `SUM` functions, especially with the `dbo.ConvertOverpunch` function, could impact performance if the datasets are large. Ensuring that these functions are optimized is crucial.\n  \n- **Indexing**: Proper indexing on the `Billing.ApplicationTimeFrame`, `ConEd.UploadConEdisonAccountPreload`, `ConEd.UploadConEdisonCancellationPreload`, and `ConEd.ConEdCoversheet` tables can improve query performance, especially for the `WHERE` clauses and joins.\n\n- **Concurrency**: The procedure does not handle concurrency explicitly. If multiple processes are updating the same datasets, it could lead to inconsistencies.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: If the `dbo.ConvertOverpunch` function is not correctly implemented, it could lead to incorrect data conversion, affecting the validation process.\n  \n- **Error Handling**: The procedure raises an error with a severity level of 12, which is informational. Depending on the application requirements, a higher severity level might be necessary to ensure proper error handling.\n\n- **Scalability**: As data volume grows, the performance of the aggregation and validation logic could degrade. Regular monitoring and optimization might be required.\n\n- **Lack of Input Parameters**: The procedure is tightly coupled with the current processing period logic. If the business logic changes, the procedure might require significant modifications.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1311,
      "api_response_id": "chatcmpl-Byf3WKWKVCSX7ZB7nHDIz6PJ52FFQ"
    },
    "analysis_timestamp": "2025-07-29 09:53:34"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Validation_CheckReadingCode",
      "definition": "-- =============================================\r\n-- Author:\t\tzd\r\n-- Create date: <Create Date,,>\r\n-- Description:\tcheck if all the codes from input file is availanble in lookup table\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Validation_CheckReadingCode]\r\n\t\r\nAS\r\nBEGIN\r\n\r\n\tDECLARE @BillingPeriod BillingPeriod\r\n\r\n\r\n\tDECLARE @errMessage VARCHAR(MAX)\r\n\r\n\tIF(EXISTS\r\n\t\t(\r\n\t\t\tSELECT *\r\n\t\t\tFROM ConEd.UploadConEdisonMeter AS ucm \r\n\t\t\tLEFT  JOIN (SELECT * FROM Billing.UtilityReadingCode WHERE UtilityCompanySeqid = 9) urc\r\n\t\t\tON ucm.ReadingCode  = urc.ReadingCode\r\n\t\t\tWHERE \r\n\t\t\turc.ReadingCode IS NULL \r\n\t\t)\r\n\t)\r\n\tBEGIN\r\n\t\tSET @errMessage = 'There is a missing reading code in UtilityReadingCode, please Add new code to table'\r\n\t\t;THROW 51000, @errMessage, 1;  \r\n\tEND  \r\n\r\nEND",
      "created": "2025-06-10 21:41:27.163000",
      "last_altered": "2025-06-10 21:41:27.163000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Validation_CheckReadingCode",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Validation_CheckReadingCode` is designed to validate reading codes from an input file against a lookup table in a SQL Server database. Specifically, it checks if all reading codes present in the `ConEd.UploadConEdisonMeter` table are also present in the `Billing.UtilityReadingCode` table for a specific utility company (identified by `UtilityCompanySeqid = 9`). If any reading code from the input file is missing in the lookup table, the procedure raises an error with a specific message.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, involving a simple existence check using a `LEFT JOIN` and a conditional statement to throw an error if the condition is met. There are no complex operations, loops, or intricate logic involved.\n\n#### 3. Input Parameters\nThe procedure does not take any input parameters. It operates on predefined tables and a hardcoded utility company sequence ID.\n\n#### 4. Business Logic and Workflow\n- **Initialization**: The procedure declares two variables, `@BillingPeriod` and `@errMessage`. However, `@BillingPeriod` is declared but not used within the procedure.\n- **Existence Check**: It performs a `LEFT JOIN` between `ConEd.UploadConEdisonMeter` and a filtered subset of `Billing.UtilityReadingCode` where `UtilityCompanySeqid = 9`. The join condition is based on the `ReadingCode`.\n- **Condition Evaluation**: The procedure checks for any `ReadingCode` in `ConEd.UploadConEdisonMeter` that does not have a corresponding entry in the filtered `UtilityReadingCode` table (i.e., `urc.ReadingCode IS NULL`).\n- **Error Handling**: If such a missing code is found, the procedure sets an error message and throws an error with a severity level of 16, which indicates a general error that can be corrected by the user.\n\n#### 5. Performance Considerations\n- **Indexing**: Performance can be improved if there are appropriate indexes on the `ReadingCode` columns in both `ConEd.UploadConEdisonMeter` and `Billing.UtilityReadingCode` tables. This would speed up the join operation.\n- **Table Size**: The performance impact is directly related to the size of the `ConEd.UploadConEdisonMeter` table. Larger tables will result in longer execution times.\n- **Join Operation**: The use of a `LEFT JOIN` is efficient for this type of existence check, but the performance can degrade if the tables are not indexed properly.\n\n#### 6. Potential Issues or Risks\n- **Hardcoded Values**: The procedure uses a hardcoded `UtilityCompanySeqid` value of 9, which limits its flexibility and requires modification if the utility company changes.\n- **Unused Variable**: The `@BillingPeriod` variable is declared but not used, which could lead to confusion or indicate incomplete logic.\n- **Error Handling**: The procedure throws an error with a fixed message, which might not provide enough context for troubleshooting. Including more details, such as the specific missing `ReadingCode`, could be beneficial.\n- **Scalability**: As the volume of data grows, the performance of this procedure may degrade if not optimized with proper indexing and query tuning.\n- **Concurrency**: If this procedure is executed concurrently by multiple sessions, it could lead to contention on the tables involved, especially if they are large and not indexed efficiently.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1134,
      "api_response_id": "chatcmpl-Byf3n1qk7Z5RRxvr0TINhJ63naEFT"
    },
    "analysis_timestamp": "2025-07-29 09:53:48"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Validation_CheckUnknownAccountOrMeterAfterExchangeProcess",
      "definition": "--**************************************************************************************\r\n--* Description: Check if there are any unknown account or meter after the exchange process\r\n--**************************************************************************************\r\n--* Change Log\r\n--* xx/xx/xxxx xx  first version\r\n--* 10/31/2016 zd  common.exchange data table usage integration \r\n--**************************************************************************************\r\n\r\n\r\nCREATE PROCEDURE [ConEd].[usp_Validation_CheckUnknownAccountOrMeterAfterExchangeProcess]\r\nAS\r\nBEGIN\r\n\t\r\n\tDECLARE @errMessage VARCHAR(MAX)\r\n\r\n\tIF(EXISTS(SELECT * FROM Gas.UploadCommonElectronicGasExchangeData ))\r\n\tBEGIN\t\t\r\n\t\tSET @errMessage = 'There are accounts that were not processed. Please check exchange data process.'\r\n\t\tRAISERROR(@errMessage, 12, 1)  \r\n\tEND  \r\n\r\n\r\nEND",
      "created": "2025-06-10 21:41:27.170000",
      "last_altered": "2025-06-10 21:41:27.170000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Validation_CheckUnknownAccountOrMeterAfterExchangeProcess",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Validation_CheckUnknownAccountOrMeterAfterExchangeProcess` is designed to validate the presence of unprocessed accounts or meters following an exchange process. It checks a specific table, `Gas.UploadCommonElectronicGasExchangeData`, to determine if there are any records present. If records exist, it raises an error with a message indicating that some accounts were not processed, prompting further investigation into the exchange data process.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, involving a simple existence check on a table and raising an error if records are found. It does not involve complex logic, multiple steps, or intricate data manipulations.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates solely on the presence of data within the `Gas.UploadCommonElectronicGasExchangeData` table.\n\n#### 4. Business Logic and Workflow\n- **Declare Variable**: A variable `@errMessage` is declared to store the error message.\n- **Check for Data Existence**: The procedure uses an `IF EXISTS` statement to check if there are any records in the `Gas.UploadCommonElectronicGasExchangeData` table.\n- **Raise Error**: If records are found, it sets the `@errMessage` with a specific error message and raises an error using the `RAISERROR` function. The severity level is set to 12, which is typically used for user-defined errors, and the state is set to 1.\n\n#### 5. Performance Considerations\n- **Table Scan**: The `EXISTS` clause will perform a scan on the `Gas.UploadCommonElectronicGasExchangeData` table. If the table is large, this could potentially impact performance. Indexing strategies should be considered to optimize this check.\n- **Minimal Resource Usage**: Since the procedure only checks for the existence of records and does not perform any data manipulation, it uses minimal server resources.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: The procedure raises an error but does not provide a mechanism for handling it beyond the message. This could disrupt processes that rely on this procedure if not properly managed.\n- **Scalability**: As the table grows, the performance of the `EXISTS` check could degrade if not properly indexed.\n- **Lack of Context**: The error message is generic and does not provide specific details about which accounts or meters are unprocessed, which could make troubleshooting more difficult.\n- **No Logging**: There is no logging mechanism to record when this error occurs, which could be useful for auditing and tracking purposes.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 917,
      "api_response_id": "chatcmpl-Byf419RjHSOIBq5GkmYMUCLaVWaj4"
    },
    "analysis_timestamp": "2025-07-29 09:54:01"
  },
  {
    "procedure_info": {
      "schema": "ConEd",
      "name": "usp_Validation_CheckUploadDataSummary",
      "definition": "-- =============================================\r\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Validation_CheckUploadDataSummary]\r\nAS\r\nBEGIN\r\n\t\r\n\r\n\tDECLARE @BillingPeriod BillingPeriod\r\n\r\n\tSELECT @BillingPeriod = BillingPeriod \r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y'\r\n\r\n\tDECLARE @therms INT\r\n\tDECLARE @ccf INT\r\n\tDECLARE @billedAmount BillingAmt\r\n\r\n\tSELECT  \r\n        @billedAmount = SUM(TotalRebilledAmount + TotalCanceledAmount)  ,\r\n        @therms = SUM(TotalTherms + ISNULL(CancelTotalTherms, 0)) ,\r\n        @ccf = SUM(TotalCCF + ISNULL(CancelTotalCCF, 0)) \r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas \r\n\r\n\r\n\tDECLARE @errMessage VARCHAR(MAX)\r\n\r\n\tIF(NOT EXISTS (SELECT * FROM ConEd.ConEdCoversheet WHERE BillingPeriod = @BillingPeriod AND CCF = @ccf AND Therm = @therms AND TotalBilledAmount = @billedAmount))\r\n\tBEGIN\r\n\t\tSET @errMessage = 'Data in the upload does not match data from provided coversheet'\r\n\t\tRAISERROR(@errMessage, 12, 1)\r\n\tEND\r\n    \r\nEND",
      "created": "2025-06-10 21:41:27.180000",
      "last_altered": "2025-06-10 21:41:27.180000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "usp_Validation_CheckUploadDataSummary",
      "explanation": "#### 1. Overview\nThe stored procedure `usp_Validation_CheckUploadDataSummary` is designed to validate uploaded billing data against a coversheet for a specific billing period. It retrieves the current billing period, calculates the total billed amount, therms, and CCF (hundred cubic feet) from the uploaded data, and checks these values against a coversheet to ensure they match. If there is a discrepancy, it raises an error.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including querying, data aggregation, and conditional logic. While it does not involve complex joins or subqueries, the validation logic and error handling add a moderate level of complexity.\n\n#### 3. Input Parameters\nThis stored procedure does not take any input parameters. It operates based on the current processing period and data available in the specified tables.\n\n#### 4. Business Logic and Workflow\n- **Retrieve Current Billing Period**: The procedure starts by declaring a variable `@BillingPeriod` and assigns it the current billing period from the `Billing.ApplicationTimeFrame` table where `CurrentProcessingPeriod` is 'Y'.\n  \n- **Calculate Aggregated Values**: It declares variables `@therms`, `@ccf`, and `@billedAmount` to store aggregated values. It calculates:\n  - `@billedAmount` as the sum of `TotalRebilledAmount` and `TotalCanceledAmount`.\n  - `@therms` as the sum of `TotalTherms` and `CancelTotalTherms` (using `ISNULL` to handle nulls).\n  - `@ccf` as the sum of `TotalCCF` and `CancelTotalCCF` (using `ISNULL` to handle nulls).\n  These calculations are performed on the `ConEd.UploadConEdisonAccountBillingAdjustmentGas` table.\n\n- **Validation Against Coversheet**: The procedure checks if there is a record in the `ConEd.ConEdCoversheet` table that matches the calculated values for the current billing period. If no matching record is found, it sets an error message.\n\n- **Error Handling**: If the validation fails, it raises an error with the message 'Data in the upload does not match data from provided coversheet'.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the `Billing.ApplicationTimeFrame` and `ConEd.ConEdCoversheet` tables are indexed on columns used in the WHERE clause to optimize query performance.\n- **Aggregation**: The aggregation operations could be resource-intensive if the `ConEd.UploadConEdisonAccountBillingAdjustmentGas` table is large. Consider indexing or partitioning strategies to improve performance.\n- **Error Handling**: The use of `RAISERROR` is appropriate for error reporting, but consider logging errors for audit purposes.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: If the data in `ConEd.UploadConEdisonAccountBillingAdjustmentGas` or `ConEd.ConEdCoversheet` is not accurate or up-to-date, the validation may produce false negatives.\n- **Concurrency**: If the `Billing.ApplicationTimeFrame` table is updated concurrently, there might be a risk of retrieving an incorrect billing period.\n- **Null Handling**: The use of `ISNULL` ensures that null values do not cause issues in aggregation, but ensure that this logic aligns with business rules.\n- **Error Message Clarity**: The error message is generic. Consider providing more detailed information to aid in troubleshooting.\n- **Scalability**: As data volume grows, the performance of aggregation and validation checks may degrade. Regular performance reviews and optimizations may be necessary.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1252,
      "api_response_id": "chatcmpl-Byf4FZKLcJKnTIimCJ3OylKOvAHQ1"
    },
    "analysis_timestamp": "2025-07-29 09:54:20"
  }
]