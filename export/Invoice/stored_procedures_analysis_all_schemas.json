[
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_AccountBillingRetrieve",
      "definition": "CREATE PROCEDURE [Billing].[USP_AccountBillingRetrieve]\r\n(\r\n\t@providerId AS INT = NULL\r\n\t,@groupId AS INT = NULL\r\n\t,@accountId\tAS INT = NULL\r\n\t,@billingPeriod AS VARCHAR(6) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @providerId = NULLIF(@providerId, 0), @groupId = NULLIF(@groupId, 0), @accountId = NULLIF(@accountId, 0), @billingPeriod = NULLIF(@billingPeriod, '');\r\n\r\n\tDECLARE @action AS VARCHAR(25), @severity AS VARCHAR(25), @message AS VARCHAR(255), @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME, @elapsedTime AS INT, @sendEmail AS BIT;\r\n\r\n\tSELECT @startTime = GETDATE(), @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @sendEmail = 0\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA')\r\n\t\t,@action = 'RETRIEVE', @severity = 'INFO', @message = 'Retrieved account billing(s)', @userId = ISNULL(@userId, 0)\r\n\t\t,@messageDetails = CONVERT(VARCHAR(MAX), (SELECT @providerId AS PRVID, @groupId AS GRPID, @accountId AS ACCTID, @billingPeriod AS BILLPRD FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT BillingID\r\n\t\t\t,AmountBilled\r\n\t\t\t,AmountPaid\r\n\t\t\t,DateBilled\r\n\t\t\t,DateDue\r\n\t\t\t,BillingPeriod\r\n\t\t\t,BillingPeriodDays\r\n\t\t\t,FromDate\r\n\t\t\t,ToDate\r\n\t\t\t,IsEstimated\r\n\t\t\t,IsManualEntry\r\n\t\t\t,AccountID\r\n\t\t\t,AccountNumber\r\n\t\t\t,FormattedAccountNumber\r\n\t\t\t,EnergySource\r\n\t\t\t,EnergyUsage\r\n\t\t\t,DemandUsage\r\n\t\t\t,GroupID\r\n\t\t\t,GroupName\r\n\t\t\t,ProviderID\r\n\t\t\t,ProviderName\r\n\t\t\t,CreatedDate\r\n\t\t\t,CreatedBy\r\n\t\t\t,ModifiedDate\r\n\t\t\t,ModifiedBy\r\n\t\t\t,Active\r\n\t\tFROM Billing.vwAccountBillings\r\n\t\tWHERE ProviderID = ISNULL(@providerId, ProviderID)\r\n\t\t\tAND GroupID = ISNULL(@groupId, GroupID)\r\n\t\t\tAND AccountID = ISNULL(@accountId, AccountID)\r\n\t\t\tAND BillingPeriod = ISNULL(@billingPeriod, BillingPeriod)\r\n\t\tORDER BY ProviderName ASC, GroupName ASC, BillingPeriod DESC, AccountNumber ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve account billing(s)', @sendEmail = 1;\r\n\tEND CATCH;\r\n\t\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.383000",
      "last_altered": "2025-08-25 16:04:01.383000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@accountId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingPeriod",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 6,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_AccountBillingRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_AccountBillingRetrieve` is designed to retrieve billing information from a view named `Billing.vwAccountBillings` based on various optional filtering criteria. It logs the retrieval operation, including any exceptions encountered, and optionally sends an email notification if an error occurs. The procedure is part of the `Billing` schema and is intended to be used for querying billing data related to accounts, groups, and providers.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple input parameters, conditional logic for filtering, error handling, and logging operations. The complexity arises from the combination of these elements, particularly the dynamic filtering and logging mechanisms.\n\n#### 3. Input Parameters\n- `@providerId AS INT = NULL`: Filters results by provider ID. Defaults to NULL, meaning no filtering by provider if not specified.\n- `@groupId AS INT = NULL`: Filters results by group ID. Defaults to NULL, meaning no filtering by group if not specified.\n- `@accountId AS INT = NULL`: Filters results by account ID. Defaults to NULL, meaning no filtering by account if not specified.\n- `@billingPeriod AS VARCHAR(6) = NULL`: Filters results by billing period. Defaults to NULL, meaning no filtering by billing period if not specified.\n- `@correlationId AS VARCHAR(128) = NULL`: Used for logging purposes to correlate logs. Defaults to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: Used for logging the machine name. Defaults to the server name if not provided.\n- `@processName AS VARCHAR(128) = NULL`: Used for logging the process name. Defaults to the procedure name if not provided.\n- `@domain AS VARCHAR(25) = NULL`: Used for logging the domain name.\n- `@username AS VARCHAR(25) = NULL`: Used for logging the username.\n- `@userId AS INT = NULL`: Used for logging the user ID. Defaults to 0 if not provided.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Outputs any exception details encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Parameter Initialization**: The procedure initializes parameters, setting them to NULL if they are zero or empty strings.\n2. **Logging Setup**: Initializes logging-related variables, including correlation ID, machine name, process name, and action details.\n3. **Data Retrieval**: Attempts to retrieve billing data from `Billing.vwAccountBillings` using the provided filters. The `ISNULL` function is used to apply filters only when parameters are not NULL.\n4. **Error Handling**: Uses a `TRY...CATCH` block to handle any exceptions during data retrieval. If an error occurs, it sets the severity to 'ERROR', updates the message, and sets a flag to send an email.\n5. **Logging Execution**: Logs the operation details, including any exceptions, by calling `dbo.USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the columns used in the `WHERE` clause (`ProviderID`, `GroupID`, `AccountID`, `BillingPeriod`) are indexed to optimize query performance.\n- **View Optimization**: The performance of the view `Billing.vwAccountBillings` should be evaluated to ensure it is optimized for the expected query patterns.\n- **Logging Overhead**: The logging mechanism, especially if it involves writing to a database or sending emails, could introduce latency.\n\n#### 6. Potential Issues or Risks\n- **NULL Handling**: The use of `ISNULL` for filtering can lead to full table scans if indexes are not properly utilized, especially when parameters are NULL.\n- **Error Logging**: If the logging procedure `dbo.USP_AppLogCreate` fails, it could mask the original error or lead to incomplete logging.\n- **Concurrency**: High concurrency could lead to performance bottlenecks, especially if the logging mechanism involves database writes.\n- **Email Notifications**: The procedure sets a flag to send emails on errors, but the actual email sending mechanism is not shown. If not properly managed, this could lead to excessive email notifications in case of frequent errors.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1963,
      "api_response_id": "chatcmpl-C8akyZ8PA61JK97qRyfSSdPEAUcxd"
    },
    "analysis_timestamp": "2025-08-25 19:19:27"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_BillingGroupRetrieve",
      "definition": "CREATE PROCEDURE [Billing].[USP_BillingGroupRetrieve]\r\n(\r\n\t@providerId AS INT = NULL\r\n\t,@groupId AS INT = NULL\r\n\t,@summaryAccountNumber AS VARCHAR(15) = NULL\r\n\t,@billingType AS CHAR(1) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved utility provider billing groups'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @providerId = NULLIF(@providerId, 0), @groupId = NULLIF(@groupId, 0), @summaryAccountNumber = NULLIF(@summaryAccountNumber, 0)\r\n\t\t,@billingType = NULLIF(@billingType, ''), @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA'), @userId = ISNULL(@userId, 0)\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @providerId AS PRVID, @groupId AS GRPID, @billingType AS BILLTYPE, @summaryAccountNumber AS SUMACCTNUM FOR XML PATH('INPUTS')));\r\n\t\r\n\tBEGIN TRY\r\n\t\tSELECT GroupID\r\n\t\t\t,GroupName\r\n\t\t\t,GroupDescription\r\n\t\t\t,SummaryAccountNumber\r\n\t\t\t,IsSummaryBilling\r\n\t\t\t,AccountCount\r\n\t\t\t,ProviderID\r\n\t\t\t,BillingType\r\n\t\t\t,CreatedDate\r\n\t\t\t,CreatedBy\r\n\t\t\t,ModifiedDate\r\n\t\t\t,ModifiedBy\r\n\t\t\t,Active\r\n\t\tFROM Billing.vwBillingGroups\r\n\t\tWHERE GroupID = ISNULL(@groupId, GroupID)\r\n\t\t\tAND ProviderID = ISNULL(@providerId, ProviderID)\r\n\t\t\tAND ISNULL(SummaryAccountNumber, '') = ISNULL(@summaryAccountNumber, ISNULL(SummaryAccountNumber, ''))\r\n\t\t\tAND BillingType = ISNULL(@billingType, BillingType)\r\n\t\tORDER BY GroupName ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve utility provider billing groups', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.390000",
      "last_altered": "2025-08-25 16:04:01.390000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@summaryAccountNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 15,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingType",
        "data_type": "char",
        "mode": "IN",
        "max_length": 1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_BillingGroupRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_BillingGroupRetrieve` is designed to retrieve billing group information from a view named `vwBillingGroups` within the `Billing` schema. It allows filtering based on several optional parameters such as provider ID, group ID, summary account number, and billing type. The procedure also logs the operation details, including any exceptions, using another stored procedure `USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves multiple input parameters with default values and conditional logic for filtering.\n- It includes error handling using `TRY...CATCH` blocks.\n- It logs detailed information about the operation, including performance metrics and exception details.\n\n#### 3. Input Parameters\n- `@providerId AS INT = NULL`: Filters results by provider ID.\n- `@groupId AS INT = NULL`: Filters results by group ID.\n- `@summaryAccountNumber AS VARCHAR(15) = NULL`: Filters results by summary account number.\n- `@billingType AS CHAR(1) = NULL`: Filters results by billing type.\n- `@correlationId AS VARCHAR(128) = NULL`: Used for logging to correlate logs with specific operations.\n- `@machineName AS VARCHAR(128) = NULL`: Used for logging to identify the machine executing the procedure.\n- `@processName AS VARCHAR(128) = NULL`: Used for logging to identify the process executing the procedure.\n- `@domain AS VARCHAR(25) = NULL`: Used for logging to identify the domain of the user.\n- `@username AS VARCHAR(25) = NULL`: Used for logging to identify the user executing the procedure.\n- `@userId AS INT = NULL`: Used for logging to identify the user ID.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Outputs any exception details encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets `NOCOUNT` to ON to prevent extra result sets from interfering with SELECT statements. Initializes logging-related variables.\n2. **Parameter Normalization**: Converts zero or empty string parameters to NULL for filtering purposes. Generates a correlation ID if not provided and sets default values for machine and process names.\n3. **Logging Preparation**: Constructs a message detailing the input parameters for logging purposes.\n4. **Data Retrieval**: Attempts to retrieve billing group data from `vwBillingGroups` using the provided filters. If a parameter is NULL, it defaults to the column value, effectively ignoring that filter.\n5. **Error Handling**: Catches any errors during data retrieval, logs the error message, and sets a flag to send an email notification.\n6. **Performance Logging**: Calculates the elapsed time for the operation and logs the details using `USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the columns used in the WHERE clause (`GroupID`, `ProviderID`, `SummaryAccountNumber`, `BillingType`) are indexed to optimize query performance.\n- **Parameter Sniffing**: The use of `ISNULL` and `NULLIF` can mitigate parameter sniffing issues by ensuring consistent query plans.\n- **Logging Overhead**: The logging mechanism, especially if it involves writing to a database or sending emails, can introduce additional overhead.\n\n#### 6. Potential Issues or Risks\n- **NULL Handling**: The use of `ISNULL` and `NULLIF` for parameter handling might lead to unexpected results if not carefully managed, especially with `SummaryAccountNumber`.\n- **Error Handling**: The `CATCH` block only captures the error message but does not rethrow the error or handle it further, which might lead to silent failures.\n- **Concurrency**: If multiple users execute this procedure simultaneously, the logging mechanism should be thread-safe to prevent data corruption.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized data access or manipulation.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1825,
      "api_response_id": "chatcmpl-C8alEGbu4IspGGbNlwYmiwu0MRtic"
    },
    "analysis_timestamp": "2025-08-25 19:19:39"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_BillingPeriodByBillingTypeRetrieve",
      "definition": "CREATE PROCEDURE [Billing].[USP_BillingPeriodByBillingTypeRetrieve]\r\n(\r\n\t@billingType AS CHAR(1) = NULL\r\n\t,@billingPeriod AS VARCHAR(6) = NULL\r\n\t,@currentOnly AS BIT = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @billingType = NULLIF(@billingType, ''), @billingPeriod = NULLIF(@billingPeriod, ''), @currentOnly = NULLIF(@currentOnly, 0), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved billing periods', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @billingType AS BILLTYPE, @billingPeriod AS BILLPRD, @currentOnly AS CURR FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT DISTINCT BillingType\r\n\t\t\t,BillingPeriod\r\n\t\t\t,BillingPeriodDescription\r\n\t\t\t,IsCurrentProcessingPeriod\r\n\t\t\t,PublishedBillingPeriod\r\n\t\t\t,FiscalYear\r\n\t\t\t,FiscalYearStart\r\n\t\t\t,FiscalYearEnd\r\n\t\t\t,bp.Active\r\n\t\tFROM Billing.vwBillingPeriodsByBillingType bp\r\n\t\t\tINNER JOIN Invoice.vwInvoices invoice ON bp.BillingPeriod = invoice.InvoiceBillingPeriod\r\n\t\tWHERE BillingType = ISNULL(@billingType, BillingType)\r\n\t\t\tAND BillingPeriod = ISNULL(@billingPeriod, BillingPeriod)\r\n\t\t\tAND IsCurrentProcessingPeriod = ISNULL(@currentOnly, IsCurrentProcessingPeriod)\r\n\t\tORDER BY BillingType ASC, BillingPeriod ASC, IsCurrentProcessingPeriod DESC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve billing periods', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.397000",
      "last_altered": "2025-08-25 16:04:01.397000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@billingType",
        "data_type": "char",
        "mode": "IN",
        "max_length": 1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingPeriod",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 6,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@currentOnly",
        "data_type": "bit",
        "mode": "IN",
        "max_length": 1,
        "precision": 1,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_BillingPeriodByBillingTypeRetrieve",
      "explanation": "#### 1. Overview\n\nThe stored procedure `USP_BillingPeriodByBillingTypeRetrieve` is designed to retrieve billing period information based on specified criteria. It queries a view `Billing.vwBillingPeriodsByBillingType` and joins it with another view `Invoice.vwInvoices` to filter and return billing periods. The procedure also logs the operation details and handles exceptions by capturing error messages and logging them.\n\n#### 2. Complexity Level: Medium\n\nThe procedure involves multiple input parameters, conditional logic, error handling, and logging mechanisms. It interacts with views and uses dynamic SQL constructs like `ISNULL` and `COALESCE`, which add to its complexity. The use of XML for logging input parameters and the integration with a logging procedure further increase its complexity.\n\n#### 3. Input Parameters\n\n- `@billingType AS CHAR(1)`: Specifies the billing type to filter the results.\n- `@billingPeriod AS VARCHAR(6)`: Specifies the billing period to filter the results.\n- `@currentOnly AS BIT`: Indicates whether to filter for the current processing period.\n- `@correlationId AS VARCHAR(128)`: Used for logging to correlate logs with specific operations.\n- `@machineName AS VARCHAR(128)`: The name of the machine executing the procedure, used for logging.\n- `@processName AS VARCHAR(128)`: The name of the process executing the procedure, used for logging.\n- `@domain AS VARCHAR(25)`: The domain of the user executing the procedure, used for logging.\n- `@username AS VARCHAR(25)`: The username of the user executing the procedure, used for logging.\n- `@userId AS INT`: The ID of the user executing the procedure, used for logging.\n- `@exceptionDetails AS VARCHAR(MAX) OUTPUT`: Captures any exception details if an error occurs during execution.\n\n#### 4. Business Logic and Workflow\n\n1. **Parameter Initialization**: The procedure initializes parameters using `NULLIF`, `ISNULL`, and `COALESCE` to handle default values and ensure non-null values for logging.\n2. **Logging Setup**: Prepares variables for logging, including action type, severity, and message details.\n3. **Main Query Execution**: \n   - Retrieves distinct billing periods from `Billing.vwBillingPeriodsByBillingType` joined with `Invoice.vwInvoices`.\n   - Filters results based on `@billingType`, `@billingPeriod`, and `@currentOnly`.\n   - Orders results by `BillingType`, `BillingPeriod`, and `IsCurrentProcessingPeriod`.\n4. **Error Handling**: Uses `TRY...CATCH` to handle exceptions, capturing error messages and setting the severity to 'ERROR'.\n5. **Logging**: Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions and elapsed time.\n\n#### 5. Performance Considerations\n\n- **Indexing**: Ensure that the columns used in the `WHERE` clause (`BillingType`, `BillingPeriod`, `IsCurrentProcessingPeriod`) are indexed to improve query performance.\n- **View Optimization**: The performance of the procedure heavily depends on the efficiency of the views `Billing.vwBillingPeriodsByBillingType` and `Invoice.vwInvoices`.\n- **Logging Overhead**: The logging mechanism, especially if it involves writing to a database, can introduce overhead. Consider asynchronous logging if performance is a concern.\n\n#### 6. Potential Issues or Risks\n\n- **Parameter Defaults**: The use of `NULLIF` and `ISNULL` for parameter defaults may lead to unexpected behavior if not properly documented or understood by users.\n- **Error Handling**: The procedure captures only the error message, which might not be sufficient for debugging complex issues. Consider capturing additional error details like error number and state.\n- **Concurrency**: If the views or underlying tables are large, concurrent executions might lead to performance bottlenecks or locking issues.\n- **Security**: Ensure that the procedure and the views it accesses have appropriate permissions set to prevent unauthorized access to sensitive billing information.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1794,
      "api_response_id": "chatcmpl-C8alQrxSanUhhZadmGtC8R2LUYFT1"
    },
    "analysis_timestamp": "2025-08-25 19:19:48"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_BillingPeriodRetrieve",
      "definition": "CREATE PROCEDURE [Billing].[USP_BillingPeriodRetrieve]\r\n(\r\n\t@billingPeriod AS VARCHAR(6) = NULL\r\n\t,@currentOnly AS BIT = 0\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @billingPeriod = NULLIF(@billingPeriod, ''), @currentOnly = ISNULL(@currentOnly, 0), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved billing periods', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSET @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @billingPeriod AS BILLPRD FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @minPeriod AS VARCHAR(6), @maxPeriod AS VARCHAR(6);\r\n\t\t\r\n\t\tSET @minPeriod = CONVERT(VARCHAR(4), YEAR(DATEADD(M, -6, GETDATE())));\r\n\r\n\t\tIF (MONTH(DATEADD(M, -6, GETDATE())) < 10)\r\n\t\tBEGIN\r\n\t\t\tSET @minPeriod = @minPeriod + '0';\r\n\t\tEND;\r\n\r\n\t\tSET @minPeriod = @minPeriod + CONVERT(VARCHAR(2), MONTH(DATEADD(M, -6, GETDATE())));\r\n\t\tSET @maxPeriod = CONVERT(VARCHAR(4), YEAR(DATEADD(M, 2, GETDATE())));\r\n\r\n\t\tIF (MONTH(DATEADD(M, 2, GETDATE())) < 10)\r\n\t\tBEGIN\r\n\t\t\tSET @maxPeriod = @maxPeriod + '0';\r\n\t\tEND;\r\n\r\n\t\tSET @maxPeriod = @maxPeriod + CONVERT(VARCHAR(2), MONTH(DATEADD(M, 2, GETDATE())));\r\n\r\n\t\tIF (@currentOnly = 1)\r\n\t\tBEGIN\r\n\t\t\tSELECT DISTINCT B.BillingPeriod, B.BillingPeriodDescription, B.Active\r\n\t\t\tFROM Billing.vwBillingPeriods AS B\r\n\t\t\t\tLEFT JOIN Invoice.vwInvoices AS I ON B.BillingPeriod = I.InvoiceBillingPeriod\r\n\t\t\tWHERE B.BillingPeriod >= @minPeriod AND B.BillingPeriod <= @maxPeriod\r\n\t\t\tORDER BY B.BillingPeriod ASC;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tSELECT DISTINCT B.BillingPeriod, B.BillingPeriodDescription, B.Active\r\n\t\t\tFROM Billing.vwBillingPeriods AS B\r\n\t\t\t\tINNER JOIN Invoice.vwInvoices AS I ON B.BillingPeriod = I.InvoiceBillingPeriod\r\n\t\t\tWHERE B.BillingPeriod\t= ISNULL(@billingPeriod, B.BillingPeriod)\r\n\t\t\tORDER BY B.BillingPeriod ASC;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve billing periods', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.400000",
      "last_altered": "2025-08-25 16:04:01.400000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@billingPeriod",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 6,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@currentOnly",
        "data_type": "bit",
        "mode": "IN",
        "max_length": 1,
        "precision": 1,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_BillingPeriodRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_BillingPeriodRetrieve` is designed to retrieve billing periods from a database. It allows for filtering based on a specific billing period or retrieving only current billing periods. The procedure logs its execution details, including any exceptions, to an application log.\n\n#### 2. Complexity Level: Medium\nThe procedure involves conditional logic, dynamic parameter handling, and error management, which adds a moderate level of complexity. It also includes logging functionality and uses both `TRY...CATCH` blocks and XML conversion for logging input parameters.\n\n#### 3. Input Parameters\n- `@billingPeriod AS VARCHAR(6) = NULL`: Optional. Specifies a particular billing period to retrieve.\n- `@currentOnly AS BIT = 0`: Optional. If set to 1, retrieves only current billing periods.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional. Used for logging to correlate logs across systems.\n- `@machineName AS VARCHAR(128) = NULL`: Optional. Used for logging the machine name.\n- `@processName AS VARCHAR(128) = NULL`: Optional. Used for logging the process name.\n- `@domain AS VARCHAR(25) = NULL`: Optional. Used for logging the domain.\n- `@username AS VARCHAR(25) = NULL`: Optional. Used for logging the username.\n- `@userId AS INT = NULL`: Optional. Used for logging the user ID.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output. Captures exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Parameter Initialization**: The procedure initializes parameters, setting defaults where necessary. It generates a new correlation ID if not provided and defaults machine and process names.\n2. **Date Calculation**: It calculates a minimum and maximum billing period based on the current date, adjusting for a range of six months in the past to two months in the future.\n3. **Data Retrieval**:\n   - If `@currentOnly` is set to 1, it retrieves billing periods within the calculated range using a `LEFT JOIN` to include periods without invoices.\n   - Otherwise, it retrieves billing periods matching the specified `@billingPeriod` or all periods if none is specified, using an `INNER JOIN` to ensure periods have associated invoices.\n4. **Error Handling**: Uses a `TRY...CATCH` block to handle exceptions, capturing error messages and setting a flag to send an email notification.\n5. **Logging**: Logs execution details, including input parameters, exceptions, and elapsed time, by calling another stored procedure `USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Index Usage**: Ensure that the `vwBillingPeriods` and `vwInvoices` views are indexed appropriately on `BillingPeriod` and `InvoiceBillingPeriod` to optimize join operations.\n- **Date Calculations**: The use of `DATEADD` and `GETDATE` functions is efficient for calculating date ranges.\n- **Logging Overhead**: The logging mechanism, especially if extensive, could introduce performance overhead. Consider asynchronous logging if performance is critical.\n\n#### 6. Potential Issues or Risks\n- **Parameter Defaults**: The use of defaults and `NULLIF`/`ISNULL` functions could lead to unexpected behavior if not carefully managed, especially with `@billingPeriod`.\n- **Concurrency**: If the procedure is called frequently, the logging mechanism might become a bottleneck, particularly if it involves writing to a shared resource.\n- **Error Handling**: The `CATCH` block does not rethrow exceptions, which might suppress errors that should propagate to calling applications.\n- **Security**: Ensure that the procedure is protected against SQL injection, especially if parameters are used in dynamic SQL (not present here but a general consideration).\n- **Email Notifications**: The `@sendEmail` flag is set but not used within the procedure, indicating a possible oversight or missing implementation for email alerts.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1980,
      "api_response_id": "chatcmpl-C8alaPuLOcpevF8BPaWkH64egeTyc"
    },
    "analysis_timestamp": "2025-08-25 19:20:05"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_ContractCreate",
      "definition": "CREATE PROCEDURE [Billing].[USP_ContractCreate]\r\n(\r\n\t@providerId AS INT\r\n\t,@contractNumber AS VARCHAR(25)\r\n\t,@name AS VARCHAR(100)\r\n\t,@description AS VARCHAR(500) = NULL\r\n\t,@fiscalYearStart AS VARCHAR(8)\r\n\t,@fiscalYearEnd AS VARCHAR(8)\r\n\t,@actualAmount AS DECIMAL(18, 2)\r\n\t,@closeAmount AS DECIMAL(18, 2)\r\n\t,@openAmount AS DECIMAL(18, 2)\r\n\t,@capacityAmount AS DECIMAL(18, 2) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'CREATE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Added contract', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\t\r\n\tSELECT @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA'), @description = NULLIF(@description, '')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'), @userId = ISNULL(@userId, 0);\r\n\t\r\n\tSET @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @providerId AS PRVID, @contractNumber AS CTRTNUM, @name AS NAME, @description AS DSC\r\n\t\t,@fiscalYearStart AS FYSTART, @fiscalYearEnd AS FYEND, @actualAmount AS ACTAMT, @closeAmount AS CLSAMT, @openAmount AS OPENAMT\r\n\t\t,@capacityAmount AS CAPAMT FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Create contract\r\n\t\tINSERT INTO Billing.[Contract](ContractNumber, [Name], [Description], ProviderID, FiscalYearStart, FiscalYearEnd, ActualAmount, CloseAmount, OpenAmount, capacityAmount, CreatedBy)\r\n\t\tVALUES (@contractNumber, @name, @description, @providerId, @fiscalYearStart, @fiscalYearEnd, @actualAmount, @closeAmount, @openAmount, ISNULL(@capacityAmount,0), @userId);\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to add contract', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.407000",
      "last_altered": "2025-08-25 16:04:01.407000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@name",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 100,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@description",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 500,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYearStart",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 8,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYearEnd",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 8,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@actualAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@closeAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@openAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@capacityAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 12,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 13,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 14,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 15,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 16,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 17,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ContractCreate",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ContractCreate` is designed to insert a new contract record into the `Billing.Contract` table. It handles the creation of a contract by accepting various parameters related to the contract details and logs the operation's success or failure. The procedure also manages transaction control and error handling, ensuring that any issues during the insertion process are caught and logged appropriately.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves transaction management with `BEGIN TRAN`, `COMMIT`, and `ROLLBACK` statements.\n- It includes error handling using `TRY...CATCH` blocks.\n- It logs detailed information about the operation, including input parameters and execution details.\n- It uses dynamic elements such as generating unique identifiers and handling optional parameters.\n\n#### 3. Input Parameters\n- `@providerId AS INT`: The ID of the provider associated with the contract.\n- `@contractNumber AS VARCHAR(25)`: The unique identifier for the contract.\n- `@name AS VARCHAR(100)`: The name of the contract.\n- `@description AS VARCHAR(500) = NULL`: A description of the contract, optional.\n- `@fiscalYearStart AS VARCHAR(8)`: The start of the fiscal year for the contract.\n- `@fiscalYearEnd AS VARCHAR(8)`: The end of the fiscal year for the contract.\n- `@actualAmount AS DECIMAL(18, 2)`: The actual amount associated with the contract.\n- `@closeAmount AS DECIMAL(18, 2)`: The closed amount for the contract.\n- `@openAmount AS DECIMAL(18, 2)`: The open amount for the contract.\n- `@capacityAmount AS DECIMAL(18, 2) = NULL`: The capacity amount, optional.\n- `@correlationId AS VARCHAR(128) = NULL`: A unique identifier for correlating logs, optional.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, optional.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, optional.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user, optional.\n- `@username AS VARCHAR(25) = NULL`: The username of the person executing the procedure, optional.\n- `@userId AS INT = NULL`: The ID of the user executing the procedure, optional.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n- **Initialization**: Sets up initial variables for logging and transaction management.\n- **Parameter Handling**: Ensures optional parameters have default values if not provided.\n- **Transaction Management**: Begins a transaction to ensure atomicity of the contract creation process.\n- **Contract Insertion**: Attempts to insert a new record into the `Billing.Contract` table with the provided parameters.\n- **Error Handling**: Catches any errors during the insertion process, rolls back the transaction if necessary, and sets error-related variables.\n- **Logging**: Calls another stored procedure `USP_AppLogCreate` to log the operation's details, including success or failure, input parameters, and execution time.\n\n#### 5. Performance Considerations\n- **Transaction Scope**: The transaction is kept minimal, only covering the insertion operation, which is good for performance.\n- **Logging Overhead**: The detailed logging, especially converting parameters to XML, may introduce some overhead, but it is necessary for traceability.\n- **Concurrency**: The use of transactions ensures data consistency but may lead to blocking if the table is heavily accessed.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: While the procedure handles errors, it does not re-throw them, which might be necessary for some applications to handle exceptions at a higher level.\n- **Parameter Validation**: There is no explicit validation of input parameters, which could lead to data integrity issues if invalid data is passed.\n- **Concurrency and Locking**: If the `Billing.Contract` table is frequently accessed, the transaction could lead to locking issues, affecting performance.\n- **Logging Dependency**: The procedure relies on the `USP_AppLogCreate` stored procedure for logging. If this procedure fails or is unavailable, logging will not occur, potentially losing important trace information.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1994,
      "api_response_id": "chatcmpl-C8alrlPKmJUOyQOWwWoVfAHcZh2pq"
    },
    "analysis_timestamp": "2025-08-25 19:20:19"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_ContractDelete",
      "definition": "CREATE PROCEDURE [Billing].[USP_ContractDelete]\r\n(\r\n\t@contractId AS INT\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'DELETE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Deleted Contract', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\t\r\n\tSELECT @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'), @userId = ISNULL(@userId, 0);\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @contractId AS CTRTID FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\tIF NOT EXISTS (SELECT * FROM Invoice.vwInvoiceGroupContracts WHERE ContractID = @contractId)\r\n\t\tBEGIN\r\n\t\t\t-- Delete BillingGroup Contract\r\n\t\t\tDELETE FROM Billing.BillingGroupContract WHERE ContractID = @contractId;\r\n\r\n\t\t\t-- Delete ContractLines History\r\n\t\t\tDELETE FROM Billing.HistoricalContractLine WHERE ContractLineID IN (SELECT ContractLineID FROM Billing.ContractLine WHERE ContractID = @contractId);\r\n\r\n\t\t\t-- Delete ContractLines\r\n\t\t\tDELETE FROM Billing.ContractLine WHERE ContractID = @contractId;\r\n\r\n\t\t\t-- Delete contract\r\n\t\t\tDELETE FROM Billing.[Contract] WHERE ContractID = @contractId;\r\n\t\tEND;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to delete contract', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.417000",
      "last_altered": "2025-08-25 16:04:01.417000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ContractDelete",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ContractDelete` is designed to delete a contract and its associated records from a billing system. It performs a series of deletions across multiple tables related to contracts, ensuring that all associated data is removed if the contract is not linked to any invoice groups. The procedure also logs the operation's details, including any exceptions that occur during execution.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves multiple table operations, including conditional checks and cascading deletions.\n- It includes error handling with transaction management to ensure data integrity.\n- It logs detailed information about the operation, including performance metrics and error details.\n\n#### 3. Input Parameters\n- `@contractId AS INT`: The unique identifier of the contract to be deleted.\n- `@correlationId AS VARCHAR(128) = NULL`: An optional identifier for correlating logs, defaulting to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaulting to the server name.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, defaulting to the schema and procedure name.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the person executing the procedure.\n- `@userId AS INT = NULL`: The user ID of the person executing the procedure, defaulting to 0 if not provided.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception messages that occur during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: The procedure begins by setting `NOCOUNT ON` to prevent extra result sets from interfering with the procedure's output. It initializes several variables for logging and transaction management.\n2. **Parameter Defaults**: It assigns default values to parameters if they are not provided, such as generating a new GUID for `@correlationId`.\n3. **Transaction Management**: A transaction is started with a unique name generated using `NEWID()`.\n4. **Conditional Deletion**: The procedure checks if the contract is not associated with any invoice groups using a `NOT EXISTS` condition. If true, it proceeds to delete related records:\n   - Deletes from `Billing.BillingGroupContract`.\n   - Deletes historical contract lines from `Billing.HistoricalContractLine`.\n   - Deletes contract lines from `Billing.ContractLine`.\n   - Deletes the contract from `Billing.[Contract]`.\n5. **Error Handling**: If an error occurs, the transaction is rolled back, and error details are captured.\n6. **Logging**: After the transaction, the procedure calculates the elapsed time and logs the operation using `dbo.USP_AppLogCreate`, including any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Scope**: The procedure uses a transaction to ensure atomicity, which is crucial for maintaining data integrity but can lock resources and affect performance if the transaction scope is large or if there are many concurrent executions.\n- **Index Usage**: The performance of the `DELETE` operations depends on the presence and efficiency of indexes on the `ContractID` and `ContractLineID` columns.\n- **Logging Overhead**: The detailed logging, while useful for auditing and debugging, can introduce additional overhead, especially if the logging table is heavily accessed.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: The procedure may face concurrency issues if multiple instances attempt to delete the same contract simultaneously, leading to potential deadlocks or blocking.\n- **Data Integrity**: If the procedure is interrupted or fails after some deletions but before completion, it could leave the database in an inconsistent state unless the transaction is properly rolled back.\n- **Error Handling**: While the procedure captures and logs errors, it does not re-throw them, which might be necessary for some applications to handle exceptions appropriately at a higher level.\n- **Scalability**: As the volume of data grows, the performance of the procedure may degrade if the underlying tables are not properly indexed or if the transaction scope is not optimized.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1802,
      "api_response_id": "chatcmpl-C8am5VfTGZlqBS1swljyGyuvqNXrd"
    },
    "analysis_timestamp": "2025-08-25 19:20:32"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_ContractLineCreate",
      "definition": "CREATE PROCEDURE [Billing].[USP_ContractLineCreate]\r\n(\r\n\t@contractId AS INT\r\n\t,@fiscalYear AS VARCHAR(4)\r\n\t,@commodityLine AS INT\r\n\t,@accountingLine AS INT\r\n\t,@budgetCode AS VARCHAR(4)\r\n\t,@objectCode AS VARCHAR(3)\r\n\t,@uoa AS VARCHAR(3)\r\n\t,@actualAmount AS DECIMAL(18, 2)\r\n\t,@closeAmount AS DECIMAL(18, 2)\r\n\t,@openAmount AS DECIMAL(18, 2)\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'CREATE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Added contract line', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\t\r\n\tSELECT @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'), @userId = ISNULL(@userId, 0);\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @contractId AS CTRTID, @fiscalYear AS FY, @commodityLine AS COMMLINE, @accountingLine AS ACCTLINE\r\n\t\t,@budgetCode AS BCODE, @objectCode AS OCODE, @uoa AS UA, @actualAmount AS ACTAMT, @closeAmount AS CLSAMT, @openAmount AS OPENAMT FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Create contract line\r\n\t\tINSERT INTO Billing.ContractLine(ContractID, FiscalYear, CommodityLine, AccountingLine, BudgetCode, ObjectCode, UoA\r\n\t\t\t,ActualAmount, CloseAmount, OpenAmount, CreatedBy)\r\n\t\tVALUES (@contractId, @fiscalYear, @commodityLine, @accountingLine, @budgetCode, @objectCode, @uoa\r\n\t\t\t,@actualAmount, @closeAmount, @actualAmount, @userId);\r\n\t\t\t\r\n\t\tUPDATE Billing.[Contract]\r\n\t\tSET\tActualAmount = ISNULL(b.ActualAmount, 0)\r\n\t\t\t,CloseAmount = ISNULL(b.CloseAmount, 0)\r\n\t\t\t,OpenAmount = ISNULL(b.OpenAmount, 0)\r\n\t\t\t,ModifiedDate = GETDATE()\r\n\t\t\t,ModifiedBy = @userId\r\n\t\tFROM (SELECT SUM(ISNULL(ActualAmount, 0)) AS ActualAmount\r\n\t\t\t\t,SUM(ISNULL(CloseAmount, 0)) AS CloseAmount\r\n\t\t\t\t,SUM(ISNULL(OpenAmount, 0)) AS OpenAmount\r\n\t\t\tFROM Billing.ContractLine\r\n\t\t\tWHERE ContractID = @contractId) AS b\r\n\t\tWHERE ContractID = @contractId;\r\n\r\n\t\t-- insert into Billing.historicalcontract\r\n\t\tEXEC Billing.USP_HistoricalContractLineInsert @@IDENTITY, 1, @username, 0, @actualAmount, 0;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to add contract line', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.420000",
      "last_altered": "2025-08-25 16:04:01.420000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@commodityLine",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@accountingLine",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@budgetCode",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@objectCode",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 3,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@uoa",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 3,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@actualAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@closeAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@openAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 12,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 13,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 14,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 15,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 16,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 17,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ContractLineCreate",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ContractLineCreate` is designed to insert a new contract line into the `Billing.ContractLine` table and update the corresponding contract's financial summary in the `Billing.Contract` table. It also logs the operation and handles exceptions by rolling back transactions and logging errors. Additionally, it records historical data by calling another stored procedure.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple operations, including data insertion, updates, transaction management, error handling, and logging. The use of transactions and error handling increases its complexity, but the logic is straightforward and well-structured.\n\n#### 3. Input Parameters\n- `@contractId AS INT`: The identifier for the contract to which the line belongs.\n- `@fiscalYear AS VARCHAR(4)`: The fiscal year for the contract line.\n- `@commodityLine AS INT`: Identifier for the commodity line.\n- `@accountingLine AS INT`: Identifier for the accounting line.\n- `@budgetCode AS VARCHAR(4)`: Code representing the budget.\n- `@objectCode AS VARCHAR(3)`: Code representing the object.\n- `@uoa AS VARCHAR(3)`: Unit of account.\n- `@actualAmount AS DECIMAL(18, 2)`: Actual amount for the contract line.\n- `@closeAmount AS DECIMAL(18, 2)`: Close amount for the contract line.\n- `@openAmount AS DECIMAL(18, 2)`: Open amount for the contract line.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional correlation ID for logging.\n- `@machineName AS VARCHAR(128) = NULL`: Optional machine name for logging.\n- `@processName AS VARCHAR(128) = NULL`: Optional process name for logging.\n- `@domain AS VARCHAR(25) = NULL`: Optional domain for logging.\n- `@username AS VARCHAR(25) = NULL`: Optional username for logging.\n- `@userId AS INT = NULL`: Optional user ID for logging and record creation.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter for capturing exception details.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets up variables for logging and transaction management.\n2. **Parameter Defaults**: Assigns default values to optional parameters if they are not provided.\n3. **Transaction Start**: Begins a transaction to ensure atomicity.\n4. **Insert Contract Line**: Inserts a new record into `Billing.ContractLine` with the provided details.\n5. **Update Contract Summary**: Updates the `Billing.Contract` table to reflect the new financial totals based on the inserted contract line.\n6. **Historical Logging**: Calls `Billing.USP_HistoricalContractLineInsert` to log the historical data of the contract line.\n7. **Transaction Commit**: Commits the transaction if all operations succeed.\n8. **Error Handling**: Catches exceptions, rolls back the transaction if necessary, and sets error details for logging.\n9. **Logging**: Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Management**: The use of transactions ensures data integrity but can lock resources, potentially impacting performance if the transaction duration is long.\n- **Indexing**: Ensure that `ContractID` and other frequently queried columns are indexed to optimize the `UPDATE` and `SELECT` operations.\n- **Concurrency**: The procedure may face concurrency issues if multiple instances attempt to update the same contract simultaneously.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: While exceptions are caught and logged, the procedure does not re-throw them, which might lead to silent failures if not monitored.\n- **Data Integrity**: The procedure assumes that the `ContractID` exists in the `Billing.Contract` table. If not, the `UPDATE` statement will not affect any rows, potentially leading to data inconsistency.\n- **Parameter Validation**: There is no validation for input parameters, which could lead to incorrect data being inserted if invalid values are provided.\n- **Logging Overhead**: Extensive logging, especially with large `@messageDetails`, could impact performance and storage if not managed properly.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2124,
      "api_response_id": "chatcmpl-C8amHQPuDCtCyeLT9fr2qpDwVtR6o"
    },
    "analysis_timestamp": "2025-08-25 19:20:45"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_ContractLineDelete",
      "definition": "CREATE PROCEDURE [Billing].[USP_ContractLineDelete]\r\n(\r\n\t@contractLineId\tAS INT\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @contractId AS INT, @action AS VARCHAR(25) = 'DELETE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Deleted contract line'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tSELECT @contractId = ContractID\r\n\tFROM Billing.ContractLine\r\n\tWHERE ContractLineID = @contractLineId;\r\n\t\r\n\tSELECT @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'), @userId = ISNULL(@userId, 0);\r\n\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @contractId AS CTRTID, @contractLineId AS CTRTLINEID FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\t\t\r\n\t\tIF NOT EXISTS (SELECT * FROM Invoice.InvoiceContractLine WHERE ContractLineID = @contractLineId)\r\n\t\tBEGIN\r\n\t\t\t-- Update history contract line\r\n\t\t\tDELETE FROM Billing.HistoricalContractLine WHERE ContractLineID = @contractLineId;\r\n\r\n\t\t\t-- Update contract line\r\n\t\t\tDELETE FROM Billing.ContractLine WHERE ContractLineID = @contractLineId;\r\n\r\n\t\t\t-- update contract table since contract amounts are from contract lines\r\n\t\t\tUPDATE Billing.[Contract]\r\n\t\t\tSET\tActualAmount = ISNULL(b.ActualAmount, 0)\r\n\t\t\t\t,CloseAmount = ISNULL(b.CloseAmount, 0)\r\n\t\t\t\t,OpenAmount = ISNULL(b.OpenAmount, 0)\r\n\t\t\t\t,ModifiedDate = GETDATE()\r\n\t\t\t\t,ModifiedBy = @userId\r\n\t\t\tFROM (SELECT SUM(ISNULL(ActualAmount, 0)) AS ActualAmount\r\n\t\t\t\t\t,SUM(ISNULL(CloseAmount, 0)) AS CloseAmount\r\n\t\t\t\t\t,SUM(ISNULL(OpenAmount, 0)) AS OpenAmount\r\n\t\t\t\tFROM Billing.ContractLine\r\n\t\t\t\tWHERE ContractID = @contractId) AS b\r\n\t\t\tWHERE ContractID = @contractId;\r\n\t\tEND;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity\t= 'ERROR', @message\t= 'Failed to delete contract line', @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.427000",
      "last_altered": "2025-08-25 16:04:01.427000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@contractLineId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ContractLineDelete",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ContractLineDelete` is designed to delete a contract line from the `Billing.ContractLine` table in a Microsoft SQL Server database. It also updates related tables and logs the operation. The procedure ensures that the contract line is not associated with any invoices before deletion. If the deletion is successful, it updates the contract's financial amounts and logs the operation. If an error occurs, it rolls back the transaction and logs the error details.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including transaction management, conditional logic, and logging. It handles potential errors using a TRY-CATCH block and updates multiple tables, which adds to its complexity.\n\n#### 3. Input Parameters\n- `@contractLineId AS INT`: The ID of the contract line to be deleted. This is the primary input for the procedure.\n- `@correlationId AS VARCHAR(128) = NULL`: An optional identifier for correlating logs and operations.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, used for logging.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, used for logging.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure, used for logging.\n- `@username AS VARCHAR(25) = NULL`: The username of the person executing the procedure, used for logging.\n- `@userId AS INT = NULL`: The ID of the user executing the procedure, used for updating records and logging.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets up variables for logging and transaction management.\n2. **Contract Line Retrieval**: Retrieves the `ContractID` associated with the `@contractLineId`.\n3. **Parameter Defaults**: Sets default values for optional parameters if they are not provided.\n4. **XML Logging Preparation**: Prepares a log entry in XML format with the contract and contract line IDs.\n5. **Transaction Start**: Begins a transaction to ensure atomicity.\n6. **Existence Check**: Checks if the contract line is associated with any invoices. If it is, the deletion is skipped.\n7. **Deletion**: Deletes the contract line from both the historical and current tables if no invoices are associated.\n8. **Contract Update**: Updates the contract's financial amounts based on the remaining contract lines.\n9. **Transaction Commit**: Commits the transaction if all operations succeed.\n10. **Error Handling**: Catches any errors, rolls back the transaction if necessary, and prepares error details for logging.\n11. **Logging**: Calls another procedure to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Management**: The use of transactions ensures data integrity but can lock resources, potentially affecting performance if the procedure is executed frequently or on large datasets.\n- **Index Usage**: The procedure relies on the existence of appropriate indexes on `ContractLineID` and `ContractID` for efficient data retrieval and deletion.\n- **Logging Overhead**: The logging mechanism, especially with XML conversion, can add overhead, particularly if the procedure is called frequently.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: The procedure may face concurrency issues if multiple instances attempt to delete or update the same contract line simultaneously.\n- **Error Handling**: While the procedure includes error handling, it does not re-throw exceptions, which might be necessary for some applications to handle errors appropriately.\n- **Data Integrity**: If the procedure is interrupted after deleting from `HistoricalContractLine` but before updating the `Contract` table, it could leave the database in an inconsistent state unless the transaction is properly rolled back.\n- **Logging Dependency**: The procedure depends on the `USP_AppLogCreate` procedure for logging, which must be correctly implemented and available to avoid failures in logging operations.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1919,
      "api_response_id": "chatcmpl-C8amU0WwW6ZGrTH24MyHR29V8dd5I"
    },
    "analysis_timestamp": "2025-08-25 19:21:02"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_ContractLineRetrieve",
      "definition": "CREATE PROCEDURE [Billing].[USP_ContractLineRetrieve]\r\n(\r\n\t@contractLineId AS INT = NULL\r\n\t,@contractId AS INT = NULL\r\n\t,@contractNumber AS VARCHAR(25) = NULL\r\n\t,@fiscalYear AS VARCHAR(4) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @contractLineId = NULLIF(@contractLineId, 0), @contractId = NULLIF(@contractId, 0), @contractNumber = NULLIF(@contractNumber, '')\r\n\t\t,@fiscalYear = NULLIF(@fiscalYear, ''), @userId = ISNULL(@userId, 0), @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved utility provider contract line(s)'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @contractLineId AS CLID, @contractId AS CID, @contractNumber AS NUM, @fiscalYear AS FY FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT ContractLineID\r\n\t\t\t,FiscalYear\r\n\t\t\t,ContractID\r\n\t\t\t,ContractNumber\r\n\t\t\t,CommodityLine\r\n\t\t\t,AccountingLine\r\n\t\t\t,BudgetCode\r\n\t\t\t,ObjectCode\r\n\t\t\t,UoA\r\n\t\t\t,ActualAmount\r\n\t\t\t,Billing.UDF_GetContractLineAmountPaid(ContractLineID, GETDATE()) AS CloseAmount\r\n\t\t\t,ActualAmount - Billing.UDF_GetContractLineAmountPaid(ContractLineID, GETDATE()) AS OpenAmount\r\n\t\t\t,AvailableAmount\r\n\t\t\t,CreatedDate\r\n\t\t\t,CreatedBy\r\n\t\t\t,ModifiedDate\r\n\t\t\t,ModifiedBy\r\n\t\t\t,Active\r\n\t\t\t,Billing.UDF_GetContractLineAmountPaid(ContractLineID, GETDATE()) AS AmountPaid\r\n\t\tFROM Billing.vwContractLines\r\n\t\tWHERE ContractLineID = ISNULL(@contractLineId, ContractLineID)\r\n\t\t\tAND ContractID = ISNULL(@contractId, ContractID)\r\n\t\t\tAND ContractNumber = ISNULL(@contractNumber, ContractNumber)\r\n\t\t\tAND FiscalYear = ISNULL(@fiscalYear, FiscalYear)\r\n\t\tORDER BY FiscalYear, CommodityLine ASC, AccountingLine ASC;\r\n\r\n\t\t-- For History Popup\r\n\t\tSELECT TransactionType\r\n\t\t\t,ContractLineID\r\n\t\t\t,ActualAmount\r\n\t\t\t,StartDate\r\n\t\t\t,EndDate\r\n\t\t\t,ModifiedBy\r\n\t\t\t,ActualAmount + ChangeAmount AS TotalAmount\r\n\t\t\t,ChangeAmount\r\n\t\tFROM Billing.HistoricalContractLine\r\n\t\tWHERE ContractLineId = @ContractLineID AND TransactionType = 1;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve utility provider contract line(s)', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.437000",
      "last_altered": "2025-08-25 16:04:01.437000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@contractLineId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ContractLineRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `[Billing].[USP_ContractLineRetrieve]` is designed to retrieve contract line information from a billing system. It accepts various input parameters to filter the data and returns details about contract lines, including financial information and historical transaction data. The procedure also logs the operation's execution details, including any exceptions encountered.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple operations, including data retrieval, conditional logic, error handling, and logging. It interacts with views and user-defined functions, which adds to its complexity. The use of dynamic parameters and error handling mechanisms further increases its complexity.\n\n#### 3. Input Parameters\n- `@contractLineId AS INT = NULL`: Filters results by a specific contract line ID.\n- `@contractId AS INT = NULL`: Filters results by a specific contract ID.\n- `@contractNumber AS VARCHAR(25) = NULL`: Filters results by a contract number.\n- `@fiscalYear AS VARCHAR(4) = NULL`: Filters results by a fiscal year.\n- `@correlationId AS VARCHAR(128) = NULL`: Used for logging purposes; defaults to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: Used for logging; defaults to the server name.\n- `@processName AS VARCHAR(128) = NULL`: Used for logging; defaults to the procedure's schema and name.\n- `@domain AS VARCHAR(25) = NULL`: Used for logging purposes.\n- `@username AS VARCHAR(25) = NULL`: Used for logging purposes.\n- `@userId AS INT = NULL`: Used for logging; defaults to 0 if not provided.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Captures exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Parameter Initialization**: The procedure initializes parameters, setting defaults where necessary. It uses `NULLIF` to convert zero or empty values to `NULL` and `ISNULL`/`COALESCE` to set defaults for logging-related parameters.\n   \n2. **Data Retrieval**:\n   - **Contract Line Data**: Retrieves contract line details from the `Billing.vwContractLines` view, applying filters based on the input parameters. It calculates the `CloseAmount` and `OpenAmount` using a user-defined function `Billing.UDF_GetContractLineAmountPaid`.\n   - **Historical Data**: Retrieves historical transaction data from `Billing.HistoricalContractLine` for the specified contract line ID and transaction type.\n\n3. **Error Handling**: Uses a `TRY...CATCH` block to handle exceptions. If an error occurs, it captures the error message and sets the severity to 'ERROR'.\n\n4. **Logging**: After execution, it logs the operation details using the `dbo.USP_AppLogCreate` procedure, including the correlation ID, machine name, process name, action, severity, message, and any exception details.\n\n#### 5. Performance Considerations\n- **Index Usage**: The performance of the SELECT queries depends on the indexing of the `vwContractLines` view and `HistoricalContractLine` table. Proper indexing on `ContractLineID`, `ContractID`, `ContractNumber`, and `FiscalYear` can improve query performance.\n- **Function Calls**: The repeated calls to `Billing.UDF_GetContractLineAmountPaid` for each row can be costly if the function is complex or if the dataset is large.\n- **Logging Overhead**: The logging operation at the end of the procedure can add overhead, especially if the logging table is heavily used or lacks proper indexing.\n\n#### 6. Potential Issues or Risks\n- **Parameter Defaults**: The use of `NULLIF` and `ISNULL` may lead to unintended behavior if zero or empty values are valid inputs.\n- **Concurrency**: If the underlying tables or views are subject to high concurrency, it may lead to locking issues or performance degradation.\n- **Error Handling**: The `CATCH` block captures only the error message, which may not provide enough context for debugging complex issues.\n- **Function Dependency**: The reliance on `Billing.UDF_GetContractLineAmountPaid` means any changes to this function could impact the procedure's behavior or performance.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized data access.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2076,
      "api_response_id": "chatcmpl-C8amlF91SQdvFtorDgCR9qok7DQs1"
    },
    "analysis_timestamp": "2025-08-25 19:21:18"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_ContractLineUpdate",
      "definition": "CREATE PROCEDURE [Billing].[USP_ContractLineUpdate]\r\n(\r\n\t@contractLineId AS INT\r\n\t,@contractId AS INT\r\n\t,@fiscalYear AS VARCHAR(4)\r\n\t,@commodityLine AS INT\r\n\t,@accountingLine AS INT\r\n\t,@budgetCode AS VARCHAR(4)\r\n\t,@objectCode AS VARCHAR(3)\r\n\t,@uoa AS VARCHAR(3)\r\n\t,@actualAmount AS DECIMAL(18, 2)\r\n\t,@closeAmount AS DECIMAL(18, 2)\r\n\t,@openAmount AS DECIMAL(18, 2)\r\n\t,@changeAmount AS DECIMAL(18, 2)\r\n\t,@active AS BIT\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25), @severity AS VARCHAR(25), @message AS VARCHAR(255), @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT\r\n\t\t,@tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\t\r\n\tSELECT @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA')\r\n\t\t,@action = 'UPDATE', @severity = 'INFO', @message = 'Updated contract line', @sendEmail = 0, @userId = ISNULL(@userId, 0)\r\n\t\t,@messageDetails = CONVERT(VARCHAR(MAX), (SELECT @contractLineId AS CLINEID, @contractId AS CTRTID, @fiscalYear AS FY\r\n\t\t\t,@commodityLine AS COMMLINE, @accountingLine AS ACCTLINE, @budgetCode AS BCODE, @objectCode AS OCODE, @uoa AS UA\r\n\t\t\t,@actualAmount AS ACTAMT, @closeAmount AS CLSAMT, @openAmount AS OPENAMT, @active AS ACT FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Update contract line\r\n\t\tUPDATE Billing.ContractLine\r\n\t\tSET ContractID = @contractId\r\n\t\t\t,FiscalYear = @fiscalYear\r\n\t\t\t,CommodityLine = @commodityLine\r\n\t\t\t,AccountingLine\t= @accountingLine\r\n\t\t\t,BudgetCode\t= @budgetCode\r\n\t\t\t,ObjectCode = @objectCode\r\n\t\t\t,UoA = @uoa\r\n\t\t\t,ActualAmount = @actualAmount + @changeAmount\r\n\t\t\t,CloseAmount = @closeAmount\r\n\t\t\t,OpenAmount = @openAmount + @changeAmount\r\n\t\t\t,ModifiedDate = GETDATE()\r\n\t\t\t,ModifiedBy\t= @userId\r\n\t\tWHERE ContractLineID = @contractLineId;\r\n\r\n\t\tUPDATE C\r\n\t\tSET\tC.ActualAmount = ISNULL(B.ActualAmount, 0)\r\n\t\t\t,C.CloseAmount = ISNULL(B.CloseAmount, 0)\r\n\t\t\t,C.OpenAmount = ISNULL(B.OpenAmount, 0)\r\n\t\t\t,C.ModifiedDate = GETDATE()\r\n\t\t\t,C.ModifiedBy = @userId\r\n\t\tFROM Billing.[Contract] AS C\r\n\t\t\tINNER JOIN (SELECT ContractID, SUM(ISNULL(ActualAmount, 0)) AS ActualAmount\r\n\t\t\t\t,SUM(ISNULL(CloseAmount, 0)) AS CloseAmount\r\n\t\t\t\t,SUM(ISNULL(OpenAmount, 0)) AS OpenAmount\r\n\t\t\tFROM Billing.ContractLine\r\n\t\t\tGROUP BY ContractID) AS B ON C.ContractID = B.ContractID\r\n\t\tWHERE C.ContractID = @contractId;\r\n\r\n\t\tEXEC Billing.USP_HistoricalContractLineInsert @contractLineId, 1, @username, @actualAmount, @changeAmount, 0;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to update contract line', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.443000",
      "last_altered": "2025-08-25 16:04:01.443000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@contractLineId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@commodityLine",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@accountingLine",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@budgetCode",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@objectCode",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 3,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@uoa",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 3,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@actualAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@closeAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@openAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@changeAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 12,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@active",
        "data_type": "bit",
        "mode": "IN",
        "max_length": 1,
        "precision": 1,
        "scale": 0,
        "ordinal_position": 13,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 14,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 15,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 16,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 17,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 18,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 19,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 20,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ContractLineUpdate",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ContractLineUpdate` is designed to update a contract line in the `Billing.ContractLine` table. It also updates the corresponding contract totals in the `Billing.Contract` table and logs the operation in an application log. Additionally, it records historical changes by calling another stored procedure, `USP_HistoricalContractLineInsert`. The procedure handles exceptions by rolling back transactions and logging error details.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple operations, including updates to two tables, transaction management, error handling, and logging. The complexity arises from the need to maintain data integrity across related tables and ensure proper logging and error handling.\n\n#### 3. Input Parameters\n- `@contractLineId AS INT`: The identifier for the contract line to be updated.\n- `@contractId AS INT`: The identifier for the contract associated with the contract line.\n- `@fiscalYear AS VARCHAR(4)`: The fiscal year for the contract line.\n- `@commodityLine AS INT`: The commodity line number.\n- `@accountingLine AS INT`: The accounting line number.\n- `@budgetCode AS VARCHAR(4)`: The budget code associated with the contract line.\n- `@objectCode AS VARCHAR(3)`: The object code for the contract line.\n- `@uoa AS VARCHAR(3)`: Unit of account.\n- `@actualAmount AS DECIMAL(18, 2)`: The actual amount for the contract line.\n- `@closeAmount AS DECIMAL(18, 2)`: The close amount for the contract line.\n- `@openAmount AS DECIMAL(18, 2)`: The open amount for the contract line.\n- `@changeAmount AS DECIMAL(18, 2)`: The change amount to be applied to the actual and open amounts.\n- `@active AS BIT`: Indicates if the contract line is active.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional correlation ID for logging.\n- `@machineName AS VARCHAR(128) = NULL`: Optional machine name for logging.\n- `@processName AS VARCHAR(128) = NULL`: Optional process name for logging.\n- `@domain AS VARCHAR(25) = NULL`: Optional domain for logging.\n- `@username AS VARCHAR(25) = NULL`: Optional username for logging.\n- `@userId AS INT = NULL`: Optional user ID for logging.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter for capturing exception details.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets up variables for logging and transaction management. Generates a unique transaction name and correlation ID if not provided.\n2. **Transaction Start**: Begins a transaction to ensure atomicity of the update operations.\n3. **Update Contract Line**: Updates the `Billing.ContractLine` table with the provided parameters, adjusting the `ActualAmount` and `OpenAmount` by the `changeAmount`.\n4. **Update Contract Totals**: Updates the `Billing.Contract` table with aggregated totals from the `Billing.ContractLine` table for the specified contract.\n5. **Historical Logging**: Calls `USP_HistoricalContractLineInsert` to log the change in a historical table.\n6. **Transaction Commit**: Commits the transaction if no errors occur.\n7. **Error Handling**: Catches exceptions, rolls back the transaction if necessary, and sets error details for logging.\n8. **Logging**: Logs the operation details, including any exceptions, using `USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Transaction Scope**: The procedure uses a transaction to ensure data integrity, which can lock resources and affect performance if not managed properly.\n- **Indexing**: Ensure that `ContractLineID` and `ContractID` are indexed to optimize update and join operations.\n- **Concurrency**: The procedure may face concurrency issues if multiple updates occur simultaneously on the same contract or contract line.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: While the procedure handles exceptions, it logs errors without re-throwing them, which might mask issues if not monitored properly.\n- **Data Integrity**: The procedure assumes that the `changeAmount` is correctly calculated and applied, which could lead to incorrect financial data if misused.\n- **Logging Overhead**: Extensive logging, especially with large `@messageDetails`, can impact performance and storage.\n- **Default Values**: Defaulting `@userId` to 0 might lead to incorrect audit trails if not properly managed.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2311,
      "api_response_id": "chatcmpl-C8an1wWp0aYvDaZBRNLlUfjd2bW1p"
    },
    "analysis_timestamp": "2025-08-25 19:21:38"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_ContractRetrieve",
      "definition": "CREATE PROCEDURE [Billing].[USP_ContractRetrieve]\r\n(\r\n\t@providerId AS INT = NULL\r\n\t,@contractId AS INT = NULL\r\n\t,@contractNumber AS VARCHAR(25) = NULL\r\n\t,@groupId AS INT = NULL\r\n\t,@fiscalYear AS VARCHAR(4) = NULL\r\n\t,@activeOnly AS BIT = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @providerId = NULLIF(@providerId, 0), @contractId = NULLIF(@contractId, 0), @contractNumber = NULLIF(@contractNumber, '')\r\n\t\t,@fiscalYear = NULLIF(@fiscalYear, ''), @activeOnly = ISNULL(@activeOnly, 0), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved utility provider contracts', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @providerId AS PRVID, @fiscalYear AS FY, @groupId AS GRPID, @contractId AS ID, @contractNumber AS NUM\r\n\t\t,@activeOnly AS ACT FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @fiscalYearStart AS VARCHAR(8);\r\n\r\n\t\tIF (ISNULL(@fiscalYear, '') <> '')\r\n\t\tBEGIN\r\n\t\t\tSET @fiscalYearStart = CONVERT(VARCHAR(4), (CONVERT(INT, @fiscalYear) - 1)) + '0701';\r\n\t\tEND;\r\n\r\n\t\tDECLARE @tmpContracts AS TABLE (ContractID INT NOT NULL);\r\n\r\n\t\tIF (ISNULL(@groupId, 0) > 0)\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO @tmpContracts (ContractID)\r\n\t\t\tSELECT DISTINCT ContractID\r\n\t\t\tFROM Billing.vwBillingGroupContracts\r\n\t\t\tWHERE GroupID = ISNULL(@groupId, GroupID)\r\n\t\t\t\tAND FiscalYear = CASE WHEN ISNULL(@groupId, 0) > 0 THEN ISNULL(@fiscalYear, FiscalYear) ELSE FiscalYear END\r\n\t\t\t\tAND Active = @activeOnly;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO @tmpContracts (ContractID)\r\n\t\t\tSELECT DISTINCT ContractID\r\n\t\t\tFROM Billing.vwContracts;\r\n\t\tEND;\r\n\r\n\t\tSELECT C.ContractID\r\n\t\t\t,C.ContractNumber\r\n\t\t\t,C.[Name]\r\n\t\t\t,C.[Description]\r\n\t\t\t,C.ProviderID\r\n\t\t\t,C.FiscalYearStart\r\n\t\t\t,C.FiscalYearEnd\r\n\t\t\t,C.ActualAmount\r\n\t\t\t,Billing.UDF_GetContractAmountPaid(C.ContractID, GETDATE()) AS CloseAmount\r\n\t\t\t,C.ActualAmount - Billing.UDF_GetContractAmountPaid(C.ContractID, GETDATE()) AS OpenAmount\r\n\t\t\t,C.AvailableAmount\r\n\t\t\t,C.CreatedDate\r\n\t\t\t,C.CreatedBy\r\n\t\t\t,C.ModifiedDate\r\n\t\t\t,C.ModifiedBy\r\n\t\t\t,C.Active\r\n\t\t\t,C.CapacityAmount\r\n\t\t\t,P.ProviderName\r\n\t\tFROM Billing.vwContracts AS C\r\n\t\t\tINNER JOIN @tmpContracts AS GC ON GC.ContractID = C.ContractID\r\n\t\t\tINNER JOIN Billing.vwProviders AS P ON C.ProviderID = P.ProviderID\r\n\t\tWHERE C.ContractID = ISNULL(@contractId, C.ContractID)\r\n\t\t\tAND C.ContractNumber = ISNULL(@contractNumber, C.ContractNumber)\r\n\t\t\tAND C.ProviderID = ISNULL(@providerId, C.ProviderID)\r\n\t\t\tAND CASE WHEN ISNULL(@fiscalYear, '') <> '' THEN CASE WHEN @fiscalYearStart BETWEEN C.FiscalYearStart AND C.FiscalYearEnd THEN 1 ELSE 0 END ELSE 1 END = 1\r\n\t\t\tAND C.Active = CASE WHEN @activeOnly = 1 THEN 1 ELSE C.Active END\r\n\t\tORDER BY C.FiscalYearStart DESC, C.ContractNumber DESC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve utility provider contracts', @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.453000",
      "last_altered": "2025-08-25 16:04:01.453000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@activeOnly",
        "data_type": "bit",
        "mode": "IN",
        "max_length": 1,
        "precision": 1,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 12,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 13,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ContractRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `[Billing].[USP_ContractRetrieve]` is designed to retrieve contract information from a billing system. It allows filtering based on various parameters such as provider ID, contract ID, contract number, group ID, fiscal year, and active status. The procedure also logs the operation details and handles exceptions by capturing error messages.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is medium due to the following reasons:\n- It involves conditional logic for filtering based on multiple optional parameters.\n- It uses temporary tables and dynamic filtering.\n- It includes error handling and logging mechanisms.\n- It interacts with multiple views and a user-defined function.\n\n#### 3. Input Parameters\n- `@providerId AS INT = NULL`: Filters contracts by provider ID.\n- `@contractId AS INT = NULL`: Filters contracts by contract ID.\n- `@contractNumber AS VARCHAR(25) = NULL`: Filters contracts by contract number.\n- `@groupId AS INT = NULL`: Filters contracts by group ID.\n- `@fiscalYear AS VARCHAR(4) = NULL`: Filters contracts by fiscal year.\n- `@activeOnly AS BIT = NULL`: Filters contracts based on active status.\n- `@correlationId AS VARCHAR(128) = NULL`: Used for logging purposes.\n- `@machineName AS VARCHAR(128) = NULL`: Used for logging purposes.\n- `@processName AS VARCHAR(128) = NULL`: Used for logging purposes.\n- `@domain AS VARCHAR(25) = NULL`: Used for logging purposes.\n- `@username AS VARCHAR(25) = NULL`: Used for logging purposes.\n- `@userId AS INT = NULL`: Used for logging purposes.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Captures exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Parameter Initialization**: The procedure initializes parameters, setting defaults and handling null values.\n2. **Logging Setup**: Prepares logging details such as action, severity, and message.\n3. **Fiscal Year Calculation**: If a fiscal year is provided, calculates the start date of the fiscal year.\n4. **Temporary Table Creation**: Creates a temporary table to store contract IDs based on group ID and fiscal year filters.\n5. **Contract Retrieval**:\n   - If a group ID is provided, it retrieves contract IDs from `vwBillingGroupContracts` view.\n   - Otherwise, it retrieves all contract IDs from `vwContracts` view.\n6. **Data Selection**: Joins the temporary table with `vwContracts` and `vwProviders` to select detailed contract information.\n7. **Error Handling**: Catches exceptions, logs error details, and sets a flag for sending email notifications.\n8. **Logging Execution**: Calls a logging procedure to record the operation details.\n\n#### 5. Performance Considerations\n- **Index Usage**: Ensure that the views `vwBillingGroupContracts` and `vwContracts` are indexed on columns used in WHERE clauses to optimize query performance.\n- **Temporary Table**: The use of a temporary table can be efficient for handling intermediate results, but its performance depends on the volume of data.\n- **Function Calls**: The use of `Billing.UDF_GetContractAmountPaid` in the SELECT statement could impact performance if the function is not optimized.\n\n#### 6. Potential Issues or Risks\n- **Parameter Defaults**: The use of `NULLIF` and `ISNULL` for parameter defaults might lead to unexpected behavior if not handled correctly.\n- **Error Handling**: The procedure captures error messages but does not rethrow exceptions, which might obscure error propagation.\n- **Concurrency**: The use of temporary tables and logging might introduce concurrency issues if not managed properly.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized data access.\n- **Scalability**: As the data volume grows, the performance of the procedure might degrade if not optimized for large datasets.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2258,
      "api_response_id": "chatcmpl-C8anMxW1VYZF7xHE8ubz0Hi3AWT1U"
    },
    "analysis_timestamp": "2025-08-25 19:21:52"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_ContractUpdate",
      "definition": "CREATE PROCEDURE [Billing].[USP_ContractUpdate]\r\n(\r\n\t@contractId AS INT\r\n\t,@providerId AS INT\r\n\t,@contractNumber AS VARCHAR(25)\r\n\t,@name AS VARCHAR(100)\r\n\t,@description AS VARCHAR(500) = NULL\r\n\t,@fiscalYearStart AS VARCHAR(8)\r\n\t,@fiscalYearEnd AS VARCHAR(8)\r\n\t,@actualAmount AS DECIMAL(18, 2)\r\n\t,@closeAmount AS DECIMAL(18, 2)\r\n\t,@openAmount AS DECIMAL(18, 2)\r\n\t,@active AS BIT\r\n\t,@capacityAmount AS DECIMAL(18, 2) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @description = NULLIF(@description, ''), @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA'), @userId = ISNULL(@userId, 0)\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'UPDATE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Updated contract', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @contractId AS CTRTID, @providerId AS PRVID, @contractNumber AS CTRTNUM, @name AS NAME, @description AS DSC\r\n\t\t,@fiscalYearStart AS FYSTART, @fiscalYearEnd AS FYEND, @actualAmount AS ACTAMT, @closeAmount AS CLSAMT, @openAmount AS OPENAMT, @capacityAmount AS CAPAMT\r\n\t\t,@active AS ACT FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Update contract\r\n\t\tUPDATE Billing.[Contract]\r\n\t\tSET ContractNumber = @contractNumber\r\n\t\t\t,[Name] = @name\r\n\t\t\t,[Description] = @description\r\n\t\t\t,ProviderID = @providerId\r\n\t\t\t,FiscalYearStart = @fiscalYearStart\r\n\t\t\t,FiscalYearEnd = @fiscalYearEnd\r\n\t\t\t,CapacityAmount\t= ISNULL(@capacityAmount, CapacityAmount)\r\n\t\t\t,ModifiedDate = GETDATE()\r\n\t\t\t,ModifiedBy = @userId\r\n\t\tWHERE ContractID = @contractId;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to update contract', @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.457000",
      "last_altered": "2025-08-25 16:04:01.457000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@name",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 100,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@description",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 500,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYearStart",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 8,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYearEnd",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 8,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@actualAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@closeAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@openAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@active",
        "data_type": "bit",
        "mode": "IN",
        "max_length": 1,
        "precision": 1,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@capacityAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 12,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 13,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 14,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 15,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 16,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 17,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 18,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 19,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ContractUpdate",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ContractUpdate` is designed to update contract details in the `Billing.Contract` table within a Microsoft SQL Server database. It takes various parameters related to contract information, updates the corresponding record, and logs the operation's outcome. The procedure includes error handling and logging mechanisms to ensure that any issues during the update process are captured and reported.\n\n#### 2. Complexity Level: Medium\nThe complexity level of this stored procedure is considered medium due to the following factors:\n- It involves multiple input parameters, some of which have default values.\n- It includes error handling with transaction management.\n- It logs detailed information about the operation, including input parameters and any exceptions.\n- It uses dynamic SQL constructs like `FOR XML PATH` for logging purposes.\n\n#### 3. Input Parameters\n- `@contractId AS INT`: The unique identifier of the contract to be updated.\n- `@providerId AS INT`: The identifier of the provider associated with the contract.\n- `@contractNumber AS VARCHAR(25)`: The contract number.\n- `@name AS VARCHAR(100)`: The name of the contract.\n- `@description AS VARCHAR(500) = NULL`: A description of the contract, defaulting to NULL if not provided.\n- `@fiscalYearStart AS VARCHAR(8)`: The start of the fiscal year for the contract.\n- `@fiscalYearEnd AS VARCHAR(8)`: The end of the fiscal year for the contract.\n- `@actualAmount AS DECIMAL(18, 2)`: The actual amount associated with the contract.\n- `@closeAmount AS DECIMAL(18, 2)`: The closed amount for the contract.\n- `@openAmount AS DECIMAL(18, 2)`: The open amount for the contract.\n- `@active AS BIT`: A flag indicating whether the contract is active.\n- `@capacityAmount AS DECIMAL(18, 2) = NULL`: The capacity amount, defaulting to NULL if not provided.\n- `@correlationId AS VARCHAR(128) = NULL`: A unique identifier for logging purposes, defaulting to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaulting to the server name.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, defaulting to the procedure's schema and name.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the person executing the procedure.\n- `@userId AS INT = NULL`: The ID of the user executing the procedure, defaulting to 0 if not provided.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: The procedure begins by setting `NOCOUNT ON` to prevent the sending of row count messages. It initializes several parameters, setting defaults where necessary.\n2. **Logging Preparation**: Constructs an XML string of input parameters for logging purposes.\n3. **Transaction Management**: Begins a transaction named with a unique identifier.\n4. **Update Operation**: Attempts to update the `Billing.Contract` table with the provided parameters.\n5. **Error Handling**: If an error occurs, the transaction is rolled back, and error details are captured.\n6. **Logging**: Regardless of success or failure, logs the operation details using the `USP_AppLogCreate` procedure, including any exception details if an error occurred.\n\n#### 5. Performance Considerations\n- **Transaction Management**: The use of transactions ensures data integrity but can lock resources, potentially impacting performance if the update operation is long-running or if there are many concurrent transactions.\n- **Logging Overhead**: The detailed logging, especially the conversion of input parameters to XML, can add overhead, particularly if the procedure is called frequently.\n- **Index Usage**: The performance of the update operation depends on the indexing of the `ContractID` column in the `Billing.Contract` table.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: If multiple updates are attempted on the same contract simultaneously, it could lead to locking issues or deadlocks.\n- **Error Handling**: While the procedure captures and logs errors, it does not re-throw them, which might be necessary for some applications to handle errors appropriately.\n- **Parameter Validation**: The procedure does not validate input parameters, which could lead to unexpected behavior if invalid data is provided.\n- **Security**: The procedure assumes that the caller has the necessary permissions to update the contract and log the operation, which should be verified to prevent unauthorized access.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2113,
      "api_response_id": "chatcmpl-C8anZUGPOadp3QeHF1UEbptP3YTHu"
    },
    "analysis_timestamp": "2025-08-25 19:22:06"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_FiscalYearRetrieve",
      "definition": "CREATE PROCEDURE [Billing].[USP_FiscalYearRetrieve]\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT FiscalYear\r\n\t\t,FiscalYearDescription\r\n\t\t,FiscalYearStart\r\n\t\t,FiscalYearEnd\r\n\t\t,Active\r\n\tFROM Billing.vwFiscalYears\r\n\tORDER BY FiscalYear DESC;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.460000",
      "last_altered": "2025-08-25 16:04:01.460000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "USP_FiscalYearRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_FiscalYearRetrieve` is designed to retrieve information about fiscal years from a view named `vwFiscalYears` within the `Billing` schema. It selects columns such as `FiscalYear`, `FiscalYearDescription`, `FiscalYearStart`, `FiscalYearEnd`, and `Active`, ordering the results by `FiscalYear` in descending order. The procedure is set to operate under the `READ UNCOMMITTED` transaction isolation level, which allows it to read uncommitted changes from other transactions.\n\n#### 2. Complexity Level: Low\nThe stored procedure is straightforward, involving a single `SELECT` statement without any complex logic, conditional branching, or parameterization. It simply retrieves and orders data from a view, making it low in complexity.\n\n#### 3. Input Parameters\nThis stored procedure does not accept any input parameters. It retrieves all records from the `vwFiscalYears` view without filtering or modifying the data based on external input.\n\n#### 4. Business Logic and Workflow\n- **SET NOCOUNT ON**: This command prevents the message indicating the number of rows affected by a SQL statement from being returned. This can reduce network traffic and improve performance slightly when the procedure is executed.\n- **SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED**: This setting allows the procedure to read data that has been modified but not yet committed by other transactions. It can help reduce locking contention but at the risk of reading \"dirty\" data.\n- **SELECT Statement**: The procedure retrieves fiscal year data from the `vwFiscalYears` view, selecting specific columns and ordering the results by `FiscalYear` in descending order. This implies that the most recent fiscal years will appear first in the result set.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED Isolation Level**: While this can improve performance by reducing locking and blocking, it may lead to reading uncommitted or \"dirty\" data, which could be inconsistent or incorrect.\n- **Indexing**: The performance of the `SELECT` statement can be influenced by the presence of indexes on the `vwFiscalYears` view, particularly on the `FiscalYear` column, which is used for ordering.\n- **View Optimization**: The underlying view `vwFiscalYears` should be optimized for performance, ensuring that it efficiently retrieves and processes data from the base tables.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The use of `READ UNCOMMITTED` can lead to dirty reads, where the data retrieved might not reflect the committed state of the database. This can be problematic if the data is used for critical decision-making processes.\n- **Lack of Parameters**: The absence of input parameters means that the procedure retrieves all records from the view, which might not be efficient if the dataset is large and only a subset of data is needed.\n- **Dependency on View**: Any changes to the `vwFiscalYears` view, such as modifications to its structure or underlying logic, could impact the results of this procedure. It is important to ensure that the view remains consistent with the business requirements.\n- **Scalability**: As the dataset grows, the performance of the procedure might degrade if the view or the underlying tables are not properly indexed or optimized.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 967,
      "api_response_id": "chatcmpl-C8anoSULurzEISTVf3UokrPW180IK"
    },
    "analysis_timestamp": "2025-08-25 19:22:20"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_HistoricalContractLineInsert",
      "definition": "CREATE PROC [Billing].[USP_HistoricalContractLineInsert]\r\n(\r\n\t@contractLineId AS INT\r\n\t,@transactionType AS INT\r\n\t,@username AS VARCHAR(25)\r\n\t,@actualAmount AS DECIMAL(18,2)\r\n\t,@changeAmount AS DECIMAL(18,2)\r\n\t,@invoiceId AS INT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\t\t\t\r\n\tINSERT INTO Billing.HistoricalContractLine (TransactionType,\r\n\t\tContractLineID,\r\n\t\tActualAmount,\r\n\t\tStartDate,\r\n\t\tEndDate,\r\n\t\tModifiedBy,\r\n\t\tChangeAmount,\r\n\t\tInvoiceId)\r\n\tVALUES (@transactionType\r\n\t\t,@contractLineId\r\n\t\t,@actualAmount\r\n\t\t,GETDATE()\r\n\t\t,NULL\r\n\t\t,@username\r\n\t\t,@changeAmount\r\n\t\t,@invoiceId);\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.467000",
      "last_altered": "2025-08-25 16:04:01.467000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@contractLineId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@transactionType",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@actualAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@changeAmount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_HistoricalContractLineInsert",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_HistoricalContractLineInsert` is designed to insert a new record into the `Billing.HistoricalContractLine` table. This procedure logs changes related to contract lines, capturing details such as transaction type, amounts, and user information. It is part of a billing system, likely used to maintain a historical record of contract line modifications for auditing or tracking purposes.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, involving a single `INSERT` operation into a table. It does not include complex logic, conditional statements, or loops, making it easy to understand and maintain.\n\n#### 3. Input Parameters\n- `@contractLineId AS INT`: Represents the unique identifier for the contract line being logged.\n- `@transactionType AS INT`: Indicates the type of transaction being recorded (e.g., creation, update, deletion).\n- `@username AS VARCHAR(25)`: The username of the person making the change, used for auditing purposes.\n- `@actualAmount AS DECIMAL(18,2)`: The actual amount associated with the contract line at the time of the transaction.\n- `@changeAmount AS DECIMAL(18,2)`: The amount of change applied to the contract line, which could be positive or negative.\n- `@invoiceId AS INT`: The identifier for the invoice related to the contract line, if applicable.\n\n#### 4. Business Logic and Workflow\n- The procedure begins by setting `NOCOUNT ON` to prevent the sending of DONE_IN_PROC messages, which can reduce network traffic.\n- It performs an `INSERT` operation into the `Billing.HistoricalContractLine` table, populating fields with the provided parameters.\n- The `StartDate` is set to the current date and time using `GETDATE()`, marking when the transaction was logged.\n- The `EndDate` is set to `NULL`, possibly indicating that the record is currently active or that the end date is not applicable at the time of insertion.\n- The procedure captures the transaction type, contract line ID, actual and change amounts, the user who made the change, and the associated invoice ID.\n\n#### 5. Performance Considerations\n- The procedure is efficient due to its simplicity, performing a single insert operation.\n- The use of `SET NOCOUNT ON` helps reduce unnecessary network traffic by suppressing the message that indicates the number of rows affected.\n- The performance impact is minimal unless the `Billing.HistoricalContractLine` table is subject to high-frequency inserts, which could lead to contention or require indexing considerations.\n\n#### 6. Potential Issues or Risks\n- The procedure does not include error handling, which could lead to unhandled exceptions if, for example, there are constraints or triggers on the `Billing.HistoricalContractLine` table that are violated.\n- The `@username` parameter is limited to 25 characters, which might be insufficient if usernames are longer, potentially leading to truncation.\n- The procedure assumes that all input parameters are valid and does not perform any validation or sanitization, which could lead to data integrity issues if incorrect data is passed.\n- The `EndDate` is set to `NULL` without any logic to update it later, which might require additional procedures or triggers to manage the lifecycle of historical records.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1060,
      "api_response_id": "chatcmpl-C8ao1h3wsPcFflbSO0DS2vOmzouxM"
    },
    "analysis_timestamp": "2025-08-25 19:22:37"
  },
  {
    "procedure_info": {
      "schema": "Billing",
      "name": "USP_UtilityProviderRetrieve",
      "definition": "CREATE PROCEDURE [Billing].[USP_UtilityProviderRetrieve]\r\n(\r\n\t@providerId AS INT = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved utility providers', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA'), @userId = ISNULL(@userId, 0)\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'), @providerId = NULLIF(@providerId, 0);\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @providerId AS PRVID FOR XML PATH('INPUTS')));\r\n\t\r\n\tBEGIN TRY\r\n\t\tSELECT ProviderID\r\n\t\t\t,ProviderName\r\n\t\t\t,ProviderDescription\r\n\t\t\t,FMSIdNumber\r\n\t\t\t,GroupCount\r\n\t\t\t,CreatedDate\r\n\t\t\t,CreatedBy\r\n\t\t\t,ModifiedDate\r\n\t\t\t,ModifiedBy\r\n\t\t\t,Active\r\n\t\tFROM Billing.vwProviders\r\n\t\tWHERE ProviderID = ISNULL(@providerId, ProviderID)\r\n\t\tORDER BY ProviderName ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve utility providers', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.470000",
      "last_altered": "2025-08-25 16:04:01.470000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_UtilityProviderRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_UtilityProviderRetrieve` is designed to retrieve information about utility providers from a view named `Billing.vwProviders`. It allows filtering by a specific provider ID if provided. The procedure also logs the operation details, including any exceptions, using another stored procedure `dbo.USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\nThe complexity level is considered medium due to the following factors:\n- It involves conditional logic for input parameter handling.\n- It includes error handling with a `TRY...CATCH` block.\n- It logs detailed information about the operation, including performance metrics.\n- It uses dynamic elements like `NEWID()` and system functions for logging and default values.\n\n#### 3. Input Parameters\n- `@providerId AS INT = NULL`: Optional. Filters the results to a specific provider if provided.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional. Used for tracking the operation across systems; defaults to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: Optional. The name of the machine executing the procedure; defaults to the server name.\n- `@processName AS VARCHAR(128) = NULL`: Optional. The name of the process executing the procedure; defaults to the schema and procedure name.\n- `@domain AS VARCHAR(25) = NULL`: Optional. The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: Optional. The username of the user executing the procedure.\n- `@userId AS INT = NULL`: Optional. The ID of the user executing the procedure; defaults to 0.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output. Captures any exception messages encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for logging and performance tracking variables.\n2. **Parameter Handling**: \n   - Generates a new correlation ID if not provided.\n   - Sets default values for `machineName` and `processName` if not provided.\n   - Converts `@providerId` to `NULL` if it is 0, allowing for retrieval of all providers.\n3. **Data Retrieval**: \n   - Attempts to select provider details from `Billing.vwProviders`.\n   - Filters by `ProviderID` if `@providerId` is specified.\n   - Orders results by `ProviderName`.\n4. **Error Handling**: \n   - Catches any errors during data retrieval.\n   - Sets `@exceptionDetails` and adjusts logging parameters if an error occurs.\n5. **Logging**: \n   - Calculates the elapsed time for the operation.\n   - Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure `Billing.vwProviders` is indexed on `ProviderID` and `ProviderName` to optimize filtering and sorting.\n- **Logging Overhead**: The logging operation, especially if `@sendEmail` is set to 1, could introduce latency.\n- **Date Functions**: The use of `GETDATE()` and `DATEDIFF()` for performance tracking is efficient but should be monitored for accuracy in high-load environments.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: The `CATCH` block only captures the error message, which might not provide sufficient context for debugging complex issues.\n- **Parameter Defaults**: Defaulting `@userId` to 0 might lead to incorrect user tracking if not properly managed.\n- **Concurrency**: High concurrency could lead to performance bottlenecks, especially if the logging procedure involves I/O operations.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized data access or logging.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1616,
      "api_response_id": "chatcmpl-C8aoIGHaClMPZbIccX55QI13RS6mB"
    },
    "analysis_timestamp": "2025-08-25 19:22:47"
  },
  {
    "procedure_info": {
      "schema": "Common",
      "name": "USP_NoteCreate",
      "definition": "CREATE PROCEDURE [Common].[USP_NoteCreate]\r\n(\r\n\t@parentId AS INT\r\n\t,@parentType AS VARCHAR(25)\r\n\t,@actionType AS VARCHAR(25)\r\n\t,@comments AS VARCHAR(500)\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @parentId = NULLIF(@parentId, 0), @parentType = NULLIF(@parentType, ''), @actionType = NULLIF(@actionType, ''), @comments = NULLIF(@comments, '')\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'), @userId = ISNULL(@userId, 0);\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'CREATE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Added note', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @parentId AS PID, @parentType AS PTYPE, @actionType AS ACT, @comments AS CMT FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO Common.Note(ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tVALUES (@parentType, @parentId, @actionType, @comments, @userId);\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to add note', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.473000",
      "last_altered": "2025-08-25 16:04:01.473000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@parentId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@parentType",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@actionType",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@comments",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 500,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_NoteCreate",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_NoteCreate` is designed to create a note entry in the `Common.Note` table within a SQL Server database. It logs the creation of a note associated with a specific parent entity, identified by `parentId` and `parentType`. The procedure also logs the operation details into an application log using another stored procedure, `USP_AppLogCreate`. It handles exceptions by rolling back transactions and logging error details.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including input validation, transaction management, error handling, and logging. The use of dynamic SQL elements like XML conversion and the integration with another logging procedure adds to its complexity.\n\n#### 3. Input Parameters\n- `@parentId AS INT`: The ID of the parent entity to which the note is related.\n- `@parentType AS VARCHAR(25)`: The type of the parent entity.\n- `@actionType AS VARCHAR(25)`: The type of action being logged (e.g., \"CREATE\").\n- `@comments AS VARCHAR(500)`: The content of the note.\n- `@correlationId AS VARCHAR(128) = NULL`: An optional identifier for correlating logs, defaulting to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaulting to the server name.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process, defaulting to the procedure's schema and name.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the user executing the procedure.\n- `@userId AS INT = NULL`: The ID of the user creating the note, defaulting to 0 if not provided.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**: The procedure initializes and validates input parameters, setting defaults where necessary.\n2. **Transaction Management**: It begins a transaction to ensure atomicity of the note creation process.\n3. **Note Creation**: Inserts a new record into the `Common.Note` table with the provided details.\n4. **Error Handling**: Uses a TRY-CATCH block to handle exceptions. If an error occurs, it rolls back the transaction and sets error details.\n5. **Logging**: Calls `USP_AppLogCreate` to log the operation details, including success or failure, along with execution time and any exception details.\n\n#### 5. Performance Considerations\n- **Transaction Scope**: The transaction is kept minimal, only covering the insert operation, which is optimal for performance.\n- **Logging Overhead**: The logging operation, especially if frequent, could introduce overhead. Ensure `USP_AppLogCreate` is optimized.\n- **XML Conversion**: The conversion of input parameters to XML for logging purposes could be resource-intensive if the procedure is called frequently or with large data sets.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: While the procedure handles errors, it assumes `XACT_STATE()` will be non-zero if a transaction is active. Ensure this logic aligns with all potential error scenarios.\n- **Parameter Defaults**: Defaulting `@userId` to 0 could lead to ambiguous audit trails if not properly managed.\n- **Concurrency**: High concurrency could lead to contention on the `Common.Note` table, especially if the table is heavily indexed or if there are frequent writes.\n- **Security**: Ensure that user inputs are sanitized to prevent SQL injection, especially for parameters like `@parentType` and `@actionType`.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1709,
      "api_response_id": "chatcmpl-C8aoSBtVNOFkv872FkN3qvd8N8GSo"
    },
    "analysis_timestamp": "2025-08-25 19:23:05"
  },
  {
    "procedure_info": {
      "schema": "Common",
      "name": "USP_NoteRetrieve",
      "definition": "CREATE PROCEDURE [Common].[USP_NoteRetrieve]\r\n(\r\n\t@noteId AS INT = NULL\r\n\t,@parentId AS INT = NULL\r\n\t,@parentType AS VARCHAR(25) = NULL\r\n\t,@actionType AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @noteId = NULLIF(@noteId, 0), @parentId = NULLIF(@parentId, 0), @parentType = NULLIF(@parentType, ''), @actionType = NULLIF(@actionType, '')\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'), @userId = ISNULL(@userId, 0);\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved note(s)', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @noteId AS NID, @actionType AS ACT, @parentId AS PID, @parentType AS PTYPE FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT NoteID\r\n\t\t\t,[Action]\r\n\t\t\t,Note\r\n\t\t\t,CreatedDate\r\n\t\t\t,CreatedBy\r\n\t\tFROM Common.vwNotes\r\n\t\tWHERE NoteID = ISNULL(@noteId, NoteID)\r\n\t\t\tAND [Action] = ISNULL(@actionType, [Action])\r\n\t\t\tAND ParentID = ISNULL(@parentId, ParentID)\r\n\t\t\tAND ParentType = ISNULL(@parentType, ParentType)\r\n\t\tORDER BY NoteID ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve note(s)', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.480000",
      "last_altered": "2025-08-25 16:04:01.480000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@noteId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@parentId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@parentType",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@actionType",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_NoteRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_NoteRetrieve` is designed to retrieve notes from a view named `Common.vwNotes` based on various optional filtering criteria. It logs the retrieval action, including any exceptions encountered during execution, into an application log using another stored procedure `dbo.USP_AppLogCreate`. The procedure is part of a logging and auditing mechanism, capturing metadata about the retrieval process, such as correlation ID, machine name, and user information.\n\n#### 2. Complexity Level: Medium\nThe procedure involves conditional logic for parameter handling, error handling with a TRY-CATCH block, and interaction with another stored procedure for logging. While the SQL logic itself is straightforward, the integration with logging and error handling adds a moderate level of complexity.\n\n#### 3. Input Parameters\n- `@noteId AS INT = NULL`: Filters the notes by a specific NoteID.\n- `@parentId AS INT = NULL`: Filters notes associated with a specific ParentID.\n- `@parentType AS VARCHAR(25) = NULL`: Filters notes by ParentType.\n- `@actionType AS VARCHAR(25) = NULL`: Filters notes by Action type.\n- `@correlationId AS VARCHAR(128) = NULL`: Unique identifier for the operation, defaulting to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: Name of the machine executing the procedure, defaults to the server name.\n- `@processName AS VARCHAR(128) = NULL`: Name of the process executing the procedure, defaults to the schema and object name.\n- `@domain AS VARCHAR(25) = NULL`: Domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: Username of the user executing the procedure.\n- `@userId AS INT = NULL`: User ID of the user executing the procedure, defaults to 0 if not provided.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Captures any exception messages encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Parameter Initialization**: The procedure initializes parameters, setting defaults where necessary. It uses `NULLIF` to convert zero or empty string inputs to NULL and `ISNULL` or `COALESCE` to set default values for other parameters.\n2. **Logging Setup**: Prepares logging details, including action type, severity, and message.\n3. **Data Retrieval**: Attempts to retrieve notes from `Common.vwNotes` based on the provided filters. If a parameter is NULL, it defaults to not filtering by that criterion.\n4. **Error Handling**: Uses a TRY-CATCH block to handle any errors during data retrieval. If an error occurs, it captures the error message and sets the severity to 'ERROR'.\n5. **Logging Execution**: Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions and the elapsed time.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that `Common.vwNotes` is indexed on `NoteID`, `Action`, `ParentID`, and `ParentType` to optimize query performance.\n- **Parameter Sniffing**: The use of optional parameters with `ISNULL` can lead to suboptimal query plans if SQL Server caches a plan based on specific parameter values.\n- **Elapsed Time Calculation**: The elapsed time calculation uses `DATEDIFF` with `MILLISECOND`, which may not be precise if the procedure execution is very fast.\n\n#### 6. Potential Issues or Risks\n- **Parameter Defaults**: Using `NULLIF` and `ISNULL` can lead to unexpected behavior if zero or empty strings are valid inputs.\n- **Error Handling**: The CATCH block only captures the error message, not the error number or severity, which might be useful for more detailed logging.\n- **Concurrency**: If `Common.vwNotes` is a large view or frequently accessed, concurrent executions of this procedure could lead to contention or blocking.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized data access or logging of sensitive information.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1772,
      "api_response_id": "chatcmpl-C8aolI3pYNX7qL6uZmBQ4MuhXPjAm"
    },
    "analysis_timestamp": "2025-08-25 19:23:21"
  },
  {
    "procedure_info": {
      "schema": "dbo",
      "name": "USP_AppLogCreate",
      "definition": "CREATE PROCEDURE [dbo].[USP_AppLogCreate]\r\n(\r\n\t@correlationId AS VARCHAR(128)\r\n\t,@machineName AS VARCHAR(128)\r\n\t,@processName AS VARCHAR(128)\r\n\t,@action AS VARCHAR(25) = 'NA'\r\n\t,@severity AS VARCHAR(25) = 'INFO'\r\n\t,@message AS VARCHAR(255)\r\n\t,@messageDetails AS VARCHAR(MAX) = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@sendEmail AS BIT = 0\r\n\t,@elapsedTime AS INT = NULL\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @logLevel AS VARCHAR(20) = 'ERROR', @writeLog AS BIT;\r\n\t\tSET @writeLog = CONVERT(BIT, CASE WHEN @action = 'ACCESS' THEN 1\r\n\t\t\tWHEN @action = 'AUDIT' THEN 1\r\n\t\t\tWHEN @action = 'TIMER' THEN 1\r\n\t\t\tWHEN @logLevel = 'FATAL' AND @severity = 'FATAL' THEN 1\r\n\t\t\tWHEN @logLevel = 'ERROR' AND (@severity = 'FATAL' OR @severity = 'ERROR') THEN 1\r\n\t\t\tWHEN @logLevel = 'WARN' AND (@severity = 'FATAL' OR @severity = 'ERROR' OR @severity = 'WARN') THEN 1\r\n\t\t\tWHEN @logLevel = 'INFO' AND (@severity = 'FATAL' OR @severity = 'ERROR' OR @severity = 'WARN' OR @severity = 'INFO') THEN 1\r\n\t\t\tWHEN @logLevel = 'DEBUG' THEN 1\r\n\t\t\tELSE 0 END);\r\n\r\n\t\tIF (@writeLog = 1)\r\n\t\tBEGIN\r\n\t\t    INSERT INTO [dbo].[AppLog] (CorrelationID, MachineName, ProcessName, [Action], Severity, [Message], MessageDetails\r\n\t\t\t\t,ExceptionDetails, Domain, Username, UserId, ElapsedTime, SendEmail)\r\n\t\t\tVALUES (@correlationId, @machineName, @processName, @action, @severity, @message, @messageDetails\r\n\t\t\t\t,@exceptionDetails, @domain, @username, @userId, @elapsedTime, @sendEmail);\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\tEND CATCH;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.483000",
      "last_altered": "2025-08-25 16:04:01.483000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@action",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@severity",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@message",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 255,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@messageDetails",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@sendEmail",
        "data_type": "bit",
        "mode": "IN",
        "max_length": 1,
        "precision": 1,
        "scale": 0,
        "ordinal_position": 12,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@elapsedTime",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 13,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_AppLogCreate",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_AppLogCreate` is designed to log application events into a table named `AppLog`. It captures various details about the event, such as correlation ID, machine name, process name, action type, severity, message, and optional details like exception information, domain, username, user ID, and elapsed time. The procedure also includes logic to determine whether the log entry should be written based on the action and severity levels.\n\n#### 2. Complexity Level: Medium\nThe procedure involves conditional logic to determine whether a log entry should be written, which adds a moderate level of complexity. It also includes error handling using a `TRY...CATCH` block, which is a common pattern in SQL Server for managing exceptions.\n\n#### 3. Input Parameters\n- `@correlationId AS VARCHAR(128)`: A unique identifier for correlating log entries.\n- `@machineName AS VARCHAR(128)`: The name of the machine where the event occurred.\n- `@processName AS VARCHAR(128)`: The name of the process generating the log.\n- `@action AS VARCHAR(25) = 'NA'`: The type of action being logged, defaulting to 'NA'.\n- `@severity AS VARCHAR(25) = 'INFO'`: The severity level of the log entry, defaulting to 'INFO'.\n- `@message AS VARCHAR(255)`: A brief message describing the event.\n- `@messageDetails AS VARCHAR(MAX) = NULL`: Detailed information about the event, optional.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Captures exception details if an error occurs during logging.\n- `@domain AS VARCHAR(25) = NULL`: The domain associated with the event, optional.\n- `@username AS VARCHAR(25) = NULL`: The username associated with the event, optional.\n- `@userId AS INT = NULL`: The user ID associated with the event, optional.\n- `@sendEmail AS BIT = 0`: A flag indicating whether an email should be sent, defaulting to 0 (false).\n- `@elapsedTime AS INT = NULL`: The elapsed time for the event, optional.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: The procedure begins by setting `NOCOUNT ON` to prevent the sending of row count messages, which can improve performance.\n2. **Log Level and Write Decision**: It declares a variable `@logLevel` set to 'ERROR' and a `@writeLog` flag. The `@writeLog` flag is determined by evaluating the `@action` and `@severity` against predefined conditions.\n3. **Conditional Logging**: If `@writeLog` is true, the procedure inserts a new record into the `AppLog` table with the provided parameters.\n4. **Error Handling**: A `TRY...CATCH` block is used to handle any exceptions that occur during the insert operation. If an error occurs, the `@exceptionDetails` output parameter is populated with the error message.\n\n#### 5. Performance Considerations\n- **Conditional Logic**: The decision-making logic for writing logs is efficient but could be optimized further if the conditions become more complex or if the log level needs to be dynamic.\n- **Error Handling**: The use of `TRY...CATCH` ensures that errors are captured without terminating the procedure, but it may slightly impact performance due to the overhead of exception handling.\n- **Data Types**: The use of `VARCHAR(MAX)` for `@messageDetails` and `@exceptionDetails` can handle large text but may affect performance if excessively large data is frequently logged.\n\n#### 6. Potential Issues or Risks\n- **Log Level Hardcoding**: The `@logLevel` is hardcoded to 'ERROR', which may not be flexible for different environments or configurations. Consider making it a configurable parameter.\n- **Output Parameter Usage**: The `@exceptionDetails` output parameter is only populated in the event of an error, which may not be intuitive for users expecting it to always contain information.\n- **Concurrency**: High concurrency scenarios could lead to performance bottlenecks if the `AppLog` table becomes a hotspot for writes.\n- **Data Growth**: Without proper archiving or cleanup strategies, the `AppLog` table could grow significantly, impacting performance and storage.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1640,
      "api_response_id": "chatcmpl-C8ap0ydUjsJ18uL2GoVmghyAVf16v"
    },
    "analysis_timestamp": "2025-08-25 19:23:34"
  },
  {
    "procedure_info": {
      "schema": "fms",
      "name": "USP_ReconcileEC3InvoicePaymentsFromFMS",
      "definition": "CREATE PROCEDURE [fms].[USP_ReconcileEC3InvoicePaymentsFromFMS]\r\n(\r\n\t@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tTRUNCATE TABLE fms.Disbursement;\r\n\tTRUNCATE TABLE fms.PaymentRequest;\r\n\r\n\tINSERT INTO fms.Disbursement(ContractNumber\r\n        ,DisbursementID\r\n        ,DisbursementNumber\r\n        ,DisbursementVersionNumber\r\n        ,InvoiceNumber\r\n        ,PaymentType\r\n        ,BANK_ACCT_CD\r\n        ,CHK_EFT_STA\r\n        ,CHK_EFT_NO\r\n        ,CHK_EFT_AM\r\n        ,CHK_EFT_ISS_DT\r\n        ,CHK_EFT_REC_DT\r\n        ,DISB_CAT\r\n        ,CLR_DT)\r\n    SELECT ContractNumber\r\n        ,DisbursementID\r\n        ,DisbursementNumber\r\n        ,DisbursementVersionNumber\r\n        ,InvoiceNumber\r\n        ,PaymentType\r\n        ,BANK_ACCT_CD\r\n        ,CHK_EFT_STA\r\n        ,CHK_EFT_NO\r\n        ,CHK_EFT_AM\r\n        ,CHK_EFT_ISS_DT\r\n        ,CHK_EFT_REC_DT\r\n        ,DISB_CAT\r\n        ,CLR_DT\t\r\n    FROM Invoice.vwDisbursements;\r\n\r\n\tINSERT INTO fms.PaymentRequest(ContractNumber\r\n        ,PaymentRequestID\r\n        ,PaymentRequestNumber\r\n        ,PaymentRequestVersionNumber\r\n        ,InvoiceNumber\r\n        ,DOC_ACTU_AM\r\n        ,PYMT_AM\r\n        ,DOC_APPL_CREA_DT\r\n        ,DOC_APPL_LAST_DT)\r\n    SELECT ContractNumber\r\n        ,PaymentRequestID\r\n        ,PaymentRequestNumber\r\n        ,PaymentRequestVersionNumber\r\n        ,InvoiceNumber\r\n        ,DOC_ACTU_AM\r\n        ,PYMT_AM\r\n        ,DOC_APPL_CREA_DT\r\n        ,DOC_APPL_LAST_DT\r\n    FROM Invoice.vwPaymentRequests;\r\n\r\n\tEXEC fms.USP_ReconcileInvoicePaymentsUsingFMSDisbursements @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@exceptionDetails = @exceptionDetails\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.493000",
      "last_altered": "2025-08-25 16:04:01.493000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ReconcileEC3InvoicePaymentsFromFMS",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ReconcileEC3InvoicePaymentsFromFMS` is designed to reconcile invoice payments by interacting with financial data stored in the `fms` schema. It performs the following operations:\n- Clears existing data from the `fms.Disbursement` and `fms.PaymentRequest` tables.\n- Populates these tables with fresh data from views `Invoice.vwDisbursements` and `Invoice.vwPaymentRequests`.\n- Calls another stored procedure `USP_ReconcileInvoicePaymentsUsingFMSDisbursements` to perform further reconciliation using the newly populated data.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including data truncation, insertion, and the execution of another stored procedure. While the individual operations are straightforward, the overall process involves multiple database interactions and dependencies, which increases its complexity.\n\n#### 3. Input Parameters\n- `@correlationId AS VARCHAR(128) = NULL`: Used to track the operation across systems or logs.\n- `@machineName AS VARCHAR(128) = NULL`: Identifies the machine executing the procedure.\n- `@processName AS VARCHAR(128) = NULL`: Specifies the name of the process invoking the procedure.\n- `@domain AS VARCHAR(25) = NULL`: Represents the domain context of the user or process.\n- `@username AS VARCHAR(25) = NULL`: The username of the person or system executing the procedure.\n- `@userId AS INT = NULL`: The user ID associated with the operation.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception details during execution.\n\n#### 4. Business Logic and Workflow\n1. **Data Truncation**: The procedure begins by truncating the `fms.Disbursement` and `fms.PaymentRequest` tables to remove any existing data. This ensures that only the most current data is used for reconciliation.\n2. **Data Insertion**: It then inserts data into these tables from the views `Invoice.vwDisbursements` and `Invoice.vwPaymentRequests`. This step refreshes the tables with the latest disbursement and payment request information.\n3. **Reconciliation Execution**: Finally, the procedure calls `USP_ReconcileInvoicePaymentsUsingFMSDisbursements`, passing along the input parameters. This step likely performs the actual reconciliation logic using the newly populated data.\n\n#### 5. Performance Considerations\n- **Truncation Overhead**: Truncating tables can be efficient but may cause locking issues if other processes are accessing the tables simultaneously.\n- **Data Volume**: The performance of the insert operations depends on the volume of data in the views. Large datasets could lead to longer execution times.\n- **Indexing**: Proper indexing on the `fms.Disbursement` and `fms.PaymentRequest` tables can improve the performance of subsequent operations that use these tables.\n\n#### 6. Potential Issues or Risks\n- **Data Loss**: Truncating tables results in complete data loss. If the procedure is executed unintentionally or with incorrect data, it could lead to significant data integrity issues.\n- **Concurrency**: The procedure does not handle concurrency explicitly. If multiple instances run simultaneously, it could lead to race conditions or deadlocks.\n- **Error Handling**: The procedure lacks explicit error handling for the insert operations. If an error occurs, it may not be captured or logged effectively, except through the `@exceptionDetails` parameter in the called procedure.\n- **Dependency on External Procedure**: The reconciliation logic is dependent on the `USP_ReconcileInvoicePaymentsUsingFMSDisbursements` procedure. Any changes or issues in that procedure could affect the outcome of this process.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1540,
      "api_response_id": "chatcmpl-C8apDnLSyGgyEU2WgsiT4yY2suCtg"
    },
    "analysis_timestamp": "2025-08-25 19:23:45"
  },
  {
    "procedure_info": {
      "schema": "fms",
      "name": "USP_ReconcileEC3InvoicePaymentsFromITS",
      "definition": "CREATE PROCEDURE [fms].[USP_ReconcileEC3InvoicePaymentsFromITS] \r\n(\r\n\t@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tTRUNCATE TABLE its.AuditsAndAccountsPayments;\r\n\r\n\tINSERT INTO its.AuditsAndAccountsPayments(PurchaseOrder_Registration,\r\n\t    InvoiceID,\r\n\t    Invoicenumber,\r\n\t    InvoiceAmount,\r\n\t    InvoiceAmountPaid,\r\n\t    InvoiceDate,\r\n\t    DateInvoiceReceived,\r\n\t    ReasonForRejection,\r\n\t    VoucheringUnitIn,\r\n\t    VoucheringUnitOperator,\r\n\t    VoucherNumber,\r\n\t    VoucherAmountTotal,\r\n\t    VoucherDate,\r\n\t    ToPreAudit,\r\n\t    PreAuditAuditor,\r\n\t    Approve3,\r\n\t    ToPending5,\r\n\t    Approval5AuditsOut,\r\n\t    comments)\r\n\tSELECT rs.PurchaseOrder_Registration\r\n\t\t,v.InvoiceID\r\n\t\t,v.ItsInvoiceNumber AS InvoiceNumber\r\n\t\t,rs.InvoiceAmount\r\n\t\t,rs.InvoiceAmountPaid\r\n\t\t,rs.InvoiceDate\r\n\t\t,rs.DateInvoiceReceived\r\n\t\t,rs.ReasonForRejection\r\n\t\t,rs.VoucheringUnitIn\r\n\t\t,rs.VoucheringUnitOperator\r\n\t\t,rs.VoucherNumber\r\n\t\t,rs.VoucherAmountTotal\r\n\t\t,rs.VoucherDate\r\n\t\t,rs.ToPreAudit\r\n\t\t,rs.PreAuditAuditor\r\n\t\t,rs.Approve3\r\n\t\t,rs.ToPending5\r\n\t\t,rs.Approval5AuditsOut\r\n\t\t,rs.comments\r\n\tFROM Invoice.vwInvoices AS v\r\n\t\tINNER JOIN its.RawSource_AuditsAndAccountsPayments AS rs ON v.InvoiceNumber = rs.InvoiceNumber\r\n\tWHERE v.Active = 1;\r\n\r\n\tEXEC fms.USP_ReconcileInvoicePaymentsUsingITSPayments @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@exceptionDetails = @exceptionDetails;\r\n\r\n\tDELETE FROM its.AuditsAndAccountsPayments WHERE InvoiceID IS NULL;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.500000",
      "last_altered": "2025-08-25 16:04:01.500000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ReconcileEC3InvoicePaymentsFromITS",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ReconcileEC3InvoicePaymentsFromITS` is designed to reconcile invoice payments by processing data from a source table and updating a target table. It involves truncating a table, inserting data from a view joined with another table, executing another stored procedure, and cleaning up the target table by removing entries with null values in a specific column.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves multiple operations: truncation, insertion, execution of another stored procedure, and deletion.\n- It requires understanding of data relationships between the view and the source table.\n- It involves handling of input parameters and output parameters, which adds to the complexity.\n\n#### 3. Input Parameters\n- `@correlationId AS VARCHAR(128) = NULL`: Used to track the correlation of operations, possibly for logging or tracing purposes.\n- `@machineName AS VARCHAR(128) = NULL`: Identifies the machine where the procedure is executed, useful for auditing.\n- `@processName AS VARCHAR(128) = NULL`: Specifies the name of the process invoking the procedure, aiding in process tracking.\n- `@domain AS VARCHAR(25) = NULL`: Represents the domain context, potentially for security or organizational purposes.\n- `@username AS VARCHAR(25) = NULL`: The username of the person or system executing the procedure, used for auditing.\n- `@userId AS INT = NULL`: The ID of the user executing the procedure, providing a numeric identifier for auditing.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter intended to capture and return any exception details encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Truncate Table**: The procedure begins by truncating the `its.AuditsAndAccountsPayments` table, clearing all existing data to prepare for fresh data insertion.\n2. **Data Insertion**: It inserts data into `its.AuditsAndAccountsPayments` by selecting from `Invoice.vwInvoices` and joining with `its.RawSource_AuditsAndAccountsPayments` based on matching invoice numbers. Only active invoices (`v.Active = 1`) are considered.\n3. **Reconciliation Execution**: The procedure calls another stored procedure `USP_ReconcileInvoicePaymentsUsingITSPayments`, passing along the input parameters. This step likely performs further reconciliation logic.\n4. **Cleanup**: Finally, it deletes any records from `its.AuditsAndAccountsPayments` where `InvoiceID` is null, ensuring data integrity by removing incomplete entries.\n\n#### 5. Performance Considerations\n- **Truncation**: Truncating a table is a fast operation but should be used with caution as it removes all data without logging individual row deletions.\n- **Join Operations**: The join between the view and the source table can be resource-intensive, especially if the datasets are large. Indexing on `InvoiceNumber` in both tables can improve performance.\n- **Procedure Call**: The execution of another stored procedure within this one can introduce latency, depending on the complexity and execution time of the called procedure.\n- **Deletion**: The final deletion step can be optimized by ensuring `InvoiceID` is indexed, reducing the time taken to identify and remove null entries.\n\n#### 6. Potential Issues or Risks\n- **Data Loss**: The truncation step results in complete data loss from `its.AuditsAndAccountsPayments` before new data is inserted. If the procedure fails after truncation, data may be lost.\n- **Concurrency**: If multiple processes attempt to execute this procedure simultaneously, it could lead to data inconsistencies or locking issues.\n- **Error Handling**: The procedure lacks explicit error handling, which could result in unhandled exceptions. The output parameter `@exceptionDetails` is intended for capturing exceptions but is not utilized within the procedure.\n- **Dependency on External Procedure**: The reliance on `USP_ReconcileInvoicePaymentsUsingITSPayments` means any issues or changes in that procedure could affect the outcome of this one.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1592,
      "api_response_id": "chatcmpl-C8apPa6jA7eM3L586prwhf67O8x6e"
    },
    "analysis_timestamp": "2025-08-25 19:24:03"
  },
  {
    "procedure_info": {
      "schema": "fms",
      "name": "USP_ReconcileInvoicePaymentsUsingFMSDisbursements",
      "definition": "CREATE PROCEDURE [fms].[USP_ReconcileInvoicePaymentsUsingFMSDisbursements]\r\n(\r\n\t@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reconciled invoice payments using FMS disbursements(s)'\r\n\t\t,@messageDetails AS VARCHAR(MAX) = NULL, @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\t\r\n\tSELECT @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'), @userId = ISNULL(@userId, 0);\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @paymentRequests AS TABLE (InvoiceID INT NOT NULL, InvoiceGroupContractID INT NOT NULL, ContractNumber VARCHAR(30) NOT NULL);\r\n\t\tDECLARE @paidInvoiceGroups AS TABLE (InvoiceID INT NOT NULL, InvoiceGroupContractID INT NOT NULL);\r\n\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Find only new payment requests\r\n\t\tINSERT INTO @paymentRequests (InvoiceID, InvoiceGroupContractID, ContractNumber)\r\n\t\tSELECT IGC.InvoiceID, IGC.InvoiceGroupContractID, IGC.ContractNumber\r\n\t\tFROM Invoice.vwInvoiceGroupContracts AS IGC\r\n\t\t\tINNER JOIN fms.PaymentRequest AS FMSPR ON FMSPR.InvoiceNumber = IGC.InvoiceNumber AND FMSPR.ContractNumber = IGC.ContractNumber\r\n\t\t\tINNER JOIN Invoice.vwInvoices AS INV ON INV.InvoiceID = IGC.InvoiceID\r\n\t\tWHERE INV.StatusID IN (4, 5, 6);\r\n\r\n\t\t-- Update status to payment initiated\r\n\t\tUPDATE INV\r\n\t\tSET INV.StatusID = 7\r\n\t\tFROM Invoice.Invoice AS INV\r\n\t\t\tINNER JOIN @paymentRequests AS PR ON PR.InvoiceID = INV.InvoiceID;\r\n\r\n\t\t-- Create audit note for all invoices that have payment requests initiated\r\n\t\tINSERT INTO Common.Note(ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tSELECT 'INVOICE', T.InvoiceID, 'FMS PAYMENT REQUEST', 'Payment request initiated in FMS', 0\r\n\t\tFROM (SELECT DISTINCT InvoiceID FROM @paymentRequests) AS T;\r\n\r\n\t\t-- Insert only new payment records\r\n\t\tINSERT INTO Invoice.InvoicePayment(InvoiceGroupContractID, InvoiceID, BillingGroupContractID, GroupID, ContractID, FiscalYear\r\n\t\t\t,PaymentType, PaymentNumber, PaymentAmount, DateIssued, DateCleared, CreatedBy)\r\n\t\tOUTPUT INSERTED.InvoiceID, INSERTED.InvoiceGroupContractID INTO @paidInvoiceGroups\r\n\t\tSELECT IGC.InvoiceGroupContractID, IGC.InvoiceID, IGC.BillingGroupContractID, IGC.GroupID, IGC.ContractID, IGC.FiscalYear\r\n\t\t\t,FMSDB.PaymentType, FMSDB.CHK_EFT_NO, FMSDB.CHK_EFT_AM, FMSDB.CHK_EFT_ISS_DT, FMSDB.CLR_DT, 0\r\n\t\tFROM Invoice.vwInvoiceGroupContracts AS IGC\r\n\t\t\tINNER JOIN fms.Disbursement AS FMSDB ON FMSDB.InvoiceNumber = IGC.InvoiceNumber AND FMSDB.ContractNumber = IGC.ContractNumber\r\n\t\tWHERE (IGC.ContractNumber + '-' + IGC.InvoiceNumber) NOT IN (SELECT DISTINCT (ContractNumber + '-' + InvoiceNumber) FROM Invoice.vwInvoicePayments);\r\n\r\n\t\t-- Do we need to update existing records?\r\n\r\n\t\t-- Update invoice group contracts to paid\r\n\t\tUPDATE IGC\r\n\t\tSET IGC.Paid = 1, ModifiedDate = GETDATE(), ModifiedBy = 0\r\n\t\tFROM Invoice.InvoiceGroupContract AS IGC\r\n\t\t\tINNER JOIN @paidInvoiceGroups AS T ON T.InvoiceGroupContractID = IGC.InvoiceGroupContractID;\r\n\r\n\t\t-- Update invoices to paid if all associated groups are paid\r\n\t\tUPDATE INV\r\n\t\tSET INV.StatusID = 8, ModifiedDate = GETDATE(), ModifiedBy = 0\r\n\t\tFROM Invoice.Invoice AS INV\r\n\t\tWHERE (INV.StatusID <> 8 AND INV.StatusID <> 9)\r\n\t\t\tAND INV.InvoiceID IN (SELECT DISTINCT InvoiceID\r\n\t\t\t\tFROM Invoice.InvoiceGroupContract\r\n\t\t\t\tWHERE Paid = 1\r\n\t\t\t\tGROUP BY InvoiceID\r\n\t\t\t\tHAVING COUNT(1) = COUNT(PAID));\r\n\r\n\t\t-- Create audit note for all paid invoices\r\n\t\tINSERT INTO Common.Note(ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tSELECT 'INVOICE', T.InvoiceID, 'FMS PAYMENT ISSUED', 'Payment issued in FMS', 0\r\n\t\tFROM (SELECT DISTINCT InvoiceID FROM @paidInvoiceGroups) AS T;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to reconcile invoice payments using FMS disbursements(s)', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.510000",
      "last_altered": "2025-08-25 16:04:01.510000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ReconcileInvoicePaymentsUsingFMSDisbursements",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ReconcileInvoicePaymentsUsingFMSDisbursements` is designed to reconcile invoice payments by utilizing data from FMS (Financial Management System) disbursements. It identifies new payment requests, updates invoice statuses, logs audit notes, and manages transactions to ensure data integrity. The procedure also logs its execution details for auditing purposes.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including data retrieval, conditional updates, transaction management, and error handling. It interacts with several tables and views, making it moderately complex. The use of temporary tables and transaction management adds to its complexity.\n\n#### 3. Input Parameters\n- `@correlationId AS VARCHAR(128)`: A unique identifier for the operation, used for logging and tracking.\n- `@machineName AS VARCHAR(128)`: The name of the machine executing the procedure, used for logging.\n- `@processName AS VARCHAR(128)`: The name of the process executing the procedure, used for logging.\n- `@domain AS VARCHAR(25)`: The domain of the user executing the procedure, used for logging.\n- `@username AS VARCHAR(25)`: The username of the person executing the procedure, used for logging.\n- `@userId AS INT`: The ID of the user executing the procedure, used for logging.\n- `@exceptionDetails AS VARCHAR(MAX)`: Used to capture exception details in case of an error.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for logging and transaction management.\n2. **Transaction Start**: Begins a transaction to ensure atomicity.\n3. **Payment Request Identification**: \n   - Inserts new payment requests into a temporary table `@paymentRequests` by joining `vwInvoiceGroupContracts`, `PaymentRequest`, and `vwInvoices`.\n   - Filters invoices with specific statuses (4, 5, 6).\n4. **Status Update**: Updates the status of invoices to indicate payment initiation.\n5. **Audit Note Creation**: Logs a note for each invoice with a payment request initiated.\n6. **Payment Record Insertion**: \n   - Inserts new payment records into `InvoicePayment` and logs them in `@paidInvoiceGroups`.\n   - Ensures no duplicate records by checking against existing payments.\n7. **Invoice Group Contract Update**: Marks invoice group contracts as paid.\n8. **Invoice Status Update**: Updates invoices to a paid status if all associated groups are paid.\n9. **Final Audit Note**: Logs a note for each invoice marked as paid.\n10. **Transaction Commit**: Commits the transaction if no errors occur.\n11. **Error Handling**: Rolls back the transaction and logs an error if an exception is caught.\n12. **Logging**: Logs the execution details using `USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Index Usage**: Ensure indexes exist on columns used in joins and WHERE clauses to optimize query performance.\n- **Temporary Tables**: The use of temporary tables can be resource-intensive; consider using table variables if the data set is small.\n- **Transaction Scope**: The transaction scope is broad, which could lead to locking issues. Consider narrowing the scope if possible.\n- **Concurrency**: High concurrency could lead to contention on the tables being updated.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: The procedure uses a generic error message; more detailed error logging could aid in troubleshooting.\n- **Transaction Management**: If the transaction is long-running, it could lead to blocking or deadlocks.\n- **Data Integrity**: Ensure that the logic for determining new payment requests and updating statuses is accurate to prevent data inconsistencies.\n- **Scalability**: As data volume grows, performance may degrade due to the complexity of joins and updates. Regular performance monitoring and optimization may be necessary.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2419,
      "api_response_id": "chatcmpl-C8aphK4OrIY3I0bJrXOgYKVXw22tq"
    },
    "analysis_timestamp": "2025-08-25 19:24:28"
  },
  {
    "procedure_info": {
      "schema": "fms",
      "name": "USP_ReconcileInvoicePaymentsUsingITSPayments",
      "definition": "CREATE PROCEDURE [fms].[USP_ReconcileInvoicePaymentsUsingITSPayments]\r\n(\r\n\t@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reconciled invoice payments using ITS payment(s)'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tSELECT @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA')\r\n\t\t,@messageDetails\t= NULL, @userId = ISNULL(@userId, 0);\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @aaProcessing TABLE(InvoiceID INT NOT NULL, InvoiceGroupContractID INT NOT NULL, ContractNumber VARCHAR(30) NOT NULL);\r\n\t\tDECLARE @aaProcessed TABLE(InvoiceID INT NOT NULL, InvoiceGroupContractID INT NOT NULL, ContractNumber VARCHAR(30) NOT NULL);\r\n\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Find only new payment requests being processed by A&A\r\n\t\tINSERT INTO @aaProcessing (InvoiceID, InvoiceGroupContractID, ContractNumber)\r\n\t\tSELECT DISTINCT IGC.InvoiceID, IGC.InvoiceGroupContractID, IGC.ContractNumber\r\n\t\tFROM Invoice.vwInvoiceGroupContracts AS IGC\r\n\t\t\tINNER JOIN its.AuditsAndAccountsPayments AS ITSPR ON RIGHT(ITSPR.InvoiceNumber ,9) = RIGHT(IGC.InvoiceNumber, 9) AND RIGHT(IGC.ContractNumber, 11) = ITSPR.PurchaseOrder_Registration\r\n\t\t\tINNER JOIN Invoice.vwInvoices AS INV ON INV.InvoiceID = IGC.InvoiceID\r\n\t\tWHERE INV.StatusID = 4 AND INV.Active = 1;\r\n\r\n\t\t-- Update status to sent to A&A\r\n\t\tUPDATE INV\r\n\t\tSET INV.StatusID = 5, INV.ModifiedDate = GETDATE(), ModifiedBy = 0\r\n\t\tFROM Invoice.Invoice AS INV\r\n\t\t\tINNER JOIN @aaProcessing AS PR ON PR.InvoiceID = INV.InvoiceID;\r\n\r\n\t\t-- Create audit note for all invoices that are being processed by A&A\r\n\t\tINSERT INTO Common.Note(ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tSELECT 'INVOICE', T.InvoiceID, 'SENT TO A&A', 'A&A processing invoice', 0\r\n\t\tFROM (SELECT DISTINCT InvoiceID FROM @aaProcessing) AS T;\r\n\r\n\t\t-- Find only new payment requests processed by A&A\r\n\t\tINSERT INTO @aaProcessed (InvoiceID, InvoiceGroupContractID, ContractNumber)\r\n\t\tSELECT DISTINCT IGC.InvoiceID, IGC.InvoiceGroupContractID, IGC.ContractNumber\r\n\t\tFROM Invoice.vwInvoiceGroupContracts AS IGC\r\n\t\t\tINNER JOIN its.AuditsAndAccountsPayments AS ITSPR ON RIGHT(ITSPR.Invoicenumber, 9) = RIGHT(IGC.InvoiceNumber, 9) AND RIGHT(IGC.ContractNumber, 11) = ITSPR.PurchaseOrder_Registration\r\n\t\t\tINNER JOIN Invoice.vwInvoices AS INV ON INV.InvoiceID = IGC.InvoiceID\r\n\t\tWHERE INV.StatusID = 5 AND INV.Active = 1 AND NOT ITSPR.VoucherNumber IS NULL;\r\n\r\n\t\t-- Update status to processed by A&A\r\n\t\tUPDATE INV\r\n\t\tSET INV.StatusID = 6, INV.ModifiedDate = GETDATE(), ModifiedBy = 0\r\n\t\tFROM Invoice.Invoice AS INV\r\n\t\t\tINNER JOIN @aaProcessed AS PR ON PR.InvoiceID = INV.InvoiceID;\r\n\r\n\t\t-- Create audit note for all invoices that have been processed by A&A\r\n\t\tINSERT INTO Common.Note(ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tSELECT 'INVOICE', T.InvoiceID, 'PROCESSED BY A&A', 'A&A has sent invoice to FMS', 0\r\n\t\tFROM (SELECT DISTINCT InvoiceID FROM @aaProcessed) AS T;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to reconcile invoice payments using ITS payment(s)', @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.520000",
      "last_altered": "2025-08-25 16:04:01.520000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ReconcileInvoicePaymentsUsingITSPayments",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ReconcileInvoicePaymentsUsingITSPayments` is designed to reconcile invoice payments using data from ITS (presumably a payment system). It processes invoices by updating their status based on their reconciliation with ITS payments, logs the process, and handles any exceptions that occur during execution.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including data selection, insertion into temporary tables, updates, and logging. It also includes error handling and transaction management, which adds to its complexity. However, it does not involve complex calculations or recursive logic, keeping it at a medium complexity level.\n\n#### 3. Input Parameters\n- `@correlationId AS VARCHAR(128)`: Used for tracking and logging purposes, defaults to a new GUID if not provided.\n- `@machineName AS VARCHAR(128)`: The name of the machine executing the procedure, defaults to the server name.\n- `@processName AS VARCHAR(128)`: The name of the process, defaults to the schema and procedure name.\n- `@domain AS VARCHAR(25)`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25)`: The username of the person executing the procedure.\n- `@userId AS INT`: The ID of the user executing the procedure, defaults to 0.\n- `@exceptionDetails AS VARCHAR(MAX)`: Used to capture exception details in case of an error.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets up variables for logging and transaction management.\n2. **Transaction Start**: Begins a transaction to ensure atomicity.\n3. **Data Selection**: \n   - Inserts new payment requests being processed by A&A into a temporary table `@aaProcessing`.\n   - Updates the status of these invoices to indicate they have been sent to A&A.\n   - Logs an audit note for these invoices.\n4. **Reconciliation**:\n   - Inserts processed payment requests into another temporary table `@aaProcessed`.\n   - Updates the status of these invoices to indicate they have been processed by A&A.\n   - Logs an audit note for these invoices.\n5. **Transaction Commit**: Commits the transaction if no errors occur.\n6. **Error Handling**: Rolls back the transaction if an error occurs and logs the error details.\n7. **Logging**: Calls a logging procedure to record the operation's details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Temporary Tables**: The use of temporary tables (`@aaProcessing` and `@aaProcessed`) is efficient for small to medium datasets but could become a bottleneck with large datasets.\n- **Index Usage**: Ensure that the joins and WHERE clauses are supported by appropriate indexes to optimize performance.\n- **Transaction Scope**: The transaction scope is well-defined, but long-running transactions could lead to locking issues.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: The procedure updates invoice statuses, which could lead to concurrency issues if multiple instances run simultaneously.\n- **Error Handling**: While errors are caught and logged, the procedure does not provide a mechanism to retry or handle specific error types.\n- **Scalability**: The use of in-memory tables may not scale well with very large datasets, potentially leading to memory pressure.\n- **Logging Overhead**: Extensive logging, especially with large volumes of data, could introduce performance overhead.\n- **Hardcoded Values**: The procedure uses hardcoded values for `ModifiedBy` and other fields, which might not be suitable for all environments.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2186,
      "api_response_id": "chatcmpl-C8aq5GZKP4j4XgpV6394kYeL8NSO2"
    },
    "analysis_timestamp": "2025-08-25 19:24:38"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_AccountBillingAvailableByInvoiceBillingGroupRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_AccountBillingAvailableByInvoiceBillingGroupRetrieve]\r\n(\r\n\t@invoiceId AS INT\r\n\t,@groupId AS INT\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @groupId = NULLIF(@groupId, 0), @correlationId\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA'), @userId = ISNULL(@userId, 0)\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved available account billing(s) by invoice and group'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @BillingPeriod AS VARCHAR(6);\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @groupId AS GRPID FOR XML PATH('INPUTS')));\r\n\tSELECT @BillingPeriod = InvoiceBillingPeriod FROM Invoice.Invoice WHERE InvoiceID = @invoiceId;\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT BillingID\r\n\t\t\t,AmountBilled\r\n\t\t\t,AmountPaid\r\n\t\t\t,DateBilled\r\n\t\t\t,DateDue\r\n\t\t\t,BillingPeriod\r\n\t\t\t,BillingPeriodDays\r\n\t\t\t,FromDate\r\n\t\t\t,ToDate\r\n\t\t\t,IsEstimated\r\n\t\t\t,IsManualEntry\r\n\t\t\t,AccountID\r\n\t\t\t,AccountNumber\r\n\t\t\t,FormattedAccountNumber\r\n\t\t\t,EnergySource\r\n\t\t\t,EnergyUsage\r\n\t\t\t,DemandUsage\r\n\t\t\t,GroupID\r\n\t\t\t,GroupName\r\n\t\t\t,ProviderID\r\n\t\t\t,ProviderName\r\n\t\t\t,CreatedDate\r\n\t\t\t,CreatedBy\r\n\t\t\t,ModifiedDate\r\n\t\t\t,ModifiedBy\r\n\t\t\t,Active\r\n\t\t\t,ManualPaymentOverrideAmount\r\n\t\tFROM Billing.vwAccountBillings\r\n\t\tWHERE GroupID = ISNULL(@groupId, GroupID)\r\n\t\t\tAND BillingID NOT IN (SELECT DISTINCT BillingID FROM Invoice.vwInvoiceAccountBillings WHERE GroupID = ISNULL(@groupId, GroupID))\r\n\t\t\tAND BillingPeriod = @BillingPeriod\r\n\t\tORDER BY ProviderName ASC, GroupName ASC, BillingPeriod DESC, AccountNumber ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve available account billing(s) by invoice and group', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.527000",
      "last_altered": "2025-08-25 16:04:01.527000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_AccountBillingAvailableByInvoiceBillingGroupRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_AccountBillingAvailableByInvoiceBillingGroupRetrieve` is designed to retrieve available account billing records that are associated with a specific invoice and billing group. It filters out billing records that are already linked to an invoice and returns detailed billing information. Additionally, it logs the operation's execution details, including any exceptions encountered during the process.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple operations, including parameter validation, data retrieval with filtering, exception handling, and logging. The use of dynamic SQL constructs like `FOR XML PATH` and the integration with logging mechanisms add to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT`: The ID of the invoice for which billing records are being retrieved.\n- `@groupId AS INT`: The ID of the billing group to filter the billing records.\n- `@correlationId AS VARCHAR(128) = NULL`: An optional identifier for correlating logs, defaulting to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaulting to the server name.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, defaulting to the procedure's schema and name.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the user executing the procedure.\n- `@userId AS INT = NULL`: The ID of the user executing the procedure, defaulting to 0.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception details encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Parameter Initialization**: The procedure initializes parameters, setting defaults where necessary. For example, `@correlationId` is set to a new GUID if not provided, and `@machineName` defaults to the server name.\n2. **Billing Period Retrieval**: It retrieves the billing period for the specified invoice from the `Invoice.Invoice` table.\n3. **Data Retrieval**: The procedure attempts to select billing records from the `Billing.vwAccountBillings` view that match the specified group ID and billing period, excluding those already linked to an invoice in `Invoice.vwInvoiceAccountBillings`.\n4. **Exception Handling**: If an error occurs during data retrieval, the procedure captures the error message and sets the severity to 'ERROR'.\n5. **Logging**: Regardless of success or failure, the procedure logs the operation details using `dbo.USP_AppLogCreate`, including execution time and any exceptions.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the columns used in the `WHERE` clause, such as `GroupID` and `BillingPeriod`, are indexed to optimize query performance.\n- **View Complexity**: The performance depends on the complexity and size of the views `Billing.vwAccountBillings` and `Invoice.vwInvoiceAccountBillings`. Ensure these views are optimized.\n- **Logging Overhead**: The logging mechanism, especially if it involves writing to a database, can introduce overhead. Consider asynchronous logging if performance is a concern.\n\n#### 6. Potential Issues or Risks\n- **NULL Handling**: The use of `ISNULL` and `COALESCE` for parameter defaults could lead to unexpected behavior if not carefully managed, especially with `@groupId`.\n- **Concurrency**: If the underlying tables or views are subject to frequent updates, there could be concurrency issues affecting the accuracy of the retrieved data.\n- **Error Handling**: The `CATCH` block captures errors but does not re-throw them, which might mask issues from calling applications.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized data access.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1871,
      "api_response_id": "chatcmpl-C8aqGyjttSNY3c42uH61xSH3cI3CP"
    },
    "analysis_timestamp": "2025-08-25 19:25:16"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_BillingGroupAvailableByInvoiceRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_BillingGroupAvailableByInvoiceRetrieve]\r\n(\r\n\t@invoiceId AS INT\r\n\t,@billingType AS CHAR(1) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @billingType = NULLIF(@billingType, ''), @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA'), @userId = ISNULL(@userId, 0)\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved utility provider billing groups for invoices'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @providerId AS INT;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @billingType AS BILLTYPE FOR XML PATH('INPUTS')));\r\n\tSELECT @providerId = ProviderID FROM Invoice.vwInvoices WHERE InvoiceID = @invoiceId;\r\n\r\n\tIF (ISNULL(@providerId, 0) = 0)\r\n\tBEGIN\r\n\t\tRAISERROR (N'Unable to determine provider for invoice', 16, 1);\r\n\tEND;\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT GroupID\r\n\t\t\t,GroupName\r\n\t\t\t,GroupDescription\r\n\t\t\t,SummaryAccountNumber\r\n\t\t\t,IsSummaryBilling\r\n\t\t\t,AccountCount\r\n\t\t\t,ProviderID\r\n\t\t\t,BillingType\r\n\t\t\t,CreatedDate\r\n\t\t\t,CreatedBy\r\n\t\t\t,ModifiedDate\r\n\t\t\t,ModifiedBy\r\n\t\t\t,Active\r\n\t\tFROM Billing.vwBillingGroups\r\n\t\tWHERE ProviderID = @providerId\r\n\t\t\tAND BillingType = ISNULL(@billingType, BillingType)\r\n\t\t\tAND Active = 1\r\n\t\tORDER BY GroupName ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve utility provider billing groups for invoices', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.530000",
      "last_altered": "2025-08-25 16:04:01.530000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingType",
        "data_type": "char",
        "mode": "IN",
        "max_length": 1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_BillingGroupAvailableByInvoiceRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_BillingGroupAvailableByInvoiceRetrieve` is designed to retrieve billing group information associated with a specific invoice from a SQL Server database. It takes an invoice ID as input and optionally filters by billing type. The procedure logs its execution details, including any exceptions, and can trigger an email notification if an error occurs.\n\n#### 2. Complexity Level: Medium\nThe procedure involves several operations, including parameter validation, conditional logic, error handling, and logging. It interacts with multiple database views and uses a TRY-CATCH block for error management, which adds to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT`: The primary identifier for the invoice whose billing groups are to be retrieved.\n- `@billingType AS CHAR(1) = NULL`: An optional filter to specify the type of billing.\n- `@correlationId AS VARCHAR(128) = NULL`: An optional identifier for tracking the procedure execution, defaulting to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaulting to the server name.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, defaulting to the procedure's schema and name.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the user executing the procedure.\n- `@userId AS INT = NULL`: The ID of the user executing the procedure, defaulting to 0.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception messages.\n\n#### 4. Business Logic and Workflow\n1. **Parameter Initialization**: The procedure initializes and validates input parameters, setting defaults where necessary.\n2. **Provider ID Retrieval**: It retrieves the `ProviderID` associated with the given `@invoiceId` from the `Invoice.vwInvoices` view.\n3. **Error Handling**: If the `ProviderID` is not found, an error is raised.\n4. **Data Retrieval**: Within a TRY block, it selects billing group details from the `Billing.vwBillingGroups` view, filtering by `ProviderID`, `BillingType`, and active status.\n5. **Exception Handling**: In the CATCH block, it captures any error messages and sets the severity to 'ERROR', indicating a failure in data retrieval.\n6. **Logging**: The procedure logs execution details, including any exceptions, using the `dbo.USP_AppLogCreate` procedure. It calculates the elapsed time for the operation and determines if an email notification should be sent.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that `ProviderID`, `BillingType`, and `Active` columns in `Billing.vwBillingGroups` are indexed to optimize the SELECT query.\n- **Parameter Sniffing**: The use of default values and conditional logic may lead to parameter sniffing issues, affecting query performance.\n- **Logging Overhead**: The logging mechanism, especially if it involves writing to a database or sending emails, could introduce latency.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: The procedure raises an error if the `ProviderID` is not found, which could halt execution if not properly managed by calling applications.\n- **Concurrency**: If multiple instances of this procedure are executed simultaneously, there could be contention on shared resources, such as the logging mechanism.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized access to sensitive data.\n- **Scalability**: The procedure's performance may degrade with large datasets or high-frequency execution due to logging and potential email notifications.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1760,
      "api_response_id": "chatcmpl-C8aqs5oe77EBT3sCZrLcj0JvGFGPE"
    },
    "analysis_timestamp": "2025-08-25 19:25:32"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_BillingGroupContractSave",
      "definition": "CREATE PROCEDURE [Invoice].[USP_BillingGroupContractSave]\r\n(\r\n\t@groupId AS INT\r\n\t,@fiscalYear AS VARCHAR(4)\r\n\t,@contractIds AS VARCHAR(4000) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'UPDATE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Saved billing group contract(s)'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime INT, @sendEmail AS BIT = 0\r\n\t\t,@tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tSELECT @groupId = NULLIF(@groupId, 0), @contractIds\t = NULLIF(@contractIds, ''),  @userId = ISNULL(@userId, 0);\r\n\tSELECT @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA')\r\n\t\t,@messageDetails = CONVERT(VARCHAR(MAX), (SELECT @groupId AS INVID, @contractIds AS FY FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\tDECLARE @newBGC TABLE(GroupID INT\r\n\t\t,FiscalYear VARCHAR(4)\r\n\t\t,ContractID VARCHAR(100)\r\n\t\t,ToBeAdded BIT\r\n\t\t,BGCID INT);\r\n\r\n\t\tDECLARE @oldBGC TABLE(GroupID INT\r\n\t\t,FiscalYear VARCHAR(4)\r\n\t\t,ContractID VARCHAR(100)\r\n\t\t,ToBeDeleted BIT\r\n\t\t,BGCID INT);\r\n\r\n\t\tINSERT INTO @newBGC\r\n\t\tSELECT @groupId\r\n\t\t\t,@fiscalYear\r\n\t\t\t,ID\r\n\t\t\t,CONVERT(BIT, 1)\r\n\t\t\t,CONVERT(INT, 0)\r\n\t\tFROM dbo.UDF_SplitToTable(@contractIds, ',');\r\n\r\n\t\tUPDATE T\r\n\t\tSET T.ToBeAdded = 0\r\n\t\t\t,T.BGCID = BGC.BillingGroupContractID\r\n\t\tFROM @newBGC AS T\r\n\t\t\tINNER JOIN Billing.BillingGroupContract AS BGC ON BGC.GroupID = T.GroupID\r\n\t\t\t\tAND BGC.FiscalYear = T.FiscalYear AND BGC.ContractID = T.ContractID;\r\n\r\n\t\tINSERT INTO @oldBGC\r\n\t\tSELECT GroupID\r\n\t\t\t,FiscalYear\r\n\t\t\t,ContractID\r\n\t\t\t,CONVERT(BIT, 0)\r\n\t\t\t,BillingGroupContractID\r\n\t\tFROM Billing.BillingGroupContract\r\n\t\tWHERE GroupID = @groupId AND FiscalYear = @fiscalYear;\r\n\r\n\t\tUPDATE T\r\n\t\tSET T.ToBeDeleted = 1\r\n\t\tFROM @oldBGC AS T\r\n\t\tWHERE T.BGCID NOT IN (SELECT BGCID FROM @newBGC);\r\n\r\n\t\tIF EXISTS (SELECT 1 FROM @newBGC WHERE ToBeAdded = 1)\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO Billing.BillingGroupContract (GroupID, FiscalYear, ContractID, CreatedBy)\r\n\t\t\tSELECT GroupID, FiscalYear, ContractID, @userId\r\n\t\t\tFROM @newBGC\r\n\t\t\tWHERE ToBeAdded = 1;\r\n\t\tEND;\r\n\r\n\t\tIF EXISTS (SELECT 1 FROM @newBGC WHERE ToBeAdded = 0)\r\n\t\tBEGIN\r\n\t\t\tUPDATE BGC\r\n\t\t\tSET BGC.Active = 1\r\n\t\t\t\t,BGC.ModifiedBy = @userId\r\n\t\t\t\t,BGC.ModifiedDate = GETDATE()\r\n\t\t\tFROM Billing.BillingGroupContract AS BGC\r\n\t\t\t\tINNER JOIN @newBGC AS T ON T.BGCID = BGC.BillingGroupContractID;\r\n\t\tEND;\r\n\r\n\t\tIF EXISTS (SELECT 1 FROM @oldBGC WHERE ToBeDeleted = 1)\r\n\t\tBEGIN\r\n\t\t\tUPDATE BGC\r\n\t\t\tSET BGC.Active = 0\r\n\t\t\t\t,BGC.ModifiedBy = @userId\r\n\t\t\t\t,BGC.ModifiedDate = GETDATE()\r\n\t\t\tFROM Billing.BillingGroupContract AS BGC\r\n\t\t\t\tINNER JOIN @oldBGC AS T ON T.BGCID = BGC.BillingGroupContractID\r\n\t\t\tWHERE ToBeDeleted = 1;\r\n\t\tEND;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to save billing group contract(s)', @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.543000",
      "last_altered": "2025-08-25 16:04:01.543000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractIds",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4000,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_BillingGroupContractSave",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_BillingGroupContractSave` is designed to manage billing group contracts within a specified fiscal year for a given group. It handles the insertion and updating of contract records in the `Billing.BillingGroupContract` table based on the provided contract IDs. The procedure also logs the operation details and any exceptions that occur during execution.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is medium due to the following factors:\n- It involves multiple operations: inserting new records, updating existing records, and deactivating obsolete records.\n- It uses temporary tables to manage and compare new and existing data.\n- It includes error handling with transaction management and logging.\n\n#### 3. Input Parameters\n- `@groupId AS INT`: The identifier for the billing group.\n- `@fiscalYear AS VARCHAR(4)`: The fiscal year for which the contracts are being managed.\n- `@contractIds AS VARCHAR(4000) = NULL`: A comma-separated list of contract IDs to be processed.\n- `@correlationId AS VARCHAR(128) = NULL`: An optional identifier for correlating logs.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the user executing the procedure.\n- `@userId AS INT = NULL`: The identifier of the user executing the procedure.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture exception details if any occur.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for various parameters and initializes a transaction.\n2. **Data Preparation**: \n   - Splits the `@contractIds` into individual contract IDs using a user-defined function `UDF_SplitToTable`.\n   - Populates temporary tables `@newBGC` and `@oldBGC` with new and existing contract data, respectively.\n3. **Data Comparison and Update**:\n   - Updates `@newBGC` to mark existing contracts that should not be added.\n   - Populates `@oldBGC` with existing contracts and marks those not in `@newBGC` for deletion.\n4. **Database Operations**:\n   - Inserts new contracts into `Billing.BillingGroupContract`.\n   - Updates existing contracts to set them as active.\n   - Deactivates contracts that are no longer needed.\n5. **Transaction Management**: Commits the transaction if successful; otherwise, rolls back in case of an error.\n6. **Logging**: Logs the operation details and any exceptions using `dbo.USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Transaction Scope**: The procedure uses a transaction to ensure data integrity, which is crucial but can lock resources and affect performance if the transaction scope is too broad.\n- **String Operations**: The use of `VARCHAR(MAX)` and string manipulation functions can be resource-intensive, especially with large input sizes.\n- **Temporary Tables**: The use of temporary tables can impact performance, particularly if the data volume is high.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: While the procedure includes error handling, it relies on a single catch block. More granular error handling could provide better insights into specific failures.\n- **Concurrency**: The procedure may face concurrency issues if multiple instances are executed simultaneously, potentially leading to deadlocks or race conditions.\n- **Input Validation**: There is limited validation of input parameters, which could lead to unexpected behavior if invalid data is provided.\n- **Scalability**: The use of `VARCHAR(4000)` for `@contractIds` limits the number of contracts that can be processed in a single execution, which may not scale well for larger datasets.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2320,
      "api_response_id": "chatcmpl-C8ar7yVeyu5EX5c0WxSrR0uqGfgXR"
    },
    "analysis_timestamp": "2025-08-25 19:25:46"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_ContractAvailableByInvoiceBillingGroupRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_ContractAvailableByInvoiceBillingGroupRetrieve]\r\n(\r\n\t@invoiceId AS INT\r\n\t,@groupId AS INT\r\n\t,@fiscalYear AS VARCHAR(4)\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @groupId = NULLIF(@groupId, 0), @fiscalYear = NULLIF(@fiscalYear, '')\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA'), @userId = ISNULL(@userId, 0)\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved utility provider contracts by invoice and billing groups'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @groupId AS GRPID, @fiscalYear AS FY FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @fiscalYearStart AS VARCHAR(8), @fiscalYearEnd AS VARCHAR(8), @providerId AS INT;\r\n\r\n\t\tIF (ISNULL(@fiscalYear, '') <> '')\r\n\t\tBEGIN\r\n\t\t\tSELECT @fiscalYearStart = CONVERT(VARCHAR(4), (CONVERT(INT, @fiscalYear) - 1)) + '0701';\r\n\t\t\tSELECT @fiscalYearEnd = @fiscalYear + '0630';\r\n\t\tEND;\r\n\r\n\t\tSELECT @providerId = ProviderID\r\n\t\tFROM Billing.vwBillingGroups\r\n\t\tWHERE GroupID = @groupId;\r\n\r\n\t\tDECLARE @tmpInvoiceContracts TABLE(ContractID INT NOT NULL);\r\n\t\tDECLARE @tmpGroupContracts TABLE(ContractID INT NOT NULL);\r\n\r\n\t\tINSERT INTO @tmpInvoiceContracts\r\n\t\tSELECT DISTINCT ContractID\r\n\t\tFROM Invoice.vwInvoiceGroupContracts\r\n\t\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID) AND GroupID = ISNULL(@groupId, GroupID) AND FiscalYear = ISNULL(@fiscalYear, FiscalYear);\r\n\r\n\t\tINSERT INTO @tmpGroupContracts\r\n\t\tSELECT DISTINCT ContractID\r\n\t\tFROM Billing.vwBillingGroupContracts\r\n\t\tWHERE GroupID = ISNULL(@groupId, GroupID) AND FiscalYear = ISNULL(@fiscalYear, FiscalYear);\r\n\r\n\t\tSELECT C.ContractID\r\n\t\t\t,C.ContractNumber\r\n\t\t\t,C.[Name]\r\n\t\t\t,C.[Description]\r\n\t\t\t,C.ProviderID\r\n\t\t\t,C.ProviderName\r\n\t\t\t,C.FiscalYearStart\r\n\t\t\t,C.FiscalYearEnd\r\n\t\t\t,C.ActualAmount\r\n\t\t\t,C.CloseAmount\r\n\t\t\t,C.OpenAmount\r\n\t\t\t,C.AvailableAmount\r\n\t\t\t,C.CreatedDate\r\n\t\t\t,C.CreatedBy\r\n\t\t\t,C.ModifiedDate\r\n\t\t\t,C.ModifiedBy\r\n\t\t\t,C.Active\r\n\t\t\t,C.CapacityAmount\r\n\t\tFROM Billing.vwContracts AS C\r\n\t\tWHERE C.ProviderID = @providerId\r\n\t\t\tAND C.FiscalYearStart <= @fiscalYearStart AND C.FiscalYearEnd >= @fiscalYearEnd\r\n\t\t\tAND C.ContractID NOT IN (SELECT ContractID FROM @tmpInvoiceContracts)\r\n\t\tORDER BY C.ContractNumber ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve utility provider contracts by invoice and billing groups', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.557000",
      "last_altered": "2025-08-25 16:04:01.557000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ContractAvailableByInvoiceBillingGroupRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ContractAvailableByInvoiceBillingGroupRetrieve` is designed to retrieve utility provider contracts that are available based on specified invoice and billing group criteria. It filters contracts that are not already associated with a given invoice and billing group within a specified fiscal year. The procedure logs its execution details and handles exceptions by capturing error messages and logging them.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including parameter validation, temporary table usage, conditional logic, and exception handling. It also interacts with several views and logs execution details, which adds to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT`: The ID of the invoice to filter contracts.\n- `@groupId AS INT`: The ID of the billing group to filter contracts.\n- `@fiscalYear AS VARCHAR(4)`: The fiscal year to filter contracts.\n- `@correlationId AS VARCHAR(128) = NULL`: An optional identifier for correlating logs.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the user executing the procedure.\n- `@userId AS INT = NULL`: The ID of the user executing the procedure.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture exception details if any occur.\n\n#### 4. Business Logic and Workflow\n1. **Parameter Initialization and Validation**: \n   - Nullifies `@invoiceId`, `@groupId`, and `@fiscalYear` if they are default values (0 or empty).\n   - Generates a new `@correlationId` if not provided.\n   - Sets default values for `@machineName` and `@processName` if not provided.\n\n2. **Fiscal Year Calculation**:\n   - Calculates the start and end dates of the fiscal year if `@fiscalYear` is provided.\n\n3. **Provider ID Retrieval**:\n   - Retrieves the `ProviderID` from `Billing.vwBillingGroups` based on `@groupId`.\n\n4. **Temporary Tables**:\n   - Creates temporary tables `@tmpInvoiceContracts` and `@tmpGroupContracts` to store contract IDs associated with the invoice and billing group.\n\n5. **Data Insertion**:\n   - Inserts distinct contract IDs into the temporary tables from views `Invoice.vwInvoiceGroupContracts` and `Billing.vwBillingGroupContracts`.\n\n6. **Contract Selection**:\n   - Selects contracts from `Billing.vwContracts` that match the provider ID and fiscal year range, excluding those already associated with the invoice.\n\n7. **Exception Handling**:\n   - Catches exceptions, logs error messages, and sets a flag to send an email notification.\n\n8. **Logging**:\n   - Logs the execution details using `dbo.USP_AppLogCreate`, including action, severity, message, and elapsed time.\n\n#### 5. Performance Considerations\n- **Temporary Tables**: The use of temporary tables can impact performance, especially if the data sets are large. Indexing these tables could improve performance.\n- **View Usage**: The procedure relies on views, which may have their own performance implications depending on their complexity and underlying data.\n- **Date Calculations**: The fiscal year calculations are straightforward but could be optimized if used frequently.\n\n#### 6. Potential Issues or Risks\n- **Parameter Validation**: The procedure assumes that `@invoiceId` and `@groupId` are valid when not nullified. Invalid IDs could lead to incorrect results.\n- **Concurrency**: The use of temporary tables may lead to contention if the procedure is executed concurrently with large data sets.\n- **Error Handling**: While exceptions are caught, the procedure does not re-throw them, which might hide issues from calling applications.\n- **Logging Overhead**: Extensive logging, especially with large `@messageDetails`, could introduce overhead and impact performance.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2137,
      "api_response_id": "chatcmpl-C8arLSjRjKD0lpnHW6z8oZ0xtr5Bt"
    },
    "analysis_timestamp": "2025-08-25 19:25:57"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_ContractLineAvailableByInvoiceRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_ContractLineAvailableByInvoiceRetrieve]\r\n(\r\n\t@invoiceId AS INT\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved available contract line(s) by invoice'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @invoiceIsSplitFY AS BIT\r\n\t\t,@priorFY AS INT, @currentFY AS INT;\r\n\r\n\tSELECT @userId = ISNULL(@userId, 0), @invoiceId = NULLIF(@invoiceId, 0), @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID FOR XML PATH('INPUTS')))\r\n\t\t, @invoiceIsSplitFY = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\tSELECT @currentFY = Billing.UDF_GetFiscalYear(CreatedDate) \r\n\tFROM Invoice.Invoice\r\n\tWHERE InvoiceID = @invoiceId;\r\n\r\n\tSET @priorFY = @currentFY-1;\r\n\r\n\tBEGIN TRY\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tWITH T AS (SELECT R.ContractID, R.GroupID, R.GroupName, R.FiscalYear, R.CommodityLine, R.AccountingLine, R.BudgetCode\r\n\t\t\t\t\t, IIF(R.rowid = 1, R.AmountPaid, 0) AS AmountPaid, R.ActualAmountPaid\r\n\t\t\t\tFROM (SELECT DISTINCT a.ContractID, a.GroupID, a.GroupName, a.FiscalYear, a.BudgetCode, a.CommodityLine, a.AccountingLine\r\n\t\t\t\t\t\t,DENSE_RANK() OVER (PARTITION BY a.GroupID, a.BudgetCode ORDER BY a.CommodityLine, a.AccountingLine) AS rowid\r\n\t\t\t\t\t\t,ISNULL(b.AmountPaid, 0) AS AmountPaid\r\n\t\t\t\t\t\t,ISNULL(c.AmountPaid, 0) AS ActualAmountPaid\r\n\t\t\t\t\tFROM Invoice.vwinvoicegroupcontractlines AS a\r\n\t\t\t\t\t\tLEFT JOIN (SELECT InvoiceID, GroupID, BudgetCode, FiscalYear, AmountPaid\r\n\t\t\t\t\t\tFROM Invoice.vwInvoiceGroupContractLineAmountsFromBilling \r\n\t\t\t\t\t\tWHERE InvoiceID = @invoiceId) AS b ON a.InvoiceID = b.InvoiceID\r\n\t\t\t\t\t\t\tAND a.GroupID = b.GroupID\r\n\t\t\t\t\t\t\tAND a.budgetcode = b.budgetcode\r\n\t\t\t\t\t\t\tAND a.FiscalYear = b.FiscalYear\r\n\t\t\t\t\t\tLEFT JOIN Invoice.vwInvoiceContractLines AS c ON a.invoiceid = c.InvoiceID AND a.ContractID = c.ContractID\r\n\t\t\t\t\t\t\tAND a.CommodityLine = c.CommodityLine AND a.AccountingLine = c.AccountingLine AND a.BudgetCode = c.BudgetCode\r\n\t\t\t\t\tWHERE a.InvoiceID = @invoiceId) AS R\r\n\t\t\t)\r\n\t\t\tSELECT CL.ContractLineID, T.GroupID, T.GroupName, CL.FiscalYear, CL.CommodityLine, CL.AccountingLine, CL.BudgetCode, CL.ObjectCode, CL.UoA\r\n\t\t\t\t,CL.ActualAmount, Billing.UDF_GetContractLineAmountPaid(CL.ContractLineID, GETDATE()) AS CloseAmount\r\n\t\t\t\t,CL.ActualAmount - Billing.UDF_GetContractLineAmountPaid(CL.ContractLineID, GETDATE()) - T.ActualAmountPaid AS OpenAmount\r\n\t\t\t\t,CL.AvailableAmount, CL.ContractID, CL.ContractNumber, CL.CreatedDate, CL.CreatedBy, CL.ModifiedDate, CL.ModifiedBy\r\n\t\t\t\t,CL.Active, T.AmountPaid, 0.00 AS PriorFYAmountPaid, T.AmountPaid AS CurrentFYAmountPaid, T.ActualAmountPaid\r\n\t\t\t\t,0.00 AS PriorFYActualAmountPaid, T.ActualAmountPaid AS CurrentFYActualAmountPaid, @invoiceIsSplitFY AS InvoiceIsSplitFY\r\n\t\t\t\t,@currentFY AS CurrentFY, COUNT(1) OVER (PARTITION BY CL.ContractID, CL.BudgetCode) AS CountPerYear\r\n\t\t\t\t,CAST(ROW_NUMBER() OVER (PARTITION BY CL.ContractID, CL.BudgetCode ORDER BY CL.CommodityLine, CL.AccountingLine) AS INT) AS IndexPerYear\r\n\t\t\t\t,CAST(ROW_NUMBER() OVER (PARTITION BY CL.ContractID, CL.BudgetCode ORDER BY CL.CommodityLine, CL.AccountingLine) AS INT) AS IndexAll\r\n\t\t\tFROM Billing.vwContractLines AS CL\r\n\t\t\t\tINNER JOIN T ON T.ContractID = CL.ContractID AND T.FiscalYear = CL.FiscalYear AND T.budgetCode = CL.BudgetCode\r\n\t\t\t\t\tAND T.CommodityLine = CL.CommodityLine AND T.AccountingLine = CL.AccountingLine\r\n\t\t\tORDER BY T.GroupID ASC, CL.FiscalYear, CL.CommodityLine ASC, CL.AccountingLine ASC, CL.BudgetCode;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH T AS (SELECT R.ContractID, R.GroupID, R.GroupName, R.FiscalYear, R.CommodityLine, R.AccountingLine, R.BudgetCode, IIF(R.rowid = 1, R.AmountPaid, 0) AS AmountPaid\r\n\t\t\t\t\t,IIF(R.FiscalYear = @priorFY, IIF(R.rowid = 1, R.AmountPaid, 0), 0) AS PriorFYAmountPaid\r\n\t\t\t\t\t,IIF(R.FiscalYear = @currentFY, IIF(R.rowid = 1, R.AmountPaid, 0), 0) AS CurrentFYAmountPaid\r\n\t\t\t\t\t,R.ActualAmountPaid, R.PriorFYActualAmountPaid, R.CurrentFYActualAmountPaid\r\n\t\t\t\tFROM (SELECT DISTINCT a.ContractID, a.FiscalYear, a.BudgetCode, a.CommodityLine, a.AccountingLine, a.GroupID, a.GroupName\r\n\t\t\t\t\t\t,DENSE_RANK() OVER (PARTITION BY a.FiscalYear, a.GroupID, a.BudgetCode ORDER BY a.CommodityLine, a.AccountingLine) AS rowid\r\n\t\t\t\t\t\t,ISNULL(b.AmountPaid, 0) AS AmountPaid\r\n\t\t\t\t\t\t,ISNULL(c.AmountPaid, 0) AS ActualAmountPaid\r\n\t\t\t\t\t\t,ISNULL(c.PriorFYAmountPaid, 0) AS PriorFYActualAmountPaid\r\n\t\t\t\t\t\t,ISNULL(c.CurrentFYAmountPaid, 0) AS CurrentFYActualAmountPaid\r\n\t\t\t\t\tFROM Invoice.vwinvoicegroupcontractlines AS a\r\n\t\t\t\t\t\tLEFT JOIN (SELECT InvoiceID, GroupID, BudgetCode, FiscalYear, AmountPaid\r\n\t\t\t\t\t\tFROM Invoice.vwInvoiceGroupContractLineAmountsFromBilling \r\n\t\t\t\t\t\tWHERE InvoiceID = @invoiceId) AS b ON a.InvoiceID = b.InvoiceID\r\n\t\t\t\t\t\t\tAND a.GroupID = b.GroupID\r\n\t\t\t\t\t\t\tAND a.BudgetCode = b.BudgetCode\r\n\t\t\t\t\t\t\tAND a.FiscalYear = b.FiscalYear\r\n\t\t\t\t\t\tLEFT JOIN [Invoice].[vwInvoiceContractLinesSplitFY] c ON a.invoiceid = c.InvoiceID AND a.ContractID = c.ContractID \r\n\t\t\t\t\t\t\tAND a.FiscalYear = c.FiscalYear AND a.CommodityLine = c.CommodityLine AND a.AccountingLine = c.AccountingLine AND a.BudgetCode = c.BudgetCode\r\n\t\t\t\t\tWHERE a.InvoiceID = @invoiceId) AS R\r\n\t\t\t)\r\n\t\t\tSELECT CL.ContractLineID ,T.GroupID, T.GroupName, CL.FiscalYear, CL.CommodityLine, CL.AccountingLine, CL.BudgetCode, CL.ObjectCode, CL.UoA\r\n\t\t\t\t,CL.ActualAmount, Billing.UDF_GetContractLineAmountPaid(CL.ContractLineID, GETDATE()) AS CloseAmount\r\n\t\t\t\t,CL.ActualAmount - Billing.UDF_GetContractLineAmountPaid(CL.ContractLineID, GETDATE()) - T.ActualAmountPaid AS OpenAmount\r\n\t\t\t\t,CL.AvailableAmount, CL.ContractID, CL.ContractNumber, CL.CreatedDate, CL.CreatedBy, CL.ModifiedDate, CL.ModifiedBy\r\n\t\t\t\t,CL.Active, T.AmountPaid, T.PriorFYAmountPaid, T.CurrentFYAmountPaid, T.ActualAmountPaid, T.PriorFYActualAmountPaid\r\n\t\t\t\t,T.CurrentFYActualAmountPaid, @invoiceIsSplitFY AS InvoiceIsSplitFY, @currentFY AS CurrentFY\r\n\t\t\t\t,COUNT(1) OVER (PARTITION BY T.GroupID, CL.FiscalYear, CL.BudgetCode) AS CountPerYear\r\n\t\t\t\t,CAST(ROW_NUMBER() OVER (PARTITION BY T.GroupID, CL.FiscalYear, CL.BudgetCode ORDER BY CL.CommodityLine, CL.AccountingLine) AS INT) AS IndexPerYear\r\n\t\t\t\t,CAST(ROW_NUMBER() OVER (PARTITION BY T.GroupID, CL.BudgetCode ORDER BY CL.FiscalYear, CL.CommodityLine, CL.AccountingLine) AS INT) AS IndexAll\r\n\t\t\tFROM Billing.vwContractLines AS CL\r\n\t\t\t\tINNER JOIN T ON T.ContractID = CL.ContractID AND T.FiscalYear = CL.FiscalYear AND T.budgetCode = CL.BudgetCode\r\n\t\t\t\t\tAND T.CommodityLine = CL.CommodityLine AND T.AccountingLine = CL.AccountingLine\r\n\t\t\tORDER BY T.GroupID ASC, CL.FiscalYear, CL.CommodityLine ASC, CL.AccountingLine ASC, CL.BudgetCode;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve available contract line(s) by invoice', @sendEmail =  1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.570000",
      "last_altered": "2025-08-25 16:04:01.570000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_ContractLineAvailableByInvoiceRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_ContractLineAvailableByInvoiceRetrieve` is designed to retrieve available contract lines associated with a specific invoice. It determines whether the invoice is split across fiscal years and retrieves contract line details accordingly. The procedure logs its execution details and handles exceptions by capturing error messages.\n\n#### 2. Complexity Level: Medium\nThe complexity is considered medium due to the following factors:\n- Use of conditional logic to handle split fiscal year invoices.\n- Utilization of common table expressions (CTEs) and window functions.\n- Integration with user-defined functions and logging mechanisms.\n- Exception handling and dynamic parameter management.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT`: The primary identifier for the invoice whose contract lines are to be retrieved.\n- `@correlationId AS VARCHAR(128) = NULL`: An optional identifier for correlating logs or transactions.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, used for logging.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, used for logging.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure, used for logging.\n- `@username AS VARCHAR(25) = NULL`: The username of the person executing the procedure, used for logging.\n- `@userId AS INT = NULL`: The user ID of the person executing the procedure, used for logging.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for parameters and initializes variables for logging and execution tracking.\n2. **Determine Fiscal Year**: Calls user-defined functions to check if the invoice is split across fiscal years and to get the current fiscal year.\n3. **Conditional Logic**:\n   - If the invoice is not split across fiscal years, it retrieves contract line details using a CTE that joins multiple views and calculates amounts.\n   - If the invoice is split, it retrieves contract line details with additional fiscal year-specific calculations.\n4. **Data Retrieval**: Uses window functions like `DENSE_RANK()` and `ROW_NUMBER()` to organize and rank data.\n5. **Exception Handling**: Catches any errors during execution, logs the error message, and sets a flag to send an email notification.\n6. **Logging**: Calls a logging procedure to record the execution details, including any exceptions and the elapsed time.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the columns used in joins and where clauses are indexed to optimize query performance.\n- **User-Defined Functions**: The use of scalar functions like `Billing.UDF_IsSplitFYInvoice` and `Billing.UDF_GetFiscalYear` can impact performance if not optimized.\n- **Window Functions**: While powerful, window functions can be resource-intensive, especially on large datasets.\n- **Logging Overhead**: Frequent logging can introduce overhead, particularly if the procedure is executed often.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: The procedure captures error messages but does not implement a retry mechanism or detailed error resolution steps.\n- **Scalability**: As data volume grows, the use of CTEs and window functions may lead to performance bottlenecks.\n- **Concurrency**: If multiple instances of this procedure run simultaneously, there could be contention on shared resources, especially if logging or user-defined functions are not thread-safe.\n- **Data Integrity**: Assumes that the data in the views and user-defined functions is accurate and up-to-date, which may not always be the case if there are delays in data refresh or synchronization.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3337,
      "api_response_id": "chatcmpl-C8asVYBNZC89scH5Fdd2CxiwhNrF9"
    },
    "analysis_timestamp": "2025-08-25 19:27:11"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_FiscalYearAvailableByInvoiceBillingGroupRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_FiscalYearAvailableByInvoiceBillingGroupRetrieve]\r\n(\r\n\t@fiscalYear AS VARCHAR(4) = NULL\r\n\t,@groupId AS INT = NULL\r\n\t,@activeOnly AS BIT = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved  fiscal years', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\r\n\tSELECT @fiscalYear = NULLIF(@fiscalYear, ''), @groupId = NULLIF(@groupId, 0), @activeOnly = ISNULL(@activeOnly, 0), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @fiscalYear AS FY, @groupId AS GRPID, @activeOnly AS ACT FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\r\n\t\tDECLARE @tmpFiscalYears TABLE(FiscalYear INT);\r\n\r\n\t\tINSERT INTO @tmpFiscalYears\r\n\t\tSELECT DISTINCT FiscalYear\r\n\t\tFROM Billing.vwBillingGroupContracts\r\n\t\tWHERE GroupID = ISNULL(@groupId, GroupID);\r\n\r\n\t\tSELECT FY.FiscalYear, FY.FiscalYearDescription, FY.FiscalYearStart, FY.FiscalYearEnd, FY.Active\r\n\t\tFROM Billing.vwFiscalYears AS FY\r\n\t\t\tINNER JOIN @tmpFiscalYears AS T ON T.FiscalYear = FY.FiscalYear\r\n\t\tWHERE FY.FiscalYear = ISNULL(@fiscalYear, FY.FiscalYear)\r\n\t\t\tAND FY.Active = CASE WHEN @activeOnly = 1 THEN 1 ELSE FY.Active END\r\n\t\tORDER BY FY.FiscalYear DESC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve fiscal years', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.580000",
      "last_altered": "2025-08-25 16:04:01.580000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@activeOnly",
        "data_type": "bit",
        "mode": "IN",
        "max_length": 1,
        "precision": 1,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_FiscalYearAvailableByInvoiceBillingGroupRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_FiscalYearAvailableByInvoiceBillingGroupRetrieve` is designed to retrieve fiscal year information based on a specified billing group and other optional criteria. It queries fiscal year data from a view, `Billing.vwFiscalYears`, and filters results based on the input parameters. The procedure also logs its execution details, including any exceptions, using another stored procedure, `dbo.USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including input validation, data retrieval with conditional logic, error handling, and logging. The use of temporary tables and dynamic input handling adds to its complexity.\n\n#### 3. Input Parameters\n- `@fiscalYear AS VARCHAR(4)`: Optional. Specifies a particular fiscal year to filter results.\n- `@groupId AS INT`: Optional. Identifies the billing group for which fiscal years are retrieved.\n- `@activeOnly AS BIT`: Optional. If set to 1, only active fiscal years are returned.\n- `@correlationId AS VARCHAR(128)`: Optional. Used for logging to correlate logs across systems.\n- `@machineName AS VARCHAR(128)`: Optional. Specifies the machine name for logging purposes.\n- `@processName AS VARCHAR(128)`: Optional. Specifies the process name for logging.\n- `@domain AS VARCHAR(25)`: Optional. User domain for logging.\n- `@username AS VARCHAR(25)`: Optional. Username for logging.\n- `@userId AS INT`: Optional. User ID for logging.\n- `@exceptionDetails AS VARCHAR(MAX) OUTPUT`: Outputs any exception messages encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for parameters and initializes logging variables.\n2. **Input Handling**: Uses `NULLIF` and `ISNULL` to handle default values and ensure parameters are set correctly.\n3. **Temporary Table Creation**: Creates a temporary table `@tmpFiscalYears` to store distinct fiscal years associated with the specified billing group.\n4. **Data Retrieval**: \n   - Inserts distinct fiscal years from `Billing.vwBillingGroupContracts` into the temporary table.\n   - Joins `@tmpFiscalYears` with `Billing.vwFiscalYears` to retrieve detailed fiscal year information.\n   - Applies filters based on `@fiscalYear` and `@activeOnly`.\n5. **Error Handling**: Uses `TRY...CATCH` to handle exceptions, setting appropriate logging variables if an error occurs.\n6. **Logging**: Calls `dbo.USP_AppLogCreate` to log execution details, including any exceptions and the elapsed time.\n\n#### 5. Performance Considerations\n- **Temporary Table Usage**: The use of a temporary table can impact performance, especially if the dataset is large. However, it helps in managing intermediate results efficiently.\n- **Indexing**: Ensure that the views `Billing.vwBillingGroupContracts` and `Billing.vwFiscalYears` are indexed appropriately to optimize query performance.\n- **Parameter Sniffing**: The use of optional parameters can lead to parameter sniffing issues, potentially affecting execution plan efficiency.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: The procedure captures error messages but does not rethrow them or handle them beyond logging, which might be insufficient for critical failures.\n- **Concurrency**: If multiple instances of this procedure run simultaneously, there could be contention on resources, especially if the underlying views are not optimized.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized access to sensitive data.\n- **Logging Overhead**: Extensive logging, especially with large `@messageDetails`, can introduce overhead and impact performance if not managed properly.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1743,
      "api_response_id": "chatcmpl-C8asiz1Y0bx3rNnqg19a3tWdmOJ7Q"
    },
    "analysis_timestamp": "2025-08-25 19:27:24"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceAccountBillingAdd",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceAccountBillingAdd]\r\n(\r\n\t@invoiceGroupId AS INT\r\n\t,@accountIds AS VARCHAR(4000)\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'CREATE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Added invoice billing account(s)', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime INT, @sendEmail AS BIT = 0, @tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\t\r\n\tSELECT @invoiceGroupId = NULLIF(@invoiceGroupId, 0), @accountIds = NULLIF(@accountIds, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceGroupId AS INVID, @accountIds AS FY FOR XML PATH('INPUTS')));\r\n\r\n\tDECLARE @invoiceId AS INT, @groupId AS INT, @contractId AS INT, @fiscalYear AS VARCHAR(4), @invoiceIsSplitFY AS BIT, @priorFY AS INT, @currentFY AS INT;\r\n\r\n\tSELECT @invoiceId = InvoiceID\r\n\t\t,@groupId = GroupID\r\n\t\t,@contractId = ContractID\r\n\t\t,@fiscalYear = FiscalYear\r\n\tFROM Invoice.vwInvoiceGroupContracts\r\n\tWHERE InvoiceGroupContractID = @invoiceGroupId;\r\n\r\n\tSELECT @invoiceIsSplitFY = Billing.UDF_IsSplitFYInvoice(InvoiceID), @currentFY = Billing.UDF_GetFiscalYear(CreatedDate)\r\n\tFROM Invoice.Invoice\r\n\tWHERE InvoiceID = @invoiceId;\r\n\r\n\tSET @priorFY = @currentFY-1;\r\n\r\n\tDECLARE @updatedBudgetCodeTable TABLE (BudgetCode VARCHAR(4));\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @billingTable TABLE(InvoiceBillingID INT);\r\n\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Add invoice account billings\r\n\t\tIF @invoiceIsSplitFY = 0\r\n\t\t\tINSERT INTO Invoice.InvoiceAccountBilling(InvoiceGroupContractID, InvoiceID, GroupID, ContractID, BillingID\r\n\t\t\t\t,AccountID, AccountNumber, FormattedAccountNumber, BillingPeriod, BillingPeriodDays, FromDate, ToDate\r\n\t\t\t\t,SplitFY, BillingPeriodDaysPriorFY, BillingPeriodDaysCurrentFY\r\n\t\t\t\t,IsManualEntry, IsEstimated, DateBilled, DateDue\r\n\t\t\t\t,EnergyUnit\r\n\t\t\t\t,EnergyUsage, EnergyUsagePriorFY, EnergyUsageCurrentFY\r\n\t\t\t\t,DemandUsage, DemandUsagePriorFY, DemandUsageCurrentFY\r\n\t\t\t\t,AmountBilled, AmountPaid, AmountPaidPriorFY, AmountPaidCurrentFY\r\n\t\t\t\t,CreatedBy)\r\n\t\t\tOUTPUT INSERTED.InvoiceBillingID INTO @billingTable\r\n\t\t\tSELECT @invoiceGroupId, @invoiceId, @groupId, @contractId, T.ID\r\n\t\t\t\t,B.AccountID, B.AccountNumber, B.FormattedAccountNumber, B.BillingPeriod, B.BillingPeriodDays, B.FromDate, B.ToDate\r\n\t\t\t\t,[Billing].[UDF_IsSplitFYBilling](@invoiceId, B.FromDate, B.ToDate) --switched by Xin on 09/04/2019\r\n\t\t\t\t,0, Billing.UDF_GetBillingPeriodDaysInCurrentFY(@invoiceId, B.FromDate, B.ToDate, B.BillingPeriodDays)\r\n\t\t\t\t,B.IsManualEntry, B.IsEstimated, B.DateBilled, B.DateDue\r\n\t\t\t\t,B.EnergyUnit\r\n\t\t\t\t,B.AccountEnergyUsage, 0, B.AccountEnergyUsage\r\n\t\t\t\t,B.AccountDemandUsage, 0, B.AccountDemandUsage\r\n\t\t\t\t,CONVERT(DECIMAL(18, 2), B.AmountBilled), CONVERT(DECIMAL(18, 2), B.AmountPaid), 0, CONVERT(DECIMAL(18, 2), B.AmountPaid)\r\n\t\t\t\t,@userId\r\n\t\t\tFROM [dbo].[UDF_SplitToTable](@accountIds, ',') T\r\n\t\t\t\tINNER JOIN [Billing].[vwAccountBillings] B ON B.BillingID = T.ID\r\n\t\t\tWHERE B.GroupID = @groupId;\r\n\t    ELSE\r\n\t\t\tINSERT INTO [Invoice].[InvoiceAccountBilling] (InvoiceGroupContractID, InvoiceID, GroupID, ContractID, BillingID\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, AccountID, AccountNumber, FormattedAccountNumber, BillingPeriod, BillingPeriodDays, FromDate, ToDate\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, SplitFY, BillingPeriodDaysPriorFY, BillingPeriodDaysCurrentFY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, IsManualEntry, IsEstimated, DateBilled, DateDue\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, EnergyUnit\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, EnergyUsage, EnergyUsagePriorFY, EnergyUsageCurrentFY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, DemandUsage, DemandUsagePriorFY, DemandUsageCurrentFY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, AmountBilled, AmountPaid, AmountPaidPriorFY, AmountPaidCurrentFY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, CreatedBy)\r\n\t\t\t\tOUTPUT INSERTED.InvoiceBillingID INTO @billingTable\r\n\t\t\t\t\tSELECT IG.InvoiceGroupContractID, @invoiceId, @groupId, IG.ContractID, T.ID\r\n\t\t\t\t\t\t, B.AccountID, B.AccountNumber, B.FormattedAccountNumber, B.BillingPeriod, B.BillingPeriodDays, B.FromDate, B.ToDate\r\n\t\t\t\t\t\t, [Billing].[UDF_IsSplitFYBilling](@invoiceId, B.FromDate, B.ToDate) --switched by Xin on 09/04/2019\r\n\t\t\t\t\t\t, 0, Billing.UDF_GetBillingPeriodDaysInCurrentFY(@invoiceId, B.FromDate, B.ToDate, B.BillingPeriodDays)\r\n\t\t\t\t\t\t, B.IsManualEntry, B.IsEstimated, B.DateBilled, B.DateDue\r\n\t\t\t\t\t\t, B.EnergyUnit\r\n\t\t\t\t\t\t, B.AccountEnergyUsage, 0, B.AccountEnergyUsage\r\n\t\t\t\t\t\t, B.AccountDemandUsage, 0, B.AccountDemandUsage\r\n\t\t\t\t\t\t, CONVERT(DECIMAL(18, 2), B.AmountBilled), CONVERT(DECIMAL(18, 2), B.AmountPaid), 0, CONVERT(DECIMAL(18, 2), B.AmountPaid)\r\n\t\t\t\t\t\t, @userId\r\n\t\t\t\t\tFROM [dbo].[UDF_SplitToTable](@accountIds, ',') T\r\n\t\t\t\t\tJOIN [Billing].[vwAccountBillings] B ON B.BillingID = T.ID\r\n\t\t\t\t\tJOIN Invoice.vwInvoiceGroupContracts IG ON B.GroupID=IG.GroupID AND \r\n\t\t\t\t\t(\t(Billing.UDF_GetBillingPeriodDaysInCurrentFY(@invoiceId, B.FromDate, B.ToDate, B.BillingPeriodDays)=0 AND IG.FiscalYear=@priorFY) \r\n\t\t\t\t\t\tOR \r\n\t\t\t\t\t\t(Billing.UDF_GetBillingPeriodDaysInCurrentFY(@invoiceId, B.FromDate, B.ToDate, B.BillingPeriodDays)>0 AND IG.FiscalYear=@currentFY)\r\n\t\t\t\t\t)\r\n\t\t\t\t\tWHERE IG.invoiceID=@invoiceId AND B.GroupID = @groupId; --07/26/2019 added by Xin for ConEd Steam change\r\n\t\t\t\t\t        \r\n\r\n\t\t-- Update number of billing days in prior FY if there is a difference in FY between from and to dates\r\n\t\tUPDATE BILL\r\n\t\tSET BILL.BillingPeriodDaysPriorFY\t\t= BILL.BillingPeriodDays - BILL.BillingPeriodDaysCurrentFY\r\n\t\tFROM [Invoice].[InvoiceAccountBilling] BILL\r\n\t\tJOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID;\r\n\r\n\t\t-- Update current FY data if there is a difference in FY between from and to dates\r\n\t\tUPDATE BILL\r\n\t\tSET BILL.AmountPaidCurrentFY\t\t\t= (BILL.BillingPeriodDaysCurrentFY * BILL.AmountPaid) / BILL.BillingPeriodDays\r\n\t\t\t, BILL.EnergyUsageCurrentFY\t\t\t= (BILL.BillingPeriodDaysCurrentFY * BILL.EnergyUsage) / BILL.BillingPeriodDays\r\n\t\t\t, BILL.DemandUsageCurrentFY\t\t\t= (BILL.BillingPeriodDaysCurrentFY * BILL.DemandUsage) / BILL.BillingPeriodDays\r\n\t\tFROM [Invoice].[InvoiceAccountBilling] BILL\r\n\t\tJOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID;\r\n\r\n\t\t-- Update prior FY data if there is a difference in FY between from and to dates\r\n\t\tUPDATE BILL\r\n\t\tSET BILL.AmountPaidPriorFY\t\t= BILL.AmountPaid - BILL.AmountPaidCurrentFY\r\n\t\t\t, BILL.EnergyUsagePriorFY\t= BILL.EnergyUsage - BILL.EnergyUsageCurrentFY\r\n\t\t\t, BILL.DemandUsagePriorFY\t= BILL.DemandUsage - BILL.DemandUsageCurrentFY\r\n\t\tFROM [Invoice].[InvoiceAccountBilling] BILL\r\n\t\tJOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID;\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tVALUES ('INVOICE', @invoiceId, 'ADD ACCOUNTS', 'Billing account(s) added', @userId);\r\n\r\n\t\t-- Update Payment Allocations if there is any. Added on 4/16/2018\t\t\r\n\t\tINSERT INTO @updatedBudgetCodeTable (BudgetCode)\r\n\t\tSELECT DISTINCT d.BudgetCode\r\n\t\tFROM    Invoice.InvoiceAccountBilling a\r\n\t\t\t\tLEFT JOIN Billing.EC3_Billing_Account AS b ON a.AccountID = b.AccountSeqid\r\n\t\t\t\tLEFT JOIN Billing.EC3_Billing_AgencyFundingAssignments AS c ON b.AgencyAccount = c.AgencyDivisionSeqid\r\n\t\t\t\tLEFT JOIN Billing.EC3_Billing_AgencyFunding AS d ON c.AgencyFundingSeqid = d.AgencyFundingSeqid\r\n\t\tWHERE a.InvoiceBillingID IN (SELECT InvoiceBillingID FROM @billingTable);\r\n\r\n\t\tIF @invoiceIsSplitFY = 0\r\n\t\tBEGIN\r\n\t\t\tDELETE FROM [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\tWHERE InvoiceContractLineID IN (\r\n\t\t\t\tSELECT InvoiceContractLineID \r\n\t\t\t\tFROM invoice.InvoiceContractLine \r\n\t\t\t\tWHERE InvoiceID=@invoiceId AND FiscalYear = @fiscalYear AND ContractID=@contractId AND BudgetCode IN \r\n\t\t\t\t(\r\n\t\t\t\t\tSELECT BudgetCode FROM @updatedBudgetCodeTable\r\n\t\t\t\t\tINTERSECT\r\n\t\t\t\t\tSELECT BudgetCode FROM invoice.InvoiceContractLine WHERE InvoiceID = @invoiceId AND FiscalYear = @fiscalYear AND ContractID = @contractId\r\n\t\t\t\t)\r\n\t\t\t);\r\n\r\n\t\t\tDELETE FROM invoice.InvoiceContractLine \r\n\t\t\tWHERE InvoiceID=@invoiceId AND FiscalYear = @fiscalYear AND ContractID=@contractId AND BudgetCode IN \r\n\t\t\t(\r\n\t\t\t\tSELECT BudgetCode FROM @updatedBudgetCodeTable\r\n\t\t\t\tINTERSECT\r\n\t\t\t\tSELECT BudgetCode FROM invoice.InvoiceContractLine WHERE InvoiceID = @invoiceId AND FiscalYear = @fiscalYear AND ContractID = @contractId\r\n\t\t\t);\r\n\t\tEND;\r\n\t\tELSE\t\t\t\t\r\n\t\tBEGIN\r\n\t\t\tDELETE FROM [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\tWHERE InvoiceContractLineID IN (\r\n\t\t\t\tSELECT InvoiceContractLineID \r\n\t\t\t\tFROM invoice.InvoiceContractLine \r\n\t\t\t\tWHERE InvoiceID=@invoiceId \r\n\t\t\t\t\tAND FiscalYear IN (@priorFY, @currentFY)\r\n\t\t\t\t\tAND ContractID=@contractId \r\n\t\t\t\t\tAND BudgetCode IN (SELECT BudgetCode FROM @updatedBudgetCodeTable)\r\n\t\t\t);\r\n\r\n\t\t\tDELETE FROM invoice.InvoiceContractLine \r\n\t\t\tWHERE InvoiceID=@invoiceId \r\n\t\t\t\tAND FiscalYear IN (@priorFY, @currentFY)\r\n\t\t\t\tAND ContractID=@contractId \r\n\t\t\t\tAND BudgetCode IN (SELECT BudgetCode FROM @updatedBudgetCodeTable);\r\n\t\tEND;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF XACT_STATE() <> 0 ROLLBACK TRAN @tranName;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to add invoice billing account(s)';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.590000",
      "last_altered": "2025-08-25 16:04:01.590000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceGroupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@accountIds",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4000,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceAccountBillingAdd",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceAccountBillingAdd` is designed to add billing accounts to an invoice group within a SQL Server database. It handles both single fiscal year and split fiscal year scenarios, updating relevant tables and creating audit logs. The procedure also manages transaction control to ensure data integrity and logs any errors encountered during execution.\n\n#### 2. Complexity Level: High\nThe procedure is complex due to its extensive use of conditional logic, multiple table operations, transaction management, and error handling. It also involves dynamic data manipulation and updates across several related tables, which increases its complexity.\n\n#### 3. Input Parameters\n- `@invoiceGroupId AS INT`: Identifies the invoice group to which billing accounts will be added.\n- `@accountIds AS VARCHAR(4000)`: A comma-separated list of account IDs to be processed.\n- `@correlationId AS VARCHAR(128) = NULL`: An optional identifier for correlating logs and operations.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, used for logging.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, used for logging.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure, used for logging.\n- `@username AS VARCHAR(25) = NULL`: The username of the person executing the procedure, used for logging.\n- `@userId AS INT = NULL`: The ID of the user executing the procedure, used for audit and creation records.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception details encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets up initial variables, including action type, severity, and message details. It also initializes transaction control variables.\n2. **Parameter Validation and Defaults**: Validates and sets default values for input parameters, ensuring they are not null or invalid.\n3. **Data Retrieval**: Fetches invoice and contract details from `vwInvoiceGroupContracts` and `Invoice` tables.\n4. **Fiscal Year Handling**: Determines if the invoice spans multiple fiscal years and calculates the current and prior fiscal years.\n5. **Transaction Management**: Begins a transaction to ensure atomicity of operations.\n6. **Conditional Insertions**: Depending on whether the invoice is split across fiscal years, inserts records into `InvoiceAccountBilling` with appropriate fiscal year calculations.\n7. **Updates**: Adjusts billing days and financial figures for split fiscal year scenarios.\n8. **Audit Logging**: Inserts a note into the `Common.Note` table to record the addition of billing accounts.\n9. **Budget Code Updates**: Updates budget codes and deletes related contract line allocations and records if necessary.\n10. **Transaction Commit/Rollback**: Commits the transaction if successful or rolls back in case of an error.\n11. **Error Handling**: Catches exceptions, logs error details, and sets flags for error severity and email notifications.\n12. **Logging**: Calls a logging procedure to record the operation's outcome, including any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Scope**: The procedure uses explicit transactions, which can lock resources and impact performance if not managed carefully.\n- **Table Operations**: Multiple joins and subqueries, especially with large datasets, can lead to performance bottlenecks.\n- **Function Calls**: User-defined functions like `UDF_IsSplitFYInvoice` and `UDF_GetFiscalYear` are used, which can add overhead if not optimized.\n- **String Operations**: The use of `UDF_SplitToTable` to parse account IDs can be resource-intensive if the input string is large.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: The use of transactions and potential locking of tables can lead to concurrency issues if multiple instances of the procedure run simultaneously.\n- **Error Handling**: While exceptions are caught, the procedure relies on a single output parameter for error details, which may not capture all relevant information.\n- **Scalability**: The procedure's complexity and reliance on multiple table operations may not scale well with increasing data volumes.\n- **Data Integrity**: If the procedure fails after partial execution, it relies on transaction rollback to maintain data integrity, which assumes all operations are correctly encapsulated within the transaction.\n- **Security**: The procedure assumes that input parameters are sanitized and does not explicitly handle SQL injection risks, especially with dynamic SQL or user-defined functions.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3999,
      "api_response_id": "chatcmpl-C8asvDb0xpJVkGe4I5CJJwtL3UytC"
    },
    "analysis_timestamp": "2025-08-25 19:27:50"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceAccountBillingDelete",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceAccountBillingDelete]\r\n(\r\n\t@invoiceGroupId AS INT = NULL\r\n\t,@invoiceBillingId AS INT = NULL\r\n\t,@comments AS VARCHAR(500) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'DELETE', @severity AS VARCHAR(25) = 'INFO', @elapsedTime AS INT\r\n\t\t,@message AS VARCHAR(255) = 'Deleted invoice account(s) and billing(s)', @sendEmail AS BIT = 0\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE();\r\n\t\r\n\tSELECT @invoiceGroupId = NULLIF(@invoiceGroupId, 0), @invoiceBillingId = NULLIF(@invoiceBillingId, 0), @userId = ISNULL(@userId, 0)\r\n\t\t,@comments = ISNULL(NULLIF(@comments, ''), 'Deleted invoice account and billing');\r\n\r\n\tSELECT @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA')\r\n\t\t,@messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceBillingId AS BILLID, @comments AS CMT FOR XML PATH('INPUTS')));\r\n\r\n\tIF (ISNULL(@invoiceGroupId, 0) = 0 AND ISNULL(@invoiceBillingId, 0) = 0)\r\n\tBEGIN\r\n\t\tRAISERROR (N'Please specify either the account or the group', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @invoiceId AS INT, @contractID AS INT, @accountID AS INT, @fiscalYear AS VARCHAR(4), @invoiceIsSplitFY AS BIT\r\n\t\t,@currentFY AS INT, @accountNumber AS VARCHAR(15), @groupId AS INT, @tranName VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tSELECT @invoiceId = InvoiceID\r\n\t\t,@contractID = ContractID\r\n\t\t,@accountID = AccountID\r\n\t\t,@fiscalYear = FiscalYear\r\n\t\t,@accountNumber = ISNULL(AccountNumber, '')\r\n\t\t,@groupId = GroupID\r\n\tFROM Invoice.vwInvoiceAccountBillings\r\n\tWHERE InvoiceBillingID = ISNULL(@invoiceBillingId, InvoiceBillingID)\r\n\t\tAND InvoiceGroupContractID = ISNULL(@invoiceGroupId, InvoiceGroupContractID);\r\n\r\n\tSELECT @invoiceIsSplitFY = Billing.UDF_IsSplitFYInvoice(InvoiceID)\r\n\t\t,@currentFY = Billing.UDF_GetFiscalYear(CreatedDate) \r\n\tFROM Invoice.Invoice\r\n\tWHERE InvoiceID=@invoiceId;\r\n\r\n\tDECLARE @updatedBudgetCodeTable TABLE (BudgetCode VARCHAR(4));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Delete account and billing\r\n\t\tDELETE FROM Invoice.InvoiceAccountBilling\r\n\t\tWHERE InvoiceBillingID = ISNULL(@invoiceBillingId, InvoiceBillingID)\r\n\t\t\tAND InvoiceGroupContractID = ISNULL(@invoiceGroupId, InvoiceGroupContractID);\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO Common.Note(ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tVALUES ('INVOICE', @invoiceId, 'DELETE ACCOUNT', @accountNumber + ' deleted: ' + @comments, @userId);\r\n\r\n\t\t-- Update Payment Allocations if there is any. Added on 4/16/2018\r\n\t\tINSERT INTO @updatedBudgetCodeTable(BudgetCode)\r\n\t\tSELECT DISTINCT d.BudgetCode\r\n\t\tFROM Billing.EC3_Billing_Account AS b\r\n\t\t\tLEFT JOIN Billing.EC3_Billing_AgencyFundingAssignments AS c ON b.AgencyAccount = c.AgencyDivisionSeqid\r\n\t\t\tLEFT JOIN Billing.EC3_Billing_AgencyFunding AS d ON c.AgencyFundingSeqid = d.AgencyFundingSeqid\r\n\t\tWHERE b.AccountSeqid = @accountID;\r\n\r\n\t\tIF @invoiceIsSplitFY = 0\r\n\t\tBEGIN\r\n\t\t\tDELETE FROM [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\tWHERE InvoiceContractLineID IN (\r\n\t\t\t\tSELECT InvoiceContractLineID \r\n\t\t\t\tFROM invoice.InvoiceContractLine \r\n\t\t\t\tWHERE InvoiceID=@invoiceId AND FiscalYear = @fiscalYear AND ContractID=@contractID \r\n\t\t\t\t\tAND BudgetCode IN (SELECT BudgetCode FROM @updatedBudgetCodeTable)\r\n\t\t\t);\r\n\r\n\t\t\tDELETE FROM invoice.InvoiceContractLine \r\n\t\t\tWHERE InvoiceID=@invoiceId AND FiscalYear = @fiscalYear AND ContractID=@contractID \r\n\t\t\t\tAND BudgetCode IN (SELECT BudgetCode FROM @updatedBudgetCodeTable);\r\n\t\tEND;\r\n\t\tELSE\t\r\n\t\tBEGIN\r\n\t\t\tDELETE FROM [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\tWHERE InvoiceContractLineID IN (\r\n\t\t\t\tSELECT InvoiceContractLineID \r\n\t\t\t\tFROM invoice.InvoiceContractLine \r\n\t\t\t\tWHERE InvoiceID=@invoiceId AND FiscalYear IN (@currentFY-1, @currentFY)\r\n\t\t\t\tAND ContractID IN (SELECT ContractID FROM Invoice.vwInvoiceGroupContracts WHERE invoiceid=@invoiceId AND groupid=@groupId) --=@contractID \r\n\t\t\t\tAND BudgetCode IN (SELECT BudgetCode FROM @updatedBudgetCodeTable)\r\n\t\t\t);\r\n\r\n\t\t\tDELETE FROM invoice.InvoiceContractLine \r\n\t\t\tWHERE InvoiceID=@invoiceId AND FiscalYear IN (@currentFY-1, @currentFY)\r\n\t\t\tAND ContractID IN (SELECT ContractID FROM Invoice.vwInvoiceGroupContracts WHERE invoiceid=@invoiceId AND groupid=@groupId) --=@contractID \r\n\t\t\tAND BudgetCode IN (SELECT BudgetCode FROM @updatedBudgetCodeTable);\r\n\t\tEND;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF XACT_STATE() <> 0 ROLLBACK TRAN @tranName;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to delete invoice account(s) and billing(s)';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.600000",
      "last_altered": "2025-08-25 16:04:01.600000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceGroupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceBillingId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@comments",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 500,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceAccountBillingDelete",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceAccountBillingDelete` is designed to delete invoice account and billing records from a SQL Server database. It performs several operations, including deleting records from the `InvoiceAccountBilling` table, creating audit notes, updating payment allocations, and handling fiscal year-specific deletions. The procedure also logs the operation details and handles exceptions by rolling back transactions and logging errors.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including conditional logic, transaction management, and exception handling. It interacts with several tables and uses user-defined functions, which adds to its complexity. However, it is well-structured with clear separation of concerns, making it manageable for experienced developers.\n\n#### 3. Input Parameters\n- `@invoiceGroupId AS INT = NULL`: Identifies the invoice group to be deleted.\n- `@invoiceBillingId AS INT = NULL`: Identifies the specific invoice billing record to be deleted.\n- `@comments AS VARCHAR(500) = NULL`: Optional comments about the deletion.\n- `@correlationId AS VARCHAR(128) = NULL`: Correlation ID for logging purposes.\n- `@machineName AS VARCHAR(128) = NULL`: Name of the machine executing the procedure.\n- `@processName AS VARCHAR(128) = NULL`: Name of the process executing the procedure.\n- `@domain AS VARCHAR(25) = NULL`: Domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: Username of the person executing the procedure.\n- `@userId AS INT = NULL`: User ID of the person executing the procedure.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter to capture exception details if any occur.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for various parameters and initializes logging variables.\n2. **Validation**: Checks if at least one of `@invoiceGroupId` or `@invoiceBillingId` is provided. Raises an error if both are null.\n3. **Data Retrieval**: Retrieves invoice details from `vwInvoiceAccountBillings` and fiscal year information using user-defined functions.\n4. **Transaction Management**: Begins a transaction to ensure atomicity of the delete operations.\n5. **Deletion Operations**:\n   - Deletes records from `InvoiceAccountBilling`.\n   - Inserts an audit note into the `Common.Note` table.\n   - Updates payment allocations by inserting into a temporary table.\n   - Deletes related records from `InvoiceContractLineAllocation` and `InvoiceContractLine` based on fiscal year conditions.\n6. **Exception Handling**: Catches exceptions, rolls back the transaction if necessary, and logs the error details.\n7. **Logging**: Logs the operation details using `USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Index Usage**: Ensure that the `InvoiceBillingID` and `InvoiceGroupContractID` columns are indexed to optimize the DELETE operations.\n- **Transaction Scope**: The transaction scope is well-defined, but long-running transactions could lead to locking issues. Consider breaking down operations if performance issues arise.\n- **Function Calls**: The use of user-defined functions (`UDF_IsSplitFYInvoice`, `UDF_GetFiscalYear`) could impact performance if they are complex or not optimized.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: While exceptions are caught and logged, the procedure does not re-raise the error, which might be necessary for some applications to handle errors appropriately.\n- **Concurrency**: The procedure could face concurrency issues if multiple instances attempt to delete the same records simultaneously. Implementing row-level locking or using isolation levels could mitigate this.\n- **Data Integrity**: Ensure that foreign key constraints and cascading deletes are appropriately managed to maintain data integrity.\n- **Logging Overhead**: Extensive logging, especially with large `@messageDetails`, could introduce overhead. Consider optimizing the logging mechanism if performance is impacted.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2558,
      "api_response_id": "chatcmpl-C8atLNmLsXUAAn6FjrnzqqqiJCt8l"
    },
    "analysis_timestamp": "2025-08-25 19:28:09"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceAccountBillingRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceAccountBillingRetrieve]\r\n\t@invoiceId\t\t\t\tINT = NULL\r\n\t,@groupId\t\t\t\tINT = NULL\r\n\t,@invoiceGroupId\t\tINT = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @invoiceId = NULLIF(@invoiceId, 0);\r\n\tSET @groupId = NULLIF(@groupId, 0);\r\n\tSET @invoiceGroupId = NULLIF(@invoiceGroupId, 0);\r\n\r\n\tIF ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@groupId, 0) <= 0 AND ISNULL(@invoiceGroupId, 0) <= 0\r\n\t\tRAISERROR (N'The invoiceId or the groupId or invoiceGroupId must be specified', 16, 1);\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'RETRIEVE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Invoice - Retrieved invoice accounts / billings';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT ISNULL(@invoiceId, 0) AS INVID, ISNULL(@groupId, 0) AS GRPID, ISNULL(@invoiceGroupId, 0) AS INVGRPID\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT IAB.InvoiceBillingID, IAB.InvoiceGroupContractID, IAB.InvoiceID, IAB.InvoiceNumber\r\n\t\t\t, IAB.GroupID, IAB.GroupName, IAB.ContractID, IAB.ContractNumber, IAB.FiscalYear\r\n\t\t\t, IAB.AccountID, IAB.AccountNumber, IAB.FormattedAccountNumber\r\n\t\t\t, IAB.BillingID, IAB.BillingPeriod, IAB.BillingPeriodDays, IAB.BillingPeriodDaysPriorFY, IAB.BillingPeriodDaysCurrentFY\r\n\t\t\t, IAB.IsEstimated, IAB.IsManualEntry\r\n\t\t\t, IAB.AmountBilled, IAB.AmountPaid, IAB.AmountPaidPriorFY, IAB.AmountPaidCurrentFY\r\n\t\t\t, IAB.EnergyUsage, IAB.EnergyUsagePriorFY, IAB.EnergyUsageCurrentFY\r\n\t\t\t, IAB.DemandUsage, IAB.DemandUsagePriorFY, IAB.DemandUsageCurrentFY\r\n\t\t\t, IAB.DateBilled, IAB.DateDue, IAB.FromDate, IAB.ToDate, IAB.SplitFY\r\n\t\t\t, IAB.CreatedDate, IAB.CreatedBy, IAB.ModifiedDate, IAB.ModifiedBy, IAB.Active\r\n\t\tFROM [Invoice].[vwInvoiceAccountBillings] IAB\r\n\t\tWHERE IAB.InvoiceID = ISNULL(@invoiceId, IAB.InvoiceID)\r\n\t\t\tAND IAB.GroupID\t= ISNULL(@groupId, IAB.GroupID)\r\n\t\t\tAND IAB.InvoiceGroupContractID = ISNULL(@invoiceGroupId, IAB.InvoiceGroupContractID)\r\n\t\tORDER BY IAB.GroupName ASC, IAB.ContractNumber ASC, IAB.FiscalYear DESC, IAB.AccountNumber ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Invoice - Failed to retrieve invoice accounts / billings';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.607000",
      "last_altered": "2025-08-25 16:04:01.607000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceGroupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceAccountBillingRetrieve",
      "explanation": "#### 1. Overview\n\nThe stored procedure `USP_InvoiceAccountBillingRetrieve` is designed to retrieve invoice account billing information from a view named `vwInvoiceAccountBillings` within the `Invoice` schema. It allows filtering based on `invoiceId`, `groupId`, and `invoiceGroupId`. The procedure logs its execution details, including any exceptions, using another stored procedure `USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\n\nThe procedure involves multiple input parameters, conditional logic for parameter handling, error handling with a TRY-CATCH block, and logging of execution details. The complexity arises from the combination of these elements, although the core functionality of data retrieval is straightforward.\n\n#### 3. Input Parameters\n\n- `@invoiceId INT = NULL`: Optional; filters results by a specific invoice ID.\n- `@groupId INT = NULL`: Optional; filters results by a specific group ID.\n- `@invoiceGroupId INT = NULL`: Optional; filters results by a specific invoice group contract ID.\n- `@correlationId VARCHAR(128) = NULL`: Optional; used for logging to correlate logs with a specific execution.\n- `@machineName VARCHAR(128) = NULL`: Optional; used for logging the machine name where the procedure is executed.\n- `@processName VARCHAR(128) = NULL`: Optional; used for logging the process name.\n- `@domain VARCHAR(25) = NULL`: Optional; used for logging the domain of the user.\n- `@username VARCHAR(25) = NULL`: Optional; used for logging the username.\n- `@userId INT = NULL`: Optional; used for logging the user ID.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: Output; captures exception details if an error occurs during execution.\n\n#### 4. Business Logic and Workflow\n\n1. **Parameter Initialization**: \n   - Converts `0` values for `@invoiceId`, `@groupId`, and `@invoiceGroupId` to `NULL` to facilitate optional filtering.\n   \n2. **Validation**:\n   - Checks if at least one of `@invoiceId`, `@groupId`, or `@invoiceGroupId` is provided. Raises an error if none are specified.\n\n3. **Logging Setup**:\n   - Initializes logging-related variables, including generating a `correlationId` if not provided, and setting default values for machine and process names.\n\n4. **Data Retrieval**:\n   - Executes a SELECT query on `vwInvoiceAccountBillings` with filters applied based on the provided parameters. Orders the results by `GroupName`, `ContractNumber`, `FiscalYear`, and `AccountNumber`.\n\n5. **Error Handling**:\n   - Uses a TRY-CATCH block to handle exceptions. If an error occurs, it captures the error message and sets the severity to 'ERROR'.\n\n6. **Logging Execution**:\n   - Calculates the elapsed time for the procedure execution.\n   - Calls `USP_AppLogCreate` to log the execution details, including any exceptions.\n\n#### 5. Performance Considerations\n\n- **Indexing**: Ensure that `vwInvoiceAccountBillings` is backed by a well-indexed table or view to optimize the filtering and ordering operations.\n- **Parameter Sniffing**: The use of `ISNULL` and `COALESCE` can mitigate parameter sniffing issues by ensuring default values are handled correctly.\n- **Logging Overhead**: Frequent logging, especially with detailed messages, can introduce overhead. Consider the impact on performance if the procedure is executed frequently.\n\n#### 6. Potential Issues or Risks\n\n- **Error Handling**: The procedure captures only the error message in the CATCH block. Additional error details like error number and severity could provide more context.\n- **Logging Dependency**: The procedure relies on `USP_AppLogCreate` for logging. If this procedure fails or is unavailable, logging will not occur.\n- **Parameter Validation**: The procedure raises an error if no valid filtering parameter is provided. This is a necessary validation but could lead to frequent errors if not handled correctly by calling applications.\n- **Concurrency**: If executed concurrently by multiple users, ensure that the logging mechanism can handle concurrent writes without performance degradation.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2172,
      "api_response_id": "chatcmpl-C8atfYZ32H24sxl6Wf7AzgFMhadfE"
    },
    "analysis_timestamp": "2025-08-25 19:28:24"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceContractLineAdd",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceContractLineAdd]\r\n\t@invoiceId\t\t\t\tINT\r\n\t,@contractLineId\t\tINT\r\n\t,@amount\t\t\t\tDECIMAL(18, 2)\r\n\t,@allocations\t\t\t[Invoice].[UDT_InvoiceContractLineAllocation] READONLY\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @invoiceId\t\t\t= NULLIF(@invoiceId, 0);\r\n\tSET @contractLineId\t\t= NULLIF(@contractLineId, 0);\r\n\tSET @amount\t\t\t\t= NULLIF(@amount, 0);\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\t\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'CREATE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Added invoice contract line';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @contractLineId AS CLINEID, @amount AS AMT FOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tDECLARE @tranName VARCHAR(128);\r\n\tSET @tranName = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tDECLARE @noteFiller VARCHAR(500);\r\n\tSELECT @noteFiller = (CL.ContractNumber + ',' + CONVERT(VARCHAR(10), CL.CommodityLine) + ',' + CONVERT(VARCHAR(10), CL.AccountingLine))\r\n\tFROM [Billing].[vwContractLines] CL\r\n\tWHERE CL.ContractLineID = @contractLineId;\r\n\tSET @noteFiller = ISNULL(@noteFiller, CONVERT(VARCHAR(10), @contractLineId) + ',NA,NA');\r\n\r\n\tDECLARE @invoiceIsSplitFY BIT;\r\n\tSELECT\t@invoiceIsSplitFY = [Billing].[UDF_IsSplitFYInvoice](@invoiceId);\r\n\r\n\tDECLARE @invoiceContractLineTable TABLE (InvoiceContractLineID INT, FiscalYear VARCHAR(4), Amount DECIMAL(18, 2));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\tIF EXISTS (SELECT 1 FROM Invoice.InvoiceContractLine WHERE InvoiceID = @invoiceId AND ContractLineID = @contractLineId)\r\n\t\tBEGIN\r\n\t\t\t-- Update contract line(s)\r\n\t\t\tUPDATE [Invoice].[InvoiceContractLine]\r\n\t\t\tSET\tAmountPaid = AmountPaid + @amount, ModifiedBy = @userId, ModifiedDate = GETDATE()\r\n\t\t\tOUTPUT INSERTED.InvoiceContractLineID, INSERTED.FiscalYear, INSERTED.AmountPaid INTO @invoiceContractLineTable\r\n\t\t\tWHERE InvoiceID = @invoiceId AND ContractLineID = @contractLineId;\r\n\t\t\t\r\n\r\n\t\t\t-- Update default contract line allocation(s)\r\n\t\t\tIF @invoiceIsSplitFY =1\r\n\t\t\t\tUPDATE [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\t\tSET\tAllocationAmount = AllocationAmount + b.Amount, ModifiedBy = @userId, ModifiedDate = GETDATE()\r\n\t\t\t\tFROM [Invoice].[InvoiceContractLineAllocation] a JOIN @allocations b ON a.AllocationFiscalYear=b.FiscalYear\r\n\t\t\t\tWHERE a.InvoiceContractLineID = (SELECT InvoiceContractLineID FROM @invoiceContractLineTable);\r\n\r\n\t\t\tELSE\r\n\t\t\t\tUPDATE [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\t\tSET\tAllocationAmount = AllocationAmount + @amount, ModifiedBy = @userId, ModifiedDate = GETDATE()\r\n\t\t\t\tWHERE InvoiceContractLineID = (SELECT InvoiceContractLineID FROM @invoiceContractLineTable) \r\n\t\t\t\tAND AllocationFiscalYear = (SELECT FiscalYear FROM @invoiceContractLineTable);\r\n\t\t\t\r\n\t\t\t-- Create audit note\r\n\t\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\t\t\tVALUES ('INVOICE', @invoiceId, 'UPDATE CONTRACT LINE', 'Via Inserting New Payment, Contract line (' + @noteFiller + ') updated', @userId);\r\n\t\tEND;\r\n        ELSE\r\n        BEGIN\r\n\t\t\t-- Add contract line(s)\r\n\t\t\tINSERT INTO [Invoice].[InvoiceContractLine] (InvoiceID, ContractLineID, ContractID, FiscalYear, CommodityLine, AccountingLine, BudgetCode, ObjectCode, UoA, AmountPaid, CreatedBy)\r\n\t\t\t\tOUTPUT INSERTED.InvoiceContractLineID, INSERTED.FiscalYear, INSERTED.AmountPaid INTO @invoiceContractLineTable\r\n\t\t\t\t\tSELECT @invoiceId, CL.ContractLineId, CL.ContractID, CL.FiscalYear, CL.CommodityLine, CL.AccountingLine, CL.BudgetCode, CL.ObjectCode, CL.UoA, @amount, @userId\r\n\t\t\t\t\tFROM [Billing].[ContractLine] CL\r\n\t\t\t\t\tWHERE CL.ContractLineID = @contractLineId;\r\n\r\n\t\t\t-- Add default contract line allocation(s)\r\n\t\t\tIF @invoiceIsSplitFY =1\r\n\t\t\t\tINSERT INTO [Invoice].[InvoiceContractLineAllocation] (InvoiceContractLineID, AllocationFiscalYear, AllocationAmount, Comments, CreatedBy)\r\n\t\t\t\t\tSELECT (SELECT ICL.InvoiceContractLineID FROM @invoiceContractLineTable ICL) AS InvoiceContractLineID\r\n\t\t\t\t\t\t, FiscalYear, Amount, Comments, @userId\r\n\t\t\t\t\tFROM @allocations;\r\n\r\n\t\t\tELSE\r\n\t\t\t\tINSERT INTO [Invoice].[InvoiceContractLineAllocation] (InvoiceContractLineID, AllocationFiscalYear, AllocationAmount, CreatedBy)\r\n\t\t\t\t\tSELECT ICL.InvoiceContractLineID, ICL.FiscalYear, ICL.Amount, @userId\t\t\t\t\r\n\t\t\t\t\tFROM @invoiceContractLineTable ICL;\r\n\r\n\t\t\t-- Create audit note\r\n\t\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\t\t\tVALUES ('INVOICE', @invoiceId, 'ADD CONTRACT LINE', 'Contract line (' + @noteFiller + ') added', @userId);\r\n\r\n\t\tEND;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF XACT_STATE() <> 0 ROLLBACK TRAN @tranName;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to add invoice contract line';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.617000",
      "last_altered": "2025-08-25 16:04:01.617000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractLineId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@amount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@allocations",
        "data_type": "UDT_InvoiceContractLineAllocation",
        "mode": "IN",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceContractLineAdd",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceContractLineAdd` is designed to manage the addition or update of contract lines associated with an invoice in a Microsoft SQL Server database. It handles both the creation of new contract lines and the updating of existing ones, along with their associated allocations. The procedure also logs actions and errors, and it includes mechanisms for auditing and error handling.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple operations, including conditional logic, transaction management, error handling, and logging. It interacts with several tables and uses a user-defined table type for input, which adds to its complexity. However, the logic is straightforward and well-structured, making it manageable for experienced developers.\n\n#### 3. Input Parameters\n- `@invoiceId INT`: The ID of the invoice to which the contract line is related.\n- `@contractLineId INT`: The ID of the contract line to be added or updated.\n- `@amount DECIMAL(18, 2)`: The amount to be associated with the contract line.\n- `@allocations [Invoice].[UDT_InvoiceContractLineAllocation] READONLY`: A table-valued parameter containing allocation details.\n- `@correlationId VARCHAR(128) = NULL`: An optional identifier for correlating logs.\n- `@machineName VARCHAR(128) = NULL`: The name of the machine executing the procedure.\n- `@processName VARCHAR(128) = NULL`: The name of the process executing the procedure.\n- `@domain VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username VARCHAR(25) = NULL`: The username of the person executing the procedure.\n- `@userId INT = NULL`: The ID of the user executing the procedure.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: An output parameter for capturing exception details.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: The procedure begins by setting default values for certain parameters and initializing variables for logging and transaction management.\n2. **Transaction Management**: A transaction is started to ensure atomicity of the operations.\n3. **Conditional Logic**:\n   - **Update Existing Contract Line**: If a contract line already exists for the given invoice and contract line ID, it updates the `AmountPaid` and associated allocations.\n   - **Add New Contract Line**: If no existing contract line is found, it inserts a new record into the `InvoiceContractLine` table and adds default allocations.\n4. **Audit Logging**: After either updating or adding a contract line, an audit note is created in the `Common.Note` table.\n5. **Error Handling**: The procedure includes a `TRY...CATCH` block to handle exceptions, rolling back the transaction if an error occurs and capturing error details.\n6. **Logging**: The procedure logs the operation details using the `USP_AppLogCreate` procedure, including any exceptions encountered.\n\n#### 5. Performance Considerations\n- **Transaction Scope**: The use of transactions ensures data integrity but can lead to locking and blocking if not managed carefully, especially in high-concurrency environments.\n- **Table-Valued Parameters**: Using a table-valued parameter for allocations is efficient for passing multiple rows of data but requires careful indexing and optimization of the underlying tables.\n- **Logging Overhead**: The logging and auditing operations add overhead, which could impact performance if the procedure is executed frequently.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: The procedure could face concurrency issues if multiple processes attempt to update the same invoice or contract line simultaneously.\n- **Error Handling**: While the procedure includes error handling, it relies on the `XACT_STATE()` function, which may not capture all types of errors, such as those occurring outside the transaction scope.\n- **Data Integrity**: The procedure assumes that the input data is valid and does not include validation checks, which could lead to data integrity issues if invalid data is provided.\n- **Scalability**: As the procedure involves multiple table operations and logging, it may not scale well with a significant increase in data volume or user load without optimization.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2714,
      "api_response_id": "chatcmpl-C8attNeSoFQ3Yfs0aW2lYETpB9ze7"
    },
    "analysis_timestamp": "2025-08-25 19:28:38"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceContractLineAllocationRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceContractLineAllocationRetrieve]\r\n\t@invoiceId\t\t\t\t\tINT = NULL\r\n\t,@invoiceContractLineId\tINT = NULL\r\n\t,@correlationId\t\t\tVARCHAR(128) = NULL\r\n\t,@machineName\t\t\t\tVARCHAR(128) = NULL\r\n\t,@processName\t\t\t\tVARCHAR(128) = NULL\r\n\t,@domain\t\t\t\t\tVARCHAR(25) = NULL\r\n\t,@username\t\t\t\t\tVARCHAR(25) = NULL\r\n\t,@userId\t\t\t\t\tINT = NULL\r\n\t,@exceptionDetails\t\t\tVARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @invoiceId\t\t\t\t= NULLIF(@invoiceId, 0);\r\n\tSET @invoiceContractLineId\t= NULLIF(@invoiceContractLineId, 0);\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\t\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'RETRIEVE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Retrieved invoice contract line allocation(s)';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceContractLineId AS ICLINEID\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT ICLA.InvoiceContractLineAllocationID, ICLA.AllocationFiscalYear, ICLA.AllocationAmount\r\n\t\t\t, ICLA.InvoiceContractLineID\r\n\t\t\t, ICLA.InvoiceID, ICLA.InvoiceNumber\r\n\t\t\t, ICLA.ContractID, ICLA.ContractNumber\r\n\t\t\t, ICLA.FiscalYear, ICLA.CommodityLine, ICLA.AccountingLine, ICLA.BudgetCode, ICLA.ObjectCode, ICLA.UoA, ICLA.AmountPaid, ICLA.Comments\r\n\t\t\t, ICLA.CreatedBy, ICLA.CreatedDate, ICLA.ModifiedBy, ICLA.ModifiedDate\r\n\t\t\t, ICLA.Active\r\n\t\tFROM [Invoice].[vwInvoiceContractLineAllocations] ICLA\r\n\t\tWHERE ICLA.InvoiceID\t\t\t\t= ISNULL(@invoiceId, ICLA.InvoiceID)\r\n\t\t\tAND ICLA.InvoiceContractLineID\t= ISNULL(@invoiceContractLineId, ICLA.InvoiceContractLineID)\r\n\t\tORDER BY ICLA.InvoiceNumber ASC, ICLA.CommodityLine ASC, ICLA.AccountingLine ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to retrieve invoice contract line allocation(s)';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.620000",
      "last_altered": "2025-08-25 16:04:01.620000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceContractLineId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceContractLineAllocationRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceContractLineAllocationRetrieve` is designed to retrieve invoice contract line allocation details from a view named `vwInvoiceContractLineAllocations` within the `Invoice` schema. It accepts various parameters to filter the data and logs the operation's execution details, including any exceptions encountered during the process.\n\n#### 2. Complexity Level: Medium\nThe procedure involves conditional logic, error handling, and logging, which adds to its complexity. It also uses dynamic parameter handling and interacts with another stored procedure for logging purposes, making it more complex than a simple data retrieval operation.\n\n#### 3. Input Parameters\n- `@invoiceId INT = NULL`: Filters results by a specific invoice ID. Defaults to NULL, meaning no filter is applied if not provided.\n- `@invoiceContractLineId INT = NULL`: Filters results by a specific invoice contract line ID. Defaults to NULL.\n- `@correlationId VARCHAR(128) = NULL`: Used for logging purposes to track the operation. Defaults to a new GUID if not provided.\n- `@machineName VARCHAR(128) = NULL`: Captures the name of the machine executing the procedure. Defaults to the server name.\n- `@processName VARCHAR(128) = NULL`: Captures the name of the process executing the procedure. Defaults to the procedure's schema and name.\n- `@domain VARCHAR(25) = NULL`: Used for logging, representing the domain of the user or system.\n- `@username VARCHAR(25) = NULL`: Used for logging, representing the username executing the procedure.\n- `@userId INT = NULL`: Used for logging, representing the user ID executing the procedure. Defaults to 0 if not provided.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: Outputs any exception messages encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Parameter Initialization**: The procedure initializes parameters, setting defaults where necessary. It uses `NULLIF` to treat zero values as NULL for filtering purposes.\n2. **Logging Setup**: Initializes variables for logging, including action type, severity, and message details.\n3. **Data Retrieval**: Executes a `SELECT` query on the `vwInvoiceContractLineAllocations` view, filtering by `@invoiceId` and `@invoiceContractLineId` if provided. The results are ordered by `InvoiceNumber`, `CommodityLine`, and `AccountingLine`.\n4. **Error Handling**: Uses a `TRY...CATCH` block to handle exceptions. If an error occurs, it captures the error message and sets the severity to 'ERROR'.\n5. **Logging Execution**: Calls another stored procedure `USP_AppLogCreate` to log the operation's details, including any exceptions and the elapsed time.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the columns used in the `WHERE` clause (`InvoiceID` and `InvoiceContractLineID`) are indexed to optimize query performance.\n- **View Optimization**: The performance of the `SELECT` statement depends on the underlying view `vwInvoiceContractLineAllocations`. Ensure the view is optimized for performance.\n- **Logging Overhead**: The logging mechanism introduces additional overhead, especially if the logging procedure is complex or if email notifications are triggered frequently.\n\n#### 6. Potential Issues or Risks\n- **Parameter Defaults**: The use of `NULLIF` to convert zero values to NULL might lead to unintended behavior if zero is a valid input.\n- **Error Handling**: The `CATCH` block only captures the error message, which might not provide sufficient context for debugging. Consider logging additional error details like `ERROR_NUMBER` and `ERROR_LINE`.\n- **Concurrency**: If the view or underlying tables are subject to frequent updates, consider potential concurrency issues that might affect the accuracy of the retrieved data.\n- **Logging Dependency**: The procedure relies on `USP_AppLogCreate` for logging. Any issues with this logging procedure could affect the overall reliability of the logging mechanism.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1885,
      "api_response_id": "chatcmpl-C8au7G1dJobhGAKpuwUlpkpyWDOoQ"
    },
    "analysis_timestamp": "2025-08-25 19:28:47"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceContractLineDelete",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceContractLineDelete]\r\n\t@invoiceId\t\t\t\t\tINT = NULL\r\n\t,@invoiceContractLineId\tINT = NULL\r\n\t,@comments\t\t\t\t\tVARCHAR(500) = NULL\r\n\t,@correlationId\t\t\tVARCHAR(128) = NULL\r\n\t,@machineName\t\t\t\tVARCHAR(128) = NULL\r\n\t,@processName\t\t\t\tVARCHAR(128) = NULL\r\n\t,@domain\t\t\t\t\tVARCHAR(25) = NULL\r\n\t,@username\t\t\t\t\tVARCHAR(25) = NULL\r\n\t,@userId\t\t\t\t\tINT = NULL\r\n\t,@exceptionDetails\t\t\tVARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @invoiceId\t\t\t\t= NULLIF(@invoiceId, 0);\r\n\tSET @invoiceContractLineId\t= NULLIF(@invoiceContractLineId, 0);\r\n\tSET @comments\t\t\t\t= ISNULL(NULLIF(@comments, ''), 'Deleted invoice contract line');\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\t\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'DELETE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Deleted invoice contract line';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @invoiceContractLineId AS BILLID, @comments AS CMT FOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tIF ISNULL(@invoiceId, 0) = 0 AND ISNULL(@invoiceContractLineId, 0) <> 0\r\n\t\tSELECT @invoiceId = InvoiceID FROM [Invoice].[vwInvoiceContractLines] CL WHERE CL.InvoiceContractLineID = @invoiceContractLineId;\r\n\r\n\tIF ISNULL(@invoiceId, 0) = 0 AND ISNULL(@invoiceContractLineId, 0) = 0\r\n\t\tRAISERROR (N'Please specify either the invoice or the line', 16, 1);\r\n\r\n\tDECLARE @noteFiller VARCHAR(500);\r\n\tIF @invoiceContractLineId > 0\r\n\t\tSELECT @noteFiller = (CL.ContractNumber + ',' + CONVERT(VARCHAR(10), CL.CommodityLine) + ',' + CONVERT(VARCHAR(10), CL.AccountingLine))\r\n\t\tFROM [Invoice].[vwInvoiceContractLines] CL\r\n\t\tWHERE CL.InvoiceContractLineID = @invoiceContractLineId;\r\n\tELSE IF @invoiceId > 0\r\n\t\tSET @noteFiller = 'All lines';\r\n\r\n\tDECLARE @tranName VARCHAR(128);\r\n\tSET @tranName = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Delete invoice contract line allocations\r\n\t\tIF ISNULL(@invoiceContractLineId, 0) > 0\r\n\t\tBEGIN\r\n\t\t\t-- By specific invoice contract line\r\n\t\t\tDELETE FROM [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\tWHERE InvoiceContractLineID\t= @invoiceContractLineId;\r\n\t\tEND\r\n\t\t\r\n\t\tELSE IF ISNULL(@invoiceId, 0) > 0\r\n\t\tBEGIN\r\n\t\t\t-- By invoice\r\n\t\t\tDELETE ICLA\r\n\t\t\tFROM [Invoice].[InvoiceContractLineAllocation] ICLA\r\n\t\t\tJOIN [Invoice].[InvoiceContractLine] ICL ON ICLA.InvoiceContractLineID = ICL.InvoiceContractLineID\r\n\t\t\tWHERE ICL.InvoiceID\t\t\t= @invoiceId;\r\n\t\tEND\r\n\r\n\t\t-- Delete invoice contract line\r\n\t\tDELETE FROM [Invoice].[InvoiceContractLine]\r\n\t\tWHERE InvoiceID\t\t\t\t\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\tAND InvoiceContractLineID\t= ISNULL(@invoiceContractLineId, InvoiceContractLineID);\r\n\r\n\t\t-- Create deletion record\r\n\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\t\tVALUES ('INVOICE', @invoiceId, 'REMOVE CONTRACT LINE', @noteFiller, @userId);\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\t\tVALUES ('INVOICE', @invoiceId, 'REMOVE CONTRACT LINE', @comments, @userId);\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF XACT_STATE() <> 0 ROLLBACK TRAN @tranName;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to delete invoice contract line';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.627000",
      "last_altered": "2025-08-25 16:04:01.627000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceContractLineId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@comments",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 500,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceContractLineDelete",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceContractLineDelete` is designed to delete invoice contract lines and their associated allocations from a database. It also logs the deletion action and handles exceptions by rolling back transactions and logging errors. The procedure can delete specific contract lines or all lines associated with a given invoice, depending on the input parameters provided.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including conditional logic, transaction management, error handling, and logging. It interacts with several tables and requires careful handling of input parameters and transactions, which adds to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId INT = NULL`: The ID of the invoice from which contract lines are to be deleted.\n- `@invoiceContractLineId INT = NULL`: The specific contract line ID to be deleted.\n- `@comments VARCHAR(500) = NULL`: Comments regarding the deletion, defaulting to 'Deleted invoice contract line' if not provided.\n- `@correlationId VARCHAR(128) = NULL`: A unique identifier for the operation, generated if not provided.\n- `@machineName VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaults to the server name.\n- `@processName VARCHAR(128) = NULL`: The name of the process executing the procedure, defaults to the procedure's schema and name.\n- `@domain VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username VARCHAR(25) = NULL`: The username of the person executing the procedure.\n- `@userId INT = NULL`: The ID of the user executing the procedure, defaults to 0 if not provided.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**:\n   - Sets default values for parameters using `NULLIF` and `ISNULL`.\n   - Generates a `correlationId` if not provided.\n   - Validates that at least one of `@invoiceId` or `@invoiceContractLineId` is provided, raising an error if neither is specified.\n\n2. **Transaction Management**:\n   - Begins a transaction to ensure atomicity of the delete operations.\n\n3. **Deletion Logic**:\n   - Deletes from `InvoiceContractLineAllocation` based on `@invoiceContractLineId` or `@invoiceId`.\n   - Deletes from `InvoiceContractLine` using the provided IDs.\n   - Inserts records into the `Common.Note` table to log the deletion action.\n\n4. **Error Handling**:\n   - Uses a `TRY...CATCH` block to handle exceptions, rolling back the transaction if an error occurs and capturing the error message.\n\n5. **Logging**:\n   - Calls `USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Index Usage**: Ensure that the `InvoiceContractLine` and `InvoiceContractLineAllocation` tables are properly indexed on `InvoiceID` and `InvoiceContractLineID` to optimize delete operations.\n- **Transaction Scope**: The transaction scope is limited to the delete operations, minimizing the time locks are held.\n- **Logging Overhead**: The logging operations, especially if frequent, could introduce overhead. Consider asynchronous logging if performance becomes an issue.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: Deleting records without proper validation could lead to data integrity issues. Ensure that business rules are enforced before deletion.\n- **Error Handling**: The procedure captures error messages but does not re-throw them, which might obscure issues from calling applications.\n- **Concurrency**: Concurrent deletions could lead to deadlocks or blocking if not managed properly. Consider implementing retry logic or using appropriate isolation levels.\n- **Security**: Ensure that only authorized users can execute this procedure to prevent unauthorized data deletion.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2279,
      "api_response_id": "chatcmpl-C8auGOUCeKk4IITiHJFSD4ewxnsTZ"
    },
    "analysis_timestamp": "2025-08-25 19:29:03"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceContractLineRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceContractLineRetrieve]\r\n\t@invoiceId\t\t\t\t\tINT = NULL\r\n\t,@invoiceContractLineId\tINT = NULL\r\n\t,@correlationId\t\t\tVARCHAR(128) = NULL\r\n\t,@machineName\t\t\t\tVARCHAR(128) = NULL\r\n\t,@processName\t\t\t\tVARCHAR(128) = NULL\r\n\t,@domain\t\t\t\t\tVARCHAR(25) = NULL\r\n\t,@username\t\t\t\t\tVARCHAR(25) = NULL\r\n\t,@userId\t\t\t\t\tINT = NULL\r\n\t,@exceptionDetails\t\t\tVARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @invoiceId\t\t\t\t= NULLIF(@invoiceId, 0);\r\n\tSET @invoiceContractLineId\t= NULLIF(@invoiceContractLineId, 0);\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\t\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'RETRIEVE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Retrieved invoice contract line(s)';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceContractLineId AS ICLINEID\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceIsSplitFY BIT, @currentFY INT;\r\n\r\n\t\tIF @invoiceId IS NULL\r\n\t\t\tSELECT @invoiceId = InvoiceID \r\n\t\t\tFROM invoice.InvoiceContractLine \r\n\t\t\tWHERE InvoiceContractLineID = @invoiceContractLineId;\r\n\r\n\t\tSET  @invoiceIsSplitFY = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\t\tSELECT @currentFY = Billing.UDF_GetFiscalYear(CreatedDate) \r\n\t\tFROM Invoice.Invoice\r\n\t\tWHERE InvoiceID=@invoiceId;\r\n\r\n\t\tSELECT DISTINCT ICL.InvoiceContractLineID, ICL.InvoiceID, ICL.InvoiceNumber\r\n\t\t\t, ICL.ContractID, ICL.ContractNumber, ICL.ContractLineID, ICL.FiscalYear\r\n\t\t\t, ICL.CommodityLine, ICL.AccountingLine, ICL.BudgetCode, ICL.ObjectCode, ICL.UoA\r\n\t\t\t, ICL.ActualAmount, ICL.CloseAmount, ICL.OpenAmount, ICL.AvailableAmount\r\n\t\t\t, ICL.AmountPaid\r\n\t\t\t, ICL.CreatedDate, ICL.CreatedBy, ICL.ModifiedDate, ICL.ModifiedBy\r\n\t\t\t, ICL.Active\r\n\r\n\t\t\t, SUM(IIF(ICLA.AllocationFiscalYear<Billing.UDF_GetFiscalYear(I.CreatedDate), ICLA.AllocationAmount, 0)) OVER (PARTITION BY ICL.InvoiceContractLineID) AS PriorFYAmountPaid\r\n\t\t\t, SUM(IIF(ICLA.AllocationFiscalYear=Billing.UDF_GetFiscalYear(I.CreatedDate), ICLA.AllocationAmount, 0)) OVER (PARTITION BY ICL.InvoiceContractLineID) AS CurrentFYAmountPaid\r\n\t\t\t, @invoiceIsSplitFY AS InvoiceIsSplitFY\r\n\t\t\t, IIF(@invoiceIsSplitFY = 1, @currentFY, ICL.FiscalYear) AS CurrentFY\r\n\r\n\t\tFROM [Invoice].[vwInvoiceContractLines] ICL\r\n\t\t\tJOIN Invoice.InvoiceContractLineAllocation ICLA ON ICL.InvoiceContractLineID=ICLA.InvoiceContractLineID\r\n\t\t\tJOIN Invoice.Invoice I ON icl.InvoiceID=I.InvoiceID\r\n\t\tWHERE ICL.InvoiceID\t\t\t\t\t= ISNULL(@invoiceId, ICL.InvoiceID)\r\n\t\t\tAND ICL.InvoiceContractLineID\t= ISNULL(@invoiceContractLineId, ICL.InvoiceContractLineID)\r\n\t\tORDER BY ICL.CommodityLine ASC, ICL.AccountingLine ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to retrieve invoice contract line(s)';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\t\t\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.633000",
      "last_altered": "2025-08-25 16:04:01.633000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceContractLineId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceContractLineRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceContractLineRetrieve` is designed to retrieve invoice contract line details from a SQL Server database. It accepts various input parameters to filter and log the retrieval process. The procedure fetches data from the `vwInvoiceContractLines` view and related tables, calculates fiscal year amounts, and logs the operation's details, including any exceptions encountered.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple operations, including conditional logic, data retrieval with joins, window functions for aggregation, and error handling with logging. The complexity arises from the combination of these elements, making it more than a simple data retrieval operation but not overly complex due to the absence of intricate business rules or extensive data manipulation.\n\n#### 3. Input Parameters\n- `@invoiceId INT = NULL`: Optional; specifies the invoice ID to filter the results.\n- `@invoiceContractLineId INT = NULL`: Optional; specifies the invoice contract line ID to filter the results.\n- `@correlationId VARCHAR(128) = NULL`: Optional; used for logging to correlate logs across systems.\n- `@machineName VARCHAR(128) = NULL`: Optional; identifies the machine executing the procedure, used in logging.\n- `@processName VARCHAR(128) = NULL`: Optional; identifies the process executing the procedure, used in logging.\n- `@domain VARCHAR(25) = NULL`: Optional; domain information for logging.\n- `@username VARCHAR(25) = NULL`: Optional; username for logging.\n- `@userId INT = NULL`: Optional; user ID for logging.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: Output parameter; captures exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n- **Initialization**: Sets default values for parameters and initializes logging variables.\n- **Parameter Adjustment**: Converts zero values to NULL for `@invoiceId` and `@invoiceContractLineId`.\n- **Logging Setup**: Prepares logging information, including generating a correlation ID if not provided.\n- **Invoice ID Resolution**: If `@invoiceId` is NULL, it attempts to resolve it using `@invoiceContractLineId`.\n- **Fiscal Year Calculation**: Determines if the invoice is split across fiscal years and retrieves the current fiscal year.\n- **Data Retrieval**: \n  - Joins `vwInvoiceContractLines`, `InvoiceContractLineAllocation`, and `Invoice` tables.\n  - Uses window functions to calculate prior and current fiscal year amounts.\n  - Filters results based on provided invoice and contract line IDs.\n  - Orders results by `CommodityLine` and `AccountingLine`.\n- **Error Handling**: Catches exceptions, logs error details, and sets a flag to send an email notification.\n- **Logging**: Logs the operation's details, including execution time and any exceptions, using `USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that `InvoiceID` and `InvoiceContractLineID` are indexed to optimize joins and WHERE clause filtering.\n- **Window Functions**: The use of window functions can be resource-intensive; ensure that the dataset size is manageable.\n- **Logging Overhead**: Frequent logging, especially with detailed messages, can impact performance. Consider the volume and frequency of procedure calls.\n\n#### 6. Potential Issues or Risks\n- **NULL Handling**: The procedure assumes that zero values should be treated as NULL, which may not always align with business requirements.\n- **Concurrency**: If the underlying data changes frequently, ensure that the procedure handles concurrent modifications gracefully.\n- **Error Handling**: While exceptions are logged, the procedure does not provide a mechanism to handle them beyond logging, which may not be sufficient for critical operations.\n- **Scalability**: The use of window functions and logging can impact scalability, especially under high load or with large datasets.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2134,
      "api_response_id": "chatcmpl-C8auWZZ0y71TBCFZRrSFxSVw5z7Aa"
    },
    "analysis_timestamp": "2025-08-25 19:29:14"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceContractLineUpdate",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceContractLineUpdate]\r\n\t@invoiceContractLineId\t\tINT\r\n\t,@amount\t\t\t\t\tDECIMAL(18, 2)\r\n\t,@allocations\t\t\t\t[Invoice].[UDT_InvoiceContractLineAllocation] READONLY\r\n\t,@correlationId\t\t\tVARCHAR(128) = NULL\r\n\t,@machineName\t\t\t\tVARCHAR(128) = NULL\r\n\t,@processName\t\t\t\tVARCHAR(128) = NULL\r\n\t,@domain\t\t\t\t\tVARCHAR(25) = NULL\r\n\t,@username\t\t\t\t\tVARCHAR(25) = NULL\r\n\t,@userId\t\t\t\t\tINT = NULL\r\n\t,@exceptionDetails\t\t\tVARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @invoiceContractLineId\t= NULLIF(@invoiceContractLineId, 0);\r\n\tSET @amount\t\t\t\t\t= NULLIF(@amount, 0);\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\t\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'UPDATE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Updated invoice contract line';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @invoiceContractLineId AS ICLINEID, @amount AS AMT\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, (SELECT * FROM @allocations FOR XML PATH('ALLOC'), TYPE)\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tDECLARE @invoiceId INT;\r\n\tSELECT @invoiceId = InvoiceID FROM [Invoice].[vwInvoiceContractLines] CL WHERE CL.InvoiceContractLineID = @invoiceContractLineId;\r\n\r\n\tIF ISNULL(@invoiceId, 0) = 0 AND ISNULL(@invoiceContractLineId, 0) = 0\r\n\t\tRAISERROR (N'Please specify either the invoice or the line', 16, 1);\r\n\r\n\tDECLARE @noteFiller VARCHAR(500);\r\n\tSELECT @noteFiller = (CL.ContractNumber + ',' + CONVERT(VARCHAR(10), CL.CommodityLine) + ',' + CONVERT(VARCHAR(10), CL.AccountingLine))\r\n\tFROM [Invoice].[vwInvoiceContractLines] CL\r\n\tWHERE CL.InvoiceContractLineID = @invoiceContractLineId;\r\n\r\n\tDECLARE @tranName VARCHAR(128);\r\n\tSET @tranName = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Update contract line\r\n\t\tUPDATE [Invoice].[InvoiceContractLine] SET AmountPaid = @amount\r\n\t\tWHERE InvoiceContractLineID = @invoiceContractLineId;\r\n\r\n\t\t-- Delete existing contract line allocations\r\n\t\tDELETE FROM [Invoice].[InvoiceContractLineAllocation]\r\n\t\tWHERE InvoiceContractLineID = @invoiceContractLineId;\r\n\r\n\t\t-- Insert new contract line allocations\r\n\t\tINSERT INTO [Invoice].[InvoiceContractLineAllocation] (InvoiceContractLineID, AllocationFiscalYear, AllocationAmount, Comments, CreatedBy)\r\n\t\t\tSELECT @invoiceContractLineId, FiscalYear, Amount, Comments, @userId\r\n\t\t\tFROM @allocations;\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\t\tVALUES ('INVOICE', @invoiceId, 'UPDATE CONTRACT LINE', 'Updated contract line (' + @noteFiller + ')', @userId);\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF XACT_STATE() <> 0 ROLLBACK TRAN @tranName;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to update invoice contract line';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.640000",
      "last_altered": "2025-08-25 16:04:01.640000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceContractLineId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@amount",
        "data_type": "decimal",
        "mode": "IN",
        "max_length": 9,
        "precision": 18,
        "scale": 2,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@allocations",
        "data_type": "UDT_InvoiceContractLineAllocation",
        "mode": "IN",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceContractLineUpdate",
      "explanation": "#### 1. Overview\n\nThe stored procedure `USP_InvoiceContractLineUpdate` is designed to update an invoice contract line in a Microsoft SQL Server database. It updates the amount paid for a specific invoice contract line, deletes existing allocations, inserts new allocations, and logs the operation. The procedure also handles error logging and transaction management to ensure data integrity.\n\n#### 2. Complexity Level: Medium\n\nThe complexity level of this stored procedure is medium. It involves multiple operations, including updates, deletes, inserts, error handling, and logging. The use of transactions and error handling adds to its complexity, but the logic is straightforward and well-structured.\n\n#### 3. Input Parameters\n\n- `@invoiceContractLineId INT`: The ID of the invoice contract line to be updated.\n- `@amount DECIMAL(18, 2)`: The new amount to be set for the invoice contract line.\n- `@allocations [Invoice].[UDT_InvoiceContractLineAllocation] READONLY`: A table-valued parameter containing new allocation details.\n- `@correlationId VARCHAR(128) = NULL`: An optional correlation ID for logging purposes.\n- `@machineName VARCHAR(128) = NULL`: The name of the machine executing the procedure, used for logging.\n- `@processName VARCHAR(128) = NULL`: The name of the process executing the procedure, used for logging.\n- `@domain VARCHAR(25) = NULL`: The domain of the user executing the procedure, used for logging.\n- `@username VARCHAR(25) = NULL`: The username of the user executing the procedure, used for logging.\n- `@userId INT = NULL`: The ID of the user executing the procedure, used for logging and auditing.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n\n1. **Initialization**: The procedure begins by setting `NOCOUNT ON` to prevent extra result sets from being returned. It initializes several variables for logging and transaction management.\n\n2. **Parameter Handling**: It sets default values for `@invoiceContractLineId` and `@amount` if they are zero. It also generates default values for logging parameters if they are not provided.\n\n3. **Validation**: The procedure checks if either `@invoiceId` or `@invoiceContractLineId` is provided. If not, it raises an error.\n\n4. **Transaction Management**: A transaction is started to ensure atomicity of the operations.\n\n5. **Update Operation**: The procedure updates the `AmountPaid` field of the specified invoice contract line.\n\n6. **Delete and Insert Operations**: It deletes existing allocations for the invoice contract line and inserts new allocations from the provided table-valued parameter.\n\n7. **Audit Logging**: An audit note is created to log the update operation.\n\n8. **Error Handling**: The procedure includes a `TRY...CATCH` block to handle errors. If an error occurs, the transaction is rolled back, and error details are captured.\n\n9. **Logging**: After the transaction, the procedure logs the operation using `USP_AppLogCreate`, capturing details such as action, severity, message, and elapsed time.\n\n#### 5. Performance Considerations\n\n- **Transaction Scope**: The use of transactions ensures data integrity but can lock resources, potentially affecting performance if the procedure is executed frequently or on large datasets.\n- **Table-Valued Parameter**: Using a table-valued parameter for allocations is efficient for batch inserts but requires careful management of the data passed to avoid performance bottlenecks.\n- **Logging Overhead**: Extensive logging can introduce overhead, especially if the procedure is executed frequently. Consider optimizing the logging mechanism if performance issues arise.\n\n#### 6. Potential Issues or Risks\n\n- **Error Handling**: While the procedure includes error handling, it relies on `XACT_STATE()` to determine transaction rollback. Ensure that all potential errors are adequately captured and handled.\n- **Concurrency**: The procedure may face concurrency issues if multiple instances attempt to update the same invoice contract line simultaneously. Consider implementing additional locking mechanisms if necessary.\n- **Data Integrity**: The procedure assumes that the provided `@allocations` data is valid. Implement additional validation if necessary to ensure data integrity.\n- **Logging and Security**: Sensitive information may be logged, which could pose a security risk. Ensure that logging complies with security policies and regulations.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2200,
      "api_response_id": "chatcmpl-C8aui60W3TTc0Ju2rdf9UsHKRpnxl"
    },
    "analysis_timestamp": "2025-08-25 19:29:29"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceCreate",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceCreate]\r\n\t@providerId\t\t\t\tINT\r\n\t,@billingPeriod\t\tVARCHAR(6)\r\n\t,@invoiceId\t\t\tINT = NULL OUTPUT\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @providerId\t\t\t= NULLIF(@providerId, 0);\r\n\tSET @billingPeriod\t\t= NULLIF(@billingPeriod, '');\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\t\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'CREATE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Created invoice';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @providerId AS PRVID, @billingPeriod AS PRD FOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tDECLARE @tranName VARCHAR(128);\r\n\tSET @tranName = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceNumber VARCHAR(25), @ctr INT;\r\n\t\tSELECT @ctr = MAX(RIGHT(InvoiceNumber, 3)) FROM [Invoice].[vwInvoices] WHERE InvoiceBillingPeriod = @billingPeriod;\r\n\t\tSET @ctr = ISNULL(@ctr, 0) + 1;\r\n\t\tSET @invoiceNumber = 'DEM_' + @billingPeriod + RIGHT('0000' + CONVERT(VARCHAR(10), @ctr), 3);\r\n\r\n\r\n\t\tDECLARE @invoiceTable TABLE(InvoiceID INT);\r\n\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Create invoice header\r\n\t\tINSERT INTO [Invoice].[Invoice] (InvoiceNumber, ProviderID, InvoiceBillingPeriod, StatusID, CreatedBy)\r\n\t\t\tOUTPUT INSERTED.InvoiceID INTO @invoiceTable\r\n\t\t\t\tVALUES (@invoiceNumber, @providerId, @billingPeriod, 1, @userId);\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\t\tSELECT 'INVOICE', T.InvoiceID, 'CREATE', 'Draft created', @userId FROM @invoiceTable T;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\r\n\t\tSELECT @invoiceId = T.InvoiceID FROM @invoiceTable T;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF XACT_STATE() <> 0 ROLLBACK TRAN @tranName;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to create invoice';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.647000",
      "last_altered": "2025-08-25 16:04:01.647000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingPeriod",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 6,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "OUT",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceCreate",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceCreate` is designed to create a new invoice record in the `Invoice` table within the `Invoice` schema. It generates a unique invoice number based on the billing period and maintains audit logs of the operation. The procedure also handles exceptions and logs them appropriately, ensuring that any errors during the invoice creation process are captured and reported.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves transaction management with error handling using `TRY...CATCH`.\n- It dynamically generates invoice numbers based on existing records.\n- It logs operations and exceptions, which adds to the complexity.\n- It uses output parameters and manages multiple input parameters, including optional ones.\n\n#### 3. Input Parameters\n- `@providerId INT`: The ID of the provider for whom the invoice is being created.\n- `@billingPeriod VARCHAR(6)`: The billing period for the invoice, formatted as a string.\n- `@invoiceId INT = NULL OUTPUT`: An output parameter that returns the ID of the newly created invoice.\n- `@correlationId VARCHAR(128) = NULL`: An optional parameter for tracking the operation across systems.\n- `@machineName VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaulting to the server name.\n- `@processName VARCHAR(128) = NULL`: The name of the process executing the procedure, defaulting to the procedure's schema and name.\n- `@domain VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username VARCHAR(25) = NULL`: The username of the person executing the procedure.\n- `@userId INT = NULL`: The ID of the user executing the procedure, defaulting to 0 if not provided.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: An output parameter that captures any exception messages.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: The procedure begins by setting default values for certain parameters and initializing variables for logging and transaction management.\n2. **Invoice Number Generation**: It calculates the next invoice number by finding the maximum existing invoice number for the given billing period and incrementing it.\n3. **Transaction Management**: A transaction is started to ensure atomicity of the invoice creation process.\n   - **Invoice Creation**: Inserts a new record into the `Invoice` table and captures the `InvoiceID` using the `OUTPUT` clause.\n   - **Audit Logging**: Inserts a record into the `Note` table to log the creation of the invoice.\n4. **Transaction Commit/Rollback**: The transaction is committed if successful; otherwise, it is rolled back in the `CATCH` block.\n5. **Error Handling**: Captures any errors that occur during the transaction and sets the appropriate logging parameters.\n6. **Logging**: Calls another stored procedure `USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Concurrency**: The use of `MAX` to determine the next invoice number could lead to concurrency issues if multiple invoices are created simultaneously for the same billing period.\n- **Transaction Scope**: The transaction scope is limited to the necessary operations, which is good for performance, but care should be taken to ensure it does not lock resources for too long.\n- **Logging Overhead**: The logging mechanism, while useful for auditing, adds additional overhead, especially if the `USP_AppLogCreate` procedure is complex or resource-intensive.\n\n#### 6. Potential Issues or Risks\n- **Concurrency Issues**: The calculation of the next invoice number using `MAX` could result in duplicate invoice numbers if multiple transactions are processed concurrently.\n- **Error Handling**: While the procedure captures exceptions, it does not re-throw them, which might lead to silent failures if not monitored properly.\n- **Parameter Validation**: The procedure does not validate input parameters beyond checking for null or default values, which could lead to unexpected behavior if invalid data is provided.\n- **Scalability**: As the number of invoices grows, the performance of the `MAX` function could degrade, impacting the procedure's efficiency.\n- **Security**: The procedure assumes that the caller has the necessary permissions to insert into the `Invoice` and `Note` tables, which might not always be the case. Proper security checks should be in place.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2031,
      "api_response_id": "chatcmpl-C8auwMaukwIE5MgpMb2e8wD1KQiiM"
    },
    "analysis_timestamp": "2025-08-25 19:29:47"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceDelete",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceDelete]\r\n(\r\n\t@invoiceId AS INT\r\n\t,@comments AS VARCHAR(500) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25), @severity AS VARCHAR(25), @message AS VARCHAR(255), @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME, @elapsedTime AS INT, @sendEmail AS BIT, @tranName AS VARCHAR(128);\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @comments = ISNULL(NULLIF(@comments, ''), 'Deleted invoice');\r\n\tSELECT @startTime = GETDATE(), @action = 'DELETE', @severity = 'INFO', @message = 'Deleted invoice', @sendEmail = 0\r\n\t\t,@userId = ISNULL(@userId, 0), @tranName = CONVERT(VARCHAR(128), NEWID())\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA')\r\n\t\t,@messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS PRVID, @comments AS CMT FOR XML PATH('INPUTS')));\t\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Delete from invoice payments\r\n\t\tDELETE FROM [Invoice].[InvoicePayment] WHERE InvoiceID = @invoiceId;\r\n\r\n\t\t-- Delete from invoice contract line allocations\r\n\t\tDELETE CLA\r\n\t\tFROM Invoice.InvoiceContractLineAllocation AS CLA\r\n\t\t\tINNER JOIN Invoice.InvoiceContractLine AS CL ON CL.InvoiceContractLineID = CLA.InvoiceContractLineID\r\n\t\tWHERE CL.InvoiceID = @invoiceId;\r\n\r\n\t\t-- Delete from invoice contract lines\r\n\t\tDELETE FROM Invoice.InvoiceContractLine WHERE InvoiceID = @invoiceId;\r\n\r\n\t\t-- Unlock associated bills in EC3 (for electronic billing only)\r\n\t\tUPDATE EB\r\n\t\tSET EB.InvoiceTrackingSeqid = NULL\r\n\t\t\t,EB.VoucherBillingStatus = NULL\r\n\t\t\t,EB.VoucherBillingStatusPeriod = NULL\r\n\t\t\t,EB.IsLockedForEdit = 'N'\r\n\t\t\t,EB.LastUpdate = GETDATE()\r\n\t\t\t,EB.AuthenticatedUserID = @userId\r\n\t\tFROM Billing.EC3_ManualBill_AccountManualBillingHeader_ElectronicBilling AS EB\r\n\t\t\tINNER JOIN Invoice.InvoiceAccountBilling AS ACCT ON ACCT.BillingID = EB.AccountManualBillingHeaderSeqid\r\n\t\t\tINNER JOIN Invoice.InvoiceGroupContract AS IGC ON IGC.InvoiceGroupContractID = ACCT.InvoiceGroupContractID\r\n\t\t\tINNER JOIN Billing.BillingGroupContract AS BGC ON BGC.BillingGroupContractID = IGC.BillingGroupContractID\r\n\t\t\tINNER JOIN Billing.vwBillingGroups AS BG ON BG.GroupID = BGC.GroupID\r\n\t\tWHERE IGC.InvoiceID = @invoiceId AND BG.BillingType = 'E'\r\n\t\t\tAND ACCT.BillingID NOT IN (SELECT DISTINCT BillingID FROM Invoice.InvoiceAccountBilling WHERE InvoiceID <> @invoiceId);\r\n\r\n\t\t-- Delete from invoice account billings\r\n\t\tDELETE FROM Invoice.InvoiceAccountBilling WHERE InvoiceID = @invoiceId;\r\n\r\n\t\t-- Delete from invoice group contracts\r\n\t\tDELETE FROM Invoice.InvoiceGroupContract WHERE InvoiceID = @invoiceId;\r\n\r\n\t\t-- Delete from invoice group contracts\r\n\t\tDELETE FROM Invoice.Invoice WHERE InvoiceID = @invoiceId;\r\n\r\n\t\t-- Update invoice header\r\n\t\tUPDATE Invoice.Invoice\r\n\t\tSET Active = 0\r\n\t\t\t,ModifiedDate = GETDATE()\r\n\t\t\t,ModifiedBy\t= @userId\r\n\t\tWHERE InvoiceID = @invoiceId;\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO Common.Note(ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tVALUES ('INVOICE', @invoiceId, 'DELETED', @comments, @userId);\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to update invoice', @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.653000",
      "last_altered": "2025-08-25 16:04:01.653000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@comments",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 500,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceDelete",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceDelete` is designed to handle the deletion of an invoice and its associated records from various tables within a Microsoft SQL Server database. It performs a series of deletions across related tables, updates certain records, and logs the operation for auditing purposes. The procedure also includes error handling to manage transaction rollbacks in case of failures.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves multiple DELETE operations across several related tables.\n- It includes transaction management with error handling.\n- It updates records and logs actions for auditing.\n- It uses dynamic elements like GUIDs and server-specific information.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT`: The primary identifier for the invoice to be deleted.\n- `@comments AS VARCHAR(500) = NULL`: Optional comments regarding the deletion.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional identifier for correlating logs.\n- `@machineName AS VARCHAR(128) = NULL`: Optional name of the machine executing the procedure.\n- `@processName AS VARCHAR(128) = NULL`: Optional name of the process executing the procedure.\n- `@domain AS VARCHAR(25) = NULL`: Optional domain information for logging.\n- `@username AS VARCHAR(25) = NULL`: Optional username for logging.\n- `@userId AS INT = NULL`: Optional user ID for auditing purposes.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for parameters and initializes variables for logging and transaction management.\n2. **Transaction Start**: Begins a transaction to ensure atomicity of the delete operations.\n3. **Delete Operations**:\n   - Deletes related records from `InvoicePayment`, `InvoiceContractLineAllocation`, `InvoiceContractLine`, `InvoiceAccountBilling`, and `InvoiceGroupContract`.\n   - Updates `EC3_ManualBill_AccountManualBillingHeader_ElectronicBilling` to unlock bills associated with electronic billing.\n   - Deletes the invoice record from the `Invoice` table.\n   - Updates the `Invoice` table to mark the invoice as inactive.\n4. **Audit Logging**: Inserts a record into the `Common.Note` table to log the deletion action.\n5. **Transaction Commit**: Commits the transaction if all operations succeed.\n6. **Error Handling**: Catches exceptions, rolls back the transaction if necessary, and logs the error details.\n7. **Logging**: Calls `USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Management**: The use of transactions ensures data integrity but can lock resources, potentially impacting performance if the procedure is executed frequently or on large datasets.\n- **Index Usage**: Ensure that the tables involved in DELETE operations are properly indexed on `InvoiceID` to optimize performance.\n- **Logging Overhead**: The logging mechanism, especially if it involves sending emails, can introduce additional overhead.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: If the procedure is interrupted or fails without proper rollback, it could leave the database in an inconsistent state.\n- **Concurrency**: High concurrency could lead to locking issues, especially if the procedure is executed simultaneously by multiple users.\n- **Error Handling**: While the procedure includes error handling, it relies on the assumption that `XACT_STATE()` will correctly indicate the transaction state, which might not cover all edge cases.\n- **Scalability**: As the volume of data grows, the performance of the DELETE operations and the associated logging could degrade, necessitating optimization or refactoring.\n- **Security**: Ensure that only authorized users can execute this procedure to prevent unauthorized data deletion.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2189,
      "api_response_id": "chatcmpl-C8avFt7j30JeR2EBabYYpZP0jGSfy"
    },
    "analysis_timestamp": "2025-08-25 19:29:59"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceDetailsRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceDetailsRetrieve]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\tSET ARITHABORT ON;\r\n\t  \r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, '');\r\n\tDECLARE @approved AS INT = 0;\r\n\r\n\t-- Fill @invoiceId if it's null\r\n\tIF (@invoiceId IS NULL AND @invoiceNumber IS NOT NULL)\r\n\tBEGIN\r\n\t\tSELECT @invoiceId = InvoiceID FROM Invoice.Invoice WHERE InvoiceNumber = @invoiceNumber;\r\n\tEND;\r\n\r\n\t-- Invoice header\r\n\tSELECT InvoiceID, InvoiceBillingPeriod, InvoiceNumber, InvoiceGroupCount, AmountBilled, AmountPaid, ProviderID, StatusID\r\n\t\t,InvoiceDate, CreatedDate, CreatedBy, ModifiedDate, ModifiedBy, Active\r\n\t\t,IIF(ModifiedBy=0, 'System', (SELECT UserFirstName + ' ' + UserLastName FROM Billing.EC3_Membership_EC3Membership WHERE AuthenticatedUserID = ModifiedBy)) AS modifiedByName\r\n\t\t,(SELECT UserFirstName + ' ' + UserLastName FROM Billing.EC3_Membership_EC3Membership WHERE AuthenticatedUserID = CreatedBy) AS createdByName\r\n\t\t,Billing.UDF_IsSplitFYInvoice(InvoiceID) AS InvoiceIsSplitFY, Billing.UDF_GetFiscalYear(CreatedDate) AS CurrentFY\r\n\tFROM Invoice.vwInvoices\r\n\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber);\r\n\r\n\t-- Invoice groups\r\n\tSELECT @approved = statusId FROM Invoice.Invoice WHERE InvoiceID = @invoiceId;\r\n\r\n\tSELECT a1.InvoiceGroupContractID, a1.InvoiceID, a1.GroupID, a1.IsSummaryBilling, a1.BillingType, ISNULL(b.AmountBilled, 0) AS AmountBilled\r\n\t\t,a1.AmountPaid, a1.FiscalYear, a1.ContractNumber, a1.BudgetCode, a1.FundingSourceDescription, a1.ActualAmount, a1.CloseAmount\r\n\t\t,a1.OpenAmount, a1.AvailableAmount, a1.CreatedDate, a1.CreatedBy, a1.ModifiedDate, a1.ModifiedBy, a1.Ranking, a1.ContractLineNum\r\n\tFROM (SELECT a.InvoiceGroupContractID, a.InvoiceID, a.GroupID, a.IsSummaryBilling, a.BillingType, SUM(ISNULL(c.AmountPaid, 0)) AS AmountPaid\r\n\t\t\t,a.FiscalYear, a.ContractID, a.ContractNumber, a.BudgetCode, SUM(a.CloseAmount) AS CloseAmount, ISNULL(a.FundingSourceDescription, '') AS FundingSourceDescription\r\n\t\t\t,SUM(IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(NULL, a.contractLineID, a.FiscalYear, @invoiceId), a.ActualAmount)) AS ActualAmount\r\n\t\t\t,SUM(IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(NULL, a.contractLineID, a.FiscalYear, @invoiceId), a.ActualAmount)) - SUM(a.CloseAmount) AS OpenAmount\r\n\t\t\t,SUM(IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(NULL, a.contractLineID, a.FiscalYear, @invoiceId), a.ActualAmount)) - SUM(a.CloseAmount) AS AvailableAmount\r\n\t\t\t,a.CreatedDate, a.CreatedBy, a.ModifiedDate, a.ModifiedBy, DENSE_RANK() OVER (PARTITION BY a.InvoiceGroupContractID ORDER BY a.BudgetCode) AS Ranking\r\n\t\t\t,COUNT(1) OVER (PARTITION BY a.InvoiceGroupContractID) AS ContractLineNum\r\n\t\tFROM Invoice.vwinvoicegroupcontractlines AS a\r\n\t\t\tLEFT JOIN invoice.InvoiceContractLine AS c ON a.InvoiceID = c.InvoiceID AND a.ContractID = c.ContractID AND a.BudgetCode = c.BudgetCode\r\n\t\t\t\tAND a.FiscalYear = c.FiscalYear AND a.CommodityLine = c.CommodityLine AND a.AccountingLine = c.AccountingLine\r\n\t\tWHERE a.InvoiceID = ISNULL(@invoiceId, a.InvoiceID) AND a.InvoiceNumber = ISNULL(@invoiceNumber, a.InvoiceNumber)\r\n\t\tGROUP BY a.InvoiceGroupContractID, a.InvoiceID, a.GroupID, a.IsSummaryBilling, a.BillingType, a.FiscalYear, a.ContractID, a.ContractNumber\r\n\t\t\t,a.BudgetCode, ISNULL(a.FundingSourceDescription, ''), a.CreatedDate, a.CreatedBy, a.ModifiedDate, a.ModifiedBy) AS a1\r\n\t\tLEFT JOIN (SELECT InvoiceID, GroupID, BudgetCode, FiscalYear, AmountBilled\r\n\t\tFROM Invoice.vwInvoiceGroupContractLineAmountsFromBilling \r\n\t\tWHERE InvoiceID = @invoiceId) AS b ON a1.InvoiceID = b.InvoiceID AND a1.GroupID = b.GroupID AND a1.BudgetCode = b.BudgetCode AND a1.FiscalYear = b.FiscalYear\r\n\tUNION\r\n\tSELECT DISTINCT a.InvoiceGroupContractID, a.invoiceid, a.GroupID, a .IsSummaryBilling, a.BillingType, b.AmountBilled, b.AmountPaid, a.FiscalYear\r\n\t\t,a.ContractNumber, '' BudgetCode, '' AS FundingSourceDescription\r\n\t\t,IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(a.ContractID, NULL, a.FiscalYear, @invoiceId), SUM(a.ActualAmount) OVER (PARTITION BY a.InvoiceGroupContractID)) AS ActualAmount\r\n\t\t,SUM(a.CloseAmount) OVER (PARTITION BY a.InvoiceGroupContractID) AS CloseAmount\r\n\t\t,IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(a.ContractID, NULL, a.FiscalYear, @invoiceId) - (SUM(a.CloseAmount) OVER (PARTITION BY a.InvoiceGroupContractID)), SUM(a.OpenAmount) OVER (PARTITION BY a.InvoiceGroupContractID)) AS OpenAmount\r\n\t\t,IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(a.ContractID, NULL, a.FiscalYear, @invoiceId) - (SUM(a.CloseAmount) OVER (PARTITION BY a.InvoiceGroupContractID)), SUM(a.OpenAmount) OVER (PARTITION BY a.InvoiceGroupContractID)) AS AvailableAmount\r\n\t\t,a.CreatedDate, a.CreatedBy, a.ModifiedDate, a.ModifiedBy, 0 AS Ranking, 0 AS ContractLineNum\r\n\tFROM Invoice.vwinvoicegroupcontractlines AS a\r\n\t\tINNER JOIN Invoice.vwInvoiceGroupContracts AS b ON a.invoiceid = b.invoiceid AND a.contractid = b.contractid AND a.groupid = b.groupid\r\n\t\t\tAND a.InvoiceGroupContractID = b.InvoiceGroupContractID\r\n\tWHERE a.invoiceid = ISNULL(@invoiceId, a.InvoiceID)\r\n\tORDER BY GroupID, FiscalYear, InvoiceGroupContractID, Ranking;\r\n\r\n\t-- Invoice accounts\r\n\tSELECT InvoiceBillingID, InvoiceGroupContractID, InvoiceID, InvoiceNumber, GroupID, GroupName, ContractID, ContractNumber, FiscalYear\r\n\t\t,AccountID, AccountNumber, FormattedAccountNumber, BillingID, BillingPeriod, BillingPeriodDays, BillingPeriodDaysPriorFY, BillingPeriodDaysCurrentFY\r\n\t\t,IsEstimated, IsManualEntry, AmountBilled, AmountPaid, AmountPaidPriorFY, AmountPaidCurrentFY, EnergyUsage, EnergyUsagePriorFY, EnergyUsageCurrentFY\r\n\t\t,DemandUsage, DemandUsagePriorFY, DemandUsageCurrentFY, DateBilled, DateDue, FromDate, ToDate, SplitFY, CreatedDate, CreatedBy, ModifiedDate, ModifiedBy, Active\r\n\tFROM Invoice.vwInvoiceAccountBillings\r\n\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber);\r\n\r\n\t-- Invoice contract lines\r\n\tSELECT DISTINCT ICL.InvoiceContractLineID, ICL.InvoiceID, ICL.InvoiceNumber, ICL.ContractID, ICL.ContractNumber, ICL.ContractLineID\r\n\t\t,ICL.FiscalYear, ICL.CommodityLine, ICL.AccountingLine, ICL.BudgetCode, ICL.ObjectCode, ICL.UoA, ICL.AmountPaid, ICL.CreatedDate\r\n\t\t,ICL.CreatedBy, ICL.ModifiedDate, ICL.ModifiedBy, ICL.Active\r\n\t\t,SUM(IIF(ICLA.AllocationFiscalYear < Billing.UDF_GetFiscalYear(ICL.CreatedDate), ICLA.AllocationAmount, 0)) OVER (PARTITION BY ICL.InvoiceContractLineID) AS PriorFYAmountPaid\r\n\t\t,SUM(IIF(ICLA.AllocationFiscalYear = Billing.UDF_GetFiscalYear(ICL.CreatedDate), ICLA.AllocationAmount, 0)) OVER (PARTITION BY ICL.InvoiceContractLineID) AS CurrentFYAmountPaid\r\n\t\t,ICL.OpenAmount\r\n\tFROM Invoice.vwInvoiceContractLines AS ICL \r\n\t\tINNER JOIN Invoice.InvoiceContractLineAllocation AS ICLA ON ICL.InvoiceContractLineID = ICLA.InvoiceContractLineID\r\n\t\tINNER JOIN Invoice.Invoice AS I ON ICL.InvoiceID = I.InvoiceID\r\n\tWHERE ICL.InvoiceID = ISNULL(@invoiceId, ICL.InvoiceID)\r\n\t\tAND ICL.InvoiceNumber = ISNULL(@invoiceNumber, ICL.InvoiceNumber)\r\n\tORDER BY ICL.ContractID, ICL.FiscalYear, ICL.CommodityLine, ICL.AccountingLine, ICL.BudgetCode;\r\n\r\n\t-- Invoice contract line allocations\r\n\tSELECT ICLA.InvoiceContractLineAllocationID, ICLA.AllocationFiscalYear, ICLA.AllocationAmount, ICLA.InvoiceContractLineID, ICLA.InvoiceID\r\n\t\t,ICLA.InvoiceNumber, ICLA.ContractID, ICLA.ContractNumber, ICLA.FiscalYear, ICLA.CommodityLine, ICLA.AccountingLine, ICLA.BudgetCode\r\n\t\t,ICLA.ObjectCode, ICLA.UoA, ICLA.AmountPaid, ICLA.Comments, ICLA.CreatedBy, ICLA.CreatedDate, ICLA.ModifiedBy, ICLA.ModifiedDate, ICLA.Active\r\n\t\t,ISNULL((SELECT SUM(a.AllocationAmount)\r\n\t\t\tFROM invoice.InvoiceContractLineAllocation AS a\r\n\t\t\t\tINNER JOIN invoice.InvoiceContractLine AS b ON a.InvoiceContractLineID = b.InvoiceContractLineID\r\n\t\t\t\tINNER JOIN invoice.Invoice AS c ON b.InvoiceID = c.InvoiceID\r\n\t\t\tGROUP BY c.InvoiceID, a.AllocationAmount, a.AllocationFiscalYear, b.InvoiceContractLineID, b.FiscalYear\r\n\t\t\tHAVING b.InvoiceContractLineID = ICLA.InvoiceContractLineID\r\n\t\t\t\tAND a.AllocationFiscalYear = Billing.UDF_GetFiscalYear(DATEADD(year, -1, ICLA.AllocationFiscalYear))),0) AS PrevFiscalYearAmt\r\n\tFROM [Invoice].[vwInvoiceContractLineAllocations] ICLA\r\n\tWHERE ICLA.InvoiceID = ISNULL(@invoiceId, ICLA.InvoiceID)\r\n\t\tAND ICLA.InvoiceNumber = ISNULL(@invoiceNumber, ICLA.InvoiceNumber)\r\n\tORDER BY ICLA.InvoiceNumber ASC, ICLA.CommodityLine ASC, ICLA.AccountingLine ASC;\r\n\r\n\t-- Invoice payments\r\n\tSELECT InvoicePaymentID, InvoiceGroupContractID, InvoiceID, InvoiceNumber, InvoiceDate, GroupID, GroupName\r\n\t\t,ContractID, ContractNumber, PaymentType, PaymentNumber, PaymentAmount, DateIssued, DateCleared, DateAccepted\r\n\t\t,CreatedDate, CreatedBy, ModifiedDate, ModifiedBy, Active\r\n\tFROM Invoice.vwInvoicePayments\r\n\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber);\r\n\r\n\t-- Invoice notes\r\n\tSELECT NoteID, [Action], Note, CreatedDate, CreatedBy, Username\r\n\tFROM Invoice.vwInvoiceNotes\r\n\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\tORDER BY CreatedDate DESC;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.663000",
      "last_altered": "2025-08-25 16:04:01.663000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceDetailsRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceDetailsRetrieve` is designed to retrieve detailed information about invoices from a SQL Server database. It gathers data from various invoice-related tables and views, including invoice headers, groups, accounts, contract lines, allocations, payments, and notes. The procedure allows filtering by invoice ID or invoice number and returns comprehensive details about the specified invoice.\n\n#### 2. Complexity Level: High\nThe complexity level of this stored procedure is high due to the following reasons:\n- It involves multiple SELECT statements querying different tables and views.\n- It uses conditional logic to handle different scenarios based on input parameters.\n- It includes subqueries and user-defined functions to derive additional data.\n- It performs aggregations and window functions to calculate sums and rankings.\n- It handles potential null values and default parameter settings.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional. Specifies the ID of the invoice to retrieve.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional. Specifies the number of the invoice to retrieve.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional. Used for tracking or logging purposes.\n- `@machineName AS VARCHAR(128) = NULL`: Optional. Used for tracking or logging purposes.\n- `@processName AS VARCHAR(128) = NULL`: Optional. Used for tracking or logging purposes.\n- `@domain AS VARCHAR(25) = NULL`: Optional. Used for tracking or logging purposes.\n- `@username AS VARCHAR(25) = NULL`: Optional. Used for tracking or logging purposes.\n- `@userId AS INT = NULL`: Optional. Used for tracking or logging purposes.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter for capturing any exception details.\n\n#### 4. Business Logic and Workflow\n- **Initialization**: The procedure begins by setting `NOCOUNT ON` to prevent extra result sets and sets the transaction isolation level to `READ UNCOMMITTED` to allow dirty reads.\n- **Parameter Handling**: It initializes `@invoiceId` and `@invoiceNumber` to null if they are zero or empty, respectively.\n- **Invoice ID Resolution**: If `@invoiceId` is null and `@invoiceNumber` is provided, it retrieves the `InvoiceID` using the `InvoiceNumber`.\n- **Invoice Header Retrieval**: Queries the `vwInvoices` view to get invoice header details, including user names for created and modified by fields using subqueries.\n- **Invoice Group Retrieval**: Retrieves invoice group details, including amounts and fiscal year data, using joins and aggregations. It uses user-defined functions to calculate amounts based on approval status.\n- **Invoice Account Retrieval**: Fetches account billing details related to the invoice.\n- **Invoice Contract Line Retrieval**: Retrieves contract line details, including fiscal year allocations using window functions.\n- **Invoice Contract Line Allocation Retrieval**: Fetches allocation details and calculates previous fiscal year amounts using subqueries.\n- **Invoice Payment Retrieval**: Retrieves payment details associated with the invoice.\n- **Invoice Note Retrieval**: Fetches notes related to the invoice, ordered by creation date.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED Isolation Level**: While it improves performance by allowing dirty reads, it may lead to inconsistent data reads.\n- **Multiple Joins and Subqueries**: The procedure involves complex joins and subqueries, which can be resource-intensive and slow down performance, especially on large datasets.\n- **Use of User-Defined Functions**: Functions like `UDF_GetOriginalAmt` and `UDF_GetFiscalYear` can impact performance if not optimized, as they are called multiple times.\n- **Aggregations and Window Functions**: These operations can be computationally expensive, particularly if the underlying tables are large.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The use of `READ UNCOMMITTED` can lead to reading uncommitted data, which might not be suitable for all business scenarios.\n- **Null Handling**: The procedure assumes that `NULLIF` will handle zero or empty values correctly, but any changes in input data types or logic might affect this.\n- **Concurrency**: High concurrency scenarios might lead to performance bottlenecks due to the complexity of queries.\n- **Error Handling**: The procedure lacks explicit error handling mechanisms, which could lead to unhandled exceptions being propagated to the calling application.\n- **Scalability**: As the data grows, the performance of this procedure might degrade due to its complexity and the volume of data processed.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3777,
      "api_response_id": "chatcmpl-C8avRV6agucJZCgFnNK0T8ldjazIo"
    },
    "analysis_timestamp": "2025-08-25 19:30:25"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceEmailAddressRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceEmailAddressRetrieve]\r\n(\r\n\t@invoiceID AS INT = 0\r\n\t,@paymentNumber AS VARCHAR(255) = NULL\r\n\t,@applicationId AS VARCHAR(128) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\t\r\n\tSELECT @invoiceID = NULLIF(@invoiceID, 0), @paymentNumber = NULLIF(@paymentNumber, '');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND @paymentNumber IS NULL)\r\n\tBEGIN\r\n\t\tRAISERROR (N'The invoiceId or paymentNumber must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25), @severity AS VARCHAR(25), @message AS VARCHAR(255), @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME, @elapsedTime AS INT, @sendEmail AS BIT, @ConEdSteamProfileId AS INT, @ConEdOtherProfileId AS INT\r\n\t\t,@LIPAProfileId AS INT, @NGridEastProfileId AS INT, @PAofNYNJProfileId AS INT, @MetroProfileId AS INT, @NavyYardProfileId AS INT\r\n\t\t,@GenerateHudson AS INT, @CentralHudson AS INT, @NYCEDC AS INT, @NYSOMH AS INT, @notificationProfileId AS INT = 0;\r\n\tDECLARE @providerList AS TABLE (providerID INT NOT NULL);\r\n\tSELECT @startTime = GETDATE(), @applicationId = ISNULL(@applicationId, 103), @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA'), @processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA')\r\n\t\t,@action = 'RETRIEVE', @severity = 'INFO', @message = 'Invoices - Retrieved Provider Emails by InvoiceID', @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceID AS InvoiceID FOR XML PATH('INPUTS')))\r\n\t\t,@sendEmail = 0, @userId = ISNULL(@userId, 0);\r\n\t\t\r\n\tINSERT INTO @providerList (providerID) VALUES (1), (2), (3), (7), (9), (12), (16), (18), (19), (43), (47), (69);\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT @ConEdSteamProfileId = [Con Edison Steam Payment Notification],\r\n\t\t\t@ConEdOtherProfileId = [Con Edison Payment Notification],\r\n\t\t\t@LIPAProfileId = [PSEG Payment Notification],\r\n\t\t\t@NGridEastProfileId = [National Grid East Payment Notification],\r\n\t\t\t@PAofNYNJProfileId = [PAofNYNJ Payment Notification],\r\n\t\t\t@MetroProfileId = [Metro Energy Payment Notification],\r\n\t\t\t@NavyYardProfileId = [Brooklyn Navy Yard Payment Notification],\r\n\t\t\t@GenerateHudson = [Generate Hudson Payment Notification],\r\n\t\t\t@CentralHudson = [Central Hudson Payment Notification],\r\n\t\t\t@NYCEDC = [NYCEDC Payment Notification],\r\n\t\t\t@NYSOMH = [NYSOMH Payment Notification]\r\n\t\tFROM (SELECT [MassDistributionProfileSeqid], shortDesc\r\n\t\t\tFROM Billing.EC3_Contact_MassDistributionProfile\r\n\t\t\tWHERE shortDesc IN ('PSEG Payment Notification', 'Con Edison Steam Payment Notification', 'Con Edison Payment Notification', 'National Grid East Payment Notification',\r\n\t\t\t\t'PAofNYNJ Payment Notification', 'Metro Energy Payment Notification', 'Brooklyn Navy Yard Payment Notification', 'Generate Hudson Payment Notification',\r\n\t\t\t\t'Central Hudson Payment Notification', 'NYCEDC Payment Notification', 'NYSOMH Payment Notification')\r\n\t\t\t ) AS SourceTable\r\n\t\tPIVOT (MAX([MassDistributionProfileSeqid]) FOR shortDesc IN ([PSEG Payment Notification], [Con Edison Steam Payment Notification], [Con Edison Payment Notification],\r\n\t\t\t[National Grid East Payment Notification], [PAofNYNJ Payment Notification], [Metro Energy Payment Notification], [Brooklyn Navy Yard Payment Notification],\r\n\t\t\t[Generate Hudson Payment Notification], [Central Hudson Payment Notification], [NYCEDC Payment Notification], [NYSOMH Payment Notification])\r\n\t\t) AS pvt;\r\n\r\n  \t\tSELECT @notificationProfileId =\r\n\t\t\tCASE WHEN ProviderID = 3 THEN @LIPAProfileId\r\n\t\t\t\tWHEN ProviderID = 18 THEN @NGridEastProfileId\r\n\t\t\t\tWHEN ProviderID = 43 THEN @PAofNYNJProfileId\r\n\t\t\t\tWHEN ProviderID = 1 THEN @MetroProfileId\r\n\t\t\t\tWHEN ProviderID = 19 THEN @NavyYardProfileId\r\n\t\t\t\tWHEN ProviderID = 69 THEN @GenerateHudson\r\n\t\t\t\tWHEN ProviderID = 12 THEN @CentralHudson\r\n\t\t\t\tWHEN ProviderID = 47 THEN @NYCEDC\r\n\t\t\t\tWHEN ProviderID = 16 THEN @NYSOMH\r\n\t\t\t\tWHEN (ProviderID = 9 AND GroupID = 10) THEN @ConEdSteamProfileId \r\n\t\t\t\tELSE @ConEdOtherProfileId\r\n\t\t\tEND\r\n\t\tFROM (SELECT DISTINCT a.ProviderID, MIN(IIF(b.GroupID = 10, 10, 0)) AS groupid\r\n\t\t\tFROM Invoice.Invoice AS a\r\n\t\t\t\tINNER JOIN Invoice.InvoicePayment AS b ON a.InvoiceID = b.InvoiceID\r\n\t\t\tWHERE a.InvoiceID = ISNULL(@invoiceID, a.invoiceid) AND b.PaymentNumber = ISNULL(@paymentNumber, b.PaymentNumber)\r\n\t\t\t\tAND a.ProviderID IN (SELECT providerID FROM @providerList)\r\n\t\t\tGROUP BY a.ProviderID) AS tmp;\r\n\r\n\t\tSELECT a.MassDistributionProfileSeqid\r\n\t\t\t,c.ContactAddressSeqid\r\n\t\t\t,c.ContactName\r\n\t\t\t,c.ContactLastName\r\n\t\t\t,c.ContactFirstName\r\n\t\t\t,c.ContactMI\r\n\t\t\t,c.Curtsytitle\r\n\t\t\t,c.ContactTelephoneNumber\r\n\t\t\t,c.EmailAddress\r\n\t\t\t,CAST(IIF(c.UtilityCompanyContact IS NOT NULL, 1, 0) AS BIT) AS IsTo\r\n\t\t\t,CAST(IIF(c.AgencyContact IS NOT NULL, 1, 0) AS BIT) AS IsCc\r\n\t\tFROM Billing.EC3_Contact_MassDistributionProfile AS a\r\n\t\t\tINNER JOIN Billing.EC3_Contact_MassDistributionListReportContext AS b ON a.MassDistributionProfileSeqid = b.MassDistributionProfileSeqid\r\n\t\t\tINNER JOIN Billing.EC3_Contact_ContactAddress AS c ON b.ContactAddressSeqid = c.ContactAddressSeqid\r\n\t\tWHERE a.MassDistributionProfileSeqid = @notificationProfileId AND c.IsRemoved = 'N'\r\n\t\tORDER BY a.MassDistributionProfileSeqid, IsTo DESC, c.ContactLastName, c.ContactFirstName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Invoices - Failed to retrieve Provider Emails by InvoiceID', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail\t= @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.673000",
      "last_altered": "2025-08-25 16:04:01.673000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceID",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@paymentNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 255,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@applicationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceEmailAddressRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceEmailAddressRetrieve` is designed to retrieve email addresses associated with a specific invoice or payment number. It uses various input parameters to determine the context of the request and logs the process, including any errors encountered. The procedure retrieves email addresses from a set of predefined notification profiles based on the provider associated with the invoice.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is medium due to the following factors:\n- It involves conditional logic to handle different input scenarios.\n- It uses a PIVOT operation to transform data from rows to columns.\n- It includes error handling with a TRY-CATCH block.\n- It logs the operation details and handles multiple input parameters.\n\n#### 3. Input Parameters\n- `@invoiceID AS INT = 0`: The ID of the invoice to retrieve email addresses for.\n- `@paymentNumber AS VARCHAR(255) = NULL`: The payment number associated with the invoice.\n- `@applicationId AS VARCHAR(128) = NULL`: An identifier for the application context.\n- `@correlationId AS VARCHAR(128) = NULL`: A unique identifier for correlating logs.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the user executing the procedure.\n- `@userId AS INT = NULL`: The ID of the user executing the procedure.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**: \n   - The procedure initializes input parameters, setting defaults where necessary.\n   - It checks if either `@invoiceID` or `@paymentNumber` is provided; otherwise, it raises an error.\n\n2. **Setup and Logging Preparation**:\n   - Initializes variables for logging and sets up a temporary table `@providerList` with predefined provider IDs.\n   - Sets the start time for the operation and prepares logging details.\n\n3. **Data Retrieval**:\n   - Uses a PIVOT operation to retrieve profile IDs for various notification types from `Billing.EC3_Contact_MassDistributionProfile`.\n   - Determines the appropriate notification profile ID based on the provider ID and group ID.\n\n4. **Email Address Retrieval**:\n   - Retrieves email addresses from `Billing.EC3_Contact_MassDistributionProfile`, `Billing.EC3_Contact_MassDistributionListReportContext`, and `Billing.EC3_Contact_ContactAddress` tables.\n   - Filters out removed contacts and orders the results by profile ID, contact type, and name.\n\n5. **Error Handling**:\n   - A TRY-CATCH block captures any errors during execution, logs the error message, and sets a flag to send an email notification.\n\n6. **Logging**:\n   - Calculates the elapsed time for the operation.\n   - Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the tables involved in joins and filters have appropriate indexes to optimize query performance.\n- **PIVOT Operation**: The PIVOT operation can be resource-intensive; ensure that the dataset is not excessively large.\n- **Logging Overhead**: Frequent logging can introduce overhead; consider the impact on performance if the procedure is called frequently.\n\n#### 6. Potential Issues or Risks\n- **Input Validation**: The procedure raises an error if neither `@invoiceID` nor `@paymentNumber` is provided, which is appropriate. However, additional validation on the format and range of these inputs could be beneficial.\n- **Concurrency**: If the procedure is executed concurrently by multiple users, ensure that the logging mechanism and temporary table usage do not lead to contention or locking issues.\n- **Error Handling**: While the TRY-CATCH block captures errors, it does not re-throw them, which might be necessary for some applications to handle exceptions appropriately.\n- **Hardcoded Values**: The procedure uses hardcoded provider IDs and profile descriptions, which could lead to maintenance challenges if these values change. Consider externalizing these configurations.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2875,
      "api_response_id": "chatcmpl-C8avqiqM4rlFKak4MC3qMiIRf3W7R"
    },
    "analysis_timestamp": "2025-08-25 19:30:42"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceEmailLogAdd",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceEmailLogAdd]\r\n\t@invoiceID\t\t\t\tINT\r\n    ,@eFTNumber\t\t\tVARCHAR(255)\r\n    ,@emailTo\t\t\t\tVARCHAR(800) = NULL\r\n    ,@emailCc\t\t\t\tVARCHAR(800) = NULL\r\n    ,@success\t\t\t\tBIT = 1\r\n    ,@notes\t\t\t\tVARCHAR(500) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\t\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'CREATE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Add Invoice Provider Email Log';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @eFTNumber AS EFTNUM FOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tBEGIN TRY\r\n\t\tINSERT INTO\tInvoice.InvoiceProviderEmailLog (InvoiceID\r\n\t\t\t,EFTNumber\r\n\t\t    ,EmailSentDate\r\n\t\t    ,EmailSentBy\r\n\t\t    ,EmailTo\r\n\t\t    ,EmailCc\r\n\t\t    ,Success\r\n\t\t    ,Notes)\r\n\t\tVALUES (@invoiceID\r\n\t\t\t,@eFTNumber\r\n\t\t    ,GETDATE()\r\n\t\t    ,@userId\r\n\t\t    ,@emailTo\r\n\t\t    ,@emailCc\r\n\t\t    ,CAST(ISNULL(@success, 1) AS BIT)\r\n\t\t    ,@notes);\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to Add Invoice Provider Email Log';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.680000",
      "last_altered": "2025-08-25 16:04:01.680000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceID",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@eFTNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 255,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@emailTo",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 800,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@emailCc",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 800,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@success",
        "data_type": "bit",
        "mode": "IN",
        "max_length": 1,
        "precision": 1,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@notes",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 500,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 12,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 13,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceEmailLogAdd",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceEmailLogAdd` is designed to log email activities related to invoices in the `InvoiceProviderEmailLog` table. It records details such as the invoice ID, EFT number, email recipients, and success status. Additionally, it logs the operation's metadata and any exceptions encountered during execution into an application log via another stored procedure, `USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple steps, including data insertion, error handling, and logging. It uses both input parameters and system functions to gather necessary information, making it moderately complex. The use of a TRY-CATCH block and interaction with another logging procedure adds to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceID INT`: The unique identifier for the invoice.\n- `@eFTNumber VARCHAR(255)`: The EFT (Electronic Funds Transfer) number associated with the invoice.\n- `@emailTo VARCHAR(800) = NULL`: The primary recipient(s) of the email.\n- `@emailCc VARCHAR(800) = NULL`: The CC recipient(s) of the email.\n- `@success BIT = 1`: Indicates whether the email was successfully sent (default is true).\n- `@notes VARCHAR(500) = NULL`: Additional notes regarding the email.\n- `@correlationId VARCHAR(128) = NULL`: A unique identifier for correlating logs, defaults to a new GUID if not provided.\n- `@machineName VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaults to the server name.\n- `@processName VARCHAR(128) = NULL`: The name of the process, defaults to the schema and procedure name.\n- `@domain VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username VARCHAR(25) = NULL`: The username of the person executing the procedure.\n- `@userId INT = NULL`: The ID of the user executing the procedure, defaults to 0 if not provided.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: Captures any exception messages encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for several parameters using system functions and defaults.\n2. **TRY Block**: Attempts to insert a new record into the `InvoiceProviderEmailLog` table with the provided details and current timestamp.\n3. **CATCH Block**: If an error occurs during the insertion, it captures the error message, sets the severity to 'ERROR', and flags the operation to send an email notification.\n4. **Logging**: Regardless of success or failure, it logs the operation details, including the action, severity, message, and any exception details, by calling the `USP_AppLogCreate` procedure.\n5. **Elapsed Time Calculation**: Calculates the time taken for the operation and includes it in the log.\n\n#### 5. Performance Considerations\n- **GETDATE() Usage**: Called multiple times, which could be optimized by storing the result in a variable if consistent timestamps are required.\n- **Error Handling**: The use of TRY-CATCH ensures that errors are managed gracefully, but it may slightly impact performance due to additional overhead.\n- **Logging Overhead**: The procedure logs detailed information, which could introduce latency, especially if the logging mechanism is slow or the log table grows large.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: If multiple instances of this procedure run simultaneously, there could be contention on the `InvoiceProviderEmailLog` table, potentially leading to performance bottlenecks.\n- **Parameter Lengths**: The procedure assumes that email addresses and notes will not exceed the specified lengths. If they do, it could lead to truncation or errors.\n- **Error Handling**: While errors are logged, the procedure does not attempt to retry the operation or provide alternative handling strategies.\n- **Security**: The procedure logs potentially sensitive information, such as email addresses and user details, which should be protected to prevent unauthorized access.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1778,
      "api_response_id": "chatcmpl-C8aw7umLobAuKAwSqJPyzFTzHe9VK"
    },
    "analysis_timestamp": "2025-08-25 19:31:01"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceEmailLogRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceEmailLogRetrieve]\r\n\t@invoiceID\t\t\t\tINT=0\r\n    ,@eFTNumber\t\t\tVARCHAR(255)=NULL\r\n    ,@emailSentDate\t\tDATETIME=NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\t\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'CREATE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Retrieve Invoice Provider Email Log';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @eFTNumber AS EFTNUM FOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT InvoiceEmailId\r\n            ,InvoiceID\r\n            ,EFTNumber\r\n            ,EmailSentDate\r\n            ,EmailSentBy\r\n            ,EmailTo\r\n            ,EmailCc\r\n            ,Success\r\n            ,Notes\r\n\t\tFROM Invoice.InvoiceProviderEmailLog\r\n\t\tWHERE InvoiceID=ISNULL(NULLIF(@invoiceID, 0), InvoiceID)\r\n\t\t\tAND EFTNumber=ISNULL(NULLIF(@eFTNumber, ''), EFTNumber)\r\n\t\t\tAND EmailSentDate=ISNULL(@emailSentDate, EmailSentDate);\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to Retrieve Invoice Provider Email Log';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\t\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.683000",
      "last_altered": "2025-08-25 16:04:01.683000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceID",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@eFTNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 255,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@emailSentDate",
        "data_type": "datetime",
        "mode": "IN",
        "max_length": 8,
        "precision": 23,
        "scale": 3,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceEmailLogRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceEmailLogRetrieve` is designed to retrieve records from the `Invoice.InvoiceProviderEmailLog` table based on various optional filtering criteria. It logs the operation's details, including any exceptions, and records the execution in an application log. The procedure also supports error handling and logging, with the ability to send notifications if an error occurs.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple input parameters, conditional logic for filtering, error handling, and logging operations. While the SQL logic itself is straightforward, the inclusion of logging and error handling adds to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceID INT=0`: Filters records by `InvoiceID`. Defaults to 0, which means no filtering by this parameter if not specified.\n- `@eFTNumber VARCHAR(255)=NULL`: Filters records by `EFTNumber`. If NULL, no filtering by this parameter.\n- `@emailSentDate DATETIME=NULL`: Filters records by `EmailSentDate`. If NULL, no filtering by this parameter.\n- `@correlationId VARCHAR(128)=NULL`: Used for logging to uniquely identify the operation. Defaults to a new GUID if not provided.\n- `@machineName VARCHAR(128)=NULL`: Used for logging the server name. Defaults to the current server name.\n- `@processName VARCHAR(128)=NULL`: Used for logging the procedure name. Defaults to the current procedure's schema and name.\n- `@domain VARCHAR(25)=NULL`: Used for logging the domain of the user.\n- `@username VARCHAR(25)=NULL`: Used for logging the username.\n- `@userId INT=NULL`: Used for logging the user ID. Defaults to 0 if not provided.\n- `@exceptionDetails VARCHAR(MAX)=NULL OUTPUT`: Outputs any exception message encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets up logging parameters, including correlation ID, machine name, and process name. Initializes action, severity, and message details for logging.\n2. **Main Operation**: Attempts to retrieve records from `Invoice.InvoiceProviderEmailLog` based on the provided filters. Uses `ISNULL` and `NULLIF` to handle default values and NULLs.\n3. **Error Handling**: If an error occurs during the SELECT operation, it captures the error message, updates the severity to 'ERROR', and sets a flag to send an email notification.\n4. **Logging**: Calculates the elapsed time for the operation and logs the details using the `dbo.USP_AppLogCreate` procedure, including any exceptions and whether an email notification should be sent.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that `InvoiceID`, `EFTNumber`, and `EmailSentDate` are indexed to optimize the SELECT query performance.\n- **Parameter Sniffing**: The use of default values and NULL checks can lead to parameter sniffing issues. Consider using `OPTION (RECOMPILE)` if performance issues arise.\n- **Logging Overhead**: The logging operation, especially if it involves sending emails, can add overhead. Ensure that logging is efficient and necessary.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: The procedure captures only the error message. Consider capturing additional error details like error number and severity for more comprehensive error handling.\n- **Concurrency**: If the logging table or email sending mechanism is a bottleneck, it could affect performance under high concurrency.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized access to sensitive data.\n- **Email Notification**: The logic for sending emails is not detailed in the procedure. Ensure that the email sending mechanism is robust and does not fail silently.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1687,
      "api_response_id": "chatcmpl-C8awQDqu07u67GA9sIuALlX5pmBrd"
    },
    "analysis_timestamp": "2025-08-25 19:31:14"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceEmailUnsentInvoiceRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceEmailUnsentInvoiceRetrieve]\r\n(\r\n\t@PaymentNumber AS VARCHAR(255) = NULL\r\n\t,@PreviousDayNum AS INT = 1000\r\n\t,@applicationId AS VARCHAR(128) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username\tAS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\t\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @PaymentNumber = NULLIF(@PaymentNumber, ''), @PreviousDayNum = ISNULL(@PreviousDayNum, 9999);\r\n\r\n\tDECLARE @action AS VARCHAR(25), @severity AS VARCHAR(25), @message AS VARCHAR(255), @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME, @elapsedTime AS INT, @sendEmail AS BIT;\r\n\tDECLARE @providerList TABLE(providerID INT NOT NULL);\r\n\r\n\tSELECT @startTime = GETDATE(), @applicationId = ISNULL(@applicationId, 103), @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())),\r\n\t\t@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA'), @processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'),\r\n\t\t@action = 'RETRIEVE', @severity = 'INFO', @message = 'Invoices - Retrieved Invoices by Payment# (notification is unsent)',\r\n\t\t@messageDetails = CONVERT(VARCHAR(MAX), (SELECT ISNULL(@PaymentNumber, @PreviousDayNum) AS PaymentNumber FOR XML PATH('INPUTS'))),\r\n\t\t@sendEmail = 0, @userId = ISNULL(@userId, 0);\r\n\tINSERT INTO @providerList (providerID) VALUES (1), (2), (3), (7), (9), (12), (16), (18), (19), (43), (47), (69);\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT DISTINCT b.invoiceid, b.invoicenumber, b.providerid, c.ProviderName, a.PaymentType, a.PaymentNumber, a.PaymentAmount, a.DateIssued\r\n\t\t\t,CAST(IIF(a.groupid=10, 1, 0) AS BIT) AS IsConEdSteam\r\n\t\tFROM Invoice.InvoicePayment AS a\r\n\t\t\tINNER JOIN Invoice.Invoice AS b ON a.InvoiceID = b.InvoiceID\r\n\t\t\tINNER JOIN Billing.vwProviders AS c ON b.providerid = c.ProviderID\r\n\t\tWHERE a.PaymentNumber = ISNULL(@PaymentNumber, a.PaymentNumber) AND b.ProviderID IN (SELECT providerID FROM @providerList) AND b.StatusID >= 8 \r\n\t\t\tAND NOT EXISTS (SELECT 1 FROM Invoice.InvoiceProviderEmailLog AS b WHERE a.PaymentNumber =  b.EFTNumber AND a.InvoiceID = b.InvoiceID AND b.Success = 1)\r\n\t\t\tAND a.DateIssued >= DATEADD(DAY, -120, GETDATE())\r\n\t\tORDER BY a.PaymentNumber, b.invoiceid;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Invoices - Failed to retrieve Invoices by Payment# (notification is unsent)'\r\n\t\t\t,@sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.697000",
      "last_altered": "2025-08-25 16:04:01.697000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@PaymentNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 255,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@PreviousDayNum",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@applicationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceEmailUnsentInvoiceRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceEmailUnsentInvoiceRetrieve` is designed to retrieve invoices associated with a specific payment number where the notification email has not been sent. It logs the operation details and handles exceptions by logging errors and optionally sending an email notification. The procedure is part of the `Invoice` schema and interacts with tables related to invoices, payments, and providers.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple operations, including parameter handling, data retrieval with joins and conditions, error handling, and logging. The use of temporary tables, dynamic SQL elements, and exception handling increases its complexity beyond a simple query execution.\n\n#### 3. Input Parameters\n- `@PaymentNumber AS VARCHAR(255) = NULL`: Specifies the payment number to filter invoices. If NULL, all payment numbers are considered.\n- `@PreviousDayNum AS INT = 1000`: Default value is 1000, used to set a fallback for `@PaymentNumber`.\n- `@applicationId AS VARCHAR(128) = NULL`: Application identifier for logging purposes.\n- `@correlationId AS VARCHAR(128) = NULL`: Correlation ID for tracking the operation, defaults to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: Name of the machine executing the procedure, defaults to the server name.\n- `@processName AS VARCHAR(128) = NULL`: Name of the process executing the procedure, defaults to the procedure's schema and name.\n- `@domain AS VARCHAR(25) = NULL`: Domain information for logging.\n- `@username AS VARCHAR(25) = NULL`: Username for logging.\n- `@userId AS INT = NULL`: User ID for logging, defaults to 0.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for parameters and initializes local variables.\n2. **Provider List Setup**: Populates a table variable `@providerList` with specific provider IDs.\n3. **Data Retrieval**: Executes a SELECT query to retrieve distinct invoices based on the provided payment number, provider list, and other conditions:\n   - Joins `InvoicePayment`, `Invoice`, and `vwProviders` tables.\n   - Filters invoices where the email notification has not been sent.\n   - Orders results by payment number and invoice ID.\n4. **Error Handling**: Uses TRY-CATCH to handle exceptions, capturing error messages and setting a flag to send an email notification if an error occurs.\n5. **Logging**: Calls `USP_AppLogCreate` to log the operation details, including execution time and any exceptions.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED Isolation Level**: Reduces locking overhead but risks reading uncommitted data.\n- **Table Variable for Provider List**: Efficient for small datasets but may not scale well with larger lists.\n- **Date Filtering**: Uses `DATEADD` to filter invoices issued in the last 120 days, which can be optimized with appropriate indexing on `DateIssued`.\n- **Logging Overhead**: Frequent logging can impact performance, especially if the log table grows large.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: Using `READ UNCOMMITTED` can lead to dirty reads, potentially affecting data accuracy.\n- **Scalability**: The use of a table variable for provider IDs may not perform well with a larger number of providers.\n- **Error Handling**: The procedure captures error messages but does not provide detailed error handling or recovery mechanisms.\n- **Hardcoded Values**: Provider IDs and date ranges are hardcoded, reducing flexibility and requiring code changes for updates.\n- **Concurrency**: The procedure does not handle concurrent modifications, which could lead to inconsistent results if data changes during execution.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1939,
      "api_response_id": "chatcmpl-C8aweywBw3WFwU6xvHLkTFndKhmkH"
    },
    "analysis_timestamp": "2025-08-25 19:31:33"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceGroupContractAdd",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceGroupContractAdd]\r\n(\r\n\t@invoiceId AS INT\r\n\t,@fiscalYear AS VARCHAR(4)\r\n\t,@groupId AS INT\r\n\t,@contractId AS INT\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @fiscalYear = NULLIF(@fiscalYear, ''), @groupId = NULLIF(@groupId, 0), @contractId = NULLIF(@contractId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'), @userId = ISNULL(@userId, 0);\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'CREATE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Added invoice billing group and contract'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @tranName VARCHAR(128) = CONVERT(VARCHAR(128), NEWID())\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @fiscalYear AS FY, @groupId AS GRPID, @contractId AS CTRCTID FOR XML PATH('INPUTS')));\r\n\r\n\tDECLARE @billingGroupContractId INT, @noteFiller VARCHAR(500), @isElectronicSummaryBilling BIT, @billingPeriod VARCHAR(6), @invoiceGroupId INT\r\n\t\t, @summaryAcctNumber VARCHAR(15), @invoiceNumAction VARCHAR(30);\r\n\r\n\tSELECT @billingGroupContractId = BillingGroupContractID\r\n\tFROM Billing.BillingGroupContract\r\n\tWHERE ContractID = @contractId AND GroupID = @groupId AND FiscalYear = @fiscalYear;\r\n\r\n\tSELECT @noteFiller = (GroupName + ',' + FiscalYear + ',' + ContractNumber)\r\n\tFROM Billing.vwBillingGroupContracts\r\n\tWHERE ContractID = @contractId AND GroupID = @groupId AND FiscalYear = @fiscalYear;\r\n\tSET @noteFiller = ISNULL(@noteFiller, CONVERT(VARCHAR(10), @groupId) + ',' + @fiscalYear + ',NA');\r\n\r\n\tSET @isElectronicSummaryBilling = 0;\r\n\t\r\n\tIF EXISTS (SELECT 1 FROM Billing.vwBillingGroups WHERE GroupID = @groupId AND BillingType = 'E')\r\n\tBEGIN\r\n\t    SET @isElectronicSummaryBilling = 1;\r\n\tEND;\r\n\r\n\tSET @invoiceNumAction = '';\r\n\tSELECT @summaryAcctNumber = SummaryAccountNumber FROM Billing.vwBillingGroups WHERE GroupID = @groupId;\r\n\r\n\tSELECT @billingPeriod = InvoiceBillingPeriod FROM [Invoice].[vwInvoices] WHERE InvoiceID = @invoiceId;\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceGroupTable TABLE(InvoiceGroupID INT);\r\n\t\tDECLARE @billingTable TABLE(InvoiceBillingID INT);\r\n\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Add invoice group\r\n\t\tINSERT INTO Invoice.InvoiceGroupContract(InvoiceID, BillingGroupContractID, CreatedBy)\r\n\t\tOUTPUT INSERTED.InvoiceGroupContractID INTO @invoiceGroupTable\r\n\t\tVALUES (@invoiceId, @billingGroupContractId, @userId);\r\n\r\n\t\t-- Determine inserted invoice group identifier\r\n\t\tSELECT @invoiceGroupId = CONVERT(INT, InvoiceGroupID) FROM @invoiceGroupTable;\r\n\r\n\t\t-- Add associated accounts / billings if electronic billing and summary billing type\r\n\t\tIF (@isElectronicSummaryBilling = 1)\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO Invoice.InvoiceAccountBilling(InvoiceGroupContractID, InvoiceID, GroupID, ContractID, BillingID\r\n\t\t\t\t,AccountID, AccountNumber, BillingPeriod\r\n\t\t\t\t,BillingPeriodDays, FromDate, ToDate\r\n\t\t\t\t,SplitFY\r\n\t\t\t\t,BillingPeriodDaysPriorFY\r\n\t\t\t\t,BillingPeriodDaysCurrentFY\r\n\t\t\t\t,IsManualEntry, IsEstimated, DateBilled, DateDue\r\n\t\t\t\t,EnergyUnit\r\n\t\t\t\t,EnergyUsage\r\n\t\t\t\t,EnergyUsagePriorFY\r\n\t\t\t\t,EnergyUsageCurrentFY\r\n\t\t\t\t,DemandUsage\r\n\t\t\t\t,DemandUsagePriorFY\r\n\t\t\t\t,DemandUsageCurrentFY\r\n\t\t\t\t,AmountBilled\r\n\t\t\t\t,AmountPaid\r\n\t\t\t\t,AmountPaidPriorFY\r\n\t\t\t\t,AmountPaidCurrentFY\r\n\t\t\t\t,CreatedBy)\r\n\t\t\tOUTPUT INSERTED.InvoiceBillingID INTO @billingTable\r\n\t\t\tSELECT @invoiceGroupId, @invoiceId, @groupId, @contractId, B.BillingID\r\n\t\t\t\t,B.AccountID, B.AccountNumber, B.BillingPeriod, B.BillingPeriodDays, B.FromDate, B.ToDate\r\n\t\t\t\t,Billing.UDF_IsSplitFYBilling(@invoiceId, B.FromDate, B.ToDate)\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN B.BillingPeriodDays ELSE 0 END BillingPeriodDaysPriorFY\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN 0 ELSE B.BillingPeriodDays END BillingPeriodDaysCurrrentFY\r\n\t\t\t\t,B.IsManualEntry, B.IsEstimated, B.DateBilled, B.DateDue\r\n\t\t\t\t,B.EnergyUnit\r\n\t\t\t\t,B.AccountEnergyUsage\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN B.AccountEnergyUsage ELSE 0 END EnergyUsagePriorFY\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN 0 ELSE B.AccountEnergyUsage END  EnergyUsageCurrentFY\r\n\t\t\t\t,B.AccountDemandUsage\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN B.AccountDemandUsage ELSE 0 END DemandUsagePriorFY\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN 0 ELSE B.AccountDemandUsage END  DemandUsageCurrentFY\r\n\t\t\t\t,CONVERT(DECIMAL(18, 2), B.AmountBilled)\r\n\t\t\t\t,CONVERT(DECIMAL(18, 2), B.AmountPaid)\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN CONVERT(DECIMAL(18, 2), B.AmountPaid) ELSE 0 END AmountPaidPriorFY\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN 0 ELSE CONVERT(DECIMAL(18, 2), B.AmountPaid) END  AmountPaidCurrentFY\r\n\t\t\t\t,@userId\r\n\t\t\tFROM Billing.vwAccountBillings AS B\r\n\t\t\tWHERE B.GroupID = @groupId AND B.BillingPeriod = @billingPeriod AND B.IsLockedForEdit='N'\r\n\t\t\t\tAND B.BillingID NOT IN (SELECT DISTINCT BillingID FROM Invoice.InvoiceAccountBilling WHERE GroupID = @groupId);\r\n\r\n\t\t\t-- Update number of billing days in prior FY if there is a difference in FY between from and to dates\r\n\t\t\tUPDATE BILL\r\n\t\t\tSET BILL.BillingPeriodDaysPriorFY = BILL.BillingPeriodDays - DATEDIFF(d, CONVERT(DATETIME, CONVERT(VARCHAR(4), YEAR(ToDate)) + '0630', 112), ToDate)\r\n\t\t\t\t,BILL.BillingPeriodDaysCurrentFY = DATEDIFF(d, CONVERT(DATETIME, CONVERT(VARCHAR(4), YEAR(ToDate)) + '0630', 112), ToDate)\r\n\t\t\tFROM Invoice.InvoiceAccountBilling AS BILL\r\n\t\t\t\tINNER JOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID\r\n\t\t\tWHERE BILL.SplitFY = 1;\r\n\r\n\t\t\tIF EXISTS (SELECT 1 FROM [Invoice].[InvoiceAccountBilling] BILL JOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID WHERE BILL.SplitFY = 1)\r\n\t\t\tBEGIN\r\n\t\t\t\t-- Update current FY data if there is a difference in FY between from and to dates\r\n\t\t\t\tUPDATE BILL\r\n\t\t\t\tSET BILL.AmountPaidCurrentFY = (BILL.BillingPeriodDaysCurrentFY * BILL.AmountPaid) / BILL.BillingPeriodDays\r\n\t\t\t\t\t,BILL.EnergyUsageCurrentFY = (BILL.BillingPeriodDaysCurrentFY * BILL.EnergyUsage) / BILL.BillingPeriodDays\r\n\t\t\t\t\t,BILL.DemandUsageCurrentFY = (BILL.BillingPeriodDaysCurrentFY * BILL.DemandUsage) / BILL.BillingPeriodDays\r\n\t\t\t\tFROM Invoice.InvoiceAccountBilling AS BILL\r\n\t\t\t\t\tINNER JOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID\r\n\t\t\t\tWHERE BILL.SplitFY = 1;\r\n\r\n\t\t\t\t-- Update current FY data if there is a difference in FY between from and to dates\r\n\t\t\t\tUPDATE BILL\r\n\t\t\t\tSET BILL.AmountPaidPriorFY = BILL.AmountPaid - BILL.AmountPaidCurrentFY\r\n\t\t\t\t\t,BILL.EnergyUsagePriorFY = BILL.EnergyUsage - BILL.EnergyUsageCurrentFY\r\n\t\t\t\t\t,BILL.DemandUsagePriorFY = BILL.DemandUsage - BILL.DemandUsageCurrentFY\r\n\t\t\t\tFROM Invoice.InvoiceAccountBilling AS BILL\r\n\t\t\t\t\tINNER JOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID\r\n\t\t\t\tWHERE BILL.SplitFY = 1;\r\n\t\t\tEND;\r\n\r\n\t\t\t-- Lock the parent records in EC3 (for electronic billing only), to prevent edits\r\n\t\t\tIF (@isElectronicSummaryBilling = 1) AND EXISTS (SELECT 1 FROM @billingTable)\r\n\t\t\tBEGIN\r\n\t\t\t\tUPDATE EB\r\n\t\t\t\tSET EB.InvoiceTrackingSeqid\t= @invoiceId\r\n\t\t\t\t\t,EB.VoucherBillingStatus = 'VC'\r\n\t\t\t\t\t,EB.VoucherBillingStatusPeriod = @billingPeriod\r\n\t\t\t\t\t,EB.IsLockedForEdit = 'Y'\r\n\t\t\t\t\t,EB.LastUpdate = GETDATE()\r\n\t\t\t\t\t,EB.AuthenticatedUserID = @userId\r\n\t\t\t\tFROM Billing.EC3_ManualBill_AccountManualBillingHeader_ElectronicBilling AS EB\r\n\t\t\t\t\tINNER JOIN Invoice.InvoiceAccountBilling AS ACCT ON ACCT.BillingID = EB.AccountManualBillingHeaderSeqid\r\n\t\t\t\t\tINNER JOIN @billingTable AS BILL ON BILL.InvoiceBillingID = ACCT.InvoiceBillingID\r\n\t\t\tEND;\r\n\t\tEND;\r\n\r\n\t\t--added on 11/28/2018 by XL for updating invoiceNum\r\n\t\tIF ISNULL(@summaryAcctNumber, '')<>''\r\n\t\tBEGIN\r\n\t\t\tUPDATE Invoice.Invoice\r\n\t\t\tSET\tInvoiceNumber = @summaryAcctNumber + '_' + RIGHT(InvoiceNumber, 9), ModifiedDate = GETDATE(), ModifiedBy = @userId\r\n\t\t\tWHERE InvoiceID = @invoiceId;\t\t\r\n\r\n\t\t\tSET @invoiceNumAction = ' - Invoice Number Updated';\r\n\t\tEND;\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO [Common].[Note](ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tVALUES ('INVOICE', @invoiceId, 'ADD GROUP', 'Billing group (' + @noteFiller + ') added' + @invoiceNumAction, @userId);\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to add invoice billing group and contract', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.713000",
      "last_altered": "2025-08-25 16:04:01.713000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceGroupContractAdd",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceGroupContractAdd` is designed to add a billing group and contract to an invoice within a Microsoft SQL Server database. It handles the insertion of records into the `Invoice.InvoiceGroupContract` and `Invoice.InvoiceAccountBilling` tables, particularly when dealing with electronic summary billing. The procedure also manages transaction control, error handling, and logging of operations.\n\n#### 2. Complexity Level: High\nThe procedure is complex due to its extensive use of conditional logic, multiple table operations, transaction management, error handling, and logging. It involves several database operations, including inserts, updates, and conditional checks, which contribute to its high complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT`: The identifier for the invoice to which the group and contract will be added.\n- `@fiscalYear AS VARCHAR(4)`: The fiscal year associated with the contract.\n- `@groupId AS INT`: The identifier for the billing group.\n- `@contractId AS INT`: The identifier for the contract.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional correlation ID for logging purposes.\n- `@machineName AS VARCHAR(128) = NULL`: Optional machine name for logging.\n- `@processName AS VARCHAR(128) = NULL`: Optional process name for logging.\n- `@domain AS VARCHAR(25) = NULL`: Optional domain for logging.\n- `@username AS VARCHAR(25) = NULL`: Optional username for logging.\n- `@userId AS INT = NULL`: Optional user ID for tracking who performed the operation.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Defaults**: The procedure initializes parameters, setting defaults for optional inputs and ensuring non-zero or non-empty values for critical parameters.\n2. **Data Retrieval**: It retrieves existing billing group contract IDs and constructs a note filler string for logging purposes.\n3. **Electronic Billing Check**: Determines if the billing group is electronic and sets a flag accordingly.\n4. **Transaction Management**: Begins a transaction to ensure atomicity of operations.\n5. **Insert Operations**:\n   - Inserts a new record into `Invoice.InvoiceGroupContract`.\n   - If electronic summary billing is applicable, inserts records into `Invoice.InvoiceAccountBilling` with detailed calculations for fiscal year splits.\n6. **Updates**:\n   - Updates billing days and usage metrics for split fiscal years.\n   - Locks parent records in the electronic billing system to prevent edits.\n   - Updates invoice numbers if a summary account number is present.\n7. **Audit Logging**: Inserts a note into the `Common.Note` table to log the addition of the billing group.\n8. **Error Handling**: Uses a `TRY...CATCH` block to handle errors, rolling back the transaction if necessary and capturing error details.\n9. **Logging**: Calls a logging procedure to record the operation's outcome, including any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Scope**: The procedure uses explicit transactions, which can lock resources and impact performance if held open for extended periods.\n- **Conditional Logic**: The extensive use of conditional logic and multiple queries can increase execution time, especially with large datasets.\n- **Concurrency**: The procedure may face concurrency issues due to locks on tables during transaction execution, potentially affecting other operations.\n- **Index Usage**: Performance can be improved by ensuring that the queried columns are indexed, particularly those involved in `WHERE` clauses and joins.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: While errors are caught and logged, the procedure does not attempt to retry or handle specific error types, which could lead to incomplete operations.\n- **Data Integrity**: If the transaction fails and rolls back, related operations might be left incomplete, requiring manual intervention.\n- **Scalability**: The complexity and number of operations may not scale well with increased data volume or concurrent usage.\n- **Hardcoded Values**: The procedure uses hardcoded values for certain operations (e.g., fiscal year end date), which may need updates if business rules change.\n- **Security**: The procedure assumes that input parameters are sanitized and does not include explicit checks for SQL injection or other security vulnerabilities.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3873,
      "api_response_id": "chatcmpl-C8awwRR1DKh0JLdRM8iJOtikY1SxT"
    },
    "analysis_timestamp": "2025-08-25 19:32:14"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceGroupContractDelete",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceGroupContractDelete]\r\n(\r\n\t@invoiceGroupId AS INT\r\n\t,@comments AS VARCHAR(500) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25), @severity AS VARCHAR(25), @message AS VARCHAR(255), @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME, @elapsedTime AS INT, @sendEmail AS BIT,  @invoiceId AS INT, @noteFiller AS VARCHAR(500)\r\n\t\t,@groupId AS INT, @isElectronicSummaryBilling AS BIT = 0, @summaryAcctNumber AS VARCHAR(15), @invoiceNumAction AS VARCHAR(30) = ''\r\n\t\t,@invoiceIsSplitFY AS BIT, @fiscalYear AS INT, @currentFY AS INT, @anotherFYInvoiceGroupId AS INT, @billingGroupContractID AS INT\r\n\t\t,@tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tSELECT @invoiceGroupId = NULLIF(@invoiceGroupId, 0), @comments = ISNULL(NULLIF(@comments, ''), 'Deleted invoice group');\r\n\r\n\tSELECT @startTime = GETDATE(), @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA')\r\n\t\t,@action = 'DELETE', @severity = 'INFO', @message = 'Deleted invoice group and contract'\r\n\t\t,@messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceGroupId AS GRPID, @comments AS CMT FOR XML PATH('INPUTS')))\r\n\t\t,@sendEmail = 0, @userId = ISNULL(@userId, 0);\r\n\r\n\tSELECT @invoiceId = InvoiceID\r\n\t\t,@groupId = GroupID\r\n\t\t,@fiscalYear = CAST(FiscalYear AS INT)\r\n\t\t,@billingGroupContractID = BillingGroupContractID\r\n\tFROM Invoice.vwInvoiceGroupContracts\r\n\tWHERE InvoiceGroupContractID = @invoiceGroupId;\r\n\r\n\tSELECT @invoiceIsSplitFY = Billing.UDF_IsSplitFYInvoice(InvoiceID)\r\n\t\t,@currentFY = Billing.UDF_GetFiscalYear(CreatedDate)\r\n\tFROM Invoice.Invoice\r\n\tWHERE InvoiceID = @invoiceId;\r\n\r\n\tIF EXISTS (SELECT 1 FROM Billing.vwBillingGroups WHERE GroupID = @groupId AND BillingType = 'E')\r\n\tBEGIN\r\n\t\tSET @isElectronicSummaryBilling = 1;\r\n\tEND;\r\n\r\n\tSELECT @summaryAcctNumber = SummaryAccountNumber\r\n\tFROM Billing.vwBillingGroups\r\n\tWHERE GroupID = @groupId;\r\n\r\n\tSELECT @noteFiller = (GroupName + ',' + FiscalYear + ',' + ContractNumber)\r\n\tFROM Invoice.vwInvoiceGroupContracts\r\n\tWHERE InvoiceGroupContractID = @invoiceGroupId;\r\n\r\n\tSET @noteFiller = ISNULL(@noteFiller, CONVERT(VARCHAR(10), @invoiceGroupId));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\t-- Delete contract line allocations associated with the group\r\n\t\t\tDELETE ICLA\r\n\t\t\tFROM Invoice.InvoiceContractLineAllocation AS ICLA\r\n\t\t\t\tINNER JOIN Invoice.InvoiceContractLine AS ICL ON ICL.InvoiceContractLineID = ICLA.InvoiceContractLineID\r\n\t\t\t\tINNER JOIN Billing.ContractLine AS CL ON CL.ContractLineID = ICL.ContractLineID\r\n\t\t\t\tINNER JOIN Billing.vwBillingGroupContracts AS BGC ON BGC.ContractID = CL.ContractID AND BGC.FiscalYear = CL.FiscalYear\r\n\t\t\t\tINNER JOIN Invoice.InvoiceGroupContract AS IGC ON IGC.BillingGroupContractID = BGC.BillingGroupContractID\r\n\t\t\tWHERE IGC.InvoiceGroupContractID = @invoiceGroupId\r\n\t\t\t\tAND ICL.InvoiceID = IGC.InvoiceID;\r\n\r\n\t\t\t-- Delete contract lines associated with the group\r\n\t\t\tDELETE ICL\r\n\t\t\tFROM Invoice.InvoiceContractLine AS ICL\r\n\t\t\t\tINNER JOIN Billing.ContractLine AS CL ON CL.ContractLineID = ICL.ContractLineID\r\n\t\t\t\tINNER JOIN Billing.vwBillingGroupContracts AS BGC ON BGC.ContractID = CL.ContractID AND BGC.FiscalYear = CL.FiscalYear\r\n\t\t\t\tINNER JOIN Invoice.InvoiceGroupContract AS IGC ON IGC.BillingGroupContractID = BGC.BillingGroupContractID\r\n\t\t\tWHERE IGC.InvoiceGroupContractID = @invoiceGroupId\r\n\t\t\t\tAND ICL.InvoiceID = IGC.InvoiceID;\r\n\r\n\t\t\t-- Unlock associated bills in EC3 (for electronic billing only)\r\n\t\t\tIF (@isElectronicSummaryBilling = 1)\r\n\t\t\tBEGIN\r\n\t\t\t\tUPDATE EB\r\n\t\t\t\tSET EB.InvoiceTrackingSeqid = NULL\r\n\t\t\t\t\t,EB.VoucherBillingStatus = NULL\r\n\t\t\t\t\t,EB.VoucherBillingStatusPeriod = NULL\r\n\t\t\t\t\t,EB.IsLockedForEdit = 'N'\r\n\t\t\t\t\t,EB.LastUpdate = GETDATE()\r\n\t\t\t\t\t,EB.AuthenticatedUserID = @userId\r\n\t\t\t\tFROM Billing.EC3_ManualBill_AccountManualBillingHeader_ElectronicBilling AS EB\r\n\t\t\t\t\tINNER JOIN Invoice.InvoiceAccountBilling AS ACCT ON ACCT.BillingID = EB.AccountManualBillingHeaderSeqid\r\n\t\t\t\tWHERE ACCT.InvoiceGroupContractID = @invoiceGroupId\r\n\t\t\t\t\tAND ACCT.BillingID NOT IN (SELECT DISTINCT BillingID FROM Invoice.InvoiceAccountBilling WHERE InvoiceID <> @invoiceId);\r\n\t\t\tEND;\r\n\r\n\t\t\t-- Delete accounts associated with the group\r\n\t\t\tDELETE FROM Invoice.InvoiceAccountBilling WHERE InvoiceGroupContractID = @invoiceGroupId;\r\n\t\tEND;\r\n\t\tELSE --@fiscalYear = @priorFY\r\n\t\tBEGIN\r\n\t\t\tSELECT @anotherFYInvoiceGroupId = InvoiceGroupContractID\r\n\t\t\tFROM Invoice.vwInvoiceGroupContracts\r\n\t\t\tWHERE InvoiceID = @invoiceId AND groupid = @groupId AND InvoiceGroupContractID <> @invoiceGroupId;\r\n\r\n\t\t\t-- Delete contract line allocations associated with the group\r\n\t\t\tDELETE ICLA\r\n\t\t\tFROM Invoice.InvoiceContractLineAllocation AS ICLA\r\n\t\t\t\tINNER JOIN Invoice.InvoiceContractLine AS ICL ON ICL.InvoiceContractLineID = ICLA.InvoiceContractLineID\r\n\t\t\tWHERE ICL.InvoiceID = @invoiceId\r\n\t\t\t\tAND ICL.ContractID IN (SELECT ContractID\r\n\t\t\t\t\tFROM  Billing.vwBillingGroupContracts\r\n\t\t\t\t\tWHERE GroupID = @groupId AND FiscalYear IN (CAST(@currentFY AS VARCHAR(4)), CAST(@currentFY-1 AS VARCHAR(4))));\r\n\r\n\t\t\t-- Delete contract lines associated with the group\r\n\t\t\tDELETE ICL\r\n\t\t\tFROM Invoice.InvoiceContractLine AS ICL\r\n\t\t\tWHERE ICL.InvoiceID = @invoiceId\r\n\t\t\t\tAND ICL.ContractID IN (SELECT ContractID\r\n\t\t\t\t\tFROM  Billing.vwBillingGroupContracts\r\n\t\t\t\t\tWHERE GroupID = @groupId AND FiscalYear IN (CAST(@currentFY AS VARCHAR(4)), CAST(@currentFY-1 AS VARCHAR(4))));\r\n\r\n\t\t\t-- Unlock associated bills in EC3 (for electronic billing only)\r\n\t\t\tIF (@isElectronicSummaryBilling = 1)\r\n\t\t\tBEGIN\r\n\t\t\t\tUPDATE EB\r\n\t\t\t\tSET EB.InvoiceTrackingSeqid = NULL\r\n\t\t\t\t\t,EB.VoucherBillingStatus = NULL\r\n\t\t\t\t\t,EB.VoucherBillingStatusPeriod = NULL\r\n\t\t\t\t\t,EB.IsLockedForEdit = 'N'\r\n\t\t\t\t\t,EB.LastUpdate = GETDATE()\r\n\t\t\t\t\t,EB.AuthenticatedUserID = @userId\r\n\t\t\t\tFROM Billing.EC3_ManualBill_AccountManualBillingHeader_ElectronicBilling AS EB\r\n\t\t\t\t\tINNER JOIN Invoice.InvoiceAccountBilling AS ACCT ON ACCT.BillingID = EB.AccountManualBillingHeaderSeqid\r\n\t\t\t\tWHERE ACCT.InvoiceGroupContractID IN (@invoiceGroupId, @anotherFYInvoiceGroupId)\r\n\t\t\t\t\tAND ACCT.BillingID NOT IN (SELECT DISTINCT BillingID FROM Invoice.InvoiceAccountBilling WHERE InvoiceID <> @invoiceId);\r\n\t\t\tEND;\r\n\r\n\t\t\t-- Delete accounts associated with the groups\r\n\t\t\tIF (@fiscalYear = @currentFY)\r\n\t\t\tBEGIN\r\n\t\t\t\tDELETE FROM Invoice.InvoiceAccountBilling\r\n\t\t\t\tWHERE InvoiceID = @invoiceId AND GroupID = @groupId\r\n\t\t\t\t\tAND InvoiceGroupContractID IN (@invoiceGroupId, @anotherFYInvoiceGroupId)\r\n\t\t\t\t\tAND (FromDate < CAST(CAST(@fiscalYear-1 AS VARCHAR(4)) + '-06-30' AS DATETIME)\r\n\t\t\t\t\t\tAND ToDate > CAST(CAST(@fiscalYear-1 AS VARCHAR(4)) + '-06-30' AS DATETIME)\r\n\t\t\t\t\t\tOR FromDate> = CAST(CAST(@fiscalYear-1 AS VARCHAR(4)) + '-06-30' AS DATETIME));\r\n\t\t\tEND;\r\n\t\t\tELSE IF (@fiscalYear = @currentFY-1)\r\n\t\t\tBEGIN\r\n\t\t\t\tDELETE FROM Invoice.InvoiceAccountBilling\r\n\t\t\t\tWHERE InvoiceID = @invoiceId AND GroupID = @groupId\r\n\t\t\t\t\tAND InvoiceGroupContractID IN (@invoiceGroupId, @anotherFYInvoiceGroupId)\r\n\t\t\t\t\tAND (FromDate<CAST(CAST(@fiscalYear AS VARCHAR(4)) + '-06-30' AS DATETIME)\r\n\t\t\t\t\t\tAND ToDate>CAST(CAST(@fiscalYear AS VARCHAR(4)) + '-06-30' AS DATETIME)\r\n\t\t\t\t\t\tOR FromDate<CAST(CAST(@fiscalYear AS VARCHAR(4)) + '-06-30' AS DATETIME));\r\n\t\t\tEND;\r\n\t\tEND;\r\n\r\n\t\t-- Delete the group\r\n\t\tDELETE FROM Invoice.InvoiceGroupContract WHERE InvoiceGroupContractID = @invoiceGroupId;\r\n\r\n\t\tIF (ISNULL(@summaryAcctNumber, '') <> ''\r\n\t\t\tAND (NOT EXISTS(SELECT 1 \r\n\t\t\t\tFROM Invoice.InvoiceGroupContract AS a\r\n\t\t\t\t\tINNER JOIN Billing.BillingGroupContract AS b ON a.BillingGroupContractID = b.BillingGroupContractID\r\n\t\t\t\t\tINNER JOIN Billing.vwBillingGroups AS c ON b.GroupID = c.GroupID\r\n\t\t\t\tWHERE a.InvoiceID = @invoiceId AND ISNULL(c.SummaryAccountNumber, '') <> '')))\r\n\t\tBEGIN\r\n\t\t\tUPDATE Invoice.Invoice\r\n\t\t\tSET\tInvoiceNumber = 'DEM_' + RIGHT(InvoiceNumber, 9)\r\n\t\t\t\t,ModifiedDate = GETDATE()\r\n\t\t\t\t,ModifiedBy = @userId\r\n\t\t\tWHERE InvoiceID = @invoiceId;\t\t\r\n\r\n\t\t\tSET @invoiceNumAction = ' - Invoice Number Updated';\r\n\t\tEND;\r\n\r\n\t\t-- Create filler note\r\n\t\tINSERT INTO Common.Note(ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tVALUES ('INVOICE', @invoiceId, 'REMOVE GROUP', 'Billing group (' + @noteFiller + ') removed' + @invoiceNumAction, @userId);\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO Common.Note(ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tVALUES ('INVOICE', @invoiceId, 'REMOVE GROUP', @comments, @userId);\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to delete invoice group and contract', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.727000",
      "last_altered": "2025-08-25 16:04:01.727000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceGroupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@comments",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 500,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceGroupContractDelete",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceGroupContractDelete` is designed to delete an invoice group contract from a Microsoft SQL Server database. It handles the deletion of related contract line allocations, contract lines, and associated billing accounts. The procedure also manages electronic billing records if applicable and logs the operation's details for auditing purposes. It includes error handling to ensure that any issues during the transaction are captured and logged.\n\n#### 2. Complexity Level: High\nThe procedure involves multiple complex operations, including conditional logic, transactions, error handling, and logging. It interacts with several tables and views, performs conditional updates, and manages electronic billing records, making it a high-complexity procedure.\n\n#### 3. Input Parameters\n- `@invoiceGroupId AS INT`: The ID of the invoice group contract to be deleted.\n- `@comments AS VARCHAR(500) = NULL`: Optional comments about the deletion.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional correlation ID for logging purposes.\n- `@machineName AS VARCHAR(128) = NULL`: Optional machine name for logging.\n- `@processName AS VARCHAR(128) = NULL`: Optional process name for logging.\n- `@domain AS VARCHAR(25) = NULL`: Optional domain for logging.\n- `@username AS VARCHAR(25) = NULL`: Optional username for logging.\n- `@userId AS INT = NULL`: Optional user ID for logging and record updates.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter to capture exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for parameters and initializes local variables.\n2. **Data Retrieval**: Fetches details about the invoice group contract, including invoice ID, group ID, fiscal year, and billing group contract ID.\n3. **Fiscal Year Check**: Determines if the invoice is split across fiscal years and retrieves the current fiscal year.\n4. **Electronic Billing Check**: Checks if the billing type is electronic and sets a flag accordingly.\n5. **Transaction Management**: Begins a transaction to ensure atomicity.\n6. **Deletion Logic**:\n   - If the invoice is not split across fiscal years, deletes contract line allocations, contract lines, and associated billing accounts.\n   - If the invoice is split, handles deletions across fiscal years and updates electronic billing records if applicable.\n7. **Invoice Number Update**: Updates the invoice number if certain conditions are met.\n8. **Logging**: Inserts notes for the deletion action and logs the operation details.\n9. **Error Handling**: Catches exceptions, rolls back the transaction if necessary, and logs error details.\n\n#### 5. Performance Considerations\n- **Index Usage**: Ensure that the tables involved have appropriate indexes to optimize the DELETE operations and SELECT queries.\n- **Transaction Scope**: The transaction scope is large, which could lead to locking issues. Consider breaking down the transaction if possible.\n- **Concurrency**: The procedure may impact performance in a high-concurrency environment due to potential locks on the tables involved.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: Deleting records without proper checks could lead to orphaned records or data inconsistency.\n- **Error Handling**: While errors are caught and logged, the procedure does not attempt to retry or handle specific error types, which could lead to incomplete operations.\n- **Concurrency and Locking**: The extensive use of transactions and DELETE operations could lead to locking issues, affecting other operations on the database.\n- **Scalability**: As the database grows, the performance of this procedure may degrade if not optimized with proper indexing and query tuning.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3628,
      "api_response_id": "chatcmpl-C8axbLLoBCdATcXXUj6vpQKAELzL3"
    },
    "analysis_timestamp": "2025-08-25 19:32:36"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceGroupContractRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceGroupContractRetrieve]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @userId = ISNULL(@userId, 0), @correlationId\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\t\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Invoice - Retrieved invoice groups / contracts'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID FOR XML PATH('INPUTS')));\r\n\t\r\n\tBEGIN TRY\r\n\t\tSELECT IGC.InvoiceGroupContractID\r\n\t\t\t,IGC.InvoiceID\r\n\t\t\t,IGC.GroupID\r\n\t\t\t,IGC.GroupName\r\n\t\t\t,IGC.IsSummaryBilling\r\n\t\t\t,IGC.BillingType\r\n\t\t\t,IGC.AmountBilled\r\n\t\t\t,IGC.AmountPaid\r\n\t\t\t,IGC.FiscalYear\r\n\t\t\t,IGC.ContractNumber\r\n\t\t\t,IGC.ActualAmount\r\n\t\t\t,IGC.CloseAmount\r\n\t\t\t,IGC.OpenAmount\r\n\t\t\t,IGC.AvailableAmount\r\n\t\t\t,IGC.CreatedDate\r\n\t\t\t,IGC.CreatedBy\r\n\t\t\t,IGC.ModifiedDate\r\n\t\t\t,IGC.ModifiedBy\r\n\t\t\t,B.SummaryAccountNumber\r\n\t\t\t,B.GroupDescription\r\n\t\t\t,P.ProviderName\r\n\t\tFROM Invoice.vwInvoiceGroupContracts AS IGC\r\n\t\t\tINNER JOIN Billing.vwBillingGroups AS B ON IGC.GroupID = B.GroupID\r\n\t\t\tINNER JOIN Billing.vwProviders AS P ON B.ProviderID = P.ProviderID\r\n\t\tWHERE IGC.InvoiceID\t= ISNULL(@invoiceId, IGC.InvoiceID);\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message\t= 'Invoice - Failed to retrieve invoice groups / contracts', @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.733000",
      "last_altered": "2025-08-25 16:04:01.733000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceGroupContractRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceGroupContractRetrieve` is designed to retrieve invoice group and contract details from a SQL Server database. It takes several input parameters, some of which are optional, and returns a set of records from the `vwInvoiceGroupContracts` view, joined with related data from `vwBillingGroups` and `vwProviders`. The procedure also logs the operation details, including any exceptions, using another stored procedure `USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves multiple input parameters with default values and conditional logic.\n- It includes error handling using `TRY...CATCH` blocks.\n- It performs logging operations, which adds to the complexity.\n- It involves multiple table joins and dynamic parameter handling.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: The ID of the invoice to retrieve. If not provided, all invoices are considered.\n- `@correlationId AS VARCHAR(128) = NULL`: A unique identifier for the operation, used for logging and tracking.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, used for logging.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, used for logging.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure, used for logging.\n- `@username AS VARCHAR(25) = NULL`: The username of the person executing the procedure, used for logging.\n- `@userId AS INT = NULL`: The ID of the user executing the procedure, used for logging.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception details that occur during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: The procedure begins by setting `NOCOUNT ON` to prevent the sending of row count messages.\n2. **Parameter Handling**: It initializes or modifies input parameters using functions like `NULLIF`, `ISNULL`, and `COALESCE` to handle default values and ensure valid data.\n3. **Logging Setup**: It prepares variables for logging, including action type, severity, message, and message details.\n4. **Data Retrieval**: Within a `TRY` block, it executes a `SELECT` statement to retrieve data from `vwInvoiceGroupContracts`, joining with `vwBillingGroups` and `vwProviders` based on `GroupID` and `ProviderID`.\n5. **Error Handling**: If an error occurs, the `CATCH` block captures the error message and sets logging variables accordingly.\n6. **Logging Execution**: It calculates the elapsed time for the operation and calls `USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that the columns used in joins and the `WHERE` clause, such as `GroupID`, `ProviderID`, and `InvoiceID`, are indexed to improve query performance.\n- **Parameter Sniffing**: The use of `ISNULL` and `COALESCE` can help mitigate parameter sniffing issues by ensuring default values are set.\n- **Logging Overhead**: Frequent logging can introduce performance overhead, especially if the logging table grows large. Consider archiving or purging old log entries.\n\n#### 6. Potential Issues or Risks\n- **Null Handling**: The use of `NULLIF` and `ISNULL` may lead to unexpected results if not carefully managed, especially if `@invoiceId` is zero or null.\n- **Error Handling**: The `CATCH` block only captures the error message, which may not provide enough context for debugging. Consider capturing additional error details like `ERROR_NUMBER` and `ERROR_LINE`.\n- **Concurrency**: If multiple users execute this procedure simultaneously, ensure that logging and data retrieval do not lead to contention or locking issues.\n- **Security**: Ensure that users executing this procedure have appropriate permissions to access the views and execute the logging procedure to prevent unauthorized data access.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1856,
      "api_response_id": "chatcmpl-C8axx7NwnGEWDtlCtkELva4Fb88TM"
    },
    "analysis_timestamp": "2025-08-25 19:32:50"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceRetrieve]\r\n\t@invoiceId\t\t\t\tINT = NULL\r\n\t,@providerId\t\t\tINT = NULL\r\n\t,@billingPeriod\t\tVARCHAR(6) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @invoiceId\t\t\t= NULLIF(@invoiceId, 0);\r\n\tSET @providerId\t\t\t= NULLIF(@providerId, 0);\r\n\tSET @billingPeriod\t\t= NULLIF(@billingPeriod, '');\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'RETRIEVE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Retrieved invoices';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @providerId AS PRVID, @billingPeriod AS BILLPRD FOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT INV.InvoiceID, INV.InvoiceNumber, INV.AmountBilled, INV.AmountPaid, INV.InvoiceBillingPeriod, INV.StatusID\r\n\t\t\t, INV.ProviderID, INV.ProviderName, INV.InvoiceGroupCount\r\n\t\t\t, INV.InvoiceDate, INV.CreatedDate, INV.CreatedBy, INV.ModifiedDate, INV.ModifiedBy\r\n\t\t\t, INV.Active\r\n\t\tFROM [Invoice].[vwInvoices] INV\r\n\t\tWHERE InvoiceID\t\t\t\t\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\tAND ProviderID\t\t\t\t= ISNULL(@providerId, ProviderID)\r\n\t\t\tAND InvoiceBillingPeriod\t= ISNULL(@billingPeriod, InvoiceBillingPeriod)\r\n\t\tORDER BY CreatedDate DESC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to retrieve invoices';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.737000",
      "last_altered": "2025-08-25 16:04:01.737000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingPeriod",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 6,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceRetrieve` is designed to retrieve invoice data from a view named `[Invoice].[vwInvoices]` based on optional filtering criteria such as `invoiceId`, `providerId`, and `billingPeriod`. It logs the operation details, including any exceptions, using another stored procedure `dbo.USP_AppLogCreate`. The procedure also handles error logging and can trigger an email notification if an error occurs.\n\n#### 2. Complexity Level: Medium\nThe complexity is considered medium due to the following factors:\n- It includes error handling with a `TRY...CATCH` block.\n- It involves dynamic logging and error reporting.\n- It uses conditional logic to handle optional parameters and default values.\n- It interacts with another stored procedure for logging purposes.\n\n#### 3. Input Parameters\n- `@invoiceId INT = NULL`: Optional; filters results by a specific invoice ID.\n- `@providerId INT = NULL`: Optional; filters results by a specific provider ID.\n- `@billingPeriod VARCHAR(6) = NULL`: Optional; filters results by a specific billing period.\n- `@correlationId VARCHAR(128) = NULL`: Optional; used for tracking and logging purposes.\n- `@machineName VARCHAR(128) = NULL`: Optional; identifies the machine executing the procedure.\n- `@processName VARCHAR(128) = NULL`: Optional; identifies the process executing the procedure.\n- `@domain VARCHAR(25) = NULL`: Optional; used for logging purposes.\n- `@username VARCHAR(25) = NULL`: Optional; used for logging purposes.\n- `@userId INT = NULL`: Optional; identifies the user executing the procedure.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: Output; captures exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Parameter Initialization**: Converts zero or empty string inputs to `NULL` for filtering purposes.\n2. **Logging Setup**: Initializes logging parameters such as `@correlationId`, `@machineName`, and `@processName`.\n3. **Data Retrieval**: Executes a `SELECT` query on `[Invoice].[vwInvoices]` with optional filters based on the input parameters.\n4. **Error Handling**: Uses a `TRY...CATCH` block to handle exceptions. If an error occurs, it captures the error message in `@exceptionDetails` and sets the severity to 'ERROR'.\n5. **Logging Execution**: Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions and the time taken for execution.\n\n#### 5. Performance Considerations\n- **Index Usage**: Ensure that the columns used in the `WHERE` clause (`InvoiceID`, `ProviderID`, `InvoiceBillingPeriod`) are indexed to optimize query performance.\n- **Logging Overhead**: The logging mechanism, especially if it involves writing to a database or sending emails, can introduce additional overhead.\n- **Parameter Sniffing**: The use of optional parameters with `ISNULL` can lead to suboptimal query plans if not handled properly.\n\n#### 6. Potential Issues or Risks\n- **NULL Handling**: The conversion of zero or empty strings to `NULL` might lead to unintended results if not properly documented or understood by users.\n- **Error Logging**: If `dbo.USP_AppLogCreate` fails, it could lead to unlogged errors, making troubleshooting difficult.\n- **Concurrency**: High concurrency might lead to performance bottlenecks, especially if the logging procedure involves significant I/O operations.\n- **Security**: Ensure that user inputs are sanitized to prevent SQL injection, especially if the procedure is exposed to external inputs.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1738,
      "api_response_id": "chatcmpl-C8ayBvQeGrlLR34f9OUSCOJeIhYCM"
    },
    "analysis_timestamp": "2025-08-25 19:33:05"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceStatusRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceStatusRetrieve]\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT StatusID\r\n\t\t,StatusDescription\r\n\tFROM Invoice.vwInvoiceStatuses\r\n\tORDER BY StatusID ASC;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.740000",
      "last_altered": "2025-08-25 16:04:01.740000",
      "type": "PROCEDURE"
    },
    "parameters": [],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceStatusRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceStatusRetrieve` is designed to retrieve a list of invoice statuses from a view named `vwInvoiceStatuses` within the `Invoice` schema. It selects two columns: `StatusID` and `StatusDescription`, and orders the results by `StatusID` in ascending order. The procedure is set to operate under the `READ UNCOMMITTED` transaction isolation level, which allows it to read uncommitted changes from other transactions, potentially improving performance by reducing locking overhead.\n\n#### 2. Complexity Level: Low\nThe procedure is straightforward, involving a simple `SELECT` statement from a view with no input parameters, conditional logic, or complex operations. It is primarily a data retrieval operation with minimal complexity.\n\n#### 3. Input Parameters\nThis stored procedure does not accept any input parameters. It is designed to return all records from the `vwInvoiceStatuses` view without filtering or modifying the data based on external input.\n\n#### 4. Business Logic and Workflow\n- **SET NOCOUNT ON**: This command prevents the message indicating the number of rows affected by a SQL statement from being returned. This can reduce network traffic and improve performance when the number of affected rows is not needed.\n- **SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED**: This setting allows the procedure to read data that has been modified but not yet committed by other transactions. It can lead to reading \"dirty\" data but reduces locking and blocking, which can be beneficial in high-concurrency environments.\n- **SELECT Statement**: The procedure retrieves `StatusID` and `StatusDescription` from the `vwInvoiceStatuses` view and orders the results by `StatusID` in ascending order. This provides a sorted list of invoice statuses for further processing or display.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED Isolation Level**: This can improve performance by reducing locking overhead, especially in environments with high transaction volumes. However, it may lead to reading uncommitted or \"dirty\" data.\n- **Indexing**: The performance of the `SELECT` statement can be influenced by the presence of indexes on the `StatusID` column in the underlying tables of the `vwInvoiceStatuses` view. Proper indexing can enhance the speed of data retrieval and sorting.\n- **Network Traffic**: Using `SET NOCOUNT ON` reduces unnecessary network traffic by suppressing row count messages.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The use of `READ UNCOMMITTED` can result in dirty reads, where the data retrieved might not be consistent or might reflect uncommitted changes. This can be problematic if the data is used for critical decision-making processes.\n- **Lack of Input Parameters**: The procedure retrieves all records from the view without filtering, which might not be efficient if the view contains a large number of records and only a subset is needed.\n- **Dependency on View**: Any changes to the `vwInvoiceStatuses` view, such as schema changes or performance issues, can directly impact the behavior and performance of this stored procedure.",
      "complexity": "Low",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 908,
      "api_response_id": "chatcmpl-C8ayQNAZov3eIwAczsHoh2g42AC7w"
    },
    "analysis_timestamp": "2025-08-25 19:33:14"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceUpdate",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceUpdate]\r\n\t@invoiceId\t\t\t\tINT\r\n\t,@statusId\t\t\t\tINT\r\n\t,@comments\t\t\t\tVARCHAR(500) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @invoiceId\t\t\t= NULLIF(@invoiceId, 0);\r\n\tSET @statusId\t\t\t= NULLIF(@statusId, 0);\r\n\tSET @comments\t\t\t= NULLIF(@comments, '');\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT, @oldStatusId INT;\r\n\tSET @startTime\t\t\t= GETDATE();\t\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'UPDATE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Updated invoice';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS PRVID, @statusId AS PRD, @comments AS CMT FOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tDECLARE @tranName VARCHAR(128);\r\n\tSET @tranName = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tDECLARE @actionType VARCHAR(25);\r\n\tSET @actionType = CASE\r\n\t\t\t\t\t\t\tWHEN @statusId = 2 THEN 'SUBMITTED'\r\n\t\t\t\t\t\t\tWHEN @statusId = 3 THEN 'RETURNED'\r\n\t\t\t\t\t\t\tWHEN @statusId = 4 THEN 'APPROVED'\r\n\t\t\t\t\t\t\tWHEN @statusId = 5 THEN 'SENT to A&A'\r\n\t\t\t\t\t\t\tELSE 'UPDATED'\r\n\t\t\t\t\t\tEND;\r\n\r\n\tIF ISNULL(@comments, '') = ''\r\n\t\tSET @comments = CASE\r\n\t\t\t\t\t\t\tWHEN @actionType = 'SUBMITTED' THEN 'Invoice submitted for approval'\r\n\t\t\t\t\t\t\tWHEN @actionType = 'RETURNED' THEN 'Invoice returned for corrections'\r\n\t\t\t\t\t\t\tWHEN @actionType = 'APPROVED' THEN 'Invoice approved, sent for A&A review'\r\n\t\t\t\t\t\t\tELSE 'Invoice updated'\r\n\t\t\t\t\t\tEND;\r\n\t\r\n\tSELECT @oldStatusId = StatusID\r\n\tFROM invoice.Invoice\r\n\tWHERE InvoiceID=@invoiceId;\r\n\r\n\tBEGIN TRY\t\t\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Update invoice header\r\n\t\tUPDATE [Invoice].[Invoice]\r\n\t\tSET StatusID\t\t= @statusId\r\n\t\t\t, InvoiceDate\t= CASE WHEN @actionType = 'APPROVED' THEN GETDATE() ELSE InvoiceDate END\r\n\t\t\t, ModifiedDate\t= GETDATE()\r\n\t\t\t, ModifiedBy\t= @userId\r\n\t\tWHERE InvoiceID = @invoiceId;\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\t\tVALUES ('INVOICE', @invoiceId, @actionType, @comments, @userId);\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\r\n\t\t-- Update close amount of contract and contract lines, added on 4/11/18\r\n\t\tIF (@statusId=3 AND @oldStatusId=4) OR @statusId=4\r\n\t\tBEGIN\r\n\t\t\tUPDATE [Billing].ContractLine\r\n\t\t\tSET\tCloseAmount = [Billing].[UDF_GetContractLineAmountPaid](a.ContractLineID, GETDATE())\r\n\t\t\t\t, OpenAmount = a.ActualAmount - [Billing].[UDF_GetContractLineAmountPaid](a.ContractLineID, GETDATE())\r\n\t\t\t\t, ModifiedDate = GETDATE()\r\n\t\t\t\t, ModifiedBy = @userId\r\n\t\t\tFROM Billing.ContractLine a\r\n\t\t\tWHERE a.ContractLineID IN \r\n\t\t\t\t(\r\n\t\t\t\t\tSELECT DISTINCT ContractLineID\r\n\t\t\t\t\tFROM invoice.InvoiceContractLine\r\n\t\t\t\t\tWHERE invoiceid = @invoiceId\r\n\t\t\t\t);\r\n\r\n\t\t\tUPDATE [Billing].Contract\r\n\t\t\tSET\tCloseAmount = ISNULL(b.CloseAmount, 0)\r\n\t\t\t\t,OpenAmount = ISNULL(b.OpenAmount, 0)\r\n\t\t\t\t,ModifiedDate = GETDATE()\r\n\t\t\t\t,ModifiedBy = @userId\r\n\t\t\tFROM [Billing].Contract a JOIN\r\n\t\t\t(\r\n\t\t\t\tSELECT ContractID\r\n\t\t\t\t\t, SUM(ISNULL(CloseAmount, 0)) AS CloseAmount\r\n\t\t\t\t\t, SUM(ISNULL(OpenAmount, 0)) AS OpenAmount\r\n\t\t\t\tFROM [Billing].ContractLine\t\t\r\n\t\t\t\tWHERE ContractID IN \r\n\t\t\t\t(\r\n\t\t\t\t\tSELECT DISTINCT contractid\r\n\t\t\t\t\tFROM invoice.InvoiceContractLine\r\n\t\t\t\t\tWHERE invoiceid = @invoiceId\r\n\t\t\t\t)\r\n\t\t\t\tGROUP BY ContractID\r\n\t\t\t) b ON a.ContractID=b.contractid;\r\n\t\t\t\r\n\t\tEND;\r\n\r\n\t\t-- insert payments into history table\r\n\t\tDECLARE @dte DATETIME\r\n        \r\n\t\tIF @actionType = 'APPROVED'\r\n\t\t\tBEGIN\r\n\t\t\t\tSET @dte = getdate();\r\n\t\t\t\tINSERT INTO Billing.HistoricalContractLine\r\n\t\t\t\t(\r\n\t\t\t\t    TransactionType,\r\n\t\t\t\t    ContractLineID,\r\n\t\t\t\t    ActualAmount,\r\n\t\t\t\t    StartDate,\r\n\t\t\t\t    EndDate,\r\n\t\t\t\t    ModifiedBy,\r\n\t\t\t\t    ChangeAmount,\r\n\t\t\t\t    InvoiceId\r\n\t\t\t\t)\r\n\t\t\t\t--values(2,0,0,@dte,null,@username,0,@invoiceId)\r\n\t\t\t\tSELECT 2,\r\n\t\t\t\t\t   c.ContractLineID,\r\n\t\t\t\t\t   0,\r\n\t\t\t\t\t   @dte,\r\n\t\t\t\t\t   NULL,\r\n\t\t\t\t\t   @username,\r\n\t\t\t\t\t   -SUM(c.AmountPaid),\r\n\t\t\t\t\t   @invoiceId\r\n\t\t\t\tFROM Invoice.InvoiceGroupContract a\r\n\t\t\t\t\tJOIN Billing.BillingGroupContract b ON a.BillingGroupContractID = b.BillingGroupContractID\r\n\t\t\t\t\tJOIN Invoice.InvoiceContractLine c ON a.InvoiceID=c.InvoiceID AND b.ContractID = c.ContractID\r\n\t\t\t\tWHERE a.InvoiceID = @invoiceId\r\n\t\t\t\tGROUP BY c.ContractLineID;\r\n\r\n\r\n\t\t\t\tUPDATE Billing.HistoricalContractLine\r\n\t\t\t\tSET EndDate = GETDATE()\r\n\t\t\t\tWHERE StartDate < @dte AND invoiceId = @invoiceId AND EndDate IS NULL AND TransactionType = 2\r\n\t\t\tEND\r\n\r\n\t\tIF (@statusId=3 AND @oldStatusId=4)  --@actionType = 'RETURNED' [changed by Xin on 08/16/2019]\r\n\t\t\tBEGIN\r\n\t\t\t\tINSERT INTO Billing.HistoricalContractLine\r\n\t\t\t\t(\r\n\t\t\t\t    TransactionType,\r\n\t\t\t\t    ContractLineID,\r\n\t\t\t\t    ActualAmount,\r\n\t\t\t\t    StartDate,\r\n\t\t\t\t    EndDate,\r\n\t\t\t\t    ModifiedBy,\r\n\t\t\t\t    ChangeAmount,\r\n\t\t\t\t    InvoiceId\r\n\t\t\t\t)\r\n\t\t\t\tSELECT 3,\r\n\t\t\t\t\t   c.ContractLineID,\r\n\t\t\t\t\t   0,\r\n\t\t\t\t\t   GETDATE(),\r\n\t\t\t\t\t   NULL,\r\n\t\t\t\t\t   @username,\r\n\t\t\t\t\t   SUM(c.AmountPaid),\r\n\t\t\t\t\t   @invoiceId\r\n\t\t\t\tFROM Invoice.InvoiceGroupContract a\r\n\t\t\t\t\tJOIN Billing.BillingGroupContract b ON a.BillingGroupContractID = b.BillingGroupContractID\r\n\t\t\t\t\tJOIN Invoice.InvoiceContractLine c ON a.InvoiceID=c.InvoiceID AND b.ContractID = c.ContractID AND b.FiscalYear=c.FiscalYear\r\n\t\t\t\tWHERE a.InvoiceID = @invoiceId\r\n\t\t\t\tGROUP BY c.ContractLineID;\r\n\t\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF XACT_STATE() <> 0 ROLLBACK TRAN @tranName;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to update invoice';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.750000",
      "last_altered": "2025-08-25 16:04:01.750000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@statusId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@comments",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 500,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceUpdate",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceUpdate` is designed to update the status of an invoice in a Microsoft SQL Server database. It performs several tasks, including updating the invoice status, logging changes, updating related contract and contract line amounts, and handling historical records. It also includes error handling and logging mechanisms to ensure that any issues during execution are captured and reported.\n\n#### 2. Complexity Level: High\nThe procedure is complex due to its multiple responsibilities, including updating records, handling transactions, managing historical data, and logging. It involves conditional logic, error handling, and interaction with multiple tables, which increases its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId INT`: The unique identifier for the invoice to be updated.\n- `@statusId INT`: The new status identifier for the invoice.\n- `@comments VARCHAR(500) = NULL`: Optional comments related to the update.\n- `@correlationId VARCHAR(128) = NULL`: Optional identifier for correlating logs and transactions.\n- `@machineName VARCHAR(128) = NULL`: Optional name of the machine executing the procedure.\n- `@processName VARCHAR(128) = NULL`: Optional name of the process executing the procedure.\n- `@domain VARCHAR(25) = NULL`: Optional domain name for logging purposes.\n- `@username VARCHAR(25) = NULL`: Optional username for logging purposes.\n- `@userId INT = NULL`: Optional user identifier for tracking who made the update.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: Output parameter to capture any exception details during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for parameters and initializes local variables for logging and transaction management.\n2. **Action Type Determination**: Determines the action type based on the `@statusId` and sets default comments if none are provided.\n3. **Retrieve Current Status**: Fetches the current status of the invoice to determine if further actions are needed.\n4. **Transaction Management**: Begins a transaction to ensure atomicity of the update operations.\n   - **Invoice Update**: Updates the invoice status and modifies related fields.\n   - **Audit Note Creation**: Inserts a record into the `Note` table to log the action taken.\n   - **Contract and Contract Line Updates**: Updates the financial details of related contracts and contract lines if certain conditions are met.\n   - **Historical Records Management**: Inserts or updates records in the `HistoricalContractLine` table based on the action type.\n5. **Error Handling**: Catches any errors during execution, rolls back the transaction if necessary, and logs the error details.\n6. **Logging**: Calls a logging procedure to record the action, including any exceptions and performance metrics.\n\n#### 5. Performance Considerations\n- **Transaction Scope**: The procedure uses transactions to ensure data integrity, which can lock resources and impact performance if not managed carefully.\n- **Conditional Logic**: The use of conditional logic to determine actions and comments can add overhead, especially if the logic becomes more complex.\n- **Table Updates**: Multiple updates and inserts into different tables can lead to increased I/O operations, which may affect performance, especially under high load.\n- **Logging**: Extensive logging can be beneficial for tracking but may also introduce performance overhead.\n\n#### 6. Potential Issues or Risks\n- **Concurrency**: The procedure may face concurrency issues if multiple instances attempt to update the same invoice simultaneously.\n- **Error Handling**: While errors are caught and logged, the procedure relies on a single output parameter for exception details, which may not capture all relevant information.\n- **Scalability**: As the number of invoices and related contracts grows, the performance of the procedure may degrade due to increased data volume and complexity.\n- **Hardcoded Logic**: The procedure contains hardcoded logic for status IDs and action types, which may require updates if business rules change.\n- **Resource Locking**: The use of transactions can lead to resource locking, potentially causing deadlocks or blocking issues if not managed properly.",
      "complexity": "High",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2904,
      "api_response_id": "chatcmpl-C8ayZrRhLDltmxEj3ACqLKz6YkYik"
    },
    "analysis_timestamp": "2025-08-25 19:33:43"
  },
  {
    "procedure_info": {
      "schema": "Invoice",
      "name": "USP_InvoiceWorkQueueRetrieve",
      "definition": "CREATE PROCEDURE [Invoice].[USP_InvoiceWorkQueueRetrieve]\r\n\t@providerId\t\t\t\tINT = NULL\r\n\t,@billingPeriod\t\tVARCHAR(6) = NULL\r\n\t,@pageNumber\t\t\tINT = NULL\r\n\t,@pageSize\t\t\t\tINT = NULL\r\n\t,@sortBy\t\t\t\tVARCHAR(25) = NULL\r\n\t,@sortDirection\t\tVARCHAR(5) = NULL\r\n\t,@searchValue\t\t\tVARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @providerId\t\t\t= NULLIF(@providerId, 0);\r\n\tSET @billingPeriod\t\t= NULLIF(@billingPeriod, '');\r\n\tSET @pageNumber\t\t\t= ISNULL(NULLIF(@pageNumber, 0), 1);\r\n\tSET @pageSize\t\t\t= ISNULL(NULLIF(@pageSize, 0), 1000);\r\n\tSET @sortBy\t\t\t\t= ISNULL(NULLIF(@sortBy, ''), 'INVOICENO');\r\n\tSET @sortDirection\t\t= ISNULL(NULLIF(@sortDirection, ''), 'DESC');\r\n\tSET @searchValue\t\t= NULLIF(@searchValue, '');\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'RETRIEVE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Retrieved invoices';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @providerId AS PRVID, @billingPeriod AS BILLPRD\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t, @pageNumber AS PAGENUM, @pageSize AS PAGESIZE\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tDECLARE @startRowIndex INT, @endRowIndex INT;\r\n\tSET @startRowIndex\t= ((@pageNumber - 1) * @pageSize) + 1;\r\n\tSET @endRowIndex\t= @pageNumber * @pageSize;\r\n\tIF @endRowIndex <= 0 SET @endRowIndex = 10000; -- Hard-coding for 10,000 rows of data\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @tmpInvoices TABLE (\r\n\t\t\tInvoiceID INT NOT NULL\r\n\t\t\t, BillingGroups VARCHAR(1000) NULL\r\n\t\t\t, Contracts VARCHAR(1000) NULL\r\n\t\t\t, Payments VARCHAR(1000) NULL\r\n\t\t);\r\n\r\n\t\tINSERT INTO @tmpInvoices(InvoiceID, BillingGroups, Contracts, Payments)\r\n\t\t\tSELECT INV.InvoiceID\r\n\t\t\t\t, SUBSTRING((SELECT DISTINCT ', ' + IGC.GroupName FROM [Invoice].[vwInvoiceGroupContracts] IGC WHERE IGC.InvoiceID = INV.InvoiceID FOR XML PATH('')), 2, 1000) AS BillingGroups\r\n\t\t\t\t, SUBSTRING((SELECT DISTINCT ', ' + IGC.ContractNumber FROM [Invoice].[vwInvoiceGroupContracts] IGC WHERE IGC.InvoiceID = INV.InvoiceID FOR XML PATH('')), 2, 1000) AS Contracts\r\n\t\t\t\t, SUBSTRING((SELECT DISTINCT ', ' + IP.PaymentNumber FROM [Invoice].[vwInvoicePayments] IP WHERE IP.InvoiceID = INV.InvoiceID FOR XML PATH('')), 2, 1000) AS Payments\r\n\t\t\tFROM [Invoice].[vwInvoices] INV;\r\n\r\n\t\tWITH invoicesCTE AS (\r\n\t\t\tSELECT CASE\r\n\t\t\t\t\t\tWHEN @sortBy = 'INVOICENO' AND @sortDirection = 'ASC' THEN ROW_NUMBER() OVER (ORDER BY INV.InvoiceBillingPeriod ASC, RIGHT(INV.InvoiceNumber, 3) ASC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'INVOICENO' AND @sortDirection = 'DESC' THEN ROW_NUMBER() OVER (ORDER BY INV.InvoiceBillingPeriod DESC, RIGHT(INV.InvoiceNumber, 3) DESC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'INVOICEDATE' AND @sortDirection = 'ASC' THEN ROW_NUMBER() OVER (ORDER BY INV.InvoiceDate ASC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'INVOICEDATE' AND @sortDirection = 'DESC' THEN ROW_NUMBER() OVER (ORDER BY INV.InvoiceDate DESC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'PROVIDER' AND @sortDirection = 'ASC' THEN ROW_NUMBER() OVER (ORDER BY INV.ProviderName ASC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'PROVIDER' AND @sortDirection = 'DESC' THEN ROW_NUMBER() OVER (ORDER BY INV.ProviderName DESC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'BILLINGGROUP' AND @sortDirection = 'ASC' THEN ROW_NUMBER() OVER (ORDER BY T.BillingGroups ASC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'BILLINGGROUP' AND @sortDirection = 'DESC' THEN ROW_NUMBER() OVER (ORDER BY T.BillingGroups DESC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'CONTRACT' AND @sortDirection = 'ASC' THEN ROW_NUMBER() OVER (ORDER BY T.Contracts ASC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'CONTRACT' AND @sortDirection = 'DESC' THEN ROW_NUMBER() OVER (ORDER BY T.Contracts DESC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'PAYMENT' AND @sortDirection = 'ASC' THEN ROW_NUMBER() OVER (ORDER BY T.Payments ASC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'PAYMENT' AND @sortDirection = 'DESC' THEN ROW_NUMBER() OVER (ORDER BY T.Payments DESC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'INVOICEAMOUNT' AND @sortDirection = 'ASC' THEN ROW_NUMBER() OVER (ORDER BY INV.AmountPaid ASC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'INVOICEAMOUNT' AND @sortDirection = 'DESC' THEN ROW_NUMBER() OVER (ORDER BY INV.AmountPaid DESC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'BILLINGPERIOD' AND @sortDirection = 'ASC' THEN ROW_NUMBER() OVER (ORDER BY INV.InvoiceBillingPeriod ASC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'BILLINGPERIOD' AND @sortDirection = 'DESC' THEN ROW_NUMBER() OVER (ORDER BY INV.InvoiceBillingPeriod DESC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'STATUS' AND @sortDirection = 'ASC' THEN ROW_NUMBER() OVER (ORDER BY INV.StatusDescription ASC)\r\n\t\t\t\t\t\tWHEN @sortBy = 'STATUS' AND @sortDirection = 'DESC' THEN ROW_NUMBER() OVER (ORDER BY INV.StatusDescription DESC)\r\n\t\t\t\t\t\tELSE ROW_NUMBER() OVER (ORDER BY INV.InvoiceBillingPeriod DESC, RIGHT(INV.InvoiceNumber, 3) DESC)\r\n\t\t\t\t\tEND AS RowID\r\n\t\t\t\t, INV.InvoiceID, INV.InvoiceNumber, INV.AmountBilled, INV.AmountPaid, INV.InvoiceBillingPeriod, INV.StatusID\r\n\t\t\t\t, INV.ProviderID, INV.ProviderName\r\n\t\t\t\t, T.BillingGroups, T.Contracts, T.Payments\r\n\t\t\t\t, INV.InvoiceDate, INV.CreatedDate, INV.CreatedBy, INV.ModifiedDate, INV.ModifiedBy\r\n\t\t\t\t, INV.Active\r\n\t\t\tFROM [Invoice].[vwInvoices] INV\r\n\t\t\tJOIN @tmpInvoices T ON T.InvoiceID = INV.InvoiceID\r\n\t\t\tWHERE Active\t\t\t\t\t= 1\r\n\t\t\t\tAND INV.ProviderID\t\t\t\t= ISNULL(@providerId, ProviderID)\r\n\t\t\t\tAND INV.InvoiceBillingPeriod\t= ISNULL(@billingPeriod, InvoiceBillingPeriod)\r\n\t\t\t\t\r\n\t\t\t\tAND 1 = CASE\r\n\t\t\t\t\t\t\tWHEN ISNULL(@searchValue, '') <> '' THEN\r\n\t\t\t\t\t\t\t\tCASE\r\n\t\t\t\t\t\t\t\t\tWHEN INV.InvoiceNumber LIKE '%' + @searchValue + '%'\r\n\t\t\t\t\t\t\t\t\t\t\tOR T.BillingGroups LIKE '%' + @searchValue + '%'\r\n\t\t\t\t\t\t\t\t\t\t\tOR T.Contracts LIKE '%' + @searchValue + '%'\r\n\t\t\t\t\t\t\t\t\t\t\tOR T.Payments LIKE '%' + @searchValue + '%'\r\n\t\t\t\t\t\t\t\t\t\tTHEN 1\r\n\t\t\t\t\t\t\t\t\tELSE 0\r\n\t\t\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t\tELSE 1\r\n\t\t\t\t\t\tEND\r\n\t\t)\r\n\t\tSELECT INV.InvoiceID, INV.InvoiceNumber, INV.AmountBilled, INV.AmountPaid, INV.InvoiceBillingPeriod, INV.StatusID\r\n\t\t\t, INV.ProviderID, INV.ProviderName, INV.BillingGroups, INV.Contracts, INV.Payments\r\n\t\t\t, INV.InvoiceDate, INV.CreatedDate, INV.CreatedBy, INV.ModifiedDate, INV.ModifiedBy\r\n\t\t\t, INV.Active\r\n\t\t\t, CONVERT(INT, (SELECT COUNT(1) FROM Invoice.vwInvoices WHERE Active = 1)) AS TotalRecords\r\n\t\t\t, CONVERT(INT, (SELECT COUNT(1) FROM invoicesCTE)) AS FilteredRecords\r\n\t\tFROM invoicesCTE INV\r\n\t\tJOIN @tmpInvoices T ON T.InvoiceID = INV.InvoiceID\r\n\t\tWHERE (RowID BETWEEN @startRowIndex AND @endRowIndex)\r\n\t\t\tAND ((@billingPeriod IS NOT NULL AND INV.InvoiceBillingPeriod = @billingPeriod) OR (@billingPeriod IS NULL))\r\n\t\tORDER BY RowID;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to retrieve invoices';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.763000",
      "last_altered": "2025-08-25 16:04:01.763000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingPeriod",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 6,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@pageNumber",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@pageSize",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@sortBy",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@sortDirection",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 5,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@searchValue",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 10,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 11,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 12,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 13,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 14,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceWorkQueueRetrieve",
      "explanation": "#### 1. Overview\n\nThe stored procedure `USP_InvoiceWorkQueueRetrieve` is designed to retrieve invoice data from a SQL Server database, specifically from the `Invoice` schema. It supports filtering, sorting, and pagination of invoice records. The procedure also logs its execution details and handles exceptions by capturing error messages and logging them.\n\n#### 2. Complexity Level: Medium\n\nThe complexity of this stored procedure is medium due to the following factors:\n- It involves multiple input parameters for filtering, sorting, and pagination.\n- It uses a Common Table Expression (CTE) for sorting and pagination.\n- It includes error handling and logging mechanisms.\n- It performs dynamic sorting based on input parameters.\n\n#### 3. Input Parameters\n\n- `@providerId INT = NULL`: Filters invoices by provider ID.\n- `@billingPeriod VARCHAR(6) = NULL`: Filters invoices by billing period.\n- `@pageNumber INT = NULL`: Specifies the page number for pagination.\n- `@pageSize INT = NULL`: Specifies the number of records per page.\n- `@sortBy VARCHAR(25) = NULL`: Determines the column to sort by.\n- `@sortDirection VARCHAR(5) = NULL`: Specifies the sort direction ('ASC' or 'DESC').\n- `@searchValue VARCHAR(25) = NULL`: Searches for a specific value in invoice-related fields.\n- `@correlationId VARCHAR(128) = NULL`: Used for logging to correlate logs.\n- `@machineName VARCHAR(128) = NULL`: Used for logging the machine name.\n- `@processName VARCHAR(128) = NULL`: Used for logging the process name.\n- `@domain VARCHAR(25) = NULL`: Used for logging the domain.\n- `@username VARCHAR(25) = NULL`: Used for logging the username.\n- `@userId INT = NULL`: Used for logging the user ID.\n- `@exceptionDetails VARCHAR(MAX) = NULL OUTPUT`: Captures exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n\n1. **Parameter Initialization**: Default values are set for parameters if they are not provided. For example, `@pageNumber` defaults to 1, and `@pageSize` defaults to 1000.\n\n2. **Logging Setup**: Initializes variables for logging purposes, including generating a `@correlationId` if not provided.\n\n3. **Pagination Calculation**: Calculates `@startRowIndex` and `@endRowIndex` based on `@pageNumber` and `@pageSize`.\n\n4. **Data Retrieval**:\n   - A temporary table `@tmpInvoices` is created to store invoice-related data.\n   - Data is inserted into `@tmpInvoices` using subqueries to concatenate related group, contract, and payment information.\n   - A CTE `invoicesCTE` is used to apply sorting and filtering logic. It assigns a `RowID` based on the sorting criteria specified by `@sortBy` and `@sortDirection`.\n\n5. **Final Selection**: The procedure selects the required invoice data from `invoicesCTE`, applying pagination and additional filtering based on `@billingPeriod`.\n\n6. **Error Handling**: If an error occurs, the procedure captures the error message in `@exceptionDetails` and sets the severity to 'ERROR'.\n\n7. **Logging**: The procedure logs execution details using `dbo.USP_AppLogCreate`, including the elapsed time and any exception details.\n\n#### 5. Performance Considerations\n\n- **Indexing**: Ensure that the columns used in filtering and sorting (`InvoiceID`, `InvoiceBillingPeriod`, etc.) are indexed to improve query performance.\n- **Pagination**: The use of `ROW_NUMBER()` for pagination is efficient, but performance may degrade with large datasets if indexes are not optimized.\n- **Temporary Table**: The use of a temporary table (`@tmpInvoices`) can be resource-intensive if the dataset is large. Consider optimizing the subqueries or using indexed views if performance issues arise.\n\n#### 6. Potential Issues or Risks\n\n- **Parameter Defaults**: Incorrect default values for parameters like `@pageSize` could lead to unexpected results or performance issues.\n- **Error Handling**: While the procedure captures error messages, it does not provide detailed error handling or rollback mechanisms for transactions.\n- **Concurrency**: The procedure does not account for concurrent modifications to the data, which could lead to inconsistencies if the underlying data changes during execution.\n- **Hard-coded Limits**: The hard-coded limit of 10,000 rows for `@endRowIndex` may not be suitable for all scenarios and could lead to incomplete data retrieval if not adjusted appropriately.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 3411,
      "api_response_id": "chatcmpl-C8az2mHiAMnbJahY3pqkdInQt6wDc"
    },
    "analysis_timestamp": "2025-08-25 19:34:18"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceAccountBillingRetrieve",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceAccountBillingRetrieve]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t    RAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO'\r\n\t\t,@message AS VARCHAR(255) = 'Reports - Retrieved invoice accounts / billings', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\t\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceIsSplitFY AS BIT = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tSELECT InvoiceBillingID\r\n\t\t\t\t,InvoiceGroupContractID\r\n\t\t\t\t,InvoiceID\r\n\t\t\t\t,InvoiceNumber\r\n\t\t\t\t,GroupID\r\n\t\t\t\t,GroupName\r\n\t\t\t\t,ContractID\r\n\t\t\t\t,ContractNumber\r\n\t\t\t\t,FiscalYear\r\n\t\t\t\t,AccountID\r\n\t\t\t\t,Billing.MaskAccountNumber(CASE WHEN ProviderID = 2 AND LEN(AccountNumber) = 15 AND AccountNumber LIKE '%0000' THEN SUBSTRING(AccountNumber, 2, 10)\r\n\t\t\t\t\tWHEN ProviderID = 7 AND LEN(AccountNumber) = 15 AND AccountNumber LIKE '%0000' THEN SUBSTRING(AccountNumber, 0, 12)\r\n\t\t\t\t\tWHEN ProviderID = 9 AND LEN(AccountNumber) = 15 AND AccountNumber LIKE '%0000' THEN SUBSTRING(AccountNumber, 0, 12)\r\n\t\t\t\t\tELSE AccountNumber END, ProviderID) AS AccountNumber\r\n\t\t\t\t,FormattedAccountNumber\r\n\t\t\t\t,BillingID\r\n\t\t\t\t,BillingPeriod\r\n\t\t\t\t,BillingPeriodDays\r\n\t\t\t\t,BillingPeriodDaysPriorFY\r\n\t\t\t\t,BillingPeriodDaysCurrentFY\r\n\t\t\t\t,IsEstimated\r\n\t\t\t\t,IsManualEntry\r\n\t\t\t\t,AmountBilled\r\n\t\t\t\t,AmountPaid\r\n\t\t\t\t,AmountPaidPriorFY\r\n\t\t\t\t,AmountPaidCurrentFY\r\n\t\t\t\t,EnergyUsage\r\n\t\t\t\t,EnergyUsagePriorFY\r\n\t\t\t\t,EnergyUsageCurrentFY\r\n\t\t\t\t,DemandUsage\r\n\t\t\t\t,DemandUsagePriorFY\r\n\t\t\t\t,DemandUsageCurrentFY\r\n\t\t\t\t,DateBilled\r\n\t\t\t\t,DateDue\r\n\t\t\t\t,FromDate\r\n\t\t\t\t,ToDate\r\n\t\t\t\t,SplitFY\r\n\t\t\t\t,CreatedDate\r\n\t\t\t\t,CreatedBy\r\n\t\t\t\t,ModifiedDate\r\n\t\t\t\t,ModifiedBy\r\n\t\t\t\t,Active\r\n\t\t\tFROM Invoice.vwInvoiceAccountBillings\r\n\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\t\tORDER BY GroupName ASC, ContractNumber ASC, FiscalYear DESC, AccountNumber ASC;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH fyTbl AS (SELECT GroupID, ContractNumber = STUFF((SELECT DISTINCT ' & ' + ContractNumber\r\n\t\t\t\t\tFROM Invoice.vwInvoiceGroupContracts AS b\r\n\t\t\t\t\tWHERE a.InvoiceID = b.InvoiceID AND b.GroupID = a.GroupID\r\n\t\t\t\t\tFOR XML PATH('')), 1, 7, '')\r\n\t\t\t\tFROM Invoice.vwInvoiceGroupContracts AS a\r\n\t\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, a.InvoiceID)\r\n\t\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, a.InvoiceNumber)\r\n\t\t\t\tGROUP BY InvoiceID, GroupID)\r\n\t\t\tSELECT IAB.InvoiceBillingID\r\n\t\t\t\t,IAB.InvoiceGroupContractID\r\n\t\t\t\t,IAB.InvoiceID\r\n\t\t\t\t,IAB.InvoiceNumber\r\n\t\t\t\t,IAB.GroupID\r\n\t\t\t\t,IAB.GroupName\r\n\t\t\t\t,IAB.ContractID, REPLACE(fyTbl.ContractNumber, '&amp;', '&') AS ContractNumber\r\n\t\t\t\t,IAB.FiscalYear\r\n\t\t\t\t,IAB.AccountID\r\n\t\t\t\t,Billing.MaskAccountNumber(CASE WHEN IAB.ProviderID = 2 AND LEN(IAB.AccountNumber) = 15 AND IAB.AccountNumber LIKE '%0000' THEN SUBSTRING(IAB.AccountNumber, 2, 10)\r\n\t\t\t\t\tWHEN IAB.ProviderID = 7 AND LEN(IAB.AccountNumber) = 15 AND IAB.AccountNumber LIKE '%0000' THEN SUBSTRING(IAB.AccountNumber, 0, 12)\r\n\t\t\t\t\tWHEN IAB.ProviderID = 9 AND LEN(IAB.AccountNumber) = 15 AND IAB.AccountNumber LIKE '%0000' THEN SUBSTRING(IAB.AccountNumber, 0, 12)\r\n\t\t\t\t\tELSE IAB.AccountNumber END, IAB.ProviderID) AS AccountNumber\r\n\t\t\t\t,IAB.FormattedAccountNumber\r\n\t\t\t\t,IAB.BillingID\r\n\t\t\t\t,IAB.BillingPeriod\r\n\t\t\t\t,IAB.BillingPeriodDays\r\n\t\t\t\t,IAB.BillingPeriodDaysPriorFY\r\n\t\t\t\t,IAB.BillingPeriodDaysCurrentFY\r\n\t\t\t\t,IAB.IsEstimated\r\n\t\t\t\t,IAB.IsManualEntry\r\n\t\t\t\t,IAB.AmountBilled\r\n\t\t\t\t,IAB.AmountPaid\r\n\t\t\t\t,IAB.AmountPaidPriorFY\r\n\t\t\t\t,IAB.AmountPaidCurrentFY\r\n\t\t\t\t,IAB.EnergyUsage\r\n\t\t\t\t,IAB.EnergyUsagePriorFY\r\n\t\t\t\t,IAB.EnergyUsageCurrentFY\r\n\t\t\t\t,IAB.DemandUsage\r\n\t\t\t\t,IAB.DemandUsagePriorFY\r\n\t\t\t\t,IAB.DemandUsageCurrentFY\r\n\t\t\t\t,IAB.DateBilled\r\n\t\t\t\t,IAB.DateDue\r\n\t\t\t\t,IAB.FromDate\r\n\t\t\t\t,IAB.ToDate\r\n\t\t\t\t,IAB.SplitFY\r\n\t\t\t\t,IAB.CreatedDate\r\n\t\t\t\t,IAB.CreatedBy\r\n\t\t\t\t,IAB.ModifiedDate\r\n\t\t\t\t,IAB.ModifiedBy\r\n\t\t\t\t,IAB.Active\r\n\t\t\tFROM Invoice.vwInvoiceAccountBillings AS IAB\r\n\t\t\t\tINNER JOIN fyTbl ON IAB.GroupID = fyTbl.GroupID\r\n\t\t\tWHERE IAB.InvoiceID = ISNULL(@invoiceId, IAB.InvoiceID)\r\n\t\t\t\tAND IAB.InvoiceNumber = ISNULL(@invoiceNumber, IAB.InvoiceNumber)\r\n\t\t\tORDER BY IAB.GroupName ASC, IAB.ContractNumber ASC, IAB.FiscalYear DESC, IAB.AccountNumber ASC;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice accounts / billings'\r\n\t\t\t,@sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.777000",
      "last_altered": "2025-08-25 16:04:01.777000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceAccountBillingRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceAccountBillingRetrieve` is designed to retrieve invoice account billing details from a SQL Server database. It accepts various parameters to filter the data and returns billing information based on the specified invoice ID or invoice number. The procedure also logs the operation details and handles exceptions by capturing error messages.\n\n#### 2. Complexity Level: Medium\nThe complexity level of this stored procedure is medium. It involves conditional logic, dynamic SQL-like behavior with XML path, error handling, and logging mechanisms. The use of a common table expression (CTE) and conditional logic for different invoice types adds to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional; specifies the invoice ID to filter the results.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional; specifies the invoice number to filter the results.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional; used for logging to correlate logs across systems.\n- `@machineName AS VARCHAR(128) = NULL`: Optional; specifies the machine name for logging purposes.\n- `@processName AS VARCHAR(128) = NULL`: Optional; specifies the process name for logging purposes.\n- `@domain AS VARCHAR(25) = NULL`: Optional; specifies the domain for logging purposes.\n- `@username AS VARCHAR(25) = NULL`: Optional; specifies the username for logging purposes.\n- `@userId AS INT = NULL`: Optional; specifies the user ID for logging purposes.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output; captures any exception details that occur during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**:\n   - Sets default values for parameters using `NULLIF` and `ISNULL`.\n   - Generates a new correlation ID if not provided.\n   - Validates that either `@invoiceId` or `@invoiceNumber` is provided; raises an error if both are missing.\n\n2. **Main Logic**:\n   - Determines if the invoice is a split fiscal year invoice using the function `Billing.UDF_IsSplitFYInvoice`.\n   - If not a split fiscal year invoice, retrieves data directly from `Invoice.vwInvoiceAccountBillings`.\n   - If it is a split fiscal year invoice, constructs a CTE to handle complex contract number concatenation and retrieves data accordingly.\n\n3. **Error Handling**:\n   - Uses a `TRY...CATCH` block to handle exceptions.\n   - Captures error messages and sets logging parameters for failed operations.\n\n4. **Logging**:\n   - Logs the operation details using `dbo.USP_AppLogCreate`, including correlation ID, machine name, process name, action, severity, message, and elapsed time.\n\n#### 5. Performance Considerations\n- **Transaction Isolation Level**: Uses `READ UNCOMMITTED`, which can improve performance by allowing dirty reads but may lead to inconsistent data.\n- **Conditional Logic**: The use of conditional logic and CTEs can impact performance, especially if the underlying views or functions are complex or involve large datasets.\n- **Indexing**: Performance depends on the indexing of columns used in the `WHERE` clause, such as `InvoiceID` and `InvoiceNumber`.\n\n#### 6. Potential Issues or Risks\n- **Data Consistency**: Using `READ UNCOMMITTED` can lead to reading uncommitted changes, resulting in potential data inconsistencies.\n- **Error Handling**: While exceptions are caught, the procedure does not re-throw them, which might hide issues from the calling application.\n- **Parameter Defaults**: Defaulting `@userId` to 0 and generating a new `@correlationId` might lead to misleading logs if not properly managed.\n- **Complexity in Contract Number Concatenation**: The use of XML path for concatenating contract numbers can be complex and may not handle all edge cases, such as special characters.\n- **Scalability**: The procedure's performance may degrade with large datasets or complex views, especially if not properly indexed.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2880,
      "api_response_id": "chatcmpl-C8azcaaLAJDoMESzKxCwIHsbUyu77"
    },
    "analysis_timestamp": "2025-08-25 19:34:55"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceAccountBillingRetrieve_AandA",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceAccountBillingRetrieve_AandA]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t    RAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO'\r\n\t\t,@message AS VARCHAR(255) = 'Reports - Retrieved invoice accounts / billings', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\t\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceIsSplitFY AS BIT = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tSELECT FormattedAccountNumberForEFT AS [Account Number]\r\n\t\t\t\t,BillingPeriod AS [Billing Period]\r\n\t\t\t\t,FORMAT(FromDate, 'M/d/yyyy') + '-' + FORMAT(ToDate, 'M/d/yyyy')  AS [From-To Date]\r\n\t\t\t\t,EnergyUsage AS [Energy Usage]\r\n\t\t\t\t,FORMAT(AmountBilled, 'C') AS [Billed Amount]\r\n\t\t\t\t,FORMAT(AmountPaid, 'C') AS [Payment Amount]\r\n\t\t\t\t,FORMAT(AmountPaidPriorFY, 'C') AS [Prior FY]\r\n\t\t\t\t,FORMAT(AmountPaidCurrentFY, 'C') AS [Current FY]\r\n\t\t\t\t,GroupName\r\n\t\t\t\t,ContractNumber\r\n\t\t\tFROM Invoice.vwInvoiceAccountBillings\r\n\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\t\tORDER BY GroupName ASC, ContractNumber ASC, FiscalYear DESC, AccountNumber ASC;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH fyTbl AS (SELECT GroupID, ContractNumber = STUFF((SELECT DISTINCT ' & ' + ContractNumber\r\n\t\t\t\t\tFROM Invoice.vwInvoiceGroupContracts AS b\r\n\t\t\t\t\tWHERE a.InvoiceID = b.InvoiceID AND b.GroupID = a.GroupID\r\n\t\t\t\t\tFOR XML PATH('')), 1, 7, '')\r\n\t\t\t\tFROM Invoice.vwInvoiceGroupContracts AS a\r\n\t\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, a.InvoiceID)\r\n\t\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, a.InvoiceNumber)\r\n\t\t\t\tGROUP BY InvoiceID, GroupID)\r\n\t\t\tSELECT IAB.FormattedAccountNumberForEFT AS [Account Number]\r\n\t\t\t\t,IAB.BillingPeriod AS [Billing Period]\r\n\t\t\t\t,FORMAT(IAB.FromDate, 'M/d/yyyy') + '-' + FORMAT(IAB.ToDate, 'M/d/yyyy')  AS [From-To Date]\r\n\t\t\t\t,IAB.EnergyUsage AS [Energy Usage]\r\n\t\t\t\t,FORMAT(IAB.AmountBilled, 'C') AS [Billed Amount]\r\n\t\t\t\t,FORMAT(IAB.AmountPaid, 'C') AS [Payment Amount]\r\n\t\t\t\t,FORMAT(IAB.AmountPaidPriorFY, 'C') AS [Prior FY]\r\n\t\t\t\t,FORMAT(IAB.AmountPaidCurrentFY, 'C') AS [Current FY]\r\n\t\t\t\t,IAB.GroupName\r\n\t\t\t\t,IAB.ContractNumber\r\n\t\t\tFROM Invoice.vwInvoiceAccountBillings AS IAB\r\n\t\t\t\tINNER JOIN fyTbl ON IAB.GroupID = fyTbl.GroupID\r\n\t\t\tWHERE IAB.InvoiceID = ISNULL(@invoiceId, IAB.InvoiceID)\r\n\t\t\t\tAND IAB.InvoiceNumber = ISNULL(@invoiceNumber, IAB.InvoiceNumber)\r\n\t\t\tORDER BY IAB.GroupName ASC, IAB.ContractNumber ASC, IAB.FiscalYear DESC, IAB.AccountNumber ASC;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice accounts / billings'\r\n\t\t\t,@sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.787000",
      "last_altered": "2025-08-25 16:04:01.787000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceAccountBillingRetrieve_AandA",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceAccountBillingRetrieve_AandA` is designed to retrieve billing information related to invoices from a SQL Server database. It accepts various parameters to filter the data and logs the operation details, including any exceptions encountered during execution. The procedure handles invoices that may or may not be split across fiscal years and formats the output for reporting purposes.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves conditional logic to handle different invoice types (split fiscal year vs. non-split).\n- It uses a Common Table Expression (CTE) for handling split fiscal year invoices.\n- It includes error handling with a TRY-CATCH block and logs the operation details.\n- It formats output data for reporting purposes.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional; specifies the invoice ID to retrieve.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional; specifies the invoice number to retrieve.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional; used for logging and tracking the operation.\n- `@machineName AS VARCHAR(128) = NULL`: Optional; specifies the machine name for logging.\n- `@processName AS VARCHAR(128) = NULL`: Optional; specifies the process name for logging.\n- `@domain AS VARCHAR(25) = NULL`: Optional; specifies the domain for logging.\n- `@username AS VARCHAR(25) = NULL`: Optional; specifies the username for logging.\n- `@userId AS INT = NULL`: Optional; specifies the user ID for logging.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output; captures exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for parameters and ensures either `@invoiceId` or `@invoiceNumber` is provided.\n2. **Validation**: Raises an error if neither `@invoiceId` nor `@invoiceNumber` is specified.\n3. **Logging Setup**: Prepares variables for logging the operation, including start time and message details.\n4. **Data Retrieval**:\n   - Checks if the invoice is split across fiscal years using a user-defined function `Billing.UDF_IsSplitFYInvoice`.\n   - If not split, retrieves data directly from `Invoice.vwInvoiceAccountBillings`.\n   - If split, uses a CTE to aggregate contract numbers and joins with `Invoice.vwInvoiceAccountBillings` to retrieve data.\n5. **Error Handling**: Catches exceptions, updates logging variables, and sets a flag to send an email if an error occurs.\n6. **Logging**: Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED Isolation Level**: This level reduces locking overhead but may result in reading uncommitted data (dirty reads).\n- **Conditional Logic**: The use of conditional logic and CTEs can impact performance, especially with large datasets.\n- **Formatting**: The use of `FORMAT` function for date and currency formatting can be resource-intensive.\n- **Logging Overhead**: Frequent logging, especially with detailed exception information, can add overhead.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The use of `READ UNCOMMITTED` can lead to inconsistent data being read if there are concurrent transactions modifying the data.\n- **Error Handling**: While exceptions are caught, the procedure does not re-throw them, which might mask underlying issues.\n- **Parameter Validation**: The procedure raises an error if neither `@invoiceId` nor `@invoiceNumber` is provided, but it does not handle cases where both are provided with conflicting values.\n- **Scalability**: The use of `FORMAT` and XML PATH for string aggregation can become a bottleneck with large datasets.\n- **Security**: The procedure does not include any explicit security checks or parameter sanitization, which could be a risk if inputs are not properly validated elsewhere.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2353,
      "api_response_id": "chatcmpl-C8b0DevsLf0OTonPXTa2FHeIX5jYm"
    },
    "analysis_timestamp": "2025-08-25 19:35:11"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceAccountBillingRetrieve_EFT",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceAccountBillingRetrieve_EFT]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t    RAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO'\r\n\t\t,@message AS VARCHAR(255) = 'Reports - Retrieved invoice accounts / billings', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\t\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceIsSplitFY AS BIT = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tSELECT FormattedAccountNumberForEFT AS [Account Number]\r\n\t\t\t\t,FORMAT(FromDate, 'M/d/yyyy') + '-' + FORMAT(ToDate, 'M/d/yyyy')  AS [From-To Date]\r\n\t\t\t\t,FORMAT(AmountBilled, 'C') AS [Billed Amount]\r\n\t\t\t\t,FORMAT(AmountPaid, 'C') AS [Payment Amount]\r\n\t\t\t\t,GroupName\r\n\t\t\t\t,ContractNumber\r\n\t\t\tFROM Invoice.vwInvoiceAccountBillings\r\n\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\t\tORDER BY GroupName ASC, ContractNumber ASC, FiscalYear DESC, AccountNumber ASC;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH fyTbl AS (SELECT GroupID, ContractNumber = STUFF((SELECT DISTINCT ' & ' + ContractNumber\r\n\t\t\t\t\tFROM Invoice.vwInvoiceGroupContracts AS b\r\n\t\t\t\t\tWHERE a.InvoiceID = b.InvoiceID AND b.GroupID = a.GroupID\r\n\t\t\t\t\tFOR XML PATH('')), 1, 7, '')\r\n\t\t\t\tFROM Invoice.vwInvoiceGroupContracts AS a\r\n\t\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, a.InvoiceID)\r\n\t\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, a.InvoiceNumber)\r\n\t\t\t\tGROUP BY InvoiceID, GroupID)\r\n\t\t\tSELECT IAB.FormattedAccountNumberForEFT AS [Account Number]\r\n\t\t\t\t,FORMAT(IAB.FromDate, 'M/d/yyyy') + '-' + FORMAT(IAB.ToDate, 'M/d/yyyy')  AS [From-To Date]\r\n\t\t\t\t,FORMAT(IAB.AmountBilled, 'C') AS [Billed Amount]\r\n\t\t\t\t,FORMAT(IAB.AmountPaid, 'C') AS [Payment Amount]\r\n\t\t\t\t,IAB.GroupName\r\n\t\t\t\t,IAB.ContractNumber\r\n\t\t\tFROM Invoice.vwInvoiceAccountBillings AS IAB\r\n\t\t\t\tINNER JOIN fyTbl ON IAB.GroupID = fyTbl.GroupID\r\n\t\t\tWHERE IAB.InvoiceID = ISNULL(@invoiceId, IAB.InvoiceID)\r\n\t\t\t\tAND IAB.InvoiceNumber = ISNULL(@invoiceNumber, IAB.InvoiceNumber)\r\n\t\t\tORDER BY IAB.GroupName ASC, IAB.ContractNumber ASC, IAB.FiscalYear DESC, IAB.AccountNumber ASC;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice accounts / billings'\r\n\t\t\t,@sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.793000",
      "last_altered": "2025-08-25 16:04:01.793000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceAccountBillingRetrieve_EFT",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceAccountBillingRetrieve_EFT` is designed to retrieve billing information related to invoices from a SQL Server database. It accepts various parameters to filter and log the retrieval process, and it handles both regular and split fiscal year invoices. The procedure logs its operations and any exceptions that occur during execution.\n\n#### 2. Complexity Level: Medium\nThe procedure involves conditional logic, error handling, dynamic SQL-like operations using XML PATH, and logging mechanisms. It interacts with multiple views and user-defined functions, which adds to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: The unique identifier for the invoice. Used to filter the query.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: The invoice number. Used as an alternative filter to `@invoiceId`.\n- `@correlationId AS VARCHAR(128) = NULL`: A unique identifier for tracking the operation, defaulted to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaulted to the server name.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, defaulted to the procedure's schema and name.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the person executing the procedure.\n- `@userId AS INT = NULL`: The user ID of the person executing the procedure, defaulted to 0 if not provided.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception messages.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**:\n   - Sets default values for parameters if they are not provided.\n   - Validates that either `@invoiceId` or `@invoiceNumber` is specified; otherwise, raises an error.\n\n2. **Logging Setup**:\n   - Prepares logging details such as action, severity, message, and message details.\n\n3. **Invoice Retrieval**:\n   - Uses a `BEGIN TRY...END TRY` block to handle potential errors.\n   - Calls a user-defined function `Billing.UDF_IsSplitFYInvoice` to determine if the invoice is split across fiscal years.\n   - If not split, retrieves data directly from `Invoice.vwInvoiceAccountBillings`.\n   - If split, uses a Common Table Expression (CTE) to concatenate contract numbers and retrieve data.\n\n4. **Error Handling**:\n   - In the `BEGIN CATCH` block, captures error details and sets the severity to 'ERROR'.\n\n5. **Logging Execution**:\n   - Calculates elapsed time and logs the operation using `dbo.USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Indexing**: Ensure that `InvoiceID` and `InvoiceNumber` columns in the views are indexed to optimize query performance.\n- **Function Calls**: The use of `Billing.UDF_IsSplitFYInvoice` could impact performance if it is not optimized.\n- **XML PATH**: The use of `FOR XML PATH` for string concatenation can be resource-intensive, especially with large datasets.\n- **Logging Overhead**: Frequent logging can introduce overhead, especially if the logging table is not properly indexed.\n\n#### 6. Potential Issues or Risks\n- **Error Handling**: The procedure captures errors but does not rethrow them, which might lead to silent failures if not monitored.\n- **Parameter Defaults**: Defaulting `@userId` to 0 could lead to incorrect logging if user identification is crucial.\n- **Concurrency**: If multiple users execute this procedure simultaneously, there could be contention on shared resources like logging tables.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized data access.\n- **Data Integrity**: The procedure assumes that either `@invoiceId` or `@invoiceNumber` is always valid, which might not be the case if data integrity is compromised.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2217,
      "api_response_id": "chatcmpl-C8b0Sc7d7dS3j75HA6vDhWMASY27g"
    },
    "analysis_timestamp": "2025-08-25 19:35:29"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceAccountBillingRetrieve_EFT_Excel",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceAccountBillingRetrieve_EFT_Excel]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t    RAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO'\r\n\t\t,@message AS VARCHAR(255) = 'Reports - Retrieved invoice accounts / billings', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\t\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceIsSplitFY AS BIT = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tSELECT FormattedAccountNumberForEFT AS [Account Number]\r\n\t\t\t\t,FORMAT(FromDate, 'M/d/yyyy') + '-' + FORMAT(ToDate, 'M/d/yyyy')  AS [From-To Date]\r\n\t\t\t\t,FORMAT(AmountBilled, 'C') AS [Billed Amount]\r\n\t\t\t\t,FORMAT(AmountPaid, 'C') AS [Payment Amount]\r\n\t\t\tFROM Invoice.vwInvoiceAccountBillings\r\n\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\t\tORDER BY GroupName ASC, ContractNumber ASC, FiscalYear DESC, AccountNumber ASC;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH fyTbl AS (SELECT GroupID, ContractNumber = STUFF((SELECT DISTINCT ' & ' + ContractNumber\r\n\t\t\t\t\tFROM Invoice.vwInvoiceGroupContracts AS b\r\n\t\t\t\t\tWHERE a.InvoiceID = b.InvoiceID AND b.GroupID = a.GroupID\r\n\t\t\t\t\tFOR XML PATH('')), 1, 7, '')\r\n\t\t\t\tFROM Invoice.vwInvoiceGroupContracts AS a\r\n\t\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, a.InvoiceID)\r\n\t\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, a.InvoiceNumber)\r\n\t\t\t\tGROUP BY InvoiceID, GroupID)\r\n\t\t\tSELECT IAB.FormattedAccountNumberForEFT AS [Account Number]\r\n\t\t\t\t,FORMAT(IAB.FromDate, 'M/d/yyyy') + '-' + FORMAT(IAB.ToDate, 'M/d/yyyy')  AS [From-To Date]\r\n\t\t\t\t,FORMAT(IAB.AmountBilled, 'C') AS [Billed Amount]\r\n\t\t\t\t,FORMAT(IAB.AmountPaid, 'C') AS [Payment Amount]\r\n\t\t\tFROM Invoice.vwInvoiceAccountBillings AS IAB\r\n\t\t\t\tINNER JOIN fyTbl ON IAB.GroupID = fyTbl.GroupID\r\n\t\t\tWHERE IAB.InvoiceID = ISNULL(@invoiceId, IAB.InvoiceID)\r\n\t\t\t\tAND IAB.InvoiceNumber = ISNULL(@invoiceNumber, IAB.InvoiceNumber)\r\n\t\t\tORDER BY IAB.GroupName ASC, IAB.ContractNumber ASC, IAB.FiscalYear DESC, IAB.AccountNumber ASC;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice accounts / billings'\r\n\t\t\t,@sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.800000",
      "last_altered": "2025-08-25 16:04:01.800000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceAccountBillingRetrieve_EFT_Excel",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceAccountBillingRetrieve_EFT_Excel` is designed to retrieve billing information related to invoices from a SQL Server database. It specifically targets invoices that may or may not be split across fiscal years and formats the output for electronic funds transfer (EFT) purposes. The procedure logs its execution details and handles exceptions by logging errors and optionally sending notifications.\n\n#### 2. Complexity Level: Medium\nThe procedure involves conditional logic, dynamic SQL-like behavior with XML path, and error handling, which adds to its complexity. It also interacts with multiple database objects and performs logging, making it moderately complex.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional; specifies the invoice ID to retrieve.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional; specifies the invoice number to retrieve.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional; used for logging and tracking the procedure execution.\n- `@machineName AS VARCHAR(128) = NULL`: Optional; identifies the machine executing the procedure.\n- `@processName AS VARCHAR(128) = NULL`: Optional; identifies the process executing the procedure.\n- `@domain AS VARCHAR(25) = NULL`: Optional; specifies the domain for logging purposes.\n- `@username AS VARCHAR(25) = NULL`: Optional; specifies the username for logging purposes.\n- `@userId AS INT = NULL`: Optional; specifies the user ID for logging purposes.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output; captures exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**: \n   - Sets default values for parameters using `NULLIF`, `ISNULL`, and `COALESCE`.\n   - Validates that either `@invoiceId` or `@invoiceNumber` is provided; raises an error if both are missing.\n\n2. **Logging Setup**:\n   - Initializes logging-related variables such as `@action`, `@severity`, `@message`, and `@startTime`.\n   - Constructs `@messageDetails` using XML path to log input parameters.\n\n3. **Main Logic**:\n   - Uses a `TRY...CATCH` block to handle potential errors.\n   - Calls a user-defined function `Billing.UDF_IsSplitFYInvoice` to determine if the invoice is split across fiscal years.\n   - Depending on the result, it executes one of two queries:\n     - **Non-Split Invoices**: Retrieves billing details directly from `Invoice.vwInvoiceAccountBillings`.\n     - **Split Invoices**: Uses a Common Table Expression (CTE) to handle invoices with multiple fiscal years, joining with `fyTbl` to format contract numbers.\n\n4. **Error Handling**:\n   - In the `CATCH` block, captures error details and sets logging variables accordingly.\n\n5. **Logging Execution**:\n   - Calculates `@elapsedTime` and logs the execution details using `dbo.USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Transaction Isolation Level**: Uses `READ UNCOMMITTED`, which can improve performance by avoiding locks but may result in reading uncommitted data.\n- **Conditional Logic**: The use of conditional logic and CTEs can impact performance, especially with large datasets.\n- **Function Call**: The call to `Billing.UDF_IsSplitFYInvoice` could be a performance bottleneck if it is computationally expensive or not indexed properly.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: Using `READ UNCOMMITTED` can lead to dirty reads, which may not be suitable for all business scenarios.\n- **Error Handling**: While exceptions are logged, the procedure does not re-throw errors, which might be necessary for some applications to handle errors appropriately.\n- **Parameter Defaults**: Defaulting `@userId` to 0 and other parameters to system-generated values might lead to misleading logs if not handled correctly.\n- **Scalability**: The use of `FOR XML PATH` and CTEs might not scale well with very large datasets or complex queries.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized access to sensitive data.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2243,
      "api_response_id": "chatcmpl-C8b0kmLR7aRlk8cgcKI84J1Bym2pT"
    },
    "analysis_timestamp": "2025-08-25 19:35:39"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceAccountBillingRetrieve_Review",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceAccountBillingRetrieve_Review]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t    RAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO'\r\n\t\t,@message AS VARCHAR(255) = 'Reports - Retrieved invoice accounts / billings', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\t\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceIsSplitFY AS BIT = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tSELECT FormattedAccountNumberForEFT AS [Account Number]\r\n\t\t\t\t,BillingPeriod AS [Billing Period]\r\n\t\t\t\t,IsEstimated AS [Is Estimated]\r\n\t\t\t\t,FORMAT(FromDate, 'M/d/yyyy') + '-' + FORMAT(ToDate, 'M/d/yyyy') AS [From-To Date]\r\n\t\t\t\t,EnergyUsage AS [Energy Usage]\r\n\t\t\t\t,DemandUsage AS [Demand Usage]\r\n\t\t\t\t,FORMAT(AmountBilled, 'C') AS [Billed Amount]\r\n\t\t\t\t,FORMAT(AmountPaid, 'C') AS [Payment Amount]\r\n\t\t\t\t,FORMAT(AmountPaidPriorFY, 'C') AS [Prior FY]\r\n\t\t\t\t,FORMAT(AmountPaidCurrentFY, 'C') AS [Current FY]\r\n\t\t\t\t,GroupName\r\n\t\t\t\t,ContractNumber\r\n\t\t\tFROM Invoice.vwInvoiceAccountBillings\r\n\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\t\tORDER BY GroupName ASC, ContractNumber ASC, FiscalYear DESC, AccountNumber ASC;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH fyTbl AS (SELECT a.GroupID, ContractNumber = STUFF((SELECT DISTINCT ' & ' + b.ContractNumber\r\n\t\t\t\t\tFROM Invoice.vwInvoiceGroupContracts AS b\r\n\t\t\t\t\tWHERE a.InvoiceID = b.InvoiceID AND b.GroupID = a.GroupID\r\n\t\t\t\t\tFOR XML PATH('')), 1, 7, '')\r\n\t\t\t\tFROM Invoice.vwInvoiceGroupContracts AS a\r\n\t\t\t\tWHERE a.InvoiceID\t= ISNULL(@invoiceId, a.InvoiceID)\r\n\t\t\t\t\tAND a.InvoiceNumber = ISNULL(@invoiceNumber, a.InvoiceNumber)\r\n\t\t\t\tGROUP BY a.InvoiceID, a.GroupID)\r\n\t\t\tSELECT IAB.FormattedAccountNumberForEFT AS [Account Number]\r\n\t\t\t\t,IAB.BillingPeriod AS [Billing Period]\r\n\t\t\t\t,IAB.IsEstimated AS [Is Estimated]\r\n\t\t\t\t,FORMAT(IAB.FromDate, 'M/d/yyyy') + '-' + FORMAT(IAB.ToDate, 'M/d/yyyy')  AS [From-To Date]\r\n\t\t\t\t,IAB.EnergyUsage AS [Energy Usage]\r\n\t\t\t\t,IAB.DemandUsage AS [Demand Usage]\r\n\t\t\t\t,FORMAT(IAB.AmountBilled, 'C') AS [Billed Amount]\r\n\t\t\t\t,FORMAT(IAB.AmountPaid, 'C') AS [Payment Amount]\r\n\t\t\t\t,FORMAT(IAB.AmountPaidPriorFY, 'C') AS [Prior FY]\r\n\t\t\t\t,FORMAT(IAB.AmountPaidCurrentFY, 'C') AS [Current FY]\r\n\t\t\t\t,IAB.GroupName\r\n\t\t\t\t,IAB.ContractNumber\r\n\t\t\tFROM Invoice.vwInvoiceAccountBillings AS IAB\r\n\t\t\t\tINNER JOIN fyTbl ON IAB.GroupID = fyTbl.GroupID\r\n\t\t\tWHERE IAB.InvoiceID = ISNULL(@invoiceId, IAB.InvoiceID)\r\n\t\t\t\tAND IAB.InvoiceNumber = ISNULL(@invoiceNumber, IAB.InvoiceNumber)\r\n\t\t\tORDER BY IAB.GroupName ASC, IAB.ContractNumber ASC, IAB.FiscalYear DESC, IAB.AccountNumber ASC;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice accounts / billings'\r\n\t\t\t,@sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.810000",
      "last_altered": "2025-08-25 16:04:01.810000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceAccountBillingRetrieve_Review",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceAccountBillingRetrieve_Review` is designed to retrieve invoice account billing details from a SQL Server database. It takes various input parameters to filter and log the retrieval process. The procedure checks if an invoice is split across fiscal years and retrieves data accordingly. It also logs the operation details and handles exceptions by capturing error messages.\n\n#### 2. Complexity Level: Medium\nThe procedure involves conditional logic, dynamic SQL-like behavior with XML path, and exception handling, making it moderately complex. It also includes logging and error handling mechanisms, which add to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: The unique identifier for the invoice. Used to filter the query.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: The invoice number. Used as an alternative filter to `@invoiceId`.\n- `@correlationId AS VARCHAR(128) = NULL`: A unique identifier for the operation, used for logging.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, used for logging.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, used for logging.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure, used for logging.\n- `@username AS VARCHAR(25) = NULL`: The username of the person executing the procedure, used for logging.\n- `@userId AS INT = NULL`: The user ID of the person executing the procedure, used for logging.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception details during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**:\n   - Sets default values for parameters using `NULLIF`, `ISNULL`, and `COALESCE`.\n   - Validates that either `@invoiceId` or `@invoiceNumber` is provided; otherwise, raises an error.\n\n2. **Logging Setup**:\n   - Initializes variables for logging, such as `@action`, `@severity`, `@message`, and `@startTime`.\n\n3. **Data Retrieval**:\n   - Uses a `BEGIN TRY...END TRY` block to handle exceptions.\n   - Calls a user-defined function `Billing.UDF_IsSplitFYInvoice` to check if the invoice is split across fiscal years.\n   - If not split, retrieves data directly from `Invoice.vwInvoiceAccountBillings`.\n   - If split, uses a Common Table Expression (CTE) to concatenate contract numbers and then retrieves data.\n\n4. **Exception Handling**:\n   - In the `BEGIN CATCH` block, captures error details and sets logging variables accordingly.\n\n5. **Logging Execution**:\n   - Calculates elapsed time and logs the operation using `dbo.USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Transaction Isolation Level**: The use of `READ UNCOMMITTED` can improve performance by reducing locking but may lead to dirty reads.\n- **Function Call**: The call to `Billing.UDF_IsSplitFYInvoice` could be a performance bottleneck if it is complex or not optimized.\n- **XML Path**: Using `FOR XML PATH` for string concatenation can be resource-intensive if the dataset is large.\n- **Indexing**: Ensure that `InvoiceID` and `InvoiceNumber` are indexed for efficient querying.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The `READ UNCOMMITTED` isolation level can lead to reading uncommitted data, which might not be suitable for all business scenarios.\n- **Error Handling**: While exceptions are caught, the procedure does not re-throw them, which might hide issues from the calling application.\n- **Parameter Defaults**: Defaulting `@userId` to 0 might lead to incorrect logging if not properly handled.\n- **Concurrency**: The procedure does not handle concurrency explicitly, which might be an issue in high-transaction environments.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized data access.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2408,
      "api_response_id": "chatcmpl-C8b0vvpeF25jHRb39eUNNxVZE13cm"
    },
    "analysis_timestamp": "2025-08-25 19:35:56"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceContractLineAllocationRetrieve",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceContractLineAllocationRetrieve]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId\t= ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t\tRAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reports - Retrieved invoice contract line allocations'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceIsSplitFY AS BIT = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tSELECT ICLA.InvoiceContractLineAllocationID\r\n\t\t\t\t,ICLA.AllocationFiscalYear\r\n\t\t\t\t,ICLA.AllocationAmount\r\n\t\t\t\t,ICLA.InvoiceContractLineID\r\n\t\t\t\t,ICLA.InvoiceID\r\n\t\t\t\t,ICLA.InvoiceNumber\r\n\t\t\t\t,ICLA.ContractID\r\n\t\t\t\t,ICLA.ContractNumber\r\n\t\t\t\t,ICLA.FiscalYear\r\n\t\t\t\t,ICLA.CommodityLine\r\n\t\t\t\t,ICLA.AccountingLine\r\n\t\t\t\t,ICLA.BudgetCode\r\n\t\t\t\t,ICLA.ObjectCode\r\n\t\t\t\t,ICLA.UoA\r\n\t\t\t\t,ICLA.AmountPaid\r\n\t\t\t\t,ICLA.Comments\r\n\t\t\t\t,ICLA.CreatedBy\r\n\t\t\t\t,b.CreatedDate AS CreatedDate\r\n\t\t\t\t,ICLA.ModifiedBy\r\n\t\t\t\t,ICLA.ModifiedDate\r\n\t\t\t\t,ICLA.Active\r\n\t\t\tFROM Invoice.vwInvoiceContractLineAllocations AS ICLA\r\n\t\t\t\tINNER JOIN Invoice.Invoice AS b ON ICLA.InvoiceID = b.InvoiceID\r\n\t\t\tWHERE ICLA.InvoiceID = ISNULL(@invoiceId, ICLA.InvoiceID)\r\n\t\t\t\tAND ICLA.InvoiceNumber = ISNULL(@invoiceNumber, ICLA.InvoiceNumber)\r\n\t\t\tORDER BY ICLA.ContractNumber ASC\r\n\t\t\t\t,ICLA.FiscalYear DESC\r\n\t\t\t\t,ICLA.CommodityLine ASC\r\n\t\t\t\t,ICLA.AccountingLine ASC;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH tmpTbl AS (SELECT InvoiceContractLineAllocationID\r\n\t\t\t\t\t,AllocationFiscalYear\r\n\t\t\t\t\t,AmountPaid AS AllocationAmount\r\n\t\t\t\t\t,InvoiceContractLineID\r\n\t\t\t\t\t,InvoiceID\r\n\t\t\t\t\t,InvoiceNumber\r\n\t\t\t\t\t,ContractID\r\n\t\t\t\t\t,ContractNumber\r\n\t\t\t\t\t,FiscalYear\r\n\t\t\t\t\t,CommodityLine\r\n\t\t\t\t\t,AccountingLine\r\n\t\t\t\t\t,BudgetCode\r\n\t\t\t\t\t,ObjectCode\r\n\t\t\t\t\t,UoA\r\n\t\t\t\t\t,AllocationAmount AS AmountPaid\r\n\t\t\t\t\t,Comments\r\n\t\t\t\t\t,CreatedBy\r\n\t\t\t\t\t,CreatedDate\r\n\t\t\t\t\t,ModifiedBy\r\n\t\t\t\t\t,ModifiedDate\r\n\t\t\t\t\t,Active\r\n\t\t\t\tFROM Invoice.vwInvoiceContractLineAllocations\r\n\t\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\t\tAND InvoiceNumber\t= ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\t\t\t\tAND AllocationAmount <> 0)\r\n\t\t\t,fyTbl AS (SELECT ContractID\r\n\t\t\t\t\t,FiscalYear = STUFF((SELECT DISTINCT ', ' + AllocationFiscalYear\r\n\t\t\t\t\t\tFROM tmpTbl b \r\n\t\t\t\t\t\tWHERE b.ContractID = a.ContractID \r\n\t\t\t\t\t\tFOR XML PATH('')), 1, 2, '')\r\n\t\t\t\tFROM tmpTbl AS a\r\n\t\t\t\tGROUP BY ContractID)\r\n\t\t\tSELECT R.InvoiceContractLineAllocationID\r\n\t\t\t\t,R.AllocationFiscalYear\r\n                ,R.AllocationAmount\r\n                ,R.InvoiceContractLineID\r\n                ,R.InvoiceID\r\n                ,R.InvoiceNumber\r\n                ,R.ContractID\r\n                ,R.ContractNumber\r\n\t\t\t\t,R.FiscalYear\r\n                ,R.CommodityLine\r\n                ,R.AccountingLine\r\n                ,R.BudgetCode\r\n                ,R.ObjectCode\r\n                ,R.UoA\r\n                ,R.AmountPaid\r\n                ,R.Comments\r\n                ,R.CreatedBy\r\n                ,R.CreatedDate\r\n                ,R.ModifiedBy\r\n                ,R.ModifiedDate\r\n                ,R.Active\r\n\t\t\tFROM tmpTbl AS R\r\n\t\t\tORDER BY R.ContractNumber ASC\r\n\t\t\t\t,R.FiscalYear DESC\r\n\t\t\t\t,R.CommodityLine ASC\r\n\t\t\t\t,R.AccountingLine ASC;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice contract line allocations', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.817000",
      "last_altered": "2025-08-25 16:04:01.817000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceContractLineAllocationRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceContractLineAllocationRetrieve` is designed to retrieve invoice contract line allocation details from a SQL Server database. It accepts various input parameters to filter the data retrieval process and logs the operation's details, including any exceptions encountered. The procedure handles invoices that may or may not be split across fiscal years differently, using a specific user-defined function to determine the invoice type.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves conditional logic to handle different types of invoices (split fiscal year vs. non-split).\n- It uses common table expressions (CTEs) for data transformation.\n- It includes error handling and logging mechanisms.\n- It interacts with a user-defined function and another stored procedure for logging.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: The unique identifier for the invoice.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: The invoice number.\n- `@correlationId AS VARCHAR(128) = NULL`: A unique identifier for tracking the operation, defaulting to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaulting to the server name.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process, defaulting to the schema and procedure name.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the person executing the procedure.\n- `@userId AS INT = NULL`: The user ID, defaulting to 0 if not provided.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception details.\n\n#### 4. Business Logic and Workflow\n- **Initialization**: The procedure initializes parameters, setting defaults where necessary.\n- **Validation**: It checks if either `@invoiceId` or `@invoiceNumber` is provided; otherwise, it raises an error.\n- **Invoice Type Check**: It uses the function `Billing.UDF_IsSplitFYInvoice` to determine if the invoice is split across fiscal years.\n- **Data Retrieval**:\n  - **Non-Split Invoices**: Directly retrieves data from the `vwInvoiceContractLineAllocations` view, joining with the `Invoice` table.\n  - **Split Invoices**: Uses CTEs to transform and retrieve data, ensuring only non-zero allocations are considered.\n- **Error Handling**: Catches exceptions, logs error details, and sets a flag to send an email notification.\n- **Logging**: Calls `dbo.USP_AppLogCreate` to log the operation's details, including execution time and any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Isolation Level**: The use of `READ UNCOMMITTED` can improve performance by reducing locking but may lead to reading uncommitted data.\n- **Conditional Logic**: The procedure's performance may vary based on the invoice type due to different query paths.\n- **CTEs**: While CTEs can simplify complex queries, they may impact performance if not optimized, especially with large datasets.\n- **Indexing**: The performance of the SELECT queries depends on the indexing of the `vwInvoiceContractLineAllocations` view and `Invoice` table.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: Using `READ UNCOMMITTED` can lead to dirty reads, which may not be acceptable in all scenarios.\n- **Error Handling**: While exceptions are caught, the procedure does not re-throw them, which might mask underlying issues.\n- **Parameter Defaults**: Defaulting `@userId` to 0 could lead to incorrect logging if not properly managed.\n- **Scalability**: The procedure's performance may degrade with large datasets, especially if the CTEs are not optimized.\n- **Logging Overhead**: Frequent logging, especially with detailed exception messages, could impact performance and storage.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2485,
      "api_response_id": "chatcmpl-C8b1CuvBpramaFcdYy0ykiRfr3kCX"
    },
    "analysis_timestamp": "2025-08-25 19:36:24"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceContractLineAllocationRetrieve_AandA",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceContractLineAllocationRetrieve_AandA]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\t\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t\tRAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reports - Retrieved invoice contract line allocations'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceIsSplitFY AS BIT = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tSELECT ICLA.ContractNumber AS [Contract]\r\n\t\t\t\t,ICLA.AllocationFiscalYear AS [Fiscal Year]\r\n\t\t\t\t,ICLA.CommodityLine AS [Commodity Line]\r\n\t\t\t\t,ICLA.AccountingLine AS [Accounting Line]\r\n\t\t\t\t,ICLA.UoA AS [U/A]\r\n\t\t\t\t,ICLA.BudgetCode AS [Budget Code]\r\n\t\t\t\t,ICLA.ObjectCode AS [Object Code]\r\n\t\t\t\t,FORMAT(ICLA.AllocationAmount, 'C') AS [Allocation Amount]\r\n\t\t\tFROM Invoice.vwInvoiceContractLineAllocations AS ICLA\r\n\t\t\t\tINNER JOIN Invoice.Invoice AS b ON ICLA.InvoiceID = b.InvoiceID\r\n\t\t\tWHERE ICLA.InvoiceID = ISNULL(@invoiceId, ICLA.InvoiceID)\r\n\t\t\t\tAND ICLA.InvoiceNumber = ISNULL(@invoiceNumber, ICLA.InvoiceNumber)\r\n\t\t\tORDER BY ICLA.ContractNumber ASC\r\n\t\t\t\t,ICLA.FiscalYear DESC\r\n\t\t\t\t,ICLA.CommodityLine ASC\r\n\t\t\t\t,ICLA.AccountingLine ASC;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH tmpTbl AS (SELECT ICLA.ContractNumber\r\n\t\t\t\t\t,ICLA.AllocationFiscalYear\r\n\t\t\t\t\t,ICLA.CommodityLine\r\n\t\t\t\t\t,ICLA.AccountingLine\r\n\t\t\t\t\t,ICLA.UoA\r\n\t\t\t\t\t,ICLA.BudgetCode\r\n\t\t\t\t\t,ICLA.ObjectCode\r\n\t\t\t\t\t,ISNULL((SELECT SUM(a.AllocationAmount)\r\n\t\t\t\t\t\t\tFROM invoice.InvoiceContractLineAllocation a\r\n\t\t\t\t\t\t\t\tINNER JOIN invoice.InvoiceContractLine b ON a.InvoiceContractLineID = b.InvoiceContractLineID\r\n\t\t\t\t\t\t\t\tINNER JOIN invoice.Invoice c ON b.InvoiceID = c.InvoiceID\r\n\t\t\t\t\t\t\tGROUP BY c.InvoiceID, a.AllocationAmount, a.AllocationFiscalYear, b.InvoiceContractLineID, b.FiscalYear\r\n\t\t\t\t\t\t\tHAVING b.InvoiceContractLineID = ICLA.InvoiceContractLineID AND a.AllocationFiscalYear = ICLA.AllocationFiscalYear\r\n\t\t\t\t\t\t),0) AS AllocationAmount\r\n\t\t\t\tFROM Invoice.vwInvoiceContractLineAllocations ICLA\r\n\t\t\t\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\t\t\t\tAND AllocationAmount <> 0)\r\n\t\t\tSELECT R.ContractNumber AS [Contract]\r\n\t\t\t\t,R.AllocationFiscalYear AS [Fiscal Year]\r\n\t\t\t\t,R.CommodityLine AS [Commodity Line]\r\n\t\t\t\t,R.AccountingLine AS [Accounting Line]\r\n\t\t\t\t,R.UoA AS [U/A]\r\n\t\t\t\t,R.BudgetCode AS [Budget Code]\r\n\t\t\t\t,R.ObjectCode AS [Object Code]\r\n\t\t\t\t,FORMAT(R.AllocationAmount, 'C') AS [Allocation Amount]\r\n\t\t\tFROM tmpTbl AS R\r\n\t\t\tORDER BY R.ContractNumber ASC\r\n\t\t\t\t,R.AllocationFiscalYear ASC\r\n\t\t\t\t,R.CommodityLine ASC\r\n\t\t\t\t,R.AccountingLine ASC;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice contract line allocations', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.823000",
      "last_altered": "2025-08-25 16:04:01.823000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceContractLineAllocationRetrieve_AandA",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceContractLineAllocationRetrieve_AandA` is designed to retrieve invoice contract line allocations from a SQL Server database. It accepts various parameters to filter and log the retrieval process, and it handles both standard and split fiscal year invoices. The procedure logs its operations and any exceptions encountered during execution.\n\n#### 2. Complexity Level: Medium\nThe procedure involves conditional logic, dynamic SQL-like behavior with XML, and error handling, which adds to its complexity. It also includes logging and performance measurement, making it more than a simple data retrieval operation.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional; specifies the invoice ID to filter the results.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional; specifies the invoice number to filter the results.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional; used for logging to correlate logs with specific operations.\n- `@machineName AS VARCHAR(128) = NULL`: Optional; used for logging the machine name where the procedure is executed.\n- `@processName AS VARCHAR(128) = NULL`: Optional; used for logging the process name.\n- `@domain AS VARCHAR(25) = NULL`: Optional; used for logging the domain name.\n- `@username AS VARCHAR(25) = NULL`: Optional; used for logging the username.\n- `@userId AS INT = NULL`: Optional; used for logging the user ID.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter; captures exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: Sets default values for parameters and initializes logging-related variables.\n2. **Validation**: Checks if either `@invoiceId` or `@invoiceNumber` is provided; raises an error if both are missing.\n3. **Logging Setup**: Prepares logging details, including a unique correlation ID and machine/process names.\n4. **Main Logic**:\n   - Determines if the invoice is a split fiscal year invoice using a user-defined function `Billing.UDF_IsSplitFYInvoice`.\n   - If not split, retrieves data directly from `vwInvoiceContractLineAllocations` joined with `Invoice`.\n   - If split, uses a Common Table Expression (CTE) to aggregate allocation amounts and retrieve data.\n5. **Error Handling**: Catches exceptions, logs error details, and sets a flag to send an email notification.\n6. **Logging**: Logs the operation details, including execution time, using `dbo.USP_AppLogCreate`.\n\n#### 5. Performance Considerations\n- **Transaction Isolation Level**: Uses `READ UNCOMMITTED`, which can improve performance by avoiding locks but may result in reading uncommitted data.\n- **Conditional Logic**: The procedure uses conditional logic to handle different invoice types, which can affect performance based on the complexity of the conditions.\n- **CTE Usage**: The use of a CTE for split fiscal year invoices can be resource-intensive if the underlying data set is large.\n- **Logging Overhead**: Extensive logging, especially with detailed exception handling, can add overhead to the procedure's execution time.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: Using `READ UNCOMMITTED` can lead to dirty reads, which might not be acceptable in all business scenarios.\n- **Error Handling**: While exceptions are caught, the procedure does not re-throw them, which might hide issues from the calling application.\n- **Parameter Validation**: The procedure raises an error if both `@invoiceId` and `@invoiceNumber` are missing, but it does not validate other parameters, which might lead to unexpected behavior.\n- **Scalability**: The CTE and aggregation logic for split fiscal year invoices might not scale well with large data volumes.\n- **Security**: The procedure does not include any explicit security checks or permissions, relying on the database's security model.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2327,
      "api_response_id": "chatcmpl-C8b1eoJgEcM00JrxfItbmykBQ4u95"
    },
    "analysis_timestamp": "2025-08-25 19:36:43"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceContractLineRetrieve",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceContractLineRetrieve]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId\t= ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t\tRAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reports - Retrieved invoice contract lines'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceIsSplitFY AS BIT = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tSELECT InvoiceContractLineID\r\n\t\t\t\t,InvoiceID\r\n\t\t\t\t,InvoiceNumber\r\n\t\t\t\t,ContractID\r\n\t\t\t\t,ContractNumber\r\n\t\t\t\t,ContractLineID\r\n\t\t\t\t,FiscalYear\r\n\t\t\t\t,CommodityLine\r\n\t\t\t\t,AccountingLine\r\n\t\t\t\t,BudgetCode\r\n\t\t\t\t,ObjectCode\r\n\t\t\t\t,UoA\r\n\t\t\t\t,AmountPaid\r\n\t\t\t\t,CreatedDate\r\n\t\t\t\t,CreatedBy\r\n\t\t\t\t,ModifiedDate\r\n\t\t\t\t,ModifiedBy\r\n\t\t\t\t,Active\r\n\t\t\tFROM Invoice.vwInvoiceContractLines\r\n\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\t\tORDER BY ContractNumber ASC\r\n\t\t\t\t,FiscalYear DESC\r\n\t\t\t\t,CommodityLine ASC\r\n\t\t\t\t,AccountingLine ASC;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH tmpTbl AS (SELECT InvoiceContractLineID\r\n\t\t\t\t\t,InvoiceID\r\n\t\t\t\t\t,InvoiceNumber\r\n\t\t\t\t\t,ContractID\r\n\t\t\t\t\t,ContractNumber\r\n\t\t\t\t\t,ContractLineID\r\n\t\t\t\t\t,FiscalYear\r\n\t\t\t\t\t,CommodityLine\r\n\t\t\t\t\t,AccountingLine\r\n\t\t\t\t\t,BudgetCode\r\n\t\t\t\t\t,ObjectCode\r\n\t\t\t\t\t,UoA\r\n\t\t\t\t\t,AmountPaid\r\n\t\t\t\t\t,CreatedDate\r\n\t\t\t\t\t,CreatedBy\r\n\t\t\t\t\t,ModifiedDate\r\n\t\t\t\t\t,ModifiedBy\r\n\t\t\t\t\t,Active\r\n\t\t\t\tFROM Invoice.vwInvoiceContractLines\r\n\t\t\t\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber))\r\n\t\t\t,fyTbl AS (SELECT ContractID\r\n\t\t\t\t\t,FiscalYear = STUFF((SELECT DISTINCT ', ' + b.FiscalYear\r\n\t\t\t\t\t\tFROM tmpTbl AS b\r\n\t\t\t\t\t\tWHERE b.ContractID = a.ContractID\r\n\t\t\t\t\t\tFOR XML PATH('')), 1, 2, '')\r\n\t\t\t\tFROM tmpTbl AS a\r\n\t\t\t\tGROUP BY ContractID)\r\n\t\t\tSELECT T.InvoiceContractLineID\r\n                   ,T.InvoiceID\r\n                   ,T.InvoiceNumber\r\n                   ,T.ContractID\r\n                   ,T.ContractNumber\r\n                   ,T.ContractLineID\r\n                   ,T.FiscalYear\r\n                   ,T.CommodityLine\r\n                   ,T.AccountingLine\r\n                   ,T.BudgetCode\r\n                   ,T.ObjectCode\r\n                   ,T.UoA\r\n                   ,T.AmountPaid\r\n                   ,T.CreatedDate\r\n                   ,T.CreatedBy\r\n                   ,T.ModifiedDate\r\n                   ,T.ModifiedBy\r\n                   ,T.Active\r\n\t\t\tFROM tmpTbl AS T\r\n\t\t\t\tINNER JOIN fyTbl AS F ON F.ContractID = T.ContractID\r\n\t\t\tORDER BY T.ContractNumber ASC\r\n\t\t\t\t,T.FiscalYear DESC\r\n\t\t\t\t,T.CommodityLine ASC\r\n\t\t\t\t,T.AccountingLine ASC;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice contract lines', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.833000",
      "last_altered": "2025-08-25 16:04:01.833000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceContractLineRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceContractLineRetrieve` is designed to retrieve invoice contract line details from a view named `Invoice.vwInvoiceContractLines`. It allows filtering based on either an invoice ID or an invoice number. The procedure also logs the operation details, including any exceptions encountered during execution, using another stored procedure `dbo.USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\nThe complexity of this stored procedure is considered medium due to the following factors:\n- It involves conditional logic to handle different scenarios based on whether the invoice is split across fiscal years.\n- It uses Common Table Expressions (CTEs) to manage complex queries for invoices split across fiscal years.\n- It includes error handling and logging mechanisms.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional; specifies the invoice ID to filter the results.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional; specifies the invoice number to filter the results.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional; used for logging purposes to correlate logs.\n- `@machineName AS VARCHAR(128) = NULL`: Optional; specifies the machine name for logging.\n- `@processName AS VARCHAR(128) = NULL`: Optional; specifies the process name for logging.\n- `@domain AS VARCHAR(25) = NULL`: Optional; specifies the domain for logging.\n- `@username AS VARCHAR(25) = NULL`: Optional; specifies the username for logging.\n- `@userId AS INT = NULL`: Optional; specifies the user ID for logging.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output; captures any exception details encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization**: The procedure initializes parameters, setting defaults where necessary. It ensures that either `@invoiceId` or `@invoiceNumber` is provided, raising an error if both are missing.\n2. **Logging Setup**: Prepares logging details, including action type, severity, and message.\n3. **Invoice Retrieval**:\n   - **Non-Split Fiscal Year**: If the invoice is not split across fiscal years, it retrieves data directly from the view `Invoice.vwInvoiceContractLines` based on the provided invoice ID or number.\n   - **Split Fiscal Year**: If the invoice is split, it uses CTEs to aggregate fiscal year data and joins to retrieve the relevant contract lines.\n4. **Error Handling**: Uses a `TRY...CATCH` block to handle exceptions, capturing error messages and adjusting logging details accordingly.\n5. **Logging**: Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions and the time taken for execution.\n\n#### 5. Performance Considerations\n- **Transaction Isolation Level**: The procedure uses `READ UNCOMMITTED`, which can improve performance by allowing dirty reads but may lead to inconsistent data.\n- **Conditional Logic**: The use of conditional logic and CTEs can impact performance, especially if the dataset is large.\n- **Indexing**: Performance can be improved by ensuring that the columns used in the `WHERE` clause (`InvoiceID`, `InvoiceNumber`) are indexed.\n\n#### 6. Potential Issues or Risks\n- **Data Consistency**: Using `READ UNCOMMITTED` can lead to reading uncommitted changes, which might not be suitable for all business scenarios.\n- **Error Handling**: While exceptions are logged, the procedure does not re-throw them, which might lead to silent failures if not monitored properly.\n- **Parameter Validation**: The procedure raises an error if both `@invoiceId` and `@invoiceNumber` are missing, but it does not validate other parameters, which might lead to unexpected behavior if invalid data is provided.\n- **Scalability**: The use of CTEs and complex joins might affect scalability as data volume grows, necessitating performance tuning and optimization.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2297,
      "api_response_id": "chatcmpl-C8b1wZPvj7RY1eafcf6JvADgNW5D9"
    },
    "analysis_timestamp": "2025-08-25 19:36:52"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceContractLineRetrieve_AandA",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceContractLineRetrieve_AandA]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId\t= ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t\tRAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reports - Retrieved invoice contract lines'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceIsSplitFY AS BIT = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tSELECT CommodityLine AS [Commodity Line]\r\n\t\t\t\t,AccountingLine AS [Accounting Line]\r\n\t\t\t\t,UoA AS [U/A]\r\n\t\t\t\t,BudgetCode AS [Budget Code]\r\n\t\t\t\t,ObjectCode AS [Object Code]\r\n\t\t\t\t,FORMAT(AmountPaid, 'C') AS [Payment Amount]\r\n\t\t\tFROM Invoice.vwInvoiceContractLines\r\n\t\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\t\tORDER BY ContractNumber ASC\r\n\t\t\t\t,FiscalYear DESC\r\n\t\t\t\t,CommodityLine ASC\r\n\t\t\t\t,AccountingLine ASC;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH tmpTbl AS(SELECT InvoiceContractLineID\r\n\t\t\t\t\t,InvoiceID\r\n\t\t\t\t\t,InvoiceNumber\r\n\t\t\t\t\t,ContractID\r\n\t\t\t\t\t,ContractNumber\r\n\t\t\t\t\t,ContractLineID\r\n\t\t\t\t\t,FiscalYear\r\n\t\t\t\t\t,CommodityLine\r\n\t\t\t\t\t,AccountingLine\r\n\t\t\t\t\t,BudgetCode\r\n\t\t\t\t\t,ObjectCode\r\n\t\t\t\t\t,UoA\r\n\t\t\t\t\t,AmountPaid\r\n\t\t\t\t\t,CreatedDate\r\n\t\t\t\t\t,CreatedBy\r\n\t\t\t\t\t,ModifiedDate\r\n\t\t\t\t\t,ModifiedBy\r\n\t\t\t\t\t,Active\r\n\t\t\t\tFROM Invoice.vwInvoiceContractLines\r\n\t\t\t\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\t\t\t\tAND InvoiceNumber\t= ISNULL(@invoiceNumber, InvoiceNumber))\r\n\t\t\t,fyTbl AS(SELECT a.ContractID\r\n\t\t\t\t\t,FiscalYear = STUFF((SELECT DISTINCT ', ' + b.FiscalYear\r\n\t\t\t\t\t\tFROM tmpTbl AS b\r\n\t\t\t\t\t\tWHERE b.ContractID = a.ContractID\r\n\t\t\t\t\t\tFOR XML PATH('')), 1, 2, '')\r\n\t\t\t\tFROM tmpTbl AS a\r\n\t\t\t\tGROUP BY a.ContractID)\r\n\t\t\tSELECT T.CommodityLine AS [Commodity Line]\r\n\t\t\t\t,T.AccountingLine AS [Accounting Line]\r\n\t\t\t\t,T.UoA AS [U/A]\r\n\t\t\t\t,T.BudgetCode AS [Budget Code]\r\n\t\t\t\t,T.ObjectCode AS [Object Code]\r\n\t\t\t\t,FORMAT(T.AmountPaid, 'C') AS [Payment Amount]\r\n\t\t\tFROM tmpTbl AS T\r\n\t\t\t\tINNER JOIN fyTbl AS F ON F.ContractID = T.ContractID\r\n\t\t\tORDER BY T.ContractNumber ASC\r\n\t\t\t\t,T.FiscalYear DESC\r\n\t\t\t\t,T.CommodityLine ASC\r\n\t\t\t\t,T.AccountingLine ASC;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice contract lines', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.843000",
      "last_altered": "2025-08-25 16:04:01.843000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceContractLineRetrieve_AandA",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceContractLineRetrieve_AandA` is designed to retrieve invoice contract line details from a view named `vwInvoiceContractLines` within the `Invoice` schema. It accepts various parameters to filter the data and logs the operation's details, including any exceptions encountered during execution. The procedure also handles invoices that may be split across fiscal years differently from those that are not.\n\n#### 2. Complexity Level: Medium\nThe complexity is considered medium due to the following factors:\n- Conditional logic based on whether an invoice is split across fiscal years.\n- Use of Common Table Expressions (CTEs) for handling split fiscal year invoices.\n- Error handling with a `TRY...CATCH` block.\n- Logging of operation details and exceptions.\n- Multiple input parameters with default values and transformations.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: The identifier for the invoice. Used to filter the invoice data.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: The number of the invoice. Used as an alternative filter to `@invoiceId`.\n- `@correlationId AS VARCHAR(128) = NULL`: A unique identifier for the operation, defaulting to a new GUID if not provided.\n- `@machineName AS VARCHAR(128) = NULL`: The name of the machine executing the procedure, defaulting to the server name.\n- `@processName AS VARCHAR(128) = NULL`: The name of the process executing the procedure, defaulting to the procedure's schema and name.\n- `@domain AS VARCHAR(25) = NULL`: The domain of the user executing the procedure.\n- `@username AS VARCHAR(25) = NULL`: The username of the user executing the procedure.\n- `@userId AS INT = NULL`: The user ID of the user executing the procedure, defaulting to 0 if not provided.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: An output parameter to capture any exception messages.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**:\n   - Sets default values for parameters using `NULLIF`, `ISNULL`, and `COALESCE`.\n   - Validates that either `@invoiceId` or `@invoiceNumber` is provided, raising an error if both are missing or invalid.\n\n2. **Logging Setup**:\n   - Initializes logging-related variables such as `@action`, `@severity`, `@message`, and `@messageDetails`.\n\n3. **Main Logic**:\n   - Uses a `TRY...CATCH` block to handle potential errors.\n   - Calls a user-defined function `Billing.UDF_IsSplitFYInvoice` to determine if the invoice is split across fiscal years.\n   - If not split, retrieves data directly from `vwInvoiceContractLines`.\n   - If split, uses CTEs to handle the fiscal year aggregation and then retrieves the data.\n\n4. **Error Handling**:\n   - In the `CATCH` block, captures error details and sets logging variables accordingly.\n\n5. **Logging**:\n   - Calculates the elapsed time for the operation.\n   - Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Isolation Level**: The use of `READ UNCOMMITTED` can improve performance by reducing locking but may lead to reading uncommitted data.\n- **Parameter Defaults and Transformations**: Efficient use of `NULLIF`, `ISNULL`, and `COALESCE` ensures parameters are correctly initialized.\n- **CTEs**: While useful for readability, CTEs can impact performance if not optimized, especially with large datasets.\n- **Error Handling**: The `TRY...CATCH` block adds overhead but is necessary for robust error management.\n\n#### 6. Potential Issues or Risks\n- **Data Integrity**: Using `READ UNCOMMITTED` can lead to dirty reads, which might not be acceptable in all scenarios.\n- **Error Handling**: The procedure logs errors but does not rethrow them, which might be necessary for some applications.\n- **Parameter Validation**: The procedure raises an error if both `@invoiceId` and `@invoiceNumber` are invalid, but it does not handle cases where both are provided with conflicting data.\n- **Scalability**: The use of CTEs and the potential size of the `vwInvoiceContractLines` view could impact performance as data volume grows.\n- **Logging Overhead**: Frequent logging, especially with detailed exception messages, could impact performance and storage.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2343,
      "api_response_id": "chatcmpl-C8b25BMd0i2Gqr939YPgMMc1FR4RR"
    },
    "analysis_timestamp": "2025-08-25 19:37:07"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceDetailsRetrieve",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceDetailsRetrieve]\r\n(\r\n    @invoiceNumber AS VARCHAR(25) = NULL\r\n    ,@providerId AS INT = NULL\r\n    ,@groupId AS INT = NULL\r\n    ,@fiscalYear AS VARCHAR(4) = NULL\r\n    ,@contractId AS INT = NULL\r\n    ,@billingPeriod AS VARCHAR(6) = NULL\r\n    ,@fromDate AS DATETIME = NULL\r\n    ,@toDate AS DATETIME = NULL\r\n    ,@statusId AS INT = NULL\r\n)\r\nAS\r\nBEGIN\r\n    SET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n    SELECT @invoiceNumber = NULLIF(@invoiceNumber, '0'), @providerId = NULLIF(@providerId, 0), @groupId = NULLIF(@groupId, 0)\r\n        ,@fiscalYear = NULLIF(@fiscalYear, ''), @contractId = NULLIF(@contractId, 0), @billingPeriod = NULLIF(@billingPeriod, '0')\r\n        ,@statusId = NULLIF(@statusId, 0);\r\n\r\n\tSELECT IAB.InvoiceNumber AS InvoiceNumber\r\n\t\t,FORMAT(INV.InvoiceDate, 'M/d/yyyy') AS InvoiceDate\r\n\t\t,SUBSTRING(P.Payments, 0, 1000) AS Payments\r\n\t\t,INVSTS.StatusDescription AS [Status]\r\n\t\t,IAB.GroupName AS GroupName\r\n\t\t,SUBSTRING(C.ContractNumbers, 0, 65) AS ContractNumber\r\n\t\t,IAB.AccountNumber AS AccountNumber\r\n\t\t,IIF(IAB.IsEstimated = 1, 'Estimated', 'Actual') AS IsEstimatedOrActual\r\n\t\t,IAB.BillingPeriod AS BillingPeriod\r\n\t\t,FORMAT(IAB.FromDate, 'M/d/yyyy') + ' - ' + FORMAT(IAB.ToDate, 'M/d/yyyy') AS [FromToDate]\r\n\t\t,IAB.EnergyUsage + ' / ' + IAB.DemandUsage AS EnergyDemandUsage\r\n\t\t,FORMAT(IAB.AmountBilled, 'C') + ' / ' + FORMAT(IAB.AmountPaid, 'C') AS AmountBilledPaid\r\n\t\t,FORMAT(IAB.AmountPaidPriorFY, 'C') + ' / ' + FORMAT(IAB.AmountPaidCurrentFY, 'C') AS AmountPaidPriorCurrentFY\r\n\tFROM Invoice.vwInvoiceAccountBillings AS IAB\r\n\t\tINNER JOIN Invoice.Invoice AS INV ON INV.InvoiceID = IAB.InvoiceID\r\n\t\tINNER JOIN Invoice.InvoiceStatus AS INVSTS ON INVSTS.StatusID = INV.StatusID\r\n\t\tLEFT JOIN (SELECT InvoiceID, STRING_AGG(PaymentNumber, ', ') AS Payments\r\n\t\t\tFROM Invoice.vwInvoicePayments\r\n\t\t\tGROUP BY InvoiceID) AS P ON P.InvoiceID = INV.InvoiceID\r\n\t\tLEFT JOIN (SELECT InvoiceID, GroupID, STRING_AGG(ContractNumber, ', ') AS ContractNumbers\r\n\t\t\tFROM Invoice.vwInvoiceGroupContracts\r\n\t\t\tGROUP BY InvoiceID, GroupID) AS C ON C.InvoiceID = INV.InvoiceID AND C.GroupID = IAB.GroupID\r\n\tWHERE (@invoiceNumber IS NULL OR IAB.InvoiceNumber = @invoiceNumber)\r\n\t\tAND (@providerId IS NULL OR INV.ProviderID = @providerId)\r\n\t\tAND (@groupId IS NULL OR IAB.GroupID = @groupId)\r\n\t\tAND (@fiscalYear IS NULL OR IAB.FiscalYear = @fiscalYear)\r\n\t\tAND (@contractId IS NULL OR IAB.ContractID = @contractId)\r\n\t\tAND (@billingPeriod IS NULL OR IAB.BillingPeriod = @billingPeriod)\r\n\t\tAND (@fromDate IS NULL OR IAB.FromDate >= @fromDate)\r\n\t\tAND (@toDate IS NULL OR IAB.ToDate <= @toDate)\r\n\t\tAND (@statusId IS NULL OR INV.StatusID = @statusId)\r\n\tORDER BY INV.InvoiceDate DESC, IAB.AccountNumber ASC;\t\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.850000",
      "last_altered": "2025-08-25 16:04:01.850000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingPeriod",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 6,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fromDate",
        "data_type": "datetime",
        "mode": "IN",
        "max_length": 8,
        "precision": 23,
        "scale": 3,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@toDate",
        "data_type": "datetime",
        "mode": "IN",
        "max_length": 8,
        "precision": 23,
        "scale": 3,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@statusId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceDetailsRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceDetailsRetrieve` is designed to retrieve detailed invoice information from a SQL Server database. It allows filtering based on various parameters such as invoice number, provider ID, group ID, fiscal year, contract ID, billing period, date range, and status ID. The procedure fetches data from multiple tables and views, aggregates certain fields, and formats the output for readability.\n\n#### 2. Complexity Level: Medium\n\n#### 3. Input Parameters\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Filters results by a specific invoice number.\n- `@providerId AS INT = NULL`: Filters results by a specific provider ID.\n- `@groupId AS INT = NULL`: Filters results by a specific group ID.\n- `@fiscalYear AS VARCHAR(4) = NULL`: Filters results by a specific fiscal year.\n- `@contractId AS INT = NULL`: Filters results by a specific contract ID.\n- `@billingPeriod AS VARCHAR(6) = NULL`: Filters results by a specific billing period.\n- `@fromDate AS DATETIME = NULL`: Filters results to include only invoices from this date onwards.\n- `@toDate AS DATETIME = NULL`: Filters results to include only invoices up to this date.\n- `@statusId AS INT = NULL`: Filters results by a specific status ID.\n\n#### 4. Business Logic and Workflow\n- **Initialization**: The procedure begins by setting `NOCOUNT ON` to prevent the message that shows the count of affected rows from being returned. It also sets the transaction isolation level to `READ UNCOMMITTED` to allow dirty reads, which can improve performance by not locking the data.\n- **Parameter Normalization**: The procedure uses `NULLIF` to convert certain default values (like '0' or empty strings) to `NULL`, which simplifies the filtering logic.\n- **Data Retrieval**: The main `SELECT` statement retrieves data from the `vwInvoiceAccountBillings`, `Invoice`, and `InvoiceStatus` tables/views. It uses `INNER JOIN` and `LEFT JOIN` to combine data from related tables.\n  - **Aggregations**: Uses `STRING_AGG` to concatenate payment numbers and contract numbers for each invoice.\n  - **Formatting**: Formats dates and currency values for readability.\n- **Filtering**: Applies filters based on the input parameters, allowing for flexible querying.\n- **Ordering**: Results are ordered by invoice date in descending order and account number in ascending order.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED**: This isolation level can improve performance by reducing locking overhead but may return uncommitted or dirty data.\n- **String Aggregation**: The use of `STRING_AGG` can be resource-intensive, especially if the dataset is large.\n- **Indexes**: Performance can be significantly affected by the presence or absence of appropriate indexes on the columns used in joins and filters.\n- **Parameter Sniffing**: The use of optional parameters can lead to suboptimal query plans if SQL Server caches a plan based on specific parameter values.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The use of `READ UNCOMMITTED` can lead to inconsistencies if the data is being modified concurrently.\n- **NULL Handling**: The conversion of default values to `NULL` may lead to unexpected results if not handled correctly in the application logic.\n- **Scalability**: As the dataset grows, the performance of string aggregation and joins may degrade, necessitating optimization or refactoring.\n- **Security**: Ensure that user inputs are sanitized to prevent SQL injection, especially since the procedure uses dynamic filtering based on input parameters.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1803,
      "api_response_id": "chatcmpl-C8b2L4FWNkGbMSKYR6WgGCHbDHk68"
    },
    "analysis_timestamp": "2025-08-25 19:37:18"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceDetailsSummary_Export",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceDetailsSummary_Export]\r\n(\r\n    @invoiceNumber AS VARCHAR(25) = NULL\r\n    ,@providerId AS INT = NULL\r\n    ,@groupId AS INT = NULL\r\n    ,@fiscalYear AS VARCHAR(4) = NULL\r\n    ,@contractId AS INT = NULL\r\n    ,@billingPeriod AS VARCHAR(6) = NULL\r\n    ,@fromDate AS DATETIME = NULL\r\n    ,@toDate AS DATETIME = NULL\r\n    ,@statusId AS INT = NULL\r\n)\r\nAS\r\nBEGIN\r\n    SET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n    SELECT @invoiceNumber = NULLIF(@invoiceNumber, '0'), @providerId = NULLIF(@providerId, 0), @groupId = NULLIF(@groupId, 0)\r\n        ,@fiscalYear = NULLIF(@fiscalYear, ''), @contractId = NULLIF(@contractId, 0), @billingPeriod = NULLIF(@billingPeriod, '0')\r\n        ,@statusId = NULLIF(@statusId, 0);\r\n\r\n\tSELECT IAB.InvoiceNumber AS [Invoice #]\r\n\t\t,FORMAT(INV.InvoiceDate, 'M/d/yyyy') AS [Invoice Date]\r\n\t\t,SUBSTRING((SELECT DISTINCT ', ' + IP.PaymentNumber FROM [Invoice].[vwInvoicePayments] IP WHERE IP.InvoiceID = INV.InvoiceID FOR XML PATH('')), 2, 1000) AS [Payment(s)]\r\n\t\t,INVSTS.StatusDescription AS [Invoice Status]\r\n\t\t,IAB.GroupName AS [Invoice Billing Group]\r\n\t\t,SUBSTRING((SELECT DISTINCT ', ' + IP.ContractNumber\r\n\t\t\tFROM Invoice.vwInvoiceGroupContracts IP \r\n\t\t\tWHERE IP.InvoiceID = INV.InvoiceID AND IP.GroupID = IAB.GroupID\r\n\t\t\tORDER BY ', ' + IP.ContractNumber\r\n\t\t\tFOR XML PATH('')), 3, 65) AS [Contract(s)]\r\n\t\t,IAB.AccountNumber AS [Account #]\r\n\t\t,IIF(IAB.IsEstimated = 1, 'Estimated', 'Actual') AS [Est./Act.]\r\n\t\t,IAB.BillingPeriod AS [Billing Period]\r\n\t\t,FORMAT(IAB.FromDate, 'M/d/yyyy') AS [From Date]\r\n\t\t,FORMAT(IAB.ToDate, 'M/d/yyyy') AS [To Date]\r\n\t\t,IAB.EnergyUsage AS [Usage Energy]\r\n\t\t,IAB.DemandUsage AS [Usage Demand]\r\n\t\t,FORMAT(IAB.AmountBilled, 'C') AS [Amounts Billed]\r\n\t\t,FORMAT(IAB.AmountPaid, 'C') AS [Amounts Paid]\r\n\t\t,FORMAT(IAB.AmountPaidPriorFY, 'C') AS [Amounts Prior FY]\r\n\t\t,FORMAT(IAB.AmountPaidCurrentFY, 'C') AS [Amounts Current FY]\r\n\tFROM Invoice.vwInvoiceAccountBillings AS IAB\r\n\t\tINNER JOIN Invoice.Invoice AS INV ON INV.InvoiceID = IAB.InvoiceID --AND INV.ProviderID = ISNULL(@providerId, INV.ProviderID)\r\n\t\tINNER JOIN Invoice.InvoiceStatus AS INVSTS ON INVSTS.StatusID = INV.StatusID\r\n\tWHERE 1 = CASE WHEN NOT @invoiceNumber IS NULL THEN\r\n\t\t\t\t\tCASE WHEN IAB.InvoiceNumber = ISNULL(@invoiceNumber, IAB.InvoiceNumber) THEN 1 ELSE 0 END\r\n\t\t\t\tELSE 1 END\r\n\t\tAND 1 = CASE WHEN NOT @providerId IS NULL THEN\r\n\t\t\t\t\tCASE WHEN INV.ProviderID = ISNULL(@providerId, INV.ProviderID) THEN 1 ELSE 0 END\r\n\t\t\t\tELSE 1 END\r\n\t\tAND 1 = CASE WHEN NOT @groupId IS NULL THEN\r\n\t\t\t\t\tCASE WHEN IAB.GroupID = ISNULL(@groupId, IAB.GroupID) THEN 1 ELSE 0 END\r\n\t\t\t\tELSE 1 END\r\n\t\tAND 1 = CASE WHEN NOT @fiscalYear IS NULL THEN\r\n\t\t\t\t\tCASE WHEN IAB.FiscalYear = @fiscalYear THEN 1 ELSE 0 END\r\n\t\t\t\tELSE 1 END\r\n\t\tAND 1 = CASE WHEN NOT @contractId IS NULL THEN\r\n\t\t\t\t\tCASE WHEN IAB.ContractID = ISNULL(@contractId, IAB.ContractID) THEN 1 ELSE 0 END\r\n\t\t\t\tELSE 1 END\r\n\t\tAND 1 = CASE WHEN NOT @billingPeriod IS NULL THEN\r\n\t\t\t\t\tCASE WHEN IAB.BillingPeriod = ISNULL(@billingPeriod, IAB.BillingPeriod) THEN 1 ELSE 0 END\r\n\t\t\t\tELSE 1 END\r\n\t\tAND 1 = CASE WHEN NOT @fromDate IS NULL THEN\r\n\t\t\t\t\tCASE WHEN CONVERT(VARCHAR(12), IAB.FromDate, 112) >= CONVERT(VARCHAR(12), @fromDate, 112) THEN 1 ELSE 0 END\r\n\t\t\t\tELSE 1 END\r\n\t\tAND 1 = CASE WHEN NOT @toDate IS NULL THEN\r\n\t\t\t\t\tCASE WHEN CONVERT(VARCHAR(12), IAB.ToDate, 112) <= CONVERT(VARCHAR(12), @toDate, 112) THEN 1 ELSE 0 END\r\n\t\t\t\tELSE 1 END\r\n\t\tAND 1 = CASE WHEN NOT @statusId IS NULL THEN\r\n\t\t\t\t\tCASE WHEN INV.StatusID = ISNULL(@statusId, INV.StatusID) THEN 1 ELSE 0 END\r\n\t\t\t\tELSE 1 END\r\n\tORDER BY INV.InvoiceDate DESC, IAB.AccountNumber ASC;\t\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.853000",
      "last_altered": "2025-08-25 16:04:01.853000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingPeriod",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 6,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fromDate",
        "data_type": "datetime",
        "mode": "IN",
        "max_length": 8,
        "precision": 23,
        "scale": 3,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@toDate",
        "data_type": "datetime",
        "mode": "IN",
        "max_length": 8,
        "precision": 23,
        "scale": 3,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@statusId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceDetailsSummary_Export",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceDetailsSummary_Export` is designed to generate a summary report of invoice details based on various optional filtering criteria. It retrieves data from several views and tables related to invoices, payments, and billing accounts, and formats the output for reporting purposes. The procedure allows filtering by invoice number, provider ID, group ID, fiscal year, contract ID, billing period, date range, and status ID.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple joins, conditional filtering, and string manipulation using XML PATH for concatenating values. The complexity arises from the dynamic filtering logic and the use of subqueries to aggregate related data.\n\n#### 3. Input Parameters\n- `@invoiceNumber AS VARCHAR(25)`: Filters results by a specific invoice number.\n- `@providerId AS INT`: Filters results by a specific provider ID.\n- `@groupId AS INT`: Filters results by a specific group ID.\n- `@fiscalYear AS VARCHAR(4)`: Filters results by a specific fiscal year.\n- `@contractId AS INT`: Filters results by a specific contract ID.\n- `@billingPeriod AS VARCHAR(6)`: Filters results by a specific billing period.\n- `@fromDate AS DATETIME`: Filters results to include only records from this date onwards.\n- `@toDate AS DATETIME`: Filters results to include only records up to this date.\n- `@statusId AS INT`: Filters results by a specific invoice status ID.\n\n#### 4. Business Logic and Workflow\n- **Parameter Initialization**: The procedure initializes parameters using `NULLIF` to convert default values (like '0' or empty strings) to `NULL`, which simplifies the filtering logic.\n- **Transaction Isolation Level**: It sets the transaction isolation level to `READ UNCOMMITTED`, allowing dirty reads to improve performance by avoiding locks.\n- **Data Retrieval**: The main query retrieves invoice details, including invoice number, date, payments, status, group, contracts, account number, billing period, usage, and amounts billed and paid.\n- **String Aggregation**: Uses subqueries with `FOR XML PATH('')` to concatenate payment numbers and contract numbers into comma-separated strings.\n- **Conditional Filtering**: Implements dynamic filtering using `CASE` statements to apply filters only when parameters are not `NULL`.\n- **Ordering**: Results are ordered by invoice date in descending order and account number in ascending order.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED**: While this improves performance by reducing locking, it may lead to reading uncommitted or dirty data.\n- **String Aggregation**: The use of `FOR XML PATH('')` for string aggregation can be resource-intensive, especially with large datasets.\n- **Dynamic Filtering**: The use of `CASE` statements for filtering can lead to complex execution plans and may affect performance if not indexed properly.\n- **Indexing**: Ensure that columns used in joins and filters are indexed to optimize query performance.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The use of `READ UNCOMMITTED` can lead to inconsistencies if the underlying data is being modified concurrently.\n- **Parameter Handling**: If default values like '0' or empty strings are passed, they are converted to `NULL`, which may not be the intended behavior in all cases.\n- **String Length Limitations**: The substring operations for concatenated strings have fixed lengths, which may truncate data if the concatenated string exceeds these limits.\n- **Scalability**: As the dataset grows, the performance of string aggregation and dynamic filtering may degrade, requiring optimization or redesign.\n- **Security**: Ensure that user inputs are sanitized to prevent SQL injection, especially since the procedure uses dynamic filtering logic.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2156,
      "api_response_id": "chatcmpl-C8b2VDK0B0C6H0Vy5DcoY8ewZz1wG"
    },
    "analysis_timestamp": "2025-08-25 19:37:33"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceGroupContractRetrieve",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceGroupContractRetrieve]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId\t= ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t\tRAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reports - Retrieved invoice groups / contracts'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT IGC.InvoiceGroupContractID\r\n\t\t\t,IGC.InvoiceID\r\n\t\t\t,IGC.GroupID\r\n\t\t\t,IGC.GroupName\r\n\t\t\t,IGC.IsSummaryBilling\r\n\t\t\t,IGC.BillingType\r\n\t\t\t,IGC.AmountBilled\r\n\t\t\t,IGC.AmountPaid\r\n\t\t\t,IGC.FiscalYear\r\n\t\t\t,IGC.ContractNumber\r\n\t\t\t,IGC.ActualAmount\r\n\t\t\t,IGC.CloseAmount\r\n\t\t\t,IGC.OpenAmount\r\n\t\t\t,IGC.AvailableAmount\r\n\t\t\t,IGC.CreatedDate\r\n\t\t\t,IGC.CreatedBy\r\n\t\t\t,IGC.ModifiedDate\r\n\t\t\t,IGC.ModifiedBy\r\n\t\t\t,b.SummaryAccountNumber\r\n\t\tFROM Invoice.vwInvoiceGroupContracts AS IGC\r\n\t\t\tINNER JOIN Billing.vwBillingGroups AS b ON IGC.groupid = b.groupid\r\n\t\tWHERE IGC.InvoiceID\t= ISNULL(@invoiceId, IGC.InvoiceID)\r\n\t\t\tAND IGC.InvoiceNumber = ISNULL(@invoiceNumber, IGC.InvoiceNumber)\r\n\t\tORDER BY IGC.GroupName ASC, IGC.ContractNumber ASC, IGC.FiscalYear DESC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice groups / contracts', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.860000",
      "last_altered": "2025-08-25 16:04:01.860000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceGroupContractRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceGroupContractRetrieve` is designed to retrieve information about invoice group contracts from a database. It takes various input parameters to filter the data and logs the operation's details, including any exceptions that occur during execution. The procedure retrieves data from a view `Invoice.vwInvoiceGroupContracts` and joins it with another view `Billing.vwBillingGroups` to get additional information. It also logs the operation using another stored procedure `dbo.USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\nThe complexity level of this stored procedure is medium. It involves conditional logic, error handling, dynamic parameter handling, and logging. The use of multiple input parameters and the integration with logging mechanisms adds to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional; used to filter the query by a specific invoice ID.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional; used to filter the query by a specific invoice number.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional; used for logging purposes to correlate logs.\n- `@machineName AS VARCHAR(128) = NULL`: Optional; used for logging the machine name where the procedure is executed.\n- `@processName AS VARCHAR(128) = NULL`: Optional; used for logging the process name.\n- `@domain AS VARCHAR(25) = NULL`: Optional; used for logging the domain of the user.\n- `@username AS VARCHAR(25) = NULL`: Optional; used for logging the username.\n- `@userId AS INT = NULL`: Optional; used for logging the user ID.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter; captures any exception details if an error occurs during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**: \n   - The procedure starts by setting `NOCOUNT ON` and the transaction isolation level to `READ UNCOMMITTED` to avoid locking issues.\n   - It initializes and validates input parameters, setting defaults where necessary. If both `@invoiceId` and `@invoiceNumber` are not provided, it raises an error.\n\n2. **Data Retrieval**:\n   - The procedure attempts to retrieve data from `Invoice.vwInvoiceGroupContracts`, joining with `Billing.vwBillingGroups` on `GroupID`.\n   - It filters the results based on the provided `@invoiceId` and `@invoiceNumber`, ordering the results by `GroupName`, `ContractNumber`, and `FiscalYear`.\n\n3. **Error Handling**:\n   - A `TRY...CATCH` block is used to handle any exceptions that occur during data retrieval. If an error occurs, it captures the error message and sets the severity to 'ERROR'.\n\n4. **Logging**:\n   - The procedure calculates the elapsed time for the operation.\n   - It logs the operation details, including any exceptions, using the `dbo.USP_AppLogCreate` procedure.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED Isolation Level**: This level allows dirty reads, which can improve performance by reducing locking but may lead to reading uncommitted data.\n- **Parameter Defaults and NULL Handling**: Efficient handling of parameters with defaults and NULL values ensures that the procedure can be executed with minimal input.\n- **Index Usage**: The performance of the SELECT query depends on the indexing of the `Invoice.vwInvoiceGroupContracts` and `Billing.vwBillingGroups` views, especially on `InvoiceID`, `InvoiceNumber`, and `GroupID`.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: Using `READ UNCOMMITTED` can lead to reading uncommitted data, which might not be suitable for all business scenarios.\n- **Error Handling**: The procedure captures error messages but does not rethrow them, which might be necessary for some applications to handle errors appropriately.\n- **Parameter Validation**: The procedure raises an error if both `@invoiceId` and `@invoiceNumber` are not provided, but it does not handle cases where invalid IDs or numbers are provided.\n- **Logging Overhead**: The logging mechanism, while useful, can introduce overhead, especially if the procedure is executed frequently or if the logging procedure itself is not optimized.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1993,
      "api_response_id": "chatcmpl-C8b2kyIyJEn0DTy6BkWH7F3W7uI4t"
    },
    "analysis_timestamp": "2025-08-25 19:37:48"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceGroupContractRetrieve_AandA",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceGroupContractRetrieve_AandA]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t\tRAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reports - Retrieved invoice groups / contracts'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT IGC.GroupName AS [Group Name]\r\n\t\t\t,IGC.ContractNumber AS [Contract]\r\n\t\t\t,IGC.FiscalYear AS [FY]\r\n\t\t\t,b.SummaryAccountNumber AS [Summary Account Number]\r\n\t\t\t,FORMAT(IGC.AmountBilled, 'C') AS [Billed Amount]\r\n\t\t\t,FORMAT(IGC.AmountPaid, 'C') AS [Payment Amount]\r\n\t\tFROM Invoice.vwInvoiceGroupContracts AS IGC\r\n\t\t\tINNER JOIN Billing.vwBillingGroups AS b ON IGC.GroupID = b.GroupID\r\n\t\tWHERE IGC.InvoiceID = ISNULL(@invoiceId, IGC.InvoiceID)\r\n\t\t\tAND IGC.InvoiceNumber = ISNULL(@invoiceNumber, IGC.InvoiceNumber)\r\n\t\tORDER BY IGC.GroupName ASC\r\n\t\t\t,IGC.ContractNumber ASC\r\n\t\t\t,IGC.FiscalYear DESC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice groups / contracts', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.867000",
      "last_altered": "2025-08-25 16:04:01.867000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceGroupContractRetrieve_AandA",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceGroupContractRetrieve_AandA` is designed to retrieve information about invoice groups and contracts from a SQL Server database. It accepts various parameters to filter the data and logs the operation's details, including any exceptions encountered during execution. The procedure retrieves data from views `Invoice.vwInvoiceGroupContracts` and `Billing.vwBillingGroups`, formats the results, and logs the operation using another stored procedure `dbo.USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple operations, including parameter validation, data retrieval with joins, error handling, and logging. While the SQL logic is straightforward, the inclusion of error handling and logging adds to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional; specifies the invoice ID to filter the data.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional; specifies the invoice number to filter the data.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional; used for logging to correlate logs with specific operations.\n- `@machineName AS VARCHAR(128) = NULL`: Optional; identifies the machine executing the procedure, used for logging.\n- `@processName AS VARCHAR(128) = NULL`: Optional; identifies the process executing the procedure, used for logging.\n- `@domain AS VARCHAR(25) = NULL`: Optional; specifies the domain of the user, used for logging.\n- `@username AS VARCHAR(25) = NULL`: Optional; specifies the username, used for logging.\n- `@userId AS INT = NULL`: Optional; specifies the user ID, used for logging.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output; captures exception details if an error occurs during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**:\n   - Sets `NOCOUNT` to ON to prevent extra result sets.\n   - Sets the transaction isolation level to `READ UNCOMMITTED` to allow dirty reads.\n   - Initializes parameters with default values if not provided.\n   - Validates that either `@invoiceId` or `@invoiceNumber` is provided; raises an error if both are missing.\n\n2. **Data Retrieval**:\n   - Attempts to retrieve invoice group and contract data by joining `Invoice.vwInvoiceGroupContracts` and `Billing.vwBillingGroups`.\n   - Filters results based on `@invoiceId` and `@invoiceNumber`.\n   - Formats monetary values for display.\n\n3. **Error Handling**:\n   - Uses a `TRY...CATCH` block to handle exceptions.\n   - Captures error messages and sets logging parameters accordingly.\n\n4. **Logging**:\n   - Calculates the elapsed time for the operation.\n   - Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED Isolation Level**: Allows dirty reads, which can improve performance but may lead to reading uncommitted data.\n- **Parameter Initialization**: Efficient use of `NULLIF` and `ISNULL` to handle default values.\n- **Formatted Output**: Using `FORMAT` for currency can be resource-intensive; consider alternatives if performance issues arise.\n- **Logging Overhead**: Frequent logging can impact performance, especially if the logging procedure is complex or writes to a slow storage medium.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The use of `READ UNCOMMITTED` can lead to reading uncommitted or inconsistent data.\n- **Error Handling**: The `CATCH` block only captures the error message, not the error number or severity, which may limit diagnostic capabilities.\n- **Parameter Validation**: The procedure raises an error if both `@invoiceId` and `@invoiceNumber` are missing, but does not handle cases where both are provided with conflicting data.\n- **Logging Dependency**: The procedure relies on `dbo.USP_AppLogCreate` for logging, which could fail or become a bottleneck if not optimized.\n- **Security**: Ensure that user inputs are sanitized to prevent SQL injection, especially if parameters are derived from user input.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1907,
      "api_response_id": "chatcmpl-C8b2zuzuwp8Y6yXSVCaKJ0yQOvwHd"
    },
    "analysis_timestamp": "2025-08-25 19:37:57"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceHeaderRetrieve",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceHeaderRetrieve]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t\tRAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reports - Retrieved invoice header'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT I.InvoiceID\r\n\t\t\t,I.InvoiceBillingPeriod\r\n\t\t\t,I.InvoiceNumber\r\n\t\t\t,I.InvoiceDate\r\n\t\t\t,I.InvoiceGroupCount\r\n\t\t\t,I.AmountBilled\r\n\t\t\t,I.AmountPaid\r\n\t\t\t,I.ProviderID\r\n\t\t\t,P.ProviderName\r\n\t\t\t,SUBSTRING((SELECT DISTINCT ', ' + IGC.GroupName FROM Invoice.vwInvoiceGroupContracts IGC WHERE IGC.InvoiceID = I.InvoiceID FOR XML PATH('')), 2, 1000) AS BillingGroups\r\n\t\t\t,I.StatusID\r\n\t\t\t,S.StatusDescription\r\n\t\t\t,I.CreatedDate\r\n\t\t\t,I.CreatedBy\r\n\t\t\t,I.ModifiedDate\r\n\t\t\t,I.ModifiedBy\r\n\t\t\t,I.Active\r\n\t\tFROM Invoice.vwInvoices AS I\r\n\t\t\tINNER JOIN Billing.vwProviders AS P ON P.ProviderID = I.ProviderID\r\n\t\t\tINNER JOIN Invoice.vwInvoiceStatuses AS S ON S.StatusID = I.StatusID\r\n\t\tWHERE I.InvoiceID = ISNULL(@invoiceId, I.InvoiceID)\r\n\t\t\tAND I.InvoiceNumber\t= ISNULL(@invoiceNumber, I.InvoiceNumber);\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice header', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.870000",
      "last_altered": "2025-08-25 16:04:01.870000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceHeaderRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceHeaderRetrieve` is designed to retrieve invoice header information from a database. It accepts various parameters to filter the invoices and logs the operation details. The procedure uses a `TRY...CATCH` block to handle exceptions and logs both successful and failed attempts to retrieve invoice data.\n\n#### 2. Complexity Level: Medium\nThe complexity level of this stored procedure is medium. It involves conditional logic, dynamic parameter handling, XML path queries, and error handling with logging. The use of multiple joins and the potential for large data retrieval also contribute to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional; specifies the ID of the invoice to retrieve.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional; specifies the invoice number to retrieve.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional; used for tracking and logging purposes.\n- `@machineName AS VARCHAR(128) = NULL`: Optional; identifies the machine executing the procedure.\n- `@processName AS VARCHAR(128) = NULL`: Optional; identifies the process executing the procedure.\n- `@domain AS VARCHAR(25) = NULL`: Optional; specifies the domain for logging.\n- `@username AS VARCHAR(25) = NULL`: Optional; specifies the username for logging.\n- `@userId AS INT = NULL`: Optional; specifies the user ID for logging.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output; captures exception details if an error occurs.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**:\n   - The procedure sets default values for parameters using `NULLIF`, `ISNULL`, and `COALESCE`.\n   - It checks if either `@invoiceId` or `@invoiceNumber` is provided. If neither is specified, it raises an error.\n\n2. **Logging Setup**:\n   - Initializes logging variables such as `@action`, `@severity`, `@message`, and `@messageDetails`.\n   - Captures the start time for performance measurement.\n\n3. **Data Retrieval**:\n   - Uses a `TRY...CATCH` block to attempt data retrieval from `Invoice.vwInvoices`, joining with `Billing.vwProviders` and `Invoice.vwInvoiceStatuses`.\n   - Filters results based on `@invoiceId` and `@invoiceNumber`.\n\n4. **Error Handling**:\n   - In the `CATCH` block, captures error details and sets logging variables to indicate an error occurred.\n\n5. **Logging Execution**:\n   - Calculates the elapsed time for the operation.\n   - Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Isolation Level**: The use of `READ UNCOMMITTED` can improve performance by reducing locking but may lead to dirty reads.\n- **Index Usage**: Ensure that `InvoiceID` and `InvoiceNumber` are indexed to optimize query performance.\n- **XML Path Query**: The use of `FOR XML PATH` for concatenating group names could be resource-intensive if the dataset is large.\n- **Logging Overhead**: Frequent logging, especially with detailed messages, can impact performance.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The `READ UNCOMMITTED` isolation level may lead to reading uncommitted data, which could be inconsistent.\n- **Error Handling**: The `CATCH` block does not re-throw the error, which might be necessary for certain applications to handle errors appropriately.\n- **Parameter Defaults**: Defaulting `@userId` to 0 might lead to incorrect logging if not properly managed.\n- **Scalability**: The procedure might not scale well with large datasets due to the XML path query and logging operations.\n- **Security**: Ensure that user inputs are sanitized to prevent SQL injection, especially since dynamic SQL is not used here, but parameterized queries are always safer.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1903,
      "api_response_id": "chatcmpl-C8b38uY8JjBbBNfYbgaCoFwEnJRKo"
    },
    "analysis_timestamp": "2025-08-25 19:38:09"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoicePaymentRetrieve",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoicePaymentRetrieve]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t\tRAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reports - Retrieved invoice payments'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT DISTINCT PaymentType\r\n\t\t\t,PaymentNumber\r\n\t\t\t,PaymentAmount\r\n\t\t\t,DateIssued\r\n\t\t\t,DateCleared\r\n\t\t\t,DateAccepted\r\n\t\t\t,CreatedDate\r\n\t\t\t,CreatedBy\r\n\t\t\t,ModifiedDate\r\n\t\t\t,ModifiedBy\r\n\t\t\t,Active\r\n\t\t\t,Billing.UDF_GetSummaryAccountNumber(InvoiceID) AS SummaryAccountNumber\r\n\t\tFROM Invoice.vwInvoicePayments\r\n\t\tWHERE InvoiceID\t= ISNULL(@invoiceId, InvoiceID)\r\n\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\tORDER BY DateIssued DESC, PaymentNumber ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice payments', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.877000",
      "last_altered": "2025-08-25 16:04:01.877000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoicePaymentRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoicePaymentRetrieve` is designed to retrieve payment details associated with invoices from a view named `Invoice.vwInvoicePayments`. It accepts various parameters to filter the data and logs the operation's details, including any exceptions encountered during execution. The procedure also logs the operation's metadata using another stored procedure, `dbo.USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\nThe complexity level is considered medium due to the following factors:\n- It involves conditional logic for input validation.\n- It uses error handling with `TRY...CATCH` blocks.\n- It logs detailed information about the operation, including performance metrics.\n- It interacts with a view and another stored procedure for logging.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional; specifies the invoice ID to filter payments.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional; specifies the invoice number to filter payments.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional; used for tracking the operation across systems.\n- `@machineName AS VARCHAR(128) = NULL`: Optional; identifies the machine executing the procedure.\n- `@processName AS VARCHAR(128) = NULL`: Optional; identifies the process executing the procedure.\n- `@domain AS VARCHAR(25) = NULL`: Optional; specifies the domain of the user.\n- `@username AS VARCHAR(25) = NULL`: Optional; specifies the username of the person executing the procedure.\n- `@userId AS INT = NULL`: Optional; specifies the user ID of the person executing the procedure.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output; captures any exception messages encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**:\n   - Sets default values for parameters using `NULLIF`, `ISNULL`, and `COALESCE`.\n   - Validates that either `@invoiceId` or `@invoiceNumber` is provided; raises an error if both are missing.\n\n2. **Logging Setup**:\n   - Initializes variables for logging purposes, including action type, severity, and message details.\n\n3. **Data Retrieval**:\n   - Attempts to retrieve payment details from `Invoice.vwInvoicePayments` using the provided invoice ID or number.\n   - Orders the results by `DateIssued` descending and `PaymentNumber` ascending.\n\n4. **Error Handling**:\n   - Catches any exceptions during data retrieval, sets the severity to 'ERROR', and prepares to send an email notification.\n\n5. **Performance Logging**:\n   - Calculates the elapsed time for the operation.\n   - Calls `dbo.USP_AppLogCreate` to log the operation details, including any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Isolation Level**: The use of `READ UNCOMMITTED` can improve performance by reducing locking but may lead to dirty reads.\n- **Indexing**: Ensure that `Invoice.vwInvoicePayments` is indexed on `InvoiceID` and `InvoiceNumber` to optimize query performance.\n- **Logging Overhead**: The logging mechanism, especially if it involves sending emails, could introduce latency.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The `READ UNCOMMITTED` isolation level may result in reading uncommitted data, which could lead to inconsistencies.\n- **Error Handling**: The `CATCH` block only captures the error message, not the error number or state, which might be useful for debugging.\n- **Parameter Defaults**: Defaulting `@userId` to 0 could lead to incorrect logging if not properly handled.\n- **Security**: Ensure that the procedure is executed with appropriate permissions to prevent unauthorized data access.\n- **Scalability**: The procedure's performance may degrade with large datasets if the view or logging mechanism is not optimized.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1781,
      "api_response_id": "chatcmpl-C8b3KbVXGyivJiOmkNaqMqHRLLMFm"
    },
    "analysis_timestamp": "2025-08-25 19:38:21"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoicePaymentRetrieve_EFT",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoicePaymentRetrieve_EFT]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t\tRAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reports - Retrieved invoice payments'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT DISTINCT FORMAT(DateIssued, 'M/d/yyyy') AS [Date Issued]\r\n\t\t\t,IIF(PaymentType = 'EFT', 'EFT', IIF(PaymentType = 'CHK', 'Check', 'Manual')) AS [Payment Type]\r\n\t\t\t,Billing.UDF_GetSummaryAccountNumber(InvoiceID) AS [Summary Account Number]\r\n\t\t\t,PaymentNumber AS [Check/EFT/Payment Number]\r\n\t\t\t,FORMAT(PaymentAmount, 'C') AS [Payment Amount]\r\n\t\tFROM Invoice.vwInvoicePayments\r\n\t\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\tORDER BY [Date Issued] DESC, [Check/EFT/Payment Number] ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice payments', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.880000",
      "last_altered": "2025-08-25 16:04:01.880000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoicePaymentRetrieve_EFT",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoicePaymentRetrieve_EFT` is designed to retrieve invoice payment details from a view named `Invoice.vwInvoicePayments`. It allows filtering by either an invoice ID or an invoice number. The procedure logs its execution details, including any exceptions encountered, using another stored procedure `dbo.USP_AppLogCreate`. The procedure is intended for reporting purposes, specifically focusing on payments made via EFT (Electronic Funds Transfer), checks, or manually.\n\n#### 2. Complexity Level: Medium\nThe procedure involves several components that contribute to its medium complexity:\n- Conditional logic for input validation.\n- Use of TRY...CATCH blocks for error handling.\n- Dynamic logging of execution details.\n- Handling of multiple input parameters with default values and transformations.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional. Specifies the invoice ID to filter the payments.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional. Specifies the invoice number to filter the payments.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional. Used for logging to correlate logs across systems.\n- `@machineName AS VARCHAR(128) = NULL`: Optional. Specifies the machine name for logging purposes.\n- `@processName AS VARCHAR(128) = NULL`: Optional. Specifies the process name for logging purposes.\n- `@domain AS VARCHAR(25) = NULL`: Optional. Specifies the domain for logging purposes.\n- `@username AS VARCHAR(25) = NULL`: Optional. Specifies the username for logging purposes.\n- `@userId AS INT = NULL`: Optional. Specifies the user ID for logging purposes.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output. Captures any exception messages encountered during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Validation**:\n   - Sets default values for parameters if not provided.\n   - Validates that either `@invoiceId` or `@invoiceNumber` is provided; otherwise, raises an error.\n\n2. **Data Retrieval**:\n   - Executes a SELECT query on `Invoice.vwInvoicePayments` to retrieve payment details.\n   - Filters results based on the provided `@invoiceId` or `@invoiceNumber`.\n   - Formats the output for date, payment type, and payment amount.\n\n3. **Error Handling**:\n   - Uses a TRY...CATCH block to handle any exceptions during data retrieval.\n   - Captures exception details and sets logging parameters accordingly.\n\n4. **Logging**:\n   - Calculates the elapsed time for the procedure execution.\n   - Calls `dbo.USP_AppLogCreate` to log the execution details, including any exceptions.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED Isolation Level**: This allows reading uncommitted data, which can improve performance by reducing locking but may result in dirty reads.\n- **Index Usage**: The performance of the SELECT query depends on the indexing of `Invoice.vwInvoicePayments` on `InvoiceID` and `InvoiceNumber`.\n- **Logging Overhead**: The logging mechanism, especially if `@sendEmail` is set to 1, could introduce additional overhead.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The use of the READ UNCOMMITTED isolation level can lead to reading uncommitted or inconsistent data.\n- **Parameter Validation**: The procedure raises an error if neither `@invoiceId` nor `@invoiceNumber` is provided, which is appropriate but requires careful handling by calling applications.\n- **Error Handling**: The CATCH block captures exceptions but does not rethrow them, which might suppress errors from being propagated to the calling application.\n- **Logging Dependency**: The procedure relies on `dbo.USP_AppLogCreate` for logging, which must be correctly implemented and available for the procedure to execute successfully.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1806,
      "api_response_id": "chatcmpl-C8b3WqrkB7W3D22C7Z5YemU3xj6Tp"
    },
    "analysis_timestamp": "2025-08-25 19:38:31"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoicePaymentRetrieve_EFT_Excel",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoicePaymentRetrieve_EFT_Excel]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tIF (ISNULL(@invoiceId, 0) <= 0 AND ISNULL(@invoiceNumber, '') = '')\r\n\tBEGIN\r\n\t\tRAISERROR (N'Either the invoice identifier or the invoice number must be specified', 16, 1);\r\n\tEND;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Reports - Retrieved invoice payments'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @invoiceNumber AS INVNUM FOR XML PATH('INPUTS')));\r\n\r\n\tBEGIN TRY\r\n\t\tSELECT DISTINCT FORMAT(DateIssued, 'M/d/yyyy') AS [Date Issued]\r\n\t\t\t,IIF(PaymentType = 'EFT', 'EFT', IIF(PaymentType = 'CHK', 'Check', 'Manual')) AS [Payment Type]\r\n\t\t\t,Billing.UDF_GetSummaryAccountNumber(InvoiceID) AS [Summary Account Number]\r\n\t\t\t,PaymentNumber AS [Check/EFT/Payment Number]\r\n\t\t\t,PaymentAmount AS [Payment Amount]\r\n\t\tFROM Invoice.vwInvoicePayments\r\n\t\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\t\tORDER BY [Date Issued] DESC, [Check/EFT/Payment Number] ASC;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Reports - Failed to retrieve invoice payments', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.887000",
      "last_altered": "2025-08-25 16:04:01.887000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@invoiceNumber",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@correlationId",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@machineName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@processName",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 128,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@domain",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@username",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 25,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@userId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@exceptionDetails",
        "data_type": "varchar",
        "mode": "OUT",
        "max_length": -1,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoicePaymentRetrieve_EFT_Excel",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoicePaymentRetrieve_EFT_Excel` is designed to retrieve invoice payment details from a view named `Invoice.vwInvoicePayments`. It allows filtering by either `invoiceId` or `invoiceNumber` and formats the results for export, likely to Excel, given the procedure's name. The procedure also logs its execution details, including any exceptions, using another stored procedure `dbo.USP_AppLogCreate`.\n\n#### 2. Complexity Level: Medium\nThe procedure involves multiple input parameters, conditional logic, error handling, and logging, which adds to its complexity. However, it primarily performs a straightforward SELECT operation with some data formatting, keeping it from being highly complex.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Optional. Filters the results by invoice ID.\n- `@invoiceNumber AS VARCHAR(25) = NULL`: Optional. Filters the results by invoice number.\n- `@correlationId AS VARCHAR(128) = NULL`: Optional. Used for logging to correlate logs across systems or processes.\n- `@machineName AS VARCHAR(128) = NULL`: Optional. Used for logging to identify the machine where the procedure is executed.\n- `@processName AS VARCHAR(128) = NULL`: Optional. Used for logging to identify the process or application invoking the procedure.\n- `@domain AS VARCHAR(25) = NULL`: Optional. Used for logging to specify the domain of the user.\n- `@username AS VARCHAR(25) = NULL`: Optional. Used for logging to specify the username of the person executing the procedure.\n- `@userId AS INT = NULL`: Optional. Used for logging to specify the user ID of the person executing the procedure.\n- `@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT`: Output parameter. Captures any exception messages that occur during execution.\n\n#### 4. Business Logic and Workflow\n1. **Initialization and Defaults**: The procedure initializes parameters, setting defaults where necessary. It uses `NULLIF` to handle zero or empty string inputs and `ISNULL`/`COALESCE` to provide default values for logging-related parameters.\n   \n2. **Validation**: It checks that at least one of `@invoiceId` or `@invoiceNumber` is provided. If not, it raises an error.\n\n3. **Data Retrieval**: Within a `TRY` block, it performs a SELECT query on `Invoice.vwInvoicePayments`, filtering by `@invoiceId` or `@invoiceNumber`. It formats the date and payment type for readability.\n\n4. **Error Handling**: If an error occurs during data retrieval, it captures the error message and sets the severity to 'ERROR'.\n\n5. **Logging**: After execution, it calculates the elapsed time and logs the operation details using `dbo.USP_AppLogCreate`, including any exceptions.\n\n#### 5. Performance Considerations\n- **Transaction Isolation Level**: The use of `READ UNCOMMITTED` can improve performance by avoiding locks but may lead to dirty reads.\n- **Parameter Defaults**: Efficient handling of default values and NULL checks can prevent unnecessary database operations.\n- **Index Usage**: The performance of the SELECT query depends on the indexing of `Invoice.vwInvoicePayments` on `InvoiceID` and `InvoiceNumber`.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The `READ UNCOMMITTED` isolation level can lead to reading uncommitted data, which might not be suitable for all business scenarios.\n- **Error Handling**: The procedure captures errors but does not re-throw them, which might hide issues from the calling application.\n- **Parameter Validation**: The procedure raises an error if neither `@invoiceId` nor `@invoiceNumber` is provided, but it does not handle cases where both are provided with conflicting values.\n- **Logging Overhead**: Extensive logging, especially with large `@messageDetails`, can impact performance and storage.\n- **Security**: The procedure does not include any explicit security checks or permissions, relying on the database's security model.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1846,
      "api_response_id": "chatcmpl-C8b3hfpNKxlQzWUNgXsH471CPMUMw"
    },
    "analysis_timestamp": "2025-08-25 19:38:46"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceRetrieve",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceRetrieve]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@providerId AS INT = NULL\r\n\t,@groupId AS INT = NULL\r\n\t,@fiscalYear AS VARCHAR(4) = NULL\r\n\t,@contractId AS INT = NULL\r\n\t,@billingPeriod AS VARCHAR(6) = NULL\r\n\t,@fromDate AS DATETIME = NULL\r\n\t,@toDate AS DATETIME = NULL\r\n\t,@statusId AS INT = NULL\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @providerId = NULLIF(@providerId, 0), @groupId = NULLIF(@groupId, 0), @fiscalYear = NULLIF(@fiscalYear, '')\r\n\t\t,@contractId = NULLIF(@contractId, 0), @billingPeriod = NULLIF(@billingPeriod, '0'), @statusId = NULLIF(@statusId, 0);\r\n\r\n\tSELECT INV.InvoiceNumber AS InvoiceNumber\r\n\t\t,INV.InvoiceBillingPeriod AS BillingPeriod\r\n\t\t,SUBSTRING((SELECT DISTINCT ', ' + IGC.GroupName FROM Invoice.vwInvoiceGroupContracts AS IGC WHERE IGC.InvoiceID = INV.InvoiceID FOR XML PATH('')), 2, 1000) AS BillingGroups\r\n\t\t,SUBSTRING((SELECT DISTINCT ', ' + IGC.ContractNumber FROM Invoice.vwInvoiceGroupContracts AS IGC WHERE IGC.InvoiceID = INV.InvoiceID FOR XML PATH('')), 2, 1000) AS Contracts\r\n\t\t,SUBSTRING((SELECT DISTINCT ', ' + P.PaymentNumber FROM Invoice.vwInvoicePayments AS P WHERE P.InvoiceID = INV.InvoiceID FOR XML PATH('')), 2, 1000) AS Payments\r\n\t\t,FORMAT(INV.InvoiceDate, 'M/d/yyyy') AS InvoiceDate\r\n\t\t,FORMAT(INV.AmountPaid, 'C') AS AmountPaid\r\n\t\t,INV.StatusDescription AS [Status]\r\n\tFROM Invoice.vwInvoices AS INV\r\n\tWHERE INV.InvoiceID\t= ISNULL(@invoiceId, INV.InvoiceID)\r\n\t\tAND INV.ProviderID = ISNULL(@providerId, INV.ProviderID)\r\n\t\tAND CASE WHEN NOT @billingPeriod IS NULL THEN CASE WHEN INV.InvoiceBillingPeriod = ISNULL(@billingPeriod, INV.InvoiceBillingPeriod) THEN 1 ELSE 0 END ELSE 1 END = 1\r\n\t\tAND CASE WHEN NOT @fromDate IS NULL THEN CASE WHEN CONVERT(VARCHAR(12), INV.InvoiceDate, 112) >= CONVERT(VARCHAR(12), @fromDate, 112) THEN 1 ELSE 0 END ELSE 1 END = 1\r\n\t\tAND CASE WHEN NOT @toDate IS NULL THEN CASE WHEN CONVERT(VARCHAR(12), INV.InvoiceDate, 112) <= CONVERT(VARCHAR(12), @toDate, 112) THEN 1 ELSE 0 END ELSE 1 END = 1\r\n\t\tAND INV.StatusID = ISNULL(@statusId, INV.StatusID)\r\n\t\tAND INV.InvoiceID IN (SELECT InvoiceID FROM Invoice.vwInvoiceGroupContracts\r\n\t\t\tWHERE CASE WHEN NOT @fiscalYear IS NULL THEN CASE WHEN FiscalYear = @fiscalYear THEN 1 ELSE 0 END ELSE 1 END = 1\r\n\t\t\t\tAND GroupID = ISNULL(@groupId, GroupID)\r\n\t\t\t\tAND ContractID = ISNULL(@contractId, ContractID))\r\n\tORDER BY INV.CreatedDate DESC;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.893000",
      "last_altered": "2025-08-25 16:04:01.893000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingPeriod",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 6,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fromDate",
        "data_type": "datetime",
        "mode": "IN",
        "max_length": 8,
        "precision": 23,
        "scale": 3,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@toDate",
        "data_type": "datetime",
        "mode": "IN",
        "max_length": 8,
        "precision": 23,
        "scale": 3,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@statusId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceRetrieve",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceRetrieve` is designed to retrieve invoice details from a SQL Server database. It allows filtering based on various parameters such as invoice ID, provider ID, group ID, fiscal year, contract ID, billing period, date range, and status ID. The procedure returns a set of invoice records with associated billing groups, contracts, payments, and formatted invoice details.\n\n#### 2. Complexity Level: Medium\nThe complexity level is considered medium due to the use of multiple input parameters, conditional logic for filtering, and the use of subqueries to concatenate related data. The procedure also involves handling NULL values and formatting output, which adds to its complexity.\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Filters by specific invoice ID.\n- `@providerId AS INT = NULL`: Filters by provider ID.\n- `@groupId AS INT = NULL`: Filters by group ID.\n- `@fiscalYear AS VARCHAR(4) = NULL`: Filters by fiscal year.\n- `@contractId AS INT = NULL`: Filters by contract ID.\n- `@billingPeriod AS VARCHAR(6) = NULL`: Filters by billing period.\n- `@fromDate AS DATETIME = NULL`: Filters invoices from a specific start date.\n- `@toDate AS DATETIME = NULL`: Filters invoices up to a specific end date.\n- `@statusId AS INT = NULL`: Filters by status ID.\n\n#### 4. Business Logic and Workflow\n- The procedure begins by setting `NOCOUNT ON` to prevent the message indicating the number of rows affected by a SQL statement.\n- It sets the transaction isolation level to `READ UNCOMMITTED`, allowing dirty reads to improve performance by not locking the data.\n- The procedure initializes parameters to NULL if they are zero or empty, using `NULLIF`.\n- It performs a SELECT query on the `Invoice.vwInvoices` view, applying filters based on the input parameters.\n- The query includes subqueries to concatenate related group names, contract numbers, and payment numbers into comma-separated strings.\n- The invoice date and amount paid are formatted for readability.\n- The results are ordered by the invoice creation date in descending order.\n\n#### 5. Performance Considerations\n- The use of `READ UNCOMMITTED` can improve performance by reducing locking overhead but may lead to reading uncommitted changes.\n- The use of subqueries with `FOR XML PATH('')` for string concatenation can be resource-intensive, especially with large datasets.\n- The conditional logic in the WHERE clause, using `CASE` statements, can complicate query optimization and may affect performance.\n- The procedure does not use indexes explicitly, relying on the underlying view's indexing, which may impact performance if not properly indexed.\n\n#### 6. Potential Issues or Risks\n- The `READ UNCOMMITTED` isolation level can lead to dirty reads, which might not be acceptable in environments requiring strict data consistency.\n- The use of `NULLIF` to handle default parameter values assumes that zero or empty strings are not valid inputs, which may not always be the case.\n- The string concatenation using subqueries may lead to performance bottlenecks if the related tables contain a large number of records.\n- The procedure's reliance on views means any changes to the underlying views could affect the procedure's behavior or performance.\n- The use of `FORMAT` for date and currency formatting can be less efficient than other methods, especially in large result sets.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 1657,
      "api_response_id": "chatcmpl-C8b3wXkyIxw5zEUrx2GIEnZMIs4Mw"
    },
    "analysis_timestamp": "2025-08-25 19:39:01"
  },
  {
    "procedure_info": {
      "schema": "Report",
      "name": "USP_InvoiceSummary_Export",
      "definition": "CREATE PROCEDURE [Report].[USP_InvoiceSummary_Export]\r\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@providerId AS INT = NULL\r\n\t,@groupId AS INT = NULL\r\n\t,@fiscalYear AS VARCHAR(4) = NULL\r\n\t,@contractId AS INT = NULL\r\n\t,@billingPeriod AS VARCHAR(6) = NULL\r\n\t,@fromDate AS DATETIME = NULL\r\n\t,@toDate AS DATETIME = NULL\r\n\t,@statusId AS INT = NULL\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @providerId = NULLIF(@providerId, 0), @groupId = NULLIF(@groupId, 0), @fiscalYear = NULLIF(@fiscalYear, '')\r\n\t\t,@contractId = NULLIF(@contractId, 0), @billingPeriod = NULLIF(@billingPeriod, '0'), @statusId = NULLIF(@statusId, 0);\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved report for invoices', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0;\r\n\r\n\tSET @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @providerId AS PRVID, @groupId AS GRPID, @fiscalYear AS FY, @contractId AS CNTRCTID\r\n\t\t,@billingPeriod AS BILLPRD, @fromDate AS FROMDATE, @toDate AS TODATE, @statusId AS STSID FOR XML PATH('INPUTS')));\r\n\r\n\tSELECT INV.InvoiceNumber AS [Invoice #]\r\n\t\t,INV.InvoiceBillingPeriod AS [Billing Period]\r\n\t\t,SUBSTRING((SELECT DISTINCT ', ' + IGC.GroupName FROM Invoice.vwInvoiceGroupContracts AS IGC WHERE IGC.InvoiceID = INV.InvoiceID FOR XML PATH('')), 2, 1000) AS [Billing Group(s)]\r\n\t\t,SUBSTRING((SELECT DISTINCT ', ' + IGC.ContractNumber FROM Invoice.vwInvoiceGroupContracts AS IGC WHERE IGC.InvoiceID = INV.InvoiceID FOR XML PATH('')), 2, 1000) AS [Contract(s)]\r\n\t\t,SUBSTRING((SELECT DISTINCT ', ' + P.PaymentNumber FROM Invoice.vwInvoicePayments AS P WHERE P.InvoiceID = INV.InvoiceID FOR XML PATH('')), 2, 1000) AS [Payment(s)]\r\n\t\t,FORMAT(INV.InvoiceDate, 'M/d/yyyy') AS [Invoice Date]\r\n\t\t,FORMAT(INV.AmountPaid, 'C') AS [Amount Paid]\r\n\t\t,INV.StatusDescription AS [Status]\r\n\tFROM Invoice.vwInvoices AS INV\r\n\tWHERE INV.InvoiceID\t= ISNULL(@invoiceId, INV.InvoiceID)\r\n\t\tAND INV.ProviderID = ISNULL(@providerId, INV.ProviderID)\r\n\t\tAND CASE WHEN NOT @billingPeriod IS NULL THEN CASE WHEN INV.InvoiceBillingPeriod = ISNULL(@billingPeriod, INV.InvoiceBillingPeriod) THEN 1 ELSE 0 END ELSE 1 END = 1\r\n\t\tAND CASE WHEN NOT @fromDate IS NULL THEN CASE WHEN CONVERT(VARCHAR(12), INV.InvoiceDate, 112) >= CONVERT(VARCHAR(12), @fromDate, 112) THEN 1 ELSE 0 END ELSE 1 END = 1\r\n\t\tAND CASE WHEN NOT @toDate IS NULL THEN CASE WHEN CONVERT(VARCHAR(12), INV.InvoiceDate, 112) <= CONVERT(VARCHAR(12), @toDate, 112) THEN 1 ELSE 0 END ELSE 1 END = 1\r\n\t\tAND INV.StatusID = ISNULL(@statusId, INV.StatusID)\r\n\t\tAND INV.InvoiceID IN (SELECT InvoiceID FROM Invoice.vwInvoiceGroupContracts\r\n\t\t\tWHERE CASE WHEN NOT @fiscalYear IS NULL THEN CASE WHEN FiscalYear = @fiscalYear THEN 1 ELSE 0 END ELSE 1 END = 1\r\n\t\t\t\tAND GroupID = ISNULL(@groupId, GroupID)\r\n\t\t\t\tAND ContractID = ISNULL(@contractId, ContractID))\r\n\tORDER BY INV.CreatedDate DESC;\r\nEND;\r\n",
      "created": "2025-08-25 16:04:01.900000",
      "last_altered": "2025-08-25 16:04:01.900000",
      "type": "PROCEDURE"
    },
    "parameters": [
      {
        "name": "@invoiceId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 1,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@providerId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 2,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@groupId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 3,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fiscalYear",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 4,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 4,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@contractId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 5,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@billingPeriod",
        "data_type": "varchar",
        "mode": "IN",
        "max_length": 6,
        "precision": 0,
        "scale": 0,
        "ordinal_position": 6,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@fromDate",
        "data_type": "datetime",
        "mode": "IN",
        "max_length": 8,
        "precision": 23,
        "scale": 3,
        "ordinal_position": 7,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@toDate",
        "data_type": "datetime",
        "mode": "IN",
        "max_length": 8,
        "precision": 23,
        "scale": 3,
        "ordinal_position": 8,
        "has_default_value": false,
        "default_value": ""
      },
      {
        "name": "@statusId",
        "data_type": "int",
        "mode": "IN",
        "max_length": 4,
        "precision": 10,
        "scale": 0,
        "ordinal_position": 9,
        "has_default_value": false,
        "default_value": ""
      }
    ],
    "chatgpt_explanation": {
      "procedure_name": "USP_InvoiceSummary_Export",
      "explanation": "#### 1. Overview\nThe stored procedure `USP_InvoiceSummary_Export` is designed to retrieve and export a summary of invoice data from a SQL Server database. It allows filtering based on various parameters such as invoice ID, provider ID, group ID, fiscal year, contract ID, billing period, date range, and status ID. The procedure constructs a query to fetch invoice details and related information from views, formats the data, and returns it in a structured format.\n\n#### 2. Complexity Level: Medium\n\n#### 3. Input Parameters\n- `@invoiceId AS INT = NULL`: Filters results by a specific invoice ID.\n- `@providerId AS INT = NULL`: Filters results by a specific provider ID.\n- `@groupId AS INT = NULL`: Filters results by a specific group ID.\n- `@fiscalYear AS VARCHAR(4) = NULL`: Filters results by a specific fiscal year.\n- `@contractId AS INT = NULL`: Filters results by a specific contract ID.\n- `@billingPeriod AS VARCHAR(6) = NULL`: Filters results by a specific billing period.\n- `@fromDate AS DATETIME = NULL`: Filters results to include invoices from this date onwards.\n- `@toDate AS DATETIME = NULL`: Filters results to include invoices up to this date.\n- `@statusId AS INT = NULL`: Filters results by a specific status ID.\n\n#### 4. Business Logic and Workflow\n- **Initialization**: The procedure begins by setting `NOCOUNT ON` to prevent the message indicating the number of rows affected by a T-SQL statement from being returned. It sets the transaction isolation level to `READ UNCOMMITTED` to avoid locking issues and allow dirty reads.\n- **Parameter Normalization**: Converts zero or empty string parameters to `NULL` using `NULLIF`, which simplifies the filtering logic.\n- **Logging Setup**: Initializes variables for logging purposes, including action, severity, message, and message details. Constructs a detailed message of input parameters using `FOR XML PATH`.\n- **Data Retrieval**: Executes a `SELECT` statement to fetch invoice details from the `Invoice.vwInvoices` view. It joins related data from `Invoice.vwInvoiceGroupContracts` and `Invoice.vwInvoicePayments` using subqueries to concatenate group names, contract numbers, and payment numbers.\n- **Filtering Logic**: Applies filters based on the input parameters using `ISNULL` and conditional logic to handle optional parameters. The `CASE` statements ensure that filters are applied only when parameters are provided.\n- **Ordering**: Orders the results by the `CreatedDate` in descending order.\n\n#### 5. Performance Considerations\n- **READ UNCOMMITTED**: While this isolation level improves performance by reducing locking, it may lead to dirty reads, which could be problematic if data consistency is critical.\n- **Subqueries**: The use of subqueries with `FOR XML PATH` to concatenate strings can be resource-intensive, especially if the dataset is large.\n- **Index Usage**: The performance of the procedure heavily depends on the indexing of the `Invoice.vwInvoices`, `Invoice.vwInvoiceGroupContracts`, and `Invoice.vwInvoicePayments` views. Proper indexing on the columns used in `WHERE` clauses and joins is crucial.\n- **Parameter Sniffing**: The use of optional parameters with `ISNULL` can lead to parameter sniffing issues, where the execution plan is not optimal for all parameter combinations.\n\n#### 6. Potential Issues or Risks\n- **Dirty Reads**: The use of `READ UNCOMMITTED` can lead to reading uncommitted data, which might not be suitable for all business scenarios.\n- **String Concatenation Limits**: The `SUBSTRING` function limits concatenated strings to 1000 characters, which might truncate data if there are many groups, contracts, or payments associated with an invoice.\n- **Date Conversion**: The conversion of dates to `VARCHAR(12)` for comparison might lead to inefficiencies and should be handled with care to ensure correct date filtering.\n- **Scalability**: As the dataset grows, the performance might degrade due to the complexity of the query and the use of subqueries. Regular monitoring and optimization may be required.\n- **Error Handling**: The procedure lacks explicit error handling, which could lead to unhandled exceptions and unclear error messages in case of failures.",
      "complexity": "Medium",
      "model_used": "gpt-4o-2024-08-06",
      "tokens_used": 2020,
      "api_response_id": "chatcmpl-C8b4AOlw5Z9tFbslezDsoB4wj8qYd"
    },
    "analysis_timestamp": "2025-08-25 19:39:18"
  }
]