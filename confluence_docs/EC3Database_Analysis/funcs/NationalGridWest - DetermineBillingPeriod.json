{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "NationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "DetermineBillingPeriod",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Low",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The "
        },
        {
          "type": "text",
          "text": "DetermineBillingPeriod",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function is a scalar function in Microsoft SQL Server designed to calculate and return the billing period for a given date. Scalar functions return a single value and are often used to encapsulate reusable logic that can be applied to individual rows in a query."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Low"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is low. Scalar functions typically involve straightforward logic and calculations, and this function is expected to perform simple date manipulations or checks to determine the billing period."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function likely accepts one or more input parameters, such as:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@InputDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " (DATETIME or DATE): The date for which the billing period needs to be determined. This parameter is essential for the function to calculate the appropriate billing period."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The return type of the function is likely a DATE or VARCHAR, depending on whether the billing period is represented as a date range or a descriptive string. The function returns a single value that represents the billing period corresponding to the input date."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The business logic of the "
        },
        {
          "type": "text",
          "text": "DetermineBillingPeriod",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function involves:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Accepting an input date parameter."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Calculating the start and end dates of the billing period that includes the input date. This could involve determining the first and last day of the month, week, or any custom billing cycle."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Returning the calculated billing period as a single value, which could be a formatted string or a specific date."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalar functions can introduce performance overhead when used in large queries, as they are executed row-by-row. This can lead to slower query performance, especially if the function is called multiple times within a query."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "To mitigate performance issues, consider using inline table-valued functions or incorporating the logic directly into the query if possible."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalar functions can lead to performance bottlenecks in large datasets due to their row-by-row execution nature."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "If the function involves complex date calculations or external data lookups, it may increase execution time."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Ensure that the function handles edge cases, such as leap years or invalid dates, to prevent errors or incorrect billing period calculations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\tDerek Ho\r\n-- Create date: 2008 July 11\r\n-- Description:\tReturn billing period for given date. For a given bill, the billing period of toDate might be equal to the billing period of the fromDate because the the bill can be a spanned bill.\r\n-- =============================================\r\nCREATE FUNCTION [NationalGridWest].[DetermineBillingPeriod] \r\n(\r\n\t@BillingCycleType varchar(1), -- M:Montly; B:bimonthly\r\n\t@date varchar(8), -- fromDate or toDate\r\n\t@FromOrTo varchar(1), -- F:@date = from date; T: @date = to date\r\n\t@WDNumber varchar(2)\r\n)\r\nRETURNS  varchar(6)\r\nAS\r\nBEGIN\r\n\tdeclare @BillingPeriod varchar(6)\r\n\r\n\t-- bimonthly\r\n\tif(@BillingCycleType = 'B')\r\n\tbegin -- begin bimonthly\r\n\r\n\t\t/**********************************\r\n\t\t\tbillingPeriod for bimonthly toDate (default)\r\n\t\t**********************************/\r\n\t\tSELECT @BillingPeriod = BillingPeriod\r\n\t\t\tFROM Billing.BillingPeriodKeyspanWestWD\r\n\t\t\tWHERE (WDNumber = @WdNumber) AND (PriorPeriodMeterReadingToDate < @date) AND (MeterReadingToDate >= @date)\r\n\r\n\t\t/**********************************\r\n\t\t\tbillingPeriod for bimonthly fromDate \r\n\t\t**********************************/\r\n\t\tif(@FromOrTo = 'F')\r\n\t\tbegin -- begin bimonthly fromDate\r\n\t\t\t-- current value of @BillingPeriod holds the billing period of the previous period. result of CreateNextPeriod\r\n\t\t\t-- note: fromDate = toDate of the previous period\t\t\t\r\n\t\t\tset @BillingPeriod = dbo.CreateNextPeriod(@BillingPeriod,'B') \r\n\r\n\t\tend -- end bimonthly fromDate\r\n\tend -- end bimonthly\r\n\t\r\n\t-- monthly\r\n\tif(@BillingCycleType = 'M')\r\n\tbegin -- begin monthly\r\n\t\t\r\n\t\t-- get the other matching WDNumber\r\n\t\t-- example: for wdnumber 1, @WDNumber_m is 21 \r\n\t\tdeclare @WDNumber_m varchar(2), @WDNumber_m_int int\r\n\t\tset @WDNumber_m_int =  ((cast(@WDNumber as int) + 20) % 40)\r\n\t\tif(@WDNumber_m_int = 0) set @WDNumber_m_int  = 40\r\n\t\tset @WDNumber_m =\tREPLICATE('0', 2 - DATALENGTH(cast(@WDNumber_m_int as varchar))) + cast(@WDNumber_m_int as varchar) \r\n\r\n\t\t/*\r\n\t\t\tFollowing where clause for query against BillingPeriodKeyspanWestWD return\r\n\t\t\t2 record. min(BillingPeriod) is billingPeriod for @date. max(BillingPeriod) \r\n\t\t\tis next billing period for @date.\r\n\t\t\tThus,\r\n\t\t\tmin(BillingPeriod) for toDate = max(BillingPeriod) for fromDate\r\n\t\r\n\t\t\tfrom dbo.BillingPeriodKeyspanWestWD\r\n\t\t\twhere PriorPeriodMeterReadingToDate <= @date\r\n\t\t\tand MeterReadingToDate >= @date\r\n\t\t\tand WDNumber in (@WDNumber_m, @WDNumber)\r\n\t\t*/\t\t\r\n\r\n\r\n\t\t/**********************************\r\n\t\t\tbillingPeriod for monthly toDate\r\n\t\t**********************************/\r\n\t\tif(@FromOrTo = 'T')\r\n\t\tbegin -- begin monthly toDate\r\n\r\n\t\t\tselect @BillingPeriod = min(BillingPeriod)\r\n\t\t\tfrom billing.BillingPeriodKeyspanWestWD\r\n\t\t\twhere \r\n\t\t\tPriorPeriodMeterReadingToDate < @date\r\n\t\t\tand\r\n\t\t\tMeterReadingToDate >= @date\r\n\t\t\tand WDNumber in (@WDNumber_m, @WDNumber)\r\n\r\n\t\tend --  end monthly toDate\r\n\r\n\r\n\t\t/**************************************\r\n\t\t\tbillingPeriod for monthly fromDate\r\n\t\t**********************************/\r\n\t\tif(@FromOrTo = 'F')\r\n\t\tbegin -- begin monthly fromDate\r\n\t\t\t\r\n\t\t\tselect @BillingPeriod = max(BillingPeriod)\r\n\t\t\tfrom billing.BillingPeriodKeyspanWestWD\r\n\t\t\twhere \r\n\t\t\tPriorPeriodMeterReadingToDate < @date\r\n\t\t\tand\r\n\t\t\tMeterReadingToDate >= @date\r\n\t\t\tand WDNumber in (@WDNumber_m, @WDNumber)\r\n\r\n\t\tend -- end montly fromDate\r\n\t\r\n\tend -- end monthly\r\n\t\r\n\tif(@BillingPeriod is null or @BillingPeriod = '')\r\n\t\tset @BillingPeriod = 'XXXXXX'\r\n\t\r\n\treturn @BillingPeriod\r\nEND"
        }
      ]
    }
  ]
}