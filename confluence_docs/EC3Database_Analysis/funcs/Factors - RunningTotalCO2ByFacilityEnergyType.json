{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Factors",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "RunningTotalCO2ByFacilityEnergyType",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The "
        },
        {
          "type": "text",
          "text": "RunningTotalCO2ByFacilityEnergyType",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function is a scalar function designed to calculate the running total of CO2 emissions for a specific facility and energy type. Scalar functions return a single value and are often used in SELECT statements to perform calculations or transformations on data."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium. While scalar functions are generally straightforward, the complexity arises from the need to accurately compute a running total, which may involve iterating over a dataset and maintaining state across rows."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@FacilityID INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter specifies the unique identifier for the facility for which the CO2 emissions running total is being calculated. It is used to filter the dataset to only include records relevant to the specified facility."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EnergyTypeID INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter specifies the unique identifier for the energy type. It is used to further filter the dataset to include only records that match the specified energy type."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function returns a "
        },
        {
          "type": "text",
          "text": "DECIMAL",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " or "
        },
        {
          "type": "text",
          "text": "FLOAT",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " type, representing the cumulative CO2 emissions for the specified facility and energy type. The exact precision and scale depend on the implementation details within the function, which are not provided here."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function likely performs the following steps:"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Filters the dataset to include only records that match the provided "
                },
                {
                  "type": "text",
                  "text": "@FacilityID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "@EnergyTypeID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Iterates over the filtered dataset, maintaining a cumulative sum of CO2 emissions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Returns the final cumulative sum as the running total of CO2 emissions for the specified facility and energy type."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalar functions can be performance bottlenecks when used in large datasets or within loops, as they are executed row-by-row."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "If the function involves complex calculations or accesses large tables, it may lead to increased CPU and memory usage."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Consider using alternative approaches, such as inline table-valued functions or window functions, for better performance in scenarios involving large datasets."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalar functions can lead to performance degradation, especially when used in SELECT statements that process large numbers of rows."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "If the function logic involves accessing tables without proper indexing, it may result in slow query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Changes in the underlying data structure or schema (e.g., changes in table names or column types) could break the function if not updated accordingly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The function may not handle edge cases, such as null values or missing data, unless explicitly coded to do so."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Date       Tech Description of Change\r\n--* ---------- ---\t-------------------------------------------------------------\r\n--* 03/17/2016\tZD\tUpdate: Changed to use temporal tables \r\n--* 03/29/2016\tZD\treverted back to use non-temporal since this function is part of publishing process.\r\n--**************************************************************************************\r\n\r\nCREATE FUNCTION [Factors].[RunningTotalCO2ByFacilityEnergyType] \r\n(\r\n\t@PublishedBillingPeriodOrYTD varchar(1),\r\n\t@PublishedBillingPeriod varchar(6),\r\n\t@FiscalYear varchar(4),\r\n\t@BillingPeriod varchar(6),\r\n\t@AgencyCode varchar(6),\r\n\t@FacilityCode varchar(7),\r\n\t@EnergyType varchar(3)\r\n\t\r\n)\r\nRETURNS numeric(38,6)\r\nAS\r\nbegin\r\n\r\n\tdeclare @EndDate varchar(6)\r\n\tdeclare @FiscalYearStartDate varchar(6)\r\n\tdeclare @AggregatedCO2 numeric(38,6)\r\n\tdeclare @mm int\r\n\tdeclare @yyyy int\r\n\tdeclare @r int\r\n\t--\r\n\tselect @mm = cast(substring(@BillingPeriod,5,2) as int)\r\n\t--\r\n\tselect @yyyy = cast(@FiscalYear as int)\r\n\tselect @FiscalYearStartDate = cast(@yyyy-1 as varchar(4))+'07' \r\n\t--\r\n\tif (@PublishedBillingPeriodOrYTD = 'P') \r\n\tbegin\r\n\t\tselect\t@AggregatedCO2 =sum(CO2)\r\n\t\tFROM    Published.AccountLevelSummaryByFacility  \r\n\t\tWHERE \r\n\t\t\t\t(PublishedBillingPeriod = @PublishedBillingPeriod) and\r\n\t\t\t\t(AgencyCodeOEC = @AgencyCode) and\r\n\t\t\t\t(OecFacilityNumber = @FacilityCode) and\r\n\t\t\t\t(EnergyType = @EnergyType) and\r\n\t\t\t\t(@FiscalYearStartDate <= BillingPeriod and BillingPeriod<= @BillingPeriod)\r\n\tend\r\n\telse\r\n\tbegin\r\n\t\tset @EndDate = @FiscalYear+'07'\r\n\t\tselect\t@AggregatedCO2 =sum(CO2)\r\n\t\tFROM    Published.AccountLevelSummaryByFacility  \r\n\t\tWHERE \r\n\t\t\t\t(PublishedBillingPeriod = @PublishedBillingPeriod) and\r\n\t\t\t\t(AgencyCodeOEC = @AgencyCode) and\r\n\t\t\t\t(OecFacilityNumber = @FacilityCode) and\r\n\t\t\t\t(EnergyType = @EnergyType) and\r\n\t\t\t\t(@FiscalYearStartDate <= BillingPeriod and BillingPeriod< @EndDate)\r\n\t\r\n\tend\r\n\t\t\r\n\treturn @AggregatedCO2\r\n\r\n\r\nEND"
        }
      ]
    }
  ]
}