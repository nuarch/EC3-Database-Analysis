{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Gas",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "uftn_TableCompareABGandABAGsummaryInfo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function "
        },
        {
          "type": "text",
          "text": "uftn_TableCompareABGandABAGsummaryInfo",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is a multi-statement table-valued function in Microsoft SQL Server. It is designed to perform a comparison between two datasets, presumably named ABG and ABAG, and return a summary of the differences or similarities between them. The function likely involves multiple SQL statements to process the data and produce a summarized result set."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium due to the nature of multi-statement table-valued functions, which involve multiple operations and potentially complex logic to manipulate and compare datasets. The complexity is also influenced by the need to manage state across multiple statements and ensure the correct aggregation of results."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The input parameters for this function are not provided, but typically, such a function would require parameters that specify the datasets to be compared, such as table names, column names, or specific criteria for comparison. These parameters are crucial for directing the function to the correct data sources and defining the scope of the comparison."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The return type of this function is a table. The structure of the returned table would include columns that summarize the comparison results, such as counts of matching and non-matching records, differences in specific fields, or other relevant metrics that provide insight into the relationship between the two datasets."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The business logic of the function involves:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Extracting data from the specified datasets (ABG and ABAG)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Performing a comparison operation, which could include matching records based on key fields, identifying discrepancies, and calculating summary statistics."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Aggregating the results into a summarized format that highlights key differences or similarities."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Returning the summarized data as a table for further analysis or reporting."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The workflow typically involves initializing a table variable to store intermediate results, executing multiple SQL statements to perform the comparison and aggregation, and finally returning the populated table variable."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Performance considerations for this function include:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The efficiency of the comparison operations, especially if the datasets are large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The potential for increased I/O and CPU usage due to multiple statements and data manipulation."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The impact of indexing on the source tables, which can significantly affect the speed of data retrieval and comparison."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The need to optimize SQL statements within the function to minimize execution time and resource consumption."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Potential issues or risks associated with this function include:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability challenges if the datasets grow significantly, leading to longer execution times and higher resource usage."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The risk of incorrect results if the comparison logic is flawed or if there are changes in the structure of the source datasets that are not accounted for."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Potential locking and blocking issues if the function is executed concurrently by multiple users, especially if it involves updates or inserts into shared tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance challenges due to the complexity of multi-statement logic, which can make the function difficult to understand and modify."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE FUNCTION [Gas].[uftn_TableCompareABGandABAGsummaryInfo](@LastPeriodModified dbo.yyyymm,@UtilityCompanySeqid dbo.seqid,@CurrentInvoiceAccountBillingGroup dbo.seqid)\nRETURNS @CompareAccountBillingAndABAGInfo TABLE \r\n(\r\n\t\tBillingPeriod varchar(6),  \r\n\t\tAccountStatus varchar(20),\r\n\t\tLastPeriodModified varchar(6), \r\n\t\tInvoiceAccountGroupSeqid int, \r\n\t\tUtilityCompanySeqid int, \r\n\t\tLegacyCancelDollarCorrection money, \r\n\t\tNumberOfActualBills int, \r\n\t\tNumberOfEstimatedBills int, \r\n\t\tCurrentPeriodOriginalAndRevisedAmountMismatch money,\r\n\t\tRevisedBilledAmountMismatch money,\r\n\t\tRevisedThermsMismatch money\r\n)\r\n\r\nAS\r\nBEGIN\r\n\r\ninsert into @CompareAccountBillingAndABAGInfo\r\n\t(\r\n\t\tBillingPeriod, \r\n\t\tAccountStatus, \r\n\t\tLastPeriodModified,\r\n\t\tInvoiceAccountGroupSeqid, \r\n\t\tUtilityCompanySeqid, \r\n\t\tLegacyCancelDollarCorrection, \r\n\t\tNumberOfActualBills, \r\n\t\tNumberOfEstimatedBills, \r\n\t\tCurrentPeriodOriginalAndRevisedAmountMismatch,\r\n\t\tRevisedBilledAmountMismatch,\r\n\t\tRevisedThermsMismatch\r\n\t)\r\nSELECT \r\n\t\tBilling.AccountBillingAdjustmentGas.BillingPeriod, \r\n\t\tBilling.AccountBillingAdjustmentGas.AccountStatus, \r\n\t\tBilling.AccountBillingAdjustmentGas.LastPeriodModified,\r\n\t\tBilling.AccountBillingAdjustmentGas.InvoiceAccountGroupSeqid, \r\n\t\tBilling.AccountBillingAdjustmentGas.UtilityCompanySeqid, \r\n\t\tSUM(Billing.AccountBillingAdjustmentGas.CanceledBilledAmount - Billing.AccountBillingAdjustmentGas.TotalCanceledAmount) AS LegacyCancelDollarCorrection, \r\n\t\tsum(case when Billing.AccountBillingAdjustmentGas.EstimatedOrActualBilling = 'ACT' then 1 else 0 end) as NumberOfActualBills, \r\n\t\tsum(case when Billing.AccountBillingAdjustmentGas.EstimatedOrActualBilling = 'EST' then 1 else 0 end) as NumberOfEstimatedBills, \r\n\t\tsum(case when Billing.AccountBilling.OriginalBilledAmount-Billing.AccountBilling.RevisedBilledAmount <>0 and \r\n\t\tBilling.AccountBillingAdjustmentGas.BillingPeriod=AccountBillingAdjustmentGas.BillingPeriodRevision \r\n\t\tthen 1 else 0 end ) as CurrentPeriodOriginalAndRevisedAmountMismatch,\r\n\t\tsum(case when Billing.AccountBillingAdjustmentGas.RevisedBilledAmount - Billing.AccountBilling.RevisedBilledAmount <> 0 then 1 else 0 end ) as RevisedBilledAmountMismatch,\r\n\t\tsum(case when Billing.AccountBillingAdjustmentGas.RevisedTherms - Billing.AccountBilling.AccountEnergyUsage <>0 then 1 else 0 end) as RevisedThermsMismatch\r\nFROM \r\n\t\tBilling.AccountBillingAdjustmentGas INNER JOIN\r\n\t\tBilling.AccountBilling ON Billing.AccountBillingAdjustmentGas.AccountBillingSeqid = Billing.AccountBilling.AccountBillingSeqid AND \r\n\t\tBilling.AccountBillingAdjustmentGas.OriginalAccountNumber = Billing.AccountBilling.OriginalAccountNumber AND \r\n\t\tBilling.AccountBillingAdjustmentGas.UtilityCompanySeqid = Billing.AccountBilling.UtilityCompanySeqid AND \r\n\t\tBilling.AccountBillingAdjustmentGas.InvoiceAccountGroupSeqid = Billing.AccountBilling.CurrentInvoiceAccountBillingGroup AND \r\n\t\tBilling.AccountBillingAdjustmentGas.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision\r\nGROUP BY \r\n\t\tBilling.AccountBillingAdjustmentGas.BillingPeriod, \r\n\t\tBilling.AccountBillingAdjustmentGas.AccountStatus, \r\n\t\tBilling.AccountBillingAdjustmentGas.LastPeriodModified,\r\n\t\tBilling.AccountBillingAdjustmentGas.InvoiceAccountGroupSeqid, \r\n\t\tBilling.AccountBillingAdjustmentGas.UtilityCompanySeqid\r\nhaving     \r\n\t\t(Billing.AccountBillingAdjustmentGas.LastPeriodModified = @LastPeriodModified) AND \r\n\t\t(Billing.AccountBillingAdjustmentGas.UtilityCompanySeqid = @UtilityCompanySeqid) and \r\n\t\t(Billing.AccountBillingAdjustmentGas.InvoiceAccountGroupSeqid=@CurrentInvoiceAccountBillingGroup)\r\n--                      \r\ninsert into @CompareAccountBillingAndABAGInfo\r\n\t(\r\n\t\tBillingPeriod, \r\n\t\tAccountStatus, \r\n\t\tLastPeriodModified,\r\n\t\tInvoiceAccountGroupSeqid, \r\n\t\tUtilityCompanySeqid, \r\n\t\tLegacyCancelDollarCorrection, \r\n\t\tNumberOfActualBills, \r\n\t\tNumberOfEstimatedBills, \r\n\t\tCurrentPeriodOriginalAndRevisedAmountMismatch,\r\n\t\tRevisedBilledAmountMismatch,\r\n\t\tRevisedThermsMismatch\r\n\t)\r\nSELECT \r\n\t\tBilling.AccountBillingAdjustmentGas.BillingPeriod, \r\n\t\tmin('All Statuses') AS AccountStatus, \r\n\t\tmin(Billing.AccountBillingAdjustmentGas.LastPeriodModified) as LastPeriodModified,\r\n\t\tmin(Billing.AccountBillingAdjustmentGas.InvoiceAccountGroupSeqid) as InvoiceAccountGroupSeqid, \r\n\t\tmin(Billing.AccountBillingAdjustmentGas.UtilityCompanySeqid) as UtilityCompanySeqid, \r\n\t\tSUM(Billing.AccountBillingAdjustmentGas.CanceledBilledAmount - Billing.AccountBillingAdjustmentGas.TotalCanceledAmount) AS LegacyCancelDollarCorrection, \r\n\t\tsum(case when Billing.AccountBillingAdjustmentGas.EstimatedOrActualBilling = 'ACT' then 1 else 0 end) as NumberOfActualBills, \r\n\t\tsum(case when Billing.AccountBillingAdjustmentGas.EstimatedOrActualBilling = 'EST' then 1 else 0 end) as NumberOfEstimatedBills, \r\n\t\tsum(case when Billing.AccountBilling.OriginalBilledAmount-Billing.AccountBilling.RevisedBilledAmount <>0 and \r\n\t\tBilling.AccountBillingAdjustmentGas.BillingPeriod=AccountBillingAdjustmentGas.BillingPeriodRevision \r\n\t\tthen 1 else 0 end ) as CurrentPeriodOriginalAndRevisedAmountMismatch,\r\n\t\tsum(case when Billing.AccountBillingAdjustmentGas.RevisedBilledAmount - Billing.AccountBilling.RevisedBilledAmount <> 0 then 1 else 0 end ) as RevisedBilledAmountMismatch,\r\n\t\tsum(case when Billing.AccountBillingAdjustmentGas.RevisedTherms - Billing.AccountBilling.AccountEnergyUsage <>0 then 1 else 0 end) as RevisedThermsMismatch\r\nFROM \r\n\t\tBilling.AccountBillingAdjustmentGas INNER JOIN\r\n\t\tBilling.AccountBilling ON Billing.AccountBillingAdjustmentGas.AccountBillingSeqid = Billing.AccountBilling.AccountBillingSeqid AND \r\n\t\tBilling.AccountBillingAdjustmentGas.OriginalAccountNumber = Billing.AccountBilling.OriginalAccountNumber AND \r\n\t\tBilling.AccountBillingAdjustmentGas.UtilityCompanySeqid = Billing.AccountBilling.UtilityCompanySeqid AND \r\n\t\tBilling.AccountBillingAdjustmentGas.InvoiceAccountGroupSeqid = Billing.AccountBilling.CurrentInvoiceAccountBillingGroup AND \r\n\t\tBilling.AccountBillingAdjustmentGas.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision\r\nWHERE \r\n\t\t(Billing.AccountBillingAdjustmentGas.LastPeriodModified = @LastPeriodModified) AND \r\n\t\t(Billing.AccountBillingAdjustmentGas.UtilityCompanySeqid = @UtilityCompanySeqid) and \r\n\t\t(Billing.AccountBillingAdjustmentGas.InvoiceAccountGroupSeqid=@CurrentInvoiceAccountBillingGroup)\r\nGROUP BY \r\n\t\tBilling.AccountBillingAdjustmentGas.BillingPeriod\r\n\r\nreturn\r\nEND"
        }
      ]
    }
  ]
}