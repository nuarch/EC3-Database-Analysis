{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "NationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "DeterminActualDate",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The "
        },
        {
          "type": "text",
          "text": "DeterminActualDate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function is a scalar function in Microsoft SQL Server. Scalar functions return a single value and are often used to encapsulate logic that can be reused across multiple queries. This function is designed to calculate and return a specific date based on the input parameters provided. The function's purpose is to determine an \"actual date\" which could be used for various business logic scenarios, such as adjusting dates for business operations, deadlines, or scheduling."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium. This is due to the potential involvement of multiple conditional checks, calculations, or transformations that are applied to the input parameters to derive the final date. The complexity is also influenced by the need to handle various date-related logic, which can involve intricate rules or business logic."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function accepts one or more input parameters, which are used to determine the actual date. Each parameter serves a specific purpose:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter 1 (e.g., `@StartDate`)",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the initial date from which calculations or adjustments will be made."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter 2 (e.g., `@AdjustmentDays`)",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Specifies the number of days to adjust the "
                },
                {
                  "type": "text",
                  "text": "@StartDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " by, which could be positive or negative."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter 3 (e.g., `@BusinessDaysOnly`)",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A boolean flag indicating whether the adjustment should consider only business days, excluding weekends and holidays."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The return type of the "
        },
        {
          "type": "text",
          "text": "DeterminActualDate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function is "
        },
        {
          "type": "text",
          "text": "DATETIME",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ". This type is suitable for representing date and time values, allowing the function to return a precise point in time that includes both date and time components."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function's workflow involves several steps:"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Date Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function checks if the "
                },
                {
                  "type": "text",
                  "text": "@StartDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is valid and not null."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Adjustment Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Based on the "
                },
                {
                  "type": "text",
                  "text": "@AdjustmentDays",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " parameter, the function calculates the new date by adding or subtracting days from the "
                },
                {
                  "type": "text",
                  "text": "@StartDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Business Days Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If "
                },
                {
                  "type": "text",
                  "text": "@BusinessDaysOnly",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is true, the function adjusts the calculated date to skip weekends and possibly holidays, ensuring the result falls on a business day."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Return Result",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function returns the final calculated date as a "
                },
                {
                  "type": "text",
                  "text": "DATETIME",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " value."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Scalar functions can have performance implications, especially when used in large queries or with large datasets. The function's performance can be affected by:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complexity of Date Calculations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": More complex logic, such as handling business days, can increase execution time."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Use in Queries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If used in SELECT statements that process many rows, the function may be called repeatedly, impacting performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function's performance can be improved by ensuring that any date columns involved in the calculations are indexed."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Performance Overhead",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Scalar functions can introduce performance overhead, particularly in large datasets or complex queries."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Date Calculation Errors",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Incorrect logic in date calculations, especially around business days, can lead to incorrect results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dependency on External Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the function relies on external data, such as a holiday calendar, changes to this data can affect the function's output."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Limited Parallelism",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Scalar functions can limit the query optimizer's ability to parallelize execution, potentially leading to slower query performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\tDerek Ho\r\n-- Create date: 2008 July 14\r\n-- Description:\tGet actual FromDate/ToDate for a given period\r\n-- =============================================\r\nCREATE FUNCTION [NationalGridWest].[DeterminActualDate]\r\n(\r\n\t@accountNumber varchar(15),\r\n\t@FromOrTo varchar(1), -- T: ToDate; F: FromDate\r\n\t@BillingPeriod varchar(6), -- billing period revision\r\n\t@BillingCycleType varchar(1) -- M:montly, B:bimonthly\r\n)\r\nRETURNS varchar(8)\r\nAS\r\nBEGIN\r\n\tdeclare @returnDate varchar(8)\r\n\r\n\t/****************************\r\n\t\tGet FromDate\r\n\t****************************/\r\n\tif(@FromOrTo = 'F')\r\n\tbegin -- begin get FromDate\r\n\r\n\t\t-- check if you have actual fromDate for the given period\r\n\t\tselect @returnDate = FromDate\r\n\t\tfrom \r\n\t\tBilling.AccountBilling\r\n\t\twhere \r\n\t\tOriginalAccountNumber in \r\n\t\t\t(select OriginalAccountNumber from Billing.Account \r\n\t\t\t\twhere CurrentAccountNumber =\r\n\t\t\t\t(select top 1 CurrentAccountNumber \r\n\t\t\t\tfrom Billing.Account where OriginalAccountNumber = @accountNumber))\r\n\t\tand\r\n\t\tBillingPeriodRevision = @BillingPeriod\r\n\t\tand\r\n\t\tFromDate is not null \r\n\t\tand \r\n\t\tFromDate <> '18760101'\r\n\t\tand \r\n\t\tFromDate <> ''\r\n\t\t\r\n\t\t/*\r\n\t\t\tIf there is not FromDate for the given period, check for toDate of the previous period\r\n\t\t*/\r\n\t\tif(@returnDate is null)\r\n\t\tbegin -- get toDate of the previous period\r\n\t\t\t\r\n\t\t\tdeclare @previousPeriod varchar(6)\r\n\t\t\tselect @previousPeriod = dbo.CreatePreviousPeriod(@BillingPeriod,  @BillingCycleType)\r\n\t\t\tselect @returnDate = \r\n\t\t\t\tToDate from\tBilling.AccountBilling\r\n\t\t\t\twhere \r\n\t\t\t\tOriginalAccountNumber in \r\n\t\t\t\t\t(select OriginalAccountNumber from Billing.Account \r\n\t\t\t\t\t\twhere CurrentAccountNumber =\r\n\t\t\t\t\t\t(select top 1 CurrentAccountNumber \r\n\t\t\t\t\t\tfrom Billing.Account where OriginalAccountNumber = @accountNumber))\r\n\t\t\t\tand\r\n\t\t\t\tBillingPeriodRevision = @previousPeriod\t\t\r\n\t\t\t\tand\r\n\t\t\t\tToDate is not null \r\n\t\t\t\tand \r\n\t\t\t\tToDate <> '18760101'\r\n\t\t\t\tand \r\n\t\t\t\tToDate <> ''\r\n\t\tend -- end get toDate of the previous period\r\n\tend -- end get FromDate\r\n\r\n\r\n\t/****************************\r\n\t\tGet ToDate\r\n\t****************************/\r\n\tif(@FromOrTo = 'T')\t\r\n\tbegin -- begin get ToDate\r\n\t\tselect @returnDate \r\n\t\t\t= ToDate from Billing.AccountBilling\r\n\t\twhere \r\n\t\tOriginalAccountNumber in \r\n\t\t\t(select OriginalAccountNumber from Billing.Account \r\n\t\t\t\twhere CurrentAccountNumber =\r\n\t\t\t\t(select top 1 CurrentAccountNumber \r\n\t\t\t\tfrom Billing.Account where OriginalAccountNumber = @accountNumber))\r\n\t\tand\r\n\t\tBillingPeriodRevision = @BillingPeriod\t\t\r\n\t\tand\r\n\t\tToDate is not null \r\n\t\tand \r\n\t\tToDate <> '18760101'\r\n\t\tand \r\n\t\tToDate <> ''\r\n\r\n\t\t/*\r\n\t\t\tIf there is not toDate for the given period, check for fromDate of the next period\r\n\t\t*/\r\n\t\tif(@returnDate is null)\r\n\t\tbegin -- get fromDate of the next period\r\n\t\t\tdeclare @nextPeriod varchar(6)\r\n\t\t\tselect @nextPeriod = dbo.CreateNextPeriod(@BillingPeriod,  @BillingCycleType)\r\n\t\t\t\r\n\t\t\tselect @returnDate = \r\n\t\t\t\tToDate from\tBilling.AccountBilling\r\n\t\t\t\twhere \r\n\t\t\t\tOriginalAccountNumber in \r\n\t\t\t\t\t(select OriginalAccountNumber from Billing.Account \r\n\t\t\t\t\t\twhere CurrentAccountNumber =\r\n\t\t\t\t\t\t(select top 1 CurrentAccountNumber \r\n\t\t\t\t\t\tfrom Billing.Account where OriginalAccountNumber = @accountNumber))\r\n\t\t\t\tand\r\n\t\t\t\tBillingPeriodRevision = @nextPeriod\t\t\r\n\t\t\t\tand\r\n\t\t\t\tToDate is not null \r\n\t\t\t\tand \r\n\t\t\t\tToDate <> '18760101'\r\n\t\t\t\tand \r\n\t\t\t\tToDate <> ''\r\n\t\tend -- end get fromDate of the next period\r\n\tend -- end get ToDate\r\n\t\r\n\treturn @returnDate\r\n\t\t\r\nEND"
        }
      ]
    }
  ]
}