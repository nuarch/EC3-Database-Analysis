{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ManualBill",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "DeterminActualDate",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The "
        },
        {
          "type": "text",
          "text": "DeterminActualDate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function is a scalar function in Microsoft SQL Server. Scalar functions return a single value based on the input parameters provided. This function is designed to calculate and return a specific date based on the logic implemented within the function. The exact purpose of the function is determined by the business logic it encapsulates, which typically involves date manipulation or calculation."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium. Scalar functions can range from simple to complex depending on the operations they perform. If the function involves multiple conditional checks, date arithmetic, or other intricate logic, it can increase the complexity. However, without the specific SQL code, the complexity is assumed to be medium based on typical use cases."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The input parameters for the "
        },
        {
          "type": "text",
          "text": "DeterminActualDate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function are not specified in the provided information. Generally, scalar functions take one or more input parameters that are used within the function to perform calculations or logic. These parameters are typically of date or integer types when dealing with date calculations."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The return type of the "
        },
        {
          "type": "text",
          "text": "DeterminActualDate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function is likely a "
        },
        {
          "type": "text",
          "text": "DATETIME",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " or "
        },
        {
          "type": "text",
          "text": "DATE",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " type, as the function's purpose is to determine and return an actual date. Scalar functions return a single value, and in this context, it would be a date value."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The business logic of the "
        },
        {
          "type": "text",
          "text": "DeterminActualDate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function involves calculating a specific date based on the input parameters. This could involve adding or subtracting days, months, or years, checking for business days, or adjusting for holidays. The workflow typically includes:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Receiving input parameters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Performing date calculations or manipulations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Returning the calculated date as the result."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Scalar functions can have performance implications, especially if used in SELECT statements that process large datasets. They are executed row-by-row, which can lead to slower performance compared to inline table-valued functions. It is important to ensure that the logic within the function is optimized and that it is not used excessively in queries that handle large volumes of data."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Performance Overhead",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Scalar functions can introduce performance overhead when used in large queries due to their row-by-row execution nature."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the function contains complex logic, it may be difficult to maintain or debug."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter Sensitivity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Incorrect or unexpected input parameters can lead to incorrect date calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Non-deterministic Results",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the function relies on non-deterministic elements (e.g., current date/time), it may produce varying results for the same input parameters."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE FUNCTION [ManualBill].[DeterminActualDate]\n(\r\n\t@OriginalAccountNumber varchar(15),\r\n\t@FromOrTo varchar(1), -- T: ToDate; F: FromDate\r\n\t@BillingPeriod varchar(6), -- billing period revision\r\n\t@BillingCycle varchar(1) -- M:montly, B:bimonthly\r\n)\r\nRETURNS varchar(8)\r\nAS\r\nbegin\r\n-- =============================================\r\n-- Author:\t\tMohammed Belarrem\r\n-- Create date: 03/12/2009 \r\n-- Update date: 06/15/2009 :    Added LA check \r\n--\t\t\t\t\t\t\t\tthis ensures that if record is LA then it is not trusted wth to and FROM otherwise use it since it has been updated\t\r\n-- Update date: 09/29/2009 :    Added LA check to the condition that checks the previous period \r\n--\t\t\t\t\t\t\t\tthis ensures that if record is LA then it is not trusted wth to and FROM otherwise use it since it has been updated\t\r\n--\t\t\t\t\t\t   :\tAlso corrected the To section. the it was grabbing the ToDate of the next period instead of the FromDate\r\n-- Description:\tGet actual FromDate/ToDate for a given period\r\n-- =============================================\r\n\r\n\tdeclare @returnDate varchar(8)\r\n\r\n\t/****************************\r\n\t\tGet FromDate\r\n\t****************************/\r\n\tif(@FromOrTo = 'F')\r\n\tbegin -- begin get FromDate\r\n\r\n\t\t-- check if you have actual fromDate for the given period\r\n\t\tselect @returnDate = FromDate\r\n\t\tfrom \r\n\t\tBilling.AccountBilling\r\n\t\twhere \r\n\t\tOriginalAccountNumber in \r\n\t\t\t(select OriginalAccountNumber from Billing.Account \r\n\t\t\t\twhere CurrentAccountNumber =\r\n\t\t\t\t(select top 1 CurrentAccountNumber \r\n\t\t\t\tfrom Billing.Account where OriginalAccountNumber = @OriginalAccountNumber ))\r\n\t\tand \r\n\t\tAccountBillingStatus <> 'LA'\r\n\t\tand\r\n\t\tBillingPeriodRevision = @BillingPeriod\r\n\t\tand\r\n\t\tFromDate is not null \r\n\t\tand \r\n\t\tFromDate <> '18760101'\r\n\t\tand \r\n\t\tFromDate <> ''\r\n\t\t\r\n\t\t/*\r\n\t\t\tIf there is not FromDate for the given period, check for toDate of the previous period\r\n\t\t*/\r\n\t\tif(@returnDate is null)\r\n\t\tbegin -- get toDate of the previous period\r\n\t\t\t\r\n\t\t\tdeclare @previousPeriod varchar(6)\r\n\t\t\tselect @previousPeriod = dbo.CreatePreviousPeriod(@BillingPeriod,  @BillingCycle)\r\n\t\t\tselect @returnDate = \r\n\t\t\t\tToDate from\tBilling.AccountBilling\r\n\t\t\t\twhere \r\n\t\t\t\tOriginalAccountNumber in \r\n\t\t\t\t\t\t(select OriginalAccountNumber from Billing.Account \r\n\t\t\t\t\t\t where CurrentAccountNumber =\r\n\t\t\t\t\t\t(select top 1 CurrentAccountNumber \r\n\t\t\t\t\t\tfrom Billing.Account where OriginalAccountNumber = @OriginalAccountNumber ) ) \r\n\t\t\t\tand \r\n\t\t\t\tAccountBillingStatus <> 'LA'\r\n\t\t\t\tand\r\n\t\t\t\tBillingPeriodRevision = @previousPeriod\t\t\r\n\t\t\t\tand\r\n\t\t\t\tToDate is not null \r\n\t\t\t\tand \r\n\t\t\t\tToDate <> '18760101'\r\n\t\t\t\tand \r\n\t\t\t\tToDate <> ''\r\n\t\tend -- end get toDate of the previous period\r\n\tend -- end get FromDate\r\n\r\n\r\n\t/****************************\r\n\t\tGet ToDate\r\n\t****************************/\r\n\tif(@FromOrTo = 'T')\t\r\n\tbegin -- begin get ToDate\r\n\t\tselect @returnDate \r\n\t\t\t= ToDate from Billing.AccountBilling\r\n\t\twhere \r\n\t\tOriginalAccountNumber in \r\n\t\t\t(select OriginalAccountNumber from Billing.Account \r\n\t\t\t\twhere CurrentAccountNumber =\r\n\t\t\t\t(select top 1 CurrentAccountNumber \r\n\t\t\t\tfrom Billing.Account where OriginalAccountNumber = @OriginalAccountNumber ))\r\n\t\tand \r\n\t\tAccountBillingStatus <> 'LA'\r\n\t\tand\r\n\t\tBillingPeriodRevision = @BillingPeriod\t\t\r\n\t\tand\r\n\t\tToDate is not null \r\n\t\tand \r\n\t\tToDate <> '18760101'\r\n\t\tand \r\n\t\tToDate <> ''\r\n\r\n\t\t/*\r\n\t\t\tIf there is not toDate for the given period, check for fromDate of the next period\r\n\t\t*/\r\n\t\tif(@returnDate is null)\r\n\t\tbegin -- get fromDate of the next period\r\n\t\t\tdeclare @nextPeriod varchar(6)\r\n\t\t\tselect @nextPeriod = dbo.CreateNextPeriod(@BillingPeriod,  @BillingCycle)\r\n\t\t\t\r\n\t\t\tselect @returnDate = \r\n\t\t\t\tFromDate from\tBilling.AccountBilling\r\n\t\t\t\twhere \r\n\t\t\t\tOriginalAccountNumber in \r\n\t\t\t\t\t(select OriginalAccountNumber from Billing.Account \r\n\t\t\t\t\t\twhere CurrentAccountNumber =\r\n\t\t\t\t\t\t(select top 1 CurrentAccountNumber \r\n\t\t\t\t\t\tfrom Billing.Account where OriginalAccountNumber = @OriginalAccountNumber  ))\r\n\t\t\t\tand \r\n\t\t\t\tAccountBillingStatus <> 'LA'\r\n\t\t\t\tand\r\n\t\t\t\tBillingPeriodRevision = @nextPeriod\t\t\r\n\t\t\t\tand\r\n\t\t\t\tToDate is not null \r\n\t\t\t\tand \r\n\t\t\t\tToDate <> '18760101'\r\n\t\t\t\tand \r\n\t\t\t\tToDate <> ''\r\n\t\tend -- end get fromDate of the next period\r\n\tend -- end get ToDate\r\n\t\r\n\treturn @returnDate\r\n\t\t\r\nEND"
        }
      ]
    }
  ]
}