{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "NationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "DetermineBillingPeriodByAccountNumber",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The "
        },
        {
          "type": "text",
          "text": "DetermineBillingPeriodByAccountNumber",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function is a scalar function in Microsoft SQL Server designed to determine the billing period for a given account number. Scalar functions return a single value, which in this case, is expected to represent the billing period associated with the provided account number. This function is typically used in scenarios where billing cycles need to be calculated or retrieved based on account-specific data."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium. While scalar functions themselves are straightforward in terms of returning a single value, the complexity arises from the logic used to determine the billing period. This could involve querying multiple tables, applying business rules, and handling various conditions that affect billing cycles."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AccountNumber",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is expected to be of a data type suitable for storing account numbers, such as "
                },
                {
                  "type": "text",
                  "text": "VARCHAR",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " or "
                },
                {
                  "type": "text",
                  "text": "INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". It serves as the unique identifier for the account whose billing period is being determined. The function uses this parameter to query relevant data and apply logic to ascertain the correct billing period."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The return type of the function is typically a data type that can represent a billing period, such as "
        },
        {
          "type": "text",
          "text": "DATETIME",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", "
        },
        {
          "type": "text",
          "text": "DATE",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", or "
        },
        {
          "type": "text",
          "text": "VARCHAR",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " if the billing period is expressed in a non-date format. The structure of the return value should align with how billing periods are represented in the business context, whether as a specific date, a range, or a descriptive string."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The business logic within the function involves:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Querying the database to retrieve billing-related data for the specified account number."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Applying business rules to determine the billing period. This could include checking the account's billing cycle, payment history, or any special conditions that affect billing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Returning the calculated billing period as a single value."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The workflow typically involves:"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validating the input parameter to ensure it is a valid account number."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Executing a query or series of queries to gather necessary data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Applying conditional logic to compute the billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Returning the result."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalar functions can introduce performance overhead, especially if they are called repeatedly in a query, such as within a "
                },
                {
                  "type": "text",
                  "text": "SELECT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " statement for each row. This is because scalar functions execute row-by-row, which can lead to performance bottlenecks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "To mitigate performance issues, ensure that the function's logic is optimized and that any queries within the function are efficient, possibly using indexes or pre-computed data where applicable."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Consider using inline table-valued functions if the logic can be expressed in a way that benefits from set-based operations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Performance Impact",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As scalar functions are executed per row, they can significantly slow down queries if not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure robust error handling within the function to manage cases where the account number is invalid or when data retrieval fails."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Consistency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function should account for any changes in the underlying data structure or business rules that could affect the determination of billing periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the database grows, the function's performance should be monitored to ensure it scales appropriately with increased data volume."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\tDerek Ho\r\n-- Create date: 2008 July 11\r\n-- Description:\tReturn billing period for given date. For a given bill, the billing period of toDate might be equal to the billing period of the fromDate because the the bill can be a spanned bill.\r\n-- =============================================\r\nCREATE FUNCTION [NationalGridWest].[DetermineBillingPeriodByAccountNumber] \r\n(\r\n\t@OriginalAccountNumber varchar(15), -- AccountNumber being billied\r\n\t@BillingCycleType varchar(1), -- M:Montly; B:bimonthly\r\n\t@date varchar(8), -- fromDate or toDate\r\n\t@FromOrTo varchar(1) -- F:@date = from date; T: @date = to date\r\n)\r\nRETURNS  varchar(6)\r\nAS\r\nBEGIN\r\n\tdeclare @BillingPeriod varchar(6)\r\n\tdeclare @WDNumber varchar(2)\r\n\t--\r\n\tset @WDNumber = substring(@OriginalAccountNumber,12,2)\r\n\t--\r\n\t\t/**********************************\r\n\t\t\tAttempt to get the billing period from historical billing\r\n\t\t**********************************/\r\n\tdeclare @MissingHistoricalOriginalAccountNumber int\r\n\t--\r\n\tSELECT \r\n\t\t\t@BillingPeriod = Billing.AccountBilling.BillingPeriod\r\n\tFROM \r\n\t\t\tBilling.AccountBilling INNER JOIN\r\n\t\t\tBilling.Account ON Billing.AccountBilling.AccountSeqid = Billing.Account.AccountSeqid AND \r\n\t\t\tBilling.AccountBilling.OriginalAccountNumber = Billing.Account.OriginalAccountNumber\r\n\tWHERE \r\n\t(Billing.Account.CurrentInvoiceAccountGroup IN (3, 4)) AND \r\n\t(Billing.AccountBilling.FromDate < @date) AND (Billing.AccountBilling.ToDate >= @date) and\t\r\n\t(Billing.AccountBilling.OriginalAccountNumber = @OriginalAccountNumber)\r\n\tset @MissingHistoricalOriginalAccountNumber = @@rowcount\t\r\n\t--\r\n\t\r\n\tif (@MissingHistoricalOriginalAccountNumber <> 0)\r\n\tbegin\r\n\t\t--\r\n\t\t-- Found OriginalAccountNumber and calculated the first cancel period based upon the from date\r\n\t\t-- or returned the billing period based upon the ToDate.\r\n\t\t--\r\n\t\treturn case \r\n\t\t\t\t\twhen @FromOrTo ='F' \r\n\t\t\t\t\t\tthen [dbo].[CalculateNextBillingPeriod](@BillingPeriod,@BillingCycleType) \r\n\t\t\t\t\t\telse @BillingPeriod\r\n\t\t\t\tend\r\n\tend\r\n\t--\r\n\t-- bimonthly\r\n\tif(@BillingCycleType = 'B')\r\n\tbegin -- begin bimonthly\r\n\r\n\t\t/**********************************\r\n\t\t\tbillingPeriod for bimonthly toDate (default)\r\n\t\t**********************************/\r\n\t\tSELECT @BillingPeriod = BillingPeriod\r\n\t\t\tFROM Billing.BillingPeriodKeyspanWestWD\r\n\t\t\tWHERE (WDNumber = @WdNumber) AND (PriorPeriodMeterReadingToDate < @date) AND (MeterReadingToDate >= @date)\r\n\r\n\t\t/**********************************\r\n\t\t\tbillingPeriod for bimonthly fromDate \r\n\t\t**********************************/\r\n\t\tif(@FromOrTo = 'F')\r\n\t\tbegin -- begin bimonthly fromDate\r\n\t\t\t-- current value of @BillingPeriod holds the billing period of the previous period. result of CreateNextPeriod\r\n\t\t\t-- note: fromDate = toDate of the previous period\t\t\t\r\n\t\t\tset @BillingPeriod = dbo.CreateNextPeriod(@BillingPeriod,'B') \r\n\r\n\t\tend -- end bimonthly fromDate\r\n\tend -- end bimonthly\r\n\t\r\n\t-- monthly\r\n\tif(@BillingCycleType = 'M')\r\n\tbegin -- begin monthly\r\n\t\t\r\n\t\t-- get the other matching WDNumber\r\n\t\t-- example: for wdnumber 1, @WDNumber_m is 21 \r\n\t\tdeclare @WDNumber_m varchar(2), @WDNumber_m_int int\r\n\t\tset @WDNumber_m_int =  ((cast(@WDNumber as int) + 20) % 40)\r\n\t\tif(@WDNumber_m_int = 0) set @WDNumber_m_int  = 40\r\n\t\tset @WDNumber_m =\tREPLICATE('0', 2 - DATALENGTH(cast(@WDNumber_m_int as varchar))) + cast(@WDNumber_m_int as varchar) \r\n\r\n\t\t/*\r\n\t\t\tFollowing where clause for query against BillingPeriodKeyspanWestWD return\r\n\t\t\t2 record. min(BillingPeriod) is billingPeriod for @date. max(BillingPeriod) \r\n\t\t\tis next billing period for @date.\r\n\t\t\tThus,\r\n\t\t\tmin(BillingPeriod) for toDate = max(BillingPeriod) for fromDate\r\n\t\r\n\t\t\tfrom dbo.BillingPeriodKeyspanWestWD\r\n\t\t\twhere PriorPeriodMeterReadingToDate <= @date\r\n\t\t\tand MeterReadingToDate >= @date\r\n\t\t\tand WDNumber in (@WDNumber_m, @WDNumber)\r\n\t\t*/\t\t\r\n\r\n\r\n\t\t/**********************************\r\n\t\t\tbillingPeriod for monthly toDate\r\n\t\t**********************************/\r\n\t\tif(@FromOrTo = 'T')\r\n\t\tbegin -- begin monthly toDate\r\n\r\n\t\t\tselect @BillingPeriod = min(BillingPeriod)\r\n\t\t\tfrom billing.BillingPeriodKeyspanWestWD\r\n\t\t\twhere \r\n\t\t\tPriorPeriodMeterReadingToDate < @date\r\n\t\t\tand\r\n\t\t\tMeterReadingToDate >= @date\r\n\t\t\tand WDNumber in (@WDNumber_m, @WDNumber)\r\n\r\n\t\tend --  end monthly toDate\r\n\r\n\r\n\t\t/**************************************\r\n\t\t\tbillingPeriod for monthly fromDate\r\n\t\t**********************************/\r\n\t\tif(@FromOrTo = 'F')\r\n\t\tbegin -- begin monthly fromDate\r\n\t\t\t\r\n\t\t\tselect @BillingPeriod = max(BillingPeriod)\r\n\t\t\tfrom billing.BillingPeriodKeyspanWestWD\r\n\t\t\twhere \r\n\t\t\tPriorPeriodMeterReadingToDate < @date\r\n\t\t\tand\r\n\t\t\tMeterReadingToDate >= @date\r\n\t\t\tand WDNumber in (@WDNumber_m, @WDNumber)\r\n\r\n\t\tend -- end montly fromDate\r\n\t\r\n\tend -- end monthly\r\n\t\r\n\tif(@BillingPeriod is null or @BillingPeriod = '')\r\n\t\tset @BillingPeriod = 'XXXXXX'\r\n\t\r\n\treturn @BillingPeriod\r\nEND"
        }
      ]
    }
  ]
}