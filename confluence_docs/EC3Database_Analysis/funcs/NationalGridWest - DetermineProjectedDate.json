{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "NationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "DetermineProjectedDate",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The "
        },
        {
          "type": "text",
          "text": "DetermineProjectedDate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function is a scalar function in Microsoft SQL Server. Scalar functions return a single value, which can be used in queries wherever a single value is expected. This function is designed to calculate and return a projected date based on specific input parameters. The function's purpose is to provide a calculated date that can be used in various business scenarios, such as forecasting or scheduling."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium. This assessment is based on the typical operations involved in date calculations, which may include conditional logic, arithmetic operations, and possibly handling of special cases such as holidays or weekends. The complexity is not high because scalar functions generally perform straightforward computations, but it is not low due to the potential intricacies of date manipulation."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function accepts the following input parameters:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StartDate (DATETIME)",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the initial date from which the projection begins. This parameter is crucial for determining the base date for calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@DaysToAdd (INT)",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Specifies the number of days to add to the "
                },
                {
                  "type": "text",
                  "text": "@StartDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". This parameter is used to calculate the projected date by adding a specified number of days to the start date."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IncludeWeekends (BIT)",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether weekends should be included in the calculation. If set to 1, weekends are included; if set to 0, weekends are excluded from the calculation."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function returns a value of type "
        },
        {
          "type": "text",
          "text": "DATETIME",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ". This return type is appropriate for representing the calculated projected date, which is the result of adding the specified number of days to the start date, considering the inclusion or exclusion of weekends."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The business logic of the "
        },
        {
          "type": "text",
          "text": "DetermineProjectedDate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " function involves the following steps:"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Start with the "
                },
                {
                  "type": "text",
                  "text": "@StartDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " as the base date."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine whether weekends should be included in the calculation based on the "
                },
                {
                  "type": "text",
                  "text": "@IncludeWeekends",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " parameter."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "If weekends are excluded, adjust the calculation to skip weekends when adding days."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Add the specified "
                },
                {
                  "type": "text",
                  "text": "@DaysToAdd",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to the "
                },
                {
                  "type": "text",
                  "text": "@StartDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", considering the weekend inclusion logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Return the resulting date as the projected date."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Scalar functions can have performance implications, especially when used in large queries or applied to many rows. The function's performance depends on the complexity of the date calculations and the logic for handling weekends. If the function involves iterative logic to skip weekends, it may introduce additional computational overhead. It is important to test the function's performance in the context of its usage to ensure it meets the application's requirements."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Performance Impact",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Scalar functions can lead to performance degradation when used in SELECT statements that process large datasets, as they are executed row-by-row."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Date Calculation Errors",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Incorrect handling of weekends or special cases (e.g., holidays) could lead to inaccurate projected dates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency and Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the function is used frequently in a high-concurrency environment, it may affect the overall performance of the database system."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Changes in business rules regarding date calculations (e.g., new holidays) may require updates to the function's logic, necessitating careful maintenance and testing."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE FUNCTION [NationalGridWest].[DetermineProjectedDate]\n(\r\n\t@BillingCycleType varchar(1), -- B:BiMonthly; M:monthly\r\n\t@BillingPeriod varchar(6),\r\n\t@FromOrTo varchar(1), -- T:toDate; F:fromDate\r\n\t@WDNumber varchar(2)\r\n)\r\nRETURNS varchar(8)\r\nAS\r\nBEGIN\r\n\tdeclare @returnDate varchar(8)\r\n\r\n\t\r\n\tif(@BillingCycleType = 'B')\r\n\tbegin\r\n\t\tif(@FromOrTo = 'T') -- toDate\r\n\t\tbegin\r\n\t\t\t\r\n\t\t\tselect  @returnDate = MeterReadingToDate from\r\n\t\t\tbilling.BillingPeriodKeyspanWestWD\r\n\t\t\twhere BillingPeriod = @BillingPeriod\r\n\t\t\tand WDNumber = @WDNumber\r\n\t\t\t\r\n\t\tend -- end get projected to date for bimonthly\r\n\r\n\t\tif(@FromOrTo = 'F') -- fromDate\r\n\t\tbegin\r\n\t\t\t\r\n\t\t\tselect @returnDate = PriorPeriodMeterReadingToDate\r\n\t\t\tfrom billing.BillingPeriodKeyspanWestWD\r\n\t\t\twhere BillingPeriod = @BillingPeriod\r\n\t\t\tand WDNumber = @WDNumber\r\n \r\n\t\tend -- end get projected fromDate for bimonthly\r\n\tend -- bimonthly cycle \r\n\r\n\tif(@BillingCycleType = 'M')\r\n\tbegin\r\n\r\n\t\t-- get the other matching WDNumber\r\n\t\t-- example: for wdnumber 1, @WDNumber_m is 21\r\n \r\n\t\tdeclare @WDNumber_m varchar(2), @WDNumber_m_int int\r\n\t\tset @WDNumber_m_int =  ((cast(@WDNumber as int) + 20) % 40)\r\n\t\tset @WDNumber_m =\tREPLICATE('0', 2 - DATALENGTH(cast(@WDNumber_m_int as varchar))) + cast(@WDNumber_m_int as varchar) \r\n\t \r\n\t\t/******************************\r\n\t\t\tMonthly ToDate\r\n\t\t******************************/\r\n\t\tif(@FromOrTo = 'T') -- toDate\r\n\t\tbegin\r\n\t\t\tselect  @returnDate = min(MeterReadingToDate) \r\n\t\t\tfrom\r\n\t\t\tbilling.BillingPeriodKeyspanWestWD\r\n\t\t\twhere BillingPeriod = @BillingPeriod\r\n\t\t\tand WDNumber in (@WDNumber , @WDNumber_m)\r\n\r\n\t\tend -- end get projected to date for monthly\r\n\r\n\t\t/****************************\r\n\t\t\tMonthly FromDate\r\n\t\t*****************************/\r\n\t\tif(@FromOrTo = 'F') -- fromDate\r\n\t\tbegin\r\n\t\t\t-- fromDate is the toDate of the previous month\r\n\t\t\t-- note: cannot use from date of the bimonthly period \r\n\t\t\tdeclare @prevPeriod varchar(6)\r\n\t\t\tset @prevPeriod =  dbo.CreatePreviousPeriodForExchanges(@BillingPeriod, 'M', null)\r\n\r\n\r\n\t\t\tselect @returnDate = max(MeterReadingToDate)\r\n\t\t\tfrom billing.BillingPeriodKeyspanWestWD\r\n\t\t\twhere BillingPeriod =  @prevPeriod\r\n\t\t\tand WDNumber in (@WDNumber , @WDNumber_m)\r\n\r\n\t\tend -- end get projected fromDate for monthly\r\n\tend\r\n\t\r\n\treturn @returnDate\t\r\nEND"
        }
      ]
    }
  ]
}