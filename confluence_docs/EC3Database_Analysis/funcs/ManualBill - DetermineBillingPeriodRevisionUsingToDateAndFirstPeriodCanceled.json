{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ManualBill",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "DetermineBillingPeriodRevisionUsingToDateAndFirstPeriodCanceled",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function "
        },
        {
          "type": "text",
          "text": "DetermineBillingPeriodRevisionUsingToDateAndFirstPeriodCanceled",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is a scalar function in Microsoft SQL Server. Scalar functions return a single value and are often used to encapsulate reusable logic that can be applied to individual rows in a query. This specific function is designed to determine the revision of a billing period based on a given date and the status of the first period being canceled."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium. This is due to the potential involvement of conditional logic and date manipulation, which can introduce moderate complexity depending on the specific business rules implemented within the function."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function likely accepts the following input parameters:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@ToDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A date parameter representing the end date of the billing period. This parameter is crucial for determining the relevant billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@FirstPeriodCanceled",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A boolean or integer parameter indicating whether the first billing period was canceled. This parameter influences the logic for calculating the billing period revision."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The return type of this function is typically an integer or a string, representing the revision number or identifier of the billing period. The exact data type depends on how revisions are tracked within the system."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The business logic of this function involves:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Evaluating the "
                },
                {
                  "type": "text",
                  "text": "@ToDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to determine the billing period it falls into."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Checking the "
                },
                {
                  "type": "text",
                  "text": "@FirstPeriodCanceled",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " flag to adjust the billing period revision logic accordingly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Applying conditional logic to calculate the correct revision number or identifier based on the input parameters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Returning the calculated revision as the function's output."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Scalar functions can have performance implications, especially when used in large queries or applied to many rows. They are executed row-by-row, which can lead to slower performance compared to inline table-valued functions. To mitigate performance issues:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Ensure the function logic is optimized and avoids unnecessary computations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Consider using inline table-valued functions if the logic can be expressed in a set-based manner."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalar functions can lead to performance bottlenecks in large datasets due to their row-by-row execution nature."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "If the function contains complex logic or multiple conditional branches, it may become difficult to maintain and debug."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Changes in business rules related to billing periods or cancellation policies may require updates to the function, necessitating thorough testing to ensure accuracy."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Incorrect handling of date boundaries or cancellation flags could lead to incorrect billing period revisions, impacting billing accuracy."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--******************************************************************************************************\n--* estimates the Billing Period Revision based on the to , from the First Period Canceled\r\n--* this function became a necessity since the data entry opperator only inputs the First period canceled  \r\n--* and since the assumption that all rebills span from period P until the current billing period falls apart\r\n--* in case of back bills we needed a way to get the billingperiod revision automatically.\r\n--* and since the MeterReadingSchedule is not reliable he function estimated the period when there is no record \r\n--*\r\n--* Mohammed Belarrem\r\n--*\tcreated 07/31/2009\r\n--******************************************************************************************************\r\nCREATE FUNCTION [ManualBill].[DetermineBillingPeriodRevisionUsingToDateAndFirstPeriodCanceled]\r\n(\r\n\t@UtilityCompany AS dbo.seqid,\t\r\n\t@InvoiceBillingGroup AS dbo.seqid,\t\r\n\t@FromDate AS dbo.FromDate,\r\n\t@ToDate AS dbo.ToDate,\r\n\t@FirstPeriodCanceled AS dbo.BillingPeriod,\r\n\t@TripNumber AS VARCHAR(2),\r\n\t@BillingCycle AS VARCHAR(1)\r\n)\r\nRETURNS VARCHAR(6)\r\nAS\r\nBEGIN\t\r\n\tDECLARE @BillingPeriodRevision AS dbo.BillingPeriod, @NumberOfDays AS INT, @BillingPeriodDays AS INT\r\n\t\t,@DeltaPeriods AS INT, @CurrentBillingPeriod AS dbo.BillingPeriod, @TopMeterReadingBillingPeriod AS dbo.BillingPeriod;\r\n\t\t\r\n\tSELECT @CurrentBillingPeriod = BillingPeriod FROM ManualBill.ManualBillingApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\t\t\r\n\tSELECT TOP 1 @TopMeterReadingBillingPeriod = BillingPeriod\r\n\tFROM ManualBill.ReadingScheduleManualBilling\r\n\tWHERE InvoiceAccountGroupSeqid = @InvoiceBillingGroup AND TripNumber = @TripNumber AND BillingCycle = @BillingCycle\r\n\tORDER BY BillingPeriod DESC;\r\n\t\t\r\n\t-- check if there are records in the ReadingScheduleManualBilling then evaluate BillingPeriodRevision otherwise skip it\r\n\tIF (@TopMeterReadingBillingPeriod >= @CurrentBillingPeriod)\r\n\tBEGIN\r\n\t\tSELECT TOP 1 @BillingPeriodRevision = BillingPeriod\r\n\t\tFROM ManualBill.ReadingScheduleManualBilling\r\n\t\tWHERE InvoiceAccountGroupSeqid = @InvoiceBillingGroup AND MeterReadingToDate <= @ToDate AND BillingPeriod >= @FirstPeriodCanceled AND TripNumber = @TripNumber AND BillingCycle = @BillingCycle\r\n\t\tORDER BY BillingPeriod DESC;\r\n\tEND;\r\n\t\t\r\n\t-- if there are no records in the ReadingScheduleManualBilling estimate it\r\n\tIF (@BillingPeriodRevision IS NULL)\r\n\tBEGIN\r\n\t\tSET @NumberOfDays = CASE @BillingCycle\r\n\t\t\t\t\t\t\tWHEN 'M' THEN 28\r\n\t\t\t\t\t\t\tWHEN 'B' THEN 56\r\n\t\t\t\t\t\t\tWHEN 'Q' THEN 84\r\n\t\t\t\t\t\t\tWHEN 'Y' THEN 350\r\n\t\t\t\t\t\t\tELSE 28\r\n\t\t\t\t\t\t\tEND;\r\n             \r\n\t\tSELECT @BillingPeriodDays = dbo.CalculateNumberOfBillingDays(@FromDate, @ToDate);\r\n\t\tSET @DeltaPeriods = ROUND( (CAST(@BillingPeriodDays AS FLOAT))/ @NumberOfDays, 0);\r\n\t\t\r\n\t\t-- set default\r\n\t\tSET @BillingPeriodRevision = @FirstPeriodCanceled;\r\n\t\t\r\n\t\tWHILE (@DeltaPeriods > 1)\r\n\t\tBEGIN\r\n\t\t\tSET @BillingPeriodRevision = dbo.CalculateNextBillingPeriod(@BillingPeriodRevision, @BillingCycle);\r\n\t\t\tSET @DeltaPeriods = @DeltaPeriods - 1;\r\n\t\tEND;\r\n\tEND;\r\n\r\n\t-- overshoot prevention\r\n\tIF (@CurrentBillingPeriod < @BillingPeriodRevision)\r\n\tBEGIN\r\n\t\tSET @BillingPeriodRevision = @CurrentBillingPeriod;\r\n\tEND;\r\n\r\n\tRETURN @BillingPeriodRevision;\r\nEND;"
        }
      ]
    }
  ]
}