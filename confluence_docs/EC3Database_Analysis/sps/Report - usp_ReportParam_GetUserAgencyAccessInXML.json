{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ReportParam_GetUserAgencyAccessInXML",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ReportParam_GetUserAgencyAccessInXML",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve and return a hierarchical XML representation of agency access permissions for a user identified by their email address. It constructs a hierarchy of agencies and their divisions, including parent and child relationships, and outputs this data in an XML format. The procedure uses a combination of table variables, joins, and hierarchy functions to build the hierarchy and ensure that all relevant agency divisions are included."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is medium due to the use of hierarchical data structures, multiple joins, and XML generation. The logic involves recursive-like operations to include parent and child nodes, which adds to the complexity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@UserEmailAddress emailaddr",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is used to identify the user whose agency access permissions are being queried. It is expected to be of a custom data type "
                },
                {
                  "type": "text",
                  "text": "emailaddr",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", which likely enforces email format validation."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A table variable "
                },
                {
                  "type": "text",
                  "text": "@AgencyAccess",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is declared to temporarily store agency access data for the user. This table includes columns for agency division identifiers, codes, names, hierarchy information, and a flag indicating the origin of the record."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "User Agency Access Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure populates "
                },
                {
                  "type": "text",
                  "text": "@AgencyAccess",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with agency divisions directly associated with the user by calling a function "
                },
                {
                  "type": "text",
                  "text": "dbo.uftn_TableGetAgencyByEmailAddressAgencyAccessAction",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". This function returns agency access data for the given email address. The results are filtered to exclude inactive agencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parent Agency Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure identifies and inserts parent agencies of the initially inserted agencies into "
                },
                {
                  "type": "text",
                  "text": "@AgencyAccess",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". It uses the "
                },
                {
                  "type": "text",
                  "text": "IsDescendantOf",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " method of the "
                },
                {
                  "type": "text",
                  "text": "HIERARCHYID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " data type to determine parent-child relationships and ensures that only active and non-duplicate parent agencies are added."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Child Agency Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Similarly, child agencies of the initially inserted agencies are identified and inserted. The same hierarchical method is used to ensure correct parent-child relationships, and duplicates are avoided."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "XML Generation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Finally, the procedure constructs an XML document representing the agency hierarchy. It uses nested "
                },
                {
                  "type": "text",
                  "text": "SELECT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " statements with "
                },
                {
                  "type": "text",
                  "text": "FOR XML PATH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to create a structured XML output, organizing agencies into levels based on their hierarchy."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hierarchical Queries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "HIERARCHYID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and its methods can be efficient for hierarchical data but may become a bottleneck if the hierarchy is deep or if there are many nodes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Variable Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a table variable for intermediate storage is generally efficient for small to medium-sized datasets but could lead to performance issues if the dataset is large due to lack of statistics and indexing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "XML Generation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Constructing XML can be resource-intensive, especially if the dataset is large. The nested XML generation could impact performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may not scale well with a large number of agencies or deep hierarchies due to the recursive-like nature of parent and child insertion logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Table variables do not support parallelism, which might affect performance under high concurrency."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the hierarchy is well-formed and that there are no circular references or orphan nodes, which could lead to incorrect results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Dependency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on an external function "
                },
                {
                  "type": "text",
                  "text": "uftn_TableGetAgencyByEmailAddressAgencyAccessAction",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", which is a potential point of failure if it does not return expected results or if its performance is suboptimal."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_ReportParam_GetUserAgencyAccessInXML]\n\t@UserEmailAddress emailaddr\r\nAS\r\nBEGIN\r\n\t\r\n\tDECLARE @AgencyAccess TABLE\r\n\t(\r\n\t\tAgencyDivisionSeqID INT,\r\n\t\tAgencyCodeOEC AgencyCodeOEC,\r\n\t\tAgencyName ldesc,\r\n\t\tParentAgencyDivisionSeqID INT,\r\n\t\tAgencyDivisionHierarchy HIERARCHYID,\r\n\t\tOriginSourceRecord int -- 0 = yes\r\n\t)\r\n\t\r\n\t-- insert agency access for selected user\r\n\tINSERT @AgencyAccess\r\n\t\t(\r\n\t\t\tAgencyDivisionSeqID, \r\n\t\t\tAgencyCodeOEC, \r\n\t\t\tAgencyName, \r\n\t\t\tParentAgencyDivisionSeqID,\r\n\t\t\tAgencyDivisionHierarchy,\r\n\t\t\tOriginSourceRecord\r\n\t\t)\t\r\n\tSELECT DISTINCT\r\n\t\tuad.AgencyDivisionSeqid,\r\n\t\tuad.AgencyCodeOEC,\r\n\t\tuad.AgencyShortDesc,\r\n\t\tad.ParentAgencyDivisionSeqid,\r\n\t\tad.AgencyDivisionHierarchy,\r\n\t\t0\r\n\tFROM \r\n\t\tdbo.uftn_TableGetAgencyByEmailAddressAgencyAccessAction(@UserEmailAddress) AS uad\r\n\t\tINNER JOIN \r\n\t\tBilling.AgencyDivision AS ad\r\n\tON uad.AgencyDivisionSeqid = ad.AgencyDivisionSeqid\r\n\tWHERE uad.Inactive = 'N'\r\n\t\r\n\t--add parents\r\n\tINSERT @AgencyAccess\r\n\t(\r\n\t\tAgencyDivisionSeqID, \r\n\t\tAgencyCodeOEC, \r\n\t\tAgencyName, \r\n\t\tParentAgencyDivisionSeqID,\r\n\t\tAgencyDivisionHierarchy,\r\n\t\tOriginSourceRecord\r\n\t)\t\r\n\tselect \r\n\t\tparents.AgencyDivisionSeqid, \r\n\t\tparents.AgencyCodeOEC, \r\n\t\tparents.AgencyShortDesc, \r\n\t\tparents.ParentAgencyDivisionSeqid,\r\n\t\tparents.AgencyDivisionHierarchy,\r\n\t\t1\r\n\tfrom Billing.AgencyDivision AS parents\r\n\tINNER JOIN @AgencyAccess AS children\r\n\tON children.AgencyDivisionHierarchy.IsDescendantOf(parents.AgencyDivisionHierarchy) = 1\r\n\tWHERE \r\n\tparents.Inactive = 'N'\r\n\tand\r\n\tchildren.AgencyDivisionSeqid IN \r\n\t(\r\n\t\tSELECT AgencyDivisionSeqID FROM @AgencyAccess WHERE OriginSourceRecord = 0\r\n\t)\r\n\tAND parents.AgencyDivisionSeqid NOT IN\r\n\t(\r\n\t\tSELECT AgencyDivisionSeqid FROM @AgencyAccess\r\n\t)\r\n\t\r\n\t-- add Children\r\n\tINSERT @AgencyAccess\r\n\t(\r\n\t\tAgencyDivisionSeqID, \r\n\t\tAgencyCodeOEC, \r\n\t\tAgencyName, \r\n\t\tParentAgencyDivisionSeqID,\r\n\t\tAgencyDivisionHierarchy,\r\n\t\tOriginSourceRecord\r\n\t)\t\r\n\tselect \r\n\t\tchildren.AgencyDivisionSeqid, \r\n\t\tchildren.AgencyCodeOEC, \r\n\t\tchildren.AgencyShortDesc, \r\n\t\tchildren.ParentAgencyDivisionSeqid,\r\n\t\tchildren.AgencyDivisionHierarchy,\r\n\t\t1\r\n\tfrom @AgencyAccess AS parents\r\n\tINNER JOIN Billing.AgencyDivision AS children\r\n\tON children.AgencyDivisionHierarchy.IsDescendantOf(parents.AgencyDivisionHierarchy) = 1\r\n\tWHERE \r\n\tchildren.Inactive = 'N'\r\n\tand\r\n\tparents.AgencyDivisionSeqid IN \r\n\t(\r\n\t\tSELECT AgencyDivisionSeqID FROM @AgencyAccess WHERE OriginSourceRecord = 0\r\n\t)\r\n\tAND children.AgencyDivisionSeqid NOT IN\r\n\t(\r\n\t\tSELECT AgencyDivisionSeqid FROM @AgencyAccess\r\n\t)\r\n\t\r\n\r\n\t\r\n\t/*\r\n\t\tReturn data\r\n\t*/\r\n    SELECT \r\n\t\tagencyL1.AgencyDivisionSeqID AS '@AgencyDivisionSeqID', \r\n\t\tagencyL1.AgencyCodeOEC AS '@AgencyCodeOEC', \r\n\t\tagencyL1.AgencyCodeOEC + '-' + agencyL1.AgencyName AS '@AgencyName',\r\n\t\t(\r\n\t\t\tSELECT \r\n\t\t\tagencyL2.AgencyDivisionSeqID AS '@AgencyDivisionSeqID', \r\n\t\t\tagencyL2.AgencyCodeOEC AS '@AgencyCodeOEC', \r\n\t\t\tagencyL2.AgencyCodeOEC + '-' + agencyL2.AgencyName AS '@AgencyName',\r\n\t\t\t(\r\n\t\t\t\tSELECT \r\n\t\t\t\tagencyL3.AgencyDivisionSeqID AS '@AgencyDivisionSeqID', \r\n\t\t\t\tagencyL3.AgencyCodeOEC AS '@AgencyCodeOEC', \r\n\t\t\t\tagencyL3.AgencyCodeOEC + '-' + agencyL3.AgencyName AS '@AgencyName'\r\n\t\t\t\tfrom @AgencyAccess AS agencyL3\r\n\t\t\t\tWHERE agencyL3.AgencyDivisionHierarchy.GetLevel() = 3\r\n\t\t\t\tAND agencyL3.ParentAgencyDivisionSeqID = agencyL2.AgencyDivisionSeqID\r\n\t\t\t\tORDER BY agencyL3.AgencyCodeOEC\t\t\r\n\t\t\t\tFOR XML PATH('Agency'), type\r\n\t\t\t)\t\t\t\r\n\t\t\tfrom @AgencyAccess AS agencyL2\r\n\t\t\tWHERE agencyL2.AgencyDivisionHierarchy.GetLevel() = 2\r\n\t\t\tAND agencyL2.ParentAgencyDivisionSeqID = agencyL1.AgencyDivisionSeqID\r\n\t\t\tORDER BY agencyL2.AgencyCodeOEC\t\t\t\r\n\t\t\tFOR XML PATH('Agency'), TYPE\r\n\t\t)\r\n\tfrom @AgencyAccess AS agencyL1\r\n\tWHERE agencyL1.AgencyDivisionHierarchy.GetLevel() = 1\r\n\tORDER BY agencyL1.AgencyCodeOEC\r\n\tFOR XML PATH('Agency'), ROOT('Agencies')\r\n\t\r\nEND"
        }
      ]
    }
  ]
}