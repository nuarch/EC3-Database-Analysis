{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Billing",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_TurnONAccountandRelatedMeters",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_TurnONAccountandRelatedMeters",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to activate a specified account and its associated meters within a billing system. It performs several validation checks to ensure the account and meters can be activated, updates the status of the account and meters, and logs the changes. The procedure also handles errors and transactions to maintain data integrity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is medium due to its multiple validation checks, use of transactions, error handling, and dynamic processing of a comma-separated list of meter IDs. It involves several database operations, including updates and validations across multiple tables."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AccountSeqID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The unique identifier for the account to be activated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@MeterSeqIDs AS VARCHAR(100)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A comma-separated string of meter sequence IDs associated with the account."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the user performing the operation, used for auditing purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Notes AS notes",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional notes to be recorded with the account and meter updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter indicating the success (1) or failure (0) of the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Message AS VARCHAR(1000) OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter providing a message about the operation's result or any errors encountered."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting "
                },
                {
                  "type": "text",
                  "text": "NOCOUNT ON",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to prevent extra result sets from interfering with the output. It declares a table variable "
                },
                {
                  "type": "text",
                  "text": "@MeterIds",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to store individual meter IDs extracted from the comma-separated list."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Retrieve Current Billing Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It fetches the current billing period from the "
                },
                {
                  "type": "text",
                  "text": "ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table where "
                },
                {
                  "type": "text",
                  "text": "CurrentProcessingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is 'Y'."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Default Notes",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If no notes are provided, it defaults to \"Account is activated back by DEM.\""
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parse Meter IDs",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure parses the "
                },
                {
                  "type": "text",
                  "text": "@MeterSeqIDs",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " string into individual meter IDs and inserts them into the "
                },
                {
                  "type": "text",
                  "text": "@MeterIds",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table variable."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation Checks",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Checks if the account is already active. If so, it sets the status code and message and exits."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Ensures no meters in the list are active under a different account."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Confirms that all meters requested for activation are currently inactive."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction and Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Begins a transaction to ensure atomicity."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the account status to active ('AC') and logs the change."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Uses a cursor to iterate over each meter ID, updating their status to active and logging the changes."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the "
                        },
                        {
                          "type": "text",
                          "text": "AccountExchangeMeterTrack",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to reflect the activation."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Implements a "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block to handle errors. If an error occurs, it logs the error details, rolls back the transaction, and sets the status code and message accordingly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Completion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If successful, commits the transaction and sets the status code to 1."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor to iterate over meter IDs can be inefficient for large datasets. Consider using set-based operations if possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "String Parsing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Parsing the comma-separated meter IDs using XML can be resource-intensive. Ensure the input size is manageable."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The transaction scope is appropriate for maintaining data integrity but could lock resources if the operation takes a long time."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues if multiple users attempt to activate the same account or meters simultaneously."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Input Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes valid input for "
                },
                {
                  "type": "text",
                  "text": "@MeterSeqIDs",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". Invalid or malformed input could cause errors."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While errors are logged, the procedure raises an error with "
                },
                {
                  "type": "text",
                  "text": "RAISERROR",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " which could terminate the session if not handled properly by the calling application."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor and XML parsing may not scale well with a large number of meters, potentially impacting performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Billing].[usp_TurnONAccountandRelatedMeters]\n(\r\n\t@AccountSeqID AS INT,\r\n\t@MeterSeqIDs AS VARCHAR(100),\r\n\t@AuthenticatedUserID AS INT,\r\n\t@Notes AS notes,\r\n\t@StatusCode AS INT OUTPUT,\r\n\t@Message AS VARCHAR(1000) OUTPUT\r\n)\r\nAS \r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @StatusCodePeriod AS VARCHAR(6);\r\n\tDECLARE @MeterIds TABLE(id INT);\r\n\r\n\tSELECT @StatusCodePeriod = BillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\r\n\tIF @Notes IS NULL\r\n\tBEGIN\r\n\t\tSET @Notes = 'Account is activated back by DEM.';\r\n\tEND;\r\n\r\n\t-- generate table of IDs from the comma seperated list of meters\r\n\tINSERT INTO @MeterIds(id)\r\n\tSELECT Split.a.value('.', 'VARCHAR(200)') AS String\r\n\tFROM (SELECT CAST ('<M>' + REPLACE(@MeterSeqIDs, ',', '</M><M>') + '</M>' AS XML) AS String) AS A\r\n\t\tCROSS APPLY String.nodes('/M') AS Split( a );\r\n\r\n\t-- validations\r\n\t--\tUpdate Account turn On\r\n\tIF EXISTS (SELECT AccountSeqid FROM Billing.Account WHERE AccountStatus = 'AC' AND AccountSeqid = @accountseqid )\r\n\tBEGIN\r\n\t\tSELECT @Message = 'This Account is already Active', @StatusCode = 0;\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n\t-- if you get any meters that are still active on this account. stop and alert\r\n\t-- check if the meter is under some other active account or not - comment added by ZD\r\n\tIF EXISTS(SELECT M.MeterSeqid\r\n\t\tFROM Billing.Account AS A \r\n\t\t\tINNER JOIN Billing.AccountExchangeMeterTrack AS AEMT ON AEMT.OriginalAccountSeqid = A.AccountSeqid\r\n\t\t\tINNER JOIN  Billing.Meter AS M ON M.MeterSeqid = AEMT.OriginalMeterSeqid\r\n\t\tWHERE A.AccountSeqid <> @AccountSeqID AND a.Isactive=1 AND  M.MeterSeqid IN (SELECT * FROM @MeterIds))\r\n\tBEGIN\r\n\t\tSELECT @Message = 'The list of meters includes a meter that does not belong to this account. Please verify.', @StatusCode = 0;\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n\r\n\t-- validate that all meters requested for turn off belong to the account\r\n\tIF EXISTS(SELECT M.MeterSeqid\r\n\t\tFROM Billing.Account AS A \r\n\t\t\tINNER JOIN Billing.AccountExchangeMeterTrack AS AEMT ON AEMT.OriginalAccountSeqid = A.AccountSeqid\r\n\t\t\tINNER JOIN  Billing.Meter AS M ON M.MeterSeqid = AEMT.OriginalMeterSeqid\r\n\t\tWHERE A.AccountSeqid = @AccountSeqID AND M.MeterStatus IN ('AC'))\r\n\tBEGIN\r\n\t\tSELECT @Message = 'There are active meters although the account is turned off', @StatusCode = 0;\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n\tBEGIN TRY\r\n\t\t-- this accounts for the fact that this might be called from Entity Framework and be in a nested stored proc\r\n\t\tBEGIN TRANSACTION ;\r\n\r\n\t\t-- update the account record\r\n\t\tUPDATE Billing.Account\r\n\t\tSET AccountPreviousStatus = AccountStatus\r\n\t\t\t,AccountStatus = 'AC'\r\n\t\t\t,AccountStatusCodePeriod = @StatusCodePeriod\r\n\t\t\t,AccountEffectiveTurnOff = '99991231'\r\n\t\t\t,TurnOffDate= '999912'\r\n\t\t\t,LastUpdate= GETDATE()\r\n\t\t\t,Notes = @notes\r\n\t\t\t,FireAuditTrigger= 'Y'\r\n\t\t\t,AuthenticatedUserID = @AuthenticatedUserID\r\n\t\tWHERE AccountSeqid = @AccountSeqID;\r\n\r\n\t\t-- the meter block\r\n\t\tDECLARE meterturnon_cursor CURSOR LOCAL FOR SELECT MeterSeqid FROM Billing.Meter WHERE MeterSeqid IN (SELECT * FROM @MeterIds)\r\n\t\tDECLARE @MeterSeqid AS INT;\r\n\t\tOPEN meterturnon_cursor\r\n\t\tFETCH NEXT FROM meterturnon_cursor INTO @MeterSeqid\r\n\t\tWHILE @@FETCH_STATUS = 0\r\n\t\tBEGIN \r\n\t\t\t-- Meter Turn On\r\n\t\t\tUPDATE Billing.Meter\r\n\t\t\t\tSET MeterPreviousStatus = MeterStatus\r\n\t\t\t\t,MeterStatus = 'AC'\r\n\t\t\t\t,MeterStatusCodePeriod = @StatusCodePeriod\r\n\t\t\t\t,MeterEffectiveOffDate = '99991231'\r\n\t\t\t\t,TurnOffDate = '999912'\r\n\t\t\t\t,LastUpdate = GETDATE()\r\n\t\t\t\t,Notes = @Notes\r\n\t\t\t\t,FireAuditTrigger = 'Y'\r\n\t\t\t\t,AuthenticatedUserID = @AuthenticatedUserID\r\n\t\t\tWHERE MeterSeqid = @MeterSeqid;\r\n\r\n\t\t\t-- AccountExchangeMeterTrack update\r\n\t\t\tUPDATE Billing.AccountExchangeMeterTrack\r\n\t\t\tSET MeterEffectiveBillingEndDate = '99991231',\r\n\t\t\t\tAccountEffectiveBillingEndDate = '99991231',\r\n\t\t\t\tFireAuditTrigger = 'Y',\r\n\t\t\t\tLastUpdate = GETDATE(),\r\n\t\t\t\tNotes = @Notes,\r\n\t\t\t\tAuthenticatedUserID = @AuthenticatedUserID\r\n\t\t\tWHERE OriginalMeterSeqid = @MeterSeqid AND OriginalAccountSeqid = @AccountSeqID;\r\n\r\n\t\t\tFETCH NEXT FROM meterturnon_cursor INTO @MeterSeqid;\r\n\t\tEND;\r\n\t\tCLOSE meterturnon_cursor    \r\n\t\tDEALLOCATE meterturnon_cursor\r\n\t\r\n\t\tCOMMIT TRANSACTION   \r\n\t\tSELECT @Message = '', @StatusCode = 1;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tDECLARE @ErrorMessage AS NVARCHAR(4000), @ErrorSeverity AS INT, @ErrorState AS INT, @ErrorNumber AS INT, @ErrorLine AS INT, @ErrorProcedure AS NVARCHAR(126);\r\n\r\n\t\tSELECT @ErrorMessage ='Please contact IT with a screenshot of this error message! ' + ERROR_MESSAGE(),\r\n\t\t\t@ErrorSeverity = ERROR_SEVERITY(),\r\n\t\t\t@ErrorState = ERROR_STATE(),\r\n\t\t\t@ErrorNumber = ERROR_NUMBER(),\r\n\t\t\t@ErrorProcedure = ERROR_PROCEDURE(),\r\n\t\t\t@ErrorLine = ERROR_LINE();\r\n\r\n\t\tRAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine) WITH LOG;\r\n\t\tSELECT @Message = @ErrorMessage, @StatusCode = 0;\r\n   \r\n\t\tIF (@@TRANCOUNT > 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRANSACTION;\r\n\t\tEND;\r\n   \r\n\tEND CATCH;\r\nEND;"
        }
      ]
    }
  ]
}