{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_18_Helper_ProcessCommonElectronicGasUnknownExchangeCode",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_18_Helper_ProcessCommonElectronicGasUnknownExchangeCode",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process electronic gas exchange data, specifically handling cases where the exchange code is unknown. It performs several operations, including checking for existing accounts, creating new accounts and meters if necessary, and updating or inserting records into various tables related to billing and account management. The procedure is part of a larger system that manages utility billing and account tracking, particularly for gas services."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to several factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional logic branches and nested transactions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It interacts with several tables, performing both read and write operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes error handling with transaction management, which adds to the complexity."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure uses dynamic data manipulation and conditional updates, which require careful handling to ensure data integrity."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the ID of the user executing the procedure, used for auditing and tracking changes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@ExchangeSeqid INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The sequence ID of the exchange data being processed, used to identify the specific record in the "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadCommonElectronicGasExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that returns the status code after processing, indicating the result of the operation."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring and initializing several local variables with default values, such as unknown agency and facility IDs, default turn-off dates, and status codes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves the current billing period and other relevant data from the "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadCommonElectronicGasExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table using the provided "
                },
                {
                  "type": "text",
                  "text": "@ExchangeSeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses a transaction ("
                },
                {
                  "type": "text",
                  "text": "BEGIN TRANSACTION",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") to ensure atomicity of the operations. It sets "
                },
                {
                  "type": "text",
                  "text": "XACT_ABORT ON",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to automatically roll back the transaction if an error occurs."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Account Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Non-Existent Account",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": If the account does not exist, a new account is created using the exchange data. Default values are used for unknown fields."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Existing Account",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": If the account exists, it checks the account status. If the status indicates a legacy account or a specific code ('LG' or '27'), a new account entry is created."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Meter Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If the meter does not exist for the account, a new meter is created with default values for unknown fields."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure then inserts a record into the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountExchangeMeterTrack",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to track the association between the account and the meter."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure includes a "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block to handle errors. If an error occurs, the transaction is rolled back, and an error message is raised."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Index Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved have appropriate indexes to optimize the "
                },
                {
                  "type": "text",
                  "text": "SELECT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "INSERT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "UPDATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " operations, especially given the joins and conditional checks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The transaction scope is broad, covering multiple operations. This can lead to locking and blocking issues, affecting performance. Consider breaking down the transaction into smaller, more manageable parts if possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues due to the potential for multiple users to execute it simultaneously. Proper isolation levels and locking mechanisms should be in place."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies heavily on default values for unknown data, which could lead to incorrect or incomplete data being stored if not carefully managed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure includes error handling, the complexity of the operations increases the risk of unhandled exceptions or subtle bugs."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the system grows, the procedure's complexity and the volume of data it processes may lead to performance bottlenecks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The high complexity and extensive use of hard-coded values make the procedure difficult to maintain and adapt to changes in business logic or data structures."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Change Log\r\n--* xx/xx/xxxx\txx  First Version \r\n--* 11/29/2016\tzd\tturn off date 9999 99 99 to 99991231\r\n--* 04/09/2019  VY  Modified for EnergySubTypeID\r\n\r\n/*\r\n\tPAH\t\t2013-12-20\r\n\tHard coded these values that failed the validation rule.  They are not important to the meter information.\r\n\t\t'Y',  --Meter.IsOECDefinedMeter,\r\n\t\t'Y', --Meter.IsUploadProcessed,\r\n\t\t'Y', --Meter.IsMeterUsageTracked,\r\n*/\r\n--***************************************************************************************  \r\nCREATE PROCEDURE [ConEd].[usp_Upload_18_Helper_ProcessCommonElectronicGasUnknownExchangeCode]\r\n(\r\n    @AuthenticatedUserID INT\r\n\t,@ExchangeSeqid INT\r\n\t,@StatusCode INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n    DECLARE @CheckForProcessing INT, @UnknownAgencySeqid INT, @UnknownFacilitySeqid INT\r\n\t\t,@EnergyDeliveryTypeSeqid INT, @TransactionalTimeStamp DATETIME, @AccountSeqid INT\r\n\t\t,@AccountPreviousStatus VARCHAR(2), @AccountStatusCodePeriod VARCHAR(8), @MeterSeqid INT\r\n\t\t,@AccountExchangeMeterTrack INT, @TurnOffPeriod VARCHAR(6), @TurnOffDate VARCHAR(8)\r\n\t\t,@PreviousStatus VARCHAR(2), @Yes VARCHAR(1), @No VARCHAR(1), @UtilityCompanyId INT           \r\n\t\t,@AccountBillingGroup INT, @BillingPeriod VARCHAR(6), @CurrentAccountNumber VARCHAR(15)\r\n\t\t,@CurrentMeterNumber VARCHAR(7), @ExchangeCode VARCHAR(2), @AccountStatus VARCHAR(2)\r\n\t\t,@AccountEffectiveTurnOn VARCHAR(8), @AccountEffectiveTurnOff VARCHAR(8), @KWHAccountDescription VARCHAR(3)\r\n\t\t,@SalesType VARCHAR(2), @DeliveryServiceClass VARCHAR(3), @DeliveryServiceClassEffectiveDate VARCHAR(8)\r\n\t\t,@ProductionServiceClass VARCHAR(4), @ProductionServiceClassEffectiveDate VARCHAR(8), @BillingCycle VARCHAR(1)\r\n\t\t,@ExcessDistributionAccount VARCHAR(15), @TODAccount VARCHAR(1), @TripNumber VARCHAR(2)\r\n\t\t,@AccountName VARCHAR(60), @AccountAddress VARCHAR(40), @MeterStatus VARCHAR(2), @MeterEffectiveTurnOnDate VARCHAR(8)\r\n\t\t,@MeterEffectiveTurnOffDate VARCHAR(8), @MeterType VARCHAR(1), @MeterNumberofDials VARCHAR(1)           \r\n\t\t,@MeterConstant VARCHAR(5), @MeterTension VARCHAR(1), @ManualDataEntry VARCHAR(1), @EnergyDeliveryCount INT\r\n\t\t,@EnergyDeliveryType INT, @EnergyDeliveryType1 INT, @AddressSeqid INT, @EnergySource INT, @Last3OfAccountNumber VARCHAR(3)\r\n\t\t,@First12OfAccountNumber VARCHAR(12), @SplitableAccountNumber VARCHAR(1), @AccountNumber VARCHAR(15), @AccountNumber1 VARCHAR(15)\r\n\t\t,@Counter INT, @XchangeCode VARCHAR(2), @CurrentBillingPeriod VARCHAR(6), @UtilityCompanySeqid INT\r\n\t\t,@ConEdisonElectronicGas INT, @NationalGridWestElectronicGas INT;\r\n\r\n    SELECT @UnknownAgencySeqid = 396, @UnknownFacilitySeqid = 4623, @EnergyDeliveryTypeSeqid = 1\r\n\t\t,@TurnOffPeriod = '999912', @TurnOffDate = '99991231', @PreviousStatus = 'NU', @Yes = 'Y', @No = 'N'\r\n\t\t,@ConEdisonElectronicGas = 9, @NationalGridWestElectronicGas = 2, @StatusCode = 9;\r\n        \r\n\tSELECT TOP 1\r\n        @CurrentBillingPeriod = BillingPeriod\r\n    FROM Gas.UploadCommonElectronicGasExchangeData\r\n\r\n\t-- Read the exchange file and process the singleton exchange\r\n\t-- Load the variables with the data from the singleton  \r\n    SELECT @UtilityCompanyId = UtilityCompanyId,\r\n\t\t@AccountBillingGroup = AccountBillingGroup,\r\n\t\t@BillingPeriod = BillingPeriod,\r\n\t\t@CurrentAccountNumber = CurrentAccountNumber,\r\n\t\t@CurrentMeterNumber = CurrentMeterNumber,\r\n\t\t@ExchangeCode = CASE WHEN ExchangeCode = 'UN' THEN 'UA' ELSE ExchangeCode END, --Fix to make sure that Un known accounts always have a 'UA' ststus\r\n        @AccountStatus = AccountStatus,\r\n        @AccountEffectiveTurnOn = AccountEffectiveTurnOn,\r\n        @AccountEffectiveTurnOff = AccountEffectiveTurnOff,\r\n        @KWHAccountDescription = KWHAccountDescription,\r\n        @SalesType = SalesType,\r\n        @DeliveryServiceClass = DeliveryServiceClass,\r\n        @DeliveryServiceClassEffectiveDate = DeliveryServiceClassEffectiveDate,\r\n        @ProductionServiceClass = ProductionServiceClass,\r\n        @ProductionServiceClassEffectiveDate = ProductionServiceClassEffectiveDate,\r\n        @BillingCycle = BillingCycle,\r\n        @ExcessDistributionAccount = ExcessDistributionAccount,\r\n        @TODAccount = TODAccount,\r\n        @TripNumber = TripNumber,\r\n        @AccountName = AccountName,\r\n        @AccountAddress = AccountAddress,\r\n        @MeterStatus = MeterStatus,\r\n        @MeterEffectiveTurnOnDate = MeterEffectiveTurnOnDate,\r\n        @MeterEffectiveTurnOffDate = MeterEffectiveTurnOffDate,\r\n        @MeterType = MeterType,\r\n        @MeterNumberofDials = MeterNumberofDials,\r\n        @MeterConstant = MeterConstant,\r\n        @MeterTension = MeterTension,\r\n        @ManualDataEntry = ManualDataEntry,\r\n        @EnergyDeliveryCount = EnergyDeliveryCount,\r\n        @EnergyDeliveryType = EnergyDeliveryType,\r\n        @EnergyDeliveryType1 = EnergyDeliveryType1\r\n    FROM Gas.UploadCommonElectronicGasExchangeData\r\n    WHERE UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\tDECLARE @T VARCHAR(10) = 'tranProcessExchangeRecord'\r\n\tSET XACT_ABORT ON\r\n\t\t\r\n\tBEGIN TRY\r\n\t\tBEGIN TRANSACTION @T\r\n\r\n\t\t-- check if account number exists\r\n        IF (NOT EXISTS (SELECT DISTINCT * FROM Gas.UploadCommonElectronicGasExchangeData G\r\n            INNER JOIN Billing.Account A ON G.CurrentAccountNumber = A.OriginalAccountNumber\r\n            WHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid)) \r\n        BEGIN\r\n\t\t\t-- Account is non-existent\r\n\t\t\t--\r\n\t\t\t--Create new account based upon the exchange data, create default values to be modified at a later date if necessary and use the account variables default values for columns that \r\n\t\t\t-- are initially unknown.\r\n            INSERT  INTO Billing.Account\r\n\t\t\t\t(ExcessDistributionAssocEnergyAccount,\r\n                IsExcessDistribution,\r\n                CommodityAssocDeliveryAccount,\r\n                IsCommodityAccount,\r\n                UtilityAccountProvider,\r\n                AgencyAccount,\r\n                FacilityAccount,\r\n                ManualDataEntry,\r\n                CurrentAccountNumber,\r\n                OriginalAccountNumber,\r\n                AccountStatus,\r\n                AccountPreviousStatus,\r\n                AccountStatusCodePeriod,\r\n                CurrentInvoiceAccountGroup,\r\n                AccountEffectiveTurnOn,\r\n                AccountEffectiveTurnOff,\r\n                EnergySource,\r\n                EnergyAccountDescription,\r\n\t\t\t\tEnergyDeliverySubTypeId,\r\n                SalesType,\r\n                DeliveryTariffRate,\r\n                DeliveryTariffEffectiveDate, \r\n                CommodityTariffRate, \r\n                CommodityTariffEffectiveDate,\r\n                BillingCycle,\r\n                Delivery,\r\n                AccountInMultipleBuildings,\r\n                SourceOfRevenue,\r\n                TurnOnDate,\r\n                TurnOffDate,\r\n                IsTimeOfDayAccount, \r\n                Territory,\r\n                Tension,\r\n                TripNumber, \r\n                UtilityServiceAccountName,\r\n                UtilityServiceAddress,\r\n                Borough,\r\n                Block,\r\n                LotNumber,\r\n                CityPlanningBIN,\r\n                ELOAgencyAddress,\r\n                LastPeriodOriginalBilled,\r\n                LastPeriodAdjustmentBilled,\r\n                LastZeroDollarsBillingPeriod,\r\n                AdjustmentRecordSeqid,\r\n                Notes,\r\n                AuthenticatedUserID,\r\n                DateAdded,\r\n                LastUpdate)\r\n            SELECT DISTINCT\r\n                A.ExcessDistributionAssocEnergyAccount,\r\n                @No,\r\n                A.CommodityAssocDeliveryAccount,\r\n                @No,\r\n                G.UtilityCompanyId,\r\n                @UnknownAgencySeqid,\r\n                @UnknownFacilitySeqid,\r\n                @ManualDataEntry,\r\n                G.CurrentAccountNumber,\r\n                G.CurrentAccountNumber,\r\n                @ExchangeCode,\r\n                @PreviousStatus,\r\n                @CurrentBillingPeriod,\r\n                G.AccountBillingGroup,\r\n                G.AccountEffectiveTurnOn,\r\n                @TurnOffDate,\r\n                5, -- Default Value for Gas Energy Source, \r\n                1,--G.KWHAccountDescription, \r\n\t\t\t\t7, -- SubType is Natural Gas for value 7 - added on 4/9/2019 \r\n                G.SalesType,\r\n                G.DeliveryServiceClass,\r\n                G.DeliveryServiceClassEffectiveDate, \r\n                G.ProductionServiceClass,\r\n                G.ProductionServiceClassEffectiveDate,\r\n                G.BillingCycle,\r\n                @Yes,\r\n                @No,\r\n                @No,\r\n                @CurrentBillingPeriod,\r\n                @TurnOffPeriod,\r\n                G.TODAccount, \r\n                A.Territory,\r\n                G.MeterTension,\r\n                G.TripNumber,\r\n                G.AccountName,\r\n                G.AccountAddress,\r\n                G.Borough,\r\n                A.Block,\r\n                A.LotNumber,\r\n                A.CityPlanningBIN,\r\n                A.ELOAgencyAddress,\r\n                A.LastPeriodOriginalBilled,\r\n                A.LastPeriodAdjustmentBilled,\r\n                A.LastZeroDollarsBillingPeriod,\r\n                A.AdjustmentRecordSeqid,\r\n                A.Notes,\r\n                @AuthenticatedUserID,\r\n                GETDATE(),\r\n                GETDATE()\r\n            FROM Gas.UploadCommonElectronicGasExchangeData G\r\n                LEFT JOIN Billing.Account A ON G.CurrentAccountNumber = A.OriginalAccountNumber AND G.CurrentAccountNumber = A.CurrentAccountNumber\r\n            WHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid\r\n\t\t\t\t\t\t\t\r\n\t\t\t-- Get the Account sequence id after it is inserted\r\n            SELECT  @AccountSeqid = IDENT_CURRENT('Billing.Account')\r\n\t\t\t\t\t\t\t\r\n            INSERT INTO Billing.Address\r\n                (AccountSeqid,\r\n                Address1,\r\n                OECLegacyAddress,\r\n                Borough,\r\n                City,\r\n                UtilityCompanySeqid,\r\n                State,\r\n                OriginalAccountNumber,\r\n                HouseNumber,\r\n                StreetName,\r\n                AuthenticatedUserID,\r\n                DateAdded,\r\n                LastUpdate)\r\n            SELECT  @AccountSeqid,\r\n                G.AccountAddress,\r\n                G.AccountAddress,\r\n                G.Borough,\r\n                CASE G.Borough\r\n                    WHEN '1' THEN 'Manahttan'\r\n                    WHEN '2' THEN 'Bronx'\r\n                    WHEN '3' THEN 'Brooklyn'\r\n                    WHEN '4' THEN 'Queens'\r\n                    WHEN '5' THEN 'Staten Island'\r\n                    ELSE 'Up State  '\r\n                END City,\r\n                G.UtilityCompanyId,\r\n                'NY',\r\n                G.CurrentAccountNumber,\r\n                CASE WHEN '0' <= SUBSTRING(G.AccountAddress, 1, 1) AND SUBSTRING(G.AccountAddress, 1, 1) <= '9'\r\n                    THEN [dbo].[GetHouseNumberFromAddress](dbo.CutStreetFromAddress(G.AccountAddress))\r\n                    ELSE '  ' END HouseNumber,\r\n                CASE WHEN '0' <= SUBSTRING(G.AccountAddress, 1, 1) AND SUBSTRING(G.AccountAddress, 1, 1) <= '9'\r\n                    THEN [dbo].[GetStreetFromAddress](dbo.CutStreetFromAddress(G.AccountAddress))\r\n                    ELSE '  ' END StreetName,\r\n                G.authenticatedUserID,\r\n                G.DateAdded,\r\n                G.LastUpdate\r\n\t\t\tFROM Gas.UploadCommonElectronicGasExchangeData G LEFT JOIN Billing.Account A \r\n\t\t\t\tON G.UtilityCompanyId = A.UtilityAccountProvider AND G.CurrentAccountNumber = A.OriginalAccountNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid\r\n\t\t\t\t\t\t\t\r\n\t\t\t-- Get the Account sequence id after it is inserted\r\n            SELECT  @AddressSeqid = IDENT_CURRENT('Billing.Address')\r\n\t\t\t\t\t\t\t--\r\n            UPDATE  Billing.Account\r\n            SET     ELOAgencyAddress = @AddressSeqid\r\n            WHERE   (AccountSeqid = @AccountSeqid)\r\n        END;\r\n        ELSE \r\n        BEGIN\r\n\t\t\t-- Account exists, now check status code for appropriate action \t\t\r\n            SELECT DISTINCT\r\n                @AccountSeqid = A.AccountSeqid,\r\n                @AccountStatus = A.AccountStatus,\r\n                @AccountPreviousStatus = A.AccountPreviousStatus,\r\n                @AccountStatusCodePeriod = A.AccountStatusCodePeriod\r\n            FROM Billing.Account A INNER JOIN Gas.UploadCommonElectronicGasExchangeData G\r\n\t\t\t\tON A.CurrentAccountNumber = G.CurrentAccountNumber AND A.OriginalAccountNumber = G.CurrentAccountNumber\r\n            WHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid AND A.UtilityAccountProvider = @UtilityCompanySeqid;\r\n        END;\r\n\t\t\t\r\n\t\t-- Check for Legacy Account and NYPA re-using the Account for another agency\r\n\t\t-- Check that the Account is turned off, NYPA is re-using it for another agency\r\n\t\t-- else\r\n\t\t-- The account exists and is active and the account insertion is skipped but in any case the \r\n\t\t-- internal sequence id is maintained in @AccountSeqid for the meter insertion\r\n        IF (@AccountStatus = 'LG' OR @AccountStatus = '27') \r\n        BEGIN\r\n\t\t\tINSERT INTO Billing.Account\r\n\t\t\t\t(ExcessDistributionAssocEnergyAccount,\r\n                IsExcessDistribution,\r\n                CommodityAssocDeliveryAccount,\r\n                IsCommodityAccount,\r\n                UtilityAccountProvider,\r\n                AgencyAccount,\r\n                FacilityAccount,\r\n                ManualDataEntry,\r\n                CurrentAccountNumber,\r\n                OriginalAccountNumber,\r\n                AccountStatus,\r\n                AccountPreviousStatus,\r\n                AccountStatusCodePeriod,\r\n                CurrentInvoiceAccountGroup,\r\n                AccountEffectiveTurnOn,\r\n                AccountEffectiveTurnOff,\r\n                EnergySource,\r\n                EnergyAccountDescription,\r\n\t\t\t\tEnergyDeliverySubTypeId,\r\n                SalesType,\r\n                DeliveryTariffRate,\r\n                DeliveryTariffEffectiveDate,\r\n                CommodityTariffRate,\r\n                CommodityTariffEffectiveDate,\r\n                BillingCycle,\r\n                Delivery,\r\n                AccountInMultipleBuildings,\r\n                SourceOfRevenue,\r\n                TurnOnDate,\r\n                TurnOffDate,\r\n                IsTimeOfDayAccount, \r\n                Territory,\r\n                TripNumber, \r\n                UtilityServiceAccountName,\r\n                UtilityServiceAddress,\r\n                Borough,\r\n                Block,\r\n                LotNumber,\r\n                CityPlanningBIN,\r\n                ELOAgencyAddress,\r\n                LastPeriodOriginalBilled,\r\n                LastPeriodAdjustmentBilled,\r\n                LastZeroDollarsBillingPeriod,\r\n                AdjustmentRecordSeqid,\r\n                Notes,\r\n                AuthenticatedUserID,\r\n                DateAdded,\r\n                LastUpdate)\r\n            SELECT DISTINCT\r\n                A.ExcessDistributionAssocEnergyAccount,\r\n                @No,\r\n                A.CommodityAssocDeliveryAccount,\r\n                @No,\r\n                G.UtilityCompanyId,\r\n                @UnknownAgencySeqid,\r\n                @UnknownFacilitySeqid,\r\n                @ManualDataEntry,\r\n                G.CurrentAccountNumber,\r\n                G.CurrentAccountNumber,\r\n                @ExchangeCode,\r\n                @PreviousStatus,\r\n                @CurrentBillingPeriod,\r\n                G.AccountBillingGroup,\r\n                G.AccountEffectiveTurnOn,\r\n                @TurnOffDate,\r\n                G.EnergyDeliveryType,\r\n                G.KWHAccountDescription,\r\n\t\t\t\t7,\r\n                G.SalesType,\r\n                G.DeliveryServiceClass,\r\n                G.DeliveryServiceClassEffectiveDate,\r\n                G.ProductionServiceClass,\r\n                G.ProductionServiceClassEffectiveDate,\r\n                G.BillingCycle,\r\n                @Yes,\r\n                @No,\r\n                @No,\r\n                @CurrentBillingPeriod,\r\n                @TurnOffPeriod,\r\n                G.TODAccount, \r\n                A.Territory,\r\n                G.TripNumber,\r\n                G.AccountName,\r\n                G.AccountAddress,\r\n                A.Borough,\r\n                A.Block,\r\n                A.LotNumber,\r\n                A.CityPlanningBIN,\r\n                A.ELOAgencyAddress,\r\n                A.LastPeriodOriginalBilled,\r\n                A.LastPeriodAdjustmentBilled,\r\n                A.LastZeroDollarsBillingPeriod,\r\n                A.AdjustmentRecordSeqid,\r\n                A.Notes,\r\n                @AuthenticatedUserID,\r\n                GETDATE(),\r\n                GETDATE()\r\n\t\t\tFROM Billing.Account A INNER JOIN Gas.UploadCommonElectronicGasExchangeData G\r\n\t\t\t\tON A.CurrentAccountNumber = G.CurrentAccountNumber AND A.OriginalAccountNumber = G.CurrentAccountNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid AND A.UtilityAccountProvider = @UtilityCompanySeqid;\r\n\r\n\t\t\t-- Get the Account sequence id after it is inserted \r\n            SELECT  @AccountSeqid = IDENT_CURRENT('Billing.Account')\r\n        END;\r\n\t\t\t\t--\r\n        IF (NOT EXISTS(SELECT DISTINCT *, E.UtilityCompanySeqid FROM Billing.AccountExchangeMeterTrack E\r\n            INNER JOIN Gas.UploadCommonElectronicGasExchangeData G ON E.OriginalAccountNumber = G.CurrentAccountNumber\r\n                AND E.OriginalMeterNumber =G.CurrentMeterNumber\r\n            WHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid)) \r\n        BEGIN\r\n\t\t\t----Create new meter based upon the exchange data, create default values to be modified at a later date if necessary and use the meter variables default values for columns that \r\n\t\t\t---- are initially unknown.  The account sequence id  (@AccountSeqid) is passed to the meter insertion to link the account to the meter without having to join the account table to the meter and \r\n\t\t\t---- and exchange table.\r\n            IF (NOT EXISTS(SELECT * FROM Billing.Meter M INNER JOIN Gas.UploadCommonElectronicGasExchangeData G\r\n\t\t\t\t\tON M.OriginalAccountNumber = G.CurrentAccountNumber AND M.CurrentMeterNumber = G.CurrentMeterNumber\r\n\t\t\t\t\t\tAND M.OriginalMeterNumber = G.CurrentMeterNumber\r\n\t\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid)) \r\n            BEGIN\r\n                INSERT INTO Billing.Meter\r\n                    (UtilityServiceAddress,\r\n                    OriginalAccountNumber,\r\n                    CurrentMeterNumber,\r\n                    OriginalMeterNumber,\r\n                    Tension,\r\n                    IsOECDefinedMeter,\r\n                    IsUploadProcessed,\r\n                    IsMeterUsageTracked,\r\n                    EnergySource,\r\n                    EnergyAccountDescription,\r\n                    MeterStatus,\r\n                    MeterPreviousStatus,\r\n                    MeterStatusCodePeriod, \r\n                    AgencyELOMeterLocation,\r\n                    UtilityAddressMeterLocation,\r\n                    MeterSquareFootageCoverage,\r\n                    TurnOnDate,\r\n                    TurnOffDate,\r\n                    MeterEffectiveOnDate,\r\n                    MeterEffectiveOffDate,\r\n                    MeterType,\r\n                    MeterDials,\r\n                    MeterConstant,\r\n                    LastPeriodOriginalBilled,\r\n                    LastPeriodAdjustmentBilled,\r\n                    LastZeroUsageBillingPeriod,\r\n                    AdjustmentRecordSeqid,\r\n                    Notes,\r\n                    AuthenticatedUserID,\r\n                    DateAdded,\r\n                    LastUpdate)\r\n\t\t\t\tSELECT G.AccountAddress,\r\n                    G.CurrentAccountNumber,\r\n                    G.CurrentMeterNumber,\r\n                    G.CurrentMeterNumber,\r\n                    G.MeterTension,\r\n                    'Y',  --Meter.IsOECDefinedMeter,\r\n                    'Y', --Meter.IsUploadProcessed,\r\n                    'Y', --Meter.IsMeterUsageTracked,\r\n                    M.EnergySource,\r\n                    M.EnergyAccountDescription,\r\n                    @ExchangeCode,\r\n                    @PreviousStatus,\r\n                    @CurrentBillingPeriod,\r\n                    M.AgencyELOMeterLocation,\r\n                    M.UtilityAddressMeterLocation,\r\n                    M.MeterSquareFootageCoverage,\r\n                    @CurrentBillingPeriod,\r\n                    @TurnOffPeriod,\r\n                    G.MeterEffectiveTurnOnDate,\r\n                    @TurnOffDate,\r\n                    G.MeterType,\r\n                    G.MeterNumberofDials,\r\n                    G.MeterConstant,\r\n                    M.LastPeriodOriginalBilled,\r\n                    M.LastPeriodAdjustmentBilled,\r\n                    M.LastZeroUsageBillingPeriod,\r\n                    M.AdjustmentRecordSeqid,\r\n                    M.Notes,\r\n                    @AuthenticatedUserID,\r\n                    GETDATE(),\r\n                    GETDATE()\r\n\t\t\t\tFROM Billing.AccountExchangeMeterTrack EM\r\n                    INNER JOIN Billing.Meter M ON EM.OriginalMeterSeqid = M.MeterSeqid\r\n                    RIGHT JOIN Gas.UploadCommonElectronicGasExchangeData G ON EM.OriginalAccountNumber = G.CurrentAccountNumber AND EM.OriginalMeterNumber = G.CurrentMeterNumber\r\n\t\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t--Get the Meter sequence id after it is inserted\r\n                SELECT  @MeterSeqid = IDENT_CURRENT('Billing.Meter')\r\n            END;\r\n\r\n\t\t\t--  Insert the new account or existing account and new meter combination\r\n            INSERT  INTO Billing.AccountExchangeMeterTrack\r\n\t\t\t\t(UtilityCompanySeqid,\r\n\t\t\t\tOriginalAgencyDivisionSeqid,\r\n\t\t\t\tOriginalFacilitySeqid,\r\n\t\t\t\tOriginalAccountSeqid,\r\n\t\t\t\tOriginalMeterSeqid,\r\n\t\t\t\tOriginalAccountNumber,\r\n\t\t\t\tOriginalMeterNumber,\r\n\t\t\t\tAuthenticatedUserID,\r\n\t\t\t\tDateAdded,\r\n\t\t\t\tLastUpdate)\r\n            SELECT A.UtilityAccountProvider,\r\n                A.AgencyAccount,\r\n                A.FacilityAccount,\r\n                A.AccountSeqid,\r\n                M.MeterSeqid,\r\n                M.OriginalAccountNumber,\r\n                M.OriginalMeterNumber,\r\n                @AuthenticatedUserID,\r\n                GETDATE(),\r\n                GETDATE()\r\n            FROM Billing.Meter M\r\n                INNER JOIN Gas.UploadCommonElectronicGasExchangeData G ON M.OriginalAccountNumber = G.CurrentAccountNumber AND M.OriginalMeterNumber = G.CurrentMeterNumber\r\n                INNER JOIN Billing.Account A ON M.OriginalAccountNumber = A.OriginalAccountNumber\r\n            WHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid;\r\n\t\t\t\t\t\t\t\r\n\t\t\t--AccountExchangeMeterTrack\r\n\t\t\t-- Get the AccountExchangeMeterTrack sequence id after it is inserted\r\n            SELECT  @AccountExchangeMeterTrack = IDENT_CURRENT('Billing.AccountExchangeMeterTrack')\r\n\t\tEND;\r\n\r\n\t\tCOMMIT TRANSACTION @T\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tDECLARE @ErrorMessage NVARCHAR(MAX), @ErrorSeverity INT, @ErrorState INT;\r\n\t\tSELECT @ErrorMessage = ERROR_MESSAGE() + ' Line ' + CAST(ERROR_LINE() AS NVARCHAR(5)), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE();\r\n\t\tROLLBACK TRANSACTION;\r\n\t\tRAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState);\r\n\tEND CATCH;\r\nEND;"
        }
      ]
    }
  ]
}