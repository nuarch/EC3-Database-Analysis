{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProRateCustomerLevelCunyWindCharges",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProRateCustomerLevelCunyWindCharges",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to allocate wind energy charges to specific customer accounts within the CUNY (City University of New York) system. It calculates the total wind charge amount for a billing period and distributes this charge across individual accounts based on their energy usage. The procedure also handles rounding discrepancies by adjusting the account with the highest energy usage."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status int output",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This is an output parameter used to indicate the execution status of the procedure. It returns "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for success and "
                },
                {
                  "type": "text",
                  "text": "1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization and Variable Declaration",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Several variables are declared to store intermediate results such as total KWH, billing period, and wind charge amounts."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Retrieve Billing Period and Total Wind Charge",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure selects the minimum billing period and sums the total wind charge amount from the "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPACoverSheet",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table where the record type is '20'. The number of rows affected is stored in "
                },
                {
                  "type": "text",
                  "text": "@IsCunyWindCharges",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Check for Wind Charges",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If there are wind charges ("
                },
                {
                  "type": "text",
                  "text": "@IsCunyWindCharges > 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "), the procedure proceeds with the allocation process."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Calculate Total KWH for CUNY Four-Year Schools",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It calculates the total KWH for the current period for CUNY four-year schools by joining several tables and filtering based on agency codes and billing periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Pro-rate Wind Charges",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure updates the "
                },
                {
                  "type": "text",
                  "text": "CustomerLevelAdjustmentAmount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " in the "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAAccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table by distributing the total wind charge amount proportionally based on each account's energy usage. It also appends a description of the charge to the "
                },
                {
                  "type": "text",
                  "text": "Notes",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " field."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Handle Rounding Discrepancies",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It calculates any rounding discrepancies that arise from the pro-rata distribution and adjusts the account with the highest energy usage to account for this discrepancy."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Adjustment and Output",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure updates the account with the highest energy usage to include the rounding discrepancy and outputs the total adjusted amount and the original total wind charge amount."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Filtering",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple joins and filtering conditions, which could impact performance, especially if the tables involved are large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Rounding Calculations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of rounding functions and calculations could add computational overhead."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensuring that the columns used in joins and where clauses are indexed could improve performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If multiple instances of this procedure run simultaneously, there could be issues with data consistency, especially with updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in the tables is accurate and consistent. Any discrepancies in the data could lead to incorrect charge allocations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling mechanisms, which could lead to unhandled exceptions and failures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the number of accounts or the volume of data grows, the performance of this procedure could degrade without optimization or hardware improvements."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE    PROCEDURE [Nypa].[usp_ProRateCustomerLevelCunyWindCharges] (@Status int output)\nAS --**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Process to ProRateCustomerLevelCunyWindCharges to a specific accounts.\r\n--*                         \r\n--* Exec:        [Nypa].[usp_ProRateCustomerLevelCunyWindCharges]\r\n--*\r\n--* Parameter(s):         \r\n--*                            StatusCode  int output       -  Execution Return Status \r\n--*\r\n--*\r\n--* Database:     OEC\r\n--*\r\n--* Return:\t    0 Success\r\n--*                 1 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   06/24/2009\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 06/24/2009 PAH  First Version\r\n--* 12/3/2018 VY\tModified for UniqueAccountSeqID  \r\n--***************************************************************************************\r\nBegin \r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\ndeclare @TotalCunyFourYearSchoolsCurrentPeriodKWH bigint\r\ndeclare @BillingPeriod varchar(6)\t\r\ndeclare @IsCunyWindCharges int\r\ndeclare @CoverSheetRecordDesc varchar(250)\r\ndeclare @NumberOfAdjustments int\r\ndeclare @TotalCunyWindChargeAmount money\r\ndeclare @TotalCunyWindChargeAmountRounding money\r\ndeclare @TopEnergyUserSeqid int\r\n\r\n--\t\t\r\nSELECT \r\n\t\t@BillingPeriod = min(BillingPeriod), \r\n\t\t@TotalCunyWindChargeAmount = SUM(TotalDollars)\r\nFROM \r\n\t\tNypa.UploadNYPACoverSheet\r\nWHERE \r\n\t\tCoverSheetRecordType ='20'\r\n--\r\n--\tDetermine if there were any CUNY wind Charges\r\n--\r\nset @IsCunyWindCharges =  @@rowcount\r\n--\r\nif (@IsCunyWindCharges > 0 )\r\n\tbegin\r\n\t\t--\t\t\r\n\t\tselect @CoverSheetRecordDesc = '  Total CUNY Wind Charge Amount $'+CONVERT(varchar, CONVERT(money, @TotalCunyWindChargeAmount), 1)\r\n\t\t--\r\n\t\t--\tGet Current period KWH only as the basis for pro-rating the adjustment for the\r\n\t\t--\tindividual accounts using CUNY Four School Accounts only level KWH / TotalCurrentPeriodKWH. The largest account\r\n\t\t--\twill get the \r\n\t\t--\r\n\t\tSELECT   \r\n\t\t\t\t\t@BillingPeriod=Nypa.UploadNYPAAccountBilling.BillingPeriod,\r\n\t\t\t\t\t@TotalCunyFourYearSchoolsCurrentPeriodKWH = sum(Nypa.UploadNYPAAccountBilling.AccountEnergyUsage)\r\n\t\tFROM \r\n\t\t\t\t\tBilling.Account INNER JOIN\r\n\t\t\t\t\tBilling.AgencyDivision ON Billing.Account.AgencyAccount = Billing.AgencyDivision.AgencyDivisionSeqid INNER JOIN\r\n\t\t\t\t\tNypa.UploadNYPAAccountBilling ON /* Billing.Account.AccountSeqid = Nypa.UploadNYPAAccountBilling.AccountSeqid\r\n\t\t\t\t\tAND Comment out on 12/13/2018 */ Billing.Account.UniqueAccountSeqid = NYPA.UploadNYPAAccountBilling.UniqueAccountSeqID and Billing.Account.IsCurrentRecord = 'Y' /* added 12/3/2018 */\r\n\t\tWHERE \r\n\t\t\t\t\t('042000' < Billing.AgencyDivision.AgencyCodeOEC) AND (Billing.AgencyDivision.AgencyCodeOEC < '042060') AND \r\n\t\t\t\t\t(Nypa.UploadNYPAAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod) OR\r\n\t\t\t\t\t(Billing.AgencyDivision.AgencyCodeOEC = '042101') AND \r\n\t\t\t\t\t(Nypa.UploadNYPAAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod)\r\n\t\tgroup by  \r\n\t\t\t\t\tNypa.UploadNYPAAccountBilling.BillingPeriod\r\n\t\t--\r\n\t\t--\tCalculate the current period CUNY Four School Accounts only for level KWH Level Adjustment Amount rounded to the nearest penny\r\n\t\t--\tand add it to the DCAS pro rated customer level charges\r\n\t\t--\r\n\t\tUPDATE  Nypa.UploadNYPAAccountBilling\r\n\t\tSET             \r\n\t\t\t\tCustomerLevelAdjustmentAmount = CustomerLevelAdjustmentAmount + ROUND(@TotalCunyWindChargeAmount * Nypa.UploadNYPAAccountBilling.AccountEnergyUsage / @TotalCunyFourYearSchoolsCurrentPeriodKWH,2), \r\n\t\t\t\tNotes = Nypa.UploadNYPAAccountBilling.Notes+@CoverSheetRecordDesc\r\n\t\tFROM     \r\n\t\t\t\tBilling.Account INNER JOIN\r\n\t\t\t\tBilling.AgencyDivision ON Billing.Account.AgencyAccount = Billing.AgencyDivision.AgencyDivisionSeqid INNER JOIN\r\n\t\t\t\tNypa.UploadNYPAAccountBilling ON /* Billing.Account.AccountSeqid = Nypa.UploadNYPAAccountBilling.AccountSeqid \r\n\t\t\t\tAND Comment out on 12/13/2018 */ Billing.Account.UniqueAccountSeqID = Nypa.UploadNYPAAccountBilling.UniqueAccountSeqId AND Billing.Account.IsCurrentRecord = 'Y' INNER JOIN /* aded 12/3/2018 */\r\n\t\t\t\tBilling.ApplicationTimeFrame ON Nypa.UploadNYPAAccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\tWHERE \r\n\t\t\t\t('042000' < Billing.AgencyDivision.AgencyCodeOEC) AND (Billing.AgencyDivision.AgencyCodeOEC < '042060') AND \r\n\t\t\t\t(Nypa.UploadNYPAAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod) OR\r\n\t\t\t\t(Billing.AgencyDivision.AgencyCodeOEC = '042101') AND \r\n\t\t\t\t(Nypa.UploadNYPAAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod) and\r\n\t\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\t\r\n\t\t--\r\n\t\t--\tCalculate the rounding discrepancy.\r\n\t\t--\r\n\t\tselect\t@TotalCunyWindChargeAmountRounding = @TotalCunyWindChargeAmount - sum(ROUND(@TotalCunyWindChargeAmount * Nypa.UploadNYPAAccountBilling.AccountEnergyUsage / @TotalCunyFourYearSchoolsCurrentPeriodKWH,2))\r\n\t\tFROM     \r\n\t\t\t\tBilling.Account INNER JOIN\r\n\t\t\t\tBilling.AgencyDivision ON Billing.Account.AgencyAccount = Billing.AgencyDivision.AgencyDivisionSeqid INNER JOIN\r\n\t\t\t\tNypa.UploadNYPAAccountBilling ON /* Billing.Account.AccountSeqid = Nypa.UploadNYPAAccountBilling.AccountSeqid \r\n\t\t\t\tand Comment out on 12/13/2018 */ Billing.Account.UniqueAccountSeqid = Nypa.UploadNYPAAccountBilling.UniqueAccountSeqID AND Billing.Account.IsCurrentRecord = 'Y' INNER JOIN /* Added 12/3/2018 */\r\n\t\t\t\tBilling.ApplicationTimeFrame ON Nypa.UploadNYPAAccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\tWHERE \r\n\t\t\t\t('042000' < Billing.AgencyDivision.AgencyCodeOEC) AND (Billing.AgencyDivision.AgencyCodeOEC < '042060') AND \r\n\t\t\t\t(Nypa.UploadNYPAAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod) OR\r\n\t\t\t\t(Billing.AgencyDivision.AgencyCodeOEC = '042101') AND \r\n\t\t\t\t(Nypa.UploadNYPAAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod) and\r\n\t\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\t\r\n\t\t--\r\n\t\t--\tCalculate the rounding discrepancy.\r\n\t\t--\r\n\t\t--\tAdd the rounding discrepancy to the CustomerLevelAdjustmentAmount of the account with the highest energy usage\r\n\t\t--\r\n\t\tUPDATE    Nypa.UploadNYPAAccountBilling\r\n\t\tSET              CustomerLevelAdjustmentAmount = CustomerLevelAdjustmentAmount + @TotalCunyWindChargeAmountRounding\r\n\t\twhere Nypa.UploadNYPAAccountBilling.UploadNYPAAccountBillingSeqid  \r\n\t\t\t\tin (\r\n\t\t\t\t\t\tSELECT top 1    \r\n\t\t\t\t\t\t\t\tNypa.UploadNYPAAccountBilling.UploadNYPAAccountBillingSeqid  \r\n\t\t\t\t\t\tFROM     \r\n\t\t\t\t\t\t\t\tBilling.Account INNER JOIN\r\n\t\t\t\t\t\t\t\tBilling.AgencyDivision ON Billing.Account.AgencyAccount = Billing.AgencyDivision.AgencyDivisionSeqid INNER JOIN\r\n\t\t\t\t\t\t\t\tNypa.UploadNYPAAccountBilling ON /* Billing.Account.AccountSeqid = Nypa.UploadNYPAAccountBilling.AccountSeqid\r\n\t\t\t\t\t\t\t\tand Comment out on 12/13/2018 */ Nypa.UploadNYPAAccountBilling.UniqueAccountSeqID = Billing.Account.UniqueAccountSeqid AND Billing.Account.IsCurrentRecord = 'Y' INNER JOIN /* added 12/3/2018 */\r\n\t\t\t\t\t\t\t\tBilling.ApplicationTimeFrame ON Nypa.UploadNYPAAccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\t\t\t\t\tWHERE \r\n\t\t\t\t\t\t\t\t('042000' < Billing.AgencyDivision.AgencyCodeOEC) AND (Billing.AgencyDivision.AgencyCodeOEC < '042060') AND \r\n\t\t\t\t\t\t\t\t(Nypa.UploadNYPAAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod) OR\r\n\t\t\t\t\t\t\t\t(Billing.AgencyDivision.AgencyCodeOEC = '042101') AND \r\n\t\t\t\t\t\t\t\t(Nypa.UploadNYPAAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod) and\r\n\t\t\t\t\t\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\t\r\n\t\t\t\t\t\tORDER BY \r\n\t\t\t\t\t\t\t\tNypa.UploadNYPAAccountBilling.AccountEnergyUsage desc\r\n\t\t\t\t\t)\r\n\t\t--\t\t\t\t\t\r\n\t\t\tselect sum(CustomerLevelAdjustmentAmount) as CUNYCalcCustomerLevelAdjustmentAmount,@TotalCunyWindChargeAmount as TotalCunyWindChargeAmount\r\n\t\t\tFROM     \r\n\t\t\t\t\tBilling.Account INNER JOIN\r\n\t\t\t\t\tBilling.AgencyDivision ON Billing.Account.AgencyAccount = Billing.AgencyDivision.AgencyDivisionSeqid INNER JOIN\r\n\t\t\t\t\tNypa.UploadNYPAAccountBilling ON /* Billing.Account.AccountSeqid = Nypa.UploadNYPAAccountBilling.AccountSeqid\r\n\t\t\t\t\tand Comment out on 12/13/2018 */ Nypa.UploadNYPAAccountBilling.UniqueAccountSeqID = Billing.Account.UniqueAccountSeqid AND Billing.Account.IsCurrentRecord = 'Y' INNER JOIN /* added 12/3/2018 */\r\n\t\t\t\t\tBilling.ApplicationTimeFrame ON Nypa.UploadNYPAAccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\t\tWHERE \r\n\t\t\t\t\t('042000' < Billing.AgencyDivision.AgencyCodeOEC) AND (Billing.AgencyDivision.AgencyCodeOEC < '042060') AND \r\n\t\t\t\t\t(Nypa.UploadNYPAAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod) OR\r\n\t\t\t\t\t(Billing.AgencyDivision.AgencyCodeOEC = '042101') AND \r\n\t\t\t\t\t(Nypa.UploadNYPAAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod) and\r\n\t\t\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\t\r\nend \r\n\r\n\r\nend"
        }
      ]
    }
  ]
}