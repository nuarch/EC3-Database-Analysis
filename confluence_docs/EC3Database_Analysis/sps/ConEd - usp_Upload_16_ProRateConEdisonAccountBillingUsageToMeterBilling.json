{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_16_ProRateConEdisonAccountBillingUsageToMeterBilling",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_16_ProRateConEdisonAccountBillingUsageToMeterBilling",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to handle the pro-rating of gas usage for accounts with multiple meters within a specified billing period revision. It processes accounts that have been billed on more than one meter, distributing the total account usage across the individual meters based on their respective usage. The procedure uses a cursor to iterate through each meter associated with an account, calculates the pro-rated usage for each meter, and updates the database with these values."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is considered medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Use of a cursor for row-by-row processing, which can be complex and less efficient."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Involves multiple calculations for pro-rating usage across meters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Requires handling of multiple variables and conditional logic to ensure correct distribution of usage."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates on data already present in the database tables "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonMeterBillingAdjustmentGas",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " and "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonAccountBillingAdjustmentGas",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": "."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring and initializing several variables that will be used to store data fetched from the database and to perform calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Declaration and Opening",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A cursor named "
                },
                {
                  "type": "text",
                  "text": "IndividualMeterOnMultiMeterAccountCursor",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is declared to select data from the "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonMeterBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonAccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " tables. The cursor fetches data for accounts with multiple meters, ordered by billing period revision, account number, and meter usage."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Pro-Rating Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure iterates over each row fetched by the cursor."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each meter, it calculates the pro-rated usage based on the ratio of the meter's usage to the total account usage."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The pro-rated values are accumulated for all but the last meter."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For the last meter, the remaining usage is assigned to ensure the total matches the account's billed usage."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Database Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After calculating the pro-rated values, the procedure updates the "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonMeterBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table with the new pro-rated usage values for each meter."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The cursor is closed and deallocated after processing all rows."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance issues, especially with large datasets, as it processes rows one at a time. Consider refactoring to set-based operations if possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure includes basic error handling with "
                },
                {
                  "type": "text",
                  "text": "@@error",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", but it could be enhanced with "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " blocks for more robust error management."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved have appropriate indexes on columns used in joins and where clauses to optimize query performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Division by Zero",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure checks for division by zero when calculating pro-rated values, but any changes to the logic or data could introduce this risk if not carefully managed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in the tables is accurate and complete. Any discrepancies in the data could lead to incorrect pro-rating and updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If multiple instances of this procedure run simultaneously, there could be issues with data consistency unless proper transaction isolation levels are set."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the dataset grows, the cursor-based approach may become a bottleneck, necessitating a review and potential refactoring to improve scalability."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [ConEd].[usp_Upload_16_ProRateConEdisonAccountBillingUsageToMeterBilling]\nAS\r\nBEGIN\r\n\t--\r\n\t--\tAll of the accounts that have more than one meter and were billed on more than one meter for the billing period revision will be \r\n\t--\tprocess through a cursor.  The meters will be processed in ascending ccf usage order.  The usage will be pro-rated \r\n\t--\tby the ration of the meter ccf usage divided by account ccf usage rounded to zero decimal places for n-1 meters that were billed \r\n\t--\tfor the billing period revision.  The last meter usage will be derived by account billing usage minus the summed n-1 meter pro-rated\r\n\t--\tusage.\r\n\t--\r\n\tdeclare @UploadConEdisonAccountBillingAdjustmentGasSeqid int\r\n\tdeclare @UploadConEdisonMeterBillingAdjustmentGasSeqid int\r\n\r\n\tdeclare @NumberOfMeters int\r\n\tdeclare @AccountBillingRevisedCCF int\r\n\tdeclare @AccountBillingRevisedTherms int\r\n\tdeclare @AccountBillingCanceledTherms int\r\n\tdeclare @AccountBillingCanceledCCF int\r\n\tdeclare @MeterCCF int\r\n\tdeclare @BillingPeriod varchar(6)\r\n\tdeclare @BillingPeriodRevision  varchar(6)\r\n\tdeclare @OriginalAccountNumber varchar(15) \r\n\tdeclare @OriginalMeterNumber  varchar(12)\r\n\t--\r\n\tdeclare @NumberOfMetersRemainToBeProcessed int\r\n\tdeclare @ProRatedAccountBillingCanceledCCF int\r\n\tdeclare @ProRatedAccountBillingCanceledTherms int\r\n\tdeclare @ProRatedAccountBillingRevisedTherms int\r\n\tdeclare @ProRatedMeterBillingCanceledCCF int\r\n\tdeclare @ProRatedMeterBillingRevisedTherms int\r\n\tdeclare @ProRatedMeterBillingCanceledTherms int\r\n\t--\r\n\tdeclare @idx int\r\n\tset @idx=0\r\n\t--\r\n\r\n\tDeclare IndividualMeterOnMultiMeterAccountCursor cursor for \r\n\tSELECT  AccountBillingAdjustmentGas.UploadConEdisonAccountBillingAdjustmentGasSeqid,\r\n\t\t\tMeterBillingAdjustmentGas.UploadConEdisonMeterBillingAdjustmentGasSeqid,\r\n\t\t\tMeterCount.NumberOfMeters,   \r\n\t\t\tMeterBillingAdjustmentGas.BillingPeriodRevision,  \r\n\t\t\tMeterBillingAdjustmentGas.OriginalAccountNumber,  \r\n\t\t\tMeterBillingAdjustmentGas.OriginalMeterNumber,\r\n\t\t\tisnull(MeterBillingAdjustmentGas.RevisedBilledCCF,0) AS mbCCF,\r\n\t\t\tisnull(AccountBillingAdjustmentGas.abRevisedCCF,0) as abRevisedCCF, \r\n\t\t\tisnull(AccountBillingAdjustmentGas.abCanceledCCF,0) as abCanceledCCF,\r\n\t\t\tisnull(AccountBillingAdjustmentGas.abRevisedTherms,0) as abRevisedTherms, \r\n\t\t\tisnull(AccountBillingAdjustmentGas.abCanceledTherms,0) as abCanceledTherms\r\n\r\n\tFROM \r\n\t\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas AS MeterBillingAdjustmentGas \r\n\t\t\tinner join\r\n\t\t(\r\n\t\t\tSELECT  min(UploadConEdisonAccountBillingAdjustmentGasSeqid) as UploadConEdisonAccountBillingAdjustmentGasSeqid,   \r\n\t\t\t\t\tBillingPeriodRevision,UniqueAccountSeqID,\r\n\t\t\t\t\tSUM(RevisedCCF) AS abRevisedCCF, \r\n\t\t\t\t\tSUM(CanceledCCF) AS abCanceledCCF,\r\n\t\t\t\t\tSUM(RevisedTherms) AS abRevisedTherms, \r\n\t\t\t\t\tSUM(CanceledTherms) AS abCanceledTherms\r\n\t\t\tFROM \r\n\t\t\t\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\t\tGROUP BY \r\n\t\t\t\t\tBillingPeriodRevision,UniqueAccountSeqID\r\n\t\t) as AccountBillingAdjustmentGas on \r\n\t\t\tMeterBillingAdjustmentGas.BillingPeriodRevision = AccountBillingAdjustmentGas.BillingPeriodRevision and\r\n\t\t\tMeterBillingAdjustmentGas.UniqueAccountSeqID = AccountBillingAdjustmentGas.UniqueAccountSeqID\r\n\t\t\tinner join\r\n\t\t(\r\n\t\t\tSELECT \r\n\t\t\t\t\tBillingPeriodRevision,UniqueAccountSeqID,count(*) as NumberOfMeters\r\n\t\t\tFROM \r\n\t\t\t\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t\t\tgroup by \r\n\t\t\t\t\tBillingPeriodRevision,UniqueAccountSeqID\r\n\t\t) as MeterCount on \t\t\r\n\t\t\tMeterCount.BillingPeriodRevision = AccountBillingAdjustmentGas.BillingPeriodRevision and\r\n\t\t\tMeterCount.UniqueAccountSeqID = AccountBillingAdjustmentGas.UniqueAccountSeqID\r\n\torder by\r\n\t\t\tMeterBillingAdjustmentGas.BillingPeriodRevision,MeterBillingAdjustmentGas.OriginalAccountNumber,mbCCF\r\n\t--\r\n\topen IndividualMeterOnMultiMeterAccountCursor\r\n\r\n\t-- Read first row\r\n\tfetch IndividualMeterOnMultiMeterAccountCursor into \r\n\t\t\t@UploadConEdisonAccountBillingAdjustmentGasSeqid,\r\n\t\t\t@UploadConEdisonMeterBillingAdjustmentGasSeqid,\r\n\t\t\t@NumberOfMeters,\r\n\t\t\t@BillingPeriodRevision,  \r\n\t\t\t@OriginalAccountNumber,  \r\n\t\t\t@OriginalMeterNumber,\r\n\t\t\t@MeterCCF,\r\n\t\t\t@AccountBillingRevisedCCF, \r\n\t\t\t@AccountBillingCanceledCCF,\r\n\t\t\t@AccountBillingRevisedTherms, \r\n\t\t\t@AccountBillingCanceledTherms\r\n\t--\r\n\t--\tInitialize the variables after the initial read\r\n\t--\r\n\tset @ProRatedAccountBillingRevisedTherms = 0\r\n\tset @ProRatedAccountBillingCanceledTherms = 0\r\n\tset @ProRatedAccountBillingCanceledCCF = 0\r\n\tset @NumberOfMetersRemainToBeProcessed = @NumberOfMeters\t\r\n\t--\r\n\twhile @@fetch_status =0\r\n\t  begin\r\n\t\t--\r\n\t--\tset @idx = @idx+1\r\n\t--\tprint 'Counter [ '+cast(@idx as varchar(10))+'] - AccountSeqid: '+cast(@UploadConEdisonAccountBillingAdjustmentGasSeqid as varchar(10))+' - MeterSeqid: '+cast(@UploadConEdisonMeterBillingAdjustmentGasSeqid as varchar(10))+' - '+@BillingPeriodRevision+' - '+@OriginalAccountNumber+' - '+@OriginalMeterNumber\r\n\t--\tprint 'Counter [ '+cast(@idx as varchar(10))+'] - Revised Therms: '+cast(@AccountBillingRevisedTherms as varchar(10))+' - MeterCCF: '+cast(@MeterCCF as varchar(10))+' - abRevisedCCF'+cast(@AccountBillingRevisedCCF as varchar(10))+' - abCanceledTherms: '+cast(@AccountBillingCanceledTherms as varchar(10))+' - '+' - abCanceledCCF: '+cast(@AccountBillingCanceledCCF as varchar(10))\r\n\t\t--\r\n\t\tif (@NumberOfMetersRemainToBeProcessed <> 1\t)\r\n\t\t   begin\r\n\t\t\t\t--\r\n\t\t\t\t--\tPro-rate the usage and accummulate the usage for the n-1 meters RevisedTherms\r\n\t\t\t\t--\r\n\t\t\t\tset @ProRatedMeterBillingRevisedTherms = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingRevisedTherms * (@MeterCCF/@AccountBillingRevisedCCF),0) end \r\n\t\t\t\tset @ProRatedMeterBillingCanceledTherms = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledTherms * (@MeterCCF/@AccountBillingRevisedCCF),0) end\r\n\t\t\t\tset @ProRatedMeterBillingCanceledCCF = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledCCF * (@MeterCCF/@AccountBillingRevisedCCF),0) end \r\n\t\t\t\t--\r\n\t\t\t\tdeclare @err int\r\n\t\t\t\r\n\t\t\t\tselect @err = @@error\r\n\t\t\t\tif(@err <>0)\r\n\t\t\t\tbegin\r\n\t\t\t\t\tprint '======================================================================'\r\n\t\t\t\t\tprint 'meter:' + @OriginalMeterNumber\r\n\t\t\t\t\tprint 'AccountBillingRevisedCCF' +\tcast(@AccountBillingRevisedCCF as varchar)\r\n\t\t\t\t\tprint 'AccountBillingRevisedTherms' + cast(@AccountBillingRevisedTherms as varchar)\r\n\t\t\t\t\tprint 'MeterCCF' + cast(@MeterCCF as varchar)\r\n\t\t\t\t\tprint 'AccountBillingRevisedCCF' + cast(@AccountBillingRevisedCCF as varchar)\r\n\t\t\t\t\tprint '======================================================================'\r\n\t\t\t\tend\r\n\t\t\t\r\n\t\t\t\tset @ProRatedMeterBillingCanceledTherms = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledTherms * (@MeterCCF/@AccountBillingRevisedCCF),0) end\r\n\t\t\t\tset @ProRatedMeterBillingCanceledCCF = case when @AccountBillingRevisedCCF = 0 then 0 else round(@AccountBillingCanceledCCF * (@MeterCCF/@AccountBillingRevisedCCF),0) end \r\n\t\t\t\t--\r\n\t\t\t\tset @ProRatedAccountBillingRevisedTherms = @ProRatedAccountBillingRevisedTherms + @ProRatedMeterBillingRevisedTherms\r\n\t\t\t\tset @ProRatedAccountBillingCanceledTherms = @ProRatedAccountBillingCanceledTherms + @ProRatedMeterBillingCanceledTherms\r\n\t\t\t\tset @ProRatedAccountBillingCanceledCCF = @ProRatedAccountBillingCanceledCCF + @ProRatedMeterBillingCanceledCCF\r\n\t\t   end\r\n\t\telse\r\n\t\t   BEGIN\r\n\t\t\t\t--\r\n\t\t\t\t--\tDerive the last meters usage and reset the usage accummulators for the next set of meters\r\n\t\t\t\t--\r\n\t\t\t\tset @ProRatedMeterBillingRevisedTherms = @AccountBillingRevisedTherms - @ProRatedAccountBillingRevisedTherms\r\n\t\t\t\tset @ProRatedMeterBillingCanceledTherms = @AccountBillingCanceledTherms - @ProRatedAccountBillingCanceledTherms\r\n\t\t\t\tset @ProRatedMeterBillingCanceledCCF = @AccountBillingCanceledCCF - @ProRatedAccountBillingCanceledCCF\r\n\t\t\t\t--\r\n\t\t\t\tset @ProRatedAccountBillingRevisedTherms = 0\r\n\t\t\t\tset @ProRatedAccountBillingCanceledTherms = 0\r\n\t\t\t\tset @ProRatedAccountBillingCanceledCCF = 0\r\n\t\t   end\r\n\t\t--\r\n\t--\r\n\t--\tCheck the data for testing purposes only\r\n\t--\r\n\t--\tselect \t@BillingPeriodRevision,@OriginalAccountNumber,@OriginalMeterNumber,\r\n\t--\t\t\t@NumberOfMetersRemainToBeProcessed,@MeterCCF,@AccountBillingRevisedCCF,@AccountBillingRevisedTherms,@AccountBillingCanceledTherms,@AccountBillingCanceledCCF,\r\n\t--\t\t\t@ProRatedMeterBillingRevisedTherms,@ProRatedMeterBillingCanceledTherms,@ProRatedMeterBillingCanceledCCF,\r\n\t--\t\t\t@ProRatedAccountBillingRevisedTherms,@ProRatedAccountBillingCanceledTherms,@ProRatedAccountBillingCanceledCCF\r\n\t\t--\r\n\t\t--\tUpdate the meter usage\r\n\t\t--\r\n\t\tUPDATE    ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t\tSET   \r\n\t\t\t\tCanceledBilledCCF = @ProRatedMeterBillingCanceledCCF,\r\n\t\t\t\tCanceledBilledTherms = @ProRatedMeterBillingCanceledTherms,\r\n\t\t\t\tRevisedBilledTherms = @ProRatedMeterBillingRevisedTherms\r\n\t\twhere\t\r\n\t\t\t\tBillingPeriodRevision = @BillingPeriodRevision and \r\n\t\t\t\tOriginalAccountNumber = @OriginalAccountNumber and \r\n\t\t\t\tOriginalMeterNumber = @OriginalMeterNumber\r\n\r\n\t\t--\t\r\n\t\tfetch IndividualMeterOnMultiMeterAccountCursor into \r\n\t\t\t@UploadConEdisonAccountBillingAdjustmentGasSeqid,\r\n\t\t\t@UploadConEdisonMeterBillingAdjustmentGasSeqid,\r\n\t\t\t@NumberOfMeters,\r\n\t\t\t@BillingPeriodRevision,  \r\n\t\t\t@OriginalAccountNumber,  \r\n\t\t\t@OriginalMeterNumber,\r\n\t\t\t@MeterCCF,\r\n\t\t\t@AccountBillingRevisedCCF, \r\n\t\t\t@AccountBillingCanceledCCF,\r\n\t\t\t@AccountBillingRevisedTherms, \r\n\t\t\t@AccountBillingCanceledTherms\r\n\t\t--\t\t\t\r\n\t\t--\tCheck if the number of meters that remain to be processed for the account in the billing period is not equal to one.\r\n\t\t--\t\t\t\r\n\t\tif (@NumberOfMetersRemainToBeProcessed <> 1\t)\r\n\t\t   BEGIN\r\n\t\t\t\tset @NumberOfMetersRemainToBeProcessed = @NumberOfMetersRemainToBeProcessed - 1\r\n\t\t   end\r\n\t\telse\r\n\t\t   BEGIN\r\n\t\t\t\tset @NumberOfMetersRemainToBeProcessed = @NumberOfMeters\t\r\n\t\t   end\r\n\r\n\t\r\n\t--\r\n\t end \r\n\t--\r\n\tclose IndividualMeterOnMultiMeterAccountCursor\r\n\r\n\tDeallocate IndividualMeterOnMultiMeterAccountCursor\r\nEND;"
        }
      ]
    }
  ]
}