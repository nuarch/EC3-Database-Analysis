{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessAccountBillingRebills",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessAccountBillingRebills",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to handle billing adjustments for accounts associated with the New York Power Authority (NYPA). It processes account billing records, particularly focusing on adjustments and rebills for revised billing periods. The procedure updates various billing tables, calculates adjustments, and ensures that the billing records reflect the correct amounts and usage data. It also manages the state of processing for the current billing period and logs any errors encountered during execution."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to several factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple updates across different tables, each with specific conditions and calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure includes error handling with a TRY-CATCH block, which adds to the complexity."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It manages transactional integrity and state changes across multiple billing periods and accounts."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure involves intricate business logic related to billing adjustments and requires careful handling of various billing attributes."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter represents the ID of the user executing the procedure. It is used to log changes and updates made by the user."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This is an output parameter used to indicate the success or failure of the procedure's execution. A value of 0 indicates success, while other values indicate failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure initializes several local variables used throughout the execution, including flags and counters for tracking updates and errors."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Main Processing Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Account Billing Updates",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": The procedure updates the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table with revised billing amounts and usage data based on adjustments from "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingAdjustmentElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Account Billing Electric Updates",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": It updates the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table with detailed billing information, including various charges and adjustments."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Summary Adjustments",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": The procedure calculates total paid adjustments and inserts them into "
                        },
                        {
                          "type": "text",
                          "text": "Nypa.UploadNYPASummaryPaidBillAdj",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Final Updates",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": It updates the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table with the calculated total paid adjustments and ensures that the adjustments are marked as processed in "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingAdjustmentElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses a TRY-CATCH block to handle errors. If an error occurs, it logs the error details and rolls back the transaction."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Completion Marking",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure updates "
                },
                {
                  "type": "text",
                  "text": "Common.UploadCycleParameters",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to indicate that processing for the current period is complete."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure performs multiple updates on large tables, which can be resource-intensive and may impact performance, especially if the tables are large or heavily indexed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of transactions ensures data integrity but can also lead to locking and blocking issues if the procedure runs for an extended period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Index Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensuring that the tables involved have appropriate indexes can help improve the performance of the joins and updates."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues if multiple instances are executed simultaneously, leading to potential deadlocks or data inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure includes error handling, the error message construction and logging could be improved for better clarity and debugging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that certain conditions (e.g., unique account records) are met, which may not always be the case, leading to potential data integrity issues."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of billing records grows, the procedure may face scalability challenges, requiring optimization or refactoring to handle larger datasets efficiently."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Name:         \r\n--* Description:  Process the NYPA account billing adjustments bills using a set operation.\r\n--*                         \r\n--*     The first action is to find the current account billing record.  There should only be one record but if there\r\n--*     are more than one determine which account the revision should be applied to.  This might occur when an\r\n--*     account has been switched from one agency to another and the account and meter numbers have not changed.\r\n--*     \r\n--*     The second action is determine whether the original billing period for the revised period exists.  Check that only\r\n--*     one account exists.  If it does not exist exec the  [dbo].[usp_ProcessAccountBillingRebillAddMissingBills] stored\r\n--*\t\tprocedure using the following parameters:\r\n--*\t\t@UtilityCompanySeqid,   @CreateOriginalBillForRevisionPeriod,@AccountBillingAjustmentSeqid,@StatusCode OUTPUT \r\n--*\r\n--*\t\tFinally, calculate the paid adjustment on a per transaction baisis.\r\n--*               \r\n--* Exec: usp_ProcessAccountBillingEachCanceRebill\r\n--*\r\n--* Parameter(s):         \r\n--*\t\t@UtilityCompanySeqid int,  \r\n--*\t\t@AccountBillingAjustmentSeqid int,  \r\n--*\t\tStatusCode  int output       -  Execution Return Status \r\n--*\r\n--* Return:\t    0 Success\r\n--*                 1 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   10/26/2005\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 08/23/2018  zd  Added NetMetering columns to the AccountBillingElectric Update\r\n--* 03/16/2015 PAH  Added Standby columns to the AccountBillingElectric Update\r\n--* 05/09/2011 PAH  Added NetReactivepower dollars to NetPaidAdjustment\r\n--* 11/07/2006 PAH  First Version  f\r\n--* 12/12/2006 PAH  First Version  \r\n--***************************************************************************************\r\nCREATE PROCEDURE [Nypa].[usp_ProcessAccountBillingRebills]\r\n(\r\n\t@AuthenticatedUserID AS INT\r\n\t,@StatusCode AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN \r\n\tDECLARE @RC INT\r\n\tDECLARE @InvoiceTrackingSeqid INT\r\n\tDECLARE @InvoiceUtilityCompanyCoverSheetSeqid INT\r\n\tDECLARE @NYPAAccountBillingGroup INT\r\n\tDECLARE @BillingCycle VARCHAR(1)\r\n\tDECLARE @BillingPeriod VARCHAR(6)\r\n\tDECLARE @ExhangeCodeNull VARCHAR(2)\r\n\tDECLARE @FromDateParm VARCHAR(1) \r\n\tDECLARE @ToDateParm VARCHAR(1) \r\n\tDECLARE @Yes VARCHAR(1) \r\n\tDECLARE @CreateOriginalBillForRevisionPeriod VARCHAR(1) \r\n\tDECLARE @VoucherAmount MONEY\r\n\tDECLARE @CoverSheetRecordTypeForTotalAmount VARCHAR(4)\r\n\tDECLARE @InvoicedBill VARCHAR(1)\r\n\tDECLARE @BillingSequenceNumber INT\r\n\tDECLARE @CoverSheetPdfFilename ldesc\r\n\tDECLARE @VoucherCreated VARCHAR(2)\r\n\tDECLARE @OriginalBillDeliveryMinimumFromDate VARCHAR(8)\r\n\tDECLARE @OriginalBillDeliveryMaximumToDate VARCHAR(8)\r\n\tDECLARE @PostMarkDate VARCHAR(8)\r\n\tDECLARE @DatePaymentDue VARCHAR(8)\r\n\tDECLARE @DateAcceptanceIntoOEC VARCHAR(8)\r\n    DECLARE @errCurrentAccountNumber NVARCHAR(15)\r\n    DECLARE @errOriginalAccountNumber NVARCHAR(15)\r\n    DECLARE @errCurrentMeterNumber NVARCHAR(12)\r\n    DECLARE @errOriginalMeterNumber NVARCHAR(12)\r\n    DECLARE @ExchangeErrorMessage NVARCHAR(4000);\r\n    DECLARE @ErrorMessage NVARCHAR(4000);\r\n    DECLARE @ErrorSeverity INT;\r\n    DECLARE @ErrorState INT;\r\n    DECLARE @ErrorNumber INT;\r\n    DECLARE @ErrorLine INT;\r\n    DECLARE @ErrorProcedure NVARCHAR(126);\r\n    DECLARE @CommitTransaction VARCHAR(1)  \r\n    DECLARE @FindOriginalAccountBillingRecord INT\r\n    DECLARE @FindRevisedAccountBillingRecord INT\r\n    DECLARE @MissingOriginalAccountBillingRecord INT\r\n    DECLARE @FindAccountBillingRecordForRevision INT\r\n    DECLARE @MissingAccountBillingRecordForRevision INT\r\n    DECLARE @AddMissingAccountBillingRecordForRevision INT\r\n    DECLARE @AccountBillingAdjustmentElectric INT\r\n    DECLARE @AccountBillingElectric INT\r\n    DECLARE @AccountBilling INT\r\n    DECLARE @UtilityCompanySeqid INT\r\n    DECLARE @NetPaidAdjustmentUpdates INT\r\n\r\n    SET @MissingOriginalAccountBillingRecord = 0\r\n    SET @MissingOriginalAccountBillingRecord = 0\r\n    SET @FindOriginalAccountBillingRecord = 0\r\n    SET @CreateOriginalBillForRevisionPeriod = 'O'\r\n    SET @UtilityCompanySeqid = 7\r\n\r\n    BEGIN\r\n        BEGIN TRY\r\n\t\t-- begin transaction ProcessCancelRebills;\r\n        SET @CommitTransaction = 'Y'\r\n\t\r\n\t\t--\tProcess all Account Billing Records For Revision CustomerLevelAdjustmentAmount\r\n\t\t--\r\n\t\t-- \tRevised Period rebilled amounts and usages\r\n\t\t--    (AccountBillingAdjustmentElectric.RevisedBillingPeriod = AccountBilling.BillingPeriodRevision AND \r\n\t\t--     AccountBillingAdjustmentElectric.RevisedBillingPeriod = AccountBilling.BillingPeriod)\r\n\t\t--\r\n        UPDATE Billing.AccountBilling\r\n        SET LastPeriodModified = Billing.AccountBillingAdjustmentElectric.BillingPeriod\r\n            ,FromDate = Billing.AccountBillingAdjustmentElectric.FromDate\r\n            ,ToDate = Billing.AccountBillingAdjustmentElectric.ToDate\r\n            ,RevisedBilledAmount = ISNULL(Billing.AccountBillingAdjustmentElectric.TotalReBilledAmount, 0)\r\n                    + ISNULL(Billing.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount, 0)\r\n                    + ISNULL(Billing.AccountBillingAdjustmentElectric.RevisedReactivePowerDollars, 0)\r\n                    + ISNULL(Billing.AccountBillingElectric.CommodityAllocationCharge, 0)\r\n                    + ISNULL(Billing.AccountBillingElectric.DeliveryAllocationCharge, 0)\r\n            ,AccountEnergyUsage = Billing.AccountBillingAdjustmentElectric.AccountEnergyUsage\r\n            ,AccountDemandUsage = Billing.AccountBillingAdjustmentElectric.AccountDemandUsage\r\n            ,NetEnergyUsageChange = Billing.AccountBillingAdjustmentElectric.AccountEnergyUsage\r\n                    + Billing.AccountBillingAdjustmentElectric.CancelAccountEnergyUsage\r\n            ,NetDemandUsageChange = Billing.AccountBillingAdjustmentElectric.AccountDemandUsage\r\n                    + Billing.AccountBillingAdjustmentElectric.CancelAccountDemandUsage\r\n            ,NetDollarChange = Billing.AccountBillingAdjustmentElectric.TotalNetAdjustedAmount\r\n            ,ProductionAndDeliveryTariff = Billing.AccountBillingAdjustmentElectric.ProductionAndDeliveryTariff\r\n            ,LastUpdate = GETDATE()\r\n            ,AuthenticatedUserID = @AuthenticatedUserID\r\n            ,Billing.AccountBilling.FireAuditTrigger = 'Y'\r\n            ,AccountReactivePowerEnergy = Billing.AccountBillingAdjustmentElectric.AccountReactivePowerEnergy\r\n            ,NetChangeAccountReactivePowerEnergy = Billing.AccountBillingAdjustmentElectric.NetChangeAccountReactivePowerEnergy\r\n        FROM Billing.AccountBillingAdjustmentElectric\r\n            INNER JOIN Billing.ApplicationTimeFrame ON Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n            INNER JOIN Billing.AccountBilling ON Billing.AccountBillingAdjustmentElectric.AdjustedAccountBill = Billing.AccountBilling.AccountBillingSeqid\r\n            INNER JOIN Billing.AccountBillingElectric ON Billing.AccountBilling.AccountBillingSeqid = Billing.AccountBillingElectric.MonthlyAccountBillingChargesElectric\r\n        WHERE (Billing.AccountBillingAdjustmentElectric.ProcessedInTheCurrentPeriod = 'N' )\r\n            AND ( Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y' )\r\n\r\n        SET @AccountBilling = @@rowcount\r\n\r\n        PRINT 'Number of Account billing Updates: ' + CAST(@AccountBilling AS VARCHAR(10))\r\n\r\n\t\t--\tProcess all Account Billing Electric Records For Revision\r\n\t\t-- \tRevised Period rebilled detail and reset the AdjustedAccountElectric to \r\n\t\t--\tthe new adjustment record and the previous state of the row will be written to the \r\n\t\t--\tAuditAccountBillingElectric table\r\n        UPDATE  Billing.AccountBillingElectric\r\n        SET LastPeriodModified = Billing.AccountBillingAdjustmentElectric.BillingPeriod\r\n\t\t\t,BilledAmount = Billing.AccountBillingAdjustmentElectric.TotalReBilledAmount\r\n\t\t\t,AdjustedAccountElectric = Billing.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid\r\n            ,BillCreationDate = Billing.AccountBillingElectric.BillCreationDate\r\n            ,PostMarkDate = Billing.AccountBillingElectric.PostMarkDate\r\n            ,DatePaymentDue = Billing.AccountBillingElectric.DatePaymentDue\r\n            ,DateAcceptanceIntoOEC = Billing.AccountBillingElectric.DateAcceptanceIntoOEC\r\n            ,PreviousAccountBalance = ISNULL(Billing.AccountBillingElectric.PreviousAccountBalance, 0.00)\r\n            ,FuelAdjustmentAmount = ISNULL(Billing.AccountBillingElectric.FuelAdjustmentAmount, 0.00)\r\n            ,LatePaymentAmount = ISNULL(Billing.AccountBillingElectric.LatePaymentAmount, 0.00)\r\n            ,ArrearAmount = ISNULL(Billing.AccountBillingElectric.ArrearAmount, 0.00)\r\n            ,CreditedPaidAmount = ISNULL(Billing.AccountBillingElectric.CreditedPaidAmount, 0.00)\r\n            ,CreditedPaymentDate = Billing.AccountBillingElectric.CreditedPaymentDate\r\n            ,DiscountPercentage = Billing.AccountBillingElectric.DiscountPercentage\r\n            ,DDDSurchargeAmount = Billing.AccountBillingAdjustmentElectric.DDDSurchargeAmount\r\n            ,DDDSurchargePercentage = Billing.AccountBillingAdjustmentElectric.DDDSurchargePercentage\r\n            ,DeliveryConsumption = Billing.AccountBillingAdjustmentElectric.DeliveryConsumption\r\n            ,DeliveryConsumptionOffPeak = Billing.AccountBillingAdjustmentElectric.DeliveryConsumptionOffPeak\r\n            ,DeliveryConsumptionShoulder = Billing.AccountBillingAdjustmentElectric.DeliveryConsumptionShoulder\r\n            ,DeliveryDemand = Billing.AccountBillingAdjustmentElectric.DeliveryDemand\r\n            ,DeliveryDemandOffPeak = Billing.AccountBillingAdjustmentElectric.DeliveryDemandOffPeak\r\n            ,DeliveryDemandShoulder = Billing.AccountBillingAdjustmentElectric.DeliveryDemandShoulder\r\n            ,DeliveryStreetLightingFacilityPoints = Billing.AccountBillingAdjustmentElectric.DeliveryStreetLightingFacilityPoints\r\n            ,CommodityConsumption = Billing.AccountBillingAdjustmentElectric.CommodityConsumption\r\n            ,CommodityConsumptionOffPeak = Billing.AccountBillingAdjustmentElectric.CommodityConsumptionOffPeak\r\n            ,CommodityConsumptionShoulder = Billing.AccountBillingAdjustmentElectric.CommodityConsumptionShoulder\r\n            ,CommodityDemand = Billing.AccountBillingAdjustmentElectric.CommodityDemand\r\n            ,CommodityDemandOffPeak = Billing.AccountBillingAdjustmentElectric.CommodityDemandOffPeak\r\n            ,CommodityDemandShoulder = Billing.AccountBillingAdjustmentElectric.CommodityDemandShoulder\r\n            ,CommodityFacilityPoints = Billing.AccountBillingAdjustmentElectric.CommodityFacilityPoints\r\n            ,GrossReceiptTax = Billing.AccountBillingAdjustmentElectric.GrossReceiptTax\r\n            ,GRTRate = Billing.AccountBillingAdjustmentElectric.GRTRate\r\n            ,LoadFactor = [dbo].[CalculateLoadFactor](Billing.AccountBillingAdjustmentElectric.AccountEnergyUsage,\r\n                                                              Billing.AccountBillingAdjustmentElectric.AccountDemandUsage,\r\n                                                              Billing.AccountBillingAdjustmentElectric.FromDate,\r\n                                                              Billing.AccountBillingAdjustmentElectric.ToDate)\r\n            ,EnergyCostAdjustment = Billing.AccountBillingAdjustmentElectric.EnergyCostAdjustment\r\n            ,EnergyCostAdjustmentPercentage = Billing.AccountBillingAdjustmentElectric.EnergyCostAdjustmentPercentage\r\n            ,InitialPostingDate = Billing.AccountBillingAdjustmentElectric.InitialPostingDate\r\n            ,AccountDemandUsage = Billing.AccountBillingAdjustmentElectric.AccountDemandUsage\r\n            ,AccountEnergyUsage = Billing.AccountBillingAdjustmentElectric.AccountEnergyUsage\r\n            ,AuthenticatedUserID = Billing.AccountBillingAdjustmentElectric.AuthenticatedUserID\r\n            ,LastUpdate = GETDATE()\r\n            ,CustomerMinimumCharge = Billing.AccountBillingAdjustmentElectric.CustomerMinimumCharge\r\n            ,IsMinimumBilledCharged = Billing.AccountBillingAdjustmentElectric.IsMinimumBilledCharged\r\n            ,MinimumBilledEnergyDollars = Billing.AccountBillingAdjustmentElectric.MinimumBilledEnergyDollars\r\n            ,MinimumBilledDemandDollars = Billing.AccountBillingAdjustmentElectric.MinimumBilledDemandDollars\r\n            ,MaxBilledDemandPeriod = Billing.AccountBillingAdjustmentElectric.MaxBilledDemandPeriod\r\n            ,MaxBilledDemandUsage = Billing.AccountBillingAdjustmentElectric.MaxBilledDemandUsage\r\n            ,IsSpannedPeriodBill = Billing.AccountBillingAdjustmentElectric.IsSpannedPeriodBill\r\n            ,DeliveryFacilityPointsAmount = Billing.AccountBillingAdjustmentElectric.DeliveryFacilityPointsAmount\r\n            ,FireAuditTrigger = 'Y'\r\n            ,RevisedReactivePowerDollars = Billing.AccountBillingAdjustmentElectric.RevisedReactivePowerDollars\r\n            ,NetchangeReactivePowerDollars = Billing.AccountBillingAdjustmentElectric.NetchangeReactivePowerDollars\r\n            ,MinimumBilledDemandUsage = Billing.AccountBillingAdjustmentElectric.MinimumBilledDemandUsage\r\n            ,IsDeliveryMinimumBilledFlag = Billing.AccountBillingAdjustmentElectric.IsDeliveryMinimumBilledFlag\r\n            ,DeliveryMinimumBilledAmount = Billing.AccountBillingAdjustmentElectric.DeliveryMinimumBilledAmount\r\n            ,DeliveryMinimumBilledDemand = Billing.AccountBillingAdjustmentElectric.DeliveryMinimumBilledDemand\r\n            ,ProductionMisc1 = Billing.AccountBillingAdjustmentElectric.ProductionMisc1\r\n            ,ProductionMisc2 = Billing.AccountBillingAdjustmentElectric.ProductionMisc2\r\n            ,DeliveryMisc1 = Billing.AccountBillingAdjustmentElectric.DeliveryMisc1\r\n            ,DeliveryMisc2 = Billing.AccountBillingAdjustmentElectric.DeliveryMisc2\r\n            ,MinimumBilledEnergyUsage = Billing.AccountBillingAdjustmentElectric.MinimumBilledEnergyUsage\r\n            ,DeliveryMaximumBilledDemand = Billing.AccountBillingAdjustmentElectric.DeliveryMaximumBilledDemand\r\n            ,DeliveryMaximumBilledDemandPeriod = Billing.AccountBillingAdjustmentElectric.DeliveryMaximumBilledDemandPeriod\r\n            ,StandbyContractDemand = Billing.AccountBillingAdjustmentElectric.StandbyContractDemand\r\n            ,StandbyContractDemandCharges = Billing.AccountBillingAdjustmentElectric.StandbyContractDemandCharges\r\n            ,StandbyAsUsedDailyDemand = Billing.AccountBillingAdjustmentElectric.StandbyAsUsedDailyDemand\r\n            ,StandbyAsUsedDailyDemandCharges = Billing.AccountBillingAdjustmentElectric.StandbyAsUsedDailyDemandCharges\r\n\t\t\t,CreditCurrentPeriod\t\t\t   = Billing.AccountBillingAdjustmentElectric.CreditCurrentPeriod\r\n\t\t\t,CancelCreditCurrentPeriod\t\t   = Billing.AccountBillingAdjustmentElectric.CancelCreditCurrentPeriod\r\n\t\t\t,CreditPrecedingPeriod\t\t\t   = Billing.AccountBillingAdjustmentElectric.CreditPrecedingPeriod\r\n\t\t\t,CancelCreditPrecedingPeriod\t   = Billing.AccountBillingAdjustmentElectric.CancelCreditPrecedingPeriod\r\n\t\t\t,CreditToApplySatellites\t\t   = Billing.AccountBillingAdjustmentElectric.CreditToApplySatellites\r\n\t\t\t,CancelCreditToApplySatellites\t   = Billing.AccountBillingAdjustmentElectric.CancelCreditToApplySatellites\r\n\t\t\t,CreditFromHost\t\t\t\t\t   = Billing.AccountBillingAdjustmentElectric.CreditFromHost\r\n\t\t\t,CancelCreditFromHost\t\t\t   = Billing.AccountBillingAdjustmentElectric.CancelCreditFromHost\r\n\t\t\t,CreditsToCarryForward\t\t\t   = Billing.AccountBillingAdjustmentElectric.CreditsToCarryForward\r\n\t\t\t,CancelCreditsToCarryForward\t   = Billing.AccountBillingAdjustmentElectric.CancelCreditsToCarryForward\r\n\t\t\t,CurrentPeriodOffPeakCredit\t\t   = Billing.AccountBillingAdjustmentElectric.CurrentPeriodOffPeakCredit\r\n\t\t\t,CancelCurrentPeriodOffPeakCredit  = Billing.AccountBillingAdjustmentElectric.CancelCurrentPeriodOffPeakCredit\r\n\t\t\t,CurrentPeriodOnPeakCredit\t\t   = Billing.AccountBillingAdjustmentElectric.CurrentPeriodOnPeakCredit\r\n\t\t\t,CancelCurrentPeriodOnPeakCredit   = Billing.AccountBillingAdjustmentElectric.CancelCurrentPeriodOnPeakCredit\r\n\t\t\t,NetMeteredAccountFlag\t\t\t   = Billing.AccountBillingAdjustmentElectric.NetMeteredAccountFlag\r\n\t\t\t,CancelNetMeteredAccountFlag\t   = Billing.AccountBillingAdjustmentElectric.CancelNetMeteredAccountFlag\r\n\t\t\t,HostNetMeteredAccountNumber\t   = Billing.AccountBillingAdjustmentElectric.HostNetMeteredAccountNumber\r\n\t\t\t,CancelHostNetMeteredAccountNumber = Billing.AccountBillingAdjustmentElectric.CancelHostNetMeteredAccountNumber\r\n\t\t\t,PEXCESS\t\t\t\t\t\t   = Billing.AccountBillingAdjustmentElectric.PEXCESS\r\n\t\t\t,CancelPEXCESS\t\t\t\t\t   = Billing.AccountBillingAdjustmentElectric.CancelPEXCESS\r\n        FROM Billing.AccountBillingAdjustmentElectric\r\n\t\t\tINNER JOIN Billing.AccountBilling ON Billing.AccountBillingAdjustmentElectric.AdjustedAccountBill = Billing.AccountBilling.AccountBillingSeqid\r\n\t\t\tINNER JOIN Billing.ApplicationTimeFrame ON Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\t\tINNER JOIN Billing.AccountBillingElectric ON Billing.AccountBilling.AccountBillingSeqid = Billing.AccountBillingElectric.MonthlyAccountBillingChargesElectric\r\n                AND Billing.AccountBillingAdjustmentElectric.AdjustedAccountBillElectric = Billing.AccountBillingElectric.AccountBillingElectricSeqid\r\n        WHERE Billing.AccountBillingAdjustmentElectric.ProcessedInTheCurrentPeriod = 'N'\r\n            AND Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y'\r\n\t\t\r\n        SET @AccountBillingElectric = @@rowcount\r\n        PRINT 'Number of Account billing Electric Updates: ' + STR(@AccountBillingElectric)\r\n\t\r\n\t\t--  The TotalAmountDue is the original billed amount and adjustments for the current billing period.  It is\r\n\t\t--  a static number that does not change in future periods even if there are retro-active adjustments.\r\n\t\r\n        TRUNCATE TABLE Nypa.UploadNYPASummaryPaidBillAdj\r\n\t\r\n\t\t-- Added NetchangeReactivePowerDollars to the TotalPaidAdjustment\r\n        INSERT  INTO Nypa.UploadNYPASummaryPaidBillAdj\r\n            (UniqueAccountSeqId\r\n\t\t\t,BillingPeriod\r\n            ,OriginalAccountNumber\r\n            ,TotalPaidAdjustment)\r\n        SELECT UniqueAccountSeqId\r\n\t\t\t,Billing.AccountBillingAdjustmentElectric.BillingPeriod\r\n            ,Billing.AccountBillingAdjustmentElectric.OriginalAccountNumber\r\n            ,SUM(Billing.AccountBillingAdjustmentElectric.TotalNetAdjustedAmount\r\n                        + Billing.AccountBillingAdjustmentElectric.NetchangeReactivePowerDollars) AS TotalPaidAdjustment\r\n        FROM Billing.AccountBillingAdjustmentElectric\r\n                        INNER JOIN Billing.ApplicationTimeFrame ON Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n                                                              AND Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision <> Billing.ApplicationTimeFrame.BillingPeriod\r\n        WHERE Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y'\r\n        GROUP BY Billing.AccountBillingAdjustmentElectric.BillingPeriod\r\n            ,Billing.AccountBillingAdjustmentElectric.OriginalAccountNumber\r\n\t\t\t,Billing.AccountBillingAdjustmentElectric.UniqueAccountSeqID /* added on 2/6/2019 */\r\n\t\r\n        UPDATE  Nypa.UploadNYPASummaryPaidBillAdj\r\n        SET     CurrentAccountNumber = Billing.Account.CurrentAccountNumber\r\n        FROM Nypa.UploadNYPASummaryPaidBillAdj\r\n            INNER JOIN Billing.Account ON Nypa.UploadNYPASummaryPaidBillAdj.OriginalAccountNumber = Billing.Account.OriginalAccountNumber\r\n        WHERE Billing.Account.UtilityAccountProvider = 7\r\n            AND Billing.Account.CurrentInvoiceAccountGroup = 1\r\n\t\r\n\t\t-- Update each account billing record with the billing period aggregate paid adjustment\r\n\t\t-- Equate the  ManualPaymentOverrideAmount = TotalAmountDue PAH 12/8/2011\r\n        UPDATE  Billing.AccountBilling\r\n        SET PaidAdjustmentAmount = Nypa.uvw_UploadNYPACurrentAccountNumberSummaryNetPaidBillAdjustment.TotalPaidAdjustment\r\n            ,TotalAmountDue = ISNULL(Billing.AccountBilling.OriginalBilledAmount, 0)\r\n                        + ISNULL(Nypa.uvw_UploadNYPACurrentAccountNumberSummaryNetPaidBillAdjustment.TotalPaidAdjustment, 0)\r\n            ,ManualPaymentOverrideAmount = ISNULL(Billing.AccountBilling.OriginalBilledAmount, 0)\r\n                        + ISNULL(Nypa.uvw_UploadNYPACurrentAccountNumberSummaryNetPaidBillAdjustment.TotalPaidAdjustment, 0)\r\n            ,AuthenticatedUserID = @AuthenticatedUserID\r\n            ,LastUpdate = GETDATE()\r\n        FROM Nypa.uvw_UploadNYPACurrentAccountNumberSummaryNetPaidBillAdjustment\r\n            INNER JOIN Billing.AccountBilling\r\n\t\t\tON Nypa.uvw_UploadNYPACurrentAccountNumberSummaryNetPaidBillAdjustment.UniqueAccountSeqID = Billing.AccountBilling.UniqueAccountSeqId\r\n\t\t\tAND Nypa.uvw_UploadNYPACurrentAccountNumberSummaryNetPaidBillAdjustment.BillingPeriod = Billing.AccountBilling.BillingPeriod\r\n            INNER JOIN Billing.ApplicationTimeFrame ON Billing.AccountBilling.BillingPeriodRevision = Billing.ApplicationTimeFrame.BillingPeriod\r\n                                                              AND Billing.AccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n        WHERE (Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n            AND ( Billing.AccountBilling.UtilityCompanySeqid = 7 )\r\n            AND ( Billing.AccountBilling.CurrentInvoiceAccountBillingGroup = 1 )\r\n\t\r\n        SET @NetPaidAdjustmentUpdates = @@rowcount\r\n        PRINT 'Number of Net Paid Adjustment Updates: ' + STR(@NetPaidAdjustmentUpdates)\r\n\t\r\n\t\t--\tFound the sequnce id's for the following tables: Account,Account Billing and Account Billing Electric.\r\n\t\t-- \tThe sequence id's are updated in the adjustment record to preserve the state of these specific changes.\r\n        UPDATE Billing.AccountBillingAdjustmentElectric\r\n        SET ProcessedInTheCurrentPeriod = 'Y'\r\n\t\t\t,AdjustedAccount = Billing.AccountBilling.AccountSeqid\r\n\t\t\t,AdjustedAccountBill = Billing.AccountBilling.AccountBillingSeqid\r\n\t\t\t,AdjustedAccountBillElectric = Billing.AccountBillingElectric.AccountBillingElectricSeqid\r\n\t\t\t,AuthenticatedUserID = @AuthenticatedUserID\r\n\t\t\t,LastUpdate = GETDATE()\r\n        FROM Billing.AccountBillingAdjustmentElectric\r\n            INNER JOIN Billing.AccountBilling ON Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision\r\n                AND Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision = Billing.AccountBilling.BillingPeriod\r\n                AND Billing.AccountBillingAdjustmentElectric.UniqueAccountSeqId = Billing.AccountBilling.UniqueAccountSeqId\r\n\t\t\t\tAND Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision = Billing.AccountBilling.BillingPeriod\r\n                AND Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision\r\n            INNER JOIN Billing.ApplicationTimeFrame ON Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n                AND Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision <> Billing.ApplicationTimeFrame.BillingPeriod\r\n            INNER JOIN Billing.AccountBillingElectric ON Billing.AccountBilling.AccountBillingSeqid = Billing.AccountBillingElectric.MonthlyAccountBillingChargesElectric\r\n        WHERE (Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n            AND (Billing.AccountBillingAdjustmentElectric.ProcessedInTheCurrentPeriod = 'N')\r\n            AND (Billing.AccountBilling.UtilityCompanySeqid = 7)\r\n            AND (Billing.AccountBilling.CurrentInvoiceAccountBillingGroup = 1)\r\n\r\n        SET @AccountBillingAdjustmentElectric = @@rowcount\r\n        PRINT 'Number of Account Billing Adjustment Electric Updates: ' + STR(@AccountBillingAdjustmentElectric)\r\n\t\r\n\t\t-- Marked as processing has completed for the billing period\r\n        UPDATE Common.UploadCycleParameters\r\n        SET CanProcessData = 'N'\r\n            ,IsCurrentPeriodProcessingComplete = 'Y'\r\n            ,CurrentProcessingPeriodCompleted = dbo.ConvertDateToStringDate(GETDATE())\r\n            ,AuthenticatedUserID = @AuthenticatedUserID\r\n            ,LastUpdate = GETDATE()\r\n        FROM Common.UploadCycleParameters\r\n            INNER JOIN Billing.ApplicationTimeFrame ON Common.UploadCycleParameters.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n        WHERE (Common.UploadCycleParameters.UtilityCompanySeqid = 7)\r\n            AND (Common.UploadCycleParameters.InvoiceAccountGroupSeqid = 1)\r\n            AND (Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n    END TRY\r\n    BEGIN CATCH\r\n        SELECT  @ExchangeErrorMessage = 'Error in StoredProcedure %125s at line number %8.0d'\r\n            ,@ErrorMessage = ERROR_MESSAGE()\r\n            ,@ErrorSeverity = ERROR_SEVERITY()\r\n            ,@ErrorState = ERROR_STATE()\r\n            ,@ErrorNumber = ERROR_NUMBER()\r\n            ,@ErrorProcedure = ERROR_PROCEDURE()\r\n            ,@ErrorLine = ERROR_LINE();\t\t\t\r\n\t\t\r\n        SET @ErrorMessage = @ExchangeErrorMessage + @ErrorMessage\r\n\t\t\r\n        RAISERROR (@ErrorMessage, -- Message text.\r\n\t\t\t\t   @ErrorSeverity, -- Severity.\r\n\t\t\t\t   @ErrorState, -- State.\r\n\t\t\t\t   @ErrorProcedure,\r\n\t\t\t\t   @ErrorLine\r\n\t\t\t\t   ) WITH LOG;\r\n\r\n        SET @CommitTransaction = 'N'\r\n\r\n        ROLLBACK TRANSACTION ProcessCancelRebills;\r\n\r\n    END CATCH;\r\n\r\n    SET @StatusCode = 0\r\n    END;\r\nEND;"
        }
      ]
    }
  ]
}