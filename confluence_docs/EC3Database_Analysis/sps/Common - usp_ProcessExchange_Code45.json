{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Common",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessExchange_Code45",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessExchange_Code45",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to handle the processing of a specific type of exchange, referred to as \"45\" Exchange Meter, within a Microsoft SQL Server database. This procedure manages the validation, insertion, and updating of meter and account records in the context of an exchange process. It ensures that the exchange data is valid, checks for existing records, and updates the database accordingly. The procedure also includes error handling to manage exceptions and rollback transactions if necessary."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple validation checks, conditional logic, and database operations, including inserts, updates, and transactions. It also incorporates error handling using "
        },
        {
          "type": "text",
          "text": "TRY...CATCH",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " blocks and uses several joins and subqueries, which contribute to its medium complexity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@ExchangeSeqid AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The unique identifier for the exchange record being processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the user performing the operation, used for auditing purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that indicates the success (1) or failure (0) of the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Message AS VARCHAR(1000) OUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that provides a message detailing the result of the procedure or any errors encountered."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Checks",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure first checks if the exchange record is flagged as excluded. If so, it throws an error and exits."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It verifies the existence of the exchange record. If not found, it throws an error and exits."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It checks if the exchange has already been processed. If so, it throws an error and exits."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Retrieves account and meter information from the "
                        },
                        {
                          "type": "text",
                          "text": "Common.ExchangeData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table using the provided "
                        },
                        {
                          "type": "text",
                          "text": "@ExchangeSeqid",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Checks if the account number is active in the system."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Checks if the original meter number is active."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Validates that the new meter number does not already exist in an active state."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Ensures the account and meter combination does not already exist."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Begins a transaction to ensure atomicity."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Retrieves additional account and meter data necessary for processing."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts a new meter record based on the original meter and exchange data."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the original meter record to reflect the exchange."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates other related meter records."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts a new record into "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountExchangeMeterTrack",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to track the exchange."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Finalization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Commits the transaction if all operations are successful."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the "
                        },
                        {
                          "type": "text",
                          "text": "Common.ExchangeData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " record to mark it as processed."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Catches any exceptions, rolls back the transaction, and throws an error with a detailed message."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Index Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved, especially those frequently queried like "
                },
                {
                  "type": "text",
                  "text": "Common.ExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "Billing.Meter",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", have appropriate indexes to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The transaction scope is well-defined, but long-running transactions can lead to locking issues. Ensure that the transaction is as short as possible to minimize locking."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Consider the impact of concurrent executions of this procedure, especially regarding updates and inserts, which could lead to contention."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure uses "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for error handling, the use of "
                },
                {
                  "type": "text",
                  "text": "THROW",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with a hardcoded error number (50000) could be improved by using more specific error codes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data retrieved from the tables is accurate and up-to-date. Any discrepancies in the data could lead to incorrect processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of data grows, the performance of the procedure may degrade if not optimized, particularly the subqueries and joins."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of hardcoded values like '99991231' for dates could lead to issues if business rules change. Consider parameterizing or documenting these values clearly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Audit and Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure updates the "
                },
                {
                  "type": "text",
                  "text": "LastUpdate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "AuthenticatedUserID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " fields, additional logging or auditing mechanisms could be beneficial for tracking changes and debugging."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Description:\t\"45\" Exchange Meter\r\n--*\r\n--* AUTHOR:       MOHAMMED BELARREM\r\n--* Created On:   06/20/2016\r\n--* Modified On: 12/27/2018\r\n--**************************************************************************************\r\n--* Change Log\r\n--* \r\n--* 06/20/2016 MOH  First Version \r\n--* 03/27/2017 zd  Added Throw for exception handling\r\n--* 12/27/2018 VY  Modified for UniqueAccountSeqID and UniqueMeterSeqID\r\n--***************************************************************************************\r\nCREATE PROCEDURE [Common].[usp_ProcessExchange_Code45]\r\n(\r\n\t@ExchangeSeqid AS INT,\r\n\t@AuthenticatedUserID AS INT,\r\n\t@StatusCode AS INT OUTPUT,\r\n\t@Message AS VARCHAR(1000) OUT\r\n)\r\nAS \r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\t-- if the record is flagged as exclude, return and exit\r\n\tIF EXISTS (SELECT Exclude FROM Common.ExchangeData WHERE ExchangeDataSeqid = @ExchangeSeqid AND Exclude = 'Y')\r\n\tBEGIN\r\n\t\tSELECT @Message = 'Error in processing 45. This exchange is excluded from processing. ExchangeSeqid: ' + CAST(@ExchangeSeqid AS VARCHAR(10)), @StatusCode = 1;\r\n\t\t;THROW 50000, @Message, 1;\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n\t-- do some validation \r\n\r\n\t-- CHECK IF the record exists\r\n\tIF (NOT EXISTS(SELECT ExchangeDataSeqid FROM Common.ExchangeData WHERE ExchangeDataSeqid = @ExchangeSeqid))\r\n\tBEGIN\r\n\t\tSELECT @Message = 'Error in processing 45. The ExchangeSeqid ' + CAST(@ExchangeSeqid AS VARCHAR(10)) + ' does not exist. Please verify ', @StatusCode = 0;\r\n\t\t;THROW 50000, @Message, 1;\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n\t-- check if the record was processed\r\n\tIF EXISTS(SELECT IsProcessed FROM Common.ExchangeData WHERE ExchangeDataSeqid = @ExchangeSeqid AND IsProcessed <> 'N')\r\n\tBEGIN\r\n\t\tSELECT @Message = 'This 45 exchange was already processed. ExchangeSeqid: ' + CAST( @ExchangeSeqid AS VARCHAR(10)), @StatusCode = 0;\r\n\t\t;THROW 50000, @Message, 1;\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n\t-- check if the current account number is already in the system under an active status\r\n\tDECLARE @AccountNumber AS VARCHAR(15), @AccountSeqid AS INT, @OriginalMeterSeqid AS INT, @NewMeterSeqid AS INT,\r\n\t\t@CurrentMeterNumber VARCHAR(12), @OriginalMeterNumber AS VARCHAR(12), @MeterEffectiveTurnOnDate AS VARCHAR(8);\r\n\r\n\tSELECT @AccountNumber = CurrentAccountNumber\r\n\t\t,@CurrentMeterNumber = CurrentMeterNumber\r\n\t\t,@OriginalMeterNumber = OriginalMeterNumber\r\n\t\t,@MeterEffectiveTurnOnDate = MeterEffectiveTurnOnDate\r\n\tFROM Common.ExchangeData \r\n\tWHERE ExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\t-- get the account seqid of the active account if it exists\r\n\tSELECT @AccountSeqid = AccountSeqid FROM Billing.Account WHERE OriginalAccountNumber = @AccountNumber AND AccountStatus IN ('AC', '47', '46', 'UA') AND IsCurrentRecord = 'Y';\r\n\tSELECT @OriginalMeterSeqid = MeterSeqid FROM Billing.Meter WHERE OriginalMeterNumber = @OriginalMeterNumber AND MeterStatus IN ('AC', '46', 'UA', 'UM') AND IsCurrentRecord = 'Y';\r\n\r\n\tIF (@AccountSeqid IS NULL)\r\n\tBEGIN\r\n\t\tSELECT @Message = 'Error in processing 45. The account number: ' + @AccountNumber + ' is NOT in the system under an active status. Please verfiy ', @StatusCode = 0;\r\n\t\t;THROW 50000, @Message, 1;\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n\tIF (@OriginalMeterSeqid IS NULL)\r\n\tBEGIN\r\n\t\tSELECT @Message = 'Error in processing 45. The original meter number: ' + @OriginalMeterNumber + ' is NOT in the system under an active status. Please verfiy ', @StatusCode = 0;\r\n\t\t;THROW 50000, @Message, 1;\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n\t-- Check if the new meter EXISTS other than '0000000' or 'TRNSM' meter numbers\r\n\tIF EXISTS(SELECT * FROM Billing.Meter WHERE OriginalMeterNumber = @CurrentMeterNumber AND MeterStatus NOT IN ('27', '45') AND @OriginalMeterNumber NOT IN ('0000000','TRNSM','STANDBY'))\r\n\tBEGIN\r\n\t\tSELECT @Message = 'Error in processing 45. The meter number: ' + @OriginalMeterNumber + ' already exists and is active.' , @StatusCode = 0;\r\n\t\t;THROW 50000, @Message, 1;\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n\t-- Check if the new meter and account combination already exists\r\n\tIF EXISTS (SELECT * FROM Billing.Account AS A INNER JOIN Billing.AccountExchangeMeterTrack AS AE ON AE.OriginalAccountSeqid = A.AccountSeqid\r\n\t\tINNER JOIN Billing.Meter AS M ON M.MeterSeqid = AE.OriginalMeterSeqid\r\n\t\tWHERE A.AccountSeqid = @AccountSeqid AND M.OriginalMeterNumber = @CurrentMeterNumber)\r\n\tBEGIN\r\n\t\tSELECT @Message = 'Error in processing 45. The account number: and meter number: ' + @CurrentMeterNumber + ' combination already exists.', @StatusCode = 0;\r\n\t\t;THROW 50000, @Message, 1;\r\n\t\tRETURN\r\n\tEND;\r\n\r\n\tBEGIN TRY\t\r\n\t\tBEGIN TRANSACTION ExchangeMeter;\r\n\t\t\t\t\r\n\t\tDECLARE @UniqueMeterSeqid AS INT, @RecordVersion AS INT, @BillingPeriod AS VARCHAR(6), @AgencySeqid AS INT,\r\n\t\t\t@FacilitySeqid AS INT, @AccountEffectiveTurnOnDate AS VARCHAR(8), @AccountEffectiveTurnOffDate AS VARCHAR(8), @UniqueAccountSeqID AS INT;\r\n\r\n\t\t-- get some account data\r\n\t\tSELECT @FacilitySeqid = FacilityAccount\r\n\t\t\t,@AgencySeqid = AgencyAccount\r\n\t\t\t,@AccountEffectiveTurnOnDate = AccountEffectiveTurnOn\r\n\t\t\t,@AccountEffectiveTurnOffDate = AccountEffectiveTurnOff \r\n\t\t\t,@UniqueAccountSeqID = UniqueAccountSeqID\r\n\t\tFROM Billing.Account\r\n\t\tWHERE AccountSeqid = @AccountSeqid;\r\n\r\n\t\t-- get current Billing Period\r\n\t\tSELECT @BillingPeriod = BillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\r\n\t\t-- get some info for the insert\r\n\t\tSELECT @UniqueMeterSeqid = UniqueMeterSeqid, @RecordVersion = RecordVersion FROM Billing.Meter WHERE MeterSeqid = @OriginalMeterSeqid;\r\n\r\n\t\t-- insert the new meter based on the original meter and the additional data from the exchange\r\n\t\tINSERT INTO Billing.Meter\r\n\t\t\t(UtilityServiceAddress\r\n            ,OriginalAccountNumber\r\n            ,CurrentMeterNumber\r\n\t\t\t,OriginalMeterNumber\r\n            ,Tension\r\n            ,IsOECDefinedMeter\r\n            ,IsUploadProcessed\r\n            ,IsMeterUsageTracked\r\n            ,EnergySource\r\n            ,EnergyAccountDescription\r\n            ,MeterStatus\r\n            ,MeterPreviousStatus\r\n            ,MeterStatusCodePeriod\r\n            ,AssociatedDemandMeter\r\n            ,AgencyELOMeterLocation\r\n            ,UtilityAddressMeterLocation\r\n            ,MeterSquareFootageCoverage\r\n            ,TurnOnDate\r\n            ,TurnOffDate\r\n            ,MeterEffectiveOnDate\r\n            ,MeterEffectiveOffDate\r\n            ,MeterType\r\n            ,MeterDials\r\n            ,MeterConstant\r\n            ,LastPeriodOriginalBilled\r\n            ,LastPeriodAdjustmentBilled\r\n            ,LastZeroUsageBillingPeriod\r\n            ,AdjustmentRecordSeqid\r\n\t\t\t,AMRIndicator\r\n\t\t\t,UniqueAccountSeqID\r\n\t\t\t,UniqueMeterSeqid\r\n\t\t\t,RecordVersion\r\n\t\t\t,IsCurrentRecord\r\n            ,Notes\r\n            ,AuthenticatedUserID\r\n            ,DateAdded\r\n            ,LastUpdate)\r\n\t\tSELECT M.UtilityServiceAddress\r\n\t\t\t,ED.CurrentAccountNumber\r\n\t\t\t,ED.CurrentMeterNumber\r\n\t\t\t,ED.CurrentMeterNumber\r\n\t\t\t,ED.TensionCode\r\n\t\t\t,ISNULL(M.IsOECDefinedMeter, 'N')\r\n\t\t\t,ISNULL(M.IsUploadProcessed, 'Y')\r\n\t\t\t,ISNULL(M.IsMeterUsageTracked, 'Y')\r\n\t\t\t,M.EnergySource\r\n\t\t\t,M.EnergyAccountDescription\r\n\t\t\t,'AC'\r\n\t\t\t,'AC'\r\n\t\t\t,@BillingPeriod\r\n\t\t\t,ED.AssociatedDemandMeter\r\n\t\t\t,M.AgencyELOMeterLocation\r\n\t\t\t,M.UtilityAddressMeterLocation\r\n\t\t\t,M.MeterSquareFootageCoverage\r\n\t\t\t,@BillingPeriod\r\n\t\t\t,'999912'\r\n\t\t\t,ED.MeterEffectiveTurnOnDate\r\n\t\t\t,'99991231'\r\n\t\t\t,ED.MeterType\r\n\t\t\t,ED.MeterNumberofDials\r\n\t\t\t,ED.MeterConstant\r\n\t\t\t,NULL\r\n\t\t\t,NULL\r\n\t\t\t,NULL\r\n\t\t\t,NULL\r\n\t\t\t,ED.AMRIndicator\r\n\t\t\t,@UniqueAccountSeqID\r\n            ,@UniqueMeterSeqid\r\n\t\t\t,(@RecordVersion + 1)\r\n\t\t\t,'Y'\r\n\t\t\t,M.Notes\r\n\t\t\t,@AuthenticatedUserID\r\n\t\t\t,GETDATE()\r\n\t\t\t,GETDATE() \r\n\t\tFROM Billing.Meter AS M CROSS JOIN common.ExchangeData AS ED\r\n\t\tWHERE M.MeterSeqid = @OriginalMeterSeqid AND ED.ExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\t\t-- get id of the newly created meter\r\n\t\tSELECT  @NewMeterSeqid = IDENT_CURRENT('Billing.Meter');\r\n\r\n\t\t-- update the previous meter number\r\n\t\tUPDATE M\r\n\t\tSET  CurrentMeterNumber\t= @CurrentMeterNumber\r\n\t\t\t,MeterPreviousStatus = M.MeterStatus\r\n\t\t\t,MeterStatus = '45'\r\n\t\t\t,MeterStatusCodePeriod = @BillingPeriod\r\n\t\t\t,TurnOffDate = @BillingPeriod\r\n\t\t\t,MeterEffectiveOffDate = @MeterEffectiveTurnOnDate\r\n\t\t\t,LastUpdate = GETDATE()\r\n\t\t\t,AuthenticatedUserID = @AuthenticatedUserID\r\n\t\t\t,IsCurrentRecord = 'N'\r\n\t\t\t,FireAuditTrigger = 'Y'\r\n\t\tFROM Billing.Meter AS M\r\n\t\tWHERE M.MeterSeqid = @OriginalMeterSeqid;\r\n\r\n\t\t-- update the other meters\r\n\t\tUPDATE M\r\n\t\tSET\tCurrentMeterNumber = @CurrentMeterNumber\r\n\t\t\t,LastUpdate = GETDATE()\r\n\t\t\t,AuthenticatedUserID = @AuthenticatedUserID\r\n\t\t\t,FireAuditTrigger = 'Y'\r\n        FROM Billing.Meter AS M\r\n        WHERE M.UniqueMeterSeqid = @UniqueMeterSeqid AND M.IsCurrentRecord = 'N' AND M.MeterSeqid <> @OriginalMeterSeqid;\r\n\r\n\t\t-- insert new link into accountExchangeTrackMeter\r\n\t\tINSERT INTO Billing.AccountExchangeMeterTrack\r\n\t\t\t(UniqueAccountSeqID\r\n\t\t\t,UniqueMeterSeqID\r\n\t\t\t,UtilityCompanySeqid\r\n\t\t\t,OriginalAgencyDivisionSeqid\r\n\t\t\t,OriginalFacilitySeqid\r\n\t\t\t,OriginalAccountSeqid\r\n\t\t\t,OriginalMeterSeqid\r\n\t\t\t,OriginalAccountNumber\r\n\t\t\t,OriginalMeterNumber\r\n\t\t\t,AccountEffectiveBillingStartDate\r\n\t\t\t,AccountEffectiveBillingEndDate\r\n\t\t\t,MeterEffectiveBillingStartDate\r\n\t\t\t,MeterEffectiveBillingEndDate\r\n\t\t\t,AuthenticatedUserID\r\n\t\t\t,DateAdded\r\n\t\t\t,LastUpdate)\r\n\t\tSELECT  \r\n\t\t\tCommon.GetUniqueAccountSeqID(@AccountSeqID)\r\n\t\t\t,Common.GetUniqueMeterSeqID(@NewMeterSeqID)\r\n\t\t\t,UtilityCompanySeqid\r\n\t\t\t,@AgencySeqid\r\n\t\t\t,@FacilitySeqid\r\n\t\t\t,@AccountSeqid\r\n\t\t\t,@NewMeterSeqid\r\n\t\t\t,@AccountNumber\r\n\t\t\t,@CurrentMeterNumber\r\n\t\t\t,@AccountEffectiveTurnOnDate\r\n\t\t\t,@AccountEffectiveTurnOffDate\r\n\t\t\t,MeterEffectiveTurnOnDate\r\n\t\t\t,'99991231'\r\n\t\t\t,@AuthenticatedUserID\r\n\t\t\t,GETDATE()\r\n\t\t\t,GETDATE()\r\n\t\tFROM Common.ExchangeData\r\n\t\tWHERE ExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\t\tCOMMIT TRAN ExchangeMeter;\r\n\r\n\t\t-- if we make it here and all is well, come back and update the record as processes\r\n\t\tUPDATE Common.ExchangeData\r\n\t\tSET IsProcessed = 'Y',\r\n\t\t\tAccountSeqid = @AccountSeqid,\r\n\t\t\tMeterSeqid = @NewMeterSeqid\r\n\t\tWHERE ExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\t\tSELECT @Message = '', @StatusCode = 1;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tROLLBACK TRAN ExchangeMeter;\r\n\t\tSELECT @Message = 'Error in processing 45. Error processing exchange  ' + CAST(@ExchangeSeqid AS VARCHAR(10)) + ' error message: ' + ERROR_MESSAGE(), @StatusCode = 0;\r\n\t\t;THROW 50000,@Message,1;\r\n\tEND CATCH;\r\nEND;"
        }
      ]
    }
  ]
}