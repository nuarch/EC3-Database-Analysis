{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Gas",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessCommonElectronicGasUnknownExchangeCode",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessCommonElectronicGasUnknownExchangeCode",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to handle the processing of electronic meter exchanges for gas accounts, specifically for non-NYPA (New York Power Authority) accounts with an exchange code of '46'. The procedure processes exchange records by either adding a new account and meter or adding a new meter to an existing account. It involves reading data from an exchange data table, checking for existing accounts, and inserting new records into account, address, and meter tables as necessary."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional checks and branching logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It performs several database operations, including inserts and updates across multiple tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It handles both existing and non-existing accounts, requiring different processing paths."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses dynamic data retrieval and manipulation based on input parameters and existing data."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the user executing the procedure. This is used for auditing purposes, such as recording who added or updated records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@ExchangeSeqid INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The sequence ID of the exchange record to be processed. This identifies the specific record in the exchange data table that needs processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that indicates the execution status of the procedure. It returns "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for success and "
                },
                {
                  "type": "text",
                  "text": "9",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring and initializing several local variables, including default values for unknown agency and facility IDs, energy delivery type, and status codes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves the current billing period and exchange data for the specified "
                },
                {
                  "type": "text",
                  "text": "@ExchangeSeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " from the "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadCommonElectronicGasExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Account Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If the utility company ID matches specific values (ConEdison or NationalGridWest), it proceeds with processing."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It checks if the account already exists in the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.Account",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If the account does not exist, it inserts a new account record with default and retrieved values."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If the account exists, it retrieves the account sequence ID and checks the account status for further actions."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Meter Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It checks if a meter record already exists for the account."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If not, it inserts a new meter record with default and retrieved values."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It then inserts a record into the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountExchangeMeterTrack",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to track the account and meter association."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Finalization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure updates the "
                },
                {
                  "type": "text",
                  "text": "@StatusCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to indicate success or failure based on the operations performed."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved, especially those frequently joined or filtered ("
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "Billing.Meter",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadCommonElectronicGasExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "), have appropriate indexes to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "IDENT_CURRENT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for retrieving the last inserted ID can lead to issues in high-concurrency environments. Consider using "
                },
                {
                  "type": "text",
                  "text": "SCOPE_IDENTITY()",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for more reliable results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If processing large volumes of data, consider batching the operations to reduce transaction size and lock contention."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadCommonElectronicGasExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is accurate and complete. Any discrepancies could lead to incorrect account or meter records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency Issues",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "IDENT_CURRENT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can lead to incorrect sequence ID retrieval if multiple inserts occur simultaneously. This could result in data integrity issues."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling mechanisms. Consider adding "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " blocks to handle exceptions and ensure proper rollback of transactions in case of failures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses hardcoded values for certain fields (e.g., energy source, energy subtype). Changes in business rules may require updates to the procedure code."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Description:  NON-NYPA electronic meter exchange \"46\" exhchange process that adds a new account and meter or \r\n--* adds a new meter to an existing A.\r\n--* \r\n--* Exec: usp_ProcessExchangeCode_46\r\n--*\r\n--* Parameter(s): \r\n--*\t\t\t AuthenticatedUserID INT - user id of whom runs the procedure\t\r\n--*  ExchangeSeqid INT - The sequence id of the exchange record to be processed\r\n--*  ExchangeCode VARCHAR(2) - The exchange code of the exchange record to be processed,\r\n--*\t\t\t\t  it should be a \"46\" for this procedure.\r\n--*  BillingPeriod VARCHAR(6)  - Current billing period\r\n--*  UtilityCompanySeqid INT - The sequence id of the Utility Companyto be processed\r\n--*  StatusCode  INT output- Execution Return Status \r\n--*\r\n--* Database: EC3Database\r\n--*\r\n--* Return:\t0 Success\r\n--* 9 Failure\r\n--*\r\n--* AUTHOR:  Mohammed Belarrem\r\n--* Created On: 07/14/2008\r\n--***************************************************************************************\r\n--* Date Tech Description of Change\r\n--* ---------- ----  --------------------------------------------------------------------\r\n--* 07/14/2008 MOH  First Version  \r\n--* 2016-12-13 zd  Updated 9999 99 date  to 999912\r\n--* 2019-04-09 VY Modified for EnergySubTypeID\r\n--***************************************************************************************\r\nCREATE PROCEDURE [Gas].[usp_ProcessCommonElectronicGasUnknownExchangeCode]\r\n(\r\n\t@AuthenticatedUserID INT\r\n\t,@ExchangeSeqid INT\r\n\t,@StatusCode INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tDECLARE @CheckForProcessing INT, @UnknownAgencySeqid INT, @UnknownFacilitySeqid INT, @EnergyDeliveryTypeSeqid INT\r\n\t\t,@TransactionalTimeStamp DateTime, @AccountSeqid INT, @AccountPreviousStatus VARCHAR(2), @AccountStatusCodePeriod VARCHAR(8)\r\n\t\t,@MeterSeqid INT, @AccountExchangeMeterTrack INT, @TurnOffPeriod VARCHAR(6), @TurnOffDate VARCHAR(8), @PreviousStatus VARCHAR(2)\r\n\t\t,@Yes VARCHAR(1), @No VARCHAR(1), @UtilityCompanyId INT, @AccountBillingGroup INT, @BillingPeriod VARCHAR(6)\r\n\t\t,@CurrentAccountNumber VARCHAR(15), @CurrentMeterNumber VARCHAR(7), @ExchangeCode VARCHAR(2), @AccountStatus VARCHAR(2)\r\n\t\t,@AccountEffectiveTurnOn VARCHAR(8), @AccountEffectiveTurnOff VARCHAR(8), @KWHAccountDescription VARCHAR(3), @SalesType VARCHAR(2)\r\n\t\t,@DeliveryServiceClass VARCHAR(3), @DeliveryServiceClassEffectiveDate VARCHAR(8), @ProductionServiceClass VARCHAR(4)\r\n\t\t,@ProductionServiceClassEffectiveDate VARCHAR(8), @BillingCycle VARCHAR(1), @ExcessDistributionAccount VARCHAR(15)\r\n\t\t,@TODAccount VARCHAR(1), @TripNumber VARCHAR(2), @AccountName VARCHAR(60), @AccountAddress VARCHAR(40), @MeterStatus VARCHAR(2)\r\n\t\t,@MeterEffectiveTurnOnDate VARCHAR(8), @MeterEffectiveTurnOffDate VARCHAR(8), @MeterType VARCHAR(1), @MeterNumberofDials VARCHAR(1) \r\n\t\t,@MeterConstant VARCHAR(5), @MeterTension VARCHAR(1), @ManualDataEntry VARCHAR(1), @EnergyDeliveryCount INT, @EnergyDeliveryType INT\r\n\t\t,@EnergyDeliveryType1 INT, @AddressSeqid INT, @EnergySource INT, @Last3OfAccountNumber VARCHAR(3), @First12OfAccountNumber VARCHAR(12)\r\n\t\t,@SplitableAccountNumber VARCHAR(1), @AccountNumber VARCHAR(15), @AccountNumber1 VARCHAR(15), @Counter INT, @XchangeCode VARCHAR(2)\r\n\t\t,@CurrentBillingPeriod VARCHAR(6), @UtilityCompanySeqid INT, @ConEdisonElectronicGas INT, @NationalGridWestElectronicGas INT;\r\n\r\n\tSELECT @UnknownAgencySeqid = 396, @UnknownFacilitySeqid = 4623, @EnergyDeliveryTypeSeqid = 1, @TurnOffPeriod = '999912'\r\n\t\t,@TurnOffDate = '99991231', @PreviousStatus = 'NU', @Yes = 'Y', @No = 'N', @ConEdisonElectronicGas = 9\r\n\t\t,@NationalGridWestElectronicGas = 2, @StatusCode = 9;\r\n\r\n\tSELECT TOP 1 @CurrentBillingPeriod = BillingPeriod FROM Gas.UploadCommonElectronicGasExchangeData;\r\n\r\n\t-- Read the exchange file and process the singleton exchange\r\n\t-- Load the variables with the data from the singleton  \r\n\tSELECT\r\n\t\t@UtilityCompanyId = UtilityCompanyId\r\n\t\t,@AccountBillingGroup = AccountBillingGroup\r\n\t\t,@BillingPeriod = BillingPeriod\r\n\t\t,@CurrentAccountNumber = CurrentAccountNumber\r\n\t\t,@CurrentMeterNumber = CurrentMeterNumber\r\n\t\t,@ExchangeCode = CASE WHEN ExchangeCode = 'UN' THEN 'UA' ELSE ExchangeCode END --Fix to make sure that Un known accounts always have a 'UA' ststus\r\n\t\t,@AccountStatus = AccountStatus\r\n\t\t,@AccountEffectiveTurnOn = AccountEffectiveTurnOn\r\n\t\t,@AccountEffectiveTurnOff = AccountEffectiveTurnOff \r\n\t\t,@KWHAccountDescription = KWHAccountDescription\r\n\t\t,@SalesType = SalesType\r\n\t\t,@DeliveryServiceClass = DeliveryServiceClass\r\n\t\t,@DeliveryServiceClassEffectiveDate = DeliveryServiceClassEffectiveDate\r\n\t\t,@ProductionServiceClass = ProductionServiceClass\r\n\t\t,@ProductionServiceClassEffectiveDate = ProductionServiceClassEffectiveDate\r\n\t\t,@BillingCycle = BillingCycle\r\n\t\t,@ExcessDistributionAccount = ExcessDistributionAccount\r\n\t\t,@TODAccount = TODAccount\r\n\t\t,@TripNumber = TripNumber\r\n\t\t,@AccountName = AccountName\r\n\t\t,@AccountAddress = AccountAddress\r\n\t\t,@MeterStatus = MeterStatus\r\n\t\t,@MeterEffectiveTurnOnDate = MeterEffectiveTurnOnDate\r\n\t\t,@MeterEffectiveTurnOffDate = MeterEffectiveTurnOffDate\r\n\t\t,@MeterType =MeterType\r\n\t\t,@MeterNumberofDials =MeterNumberofDials\r\n\t\t,@MeterConstant =MeterConstant\r\n\t\t,@MeterTension =MeterTension\r\n\t\t,@ManualDataEntry = ManualDataEntry\r\n\t\t,@EnergyDeliveryCount = EnergyDeliveryCount\r\n\t\t,@EnergyDeliveryType = EnergyDeliveryType\r\n\t\t,@EnergyDeliveryType1 = EnergyDeliveryType1\r\n\tFROM Gas.UploadCommonElectronicGasExchangeData\r\n\tWHERE UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\tIF (@UtilityCompanyId IN (@ConEdisonElectronicGas, @NationalGridWestElectronicGas))\r\n\tBEGIN\r\n\t\t-- handle the singleton like NYPA\r\n\t\t-- insert the account record\r\n\t\t-- insert the address record\r\n\t\t-- insert the associated meters\t\r\n\r\n\t\t-- Check for non-existent Account\r\n\t\tIF (NOT EXISTS(SELECT DISTINCT * FROM Gas.UploadCommonElectronicGasExchangeData AS G INNER JOIN\r\n\t\t\t\tBilling.Account AS A ON G.CurrentAccountNumber = A.OriginalAccountNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid))\r\n\t\tBEGIN\r\n\t\t\t-- Account is non-existent \r\n\t\t\t--\r\n\t\t\t--Create new account based upon the exchange data,create default values to be modified at a later date if necessary and use the account variables default values for columns that \r\n\t\t\t-- are initially unknown.\r\n\t\t\tINSERT INTO Billing.Account\r\n\t\t\t\t(ExcessDistributionAssocEnergyAccount,\r\n\t\t\t\tIsExcessDistribution,\r\n\t\t\t\tCommodityAssocDeliveryAccount,\r\n\t\t\t\tIsCommodityAccount,\r\n\t\t\t\tUtilityAccountProvider,\r\n\t\t\t\tAgencyAccount,\r\n\t\t\t\tFacilityAccount,\r\n\t\t\t\tManualDataEntry,\r\n\t\t\t\tCurrentAccountNumber,\r\n\t\t\t\tOriginalAccountNumber,\r\n\t\t\t\tAccountStatus,\r\n\t\t\t\tAccountPreviousStatus,\r\n\t\t\t\tAccountStatusCodePeriod,\r\n\t\t\t\tCurrentInvoiceAccountGroup,\r\n\t\t\t\tAccountEffectiveTurnOn,\r\n\t\t\t\tAccountEffectiveTurnOff,\r\n\t\t\t\tEnergySource,\r\n\t\t\t\tEnergyAccountDescription,\r\n\t\t\t\tEnergyDeliverySubTypeId,\r\n\t\t\t\tSalesType,\r\n\t\t\t\tDeliveryTariffRate,\r\n\t\t\t\tDeliveryTariffEffectiveDate,\r\n\t\t\t\tCommodityTariffRate,\r\n\t\t\t\tCommodityTariffEffectiveDate,\r\n\t\t\t\tBillingCycle,\r\n\t\t\t\tDelivery,\r\n\t\t\t\tAccountInMultipleBuildings,\r\n\t\t\t\tSourceOfRevenue,\r\n\t\t\t\tTurnOnDate,\r\n\t\t\t\tTurnOffDate,\r\n\t\t\t\tIsTimeOfDayAccount,\r\n\t\t\t\tTerritory,\r\n\t\t\t\tTension,\r\n\t\t\t\tTripNumber,\r\n\t\t\t\tUtilityServiceAccountName,\r\n\t\t\t\tUtilityServiceAddress,\r\n\t\t\t\tBorough,\r\n\t\t\t\tBlock,\r\n\t\t\t\tLotNumber,\r\n\t\t\t\tCityPlanningBIN,\r\n\t\t\t\tELOAgencyAddress,\r\n\t\t\t\tLastPeriodOriginalBilled,\r\n\t\t\t\tLastPeriodAdjustmentBilled,\r\n\t\t\t\tLastZeroDollarsBillingPeriod,\r\n\t\t\t\tAdjustmentRecordSeqid,\r\n\t\t\t\tNotes,\r\n\t\t\t\tAuthenticatedUserID,\r\n\t\t\t\tDateAdded,\r\n\t\t\t\tLastUpdate)\r\n\t\t\tSELECT DISTINCT A.ExcessDistributionAssocEnergyAccount,\r\n\t\t\t\t@No,\r\n\t\t\t\tA.CommodityAssocDeliveryAccount,\r\n\t\t\t\t@No,\r\n\t\t\t\tG.UtilityCompanyId,\r\n\t\t\t\t@UnknownAgencySeqid,\r\n\t\t\t\t@UnknownFacilitySeqid,\r\n\t\t\t\t@ManualDataEntry,\r\n\t\t\t\tG.CurrentAccountNumber,\r\n\t\t\t\tG.CurrentAccountNumber,\r\n\t\t\t\t@ExchangeCode,\r\n\t\t\t\t@PreviousStatus,\r\n\t\t\t\t@CurrentBillingPeriod,\r\n\t\t\t\tG.AccountBillingGroup,\r\n\t\t\t\tG.AccountEffectiveTurnOn,\r\n\t\t\t\t@TurnOffDate,\r\n\t\t\t\t5,-- Default Value for Gas Energy Source,\r\n\t\t\t\t1,--G.KWHAccountDescription,\r\n\t\t\t\t7,-- EnergySubType 7 for natural gas added on 4/9/2019 \r\n\t\t\t\tG.SalesType,\r\n\t\t\t\tG.DeliveryServiceClass,\r\n\t\t\t\tG.DeliveryServiceClassEffectiveDate,\r\n\t\t\t\tG.ProductionServiceClass,\r\n\t\t\t\tG.ProductionServiceClassEffectiveDate,\r\n\t\t\t\tG.BillingCycle,\r\n\t\t\t\t@Yes,\r\n\t\t\t\t@No,\r\n\t\t\t\t@No,\r\n\t\t\t\t@CurrentBillingPeriod,\r\n\t\t\t\t@TurnOffPeriod,\r\n\t\t\t\tG.TODAccount,\r\n\t\t\t\tA.Territory,\r\n\t\t\t\tG.MeterTension,\r\n\t\t\t\tG.TripNumber,\r\n\t\t\t\tG.AccountName,\r\n\t\t\t\tG.AccountAddress,\r\n\t\t\t\tG.Borough,\r\n\t\t\t\tA.Block,\r\n\t\t\t\tA.LotNumber,\r\n\t\t\t\tA.CityPlanningBIN,\r\n\t\t\t\tA.ELOAgencyAddress,\r\n\t\t\t\tA.LastPeriodOriginalBilled,\r\n\t\t\t\tA.LastPeriodAdjustmentBilled,\r\n\t\t\t\tA.LastZeroDollarsBillingPeriod,\r\n\t\t\t\tA.AdjustmentRecordSeqid,\r\n\t\t\t\tA.Notes,\r\n\t\t\t\t@AuthenticatedUserID,\r\n\t\t\t\tGETDATE(),\r\n\t\t\t\tGETDATE()\r\n\t\t\tFROM Gas.UploadCommonElectronicGasExchangeData AS G LEFT JOIN\r\n\t\t\t\tBilling.Account AS A ON G.CurrentAccountNumber = A.OriginalAccountNumber AND \r\n\t\t\t\tG.CurrentAccountNumber = A.CurrentAccountNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid;\r\n\t\t\t\t\t\t\t\r\n\t\t\t-- Get the Account sequence id after it is inserted\r\n\t\t\tSELECT @AccountSeqid = ident_current('Billing.Account');\r\n\t\t\t\t\t\t\t\r\n\t\t\tINSERT INTO Billing.Address\r\n\t\t\t\t(AccountSeqid,Address1, OECLegacyAddress, Borough, City, UtilityCompanySeqid,\r\n\t\t\t\t[State], OriginalAccountNumber, HouseNumber, StreetName, AuthenticatedUserID, DateAdded, LastUpdate)\r\n\t\t\tSELECT\r\n\t\t\t\t@AccountSeqid,\r\n\t\t\t\tG.AccountAddress, G.AccountAddress, G.Borough,\r\n\t\t\t\tcase  G.Borough\r\n\t\t\t\t\twhen '1' then 'Manahttan'\r\n\t\t\t\t\twhen '2' then 'Bronx'\r\n\t\t\t\t\twhen '3' then 'Brooklyn'\r\n\t\t\t\t\twhen '4' then 'Queens'\r\n\t\t\t\t\twhen '5' then 'Staten Island'\r\n\t\t\t\t\telse 'Up State  ' end as City,\r\n\t\t\t\tG.UtilityCompanyId,\r\n\t\t\t\t'NY', G.CurrentAccountNumber,\r\n\t\t\t\tcase  \r\n\t\t\t\t\twhen '0'<= substring(G.AccountAddress, 1, 1) and substring(G.AccountAddress, 1, 1) <='9'\r\n\t\t\t\t\tthen [dbo].[GetHouseNumberFromAddress](dbo.CutStreetFromAddress(G.AccountAddress))\r\n\t\t\t\t\telse '  ' end as HouseNumber,\r\n\t\t\t\tcase  \r\n\t\t\t\t\twhen '0'<= substring(G.AccountAddress,1,1) and substring(G.AccountAddress,1,1) <='9'\r\n\t\t\t\t\tthen [dbo].[GetStreetFromAddress] (dbo.CutStreetFromAddress(G.AccountAddress))\r\n\t\t\t\t\telse '  ' end as StreetName,\r\n\t\t\t\tG.authenticatedUserID,G.DateAdded,G.LastUpdate\r\n\t\t\tFROM Gas.UploadCommonElectronicGasExchangeData AS G LEFT JOIN\r\n\t\t\t\tBilling.Account AS A ON G.UtilityCompanyId = A.UtilityAccountProvider AND \r\n\t\t\t\tG.CurrentAccountNumber = A.OriginalAccountNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid;\r\n\t\t\t\t\t\t\t\r\n\t\t\t-- Get the Account sequence id after it is inserted\r\n\t\t\tSELECT @AddressSeqid = IDENT_CURRENT('Billing.Address');\r\n\t\t\t\r\n\t\t\tUPDATE Billing.Account\r\n\t\t\tSET ELOAgencyAddress = @AddressSeqid\r\n\t\t\tWHERE AccountSeqid = @AccountSeqid;\r\n\t\tEND\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\t-- Account exists,now check status code for appropriate action \t\t\r\n\t\t\tSELECT DISTINCT\t\r\n\t\t\t\t@AccountSeqid = A.AccountSeqid,\r\n\t\t\t\t@AccountStatus = A.AccountStatus,\r\n\t\t\t\t@AccountPreviousStatus = A.AccountPreviousStatus,\r\n\t\t\t\t@AccountStatusCodePeriod = A.AccountStatusCodePeriod\r\n\t\t\tFROM Billing.Account AS A INNER JOIN Gas.UploadCommonElectronicGasExchangeData AS G \r\n\t\t\t\tON A.CurrentAccountNumber = G.CurrentAccountNumber AND A.OriginalAccountNumber = G.CurrentAccountNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid AND A.UtilityAccountProvider = @UtilityCompanySeqid;\r\n\t\tEND;\r\n\r\n\t\t-- Check for Legacy Account and NYPA re-using the Account for another agency\r\n\t\t-- Check that the Account is turned off,NYPA is re-using it for another agency\r\n\t\t-- else\r\n\t\t-- The account exists and is active and the account insertion is skipped but in any case the \r\n\t\t-- INTernal sequence id is maintained in @AccountSeqid for the meter insertion\r\n\t\tIF (@AccountStatus = 'LG' or @AccountStatus = '27')\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO Billing.Account\r\n\t\t\t\t(ExcessDistributionAssocEnergyAccount,\r\n\t\t\t\tIsExcessDistribution,\r\n\t\t\t\tCommodityAssocDeliveryAccount,\r\n\t\t\t\tIsCommodityAccount,\r\n\t\t\t\tUtilityAccountProvider,\r\n\t\t\t\tAgencyAccount,\r\n\t\t\t\tFacilityAccount,\r\n\t\t\t\tManualDataEntry,\r\n\t\t\t\tCurrentAccountNumber,\r\n\t\t\t\tOriginalAccountNumber,\r\n\t\t\t\tAccountStatus,\r\n\t\t\t\tAccountPreviousStatus,\r\n\t\t\t\tAccountStatusCodePeriod,\r\n\t\t\t\tCurrentInvoiceAccountGroup,\r\n\t\t\t\tAccountEffectiveTurnOn,\r\n\t\t\t\tAccountEffectiveTurnOff,\r\n\t\t\t\tEnergySource,\r\n\t\t\t\tEnergyAccountDescription,\r\n\t\t\t\tEnergyDeliverySubTypeId,\r\n\t\t\t\tSalesType,\r\n\t\t\t\tDeliveryTariffRate,\r\n\t\t\t\tDeliveryTariffEffectiveDate,\r\n\t\t\t\tCommodityTariffRate,\r\n\t\t\t\tCommodityTariffEffectiveDate,\r\n\t\t\t\tBillingCycle,\r\n\t\t\t\tDelivery,\r\n\t\t\t\tAccountInMultipleBuildings,\r\n\t\t\t\tSourceOfRevenue,\r\n\t\t\t\tTurnOnDate,\r\n\t\t\t\tTurnOffDate,\r\n\t\t\t\tIsTimeOfDayAccount,\r\n\t\t\t\tTerritory,\r\n\t\t\t\tTripNumber,\r\n\t\t\t\tUtilityServiceAccountName,\r\n\t\t\t\tUtilityServiceAddress,\r\n\t\t\t\tBorough,Block,LotNumber,CityPlanningBIN,ELOAgencyAddress,\r\n\t\t\t\tLastPeriodOriginalBilled,LastPeriodAdjustmentBilled,LastZeroDollarsBillingPeriod,\r\n\t\t\t\tAdjustmentRecordSeqid,Notes,AuthenticatedUserID,DateAdded,LastUpdate)\r\n\t\t\tSELECT DISTINCT A.ExcessDistributionAssocEnergyAccount,\r\n\t\t\t\t@No,\r\n\t\t\t\tA.CommodityAssocDeliveryAccount,\r\n\t\t\t\t@No,\r\n\t\t\t\tG.UtilityCompanyId,\r\n\t\t\t\t@UnknownAgencySeqid,\r\n\t\t\t\t@UnknownFacilitySeqid,\r\n\t\t\t\t@ManualDataEntry,\r\n\t\t\t\tG.CurrentAccountNumber,\r\n\t\t\t\tG.CurrentAccountNumber,\r\n\t\t\t\t@ExchangeCode,\r\n\t\t\t\t@PreviousStatus,\r\n\t\t\t\t@CurrentBillingPeriod,\r\n\t\t\t\tG.AccountBillingGroup,\r\n\t\t\t\tG.AccountEffectiveTurnOn,\r\n\t\t\t\t@TurnOffDate,\r\n\t\t\t\tG.EnergyDeliveryType,\r\n\t\t\t\tG.KWHAccountDescription,\r\n\t\t\t\t7,\r\n\t\t\t\tG.SalesType,\r\n\t\t\t\tG.DeliveryServiceClass,\r\n\t\t\t\tG.DeliveryServiceClassEffectiveDate,\r\n\t\t\t\tG.ProductionServiceClass,\r\n\t\t\t\tG.ProductionServiceClassEffectiveDate,\r\n\t\t\t\tG.BillingCycle,\r\n\t\t\t\t@Yes,\r\n\t\t\t\t@No,\r\n\t\t\t\t@No,\r\n\t\t\t\t@CurrentBillingPeriod,\r\n\t\t\t\t@TurnOffPeriod,\r\n\t\t\t\tG.TODAccount,\r\n\t\t\t\tA.Territory,\r\n\t\t\t\tG.TripNumber,\r\n\t\t\t\tG.AccountName,\r\n\t\t\t\tG.AccountAddress,\r\n\t\t\t\tA.Borough,A.Block,A.LotNumber,A.CityPlanningBIN,A.ELOAgencyAddress,A.LastPeriodOriginalBilled,\r\n\t\t\t\tA.LastPeriodAdjustmentBilled,A.LastZeroDollarsBillingPeriod,\r\n\t\t\t\tA.AdjustmentRecordSeqid,A.Notes,@AuthenticatedUserID,GETDATE(),GETDATE()\r\n\t\t\tFROM Billing.Account AS A INNER JOIN Gas.UploadCommonElectronicGasExchangeData AS G\r\n\t\t\t\tON A.CurrentAccountNumber = G.CurrentAccountNumber AND A.OriginalAccountNumber = G.CurrentAccountNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid AND A.UtilityAccountProvider = @UtilityCompanySeqid;\r\n\r\n\t\t\t-- Get the Account sequence id after it is inserted \r\n\t\t\tSELECT @AccountSeqid = ident_current('Billing.Account');\r\n\t\tEND;\r\n\t\t\t\t\r\n\t\tIF (NOT EXISTS(SELECT DISTINCT *, EM.UtilityCompanySeqid\r\n\t\t\tFROM Billing.AccountExchangeMeterTrack AS EM INNER JOIN Gas.UploadCommonElectronicGasExchangeData AS G\r\n\t\t\t\tON EM.OriginalAccountNumber = G.CurrentAccountNumber AND EM.OriginalMeterNumber = G.CurrentMeterNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid))\r\n\t\tBEGIN\r\n\t\t\t----Create new meter based upon the exchange data,create default values to be modified at a later date if necessary and use the meter variables default values for columns that \r\n\t\t\t---- are initially unknown.  The account sequence id  (@AccountSeqid) is passed to the meter insertion to link the account to the meter without having to join the account table to the meter and \r\n\t\t\t---- and exchange table.\r\n\r\n\t\t\tIF (NOT EXISTS(SELECT * FROM Billing.Meter AS M INNER JOIN Gas.UploadCommonElectronicGasExchangeData AS G\r\n\t\t\t\t\tON M.OriginalAccountNumber = G.CurrentAccountNumber AND M.CurrentMeterNumber = G.CurrentMeterNumber\r\n\t\t\t\t\t\tAND M.OriginalMeterNumber = G.CurrentMeterNumber\r\n\t\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid))\r\n\t\t\tBEGIN\r\n\t\t\t\tINSERT INTO Billing.Meter\r\n\t\t\t\t\t(UtilityServiceAddress,\r\n\t\t\t\t\tOriginalAccountNumber,CurrentMeterNumber,\r\n\t\t\t\t\tOriginalMeterNumber,\r\n\t\t\t\t\tTension,\r\n\t\t\t\t\tIsOECDefinedMeter,\r\n\t\t\t\t\tIsUploadProcessed,\t\t\t\t  \r\n\t\t\t\t\tIsMeterUsageTracked,\r\n\t\t\t\t\tEnergySource,\r\n\t\t\t\t\tEnergyAccountDescription,\r\n\t\t\t\t\tMeterStatus,MeterPreviousStatus,\r\n\t\t\t\t\tMeterStatusCodePeriod,\r\n\t\t\t\t\tAgencyELOMeterLocation,\r\n\t\t\t\t\tUtilityAddressMeterLocation,\r\n\t\t\t\t\tMeterSquareFootageCoverage,\r\n\t\t\t\t\tTurnOnDate,\r\n\t\t\t\t\tTurnOffDate,\r\n\t\t\t\t\tMeterEffectiveOnDate,\r\n\t\t\t\t\tMeterEffectiveOffDate,\r\n\t\t\t\t\tMeterType,\r\n\t\t\t\t\tMeterDials,\r\n\t\t\t\t\tMeterConstant,\r\n\t\t\t\t\tLastPeriodOriginalBilled,\r\n\t\t\t\t\tLastPeriodAdjustmentBilled,\r\n\t\t\t\t\tLastZeroUsageBillingPeriod,\r\n\t\t\t\t\tAdjustmentRecordSeqid,\r\n\t\t\t\t\tNotes,\r\n\t\t\t\t\tAuthenticatedUserID,\r\n\t\t\t\t\tDateAdded,\r\n\t\t\t\t\tLastUpdate)\r\n\t\t\t\tSELECT\r\n\t\t\t\t\tG.AccountAddress,\r\n\t\t\t\t\tG.CurrentAccountNumber,\r\n\t\t\t\t\tG.CurrentMeterNumber,\r\n\t\t\t\t\tG.CurrentMeterNumber,\r\n\t\t\t\t\tG.MeterTension,\r\n\t\t\t\t\tM.IsOECDefinedMeter,\r\n\t\t\t\t\tM.IsUploadProcessed,\r\n\t\t\t\t\tM.IsMeterUsageTracked,\r\n\t\t\t\t\tM.EnergySource,\r\n\t\t\t\t\tM.EnergyAccountDescription,\r\n\t\t\t\t\t@ExchangeCode,\r\n\t\t\t\t\t@PreviousStatus,\r\n\t\t\t\t\t@CurrentBillingPeriod,\r\n\t\t\t\t\tM.AgencyELOMeterLocation,\r\n\t\t\t\t\tM.UtilityAddressMeterLocation,\r\n\t\t\t\t\tM.MeterSquareFootageCoverage,\r\n\t\t\t\t\t@CurrentBillingPeriod,\r\n\t\t\t\t\t@TurnOffPeriod,\r\n\t\t\t\t\tG.MeterEffectiveTurnOnDate,\r\n\t\t\t\t\t@TurnOffDate,\r\n\t\t\t\t\tG.MeterType,\r\n\t\t\t\t\tG.MeterNumberofDials,\r\n\t\t\t\t\tG.MeterConstant,\r\n\t\t\t\t\tM.LastPeriodOriginalBilled,\r\n\t\t\t\t\tM.LastPeriodAdjustmentBilled,\r\n\t\t\t\t\tM.LastZeroUsageBillingPeriod,\r\n\t\t\t\t\tM.AdjustmentRecordSeqid,\r\n\t\t\t\t\tM.Notes,\r\n\t\t\t\t\t@AuthenticatedUserID,\r\n\t\t\t\t\tGETDATE(),\r\n\t\t\t\t\tGETDATE()\r\n\t\t\t\tFROM Billing.AccountExchangeMeterTrack AS EM INNER JOIN Billing.Meter AS M ON EM.OriginalMeterSeqid = M.MeterSeqid\r\n\t\t\t\t\tRIGHT JOIN Gas.UploadCommonElectronicGasExchangeData AS G ON EM.OriginalAccountNumber = G.CurrentAccountNumber\r\n\t\t\t\t\t\tAND EM.OriginalMeterNumber = G.CurrentMeterNumber\r\n\t\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\t\t\t\t--Get the Meter sequence id after it is inserted\r\n\t\t\t\tSELECT @MeterSeqid = ident_current('Billing.Meter');\r\n\t\t\tEND;\r\n                            \r\n\t\t\t--  Insert the new account or existing account and new meter combination\r\n\t\t\tINSERT INTO Billing.AccountExchangeMeterTrack\r\n\t\t\t\t(UtilityCompanySeqid,OriginalAgencyDivisionSeqid,OriginalFacilitySeqid,OriginalAccountSeqid,OriginalMeterSeqid,OriginalAccountNumber,\r\n\t\t\t\tOriginalMeterNumber,AuthenticatedUserID,DateAdded,LastUpdate)\r\n\t\t\tSELECT A.UtilityAccountProvider,A.AgencyAccount,A.FacilityAccount,A.AccountSeqid,\r\n\t\t\t\tM.MeterSeqid,M.OriginalAccountNumber,M.OriginalMeterNumber,@AuthenticatedUserID,GETDATE(),GETDATE()\r\n\t\t\tFROM \r\n\t\t\t\tBilling.Meter AS M INNER JOIN Gas.UploadCommonElectronicGasExchangeData AS G ON M.OriginalAccountNumber = G.CurrentAccountNumber\r\n\t\t\t\t\tAND M.OriginalMeterNumber = G.CurrentMeterNumber\r\n\t\t\t\tINNER JOIN Billing.Account AS A ON M.OriginalAccountNumber = A.OriginalAccountNumber\r\n\t\t\tWHERE G.UploadCommonElectronicGasExchangeDataSeqid =  @ExchangeSeqid;\r\n\r\n\t\t\t--AccountExchangeMeterTrack\r\n\t\t\t-- Get the AccountExchangeMeterTrack sequence id after it is inserted\r\n\t\t\tSELECT @AccountExchangeMeterTrack = ident_current('Billing.AccountExchangeMeterTrack');\r\n\t\tEND;\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}