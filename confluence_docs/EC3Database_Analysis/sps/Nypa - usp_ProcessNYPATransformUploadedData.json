{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessNYPATransformUploadedData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessNYPATransformUploadedData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and transform uploaded data related to billing and account information for a utility company. It performs a series of data manipulations, including truncating existing tables, inserting transformed data from preload tables into target tables, and executing additional stored procedures to further process the data. The procedure is part of a larger data processing workflow within the NYPA (New York Power Authority) database schema."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple data transformations and insertions across various tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes numerous data type conversions and calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It interacts with several tables and stored procedures, indicating a complex data flow."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure handles a large number of columns and data points, which increases the complexity of understanding and maintaining the code."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter represents the ID of the authenticated user executing the procedure. It is used to track changes and insertions made by this user."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This output parameter is used to return the execution status of the procedure. A value of "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " indicates success, while "
                },
                {
                  "type": "text",
                  "text": "9",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " indicates failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncation of Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by truncating several tables ("
                },
                {
                  "type": "text",
                  "text": "UploadNYPAAccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UploadNYPAExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UploadNYPACoverSheet",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", etc.) to prepare them for new data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It inserts data from preload tables into the corresponding target tables. This involves:"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Casting and converting data types to ensure compatibility."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Using functions like "
                        },
                        {
                          "type": "text",
                          "text": "ISNULL",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "CAST",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to handle null values and ensure correct data types."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Calculating derived fields, such as "
                        },
                        {
                          "type": "text",
                          "text": "MaxBilledDemandUsage",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "CancelMaxBilledDemandUsage",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Execution of Additional Procedures",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure calls other stored procedures ("
                },
                {
                  "type": "text",
                  "text": "usp_ProcessNYPATransformEncoreData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "usp_ProcessNypaAddReactivePowerData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") to further process the data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Status Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure sets the "
                },
                {
                  "type": "text",
                  "text": "@StatusCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to indicate successful execution."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncation Overhead",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Frequent truncation of tables can lead to performance issues, especially if the tables are large. It also resets the identity columns, which might not be desirable in all cases."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Type Conversions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Extensive use of "
                },
                {
                  "type": "text",
                  "text": "CAST",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "ISNULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " functions can impact performance, particularly if the data volume is high."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Index Rebuilding",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating tables and reseeding identities may require index rebuilding, which can be resource-intensive."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not include explicit transaction handling, which could lead to concurrency issues if multiple instances are executed simultaneously."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Loss",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating tables without backing up data can lead to data loss if the procedure is executed unintentionally."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks error handling mechanisms, which means any runtime errors could cause the procedure to fail without providing detailed feedback."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the data volume grows, the performance of the procedure may degrade due to the extensive data manipulation and lack of optimization."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the "
                },
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is correctly passed and used, but there are no checks to validate the user's permissions or roles."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses hardcoded values (e.g., "
                },
                {
                  "type": "text",
                  "text": "UtilityCompanyId = N'7'",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "), which reduces flexibility and requires code changes for different scenarios."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Nypa].[usp_ProcessNYPATransformUploadedData] @AuthenticatedUserID INT , @StatusCode INT  OUTPUT\n\r\n AS --**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  \r\n--*               \r\n--*               \r\n--*               \r\n--* Exec:         usp_ProcessNYPATransformUploadedData \r\n--*\r\n--* Parameter(s):         \r\n--*                            StatusCode  int output       \t   -  Execution Return Status \r\n--*\r\n--* Database:     OEC\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   10/17/2006\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 10/17/2006 PAH  First Version  \r\n--* 09/26/2008 MOH\r\n--* 04/07/2015 PAH Added 8 Standby and CancelStandby fields and COALESCEd relevant ones\r\n--*\t\t\t\t\t     corrected ServiceName, ServiceAddress  to AccountName, AccountAddress \r\n--* 12/14/2018 VY  Modified for UniqueAccountSeqID and UniqueMeterSeqID\r\n--* 3/21/2019  ZD  Added missing Netmetering mapping\r\n--***************************************************************************************\r\nBEGIN \r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n\r\n--************************************************************************************** \r\n--\tDeclare Cursor\r\n--**************************************************************************************\r\n--\r\n--************************************************************************************** \r\n--\tMain Processing\r\n--**************************************************************************************\r\n--\r\nTRUNCATE TABLE  Nypa.UploadNYPAAccountBilling\r\n--DBCC CHECKIDENT ('Nypa.UploadNYPAAccountBilling', RESEED,1)\r\n--\r\nINSERT  INTO Nypa.UploadNYPAAccountBilling\r\n        (UtilityCompanyId\r\n        ,AccountBillingGroup\r\n        ,CurrentAccountNumber\r\n        ,OriginalAccountNumber\r\n        ,PreviousBillingPeriod\r\n        ,BillingPeriod\r\n        ,RevisedBillingPeriod\r\n        ,NextBillingPeriod\r\n        ,BillCreationDate\r\n        ,BillingAction\r\n        ,FromDate\r\n        ,ToDate\r\n        ,BillingAmount\r\n        ,CancelBillingAmount\r\n        ,NetBillingAmount\r\n        ,PenaltyBillingAmount\r\n        ,PenaltyPaidAmount\r\n        ,CancelPenaltyBillingAmount\r\n        ,CancelPenaltyPaidAmount\r\n        ,AccountAmount\r\n        ,FuelAdjustment\r\n        ,CommodityChargeAmount\r\n        ,CancelCommodityChargeAmount\r\n        ,DeliveryChargeAmount\r\n        ,CancelDeliveryCharge\r\n        ,DiscountAmount\r\n        ,DDDAmount\r\n        ,DDDRate\r\n        ,DeliveryEnergyAmount\r\n        ,DeliveryEnergyOffPeakAmount\r\n        ,DeliveryEnergyShoulderAmount\r\n        ,DeliveryDemandAmount\r\n        ,DeliveryDemandOffPeakAmount\r\n        ,DeliveryDemandShoulderAmount\r\n        ,DeliveryFacilityPoints\r\n        ,CommodityConsumption\r\n        ,CommodityConsumptionOffPeak\r\n        ,CommodityConsumptionShoulder\r\n        ,CommodityDemand\r\n        ,CommodityDemandOffPeak\r\n        ,CommodityDemandShoulder\r\n        ,CommodityFacilityPoints\r\n        ,GRTAmount\r\n        ,GRTRate\r\n        ,CancelAmount\r\n        ,CancelFuelAdjustmentAmount\r\n        ,CancelDiscountedAmount\r\n        ,CancelDDDAmount\r\n        ,CancelDDDRate\r\n        ,CancelDeliveryConsumption\r\n        ,CancelDeliveryConsumptionOffPeak\r\n        ,CancelDeliveryConsumptionShoulder\r\n        ,CancelDeliveryDemand\r\n        ,CancelDeliveryDemandOffPeak\r\n        ,CancelDeliveryDemandShoulder\r\n        ,CancelDeliveryStreetLightingFacilityPoints\r\n        ,CancelCommodityConsumption\r\n        ,CancelCommodityConsumptionOffPeak\r\n        ,CancelCommodityConsumptionShoulder\r\n        ,CancelCommodityDemand\r\n        ,CancelCommodityDemandOffPeak\r\n        ,CancelCommodityDemandShoulder\r\n        ,CancelCommodityStreetLightingFacilityPoints\r\n        ,CancelGRTAmount\r\n        ,CancelGRTRate\r\n        ,ProductionAndDeliveryTariff\r\n        ,AccountDemandUsage\r\n        ,AccountEnergyUsage\r\n        ,CancelAccountDemandUsage\r\n        ,CancelAccountEnergyUsage\r\n        ,IsSeasonalAccount\r\n        ,IsTimeOfDayAccount\r\n        ,AuthenticatedUserID\r\n        ,DateAdded\r\n        ,LastUpdate\r\n        ,EnergyCostAdjustment\r\n        ,EnergyCostAdjustmentPercentage\r\n        ,CancelEnergyCostAdjustment\r\n        ,CancelEnergyCostAdjustmentPercentage\r\n        ,IsMinimumBilledCharged\r\n        ,MinimumBilledEnergyDollars\r\n        ,MinimumBilledDemandDollars\r\n        ,MaxBilledDemandPeriod\r\n        ,MaxBilledDemandUsage\r\n        ,CancelIsMinimumBilledCharged\r\n        ,CancelMinimumBilledEnergyDollars\r\n        ,CancelMinimumBilledDemandDollars\r\n        ,CancelMaxBilledDemandPeriod\r\n        ,CancelMaxBilledDemandUsage\r\n        ,IsSpannedPeriodBill\r\n        ,DeliveryFacilityPointsAmount\r\n        ,CancelDeliveryFacilityPointsAmount\r\n        ,MinimumBilledDemandUsage\r\n        ,CancelMinimumBilledDemandUsage\r\n        ,IsDeliveryMinimumBilledFlag\r\n        ,DeliveryMinimumBilledAmount\r\n        ,DeliveryMinimumBilledDemand\r\n        ,CancelIsDeliveryMinimumBilledFlag\r\n        ,CancelDeliveryMinimumBilledAmount\r\n        ,CancelDeliveryMinimumBilledDemand\r\n        ,ProductionMisc1\r\n        ,ProductionMisc2\r\n        ,DeliveryMisc1\r\n        ,DeliveryMisc2\r\n        ,CancelProductionMisc1\r\n        ,CancelProductionMisc2\r\n        ,CancelDeliveryMisc1\r\n        ,CancelDeliveryMisc2\r\n        ,MinimumBilledEnergyUsage\r\n        ,CancelMinimumBilledEnergyUsage\r\n        ,DeliveryMaximumBilledDemand\r\n        ,CancelDeliveryMaximumBilledDemand\r\n        ,ContractNumber\r\n        ,StandbyContractDemand\r\n        ,CancelStandbyContractDemand\r\n        ,StandbyContractDemandCharges\r\n        ,CancelStandbyContractDemandCharges\r\n        ,StandbyAsUsedDailyDemand\r\n        ,CancelStandbyAsUsedDailyDemand\r\n        ,StandbyAsUsedDailyDemandCharges\r\n        ,CancelStandbyAsUsedDailyDemandCharges\r\n\t\t  , CreditCurrentPeriod\r\n          , CancelCreditCurrentPeriod\r\n          , CreditPrecedingPeriod\r\n          , CancelCreditPrecedingPeriod\r\n          , CreditToApplySatellites\r\n          , CancelCreditToApplySatellites\r\n          , CreditFromHost\r\n          , CancelCreditFromHost\r\n          , CreditsToCarryForward\r\n          , CancelCreditsToCarryForward\r\n          , CurrentPeriodOffPeakCredit\r\n          , CancelCurrentPeriodOffPeakCredit\r\n          , CurrentPeriodOnPeakCredit\r\n          , CancelCurrentPeriodOnPeakCredit\r\n          , NetMeteredAccountFlag\r\n          , CancelNetMeteredAccountFlag\r\n          , HostNetMeteredAccountNumber\r\n          , CancelHostNetMeteredAccountNumber\r\n          , PEXCESS\r\n          , CancelPEXCESS\r\n\t\t  , BoroughCode\r\n        )\r\nSELECT  CAST(UtilityCompanyId AS INT)\r\n,       AccountBillingGroup\r\n,       CurrentAccountNumber\r\n,       OriginalAccountNumber\r\n,       dbo.CreatePreviousPeriod(BillingPeriod, 'M')\r\n,       BillingPeriod\r\n,       RevisedBillingPeriod\r\n,       NextBillingPeriod\r\n,       BillCreationDate\r\n,       BillingAction\r\n,       FromDate\r\n,       ToDate\r\n,       CAST(BillingAmount AS MONEY)\r\n,       CAST(CancelBillingAmount AS MONEY)\r\n,       CAST(NetBillingAmount AS MONEY)\r\n,       CAST(PenaltyBillingAmount AS MONEY)\r\n,       CAST(PenaltyPaidAmount AS MONEY)\r\n,       CAST(CancelPenaltyBillingAmount AS MONEY)\r\n,       CAST(CancelPenaltyPaidAmount AS MONEY)\r\n,       CAST(AccountAmount AS MONEY)\r\n,       CAST(FuelAdjustment AS MONEY)\r\n,       CAST(CommodityChargeAmount AS MONEY)\r\n,       CAST(CancelCommodityChargeAmount AS MONEY)\r\n,       CAST(DeliveryChargeAmount AS MONEY)\r\n,       CAST(CancelDeliveryCharge AS MONEY)\r\n,       CAST(DiscountAmount AS MONEY)\r\n,       CAST(DDDAmount AS MONEY)\r\n,       CAST(DDDRate AS NUMERIC(8, 6))\r\n,       CAST(DeliveryEnergyAmount AS MONEY)\r\n,       CAST(DeliveryEnergyOffPeakAmount AS MONEY)\r\n,       CAST(DeliveryEnergyShoulderAmount AS MONEY)\r\n,       CAST(DeliveryDemandAmount AS MONEY)\r\n,       CAST(DeliveryDemandOffPeakAmount AS MONEY)\r\n,       CAST(DeliveryDemandShoulderAmount AS MONEY)\r\n,       CAST(DeliveryFacilityPoints AS MONEY)\r\n,       CAST(CommodityConsumption AS MONEY)\r\n,       CAST(CommodityConsumptionOffPeak AS MONEY)\r\n,       CAST(CommodityConsumptionShoulder AS MONEY)\r\n,       CAST(CommodityDemand AS MONEY)\r\n,       CAST(CommodityDemandOffPeak AS MONEY)\r\n,       CAST(CommodityDemandShoulder AS MONEY)\r\n,       CAST(CommodityFacilityPoints AS MONEY)\r\n,       CAST(GRTAmount AS MONEY)\r\n,       CAST(GRTRate AS NUMERIC(8, 6))\r\n,       CAST(CancelAmount AS MONEY)\r\n,       CAST(CancelFuelAdjustmentAmount AS MONEY)\r\n,       CAST(CancelDiscountedAmount AS MONEY)\r\n,       CAST(CancelDDDAmount AS MONEY)\r\n,       CAST(CancelDDDRate AS NUMERIC(8, 6))\r\n,       CAST(CancelDeliveryConsumption AS MONEY)\r\n,       CAST(CancelDeliveryConsumptionOffPeak AS MONEY)\r\n,       CAST(CancelDeliveryConsumptionShoulder AS MONEY)\r\n,       CAST(CancelDeliveryDemand AS MONEY)\r\n,       CAST(CancelDeliveryDemandOffPeak AS MONEY)\r\n,       CAST(CancelDeliveryDemandShoulder AS MONEY)\r\n,       CAST(CancelDeliveryStreetLightingFacilityPoints AS MONEY)\r\n,       CAST(CancelCommodityConsumption AS MONEY)\r\n,       CAST(CancelCommodityConsumptionOffPeak AS MONEY)\r\n,       CAST(CancelCommodityConsumptionShoulder AS MONEY)\r\n,       CAST(CancelCommodityDemand AS MONEY)\r\n,       CAST(CancelCommodityDemandOffPeak AS MONEY)\r\n,       CAST(CancelCommodityDemandShoulder AS MONEY)\r\n,       CAST(CancelCommodityStreetLightingFacilityPoints AS MONEY)\r\n,       CAST(CancelGRTAmount AS MONEY)\r\n,       CAST(CancelGRTRate AS NUMERIC(8, 6))\r\n,       ProductionAndDeliveryTariff\r\n,       CAST(AccountDemandUsage AS NUMERIC(12, 2))\r\n,       CAST(AccountEnergyUsage AS INT)\r\n,       CAST(CancelAccountDemandUsage AS NUMERIC(12, 2))\r\n,       CAST(CancelAccountEnergyUsage AS INT)\r\n,       IsSeasonalAccount\r\n,       IsTimeOfDayAccount\r\n,       1\r\n,       GETDATE()\r\n,       GETDATE()\r\n,       CAST(EnergyCostAdjustment AS MONEY)\r\n,       CAST(EnergyCostAdjustmentPercentage AS NUMERIC(8, 6))\r\n,       CAST(CancelEnergyCostAdjustment AS MONEY)\r\n,       CAST(CancelEnergyCostAdjustmentPercentage AS NUMERIC(8, 6))\r\n,       IsMinimumBilledCharged\r\n,       CAST(MinimumBilledEnergyDollars AS MONEY)\r\n,       CAST(MinimumBilledDemandDollars AS MONEY)\r\n,       MaxBilledDemandPeriod\r\n,       CAST(ISNULL(MinimumBilledDemandUsage, 0) AS NUMERIC(12, 2)) / .75 AS MaxBilledDemandUsage\r\n,       CancelIsMinimumBilledCharged\r\n,       CAST(CancelMinimumBilledEnergyDollars AS MONEY)\r\n,       CAST(CancelMinimumBilledDemandDollars AS MONEY)\r\n,       CancelMaxBilledDemandPeriod\r\n,       CAST(ISNULL(CancelMinimumBilledDemandUsage, 0) AS NUMERIC(12, 2))\r\n        / .75 AS CancelMaxBilledDemandUsage\r\n,       IsSpannedPeriodBill\r\n,       CAST(DeliveryFacilityPointsAmount AS MONEY)\r\n,       CAST(CancelDeliveryFacilityPointsAmount AS MONEY)\r\n,       CAST(MinimumBilledDemandUsage AS NUMERIC(12, 2))\r\n,       CAST(CancelMinimumBilledDemandUsage AS NUMERIC(12, 2))\r\n,       IsDeliveryMinimumBilledFlag\r\n,       DeliveryMinimumBilledAmount\r\n,       CAST(DeliveryMinimumBilledDemand AS NUMERIC(12, 2))\r\n,       CancelIsDeliveryMinimumBilledFlag\r\n,       CancelDeliveryMinimumBilledAmount\r\n,       CAST(CancelDeliveryMinimumBilledDemand AS NUMERIC(12, 2))\r\n,       CAST(ProductionMisc1 AS MONEY)\r\n,       CAST(ProductionMisc2 AS MONEY)\r\n,       CAST(DeliveryMisc1 AS MONEY)\r\n,       CAST(DeliveryMisc2 AS MONEY)\r\n,       CAST(CancelProductionMisc1 AS MONEY)\r\n,       CAST(CancelProductionMisc2 AS MONEY)\r\n,       CAST(CancelDeliveryMisc1 AS MONEY)\r\n,       CAST(CancelDeliveryMisc2 AS MONEY)\r\n,       CAST(MinimumBilledEnergyUsage AS INT)\r\n,       CAST(CancelMinimumBilledEnergyUsage AS INT)\r\n,       CAST(ISNULL(DeliveryMinimumBilledDemand, 0) AS NUMERIC(12, 2)) / .39 AS DeliveryMaximumBilledDemand\r\n,       CAST(ISNULL(CancelDeliveryMinimumBilledDemand, 0) AS NUMERIC(12, 2))\r\n        / .39 AS CancelDeliveryMaximumBilledDemand\r\n,       ContractNumber\r\n,       CAST(ISNULL(StandbyContractDemand, 0) AS NUMERIC(12, 2))\r\n,       CAST(ISNULL(CancelStandbyContractDemand, 0) AS NUMERIC(12, 2))\r\n,       CAST(ISNULL(StandbyContractDemandCharges, 0) AS MONEY)\r\n,       CAST(ISNULL(CancelStandbyContractDemandCharges, 0) AS MONEY)\r\n,       CAST(ISNULL(StandbyAsUsedDailyDemand, 0) AS NUMERIC(12, 2))\r\n,       CAST(ISNULL(CancelStandbyAsUsedDailyDemand, 0) AS NUMERIC(12, 2))\r\n,       CAST(ISNULL(StandbyAsUsedDailyDemandCharges, 0) AS MONEY)\r\n,       CAST(ISNULL(CancelStandbyAsUsedDailyDemandCharges, 0) AS MONEY)\r\n\t\t  , CAST(ISNULL(CreditCurrentPeriod, 0) AS MONEY)\r\n          , CAST(ISNULL(CancelCreditCurrentPeriod, 0) AS MONEY)\r\n          , CAST(ISNULL(CreditPrecedingPeriod, 0) AS MONEY)\r\n          , CAST(ISNULL(CancelCreditPrecedingPeriod, 0) AS MONEY)\r\n          , CAST(ISNULL(CreditToApplySatellites, 0) AS MONEY)\r\n          , CAST(ISNULL(CancelCreditToApplySatellites, 0) AS MONEY)\r\n          , CAST(ISNULL(CreditFromHost, 0) AS MONEY)\r\n          , CAST(ISNULL(CancelCreditFromHost, 0) AS MONEY)\r\n          , CAST(ISNULL(CreditsToCarryForward, 0) AS MONEY)\r\n          , CAST(ISNULL(CancelCreditsToCarryForward, 0) AS MONEY)\r\n          , CAST(ISNULL(CurrentPeriodOffPeakCredit, 0) AS MONEY)\r\n          , CAST(ISNULL(CancelCurrentPeriodOffPeakCredit, 0) AS MONEY)\r\n          , CAST(ISNULL(CurrentPeriodOnPeakCredit, 0) AS MONEY)\r\n          , CAST(ISNULL(CancelCurrentPeriodOnPeakCredit, 0) AS MONEY)\r\n          , NetMeteredAccountFlag\r\n          , CancelNetMeteredAccountFlag\r\n          , HostNetMeteredAccountNumber\r\n          , CancelHostNetMeteredAccountNumber\r\n          , CAST(ISNULL(PEXCESS, 0) AS MONEY)\r\n          , CAST(ISNULL(CancelPEXCESS, 0) AS MONEY)\r\n\t\t  , BoroughCode\r\nFROM Nypa.UploadNYPAAccountBillingPreload\r\nWHERE   ( UtilityCompanyId = N'7' )\r\n\r\n\r\n--\r\ntruncate table  Nypa.UploadNYPAExchangeData\r\n--DBCC CHECKIDENT ('Nypa.UploadNYPAExchangeData', RESEED,1)\r\n--\r\n\r\nINSERT  INTO Nypa.UploadNYPAExchangeData\r\n        (UtilityCompanyId\r\n        ,AccountBillingGroup\r\n        ,BillingPeriod\r\n        ,RevisededBillPeriod\r\n        ,NextBillPeriod\r\n        ,CurrentAccountNumber\r\n        ,OriginalAccountNumber\r\n        ,CurrentMeterNumber\r\n        ,OriginalMeterNumber\r\n        ,AssociatedDemandMeter\r\n        ,ExchangeCode\r\n        ,AccountStatus\r\n        ,AccountEffectiveTurnOn\r\n        ,AccountEffectiveTurnOff\r\n        ,KWHAccountDescription\r\n        ,SalesType\r\n        ,DeliveryServiceClass\r\n        ,DeliveryServiceClassEffectiveDate\r\n        ,ProductionServiceClass\r\n        ,ProductionServiceClassEffectiveDate\r\n        ,BillingCycle\r\n        ,ExcessDistributionAccount\r\n        ,TODAccount\r\n        ,MunicipalCode\r\n        ,TensionCode\r\n        ,TripNumber\r\n        ,PartsSupplied\r\n        ,AccountName\r\n        ,AccountAddress\r\n        ,Address1\r\n        ,Address2\r\n        ,Zipcode\r\n        ,City\r\n        ,State\r\n        ,Borough\r\n        ,PartSupplied\r\n        ,LegacyBuildingNumber\r\n        ,OECLegacyAddress\r\n        ,MeterStatus\r\n        ,MeterEffectiveTurnOnDate\r\n        ,MeterEffectiveTurnOffDate\r\n        ,MeterType\r\n        ,MeterNumberofDials\r\n        ,MeterConstant\r\n        ,MeterTension\r\n        ,SBMRNumber\r\n        ,PrintSequenceNumber\r\n        ,AccountServiceCode\r\n        ,TransactionEffectiveDate\r\n        ,ContractNumber\r\n        ,AMRIndicator )\r\nSELECT  UtilityCompanyId\r\n,       AccountBillingGroup\r\n,       BillingPeriod\r\n,       RevisededBillPeriod\r\n,       NextBillPeriod\r\n,       CurrentAccountNumber\r\n,       OriginalAccountNumber\r\n,       CurrentMeterNumber\r\n,       OriginalMeterNumber\r\n,       AssociatedDemandMeter\r\n,       ExchangeCode\r\n,       AccountStatus\r\n,       AccountEffectiveTurnOn\r\n,       AccountEffectiveTurnOff\r\n,       KWHAccountDescription\r\n,       SalesType\r\n,       DeliveryServiceClass\r\n,       DeliveryServiceClassEffectiveDate\r\n,       ProductionServiceClass\r\n,       ProductionServiceClassEffectiveDate\r\n,       BillingCycle\r\n,       ExcessDistributionAccount\r\n,       TODAccount\r\n,       MunicipalCode\r\n,       TensionCode\r\n,       TripNumber\r\n,       PartsSupplied\r\n,       AccountName\r\n,       AccountAddress\r\n,       Address1\r\n,       Address2\r\n,       Zipcode\r\n,       City\r\n,       [State]\r\n,       Borough\r\n,       PartSupplied\r\n,       LegacyBuildingNumber\r\n,       OECLegacyAddress\r\n,       MeterStatus\r\n,       MeterEffectiveTurnOnDate\r\n,       MeterEffectiveTurnOffDate\r\n,       MeterType\r\n,       CAST(MeterNumberofDials AS INT)\r\n,       MeterConstant\r\n,       MeterTension\r\n,       SBMRNumber\r\n,       PrintSequenceNumber\r\n,       AccountServiceCode\r\n,       TransactionEffectiveDate\r\n,       ContractNumber\r\n,       ISNULL(AMRIndicator, ' ')\r\nFROM Nypa.UploadNYPAExchangeDataPreload\r\nWHERE   ( UtilityCompanyId = N'7' )\r\nORDER BY CurrentAccountNumber, TransactionEffectiveDate;\r\n--\r\n--\r\n--\r\n        INSERT  INTO Nypa.UploadNYPAExchangeDataBeforeDcasCorrections\r\n                (UtilityCompanyId\r\n                ,AccountBillingGroup\r\n                ,BillingPeriod\r\n                ,RevisededBillPeriod\r\n                ,NextBillPeriod\r\n                ,CurrentAccountNumber\r\n                ,OriginalAccountNumber\r\n                ,CurrentMeterNumber\r\n                ,OriginalMeterNumber\r\n                ,AssociatedDemandMeter\r\n                ,ExchangeCode\r\n                ,AccountStatus\r\n                ,AccountEffectiveTurnOn\r\n                ,AccountEffectiveTurnOff\r\n                ,KWHAccountDescription\r\n                ,SalesType\r\n                ,DeliveryServiceClass\r\n                ,DeliveryServiceClassEffectiveDate\r\n                ,ProductionServiceClass\r\n                ,ProductionServiceClassEffectiveDate\r\n                ,BillingCycle\r\n                ,ExcessDistributionAccount\r\n                ,TODAccount\r\n                ,MunicipalCode\r\n                ,TensionCode\r\n                ,TripNumber\r\n                ,PartsSupplied\r\n                ,AccountName\r\n                ,AccountAddress\r\n                ,Address1\r\n                ,Address2\r\n                ,Zipcode\r\n                ,City\r\n                ,State\r\n                ,Borough\r\n                ,PartSupplied\r\n                ,LegacyBuildingNumber\r\n                ,OECLegacyAddress\r\n                ,MeterStatus\r\n                ,MeterEffectiveTurnOnDate\r\n                ,MeterEffectiveTurnOffDate\r\n                ,MeterType\r\n                ,MeterNumberofDials\r\n                ,MeterConstant\r\n                ,MeterTension\r\n                ,SBMRNumber\r\n                ,PrintSequenceNumber\r\n                ,AccountServiceCode\r\n                ,TransactionEffectiveDate\r\n                ,IsProcessed\r\n                ,authenticatedUserID\r\n                ,DateAdded\r\n                ,LastUpdate\r\n                ,ContractNumber\r\n                ,AMRIndicator\r\n\r\n\t\t\t\t)\r\n        SELECT  UtilityCompanyId\r\n        ,       AccountBillingGroup\r\n        ,       BillingPeriod\r\n        ,       RevisededBillPeriod\r\n        ,       NextBillPeriod\r\n        ,       CurrentAccountNumber\r\n        ,       OriginalAccountNumber\r\n        ,       CurrentMeterNumber\r\n        ,       OriginalMeterNumber\r\n        ,       AssociatedDemandMeter\r\n        ,       ExchangeCode\r\n        ,       AccountStatus\r\n        ,       AccountEffectiveTurnOn\r\n        ,       AccountEffectiveTurnOff\r\n        ,       KWHAccountDescription\r\n        ,       SalesType\r\n        ,       DeliveryServiceClass\r\n        ,       DeliveryServiceClassEffectiveDate\r\n        ,       ProductionServiceClass\r\n        ,       ProductionServiceClassEffectiveDate\r\n        ,       BillingCycle\r\n        ,       ExcessDistributionAccount\r\n        ,       TODAccount\r\n        ,       MunicipalCode\r\n        ,       TensionCode\r\n        ,       TripNumber\r\n        ,       PartsSupplied\r\n        ,       AccountName\r\n        ,       AccountAddress\r\n        ,       Address1\r\n        ,       Address2\r\n        ,       Zipcode\r\n        ,       City\r\n        ,       State\r\n        ,       Borough\r\n        ,       PartSupplied\r\n        ,       LegacyBuildingNumber\r\n        ,       OECLegacyAddress\r\n        ,       MeterStatus\r\n        ,       MeterEffectiveTurnOnDate\r\n        ,       MeterEffectiveTurnOffDate\r\n        ,       MeterType\r\n        ,       MeterNumberofDials\r\n        ,       MeterConstant\r\n        ,       MeterTension\r\n        ,       SBMRNumber\r\n        ,       PrintSequenceNumber\r\n        ,       AccountServiceCode\r\n        ,       TransactionEffectiveDate\r\n        ,       IsProcessed\r\n        ,       authenticatedUserID\r\n        ,       DateAdded\r\n        ,       LastUpdate\r\n        ,       ContractNumber\r\n        ,       ISNULL(AMRIndicator, ' ')\r\n        FROM Nypa.UploadNYPAExchangeData\r\n--\r\n--\r\n--\r\ntruncate table  Nypa.UploadNYPACoverSheet\r\n--DBCC CHECKIDENT ('Nypa.UploadNYPACoverSheet', RESEED,1)\r\n--\r\n\r\n\r\ninsert  into Nypa.UploadNYPACoverSheet\r\n        ( CoverSheetUtilityCompany ,\r\n          CoverSheetAccountBillingGroup ,\r\n          CoverSheetRecordType ,\r\n          CoverSheetRecordDesc ,\r\n          BillingPeriod ,\r\n          EnergyKilowattHours ,\r\n          DemandCommodityKilowatts ,\r\n          DemandDeliveryKilowatts ,\r\n          ConsumptionCommodityDollars ,\r\n          ConsumptionDeliveryDollars ,\r\n          TotalDollars ,\r\n          PrintSequenceNumber ,\r\n          GrossReceiptTaxDollars ,\r\n          CancelEnergyKilowattHours ,\r\n          CancelConsumptionCommodityDollars ,\r\n          CancelConsumptionDeliveryDollars ,\r\n          CancelGrossReceiptTaxDollars ,\r\n          NetEnergyKilowattHours ,\r\n          NetConsumptionDeliveryDollars ,\r\n          NetGrossReceiptTaxDollars ,\r\n          EnergyCostAdjustmentDollars ,\r\n          CancelEnergyCostAdjustmentDollars ,\r\n          NetEnergyCostAdjustmentDollars ,\r\n          MinimumBilledDemandDollars ,\r\n          CancelMinimumBilledDemandDollars ,\r\n          NetMinimumBilledDemandDollars ,\r\n          MiscellaneousCharges ,\r\n          CancelDemandCommodityKilowatts ,\r\n          CancelDemandDeliveryKilowatts ,\r\n          NetDemandCommodityKilowatts ,\r\n          NetDemandDeliveryKilowatts ,\r\n          AuthenticatedUserID ,\r\n          DateAdded ,\r\n          LastUpdate ,\r\n          NetConsumptionCommodityDollars ,\r\n          MinimumBilledDeliveryDollars ,\r\n          CancelMinimumBilledDeliveryDollars ,\r\n          NetMinimumBilledDeliveryDollars,\r\n\t\tStandbyContractDemand,\r\n\t\tCancelStandbyContractDemand,\r\n\t\tNetStandbyContractDemand,\r\n\t\tStandbyAsUsedDailyDemand,\r\n\t\tCancelStandbyAsUsedDailyDemand,\r\n\t\tNetBilledStandbyAsUsedDailyDemand\r\n        )\r\n        select  CoverSheetUtilityCompany ,\r\n                CoverSheetAccountBillingGroup ,\r\n                CoverSheetRecordType ,\r\n                CoverSheetRecordDesc ,\r\n                BillingPeriod ,\r\n                EnergyKilowattHours ,\r\n                DemandCommodityKilowatts ,\r\n                DemandDeliveryKilowatts ,\r\n                cast(ConsumptionCommodityDollars as money) ,\r\n                cast(ConsumptionDeliveryDollars as money) ,\r\n                cast(TotalDollars as money) ,\r\n                PrintSequenceNumber ,\r\n                cast(GrossReceiptTaxDollars as money) ,\r\n                cast(CancelEnergyKilowattHours as int) ,\r\n                cast(CancelConsumptionCommodityDollars as money) ,\r\n                cast(CancelConsumptionDeliveryDollars as money) ,\r\n                cast(CancelGrossReceiptTaxDollars as money) ,\r\n                cast(NetEnergyKilowattHours as int) ,\r\n                cast(NetConsumptionDeliveryDollars as money) ,\r\n                cast(NetGrossReceiptTaxDollars as money) ,\r\n                cast(EnergyCostAdjustmentDollars as money) ,\r\n                cast(CancelEnergyCostAdjustmentDollars as money) ,\r\n                cast(NetEnergyCostAdjustmentDollars as money) ,\r\n                cast(MinimumBilledDemandDollars as money) ,\r\n                cast(CancelMinimumBilledDemandDollars as money) ,\r\n                cast(NetMinimumBilledDemandDollars as money) ,\r\n                MiscellaneousCharges ,\r\n                cast(CancelDemandCommodityKilowatts as numeric(12, 2)) ,\r\n                cast(CancelDemandDeliveryKilowatts as numeric(12, 2)) ,\r\n                cast(NetDemandCommodityKilowatts as numeric(12, 2)) ,\r\n                cast(NetDemandDeliveryKilowatts as numeric(12, 2)) ,\r\n                1 ,\r\n                getdate() ,\r\n                getdate() ,\r\n                cast(NetConsumptionCommodityDollars as money) ,\r\n                cast(MinimumBilledDeliveryDollars as money) ,\r\n                cast(CancelMinimumBilledDeliveryDollars as money) ,\r\n                cast(NetMinimumBilledDeliveryDollars as money),\r\n\t\t\tcast(isnull(StandbyContractDemand,0) as numeric(12, 2)) ,\r\n\t\t\tcast(isnull(CancelStandbyContractDemand,0) as numeric(12, 2)) ,\r\n\t\t\tcast(isnull(NetStandbyContractDemand,0) as numeric(12, 2)) ,\r\n\t\t\tcast(isnull(StandbyAsUsedDailyDemand,0) as numeric(12, 2)) ,\r\n\t\t\tcast(isnull(CancelStandbyAsUsedDailyDemand,0) as numeric(12, 2)) ,\r\n\t\t\tcast(isnull(NetBilledStandbyAsUsedDailyDemand,0) as numeric(12, 2)) \r\n        FROM Nypa.UploadNYPACoverSheetPreload\r\n        where   ( CoverSheetUtilityCompany = N'7' )\r\n--\r\n--\r\n--\r\n--\r\n--Truncate table  NYPA.UploadNYPAEncoreMonthlyBilling\r\n--DBCC CHECKIDENT ('NYPA.UploadNYPAEncoreMonthlyBilling', RESEED,1)\r\n--\r\n--\r\n--Truncate table Nypa.UploadNYPAMeterBillingTemporary\r\ntruncate table Nypa.UploadNYPAMeterBilling\r\n--\r\n--DBCC CHECKIDENT ('Nypa.UploadNYPAMeterBilling', RESEED,1)\r\n--\r\ninsert  into Nypa.UploadNYPAMeterBilling\r\n        ( UtilityCompanySeqid ,\r\n          AccountBillingGroup ,\r\n          PreviousBillingPeriod ,\r\n          BillingPeriod ,\r\n          RevisedBillingPeriod ,\r\n          NextBillingPeriod ,\r\n          IsOriginalBilling ,\r\n          CurrentAccountNumber ,\r\n          OriginalAccountNumber ,\r\n          CurrentMeter ,\r\n          OrginalMeter ,\r\n          AssociatedDemandMeter ,\r\n          AccountExchangeMeterTrackSeqid ,\r\n          MeterSeqid ,\r\n          MeterStatus ,\r\n          MeterPreviousStatus ,\r\n          MeterStatusCodePeriod ,\r\n          ExchangeCode ,\r\n          MeterConstant ,\r\n          MeterTensionCode ,\r\n          NumberOfDials ,\r\n          RecordTypeConsumption ,\r\n          RecordTypeDemand ,\r\n          OrderedReadingCodePairs ,\r\n          ConsumptionReadingCode ,\r\n          DemandReadingCode ,\r\n          MeterType ,\r\n          FromDate ,\r\n          ToDate ,\r\n          ProductionServiceClass ,\r\n          ProductionServiceClassEffectiveDate ,\r\n          Consumption ,\r\n          ConsumptionFromReading ,\r\n          ConsumptionToReading ,\r\n          ConsumptionHoursOffPeak ,\r\n          ConsumptionHoursShoulder ,\r\n          Demand ,\r\n          DemandFromReading ,\r\n          DemandToReading ,\r\n          DemandOffPeak ,\r\n          DemandShoulder ,\r\n          StreetLightingFacilityPoints ,\r\n          CancelFromDate ,\r\n          CancelToDate ,\r\n          CancelConsumption ,\r\n          CancelConsumptionFromReading ,\r\n          CancelConsumptionToReading ,\r\n          CancelConsumptionHoursOffPeak ,\r\n          CancelConsumptionHoursShoulder ,\r\n          CancelDemand ,\r\n          CancelDemandToReading ,\r\n          CancelDemandFromReading ,\r\n          CancelDemandOffPeak ,\r\n          CancelDemandShoulder ,\r\n          CancelStreetLightingFacilityPoints ,\r\n          ProductionAndDeliveryTariff ,\r\n          ReadingTypes ,\r\n          CurrentBillingDays ,\r\n          AdjustmentBillingDays ,\r\n          ConsumptionToReadingDate ,\r\n          ConsumptionFromReadingDate ,\r\n          DemandToReadingDate ,\r\n          DemandFromReadingDate ,\r\n          PostingDate ,\r\n          IsUploadProcessed ,\r\n          ESTOrACT ,\r\n          IsTimeOfDayAccount ,\r\n          AuthenticatedUserID ,\r\n          LastUpdate ,\r\n          DateAdded , \r\n          AccountName,\r\n          AccountAddress ,\r\n          MeterLocation ,\r\n          BilledDemand ,\r\n          CancelBilledDemand ,\r\n          IsSpannedPeriodBill,\r\n          ContractNumber,\r\n\t\t AMRIndicator\r\n\t\t)\r\n        select  cast(UtilityCompanySeqid as varchar(1)) ,\r\n                cast(AccountBillingGroup as varchar(1)) ,\r\n                null ,\r\n                cast(BillingPeriod as varchar(6)) ,\r\n                cast(RevisedBillingPeriod as varchar(6)) ,\r\n                null ,\r\n                case when BillingPeriod = RevisedBillingPeriod then 'Y' else 'N' end ,--IsOriginalBilling\r\n                cast(CurrentAccountNumber as varchar(15)) ,\r\n                cast(OriginalAccountNumber as varchar(15)) ,\r\n                cast(CurrentMeter as varchar(12)) ,\r\n                cast(OrginalMeter as varchar(12)) ,\r\n                null ,\r\n                null ,\r\n                null ,\r\n                null ,\r\n                null ,\r\n                null ,\r\n                null ,\r\n                cast(MeterConstant as varchar(5)) ,\r\n                cast(MeterTensionCode as varchar(1)) ,\r\n                cast(NumberOfDials as varchar(1)) ,\r\n                cast(RecordTypeConsumption as varchar(1)) ,\r\n                cast(RecordTypeDemand as varchar(1)) ,\r\n                [dbo].[CreateSpecificReadingCodePairedOrder](RecordTypeConsumption,\r\n                                                             RecordTypeDemand,\r\n                                                             ConsumptionReadingCode,\r\n                                                             DemandReadingCode) ,\r\n                cast(ConsumptionReadingCode as varchar(2)) ,\r\n                cast(DemandReadingCode as varchar(2)) ,\r\n                cast(MeterType as varchar(1)) ,\r\n                cast(FromDate as varchar(8)) ,\r\n                cast(ToDate as varchar(8)) ,\r\n                cast(ProductionServiceClass as varchar(3)) ,\r\n                cast(ProductionServiceClassEffectiveDate as varchar(8)) ,\r\n                cast(Consumption as int) ,\r\n                cast(ConsumptionFromReading as int) ,\r\n                cast(ConsumptionToReading as int) ,\r\n                cast(ConsumptionHoursOffPeak as int) ,\r\n                cast(ConsumptionHoursShoulder as int) ,\r\n                cast(Demand as numeric(12, 2)) ,\r\n                cast(DemandFromReading as numeric(12, 2)) ,\r\n                cast(DemandToReading as numeric(12, 2)) ,\r\n                cast(DemandOffPeak as numeric(12, 2)) ,\r\n                cast(DemandShoulder as numeric(12, 2)) ,\r\n                cast(cast(StreetLightingFacilityPoints as numeric(8, 2)) as int) ,\r\n                cast(CancelFromDate as varchar(8)) ,\r\n                cast(CancelToDate as varchar(8)) ,\r\n                cast(CancelConsumption as int) ,\r\n                cast(CancelConsumptionFromReading as int) ,\r\n                cast(CancelConsumptionToReading as int) ,\r\n                cast(CancelConsumptionHoursOffPeak as int) ,\r\n                cast(CancelConsumptionHoursShoulder as int) ,\r\n                cast(CancelDemand as numeric(12, 2)) ,\r\n                cast(CancelDemandToReading as numeric(12, 2)) ,\r\n                cast(CancelDemandFromReading as numeric(12, 2)) ,\r\n                cast(CancelDemandOffPeak as numeric(12, 2)) ,\r\n                cast(CancelDemandShoulder as numeric(12, 2)) ,\r\n                cast(cast(CancelStreetLightingFacilityPoints as numeric(8, 2)) as int) ,\r\n                cast(ProductionAndDeliveryTariff as varchar(14)) ,\r\n                null ,\r\n                cast(CurrentBillingDays as int) ,\r\n                cast(AdjustmentBillingDays as int) ,\r\n                cast(ConsumptionToReadingDate as varchar(8)) ,\r\n                cast(ConsumptionFromReadingDate as varchar(8)) ,\r\n                cast(DemandToReadingDate as varchar(8)) ,\r\n                cast(DemandFromReadingDate as varchar(8)) ,\r\n                getdate() ,\r\n                'N' ,\r\n                cast(case when ESTOrACT = 'EST' then 'EST'\r\n                          else 'ACT'\r\n                     end as varchar(3)) ,\r\n                IsTimeOfDayAccount ,\r\n                1 ,\r\n                getdate() ,\r\n                getdate() ,\r\n\t\t\t\t  AccountName,\r\n\t\t\t\t  AccountAddress ,\r\n                 MeterLocation ,\r\n                cast(BilledDemand as int) ,\r\n                cast(CancelBilledDemand as int) ,\r\n                IsSpannedPeriodBill,\r\n                ContractNumber,\r\n\t\t\t   isnull(AMRIndicator, ' ')\r\n        FROM Nypa.UploadNYPAMeterBillingPreload\r\n        where   ( UtilityCompanySeqid = N'7' )\r\n--\r\n\r\n\t\t-- added 12/14/2018 update unique meter seqid information\r\n\t\tUPDATE\t Nypa.UploadNYPAMeterBilling \r\n\t\tSET  Nypa.UploadNYPAMeterBilling.UniqueMeterSeqID = Billing.Meter.UniqueMeterSeqid\r\n\t\tFROM Nypa.UploadNYPAMeterBilling INNER JOIN Billing.Meter ON  Nypa.UploadNYPAMeterBilling.MeterSeqID = Billing.Meter.MeterSeqID\r\n\t\tWHERE  Nypa.UploadNYPAMeterBilling.UniqueMeterSeqID is null\r\n--\r\ntruncate table  Nypa.UploadNypaAllActiveAccounts\r\n--DBCC CHECKIDENT ('Nypa.UploadNypaAllActiveAccounts', RESEED,1)\r\n---\r\n--\r\ninsert  into Nypa.UploadNypaAllActiveAccounts\r\n        ( UtilityCompanyId ,\r\n          BillingGroup ,\r\n          BillingPeriod ,\r\n          CurrentAccountNumber ,\r\n          CurrentDemandUsage ,\r\n          CurrentEnergyUsage ,\r\n          OriginalBilledAmount ,\r\n          ReBilledAmount ,\r\n          NetAdjustedDemandUsage ,\r\n          NetAdjustedEnergyUsage ,\r\n          NetAdjustedBilledAmount ,\r\n          TotalBilledAmount ,\r\n          IsMinimumBilledCharged ,\r\n          IsTimeOfDay ,\r\n          ServiceClassification,\r\n          IsDeliveryMinimumBilledFlag,\r\n\t\t  AccountBilledStandbyContractDemandUsage,\r\n\t\t  AccountTotalNetAdjustedStandbyContractDemandUsage,\r\n\t\t  AccountBilledStandbyAsUsedDailyDemandUsage,\r\n\t\t  AccountTotalNetAdjustedStandbyAsUsedDailyDemandUsage\r\n\r\n        )\r\n        select  UtilityCompanyId ,\r\n                BillingGroup ,\r\n                BillingPeriod ,\r\n                CurrentAccountNumber ,\r\n                cast(currentDemandUsage as numeric(12, 2)) ,\r\n                cast(currentEnergyUsage as int) ,\r\n                cast(OriginalBilledAmount as money) ,\r\n                cast(ReBilledAmount as money) ,\r\n                cast(NetAdjustedDemandUsage as numeric(12, 2)) ,\r\n                cast(NetAdjustedEnergyUsage as int) ,\r\n                cast(NetAdjustedBilledAmount as money) ,\r\n                cast(TotalBilledAmount as money) ,\r\n                IsMinimumBilledCharged ,\r\n                IsTimeOfDay ,\r\n                ServiceClassification,\r\n                IsDeliveryMinimumBilledFlag,\r\n\t\t\t\tcast(AccountBilledStandbyContractDemandUsage as numeric(12, 2)) ,\r\n\t\t\t\tcast(AccountTotalNetAdjustedStandbyContractDemandUsage as numeric(12, 2)) ,\r\n\t\t\t\tcast(AccountBilledStandbyAsUsedDailyDemandUsage as numeric(12, 2)) ,\r\n\t\t\t\tcast(AccountTotalNetAdjustedStandbyAsUsedDailyDemandUsage as numeric(12, 2)) \r\n        FROM Nypa.UploadNypaAllActiveAccountsPreload\r\n        where   CurrentAccountNumber < '999999999999999'\r\n--\r\n--\r\ntruncate table  Nypa.UploadNypaIntervalMeterData\r\n---\r\n--\r\nINSERT  INTO Nypa.UploadNypaIntervalMeterData\r\n        (\r\n\t\t\tUtilityCompanySeqid ,\r\n\t\t\tAccountBillingGroup ,\r\n\t\t\tBillingPeriod ,\r\n\t\t\tRevisedBillingPeriod ,\r\n\t\t\tCurrentAccountNumber ,\r\n\t\t\tCurrentMeterNumber ,\r\n\t\t\tAMRIndicator ,\r\n\t\t\tIntervalReadingDate,\r\n\t\t\t--IntervalReadingDateHourPeakInterval ,\r\n\t\t\tDemand ,\r\n\t\t\tCancelIntervalReadingDate ,\r\n\t\t\t--CancelIntervalReadingDateHourPeakInterval ,\r\n\t\t\tCancelDemand ,\r\n\t\t\tProductionAndDeliveryTariff ,\r\n\t\t\tESTOrACT ,\r\n\t\t\tAccountName ,\r\n\t\t\tAccountAddress ,\r\n\t\t\tContractNumber\r\n        )\r\n        SELECT \r\n\t\tUtilityCompanySeqid ,\r\n        AccountBillingGroup ,\r\n        BillingPeriod ,\r\n        RevisedBillingPeriod ,\r\n        CurrentAccountNumber ,\r\n        CurrentMeter ,\r\n        isnull(AMRIndicator, ' ') ,\r\n        CAST(IntervalReadingDate AS VARCHAR(8)) ,\r\n --       CAST(isnull(IntervalReadingDateHour,'0')+':'+isnull(IntervalReadingDateHourPeakInterval,'0') AS TIME) ,\r\n        CAST( isnull(Demand,0) AS NUMERIC(12, 2)) ,\r\n        CAST(CancelIntervalReadingDate AS VARCHAR(8)) ,\r\n --       CAST(isnull(CanceIntervalReadingDateHour,'0')+':'+isnull(CancelIntervalReadingDateHourPeakInterval,'0') AS TIME) ,\r\n        CAST( isnull(CancelDemand,0) AS NUMERIC(12, 2)) ,\r\n        ProductionAndDeliveryTariff ,\r\n        ESTOrACT ,\r\n        AccountName ,\r\n        AccountAddress ,\r\n        ContractNumber \r\n        FROM Nypa.UploadNypaIntervalMeterDataPreload\r\n        WHERE   CurrentAccountNumber < '999999999999999'\r\n--\r\n\r\n\r\nEXEC\tNypa.usp_ProcessNYPATransformEncoreData\r\n\t\t@AuthenticatedUserID = @AuthenticatedUserID,\r\n\t\t@StatusCode = @StatusCode OUTPUT\r\n--\r\n--\r\nTRUNCATE TABLE Nypa.UploadNYPAKvarAccountMeterDetail\r\n--\r\nINSERT INTO Nypa.UploadNYPAKvarAccountMeterDetail\r\n(\r\n\t\tUtilityCompanyId, AccountBillingGroup, RecordType, BillingPeriod, BillingPeriodRevision, CurrentAccountNumber, CurrentMeterNumber, \r\n\t\tBilledKvarDollars, CanceledKvarDollars, TotalNetKvarDollars, TotalBilledKvarEnergyUnit, TotalCanceledKvarEnergyUnit, TotalNetKvarEnergyUnit, \r\n\t\tMeterBilledKvarPowerFactor, MeterCanceledKvarPowerFactor, MeterBilledKvarEnergyUnit, MeterCanceledKvarEnergyUnit, MeterNetKvarEnergyUnit \r\n)\r\nSELECT    \r\n\t\tUtilityCompanyId, AccountBillingGroup, RecordType, BillingPeriod, \r\n\t\tBillingPeriodRevision, CurrentAccountNumber, CurrentMeterNumber, \r\n\t\tCAST(BilledKvarDollars AS MONEY), CAST(CanceledKvarDollars AS MONEY), CAST(TotalNetKvarDollars AS MONEY), \r\n\t\tCAST(TotalBilledKvarEnergyUnit AS NUMERIC(12,2)), CAST(TotalCanceledKvarEnergyUnit AS NUMERIC(12,2)), CAST(TotalNetKvarEnergyUnit AS NUMERIC(12,2)), \r\n\t\tCAST(MeterBilledKvarPowerFactor AS DECIMAL(8,5)), CAST(MeterCanceledKvarPowerFactor AS DECIMAL(8,5)),  \r\n\t\tCAST(MeterBilledKvarEnergyUnit AS NUMERIC(12,2)),CAST(MeterCanceledKvarEnergyUnit AS NUMERIC(12,2)), CAST(MeterNetKvarEnergyUnit AS NUMERIC(12,2))\r\nFROM \r\n\t\tNypa.UploadNYPAKvarAccountMeterDetailPreload\r\n--\r\n--\r\n--\r\n\r\n--\r\nTRUNCATE TABLE  Nypa.UploadNypaPage3CutomerLevelAllocation\r\nINSERT  INTO  Nypa.UploadNypaPage3CutomerLevelAllocation\r\n(AccountNumber, BillingPeriod, AllocationChargeDescription, CommodityAllocationCharge, DeliveryAllocationCharge, AuthenticatedUserID)\r\nSELECT AccountNumber, BillingPeriod, AllocationChargeDescription, CAST(CommodityAllocationCharge AS MONEY) AS CommodityAllocationCharge, \r\n                      CAST(DeliveryAllocationCharge AS MONEY) AS DeliveryAllocationCharge, 1 AS AuthenticatedUserID\r\nFROM Nypa.UploadNypaPage3CutomerLevelAllocationPreload\r\n\r\nEXECUTE [Nypa].[usp_ProcessNypaAddReactivePowerData] \r\n\t\t@AuthenticatedUserID = @AuthenticatedUserID,\r\n\t\t@StatusCode = @StatusCode OUTPUT\r\n\r\n--\r\n\r\nSET @StatusCode = 0\r\n--\r\nEND"
        }
      ]
    }
  ]
}