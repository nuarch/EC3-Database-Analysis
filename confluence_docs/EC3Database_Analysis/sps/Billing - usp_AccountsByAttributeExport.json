{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Billing",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_AccountsByAttributeExport",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_AccountsByAttributeExport",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to extract and export account information based on specific attributes and agency filters provided in an XML format. It processes the input XML to filter accounts from a view and joins with other tables to gather detailed account attributes. The results are then formatted and returned in a structured format, likely for reporting or data export purposes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple complex operations, including XML parsing, dynamic filtering, conditional logic, and multiple joins across several tables. It also uses temporary tables and table variables to manage intermediate data, which adds to its complexity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@ParametersXML AS XML",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This XML parameter contains search criteria, including search terms, agency codes, facility information, attributes, and user ID. It is parsed to extract these values for further processing."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to avoid locking issues and initializes several variables and a table variable to store parsed XML data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "XML Parsing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The input XML is parsed using an XML Common Table Expression (CTE) to extract search terms, agency, facility, attribute information, and user ID. This data is inserted into a table variable "
                },
                {
                  "type": "text",
                  "text": "@ParameterTbl",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Variable Assignment",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The parsed data is used to assign values to local variables, including "
                },
                {
                  "type": "text",
                  "text": "@Agencies",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "@Attributes",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "@UserId",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "@Email",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Search Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If no attributes are specified, accounts are filtered based on agency codes."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If attributes are specified, additional filtering is applied using the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountProgramAttributeType",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to match attribute criteria."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Attribute Aggregation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A table variable "
                },
                {
                  "type": "text",
                  "text": "@AccountAttributes",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is populated with aggregated attribute descriptions for each account, using nested queries and XML path aggregation."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Data Selection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure selects and formats account details, including various attributes, from the "
                },
                {
                  "type": "text",
                  "text": "Billing.uvw_AccountSearchView",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and joins with the "
                },
                {
                  "type": "text",
                  "text": "@SearchHits",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table to filter the results. The output is ordered by account number."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can improve performance by reducing locking but may lead to dirty reads."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "XML Parsing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Parsing XML can be resource-intensive, especially with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Subqueries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Multiple joins and subqueries, especially those involving large tables or views, can impact performance. Indexing on join columns can help mitigate this."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Storage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of table variables and temporary tables can consume memory and affect performance if the dataset is large."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dirty Reads",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can lead to reading uncommitted data, which might not be suitable for all business scenarios."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "XML Size Limitations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Large XML inputs can lead to performance bottlenecks or even exceed SQL Server's XML handling capabilities."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's complexity and reliance on multiple joins and subqueries may not scale well with increasing data volumes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions or incomplete transactions in case of failures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure contains hardcoded logic for specific attribute types, which may require frequent updates if business rules change."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Billing].[usp_AccountsByAttributeExport]\n(\r\n\t@ParametersXML AS XML\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE\t@Agencies AS VARCHAR(1000) = NULL, @Attributes VARCHAR(1000) = NULL, @UserId AS INT, @Email AS VARCHAR(50) = NULL;\r\n\r\n\tDECLARE @ParameterTbl TABLE\r\n\t\t(SearchTerm VARCHAR(1000) NULL,\r\n\t\tAgencies VARCHAR(1000) NULL,\r\n\t\tFacilities VARCHAR(1000) NULL,\r\n\t\tAttributes VARCHAR(1000) NULL,\r\n\t\tisAdvanceSearch BIT NULL,\r\n\t\tUserID INT NULL);\r\n\r\n\tWITH cte AS\r\n\t(SELECT\r\n\t\tp.value('SearchTerm[1]', 'varchar(200)') as SearchTerm,\r\n\t\tp.value('IsAdvanceSearch[1]', 'bit') as IsAdvanceSearch,\r\n\t\tp.query('Facility') as Facility,\r\n\t\tp.query('Agency') as Agency,\r\n\t\tp.query('Attribute') as Attribute,\r\n\t\tp.value('UserId[1]','int') as UserId\r\n\t  FROM\r\n\t\t@ParametersXML.nodes('/SearchModel') p(p))\r\n\r\n\tINSERT INTO @ParameterTbl\r\n\t\t(SearchTerm\r\n\t\t,isAdvanceSearch\r\n\t\t,Facilities\r\n\t\t,Agencies\r\n\t\t,Attributes\r\n\t\t,UserId)\r\n\tSELECT\r\n\t\tSearchTerm,\r\n\t\tIsAdvanceSearch,\r\n\t\t(SELECT d.value('.', 'varchar(100)')+',' from cte.Facility.nodes('Facility') d(d) FOR XML PATH('')) AS Facility,\r\n\t\tCASE\r\n\t\t\tWHEN (SELECT w.value('.', 'varchar(1000)')+',' FROM cte.Agency.nodes('Agency') w(w) FOR XML PATH('')) = '*,' THEN NULL\r\n\t\t\tELSE (SELECT w.value('.', 'varchar(1000)')+',' FROM cte.Agency.nodes('Agency') w(w) FOR XML PATH(''))\r\n\t\tEND AS Agency,\r\n\t\t(SELECT w.value('.', 'varchar(100)')+',' FROM cte.Attribute.nodes('Attribute') w(w)\tFOR XML PATH('')) AS Attribute,\r\n\t\tUserId\r\n\tFROM cte;\r\n\r\n\tSELECT @Agencies = '' + LEFT(Agencies, LEN(Agencies) -1) + '', @Attributes = '' + LEFT(Attributes, LEN(Attributes)-1) + '',\t@UserId = UserID FROM @ParameterTbl;\r\n\tSELECT @Email = Email FROM Membership.EC3Membership WHERE AuthenticatedUserID = @UserId;\r\n\r\n\t-- table variable to hold temp results\r\n\tDECLARE @SearchHits TABLE (UniqueAccountSeqid INT NULL, AccountSeqId INT NULL, [RowNumber] INT NULL, [RowCount] INT NULL);\r\n\t\r\n\tIF(@Attributes IS NULL)\r\n\tBEGIN\r\n\t\tINSERT INTO @SearchHits\r\n\t\t\t(UniqueAccountSeqid, \r\n\t\t    AccountSeqId, \r\n\t\t\tRowNumber, \r\n\t\t\t[RowCount])\t\t\t\t\t\t\t\r\n\t\tSELECT DISTINCT \r\n\t\t\tAV.UniqueAccountSeqid,\r\n\t\t\tAV.AccountSeqId,\r\n\t\t\tNULL RowNumber,\r\n\t\t\tNULL [RowCount]\r\n\t\tFROM Billing.uvw_AccountSearchView AS AV\r\n\t\t\tINNER JOIN ( SELECT zx.AgencyCodeOEC FROM dbo.uftn_TableGetAgencyByEmailAddressAgencyAccessAction(@Email) zx) AS fag ON AV.AgencyCodeOEC = fag.AgencyCodeOEC\t\t\t\r\n\t\tWHERE (CASE WHEN @Agencies IS NULL THEN 1 ELSE 0 END = 1) OR AV.AgencyCodeOEC IN (SELECT  Item FROM [dbo].[ufnSplit](@Agencies, ','));\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tDECLARE @Attribute TABLE (Item VARCHAR(1000));\r\n\t\tINSERT INTO @Attribute (Item) SELECT REPLACE(REPLACE(Item, 'P', ''), 'C', '') FROM dbo.ufnSplit(@Attributes, ',');\r\n\r\n\t\tINSERT INTO @SearchHits\r\n\t\t\t(UniqueAccountSeqid, \r\n\t\t    AccountSeqId, \r\n\t\t\tRowNumber, \r\n\t\t\t[RowCount])\r\n\t\tSELECT DISTINCT \r\n\t\t\tAV.UniqueAccountSeqid,\r\n\t\t\tAV.AccountSeqId,\r\n\t\t\tNULL RowNumber,\r\n\t\t\tNULL [RowCount]\r\n\t\tFROM Billing.uvw_AccountSearchView AS AV\r\n\t\t\tINNER JOIN (SELECT zx.AgencyCodeOEC FROM dbo.uftn_TableGetAgencyByEmailAddressAgencyAccessAction(@Email) zx) AS fag ON AV.AgencyCodeOEC = fag.AgencyCodeOEC\r\n\t\t\tINNER JOIN Billing.AccountProgramAttributeType AS apat ON AV.UniqueAccountSeqid = apat.AccountUniqueSeqID\t\t\t\t\t\r\n\t\tWHERE ((CASE WHEN @Agencies IS NULL THEN 1 ELSE 0 END = 1) OR AV.AgencyCodeOEC IN (SELECT Item FROM dbo.ufnSplit(@Agencies, ',')))\r\n\t\t\tAND (apat.AttributeTypeOptionSeqid IN (SELECT Item FROM @Attribute)\tOR apat.AttributeStatusOptionSeqid IN (SELECT Item FROM @Attribute));\r\n\tEND;\r\n\r\n\tDECLARE @AccountAttributes TABLE (UniqueAccountSeqid INT NOT NULL, ProgramAttributeTypeSeqid INT NOT NULL, Attributes VARCHAR(500) NULL, PRIMARY KEY (UniqueAccountSeqid, ProgramAttributeTypeSeqid));\r\n\tINSERT INTO @AccountAttributes(UniqueAccountSeqid, ProgramAttributeTypeSeqid, Attributes)\r\n\tSELECT A.UniqueAccountSeqid, AP.ProgramAttributeTypeSeqid, STUFF((SELECT ', ' + ATO.[ShortDescription]\r\n\t\tFROM Billing.AccountProgramAttributeType AS AP1  \r\n\t\t\tINNER JOIN Billing.AttributeTypeOption AS ATO ON ATO.AttributeTypeSeqid = AP1.ProgramAttributeTypeSeqid\r\n\t\t\t\tAND ATO.AttributeTypeOptionSeqid = AP1.AttributeStatusOptionSeqid\r\n\t\tWHERE A.UniqueAccountSeqid = AP1.AccountUniqueSeqID AND AP1.ProgramAttributeTypeSeqid = AP.ProgramAttributeTypeSeqid\r\n\t\tFOR XML PATH('')), 1, 2, '') AS [Attributes]\r\n\t\tFROM @SearchHits AS A\r\n\t\tINNER JOIN Billing.AccountProgramAttributeType AS AP ON A.UniqueAccountSeqid = AP.AccountUniqueSeqID\r\n\t\tWHERE AP.ProgramAttributeTypeSeqid IS NOT NULL AND AP.AttributeStatusOptionSeqid IS NOT NULL AND AP.AttributeStatusSeqid IS NULL\r\n\tGROUP BY A.UniqueAccountSeqid, AP.AccountUniqueSeqID, AP.ProgramAttributeTypeSeqid\r\n\tUNION\r\n\tSELECT A.UniqueAccountSeqid, AP.ProgramAttributeTypeSeqid, STUFF((SELECT ', ' + ATO.[ShortDescription]\r\n\t\tFROM Billing.AccountProgramAttributeType AS AP1  \r\n\t\t\tINNER JOIN Billing.AttributeTypeOption AS ATO ON ATO.AttributeTypeSeqid = AP1.ProgramAttributeTypeSeqid\r\n\t\t\t\tAND ATO.AttributeTypeOptionSeqid = AP1.AttributeTypeOptionSeqid\r\n\t\tWHERE AP1.AccountUniqueSeqID = A.UniqueAccountSeqid AND AP1.AttributeStatusSeqid = AP.AttributeStatusSeqid\r\n\t\tFOR XML PATH('')), 1, 2, '') AS [Attributes]\r\n\t\tFROM Billing.Account AS A\r\n\t\tINNER JOIN Billing.AccountProgramAttributeType AS AP ON A.UniqueAccountSeqid = AP.AccountUniqueSeqID\r\n\t\tWHERE AP.AttributeStatusSeqid IS NOT NULL AND AP.AttributeTypeOptionSeqid IS NOT NULL\r\n\tGROUP BY A.UniqueAccountSeqid, AP.ProgramAttributeTypeSeqid, AP.AttributeStatusSeqid;\r\n\t\r\n\tSELECT AV.CurrentAccountNumber AS [Account Number],\r\n\t\tAV.FacilityName AS [Facility Name],\r\n\t\tAV.FacilityAddress AS [Facility Address],\t\t\r\n\t\tAV.UtilityServiceAddress AS [Utility Service Address],\r\n\t\tAV.OecFacilityNumber AS [OEC Facility Number],\t\t\r\n\t\tAV.EnergyDeliveryType AS [Energy Type],\r\n\t\tAV.UtilityCompany AS [Utility Company],\r\n\t\tAV.DeliveryTariffRate AS [Tariff Code],\r\n\t\tAV.BudgetGroupDEMName AS [Tariff Description],\r\n\t\tAV.AgencyName AS [Agency Name],\r\n\t\tAV.AgencyCodeOEC AS [Agency Code OEC],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 5) AS [UtilityIntervalMeter],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 2) AS [DemarcationBox],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 4) AS [DistributedGenerationType],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 11) AS [NetMetered],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 1) AS [DemandResponse],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 6) AS [Real-TimeMetering],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 13) AS [High Pressure Gas],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 14) AS [AMI],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 17) AS [AMR],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 19) AS [Transportation-Electric],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 20) AS [Transportation-Other],\t\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 21) AS [Gas Reconciliation],\r\n\t\t(SELECT Attributes FROM @AccountAttributes WHERE UniqueAccountSeqid = AV.UniqueAccountSeqid AND ProgramAttributeTypeSeqid = 18) AS [Con Edison Network],\r\n\t\tAV.IsActive\t  \r\n\tFROM @SearchHits AS sh\r\n\t\tINNER JOIN Billing.uvw_AccountSearchView AS AV ON AV.AccountSeqId = sh.AccountSeqId\r\n\tORDER BY AV.CurrentAccountNumber ASC;\r\nEND;"
        }
      ]
    }
  ]
}