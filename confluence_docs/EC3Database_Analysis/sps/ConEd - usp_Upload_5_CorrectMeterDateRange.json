{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_5_CorrectMeterDateRange",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_5_CorrectMeterDateRange",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to correct date ranges and billing period information for meter records in the "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonMeter",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table. It performs updates to ensure that the date ranges for meter readings are consistent and corrects billing period information based on these date ranges. The procedure involves multiple updates to the table, focusing on adjusting the "
        },
        {
          "type": "text",
          "text": "toDate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " and "
        },
        {
          "type": "text",
          "text": "fromDate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " fields, marking records as corrected, and recalculating billing periods and related metrics."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is medium due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple nested subqueries to determine the maximum and minimum dates for updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses several user-defined functions to calculate billing periods and related metrics."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The logic involves conditional updates based on the presence of subsequent records, which adds to the complexity."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates on the entire "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonMeter",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table, applying corrections to all relevant records."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Correcting Date Ranges:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The first update ensures that for each meter, the record with the largest "
                        },
                        {
                          "type": "text",
                          "text": "fromDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " also has the largest "
                        },
                        {
                          "type": "text",
                          "text": "toDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ". If multiple records share the largest "
                        },
                        {
                          "type": "text",
                          "text": "fromDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", the one with the largest "
                        },
                        {
                          "type": "text",
                          "text": "toDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is updated to have the largest "
                        },
                        {
                          "type": "text",
                          "text": "toDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " value."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The second update adjusts the "
                        },
                        {
                          "type": "text",
                          "text": "toDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " for records where there is a subsequent meter reading. It sets the "
                        },
                        {
                          "type": "text",
                          "text": "toDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to the "
                        },
                        {
                          "type": "text",
                          "text": "fromDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " of the next reading, ensuring continuity in the date ranges."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Marking Records as Corrected:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Both updates set the "
                        },
                        {
                          "type": "text",
                          "text": "IsEC3Corrected",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " flag to 'Y' for records that have been corrected."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Correcting Billing Period Information:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "After date corrections, the procedure updates billing period information using several user-defined functions:"
                        }
                      ]
                    },
                    {
                      "type": "bulletList",
                      "content": [
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "DetermineConEdisonBillingPeriodProjected",
                                  "marks": [
                                    {
                                      "type": "code"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": ": Projects the billing period based on dates and tariff rates."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "CalculateNextBillingPeriod",
                                  "marks": [
                                    {
                                      "type": "code"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": ": Calculates the next billing period."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "CalculateDeltaBillingPeriods",
                                  "marks": [
                                    {
                                      "type": "code"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": ": Computes the difference in billing periods."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "CalculateNumberOfBillingDays",
                                  "marks": [
                                    {
                                      "type": "code"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": ": Calculates the number of billing days between "
                                },
                                {
                                  "type": "text",
                                  "text": "fromDate",
                                  "marks": [
                                    {
                                      "type": "code"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": " and "
                                },
                                {
                                  "type": "text",
                                  "text": "toDate",
                                  "marks": [
                                    {
                                      "type": "code"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": "."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure concludes by selecting a message indicating the number of meter transactions corrected."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Subquery Execution:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The use of subqueries for each record update can be resource-intensive, especially if the table contains a large number of records. Indexing on "
                },
                {
                  "type": "text",
                  "text": "AccountNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "MeterNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "fromDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "toDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can help improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The repeated invocation of user-defined functions for each record can impact performance. Consider optimizing these functions or reducing their usage if possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Scans:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " Without proper indexing, the subqueries may result in full table scans, which can degrade performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency Issues:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The procedure updates records in the "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonMeter",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table, which could lead to concurrency issues if multiple instances of the procedure run simultaneously. Implementing transaction isolation levels or locks might be necessary."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The logic assumes that the largest "
                },
                {
                  "type": "text",
                  "text": "fromDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " should always have the largest "
                },
                {
                  "type": "text",
                  "text": "toDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", which may not hold true in all scenarios. Ensure that this assumption aligns with business rules."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Dependencies:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The procedure relies on several user-defined functions. Any changes to these functions could affect the procedure's behavior and results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The procedure lacks explicit error handling. Consider adding try-catch blocks to manage potential errors during execution."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_5_CorrectMeterDateRange]\r\nAS \r\n    BEGIN\r\n\t\r\n\t\r\n\t\t/*\r\n\t\t\tFor each meter, meter record with the largest fromDate will have the largest toDate.\r\n\t\t\tIf there are more than one record with the largest fromDate, the record with the largest current toDate value and with the same fromDate will \r\n\t\t\tbe updated with the largest toDate value.\r\n\t\t*/\r\n        UPDATE  ConEd.UploadConEdisonMeter\r\n        SET     IsEC3Corrected = 'Y' ,\r\n                toDate = ( SELECT   MAX(todate)\r\n                           FROM  ConEd.UploadConEdisonMeter AS meter\r\n                           WHERE    meter.AccountNumber = ConEd.UploadConEdisonMeter.AccountNumber\r\n                                    AND meter.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n                         )\r\n        FROM ConEd.UploadConEdisonMeter -- as UploadConEdisonMeterCorrection\r\n        WHERE   fromDate = ( SELECT MAX(fromDate)\r\n                             FROM ConEd.UploadConEdisonMeter AS meter2\r\n                             WHERE  meter2.AccountNumber = ConEd.UploadConEdisonMeter.AccountNumber\r\n                                    AND meter2.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n                           )\r\n                AND toDate = ( SELECT   MAX(meter3.toDate)\r\n                               FROM  ConEd.UploadConEdisonMeter AS meter3\r\n                               WHERE    meter3.AccountNumber = ConEd.UploadConEdisonMeter.AccountNumber\r\n                                        AND meter3.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n                                        AND meter3.fromDate = ConEd.UploadConEdisonMeter.fromDate\r\n                             )\r\n\t\t\t\t\r\n\t\t--\r\n\t\t--\tAssume the meter billing range is always correct.  Problems may occur when there are splits spans\r\n\t\t--\tor just plain errors from Con Edison.  The data is corrected in the UploadConEdisonMeterUncorrected table.\r\n\t\t--\r\n        UPDATE  ConEd.UploadConEdisonMeter\r\n        SET     IsEC3Corrected = 'Y' ,\r\n                toDate = (\r\n\t\t\t\t-- \r\n\t\t\t\t-- Finding the minimum from date for the account and meter combination and the todate is equal to\r\n\t\t\t\t-- the fromdate of the next meter reading\r\n\t\t\t\t-- \r\n                           SELECT   MIN(Fromdate)\r\n                           FROM  ConEd.UploadConEdisonMeter AS t2\r\n                           WHERE    t2.FromDate > ConEd.UploadConEdisonMeter.FromDate\r\n                                    AND t2.AccountNumber = ConEd.UploadConEdisonMeter.AccountNumber\r\n                                    AND t2.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n                         )\r\n        FROM ConEd.UploadConEdisonMeter -- as UploadConEdisonMeterCorrection\r\n\t\t\t-- \r\n\t\t\t-- This processes n-1 meter billing transaction for the account and meter combination and\r\n\t\t\t-- always assumes that min(from date) to the max(todate) is equal to the account billing range.\r\n\t\t\t-- Note: the nth transaction is skipped due to being correct by using \"is not null\" in the where clause.\r\n\t\t\t--\r\n        WHERE   ( SELECT    MIN(Fromdate)\r\n                  FROM   ConEd.UploadConEdisonMeter AS t2\r\n                  WHERE t2.FromDate > ConEd.UploadConEdisonMeter.FromDate\r\n                            AND t2.AccountNumber = ConEd.UploadConEdisonMeter.AccountNumber\r\n                            AND t2.MeterNumber = ConEd.UploadConEdisonMeter.MeterNumber\r\n                ) IS NOT NULL\r\n--\r\n\r\n\t\t-- After the fromdates || toDates are corrected, the billing period information need to be corrected also\r\n        UPDATE  ConEd.UploadConEdisonMeter\r\n        SET     BillingPeriodRevision = [dbo].[DetermineConEdisonBillingPeriodProjected](ToDate,\r\n                                                              [dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable](AccountNumber,\r\n                                                              BillingPeriodRevision),\r\n                                                              9) ,\r\n                FirstPeriodCanceled = [dbo].[CalculateNextBillingPeriod]([dbo].[DetermineConEdisonBillingPeriodProjected](FromDate,\r\n                                                              [dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable](AccountNumber,\r\n                                                              BillingPeriodRevision),\r\n                                                              9), 'M') ,\r\n                DeltaNumberOfPeriods = [dbo].[CalculateDeltaBillingPeriods]([dbo].[CalculateNextBillingPeriod]([dbo].[DetermineConEdisonBillingPeriodProjected](FromDate,\r\n                                                              [dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable](AccountNumber,\r\n                                                              BillingPeriodRevision),\r\n                                                              9), 'M'),\r\n                                                              [dbo].[DetermineConEdisonBillingPeriodProjected](ToDate,\r\n                                                              [dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable](AccountNumber,\r\n                                                              BillingPeriodRevision),\r\n                                                              9), 'M') ,\r\n                CycleBillingDays = dbo.[CalculateNumberOfBillingDays](FromDate,\r\n                                                              ToDate)\r\n        WHERE   IsEC3Corrected = 'Y'\r\n--\r\n        SELECT  'Number of Meter transactions corrected in the UploadConEdisonMeter table: ' ,\r\n                @@rowcount\r\n\r\n\r\n\r\n    END"
        }
      ]
    }
  ]
}