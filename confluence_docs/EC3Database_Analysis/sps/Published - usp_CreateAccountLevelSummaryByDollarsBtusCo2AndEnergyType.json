{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Published",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CreateAccountLevelSummaryByDollarsBtusCo2AndEnergyType",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CreateAccountLevelSummaryByDollarsBtusCo2AndEnergyType",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to generate a comprehensive summary of energy usage and costs at various organizational levels (citywide, agency, facility) for a specified billing period. It aggregates data on billed amounts, CO2 emissions, and energy usage (measured in BTUs) and inserts this summarized data into the "
        },
        {
          "type": "text",
          "text": "Published.AccountLevelSummaryForDollarsBtusAndCo2",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table. The procedure processes data for different breakdowns, such as citywide, by agency, by facility, and by energy type, and updates running totals for CO2 emissions."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to its extensive use of nested queries, multiple joins, and the calculation of running totals. It involves several steps of data aggregation and transformation, and it updates multiple fields in the target table based on various conditions."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(256)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is used to filter data based on the user's access rights, determining which agencies or facilities the user can access."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This output parameter is intended to return the status of the procedure execution, although it is not explicitly set within the procedure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Current Billing Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure starts by selecting the current processing period from the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Citywide Summary",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It inserts aggregated data for the entire city, calculating totals for billed amounts, CO2, and BTUs."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Agency Summary",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It processes data at the agency level, using the user's email to filter accessible agencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Facility Summary",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It aggregates data at the facility level, again filtered by user access."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Energy Type Summary",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It further breaks down data by energy type, both citywide and by agency."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Running Totals",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure updates running totals for CO2 emissions using custom functions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Enrichment",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It updates the summary table with additional details like agency and facility names and addresses from raw data."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins and Aggregations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple joins and aggregations, which can be resource-intensive, especially with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of scalar functions for calculating running totals can be a performance bottleneck due to their row-by-row execution nature."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing on the tables involved, especially on columns used in joins and where clauses, can significantly improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the data volume is large, consider breaking the procedure into smaller batches to reduce transaction size and lock contention."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure performs multiple updates and inserts, which could lead to locking issues in a high-concurrency environment."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": There is no explicit error handling within the procedure, which could lead to unhandled exceptions and incomplete data processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data grows, the complexity and resource demands of the procedure may increase, potentially leading to longer execution times."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on email-based access control, which should be carefully managed to prevent unauthorized data access."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output Parameter",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@StatusCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " output parameter is not utilized, which could be a missed opportunity for communicating execution status or errors."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Published].[usp_CreateAccountLevelSummaryByDollarsBtusCo2AndEnergyType]\n(\r\n\t@EmailAddress AS VARCHAR(256)\r\n\t,@StatusCode AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tDECLARE @PublishedBillingPeriod AS VARCHAR(6), @PriorFiscalYearStartPeriod AS VARCHAR(6);\r\n\r\n\tSELECT @PublishedBillingPeriod = BillingPeriod\r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y';\r\n\r\n\t---- MB - 20180709 \r\n\t---- Codes for the breakdown inserted into the table below\r\n\t---- CW - by Citywide\r\n\t---- CE - by Citywide by Energy type\r\n\t---- AE - by Agency by Energy type\r\n\t---- FE - by Agency by facility by Energy type\r\n\t---- FA - by Agency by facility \r\n\t---- AG - by agency\r\n\r\n\tPRINT 'Started at: '+ CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Published.AccountLevelSummaryForDollarsBtusAndCo2 ...................';\r\n\tINSERT INTO Published.AccountLevelSummaryForDollarsBtusAndCo2  \r\n        (CitywideAgencyOrFacility, PublishedBillingPeriod, FiscalYear, BillingPeriod, EnergyType, AgencyCodeOEC\r\n\t\t,FacilityNumber, TotalBilledAmount, TotalCO2, TotalBTU, PublishedBillingPeriodRunningTotalCO2\r\n\t\t,YtdRunningTotalCO2,AuthenticatedUserID, [Month], CurrentFiscalYear, PriorFiscalYear, EnergyUsage, DemandUsage)\r\n\tSELECT  'CW', btu.PublishedBillingPeriod, btu.FiscalYear, btu.BillingPeriod, 'BTU' AS EnergyType\r\n\t\t,NULL AS AgencyCode, NULL\tAS FacilityNumber, btu.TotalBilledAmount, btu.TotalCO2, btu.TotalBTU\r\n\t\t,co2.PublishedBillingPeriodRunningTotalCO2, YtdRunningTotalCO2, 1 AS AuthenticatedUserID\r\n\t\t,DATENAME(MM, btu.BillingPeriod + '01'), dbo.CreateFiscalYear(btu.BillingPeriod, 'C')\r\n\t\t,dbo.CreateFiscalYear(btu.BillingPeriod, 'P'), btu.EnergyUsage, btu.DemandUsage\r\n\tFROM (SELECT DISTINCT PublishedBillingPeriod, BillingPeriod, FiscalYear\r\n\t\t\t,Factors.RunningTotalCO2ByCityWide('P', PublishedBillingPeriod, FiscalYear, BillingPeriod) AS PublishedBillingPeriodRunningTotalCO2\r\n\t\t\t,Factors.RunningTotalCO2ByCityWide('Y', PublishedBillingPeriod, FiscalYear, BillingPeriod) AS YtdRunningTotalCO2\r\n\t\tFROM Published.AccountLevelSummaryByCityWide\r\n\t\tWHERE PublishedBillingPeriod = @PublishedBillingPeriod) AS co2\r\n\t\tINNER JOIN (SELECT PublishedBillingPeriod, BillingPeriod, FiscalYear, SUM(BilledAmount) AS TotalBilledAmount\r\n\t\t\t\t,SUM(BTU) AS TotalBTU, SUM(co2) AS TotalCO2, SUM(BTU) AS EnergyUsage, 0 AS DemandUsage\r\n\t\t\tFROM Published.AccountLevelSummaryByCityWide\r\n\t\t\tGROUP BY PublishedBillingPeriod, BillingPeriod, FiscalYear\r\n\t\t\tHAVING PublishedBillingPeriod = @PublishedBillingPeriod) AS btu\r\n\t\t\t\tON co2.PublishedBillingPeriod = btu.PublishedBillingPeriod\r\n\t\t\t\tAND co2.BillingPeriod = btu.BillingPeriod\r\n\t\t\t\tAND co2.FiscalYear = btu.FiscalYear\r\n\tORDER BY btu.BillingPeriod DESC;\t\t\t\t\r\n\r\n\tPRINT 'Started at: '+ CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Published.AccountLevelSummaryForDollarsBtusAndCo2 ...................';\r\n\tINSERT INTO Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n\t\t(CitywideAgencyOrFacility, PublishedBillingPeriod, FiscalYear, BillingPeriod,EnergyType, AgencyCodeOEC, \r\n\t\tFacilityNumber, TotalBilledAmount, TotalCO2, TotalBTU, PublishedBillingPeriodRunningTotalCO2, YtdRunningTotalCO2,AuthenticatedUserID,\r\n\t\t[Month], CurrentFiscalYear , PriorFiscalYear,EnergyUsage,DemandUsage)\r\n\tSELECT 'AG' AS CitywideAgencyOrFacility, btu.PublishedBillingPeriod, btu.FiscalYear, btu.BillingPeriod\r\n\t\t,'BTU' AS EnergyType, btu.AgencyCodeOEC, NULL AS FacilityNumber, btu.TotalBilledAmount, btu.TotalCO2\r\n\t\t,btu.TotalBTU, co2.PublishedBillingPeriodRunningTotalCO2, co2.YtdRunningTotalCO2, 1 AS AuthenticatedUserID\r\n\t\t,DATENAME(MM, btu.BillingPeriod + '01'), dbo.CreateFiscalYear(btu.BillingPeriod, 'C')\r\n\t\t,dbo.CreateFiscalYear(btu.BillingPeriod, 'P'), btu.EnergyUsage, btu.DemandUsage\r\n\tFROM (SELECT DISTINCT S.PublishedBillingPeriod, S.BillingPeriod, S.FiscalYear, S.AgencyCodeOEC\r\n\t\t\t,Factors.RunningTotalCO2ByAgency('P', S.PublishedBillingPeriod, S.FiscalYear, S.BillingPeriod, S.AgencyName) AS PublishedBillingPeriodRunningTotalCO2\r\n\t\t\t,Factors.RunningTotalCO2ByAgency('Y', S.PublishedBillingPeriod, S.FiscalYear, S.BillingPeriod, S.AgencyName) AS YtdRunningTotalCO2\r\n\t\tFROM Published.AccountLevelSummaryByAgency AS S\r\n\t\t\tINNER JOIN dbo.uftn_TableGetAgencyByEmailAddressAgencyAccessAction(@EmailAddress) AS A\r\n\t\t\t\tON S.AgencyCodeOEC = A.AgencyCodeOEC\t\t\t\t\t\t\t\t\r\n\t\tWHERE PublishedBillingPeriod = @PublishedBillingPeriod) AS co2\r\n\t\tINNER JOIN (SELECT MIN(S.PublishedBillingPeriod) AS PublishedBillingPeriod, S.BillingPeriod, \r\n\t\t\t\tS.FiscalYear, S.AgencyCodeOEC, \r\n\t\t\t\tSUM(S.BilledAmount) AS TotalBilledAmount, SUM(S.BTU) \r\n\t\t\t\tAS TotalBTU, SUM(S.CO2) AS TotalCO2,SUM(S.BTU) AS EnergyUsage,0 AS DemandUsage\r\n\t\t\tFROM Published.AccountLevelSummaryByAgency AS S\r\n\t\t\t\tINNER JOIN dbo.uftn_TableGetAgencyByEmailAddressAgencyAccessAction(@EmailAddress) AS A ON \r\n\t\t\t\t\tS.AgencyCodeOEC = A.AgencyCodeOEC\r\n\t\t\tGROUP BY S.PublishedBillingPeriod, S.BillingPeriod, S.FiscalYear, S.AgencyCodeOEC\r\n\t\t\tHAVING PublishedBillingPeriod = @PublishedBillingPeriod) AS btu\r\n\t\t\tON co2.PublishedBillingPeriod = btu.PublishedBillingPeriod AND co2.BillingPeriod = btu.BillingPeriod\r\n\t\t\t\tAND co2.FiscalYear = btu.FiscalYear AND co2.AgencyCodeOEC = btu.AgencyCodeOEC\r\n\tWHERE btu.AgencyCodeOEC LIKE '%'\r\n\tORDER BY btu.BillingPeriod DESC;\r\n\r\n\tUPDATE Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n\tSET PublishedBillingPeriodRunningTotalCO2 = Factors.RunningTotalCO2ByAgency('P',PublishedBillingPeriod,FiscalYear, BillingPeriod,AgencyCodeOEC)\r\n\t\t,YtdRunningTotalCO2 = Factors.RunningTotalCO2ByAgency('Y',PublishedBillingPeriod,FiscalYear, BillingPeriod,AgencyCodeOEC)\r\n\tWHERE PublishedBillingPeriod = @PublishedBillingPeriod AND CitywideAgencyOrFacility = 'AG';\r\n\r\n\tPRINT 'Started at: '+ CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Published.AccountLevelSummaryForDollarsBtusAndCo2 ...................';\r\n\tINSERT INTO Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n\t\t(CitywideAgencyOrFacility, PublishedBillingPeriod, FiscalYear, BillingPeriod,EnergyType,AgencyCodeOEC, \r\n\t\tFacilityNumber, TotalBilledAmount, TotalCO2, TotalBTU, PublishedBillingPeriodRunningTotalCO2, YtdRunningTotalCO2,AuthenticatedUserID,\r\n\t\t[Month], CurrentFiscalYear , PriorFiscalYear,EnergyUsage,DemandUsage)\r\n\tSELECT 'FA', F.PublishedBillingPeriod, F.FiscalYear, F.BillingPeriod, 'BTU' AS EnergyType, \r\n\t\tF.AgencyCodeOEC, F.OecFacilityNumber, SUM(F.BilledAmount) AS TotalBilledAmount, \r\n\t\tSUM(F.CO2) AS TotalCO2,SUM(F.BTU) AS TotalBTU,0.0 AS PublishedBillingPeriodRunningTotalCO2,\r\n\t\t0.0 AS YtdRunningTotalCO2,1 AS AuthenticatedUserID,datename(MM,F.BillingPeriod+'01') , [dbo].[CreateFiscalYear] (F.BillingPeriod,'C'), [dbo].[CreateFiscalYear] ( F.BillingPeriod,'P'),\r\n\t\tSUM(F.BTU) AS EnergyUsage,0 AS DemandUsage\r\n\tFROM Published.AccountLevelSummaryByFacility AS F\r\n\t\tINNER JOIN dbo.uftn_TableGetAgencyFacilityByEmailAddressAccessAction(@EmailAddress) AS A\r\n\t\t\tON F.OecFacilityNumber = A.OecFacilityNumber\t\t\t\t\t\t\r\n\tGROUP BY PublishedBillingPeriod, BillingPeriod, FiscalYear, F.AgencyCodeOEC,F.OecFacilityNumber\r\n\tHAVING PublishedBillingPeriod = @PublishedBillingPeriod;\r\n\r\n\tUPDATE Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n\tSET PublishedBillingPeriodRunningTotalCO2 = Factors.RunningTotalCO2ByFacility('P',PublishedBillingPeriod,FiscalYear, BillingPeriod,AgencyCodeOEC, FacilityNumber),\r\n\t\tYtdRunningTotalCO2 = Factors.RunningTotalCO2ByFacility('Y',PublishedBillingPeriod,FiscalYear, BillingPeriod,AgencyCodeOEC, FacilityNumber)\r\n\tWHERE PublishedBillingPeriod = @PublishedBillingPeriod AND CitywideAgencyOrFacility = 'FA';\r\n\t\t\t\r\n\tPRINT 'Started at: '+ CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Published.AccountLevelSummaryForDollarsBtusAndCo2 ...................';\r\n\tINSERT INTO Published.AccountLevelSummaryForDollarsBtusAndCo2  \r\n      (CitywideAgencyOrFacility, PublishedBillingPeriod, FiscalYear, BillingPeriod, AgencyCodeOEC, \r\n      FacilityNumber, TotalBilledAmount, TotalCO2, TotalBTU, PublishedBillingPeriodRunningTotalCO2, YtdRunningTotalCO2,AuthenticatedUserID\r\n      ,[Month], CurrentFiscalYear , PriorFiscalYear,EnergyType,EnergyUsage,DemandUsage)\r\n\tSELECT 'CE' AS CitywideAgencyOrFacility, F.PublishedBillingPeriod, F.FiscalYear, F.BillingPeriod, \r\n\t\tnull AS AgencyCodeOEC, null AS OecFacilityNumber, SUM(F.BilledAmount) AS TotalBilledAmount, \r\n\t\tSUM(F.CO2) AS TotalCO2,SUM(F.BTU) AS TotalBTU,0.0 AS PublishedBillingPeriodRunningTotalCO2,\r\n\t\t0.0 AS YtdRunningTotalCO2,1 AS AuthenticatedUserID,datename(MM,F.BillingPeriod+'01') , \r\n\t\t[dbo].[CreateFiscalYear] (F.BillingPeriod,'C'), \r\n\t\t[dbo].[CreateFiscalYear] ( F.BillingPeriod,'P'),F.EnergyType,\r\n\t\tsum(F.EnergyUsage) AS EnergyUsage,sum(isnull(F.DemandUsage,0)) AS DemandUsage\r\n\tFROM Published.AccountLevelSummaryByFacility AS F\r\n\t\tINNER JOIN dbo.uftn_TableGetAgencyFacilityByEmailAddressAccessAction(@EmailAddress) AS A ON \r\n\t\tF.OecFacilityNumber = A.OecFacilityNumber\t\t\t\t\t\t\r\n\tGROUP BY PublishedBillingPeriod, BillingPeriod, FiscalYear, EnergyType\r\n\tHAVING PublishedBillingPeriod = @PublishedBillingPeriod\r\n\tORDER BY BillingPeriod DESC;\r\n\r\n\tUPDATE Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n\tSET PublishedBillingPeriodRunningTotalCO2 = Factors.RunningTotalCO2ByCityWideEnergyType('P',PublishedBillingPeriod,FiscalYear, BillingPeriod,EnergyType),\r\n\t\tYtdRunningTotalCO2 = Factors.RunningTotalCO2ByCityWideEnergyType('Y',PublishedBillingPeriod,FiscalYear, BillingPeriod,EnergyType)\r\n\tWHERE PublishedBillingPeriod = @PublishedBillingPeriod AND CitywideAgencyOrFacility = 'CE';\r\n\r\n\tPRINT 'Started at: '+ CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Published.AccountLevelSummaryForDollarsBtusAndCo2 ...................';\r\n\tINSERT INTO Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n\t\t(CitywideAgencyOrFacility, PublishedBillingPeriod, FiscalYear, BillingPeriod, AgencyCodeOEC, \r\n\t\tFacilityNumber, TotalBilledAmount, TotalCO2, TotalBTU, PublishedBillingPeriodRunningTotalCO2, YtdRunningTotalCO2,AuthenticatedUserID,\r\n\t\t[Month], CurrentFiscalYear , PriorFiscalYear,EnergyType,EnergyUsage,DemandUsage)\r\n\tSELECT 'AE', F.PublishedBillingPeriod, F.FiscalYear, F.BillingPeriod, \r\n\t\tF.AgencyCodeOEC, null AS OecFacilityNumber, SUM(F.BilledAmount) AS TotalBilledAmount, \r\n\t\tSUM(F.CO2) AS TotalCO2,SUM(F.BTU) AS TotalBTU,0.0 AS PublishedBillingPeriodRunningTotalCO2,\r\n\t\t0.0 AS YtdRunningTotalCO2,1 AS AuthenticatedUserID,datename(MM,F.BillingPeriod+'01') , \r\n\t\t[dbo].[CreateFiscalYear] (F.BillingPeriod,'C'), [dbo].[CreateFiscalYear] ( F.BillingPeriod,'P'),\r\n\t\tF.EnergyType,sum(EnergyUsage) AS  EnergyUsage,sum(isnull(DemandUsage,0)) AS DemandUsage\r\n\tFROM Published.AccountLevelSummaryByFacility AS F\r\n\t\tINNER JOIN dbo.uftn_TableGetAgencyFacilityByEmailAddressAccessAction(@EmailAddress) AS A ON \r\n\t\t\tF.OecFacilityNumber = A.OecFacilityNumber\t\t\t\t\t\t\r\n\tGROUP BY PublishedBillingPeriod, BillingPeriod, FiscalYear, F.AgencyCodeOEC,EnergyType\r\n\tHAVING PublishedBillingPeriod = @PublishedBillingPeriod\r\n\tORDER BY BillingPeriod DESC;\r\n\r\n\tUPDATE  Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n\tSET PublishedBillingPeriodRunningTotalCO2 = Factors.RunningTotalCO2ByAgencyEnergyType('P',PublishedBillingPeriod,FiscalYear, BillingPeriod,AgencyCodeOEC,EnergyType),\r\n\t\tYtdRunningTotalCO2 = Factors.RunningTotalCO2ByAgencyEnergyType('Y',PublishedBillingPeriod,FiscalYear, BillingPeriod,AgencyCodeOEC,EnergyType)\r\n\tWHERE PublishedBillingPeriod = @PublishedBillingPeriod and CitywideAgencyOrFacility = 'AE';\r\n\r\n\tPRINT 'Started at: '+ CAST(GETDATE() AS VARCHAR(23))\r\n\tPRINT 'Loading Published.AccountLevelSummaryForDollarsBtusAndCo2 ...................'\r\n\tINSERT INTO Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n\t\t(CitywideAgencyOrFacility, PublishedBillingPeriod, FiscalYear, BillingPeriod, AgencyCodeOEC, \r\n\t\tFacilityNumber, TotalBilledAmount, TotalCO2, TotalBTU, PublishedBillingPeriodRunningTotalCO2, YtdRunningTotalCO2,AuthenticatedUserID,\r\n\t\tMonth, CurrentFiscalYear , PriorFiscalYear,EnergyType,EnergyUsage,DemandUsage)\r\n\tSELECT 'FE', F.PublishedBillingPeriod, F.FiscalYear, F.BillingPeriod, \r\n\t\tF.AgencyCodeOEC, F.OecFacilityNumber, SUM(F.BilledAmount) AS TotalBilledAmount, \r\n\t\tSUM(F.CO2) AS TotalCO2,SUM(F.BTU) AS TotalBTU,0.0 AS PublishedBillingPeriodRunningTotalCO2,\r\n\t\t0.0 AS YtdRunningTotalCO2,1 AS AuthenticatedUserID,datename(MM,F.BillingPeriod+'01') , \r\n\t\t[dbo].[CreateFiscalYear] (F.BillingPeriod,'C'), [dbo].[CreateFiscalYear] ( F.BillingPeriod,'P'),\r\n\t\tF.EnergyType,\r\n\t\tsum(EnergyUsage) AS  EnergyUsage,sum(isnull(DemandUsage,0)) AS DemandUsage\r\n\tFROM Published.AccountLevelSummaryByFacility AS F\r\n\t\tINNER JOIN dbo.uftn_TableGetAgencyFacilityByEmailAddressAccessAction(@EmailAddress) AS A ON \r\n\t\tF.OecFacilityNumber = A.OecFacilityNumber\t\t\t\t\t\t\r\n\tGROUP BY PublishedBillingPeriod, BillingPeriod, FiscalYear, F.AgencyCodeOEC,F.OecFacilityNumber,EnergyType\r\n\tHAVING PublishedBillingPeriod = @PublishedBillingPeriod;\r\n\r\n\tUPDATE Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n\tSET PublishedBillingPeriodRunningTotalCO2 = Factors.RunningTotalCO2ByFacilityEnergyType('P', PublishedBillingPeriod, FiscalYear, BillingPeriod, AgencyCodeOEC, FacilityNumber, EnergyType)\r\n\t\t,YtdRunningTotalCO2 = Factors.RunningTotalCO2ByFacilityEnergyType('Y', PublishedBillingPeriod, FiscalYear, BillingPeriod, AgencyCodeOEC, FacilityNumber, EnergyType)\r\n\tWHERE PublishedBillingPeriod = @PublishedBillingPeriod AND CitywideAgencyOrFacility = 'FE';\r\n\r\n\tUPDATE Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n\tSET PublishedPeriodCurrentFiscalYear = dbo.CreateFiscalYear(PublishedBillingPeriod, 'C')\r\n\t\t,PublishedPeriodPriorFiscalYear = dbo.CreateFiscalYear(PublishedBillingPeriod, 'P')\r\n\tWHERE PublishedBillingPeriod = @PublishedBillingPeriod;\r\n\r\n\tUPDATE C\r\n\tSET C.AgencyName = A.AgencyName, C.FacilityName = A.FacilityName, C.Address1 = A.Address1,\r\n\t\tC.Borough = A.Borough, C.[Block] = A.[Block], C.LotNumber = A.LotNumber, C.CityPlanningBIN = A.CityPlanningBIN\r\n\tFROM Published.AccountLevelRawDataForCurrentPeriod AS A\r\n\t\tINNER JOIN Published.AccountLevelSummaryForDollarsBtusAndCo2 AS C\r\n\t\t\tON A.PublishedBillingPeriod = C.PublishedBillingPeriod AND A.BillingPeriod = C.BillingPeriod\r\n\t\t\tAND A.AgencyCodeOEC = C.AgencyCodeOEC AND A.OecFacilityNumber = C.FacilityNumber\r\n\tWHERE C.CitywideAgencyOrFacility LIKE 'F%'\r\n\t\tAND\tA.PublishedBillingPeriod = @PublishedBillingPeriod;\r\n\r\n\tRETURN(0);\r\nEND;"
        }
      ]
    }
  ]
}