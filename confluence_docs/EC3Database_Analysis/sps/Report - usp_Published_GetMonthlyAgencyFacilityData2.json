{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Published_GetMonthlyAgencyFacilityData2",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Published_GetMonthlyAgencyFacilityData2",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to generate a report of monthly energy usage and costs for facilities associated with a specific agency. It retrieves data from various tables, processes it, and outputs a pivoted report showing energy costs and usage metrics for different billing periods. The procedure logs its usage, handles user permissions, and dynamically constructs a SQL query to pivot the data for reporting purposes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to its dynamic SQL generation, use of temporary tables, multiple conditional logic branches, and the need to handle various types of energy data. It involves multiple joins, aggregations, and a pivot operation, which increases its complexity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The email address of the user requesting the report. Used for logging and permission checks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The billing period for which the report is generated. It can be overridden if the user is an agency user."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AgencyCodeOEC AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The code representing the agency for which the data is being retrieved."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@OecFacilityNumber AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A list of facility numbers to filter the data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsAgencyUser BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating if the user is an agency user, which affects how the billing period is determined."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Sets the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to avoid locking issues and initializes the procedure name for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Period Adjustment",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the user is an agency user, the billing period is set to the current processing period from the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Calls an audit procedure to log the report usage with details about the request."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Facility Data Preparation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Creates a temporary table "
                        },
                        {
                          "type": "text",
                          "text": "@FacilityData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to store facility information."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Populates this table by joining "
                        },
                        {
                          "type": "text",
                          "text": "Published.TemporalAccountLevelRawDataForCurrentPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " with a function that retrieves facility numbers based on the agency hierarchy."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Periods Collection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Constructs a comma-separated list of billing periods up to the specified "
                },
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Aggregation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Uses a Common Table Expression (CTE) "
                        },
                        {
                          "type": "text",
                          "text": "AllReportData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to aggregate energy usage and cost data."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Includes multiple UNION ALL queries to handle different types of energy data and calculate total costs and usage."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Pivoting",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts the aggregated data into a temporary table "
                        },
                        {
                          "type": "text",
                          "text": "#AllReportDataTemp",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Constructs a dynamic SQL query to pivot the data on billing periods, creating a report format."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Execution",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Executes the dynamic SQL if data exists in the temporary table."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If no data is found, returns basic facility information with zeroed parameters."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic SQL",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of dynamic SQL for pivoting can be resource-intensive and may affect performance, especially with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While reducing locking, this isolation level can lead to dirty reads, potentially affecting data accuracy."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of temporary tables can impact performance, particularly if the data volume is high."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins and Aggregations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Multiple joins and aggregations can be computationally expensive, affecting query execution time."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can lead to reading uncommitted data, which might not be accurate."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic SQL Risks",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": SQL injection risks if input parameters are not properly sanitized, although this is mitigated by the controlled environment of stored procedures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may not scale well with increasing data volumes due to its complexity and reliance on temporary tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Lack of explicit error handling mechanisms could lead to unhandled exceptions or failures during execution."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": High concurrency might lead to contention on temporary resources or affect performance due to the isolation level used."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_Published_GetMonthlyAgencyFacilityData2]\n(\r\n    @EmailAddress AS VARCHAR(75)\r\n    ,@PublishedBillingPeriod AS VARCHAR(6)\r\n    ,@AgencyCodeOEC AS VARCHAR(6)\r\n    ,@OecFacilityNumber AS VARCHAR(MAX)\r\n\t,@IsAgencyUser BIT = 0\r\n)\r\nAS \r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @spname VARCHAR(100) = OBJECT_NAME(@@PROCID);\r\n\r\n\tIF (@IsAgencyUser = 1)\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = PublishedBillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\tEND;\r\n\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t\t@ReportName = @spname,\r\n\t\t@StoredProcName = @spname,\r\n\t\t@RequestedBy = @EmailAddress,\r\n\t\t@prmPublishedBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmBillingPeriod = NULL,\r\n\t\t@prmAgency_ies = @AgencyCodeOEC,\r\n\t\t@prmFacilityNumber_s = @OecFacilityNumber,\r\n\t\t@prmStartingBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmEndingBillingPeriod = NULL;\r\n\r\n    DECLARE @FacilityData TABLE (Agency VARCHAR(75) NULL, FacilityName VARCHAR(100) NULL, FacilityAddress VARCHAR(120) NULL,\r\n\t\tOECID OECBuildingNumber NULL, AgencyCodeOEC AgencyCodeOEC NULL, Borough VARCHAR(1) NULL, [Block] VARCHAR(5) NULL,\r\n\t\tLotNumber VARCHAR(4) NULL);\r\n\t\r\n\t-- add agency based on user email permission\r\n    INSERT INTO @FacilityData(Agency, FacilityName, FacilityAddress, OECID, AgencyCodeOEC, Borough, [Block], LotNumber)\r\n\tSELECT FD.AgencyName, FD.FacilityName, FD.Address1, FD.OecFacilityNumber, FD.AgencyCodeOEC, MAX(TA.Borough) AS Borough,\r\n        MAX(TA.[Block]) AS [Block], MAX(TA.LotNumber) AS LotNumber\r\n\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n\t\tINNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCodeOEC, @OecFacilityNumber, @EmailAddress) AS FD ON TA.OecFacilityNumber = FD.OecFacilityNumber AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n\tGROUP BY FD.AgencyName, FD.FacilityName, FD.Address1, FD.OecFacilityNumber, FD.AgencyCodeOEC\r\n\tORDER BY FD.OecFacilityNumber;\t\r\n\r\n\t-- to pivot billing period\r\n\tDECLARE @BillingPeriods AS VARCHAR(MAX);\r\n\tSELECT @BillingPeriods = COALESCE(@BillingPeriods + ', ','') + QUOTENAME(BillingPeriod)\r\n\tFROM (SELECT DISTINCT BillingPeriod FROM Published.TemporalAccountLevelRawDataForCurrentPeriod \r\n\t\tWHERE BillingPeriod <= @PublishedBillingPeriod) AS B\r\n\tORDER BY B.BillingPeriod DESC\r\n\r\n\t;WITH AllReportData (PublishedBillingPeriod, BillingPeriod, FiscalYear, BillingMonth, AgencyCodeOEC, AgencyName,\r\n\t\tOecFacilityNumber, FacilityName, Address1, Borough, [Block], LotNumber, CurrentAccountNumber,\r\n\t\tCost, RevisedBilledAmount) AS\r\n\t(SELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n\t\tTA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tFD.Agency,\r\n\t\tFD.OECID,\r\n\t\tFD.FacilityName,\r\n\t\tFD.FacilityAddress,\r\n\t\tTA.Borough,\r\n\t\tTA.[Block],\r\n\t\tTA.LotNumber,\r\n\t\tTA.CurrentAccountNumber,\r\n\t\tCASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam Cost ($)' ELSE '' END AS Cost,\r\n\t\tSUM(ISNULL(CAST(TA.RevisedBilledAmount AS NUMERIC(18, 2)), 0)) AS RevisedBilledAmount\r\n    FROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod\r\n\tGROUP BY TA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tFD.Agency,\r\n\t\tFD.OECID,\r\n\t\tFD.FacilityName,\r\n\t\tFD.FacilityAddress,\r\n\t\tTA.Borough,\r\n\t\tTA.[Block],\r\n\t\tTA.LotNumber,\r\n\t\tTA.CurrentAccountNumber,\r\n\t\tCASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam Cost ($)' ELSE '' END\r\n\tUNION ALL\r\n\tSELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n\t\tTA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tMAX(FD.Agency) AS Agency,\r\n\t\tFD.OECID,\r\n\t\tMAX(FD.FacilityName) AS FacilityName,\r\n\t\tMAX(FD.FacilityAddress) AS FacilityAddress,\r\n\t\tMAX(FD.Borough) AS Borough,\r\n\t\tMAX(FD.[Block]) AS [Block],\r\n\t\tMAX(FD.LotNumber) AS LotNumber,\r\n\t\tCAST(NULL AS VARCHAR(19)) AS CurrentAccountNumber,\r\n\t\t'Total Cost ($)' AS Cost,\r\n\t\tISNULL(CAST(SUM(ISNULL(TA.RevisedBilledAmount, 0)) AS NUMERIC(18, 2)), 0) AS RevisedBilledAmount\r\n\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod\r\n    GROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.OECID\r\n    UNION ALL\r\n    SELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n        TA.BillingPeriod,\r\n        TA.FiscalYear,\r\n        TA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tFD.Agency,\r\n\t\tFD.OECID,\r\n\t\tFD.FacilityName,\r\n\t\tFD.FacilityAddress,\r\n        TA.Borough,\r\n        TA.[Block],\r\n        TA.LotNumber,\r\n        TA.CurrentAccountNumber,\r\n        CASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Demand (kW)' ELSE '' END AS Cost,\r\n        ISNULL(CAST(TA.AccountDemandUsage AS NUMERIC(18, 2)), 0) AS AccountDemandUsage\r\n    FROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod\r\n    UNION ALL    \r\n\tSELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n        TA.BillingPeriod,\r\n        TA.FiscalYear,\r\n        TA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tFD.Agency,\r\n\t\tFD.OECID,\r\n\t\tFD.FacilityName,\r\n\t\tFD.FacilityAddress,\r\n        TA.Borough,\r\n        TA.[Block],\r\n        TA.LotNumber,\r\n        TA.CurrentAccountNumber,\r\n        CASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Usage (kWh)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas (Therms)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam (MLbs)' ELSE '' END AS Cost,\r\n        ISNULL(CAST(TA.AccountEnergyUsage AS NUMERIC(18, 2)), 0) AS AccountEnergyUsage\r\n    FROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod\r\n\tUNION ALL    \r\n\tSELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n        TA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tMAX(FD.Agency) AS Agency,\r\n\t\tFD.OECID,\r\n\t\tMAX(FD.FacilityName) AS FacilityName,\r\n\t\tMAX(FD.FacilityAddress) AS FacilityAddress,\r\n\t\tMAX(FD.Borough) AS Borough,\r\n\t\tMAX(FD.[Block]) AS [Block],\r\n\t\tMAX(FD.LotNumber) AS LotNumber,\r\n\t\tCAST(NULL AS VARCHAR(19)) AS CurrentAccountNumber,\r\n\t\t'Total Usage (mmBTUs)' AS Cost,\r\n        ISNULL(CAST(ROUND(SUM(CASE WHEN TA.Energytype = 'ELE' THEN TA.AccountEnergyUsage * 0.00341297\r\n            WHEN TA.Energytype = 'GAS' THEN AccountEnergyUsage * 0.1\r\n            WHEN TA.Energytype = 'STM' THEN AccountEnergyUsage * 1.11718000 ELSE 0.0 END), 18, 2) AS NUMERIC(18, 2)), 0) AS AccountEnergyUsage\r\n\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n\t\tINNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n\tWHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod\r\n\tGROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.OECID)\r\n\r\n\tSELECT PublishedBillingPeriod\r\n        ,BillingPeriod\r\n        ,FiscalYear\r\n        ,BillingMonth\r\n        ,AgencyCodeOEC\r\n        ,AgencyName\r\n        ,OecFacilityNumber\r\n        ,FacilityName\r\n        ,Address1\r\n        ,Borough\r\n        ,[Block]\r\n        ,LotNumber\r\n        ,CurrentAccountNumber\r\n        ,Cost\r\n        ,RevisedBilledAmount \r\n\t\t,CASE WHEN Cost ='Electricity Cost ($)' THEN 5\r\n\t\t\tWHEN Cost ='Electricity Demand (kW)' THEN 3\r\n\t\t\tWHEN Cost ='Electricity Usage (kWh)' THEN 1\r\n\t\t\tWHEN Cost ='Gas (Therms)' THEN 7\r\n\t\t\tWHEN Cost ='Gas Cost ($)' THEN 9\r\n\t\t\tWHEN Cost ='Steam (MLbs)' THEN 11\r\n\t\t\tWHEN Cost ='Steam Cost ($)' THEN 13\r\n\t\t\tWHEN Cost ='Total Cost ($)' THEN 17\r\n\t\t\tWHEN Cost ='Total Usage (mmBTUs)' THEN 15\r\n\t\tELSE 0 END AS OrderNumber    \r\n\t INTO #AllReportDataTemp FROM AllReportData WHERE BillingPeriod > '200906';\r\n\r\n\tIF EXISTS(SELECT TOP (1) * FROM #AllReportDataTemp)\r\n\tBEGIN\r\n\t\tDECLARE @ReportSQL AS VARCHAR(MAX);\r\n\t\tSET @ReportSQL =  'SELECT AgencyName AS Agency, FacilityName, Address1 AS FacilityAddress, OecFacilityNumber AS OECID, Cost AS Parameter,\r\n\t\t\t\tCurrentAccountNumber, Borough, Block, LotNumber, OrderNumber, ' + @BillingPeriods + '\r\n\t\t\tFROM (SELECT PublishedBillingPeriod, AgencyName, FacilityName, Address1, OecFacilityNumber, Cost, RevisedBilledAmount,\r\n\t\t\t\t\tBillingPeriod, CurrentAccountNumber, Borough, Block, LotNumber, OrderNumber\r\n\t\t\t\tFROM #AllReportDataTemp WHERE Cost <> '''') AS PivotData\r\n\t\t\t\tPIVOT\r\n\t\t\t\t\t(MAX(RevisedBilledAmount) FOR BillingPeriod IN (' + @BillingPeriods + ')) AS PR\r\n\t\t\tORDER BY PR.OecFacilityNumber, ISNULL(PR.CurrentAccountNumber, ''99999999999999''), PR.OrderNumber';\r\n\r\n\t\tEXEC (@ReportSQL);\r\n\tEND;\r\n\tELSE    \r\n\tBEGIN\r\n\t\tSELECT Agency, FacilityName, FacilityAddress, OECID, 0.0 AS Parameter,\r\n\t\t'0' AS CurrentAccountNumber, Borough, [Block], LotNumber FROM @FacilityData;\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}