{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "FixAfterTheFact_ProcessAccountBillingOriginals",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "FixAfterTheFact_ProcessAccountBillingOriginals",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process original billing records for the New York Power Authority (NYPA). It involves inserting and updating billing records in the database, specifically focusing on handling original and revised billing periods. The procedure performs a series of operations to ensure that billing records are correctly inserted and updated, including handling adjustments and ensuring that all necessary billing details are captured and processed."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to several factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple database operations, including inserts and updates across different tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses complex business logic to determine billing periods and adjustments."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes error handling with transaction management, which adds to the complexity."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure interacts with multiple tables and relies on several parameters and conditions to execute correctly."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AccountBillingAdjustmentElectricSeqid AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is used to identify a specific billing adjustment record that needs to be processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@abaeBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period for which the procedure is being executed. It is used to filter and process records for the specified period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that indicates the execution status of the procedure, where 0 represents success and 9 represents failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring and initializing various local variables used throughout the process."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It checks if there are any original bills that need processing and ensures they have not been processed already."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses a "
                },
                {
                  "type": "text",
                  "text": "BEGIN TRY...END TRY",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block to manage transactions and handle errors. If an error occurs, it rolls back the transaction."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves billing parameters such as "
                },
                {
                  "type": "text",
                  "text": "BillCreationDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "PostMarkDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "DatePaymentDue",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "DateAcceptanceIntoOEC",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " from the "
                },
                {
                  "type": "text",
                  "text": "Common.UploadCycleParameters",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts records into "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " using data from "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingAdjustmentElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and other related tables."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts records into "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " with detailed billing information."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " with the adjusted account information."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingAdjustmentElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to mark records as processed and link them to the newly inserted billing records."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If any discrepancies are found between the number of inserted and updated records, an error is raised, and the transaction is rolled back."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses transactions to ensure data integrity, but long-running transactions can lead to locking and blocking issues."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Index Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved have appropriate indexes to optimize the performance of the "
                },
                {
                  "type": "text",
                  "text": "SELECT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "INSERT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "UPDATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the number of records processed is large, consider breaking the operations into smaller batches to reduce transaction time and resource usage."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure includes error handling, the complexity of the logic and the number of operations increase the risk of unhandled exceptions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on the assumption that the input parameters and existing data are correct. Any discrepancies in these can lead to incorrect billing records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues if multiple instances are executed simultaneously, potentially leading to data conflicts or deadlocks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of data grows, the performance of the procedure may degrade if not optimized for larger datasets."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Description:  Process the NYPA account billing original bills.  The sequential processing steps needed to\r\n--* \r\n--  Step 01)  Insert the new Cover sheet billing types\r\n--  Step 02)  Get the original bills minimum Delivery From Date and  the maximum Delivery To Date for the billing period.\r\n--  Step 03)  Insert the new Cover sheet billing items\r\n--  Step 04)  Get the total amount to be vouchered and the seqid of the row off of the coversheet\r\n--  Step 05)  Get the original bills minimum Delivery From Date and  the maximum Delivery To Date for the billing period.\r\n--  Step 06)  Get the  InvoiceTracking sequence id after it is inserted\r\n--\tStep 07)  Insert the orginal bills where the UploadNYPAAccountBilling.BillingPeriod is equal to the UploadNYPAAccountBilling.RevisedBillingPeriod\r\n--\tStep 08)  Insert the orginal bills detail where the UploadNYPAAccountBilling.BillingPeriod is equal to the UploadNYPAAccountBilling.RevisedBillingPeriod\r\n--\tStep 09)  Set the PostMarkDate, DatePaymentDue and DateAcceptanceIntoOEC in each of the  AccountBillingElectric (Detail table)\r\n--\tStep 10)  Encore monthly Billing, the amortization schedule for the billing period\r\n--\r\n-- Update the Account billing records with the correct account statuses of the existing accounts and the\r\n-- current cycle exchange actions.  The exchange code will be set to null.\r\n-- \r\n-- Determine the active accounts that the utility company did not send a bill for the cycle and add them to the \r\n-- to the \"UploadNYPAAccountBilling\" table.  At this point, we should have a collection of all of the accounts \r\n-- that were billed and all of the accounts that should have been billed.\r\n--*               \r\n--* Exec:   usp_ProcessABOriginalBillsNYPA\r\n--*\r\n--* Parameter(s):         \r\n--*    BillingPeriod varchar(6)       - Current billing period\r\n--*    PostMarkDate varchar(8), \r\n--*    DatePaymentDue varchar(8), \r\n--*    DateAcceptanceIntoOEC varchar(8),\r\n--*    DateOECApproved varchar(8),\r\n--*    StatusCode  int output       -  Execution Return Status \r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--\r\n-- Notes\r\n-- CurrentAccountBillingInvoiceContractBudgetLine= AgencyDivision.AgencyMeteredInvoiceContractBudgetLine is a future\r\n-- enhancement for invoicing (10/2/2007)\r\n--\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   10/26/2005\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 10/26/2005 PAH  First Version  \r\n--* 03/27/2006 PAH  Revised to \r\n--***************************************************************************************\r\nCREATE PROCEDURE [Nypa].[FixAfterTheFact_ProcessAccountBillingOriginals]\r\n(\r\n\t@AccountBillingAdjustmentElectricSeqid AS INT,\r\n\t@abaeBillingPeriod AS VARCHAR(6),\r\n\t@StatusCode AS INT OUTPUT\r\n)\r\nAS\r\nBegin \r\n\tDECLARE @AuthenticatedUserID AS INT, @RC AS INT, @InvoiceTrackingSeqid AS INT, @InvoiceUtilityCompanyCoverSheetSeqid AS INT\r\n\t\t,@UtililtyCompanyCycleParametersExist AS INT, @BillingCycle AS VARCHAR(1), @ExhangeCodeNull AS VARCHAR(2), @FromDateParm AS VARCHAR(1)\r\n\t\t,@ToDateParm AS VARCHAR(1), @Yes AS VARCHAR(1), @VoucherAmount AS MONEY, @PostMarkDate AS VARCHAR(8)\r\n\t\t,@DatePaymentDue AS VARCHAR(8), @DateAcceptanceIntoOEC AS VARCHAR(8), @BillCreationDate AS VARCHAR(8)\r\n\t\t,@BillingPeriod AS VARCHAR(6), @IsCurrentBillingPeriod AS INT, @HasCurrentBillingPeriodBeenProcessed AS INT\r\n\t\t,@BillingPeriodMismatch AS INT, @StopCurrentBillingPeriodProcess AS INT, @NumberOfOriginalBills AS INT\r\n\t\t,@NumberOfOriginalBillsProcessed AS INT, @UtilityCompanySeqid AS INT, @InvoiceAccountGroupSeqid AS INT\r\n\t\t,@AccountBilling AS INT, @AccountBillingElectric AS INT, @AccountBillingAdjustmentElectric AS INT\r\n\t\t,@AccountBillingElectricUpdate AS INT;\r\n\r\n\tSELECT @InvoiceTrackingSeqid = NULL, @BillingCycle = 'M', @FromDateParm = 'F', @ToDateParm = 'T', @Yes = 'Y'\r\n\t\t,@BillingPeriodMismatch = 0, @StopCurrentBillingPeriodProcess = 0, @UtilityCompanySeqid = 7, @InvoiceAccountGroupSeqid = 1\r\n\t\t,@AuthenticatedUserID = 1;\r\n\r\n\tDECLARE @errCurrentAccountNumber AS NVARCHAR(15), @errOriginalAccountNumber AS NVARCHAR(15), @errCurrentMeterNumber AS NVARCHAR(12)\r\n\t\t,@errOriginalMeterNumber AS NVARCHAR(12), @ExchangeErrorMessage AS NVARCHAR(4000), @ErrorMessage AS NVARCHAR(4000)\r\n\t\t,@ErrorSeverity AS INT, @ErrorState AS INT, @ErrorNumber AS INT, @ErrorLine AS INT, @ErrorProcedure AS NVARCHAR(126)\r\n\t\t,@CommitTransaction AS VARCHAR(1);\r\n\r\n\t--\tCheck Whether it is the current billing and that it has not been already processed\t\t\r\n\tSELECT @NumberOfOriginalBills = 1, @NumberOfOriginalBillsProcessed = 0;\r\n\r\n\tIF (@NumberOfOriginalBills > 0 AND @NumberOfOriginalBillsProcessed = 0)\r\n\tBEGIN\r\n\t\t-- Insert the orginal bills detail where the UploadNYPAAccountBilling.BillingPeriod is equal to the UploadNYPAAccountBilling.RevisedBillingPeriod\r\n\t\t-- Set the PostMarkDate, DatePaymentDue and DateAcceptanceIntoOEC in each of the  AccountBillingElectric (Detail table)\r\n\t\t-- Check if the parameters exist\r\n\t\tBEGIN TRY\r\n\t\t\t-- begin transaction ProcessAccountBillingOriginals;\r\n\t\t\tSELECT \r\n\t\t\t\t@BillCreationDate = BillCreationDate,  @PostMarkDate = PostMarkDate, @DatePaymentDue = DatePaymentDue,@DateAcceptanceIntoOEC = DateAcceptanceIntoOEC\r\n\t\t\tFROM     \r\n\t\t\t\tCommon.UploadCycleParameters \r\n\t\t\tWHERE \r\n\t\t\t\tCommon.UploadCycleParameters.UtilityCompanySeqid = 7 AND Common.UploadCycleParameters.BillingPeriod = '201007'\r\n\t\t\t\r\n\t\t\t-- Insert the orginal and back bills where the UploadNYPAAccountBilling.RevisedBillingPeriod is used for all inserts.\r\n\t\t\t-- The inclusion of the back bills forces the use of the RevisedBillingPeriod for the BillingPeriod.  \r\n\t\t\tINSERT INTO Billing.AccountBilling\r\n\t\t\t\t(UploadFileSeqid,OriginalAccountNumber,AccountSeqid, InvoiceTrackingSeqid, PreviousBillingPeriod, BillingPeriod, BillingPeriodRevision, NextBillingPeriod, CurrentInvoiceAccountBillingGroup,  \r\n\t\t\t\tManualDataEntry, ManualPaymentOverride, AccountBillingStatus, PreviousAccountBillingStatus, AccountBillingStatusCodePeriod, \r\n\t\t\t\tProcessedInTheCurrentPeriod, BillingCycle, SalesType, AccountEnergyUsage, AccountDemandUsage,OriginalEnergyUsage,OriginalDemandUsage,\r\n\t\t\t\tEnergySource, ProductionAndDeliveryTariff, \r\n\t\t\t\tBillingPeriodDays, FromDate, ToDate, BillingAction, OriginalBilledAmount, ManualPaymentOverrideAmount, RevisedBilledAmount, TotalAmountDue, \r\n\t\t\t\tOriginalBilledAmountPaid, PaidAdjustmentAmount, SplitFiscalYear, ChargeToFiscalYear, ChargeToPriorFiscalYear,CurrentAccountBillingInvoiceContractBudgetLine, UtilityCompanySeqid,AuthenticatedUserID, \r\n\t\t\t\tInitialPostingDate, DateAdded, LastUpdate,LastPeriodModified,IsTimeOfDayAccount,NetDollarChange,NetEnergyUsageChange,NetDemandUsageChange)\r\n\t\t\tSELECT Billing.AccountBillingAdjustmentElectric.UploadFileSeqid, Billing.Account.OriginalAccountNumber, Billing.Account.AccountSeqid, NULL AS Expr1, \r\n                dbo.CreatePreviousPeriodForExchanges(Billing.AccountBillingAdjustmentElectric.BillingPeriod, Billing.Account.BillingCycle, \r\n                Billing.Account.AccountStatus) AS Expr2, Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision, \r\n                Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision AS Expr3, \r\n                dbo.CreateNextPeriodForExchanges(Billing.AccountBillingAdjustmentElectric.BillingPeriod, Billing.Account.BillingCycle, Billing.Account.AccountStatus) \r\n               AS Expr4, Billing.Account.CurrentInvoiceAccountGroup, 'N' AS Expr5, 'N' AS Expr6, Billing.AccountBillingAdjustmentElectric.AccountStatus, \r\n                Billing.AccountBillingAdjustmentElectric.AccountPreviousStatus, Billing.AccountBillingAdjustmentElectric.AccountStatusCodePeriod, 'Y' AS Expr7, \r\n                Billing.Account.BillingCycle, Billing.Account.SalesType, Billing.AccountBillingAdjustmentElectric.AccountEnergyUsage, \r\n                Billing.AccountBillingAdjustmentElectric.AccountDemandUsage, Billing.AccountBillingAdjustmentElectric.AccountEnergyUsage AS Expr8, \r\n                Billing.AccountBillingAdjustmentElectric.AccountDemandUsage AS Expr9, Billing.Account.EnergySource, \r\n                Billing.AccountBillingAdjustmentElectric.ProductionAndDeliveryTariff, Billing.AccountBillingAdjustmentElectric.BillingPeriodDays, \r\n                Billing.AccountBillingAdjustmentElectric.FromDate, Billing.AccountBillingAdjustmentElectric.ToDate, \r\n                Billing.AccountBillingAdjustmentElectric.BillingAction, \r\n                CASE WHEN Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision THEN Billing.AccountBillingAdjustmentElectric.TotalReBilledAmount\r\n                + Billing.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount ELSE 0 END AS Expr10, 0.00 AS Expr11, \r\n                Billing.AccountBillingAdjustmentElectric.TotalReBilledAmount + Billing.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount AS Expr12, \r\n                CASE WHEN Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision THEN Billing.AccountBillingAdjustmentElectric.TotalReBilledAmount\r\n                + Billing.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount ELSE 0 END AS Expr13, \r\n                Billing.AccountBillingAdjustmentElectric.TotalReBilledAmount, 0.00 AS Expr14, \r\n                dbo.IsFiscalYearSplit(Billing.AccountBillingAdjustmentElectric.FromDate, Billing.AccountBillingAdjustmentElectric.ToDate) AS Expr15, \r\n                dbo.CalculateFiscalYearIfSplit(Billing.AccountBillingAdjustmentElectric.FromDate, Billing.AccountBillingAdjustmentElectric.ToDate, @ToDateParm) \r\n               AS Expr16, dbo.CalculateFiscalYearIfSplit(Billing.AccountBillingAdjustmentElectric.FromDate, Billing.AccountBillingAdjustmentElectric.ToDate, \r\n                @FromDateParm) AS Expr17, NULL AS Expr18, Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid, \r\n                @AuthenticatedUserID AS Expr19, @BillCreationDate AS Expr20, GETDATE() AS Expr21, GETDATE() AS Expr22, \r\n                Billing.AccountBillingAdjustmentElectric.BillingPeriod, Billing.AccountBillingAdjustmentElectric.IsTimeOfDayAccount, 0.00 AS Expr23, 0 AS Expr24, \r\n                0.0 AS Expr25\r\n\t\t\tFROM Billing.Account INNER JOIN\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric ON Billing.Account.AccountSeqid = Billing.AccountBillingAdjustmentElectric.AdjustedAccount \r\n\t\t\tWHERE Billing.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid = 368084;\r\n\r\n\t\t\tSELECT @AccountBilling = @@rowcount\r\n\t\t\tPRINT 'Number of Account billing inserts: ' + Cast(@AccountBilling AS VARCHAR(10))\r\n\t\t\t\r\n\t\t\t-- Insert the orginal and back bills where the UploadNYPAAccountBilling.RevisedBillingPeriod is used for all inserts.\r\n\t\t\t-- The inclusion of the back bills forces the use of the RevisedBillingPeriod for the BillingPeriod.  \r\n\t\t\tINSERT INTO Billing.AccountBillingElectric\r\n\t\t\t\t(AdjustedAccountElectric,\r\n\t\t\t\tOriginalAccountNumber, \r\n\t\t\t\tMonthlyAccountBillingChargesElectric, \r\n\t\t\t\tAccountBillingRowState, \r\n\t\t\t\tBillingPeriod, \r\n\t\t\t\tBillingPeriodRevision,\r\n\t\t\t\tDeliveryTariffRate, DeliveryTariffEffectiveDate, \r\n\t\t\t\tCommodityTariffRate, CommodityTariffEffectiveDate, LoadFactor, BillCreationDate, PostMarkDate, DatePaymentDue, DateAcceptanceIntoOEC, \r\n\t\t\t\tPreviousAccountBalance, FuelAdjustmentAmount, \r\n\t\t\t\tLatePaymentAmount,\r\n\t\t\t\tArrearAmount,\r\n\t\t\t\tCreditedPaidAmount, \r\n\t\t\t\tCreditedPaymentDate, \r\n\t\t\t\tDiscountPercentage, \r\n\t\t\t\tDDDSurchargeAmount, DDDSurchargePercentage, DeliveryConsumption, DeliveryConsumptionOffPeak, \r\n\t\t\t\tDeliveryConsumptionShoulder, DeliveryDemand, DeliveryDemandOffPeak, DeliveryDemandShoulder, DeliveryStreetLightingFacilityPoints, \r\n\t\t\t\tCommodityConsumption, CommodityConsumptionOffPeak, CommodityConsumptionShoulder, CommodityDemand, CommodityDemandOffPeak, \r\n\t\t\t\tCommodityDemandShoulder, CommodityFacilityPoints, GrossReceiptTax, GRTRate,\r\n\t\t\t\tEnergyCostAdjustment, EnergyCostAdjustmentPercentage,  AccountEnergyUsage, AccountDemandUsage,\r\n\t\t\t\tInitialPostingDate, Notes, AuthenticatedUserID, DateAdded, LastUpdate,UtilityCompanySeqid,LastPeriodModified,IsTimeOfDayAccount,\r\n\t\t\t\tIsMinimumBilledCharged,MinimumBilledEnergyDollars, MinimumBilledDemandDollars, MaxBilledDemandPeriod, MaxBilledDemandUsage, \r\n\t\t\t\tIsSpannedPeriodBill, DeliveryFacilityPointsAmount,CustomerLevelAdjustmentAmount,BilledAmount)\r\n\t\t\tSELECT DISTINCT \r\n\t\t\t\tNULL AS Expr1, Billing.Account.OriginalAccountNumber, Billing.AccountBilling.AccountBillingSeqid, 1 AS Expr2, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision, Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision AS Expr3, \r\n\t\t\t\tBilling.Account.DeliveryTariffRate, Billing.Account.DeliveryTariffEffectiveDate, Billing.Account.CommodityTariffRate, \r\n\t\t\t\tBilling.Account.CommodityTariffEffectiveDate, dbo.CalculateLoadFactor(Billing.AccountBilling.AccountEnergyUsage, \r\n\t\t\t\tBilling.AccountBilling.AccountDemandUsage, Billing.AccountBilling.FromDate, Billing.AccountBilling.ToDate) AS Expr4, @BillCreationDate AS Expr5, \r\n\t\t\t\t@PostMarkDate AS Expr6, @DatePaymentDue AS Expr7, @DateAcceptanceIntoOEC AS Expr8, 0.00 AS Expr9, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.FuelAdjustmentAmount, 0.00 AS Expr10, 0.00 AS Expr11, 0.00 AS Expr12, 0.00 AS Expr13, 0 AS Expr14, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DDDSurchargeAmount, Billing.AccountBillingAdjustmentElectric.DDDSurchargePercentage, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryConsumption, Billing.AccountBillingAdjustmentElectric.DeliveryConsumptionOffPeak, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryConsumptionShoulder, Billing.AccountBillingAdjustmentElectric.DeliveryDemand, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryDemandOffPeak, Billing.AccountBillingAdjustmentElectric.DeliveryDemandShoulder, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryStreetLightingFacilityPoints, Billing.AccountBillingAdjustmentElectric.CommodityConsumption, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityConsumptionOffPeak, Billing.AccountBillingAdjustmentElectric.CommodityConsumptionShoulder, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityDemand, Billing.AccountBillingAdjustmentElectric.CommodityDemandOffPeak, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityDemandShoulder, Billing.AccountBillingAdjustmentElectric.CommodityFacilityPoints, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.GrossReceiptTax, Billing.AccountBillingAdjustmentElectric.GRTRate, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.EnergyCostAdjustment, Billing.AccountBillingAdjustmentElectric.EnergyCostAdjustmentPercentage, \r\n\t\t\t\tBilling.AccountBilling.AccountEnergyUsage, Billing.AccountBilling.AccountDemandUsage, Billing.AccountBilling.InitialPostingDate, NULL AS Expr15, \r\n\t\t\t\tBilling.AccountBilling.AuthenticatedUserID, Billing.AccountBilling.DateAdded, GETDATE() AS Expr16, @UtilityCompanySeqid AS Expr17, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriod, Billing.AccountBillingAdjustmentElectric.IsTimeOfDayAccount, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.IsMinimumBilledCharged, Billing.AccountBillingAdjustmentElectric.MinimumBilledEnergyDollars, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.MinimumBilledDemandDollars, Billing.AccountBillingAdjustmentElectric.MaxBilledDemandPeriod, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.MaxBilledDemandUsage, Billing.AccountBillingAdjustmentElectric.IsSpannedPeriodBill, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryFacilityPointsAmount, Billing.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.TotalReBilledAmount\r\n\t\t\tFROM Billing.Account INNER JOIN\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric ON Billing.Account.AccountSeqid = Billing.AccountBillingAdjustmentElectric.AdjustedAccount AND \r\n\t\t\t\tBilling.Account.UtilityAccountProvider = Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid AND \r\n\t\t\t\tBilling.Account.OriginalAccountNumber = Billing.AccountBillingAdjustmentElectric.OriginalAccountNumber INNER JOIN\r\n\t\t\t\tBilling.AccountBilling ON Billing.Account.AccountSeqid = Billing.AccountBilling.AccountSeqid AND \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.OriginalAccountNumber = Billing.AccountBilling.OriginalAccountNumber AND \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision AND \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid = Billing.AccountBilling.UtilityCompanySeqid\r\n\t\t\tWHERE Billing.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid = 368084;\t\r\n\t\r\n\t\t\tSELECT @AccountBillingElectric = @@rowcount;\r\n\t\t\tPRINT 'Number of Account billing electric inserts: ' + Cast(@AccountBillingElectric AS VARCHAR(10));\r\n\t\t\tRETURN;\r\n\r\n\t\t\tUPDATE Billing.AccountBillingElectric\r\n\t\t\tSET AdjustedAccountElectric = Billing.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid, \r\n\t\t\t\tAuthenticatedUserID = @AuthenticatedUserID, LastUpdate = GETDATE()\r\n\t\t\tFROM Billing.AccountBillingAdjustmentElectric INNER JOIN\r\n                Billing.AccountBillingElectric ON \r\n                Billing.AccountBillingAdjustmentElectric.OriginalAccountNumber = Billing.AccountBillingElectric.OriginalAccountNumber AND \r\n                Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision = Billing.AccountBillingElectric.BillingPeriodRevision AND \r\n                Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid = Billing.AccountBillingElectric.UtilityCompanySeqid\r\n\t\t\tWHERE Billing.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid = @AccountBillingAdjustmentElectricSeqid\t\r\n\t\t\t\t\t\r\n\t\t\tselect @AccountBillingElectricUpdate = @@rowcount\r\n\t\t\tprint 'Number of Account billing electric Updated: ' + Cast(@AccountBillingElectricUpdate as varchar(10))\r\n\t\t\r\n\t\t\tUPDATE Billing.AccountBillingAdjustmentElectric\r\n\t\t\tSET  \r\n\t\t\t\tProcessedInTheCurrentPeriod ='Y',\r\n\t\t\t\tAdjustedAccount = Billing.AccountBilling.AccountSeqid, \r\n\t\t\t\tAdjustedAccountBill = Billing.AccountBilling.AccountBillingSeqid, \r\n\t\t\t\tAdjustedAccountBillElectric = Billing.AccountBillingElectric.AccountBillingElectricSeqid,\r\n\t\t\t\tLastUpdate = getDate(),\r\n\t\t\t\tAuthenticatedUserID = 1 --@AuthenticatedUserID\r\n\t\t\tFROM \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric INNER JOIN\r\n\t\t\t\tBilling.ApplicationTimeFrame ON Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod INNER JOIN\r\n\t\t\t\tBilling.AccountBillingElectric ON \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid = Billing.AccountBillingElectric.AdjustedAccountElectric AND \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.OriginalAccountNumber = Billing.AccountBillingElectric.OriginalAccountNumber INNER JOIN\r\n\t\t\t\tBilling.AccountBilling ON Billing.AccountBillingElectric.MonthlyAccountBillingChargesElectric = Billing.AccountBilling.AccountBillingSeqid AND \r\n\t\t\t\tBilling.AccountBillingElectric.OriginalAccountNumber = Billing.AccountBilling.OriginalAccountNumber AND \r\n\t\t\t\tBilling.AccountBillingElectric.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision\r\n\t\t\tWHERE (Billing.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid = @AccountBillingAdjustmentElectricSeqid)\t\t\r\n\t\t\r\n\t\t\tSELECT @AccountBillingAdjustmentElectric = @@rowcount;\r\n\t\t\tPRINT 'Number of Account billing adjustment electric updates: ' + Cast(@AccountBillingAdjustmentElectric AS VARCHAR(10))\r\n\t\t\r\n\t\t\tIF (@AccountBilling <> @AccountBillingAdjustmentElectric)\r\n\t\t\tBEGIN\r\n\t\t\t\tSET @CommitTransaction = 'N'\r\n\t\t\t\tRAISERROR ('Account billing Rebills (%7d) and the Account billing Eelctric Rebills (%7d) match by Account Billing Adjustment Electric (%7d) does not match', --\r\n\t\t\t\t\t\t   16, -- Severity.\r\n\t\t\t\t\t\t   1, -- State.\r\n\t\t\t\t\t\t   @AccountBilling,\r\n\t\t\t\t\t\t   @AccountBillingElectric,\r\n\t\t\t\t\t\t   @AccountBillingAdjustmentElectric) WITH LOG;\r\n\t\t\tEND;\r\n\r\n\t\t\tPRINT '@CommitTransaction = ' + @CommitTransaction;\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\tSELECT \r\n\t\t\t\t@ExchangeErrorMessage ='Error in StoredProcedure %125s at line number %8.0d ',\r\n\t\t\t\t@ErrorMessage = ERROR_MESSAGE(),\r\n\t\t\t\t@ErrorSeverity = ERROR_SEVERITY(),\r\n\t\t\t\t@ErrorState = ERROR_STATE(),\r\n\t\t\t\t@ErrorNumber = ERROR_NUMBER(),\r\n\t\t\t\t@ErrorProcedure = ERROR_PROCEDURE(),\r\n\t\t\t\t@ErrorLine = ERROR_LINE();\r\n\r\n\t\t\tSET\t@ErrorMessage = @ExchangeErrorMessage + @ErrorMessage;\r\n\r\n\t\t\tRAISERROR (@ErrorMessage, -- Message text.\r\n\t\t\t\t\t   @ErrorSeverity, -- Severity.\r\n\t\t\t\t\t   @ErrorState, -- State.\r\n\t\t\t\t\t   @ErrorProcedure,\r\n\t\t\t\t\t   @ErrorLine) WITH LOG;\r\n\r\n\t\t\tSET @CommitTransaction = 'N'\r\n\t\t\tROLLBACK TRANSACTION ProcessAccountBillingOriginals;\r\n\t\tEND CATCH;\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}