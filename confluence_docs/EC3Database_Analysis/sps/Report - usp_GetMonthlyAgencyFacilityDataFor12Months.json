{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_GetMonthlyAgencyFacilityDataFor12Months",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_GetMonthlyAgencyFacilityDataFor12Months",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to generate a report of energy usage and costs for facilities associated with a specific agency over the past 12 months. It retrieves data from various tables, processes it, and outputs a pivoted report showing costs and usage metrics for electricity, gas, and steam. The procedure logs its execution for auditing purposes and dynamically constructs a SQL query to pivot the data for the specified billing periods."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple steps, including dynamic SQL generation, data aggregation, and pivoting, which adds to its complexity. The use of temporary tables, common table expressions (CTEs), and dynamic SQL requires a good understanding of SQL Server features and performance implications."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The email address of the user requesting the report. Used for logging and possibly for permission checks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The billing period for which the report is generated. If the user is an agency user, this is set to the current processing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AgencyCodeOEC AS dbo.OECAgencyCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The agency code used to filter data for a specific agency."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@OecFacilityNumber AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A list of facility numbers to filter the data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsAgencyUser AS BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether the user is an agency user, which affects how the billing period is determined."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Setup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure starts by setting the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to avoid locking issues and declares a variable for the stored procedure name."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Period Adjustment",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the user is an agency user, the "
                },
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is set to the current processing period from the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure logs its execution in the "
                },
                {
                  "type": "text",
                  "text": "Audit",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " schema using "
                },
                {
                  "type": "text",
                  "text": "usp_AddReportUsageLog",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Facility Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It populates a table variable "
                },
                {
                  "type": "text",
                  "text": "@FacilityData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with facility information by joining "
                },
                {
                  "type": "text",
                  "text": "Published.TemporalAccountLevelRawDataForCurrentPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with a user-defined function that retrieves facility numbers based on agency hierarchy."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Period Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It calculates the cutoff billing period for the past 12 months and constructs a comma-separated list of billing periods for use in dynamic SQL."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Aggregation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A CTE "
                },
                {
                  "type": "text",
                  "text": "AllReportData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " aggregates data for each billing period, calculating costs and usage metrics for electricity, gas, and steam."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Pivoting",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure constructs a dynamic SQL query to pivot the aggregated data, creating columns for each billing period and ordering the results by a predefined order number."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Execution and Cleanup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The dynamic SQL is executed, and the temporary table "
                },
                {
                  "type": "text",
                  "text": "#AllReportDataTemp",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is dropped."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This reduces locking but may result in reading uncommitted data, which could lead to inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic SQL",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While flexible, dynamic SQL can be less efficient due to the lack of query plan reuse and potential SQL injection risks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Aggregation and Pivoting",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": These operations can be resource-intensive, especially with large datasets. Indexing on the underlying tables can help improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of temporary tables can impact performance if not managed properly, especially in high-concurrency environments."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "SQL Injection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of dynamic SQL poses a risk of SQL injection if input parameters are not properly sanitized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Consistency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " isolation level can lead to dirty reads, which may not be acceptable in all reporting scenarios."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the dataset grows, the performance of aggregation and pivoting operations may degrade, requiring optimization or hardware scaling."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete operations in case of failures."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_GetMonthlyAgencyFacilityDataFor12Months]\n(\r\n    @EmailAddress AS VARCHAR(75)\r\n    ,@PublishedBillingPeriod AS VARCHAR(6)\r\n    ,@AgencyCodeOEC AS dbo.OECAgencyCode\r\n    ,@OecFacilityNumber AS VARCHAR(MAX)\r\n\t,@IsAgencyUser AS BIT = 0\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @spname VARCHAR(100) = OBJECT_NAME(@@PROCID);\r\n\r\n\tIF (@IsAgencyUser = 1)\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = PublishedBillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\tEND;\r\n\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t\t@ReportName = @spname,\r\n\t\t@StoredProcName = @spname,\r\n\t\t@RequestedBy = @EmailAddress,\r\n\t\t@prmPublishedBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmBillingPeriod = NULL,\r\n\t\t@prmAgency_ies = @AgencyCodeOEC,\r\n\t\t@prmFacilityNumber_s = @OecFacilityNumber,\r\n\t\t@prmStartingBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmEndingBillingPeriod = NULL;\r\n\r\n    DECLARE @FacilityData TABLE (Agency VARCHAR(75) NULL\r\n\t\t,FacilityName VARCHAR(100) NULL\r\n\t\t,FacilityAddress VARCHAR(120) NULL\r\n\t\t,OECID OECBuildingNumber NULL\r\n\t\t,AgencyCodeOEC AgencyCodeOEC NULL\r\n\t\t,Borough VARCHAR(1) NULL\r\n\t\t,[Block] VARCHAR(5) NULL\r\n\t\t,LotNumber VARCHAR(4) NULL);\r\n\t\r\n\t-- add agency based on user email permission\r\n    INSERT INTO @FacilityData(Agency, FacilityName, FacilityAddress, OECID, AgencyCodeOEC, Borough, [Block], LotNumber)\r\n\tSELECT TOP (1) FD.AgencyName, FD.FacilityName, FD.Address1, FD.OecFacilityNumber, FD.AgencyCodeOEC, MAX(TA.Borough) AS Borough,\r\n        MAX(TA.[Block]) AS [Block], MAX(TA.LotNumber) AS LotNumber\r\n\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n\t\tINNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCodeOEC, @OecFacilityNumber, @EmailAddress) AS FD\r\n\t\t\tON TA.OecFacilityNumber = FD.OecFacilityNumber AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n\tGROUP BY FD.AgencyName, FD.FacilityName, FD.Address1, FD.OecFacilityNumber, FD.AgencyCodeOEC\r\n\tORDER BY FD.OecFacilityNumber;\r\n\t\r\n\tDECLARE @CutOffBillingPeriod AS VARCHAR(6) = CAST((CAST(@PublishedBillingPeriod AS INT) - 99) AS VARCHAR(6));\r\n\r\n\t-- to pivot billing period\r\n\tDECLARE @BillingPeriods AS VARCHAR(MAX);\r\n\tSELECT @BillingPeriods = COALESCE(@BillingPeriods + ', ','') + QUOTENAME(BillingPeriod)\r\n\tFROM (SELECT DISTINCT BillingPeriod FROM Published.TemporalAccountLevelRawDataForCurrentPeriod\r\n\t\tWHERE BillingPeriod <= @PublishedBillingPeriod AND BillingPeriod >= @CutOffBillingPeriod) AS B\r\n\tORDER BY B.BillingPeriod DESC;\r\n\t\r\n\tDROP TABLE IF EXISTS #AllReportDataTemp;\r\n\r\n\t;WITH AllReportData (PublishedBillingPeriod, BillingPeriod, FiscalYear, BillingMonth, AgencyCodeOEC, AgencyName,\r\n\t\tOecFacilityNumber, FacilityName, Address1, Borough, [Block], LotNumber, CurrentAccountNumber,\r\n\t\tCost, RevisedBilledAmount) AS\r\n\t(SELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n\t\tTA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tFD.Agency,\r\n\t\tFD.OECID,\r\n\t\tFD.FacilityName,\r\n\t\tFD.FacilityAddress,\r\n\t\tFD.Borough,\r\n\t\tFD.[Block],\r\n\t\tFD.LotNumber,\r\n\t\t'0' AS CurrentAccountNumber,\r\n\t\tCASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam Cost ($)' ELSE '' END AS Cost,\r\n\t\tSUM(ISNULL(CAST(TA.RevisedBilledAmount AS NUMERIC(18, 2)), 0)) AS RevisedBilledAmount\r\n    FROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod AND TA.BillingPeriod >= @CutOffBillingPeriod\r\n\tGROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.Agency, FD.OECID, FD.FacilityName,\r\n\t\tFD.FacilityAddress, FD.Borough, FD.[Block], FD.LotNumber,\r\n\t\tCASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam Cost ($)' ELSE '' END\r\n\tUNION ALL\r\n\tSELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n\t\tTA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tMAX(FD.Agency) AS Agency,\r\n\t\tFD.OECID,\r\n\t\tMAX(FD.FacilityName) AS FacilityName,\r\n\t\tMAX(FD.FacilityAddress) AS FacilityAddress,\r\n\t\tMAX(FD.Borough) AS Borough,\r\n\t\tMAX(FD.[Block]) AS [Block],\r\n\t\tMAX(FD.LotNumber) AS LotNumber,\r\n\t\tCAST(NULL AS VARCHAR(19)) AS CurrentAccountNumber,\r\n\t\t'Total Cost ($)' AS Cost,\r\n\t\tISNULL(CAST(SUM(ISNULL(TA.RevisedBilledAmount, 0)) AS NUMERIC(18, 2)), 0) AS RevisedBilledAmount\r\n\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod AND TA.BillingPeriod >= @CutOffBillingPeriod\r\n    GROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.OECID\r\n    UNION ALL\r\n    SELECT @PublishedBillingPeriod AS PublishedBillingPeriod\r\n        ,TA.BillingPeriod\r\n\t\t,TA.FiscalYear\r\n\t\t,TA.BillingMonth\r\n\t\t,FD.AgencyCodeOEC\r\n\t\t,MAX(FD.Agency) AS Agency\r\n\t\t,FD.OECID\r\n\t\t,MAX(FD.FacilityName) AS FacilityName\r\n\t\t,MAX(FD.FacilityAddress) AS FacilityAddress\r\n\t\t,MAX(FD.Borough) AS Borough\r\n\t\t,MAX(FD.[Block]) AS [Block]\r\n\t\t,MAX(FD.LotNumber) AS LotNumber\r\n        ,'0' AS CurrentAccountNumber\r\n        ,CASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Demand (kW)' ELSE '' END AS Cost\r\n        ,SUM(ISNULL(CAST(TA.AccountDemandUsage AS NUMERIC(18, 2)), 0)) AS AccountDemandUsage\r\n    FROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod AND TA.BillingPeriod >= @CutOffBillingPeriod\r\n\tGROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.OECID,\r\n\t\tCASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Demand (kW)' ELSE '' END\r\n    UNION ALL    \r\n\tSELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n\t\tTA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tMAX(FD.Agency) AS Agency,\r\n\t\tFD.OECID,\r\n\t\tMAX(FD.FacilityName) AS FacilityName,\r\n\t\tMAX(FD.FacilityAddress) AS FacilityAddress,\r\n\t\tMAX(FD.Borough) AS Borough,\r\n\t\tMAX(FD.[Block]) AS [Block],\r\n\t\tMAX(FD.LotNumber) AS LotNumber,\r\n        '0' AS CurrentAccountNumber,\r\n        CASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Usage (kWh)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas (Therms)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam (MLbs)' ELSE '' END AS Cost,\r\n        SUM(ISNULL(CAST(TA.AccountEnergyUsage AS NUMERIC(18, 2)), 0)) AS AccountEnergyUsage\r\n    FROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod AND TA.BillingPeriod >= @CutOffBillingPeriod\r\n\tGROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.OECID,\r\n\t\tCASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Usage (kWh)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas (Therms)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam (MLbs)' ELSE '' END\r\n\tUNION ALL    \r\n\tSELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n        TA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tMAX(FD.Agency) AS Agency,\r\n\t\tFD.OECID,\r\n\t\tMAX(FD.FacilityName) AS FacilityName,\r\n\t\tMAX(FD.FacilityAddress) AS FacilityAddress,\r\n\t\tMAX(FD.Borough) AS Borough,\r\n\t\tMAX(FD.[Block]) AS [Block],\r\n\t\tMAX(FD.LotNumber) AS LotNumber,\r\n\t\tCAST(NULL AS VARCHAR(19)) AS CurrentAccountNumber,\r\n\t\t'Total Usage (mmBTUs)' AS Cost,\r\n        ISNULL(CAST(ROUND(SUM(CASE WHEN TA.Energytype = 'ELE' THEN TA.AccountEnergyUsage * 0.00341297\r\n            WHEN TA.Energytype = 'GAS' THEN AccountEnergyUsage * 0.1\r\n            WHEN TA.Energytype = 'STM' THEN AccountEnergyUsage * 1.11718000 ELSE 0.0 END), 18, 2) AS NUMERIC(18, 2)), 0) AS AccountEnergyUsage\r\n\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n\t\tINNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n\tWHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod AND TA.BillingPeriod >= @CutOffBillingPeriod\r\n\tGROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.OECID)\r\n\r\n\tSELECT PublishedBillingPeriod,\r\n        BillingPeriod,\r\n        FiscalYear,\r\n        BillingMonth,\r\n        AgencyCodeOEC,\r\n        AgencyName,\r\n        OecFacilityNumber,\r\n        FacilityName,\r\n        Address1,\r\n        Borough,\r\n        [Block],\r\n        LotNumber,\r\n        CurrentAccountNumber,\r\n        Cost,\r\n        RevisedBilledAmount, \r\n\t\tCASE WHEN Cost ='Electricity Cost ($)' THEN 5\r\n\t\t\tWHEN Cost ='Electricity Demand (kW)' THEN 3\r\n\t\t\tWHEN Cost ='Electricity Usage (kWh)' THEN 1\r\n\t\t\tWHEN Cost ='Gas (Therms)' THEN 7\r\n\t\t\tWHEN Cost ='Gas Cost ($)' THEN 9\r\n\t\t\tWHEN Cost ='Steam (MLbs)' THEN 11\r\n\t\t\tWHEN Cost ='Steam Cost ($)' THEN 13\r\n\t\t\tWHEN Cost ='Total Cost ($)' THEN 17\r\n\t\t\tWHEN Cost ='Total Usage (mmBTUs)' THEN 15\r\n\t\tELSE 0 END AS OrderNumber\r\n\tINTO #AllReportDataTemp FROM AllReportData;\r\n\r\n\tDECLARE @ReportSQL AS VARCHAR(MAX);\r\n\tSET @ReportSQL =  'SELECT AgencyName AS Agency, FacilityName, Address1 AS FacilityAddress, OecFacilityNumber AS OECID, Cost AS Parameter,\r\n\t\t\tCurrentAccountNumber, ISNULL(Borough, '''') AS Borough, ISNULL(Block, '''') AS Block, ISNULL(LotNumber, '''') AS LotNumber, OrderNumber, ' + @BillingPeriods + '\r\n\t\tFROM (SELECT PublishedBillingPeriod, AgencyName, FacilityName, Address1, OecFacilityNumber, Cost, RevisedBilledAmount,\r\n\t\t\t\tBillingPeriod, CurrentAccountNumber, Borough, Block, LotNumber, OrderNumber\r\n\t\t\tFROM #AllReportDataTemp WHERE Cost <> '''') AS PivotData\r\n\t\t\tPIVOT\r\n\t\t\t\t(MAX(RevisedBilledAmount) FOR BillingPeriod IN (' + @BillingPeriods + ')) AS PR\r\n\t\tORDER BY PR.OrderNumber, PR.CurrentAccountNumber';\r\n\r\n\tEXEC (@ReportSQL);\r\n\tDROP TABLE IF EXISTS #AllReportDataTemp;\r\nEND;"
        }
      ]
    }
  ]
}