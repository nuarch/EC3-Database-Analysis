{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "NationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_LegacyData_ProcessAccountCancellationSpanned",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_LegacyData_ProcessAccountCancellationSpanned",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to handle the processing of account cancellations that span multiple billing periods within the "
        },
        {
          "type": "text",
          "text": "NationalGridWest",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " database. It performs several operations, including moving data into a temporary table, parsing account cancellation information, updating gas rate codes, merging summary data into an adjustment table, and inserting new records into an adjustment table. The procedure also includes logic for updating and deleting records based on certain conditions."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple data manipulation operations, including "
                },
                {
                  "type": "text",
                  "text": "INSERT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UPDATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "DELETE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It calls another stored procedure and several user-defined functions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It performs complex calculations and conditional logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple joins and subqueries, which can be computationally intensive."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure handles a significant amount of business logic, making it intricate and challenging to maintain."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod varchar(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period in the format "
                },
                {
                  "type": "text",
                  "text": "YYYYMM",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@authenticatedID int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An identifier for the authenticated user executing the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingCycle varchar(1)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing cycle, likely a single character indicating a specific cycle."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Movement",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure begins by inserting data from "
                        },
                        {
                          "type": "text",
                          "text": "UploadLegacyKeyspanWestCancellation",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " into a temporary summary table "
                        },
                        {
                          "type": "text",
                          "text": "UploadLegacyKeyspanWestCancellationTempSummarySpanned",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " for records where "
                        },
                        {
                          "type": "text",
                          "text": "DeltaNumberOfPeriods",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is greater than 1. This involves calculating therm factors and billing period days using user-defined functions."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parsing Information",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It calls another stored procedure "
                        },
                        {
                          "type": "text",
                          "text": "usp_LegacyData_ParseSpannedAccountCancellationInfo",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to further process the spanned account cancellation information."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Setting Gas Rate Code",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure sets a default gas rate code and updates it based on a join with the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.Account",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to reflect the commodity tariff rate."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Merging Summary Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It updates the "
                        },
                        {
                          "type": "text",
                          "text": "UploadAdjustmentGas",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table by merging data from a summarized subquery of "
                        },
                        {
                          "type": "text",
                          "text": "UploadLegacyKeyspanWestCancellationSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Inserting New Records",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "New records are inserted into "
                        },
                        {
                          "type": "text",
                          "text": "UploadLegacyKeyspanWestAccountBillingAdjustmentGas",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " for cancellations not already present in the table, using aggregated data from "
                        },
                        {
                          "type": "text",
                          "text": "UploadLegacyKeyspanWestCancellationSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Updating and Deleting Records",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure updates records to unite rebills with existing cancels and deletes cancels that had rebills. It also updates cancels that had no rebills."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Subqueries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of multiple joins and subqueries can lead to performance bottlenecks, especially if the tables involved are large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Frequent calls to user-defined functions can be costly in terms of performance, particularly if these functions are not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Volume",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure processes potentially large datasets, which can impact execution time and resource usage."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing on the tables involved, especially on columns used in joins and where clauses, can significantly improve performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple updates and inserts, which can lead to locking and blocking issues in a high-concurrency environment."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The logic for merging and deleting records must be carefully managed to prevent data loss or corruption."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete transactions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the complexity and resource demands of the procedure may lead to scalability issues."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The high complexity and extensive business logic make the procedure difficult to maintain and modify without introducing errors."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [NationalGridWest].[usp_LegacyData_ProcessAccountCancellationSpanned] \r\n\t@BillingPeriod varchar(6),\r\n\t@authenticatedID int,\r\n\t@BillingCycle varchar(1)\r\nAS\r\nBEGIN\r\n\r\n/**************************\r\n1. Move data into the upload spanned table\r\n***************************/\r\n\tINSERT INTO [NationalGridWest].UploadLegacyKeyspanWestCancellationTempSummarySpanned\r\n\t(title, \r\n\tAccountNumber,\t\r\n\tMeterNumber, \r\n\tBillingPeriod, \r\n\tBillingPeriodRevision, \r\n\tFirstPeriodCanceled, \r\n\tCancelFromDate, \r\n\tCancelToDate, \r\n\tCancelBilledAmount, \r\n    CancelTherms, \r\n\tCancelThermFactor, \r\n\tCancelCCF, \r\n\tCancelTariffCode, \r\n\tCancelBillingPeriodDays, \r\n\tFacilityName, \r\n\tServiceAddress, \r\n\tDeltaNumberOfPeriods, \r\n    Dials, \r\n\tPostingDate)\r\n\tSELECT  \r\n\t\t'SpannedCancellation' AS title,   \r\n\t\tAccountNumber, \r\n\t\tMeterNumber AS MeterNumber, \r\n\t\tBillingPeriod, \r\n\t\tBillingPeriodRevision,  \r\n\t\tFirstPeriodCanceled as FirstPeriodCanceled, \r\n\t\tFromDate as CancelFromDate, \r\n\t\tToDate as CancelToDate, \r\n\t\tBilledAmount as CancelBilledAmount, \r\n        Therms as CancelTherms, \r\n\t\t[dbo].[CalculateGasThermFactor] \r\n\t\t(CCF,Therms) as CancelThermFactor, \r\n\t\tCCF as CancelCCF, \r\n\t\tTariffCode as CancelTariffCode, \r\n\t\tDATEDIFF(day, [dbo].[ConvertYYYYMMDDToDatetime] (FromDate),[dbo].[ConvertYYYYMMDDToDatetime] (ToDate)) as CancelBillingPeriodDays, \r\n\t\tFacilityName as FacilityName, \r\n        ServiceAddress as ServiceAddress, \r\n\t\tDeltaNumberOfPeriods AS DeltaNumberOfPeriods, \r\n\t\tDials AS Dials,PostingDate\r\n\tFROM NationalGridWest.UploadLegacyKeyspanWestCancellation\r\n\tWHERE (DeltaNumberOfPeriods > 1)\r\n\r\n/*******************************\r\n2. Parse spanned billed upload account cancellation info\r\n*********************************/\r\n exec NationalGridWest.usp_LegacyData_ParseSpannedAccountCancellationInfo @BillingPeriod, @authenticatedID, @BillingCycle\r\n\r\n\r\n/*******************************\r\n3. Set gas rate code\r\n*********************************/\r\n-- set default gas rate code\r\nUPDATE NationalGridWest.UploadLegacyKeyspanWestCancellationSummary\r\nSET GasRateCode = '020'\r\n\r\n-- set gas rate code = commodity tariff rate in EC3\r\nUPDATE  s\r\nSET s.GasRateCode = a.CommodityTariffRate \r\nFROM NationalGridWest.UploadLegacyKeyspanWestCancellationSummary AS s, Billing.Account AS a\r\nWHERE s.OriginalAccountNumber = a.OriginalAccountNumber\r\n\r\n/*******************************\r\n4. Merge summary data into adjustment\r\n*********************************/\r\n\r\nUPDATE  UploadAdjustmentGas\r\nSET     UploadAdjustmentGas.[NumberOfTransactions] = UploadAdjustmentGas.[NumberOfTransactions] + CancelSummary.[NumberOfTransactions],\r\n        UploadAdjustmentGas.[NumberOfCancelTransactions] = CancelSummary.[NumberOfTransactions],\r\n        UploadAdjustmentGas.[TotalCanceledAmount] = CancelSummary.[TotalCanceledAmount],\r\n        UploadAdjustmentGas.[CancelFromDate] = CancelSummary.[CancelFromDate],\r\n        UploadAdjustmentGas.[CancelToDate] = CancelSummary.[CancelToDate],\r\n        UploadAdjustmentGas.[CancelTotalCCF] = CancelSummary.[CancelTotalCCF],\r\n        UploadAdjustmentGas.[CancelTotalTherms] = CancelSummary.[CancelTotalTherms],\r\n        UploadAdjustmentGas.[CancelThermsFactor] = CancelSummary.[CancelThermsFactor],\r\n        UploadAdjustmentGas.[CancelBillingDays] = CancelSummary.[CancelBillingDays],\r\n        UploadAdjustmentGas.[Notes] \r\n\t\t\t= CAST(( CASE UploadAdjustmentGas.[Notes]\r\n                                               WHEN NULL THEN ''\r\n                                               ELSE 'Rebill: '\r\n                                                    + UploadAdjustmentGas.[Notes]\r\n                                                    + ' '\r\n                                             END )\r\n\t\t\t\t\t+ ( CASE CancelSummary.[Notes]\r\n\t\t\t\t\t  WHEN NULL THEN ''\r\n\t\t\t\t\t  ELSE 'Cancel: ' + CancelSummary.[Notes]\r\n\t\t\t\t\tEND ) AS VARCHAR(300))\r\nFROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas AS UploadAdjustmentGas\r\n        INNER JOIN ( \r\n\t\t\t\t\tSELECT UploadLegacyKeyspanWestCancellationSummary.OriginalAccountNumber,\r\n                           UploadLegacyKeyspanWestCancellationSummary.BillingPeriodRevision,\r\n                           COUNT(*) AS NumberOfTransactions,        -- ,[NumberOfTransactions] \r\n                           0 AS NumberOfRebilledTransactions, -- ,[NumberOfRebillTransactions]             \r\n                           COUNT(*) AS NumberOfCancelTransactions, -- ,[NumberOfCancelTransactions]\r\n                           SUM(TotalCanceledAmount) AS TotalCanceledAmount,\r\n                           MIN(UploadLegacyKeyspanWestCancellationSummary.CancelFromDate) AS CancelFromDate,     --               ,<CancelFromDate, yyyymmdd,>\r\n                           MAX(UploadLegacyKeyspanWestCancellationSummary.CancelToDate) AS CancelToDate,     --               ,<CancelToDate, yyyymmdd,>\r\n                            SUM(UploadLegacyKeyspanWestCancellationSummary.CancelTotalCCF) AS CancelTotalCCF,     --               ,<CancelTotalCCF, EnergyUnit,>\r\n                            SUM(UploadLegacyKeyspanWestCancellationSummary.CancelTotalTherms) CancelTotalTherms,     --               ,<CancelTotalTherms, EnergyUnit,>\r\n                            MIN(UploadLegacyKeyspanWestCancellationSummary.CancelThermsFactor) CancelThermsFactor,     --               ,<CancelThermsFactor, ThermsFactor,>\r\n                            dbo.CalculateNumberOfBillingDays(MIN(UploadLegacyKeyspanWestCancellationSummary.CancelFromDate),\r\n                                                             MAX(UploadLegacyKeyspanWestCancellationSummary.CancelToDate)) AS CancelBillingDays,   --               ,<CancelBillingDays, int,>\r\n                            MAX(UploadLegacyKeyspanWestCancellationSummary.Notes) AS notes\r\n                     FROM NationalGridWest.UploadLegacyKeyspanWestCancellationSummary\r\n                     GROUP BY UploadLegacyKeyspanWestCancellationSummary.OriginalAccountNumber,\r\n                            UploadLegacyKeyspanWestCancellationSummary.BillingPeriodRevision\r\n                   ) AS CancelSummary ON UploadAdjustmentGas.OriginalAccountNumber = CancelSummary.OriginalAccountNumber\r\n                                         AND UploadAdjustmentGas.BillingPeriodRevision = cancelSummary.BillingPeriodRevision\r\n\r\n\r\n\r\n/* =========================== */\r\n\r\nINSERT INTO NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas\r\n\t([AdjustedAccount]\r\n\t   ,[AccountUtilityCompanySeqid]\r\n\t   ,[NumberOfTransactions]\r\n\t   ,[NumberOfRebillTransactions]\r\n\t   ,[NumberOfCancelTransactions]\r\n\t   ,[OriginalAccountNumber]\r\n\t   ,[BillingPeriod]\r\n\t   ,[BillingPeriodRevision]\r\n\t   ,[FirstCanceledBillingPeriod]\r\n\t   ,[EstimatedOrActualBilling]\r\n\t   ,[InitialCancelFromDate]\r\n\t   ,[CurrentBillingToDate]\r\n\t   ,[NumberOfBillingPeriods]\r\n\t   ,[TotalBillingDaysRebilled]\r\n\t   ,[TotalRebilledAmount]\r\n\t   ,[TotalCanceledAmount]\r\n\t   ,[AverageRebillCostOfGasCharge]\r\n\t   ,[AverageRebillThermsFactor]\r\n\t   ,[BillingDays]\r\n\t   ,[BillingDate]\r\n\t   ,[ToDate]\r\n\t   ,[FromDate]\r\n\t   ,[BillingAction]\r\n\t   ,[ProcessedInTheCurrentPeriod]\r\n\t   ,[GasRateCode]\r\n\t   ,[TotalCCF]\r\n\t   ,[TotalTherms]\r\n\t   ,[ThermsFactor]\r\n\t   ,[CancelFromDate]\r\n\t   ,[CancelToDate]\r\n\t   ,[CancelTotalCCF]\t\t\t\r\n\t   ,[CancelTotalTherms]\t\t\t\r\n\t   ,[CancelThermsFactor]\t\t\t\r\n\t   ,[CancelBillingDays]\t\r\n\t   ,[ProcessEffectiveDate]\r\n\t   ,[DerivedFromSpannedBill]\r\n\t   ,[SpannedBillingPeriodRevision]\r\n\t   ,[SpannedFirstCanceledBillingPeriod]\r\n\t   ,[SpannedBilledAmount]\r\n\t   ,[SpannedCCF]\r\n\t   ,[SpannedThermFactor]\r\n\t   ,[SpannedTherm]\r\n\t   ,[SpannedMonthlyPercentage]\r\n\t   ,[SpannedTotalPercentage]\t\t\t\r\n\t   ,[Notes]\t\t\t\r\n\t   ,[AuthenticatedUserID]\t\t\t\r\n\t   ,[DateAdded]\t\t\t\r\n\t   ,[LastUpdate]\t\t\t\r\n\t   ,[FacilityName]\r\n\t   ,[ServiceAddress]\r\n\t   )\t\r\n\r\n\tSELECT \t\t\t\r\n\t\tNULL\t,\t--\t           (<AdjustedAccount, seqid,>\r\n\t\t2\t,\t--\t           ,<AccountUtilityCompanySeqid, seqid,>\r\n\t\tcount(*)\t,\t   -- ,[NumberOfTransactions]\t\r\n\t\t0 , -- [NumberOfRebillTransactions]\t\t\t\r\n\t\tcount(*), -- [NumberOfCancelTransactions]\t\r\n\t\tOriginalAccountNumber,\t-- <OriginalAccountNumber, acctnum,>\r\n\t\tMAX(BillingPeriod),\t-- <BillingPeriod, BillingPeriod,>\t\r\n\t\tBillingPeriodRevision,\t-- <BillingPeriodRevision, BillingPeriodRevision,>\r\n\t\tNationalGridWest.DetermineBillingPeriod(@BillingCycle, Min(CancelFromDate), 'F', substring(max(OriginalAccountNumber),12,2)) as 'FirstCanceledBillingPeriod', --<FirstCancelPeriod, yyyymm,>\r\n\t\t'ACT' as 'EstimatedOrActualBilling',\r\n\t\tMIN(InitialCancelFromDate)\t,\t--\t           ,<InitialCancelFromDate, yyyymmdd,>\r\n\t\tMAX(CurrentBillingToDate)\t,\t--\t           ,<CurrentBillingToDate, yyyymmdd,>\r\n\t\t[dbo].[CalculateDeltaBillingPeriods]\r\n\t\t(\r\n\t\t\tNationalGridWest.DetermineBillingPeriod(@BillingCycle, Min(CancelFromDate), 'F', substring(OriginalAccountNumber,12,2)),\r\n\t\t\tNationalGridWest.DetermineBillingPeriod(@BillingCycle, Min(CancelToDate), 'T', substring(OriginalAccountNumber,12,2)),\r\n\t\t\t@BillingCycle                                                      \r\n\t\t) as 'NumberOfBillingPeriods',\r\n\t\tdbo.CalculateNumberOfBillingDays(MIN(CancelFromDate),MAX(CancelToDate))\t,\t--\t           ,<TotalBillingDaysRebilled, int,>\r\n\t\tSUM(TotalRebilledAmount)\t,\t--\t           ,<TotalRebilledAmount, money,>\r\n\t\tSUM(TotalCanceledAmount)\t,\t--\t           ,<TotalCanceledAmount, money,>\r\n\t\tAVG(CostOfGasCharge)\t,\t--\t           ,<AverageRebillCostOfGasCharge, money,>\r\n\t\tAVG(ThermsFactor)\t,\t--\t           ,<AverageRebillThermsFactor, ThermsFactor,>\r\n\t\t0\t,\t--\t           ,<BillingDays, int,>\r\n\t\tMAX(BillingDate)\t,\t--\t           ,<BillingDate, int,>\r\n\t\tMAX(ToDate)\t,\t--\t           ,<ToDate, yyyymmdd,>\r\n\t\tMIN(FromDate)\t,\t--\t           ,<FromDate, yyyymmdd,>\r\n\t\tCASE WHEN MAX(BillingPeriod)=MIN(BillingPeriodRevision) THEN 'O' ELSE 'A' END\t,\t--\t          ,<BillingAction, BillingAction,>\r\n\t\t'N'\t,\t--\t  !!!         ,<ProcessedInTheCurrentPeriod, yesno,>\r\n\t\tMAX(GasRateCode)\t,\t--\t           ,<GasRateCode, varchar(3),>\r\n\t\tSUM(TotalCCF)\t,\t--\t           ,<TotalCCF, EnergyUnit,>\r\n\t\tSUM(TotalTherms)\t,\t--\t           ,<TotalTherms, EnergyUnit,>\r\n\t\tmin(ThermsFactor)\t,\t--\t           ,<ThermsFactor, ThermsFactor,>\r\n\t\tMIN(CancelFromDate)\t,\t--\t           ,<CancelFromDate, yyyymmdd,>\r\n\t\tMAX(CancelToDate)\t,\t--\t           ,<CancelToDate, yyyymmdd,>\r\n\t\tSUM(CancelTotalCCF)\t,\t--\t           ,<CancelTotalCCF, EnergyUnit,>\r\n\t\tSUM(CancelTotalTherms)\t,\t--\t           ,<CancelTotalTherms, EnergyUnit,>\r\n\t\tMIN(CancelThermsFactor)\t,\t--\t           ,<CancelThermsFactor, ThermsFactor,>\r\n\t\tdbo.CalculateNumberOfBillingDays(MIN(CancelFromDate),MAX(CancelToDate))\t,\t--\t           ,<CancelBillingDays, int,>\r\n\t\t[dbo].ConvertDateToYYYYMMDD (GETDATE()),\t--\t           ,<ProcessEffectiveDate, varchar(8),>\r\n\t\tMAX(DerivedFromSpannedBill),\r\n\t\tMAX(SpannedBillingPeriodRevision),\r\n\t\tMAX(SpannedFirstCanceledBillingPeriod),\r\n\t\tCASE WHEN MAX(SpannedBilledAmount)>0 then max(SpannedBilledAmount)\r\n\t\telse min(SpannedBilledAmount) end AS SpannedBilledAmount,\r\n\t\tCASE WHEN MAX(SpannedCCF)>0 then max(SpannedCCF)\r\n\t\telse min(SpannedCCF) end AS SpannedCCF,\r\n\t\tMAX(SpannedThermFactor),\r\n\t\tCASE WHEN MAX(SpannedTherm)>0 then max(SpannedTherm)\r\n\t\telse min(SpannedTherm) end AS SpannedTherm,\r\n\t\tmin(SpannedMonthlyPercentage),\r\n\t\tmin(SpannedTotalPercentage) ,\r\n\t\tMAX(Notes),\t\t\t\r\n\t\tMAX(AuthenticatedUserID),\t\t\t\r\n\t\tGETDATE(),\t\t\t\r\n\t\tGETDATE(),\t\t\t\r\n\t\tmax(FacilityName),\r\n\t\tmax(ServiceAddress)\r\n\t\tFROM NationalGridWest.UploadLegacyKeyspanWestCancellationSummary\r\n\t\tWHERE UploadLegacyKeyspanCancellationSummarySeqid\r\n\t\tNOT IN\r\n\t\t(\r\n\t\t\t  SELECT UploadLegacyKeyspanCancellationSummarySeqid\r\n\t\t\t  FROM NationalGridWest.UploadLegacyKeyspanWestCancellationSummary AS cancelSum\r\n\t\t\t  INNER JOIN NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas AS adj\r\n\t\t\t  ON cancelSum.BillingPeriodRevision = adj.BillingPeriodRevision \r\n\t\t\t  AND cancelSum.OriginalAccountNumber = adj.OriginalAccountNumber\r\n\t\t)\r\n\t\tGROUP BY UploadLegacyKeyspanWestCancellationSummary.OriginalAccountNumber, UploadLegacyKeyspanWestCancellationSummary.BillingPeriodRevision\r\n\r\n/*\r\nINSERT INTO NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas\r\n\t([AdjustedAccount]\r\n\t   ,[AccountUtilityCompanySeqid]\r\n\t   ,[NumberOfTransactions]\r\n\t   ,[NumberOfRebillTransactions]\r\n\t   ,[NumberOfCancelTransactions]\r\n\t   ,[OriginalAccountNumber]\r\n\t   ,[BillingPeriod]\r\n\t   ,[BillingPeriodRevision]\r\n\t   ,[FirstCanceledBillingPeriod]\r\n\t   ,[EstimatedOrActualBilling]\r\n\t   ,[InitialCancelFromDate]\r\n\t   ,[CurrentBillingToDate]\r\n\t   ,[NumberOfBillingPeriods]\r\n\t   ,[TotalBillingDaysRebilled]\r\n\t   ,[TotalRebilledAmount]\r\n\t   ,[TotalCanceledAmount]\r\n\t   ,[AverageRebillCostOfGasCharge]\r\n\t   ,[AverageRebillThermsFactor]\r\n\t   ,[BillingDays]\r\n\t   ,[BillingDate]\r\n\t   ,[ToDate]\r\n\t   ,[FromDate]\r\n\t   ,[BillingAction]\r\n\t   ,[ProcessedInTheCurrentPeriod]\r\n\t   ,[GasRateCode]\r\n\t   ,[TotalCCF]\r\n\t   ,[TotalTherms]\r\n\t   ,[ThermsFactor]\r\n\t   ,[CancelFromDate]\r\n\t   ,[CancelToDate]\r\n\t   ,[CancelTotalCCF]\t\t\t\r\n\t   ,[CancelTotalTherms]\t\t\t\r\n\t   ,[CancelThermsFactor]\t\t\t\r\n\t   ,[CancelBillingDays]\t\r\n\t   ,[ProcessEffectiveDate]\r\n\t   ,[DerivedFromSpannedBill]\r\n\t   ,[SpannedBillingPeriodRevision]\r\n\t   ,[SpannedFirstCanceledBillingPeriod]\r\n\t   ,[SpannedBilledAmount]\r\n\t   ,[SpannedCCF]\r\n\t   ,[SpannedThermFactor]\r\n\t   ,[SpannedTherm]\r\n\t   ,[SpannedMonthlyPercentage]\r\n\t   ,[SpannedTotalPercentage]\t\t\t\r\n\t   ,[Notes]\t\t\t\r\n\t   ,[AuthenticatedUserID]\t\t\t\r\n\t   ,[DateAdded]\t\t\t\r\n\t   ,[LastUpdate]\t\t\t\r\n\t   ,[FacilityName]\r\n\t   ,[ServiceAddress]\r\n\t   )\t\r\n\r\n\tSELECT \t\t\t\r\n\t\tNULL\t,\t--\t           (<AdjustedAccount, seqid,>\r\n\t\t2\t,\t--\t           ,<AccountUtilityCompanySeqid, seqid,>\r\n\t\tcount(*)\t,\t   -- ,[NumberOfTransactions]\t\r\n\t\t0 , -- [NumberOfRebillTransactions]\t\t\t\r\n\t\tcount(*), -- [NumberOfCancelTransactions]\t\r\n\t\tOriginalAccountNumber,\t-- <OriginalAccountNumber, acctnum,>\r\n\t\tMAX(BillingPeriod),\t-- <BillingPeriod, BillingPeriod,>\t\r\n\t\tBillingPeriodRevision,\t-- <BillingPeriodRevision, BillingPeriodRevision,>\r\n\t\tNationalGridWest.DetermineBillingPeriod(@BillingCycle, Min(CancelFromDate), 'F', substring(max(OriginalAccountNumber),12,2)) as 'FirstCanceledBillingPeriod', --<FirstCancelPeriod, yyyymm,>\r\n\t\t'ACT' as 'EstimatedOrActualBilling',\r\n\t\tMIN(InitialCancelFromDate)\t,\t--\t           ,<InitialCancelFromDate, yyyymmdd,>\r\n\t\tMAX(CurrentBillingToDate)\t,\t--\t           ,<CurrentBillingToDate, yyyymmdd,>\r\n\t\t[dbo].[CalculateDeltaBillingPeriods]\r\n\t\t(\r\n\t\t\tNationalGridWest.DetermineBillingPeriod(@BillingCycle, Min(CancelFromDate), 'F', substring(OriginalAccountNumber,12,2)),\r\n\t\t\tNationalGridWest.DetermineBillingPeriod(@BillingCycle, Min(CancelToDate), 'T', substring(OriginalAccountNumber,12,2)),\r\n\t\t\t@BillingCycle                                                      \r\n\t\t) as 'NumberOfBillingPeriods',\r\n\t\tdbo.CalculateNumberOfBillingDays(MIN(CancelFromDate),MAX(CancelToDate))\t,\t--\t           ,<TotalBillingDaysRebilled, int,>\r\n\t\tSUM(TotalRebilledAmount)\t,\t--\t           ,<TotalRebilledAmount, money,>\r\n\t\tSUM(TotalCanceledAmount)\t,\t--\t           ,<TotalCanceledAmount, money,>\r\n\t\tAVG(CostOfGasCharge)\t,\t--\t           ,<AverageRebillCostOfGasCharge, money,>\r\n\t\tAVG(ThermsFactor)\t,\t--\t           ,<AverageRebillThermsFactor, ThermsFactor,>\r\n\t\t0\t,\t--\t           ,<BillingDays, int,>\r\n\t\tMAX(BillingDate)\t,\t--\t           ,<BillingDate, int,>\r\n\t\tMAX(ToDate)\t,\t--\t           ,<ToDate, yyyymmdd,>\r\n\t\tMIN(FromDate)\t,\t--\t           ,<FromDate, yyyymmdd,>\r\n\t\tCASE WHEN MAX(BillingPeriod)=MIN(BillingPeriodRevision) THEN 'O' ELSE 'A' END\t,\t--\t          ,<BillingAction, BillingAction,>\r\n\t\t'N'\t,\t--\t  !!!         ,<ProcessedInTheCurrentPeriod, yesno,>\r\n\t\tMAX(GasRateCode)\t,\t--\t           ,<GasRateCode, varchar(3),>\r\n\t\tSUM(TotalCCF)\t,\t--\t           ,<TotalCCF, EnergyUnit,>\r\n\t\tSUM(TotalTherms)\t,\t--\t           ,<TotalTherms, EnergyUnit,>\r\n\t\tmin(ThermsFactor)\t,\t--\t           ,<ThermsFactor, ThermsFactor,>\r\n\t\tMIN(CancelFromDate)\t,\t--\t           ,<CancelFromDate, yyyymmdd,>\r\n\t\tMAX(CancelToDate)\t,\t--\t           ,<CancelToDate, yyyymmdd,>\r\n\t\tSUM(CancelTotalCCF)\t,\t--\t           ,<CancelTotalCCF, EnergyUnit,>\r\n\t\tSUM(CancelTotalTherms)\t,\t--\t           ,<CancelTotalTherms, EnergyUnit,>\r\n\t\tMIN(CancelThermsFactor)\t,\t--\t           ,<CancelThermsFactor, ThermsFactor,>\r\n\t\tdbo.CalculateNumberOfBillingDays(MIN(CancelFromDate),MAX(CancelToDate))\t,\t--\t           ,<CancelBillingDays, int,>\r\n\t\t[dbo].ConvertDateToYYYYMMDD (GETDATE()),\t--\t           ,<ProcessEffectiveDate, varchar(8),>\r\n\t\tMAX(DerivedFromSpannedBill),\r\n\t\tMAX(SpannedBillingPeriodRevision),\r\n\t\tMAX(SpannedFirstCanceledBillingPeriod),\r\n\t\tCASE WHEN MAX(SpannedBilledAmount)>0 then max(SpannedBilledAmount)\r\n\t\telse min(SpannedBilledAmount) end AS SpannedBilledAmount,\r\n\t\tCASE WHEN MAX(SpannedCCF)>0 then max(SpannedCCF)\r\n\t\telse min(SpannedCCF) end AS SpannedCCF,\r\n\t\tMAX(SpannedThermFactor),\r\n\t\tCASE WHEN MAX(SpannedTherm)>0 then max(SpannedTherm)\r\n\t\telse min(SpannedTherm) end AS SpannedTherm,\r\n\t\tmin(SpannedMonthlyPercentage),\r\n\t\tmin(SpannedTotalPercentage) ,\r\n\t\tMAX(Notes),\t\t\t\r\n\t\tMAX(AuthenticatedUserID),\t\t\t\r\n\t\tGETDATE(),\t\t\t\r\n\t\tGETDATE(),\t\t\t\r\n\t\tmax(FacilityName),\r\n\t\tmax(ServiceAddress)\r\n\t\tFROM NationalGridWest.UploadLegacyKeyspanWestCancellationSummary\t\r\n\t\tGROUP BY OriginalAccountNumber, BillingPeriodRevision\t\r\n\r\n\r\n\r\n------------ Now when Rebills and Cancels are in UploadConEdisonAccountBillingAdjustmentGas table------------------\r\n\r\n--- Uniting Rebills with existing Cancels (Temporarily here)\r\n\r\nupdate a1 -- NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas  \r\n\tset \r\n\t[NumberOfTransactions]=a1.[NumberOfTransactions]+a2.[NumberOfTransactions],\r\n\t[NumberOfCancelTransactions]=a2.[NumberOfTransactions],\r\n\t[TotalCanceledAmount]=a2.[TotalCanceledAmount],\r\n\t[CancelFromDate]=a2.[CancelFromDate],\r\n\t[CancelToDate]=a2.[CancelToDate],\r\n\t[CancelTotalCCF]=a2.[CancelTotalCCF],\r\n\t[CancelTotalTherms]=a2.[CancelTotalTherms],\r\n\t[CancelThermsFactor]=a2.[CancelThermsFactor],\r\n\t[CancelBillingDays]=a2.[CancelBillingDays],\r\n\t[Notes]=CAST((CASE a2.[Notes] WHEN null THEN '' ELSE 'Rebill: '+a2.[Notes]+' ' END) + (CASE a2.[Notes] WHEN null THEN '' ELSE 'Cancel: '+a2.[Notes] END) AS varchar(300))\r\n\t\r\nfrom \r\n   NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas as a1\r\n\tINNER JOIN\r\n   NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas AS a2\r\n\tON \r\n\ta1.OriginalAccountNumber = a2.OriginalAccountNumber \r\n\tAND\r\n\ta1.BillingPeriodRevision = a2.BillingPeriodRevision\r\nWHERE (a1.NumberOfRebillTransactions > 0) AND \r\n      (a2.NumberOfCancelTransactions > 0)\r\n\r\n\r\n--- Deleting Cancels that had Rebills\r\nDELETE FROM \r\nNationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas\r\nFROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas INNER JOIN\r\nNationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas AS a1 \r\nON \r\nUploadLegacyKeyspanWestAccountBillingAdjustmentGas.OriginalAccountNumber = a1.OriginalAccountNumber AND\r\nUploadLegacyKeyspanWestAccountBillingAdjustmentGas.BillingPeriodRevision = a1.BillingPeriodRevision AND\r\nUploadLegacyKeyspanWestAccountBillingAdjustmentGas.UploadLegacyKeyspanWestAccountBillingAdjustmentGasSeqid <> a1.UploadLegacyKeyspanWestAccountBillingAdjustmentGasSeqid\r\nWHERE (UploadLegacyKeyspanWestAccountBillingAdjustmentGas.NumberOfCancelTransactions > 0) AND \r\n  (a1.NumberOfCancelTransactions > 0 AND a1.NumberOfRebillTransactions > 0)\r\n\r\n\r\n--- Update Cancels that had no Rebills\r\nUPDATE NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas \r\nSET\r\n    [FromDate]=[CancelFromDate]\r\n   ,[ToDate]=[CancelToDate]\r\nWHERE  (NumberOfCancelTransactions > 0) AND (NumberOfRebillTransactions = 0)\r\n\r\n\r\n*/\r\nEND"
        }
      ]
    }
  ]
}