{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessExchangeCode_AX",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessExchangeCode_AX",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to handle a specific type of account exchange process, denoted by the exchange code \"AX\". This process involves updating an existing account with a new account number and associating existing meters with this new account number. The procedure is part of a billing system for a utility company and is executed within the context of a specific billing period and utility company."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the user executing the procedure, used for auditing purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@ExchangeSeqid AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The sequence ID of the exchange record to be processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@XchangeCode AS VARCHAR(2)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The exchange code, which should be \"AX\" for this procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@CurrentBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The current billing period in the format YYYYMM."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@UtilityCompanySeqid AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The sequence ID of the utility company involved in the exchange."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@CommitTransaction AS VARCHAR(1) OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter indicating whether the transaction was committed ('Y') or not ('N')."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter indicating the execution status, where 0 is success and 1 is failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure initializes several local variables, including default values for unknown agency and facility sequence IDs, and a carriage return/line feed character sequence."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It checks if the "
                },
                {
                  "type": "text",
                  "text": "@XchangeCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is 'AX'. If not, the procedure does not proceed with the exchange logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves the current billing period, account numbers, and meter numbers from the "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table based on the provided "
                },
                {
                  "type": "text",
                  "text": "@ExchangeSeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Old Account Identification",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It identifies the old account to be exchanged by joining the "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "New Account Creation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A new account is created in the "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table using data from the old account and the exchange data. The new account is assigned a status of 'AC' (active) and a previous status of 'NX' (new exchange)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Account Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The old account is updated with the new current account number and marked with a status of 'AX' (account exchange)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Meter Association",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Meters associated with the old account are updated to reflect the new account number in the "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountExchangeMeterTrack",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Marking as Processed",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The exchange record in "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is marked as processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure includes a TRY-CATCH block to handle errors, logging detailed error information and setting the status code to 1 in case of failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " tables are properly indexed on columns used in joins and WHERE clauses to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not explicitly manage transactions (BEGIN TRANSACTION/COMMIT/ROLLBACK), which could lead to partial updates in case of failure. Consider wrapping the logic in a transaction block."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "ident_current",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to retrieve the last inserted ID may not be reliable in a high-concurrency environment. Consider using "
                },
                {
                  "type": "text",
                  "text": "SCOPE_IDENTITY()",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " instead."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Without explicit transaction management, there is a risk of data inconsistency if an error occurs mid-procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The error handling mechanism logs errors but does not roll back changes, which could leave the database in an inconsistent state."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses hardcoded values for unknown agency and facility sequence IDs, which may not be appropriate for all environments."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's reliance on sequential processing and potential lack of indexing could impact performance as data volume grows."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the procedure is executed with appropriate permissions to prevent unauthorized data access or modification."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Description: Meter exchange \"AX\" exhchange process that exchanges an existing account with a new \r\n--*\t\t\taccount number and associate the existing meters with the new account number\r\n--*\r\n--* Exec:usp_ProcessExchangeCode_AX\r\n--*\r\n--* Parameter(s):\r\n--* ExchangeSeqidint  - The sequence id of the exchange record to be processed\r\n--* ExchangeCode varchar(2)- The exchange code of the exchange record to be processed,\r\n--*\t\t\t\t\t\t\t\tit should be a \"AX\" for this procedure.\r\n--* BillingPeriod varchar(6) - Current billing period\r\n--* UtilityCompanySeqid INT- The sequence id of the Utility Companyto be processed\r\n--* StatusCode  INT output -  Execution Return Status \r\n--*\r\n--* Database:  OEC\r\n--*\r\n--* Return:\t  0 Success\r\n--*  1 Failure\r\n--*\r\n--* AUTHOR: Peter Heller (PAH)\r\n--* Created On:10/26/2005\r\n--**************************************************************************************\r\n--* DateTech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 10/26/2005 PAH  First Version  \r\n--* 05/25/2014 PAH  Join the exchange and the account tables and find the old active account that is to be exchanged\r\n--* 04/09/2019 VYModified for EnergySubTypeID\r\n--***************************************************************************************\r\nCREATE PROCEDURE [Nypa].[usp_ProcessExchangeCode_AX]\r\n(\r\n\t@AuthenticatedUserID AS INT,\r\n\t@ExchangeSeqid AS INT,\r\n\t@XchangeCode AS VARCHAR(2),\r\n\t@CurrentBillingPeriod AS VARCHAR(6),\r\n\t@UtilityCompanySeqid AS INT,\r\n\t@CommitTransaction AS VARCHAR(1) OUTPUT,\r\n\t@StatusCode AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tDECLARE @UnknownAgencySeqid INT, @UnknownFacilitySeqid INT, @EnergyDeliveryTypeSeqid INT, @OldAccountSeqid INT\r\n\t,@CurrentAccountSeqid  INT, @BillingPeriod NVARCHAR(6), @CurrentAccountNumber NVARCHAR(15), @OriginalAccountNumber NVARCHAR(15)\r\n\t,@CurrentMeterNumber NVARCHAR(12), @OriginalMeterNumber NVARCHAR(12), @crlf varchar(2);\r\n\r\n\tSELECT @UnknownAgencySeqid = 396, @UnknownFacilitySeqid = 4623, @EnergyDeliveryTypeSeqid = 1, @crlf = CHAR(13) + CHAR(10);\r\n\r\n\tIF (@XchangeCode = 'AX')\r\n\tBEGIN\r\n\t\tBEGIN TRY\r\n\t\t\tSELECT @CommitTransaction = 'Y', @StatusCode  = 0;\r\n\t\t\tSELECT  \r\n\t\t\t\t@BillingPeriod = BillingPeriod, \r\n\t\t\t\t@CurrentAccountNumber=CurrentAccountNumber, @OriginalAccountNumber=OriginalAccountNumber, \r\n\t\t\t\t@CurrentMeterNumber=CurrentMeterNumber, @OriginalMeterNumber = OriginalMeterNumber \r\n\t\t\tFROM Nypa.UploadNYPAExchangeData\t\t\t\t\t\t\r\n\t\t\tWHERE UploadNYPAExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\t\t\t-- Join the exchange and the account tables and find the old account that is to be exchanged\r\n\t\t\tSELECT @OldAccountSeqid = A.AccountSeqid\r\n\t\t\tFROM Billing.Account AS A INNER JOIN\r\n\t\t\t\tNypa.UploadNYPAExchangeData AS ED ON A.OriginalAccountNumber = ED.OriginalAccountNumber AND \r\n\t\t\t\tA.CurrentAccountNumber = ED.OriginalAccountNumber\r\n\t\t\tWHERE ED.UploadNYPAExchangeDataSeqid = @ExchangeSeqid AND A.AccountStatus <> '28';\r\n\r\n\t\t\t-- Create New Account from the existing Account information and changing the account numbers \r\n\t\t\t-- based upon the Exchange data.\r\n\t\t\tINSERT INTO Billing.Account\r\n\t\t\t\t(CurrentAccountNumber, OriginalAccountNumber,ExcessDistributionAssocEnergyAccount, IsExcessDistribution, CommodityAssocDeliveryAccount, IsCommodityAccount, UtilityAccountProvider, \r\n\t\t\t\tAgencyAccount, FacilityAccount, ManualDataEntry, AccountStatus, AccountPreviousStatus, AccountStatusCodePeriod, CurrentInvoiceAccountGroup, \r\n\t\t\t\tAccountEffectiveTurnOn, AccountEffectiveTurnOff, EnergySource, EnergyAccountDescription, \r\n\t\t\t\tEnergyDeliverySubTypeId, /* added on 4/9/2019 */\r\n\t\t\t\tSalesType, DeliveryTariffRate, DeliveryTariffEffectiveDate, \r\n\t\t\t\tCommodityTariffRate, CommodityTariffEffectiveDate, BillingCycle, Delivery, AccountInMultipleBuildings, SourceOfRevenue, TurnOnDate, TurnOffDate, \r\n\t\t\t\tIsTimeOfDayAccount, MunicipalCode, Territory, Tension, TripNumber, PartSupplied, UtilityServiceAccountName, UtilityServiceAddress, Borough, Block, \r\n\t\t\t\tLotNumber, CityPlanningBIN, ELOAgencyAddress, LastPeriodOriginalBilled, LastPeriodAdjustmentBilled,  \r\n\t\t\t\tAdjustmentRecordSeqid, Notes, AuthenticatedUserID, DateAdded, LastUpdate)\r\n\t\t\tSELECT \tED.CurrentAccountNumber, ED.CurrentAccountNumber,\r\n\t\t\t\tA.ExcessDistributionAssocEnergyAccount, A.IsExcessDistribution, A.CommodityAssocDeliveryAccount, \r\n\t\t\t\tA.IsCommodityAccount, A.UtilityAccountProvider, A.AgencyAccount, A.FacilityAccount, A.ManualDataEntry, \r\n\t\t\t\t'AC', 'NX', ED.BillingPeriod, A.CurrentInvoiceAccountGroup, ED.AccountEffectiveTurnOn, \r\n\t\t\t\t'99991231', -- ED.AccountEffectiveTurnOff, \r\n\t\t\t\tA.EnergySource, A.EnergyAccountDescription, \r\n\t\t\t\tA.EnergyDeliverySubTypeId, /* added on 4/9/2019 */\r\n\t\t\t\tA.SalesType, A.DeliveryTariffRate, A.DeliveryTariffEffectiveDate, A.CommodityTariffRate, \r\n\t\t\t\tA.CommodityTariffEffectiveDate, A.BillingCycle, A.Delivery, A.AccountInMultipleBuildings, A.SourceOfRevenue, \r\n\t\t\t\tA.TurnOnDate, A.TurnOffDate, A.IsTimeOfDayAccount, A.MunicipalCode, A.Territory, A.Tension, \r\n\t\t\t\tA.TripNumber, A.PartSupplied, A.UtilityServiceAccountName, A.UtilityServiceAddress, A.Borough, A.Block, \r\n\t\t\t\tA.LotNumber, A.CityPlanningBIN, A.ELOAgencyAddress, A.LastPeriodOriginalBilled, A.LastPeriodAdjustmentBilled, \r\n\t\t\t\tA.AdjustmentRecordSeqid, A.Notes, ED.authenticatedUserID, getDate(), getDate()\r\n\t\t\tFROM Billing.Account AS A INNER JOIN Nypa.UploadNYPAExchangeData AS ED ON A.OriginalAccountNumber = ED.OriginalAccountNumber AND \r\n\t\t\t\tA.CurrentAccountNumber = ED.OriginalAccountNumber\r\n\t\t\tWHERE ED.UploadNYPAExchangeDataSeqid = @ExchangeSeqid AND A.AccountSeqid = @OldAccountSeqid;\r\n\t\t\t\r\n\t\t\t-- Get the Current Account sequence id after it is inserted\r\n\t\t\tSELECT @CurrentAccountSeqid  = ident_current('Billing.Account');\r\n\t\t\t\r\n\t\t\t--\tFind the account that is currently being exchanged update it with the \r\n\t\t\t--\tnew CurrentAccountNumber.\r\n\t\t\tUPDATE Billing.Account\r\n\t\t\tSET\r\n\t\t\t\tCurrentAccountNumber = ED.CurrentAccountNumber,\r\n\t\t\t\tAccountEffectiveTurnOff  = ED.AccountEffectiveTurnOn,\r\n\t\t\t\tAccountPreviousStatus = A.AccountStatus, \r\n\t\t\t\tAccountStatus = 'AX', \r\n\t\t\t\tAccountStatusCodePeriod =  @CurrentBillingPeriod, \r\n\t\t\t\tLastUpdate = getDate(),\r\n\t\t\t\tAuthenticatedUserID = @AuthenticatedUserID\r\n\t\t\tFROM Billing.Account AS A  INNER JOIN Nypa.UploadNYPAExchangeData AS ED \r\n\t\t\t\tON A.OriginalAccountNumber = ED.OriginalAccountNumber AND A.CurrentAccountNumber = ED.OriginalAccountNumber\r\n\t\t\tWHERE ED.UploadNYPAExchangeDataSeqid = @ExchangeSeqid AND A.AccountSeqid = @OldAccountSeqid;\r\n\t\t\t\r\n\t\t\t--\tFind the remainder of accounts that were previously exchanged and update their\r\n\t\t\t--\tCurrentAccountNumber with the newest replacement @CurrentAccountNumber\r\n\t\t\tUPDATE A\r\n\t\t\tSET A.CurrentAccountNumber = E.CurrentAccountNumber, LastUpdate = getDate(),\r\n\t\t\t\tA.AuthenticatedUserID = @AuthenticatedUserID\r\n\t\t\tFROM Billing.Account AS A INNER JOIN Nypa.UploadNYPAExchangeData AS E ON A.CurrentAccountNumber = E.OriginalAccountNumber\r\n\t\t\tWHERE A.UtilityAccountProvider = @UtilityCompanySeqid AND E.UploadNYPAExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\t\t\t--\tFind all of the meters that were on the old account number\r\n\t\t\t--\tand insert a an updated copy with the new CurrentAccountNumber and it's\r\n\t\t\t--\tinternal sequence id.\r\n\t\t\tINSERT INTO Billing.AccountExchangeMeterTrack\r\n\t\t\t\t(OriginalAccountSeqid, OriginalMeterSeqid, OriginalAccountNumber, OriginalMeterNumber, AuthenticatedUserID,\r\n\t\t\t\tUtilityCompanySeqid, OriginalAgencyDivisionSeqid, OriginalFacilitySeqid)\r\n\t\t\tSELECT @CurrentAccountSeqid, EM.OriginalMeterSeqid, ED.CurrentAccountNumber,\r\n\t\t\t\tEM.OriginalMeterNumber, @AuthenticatedUserID, EM.UtilityCompanySeqid, \r\n\t\t\t\tEM.OriginalAgencyDivisionSeqid, EM.OriginalFacilitySeqid\r\n\t\t\tFROM Billing.AccountExchangeMeterTrack AS EM INNER JOIN Nypa.UploadNYPAExchangeData AS ED ON EM.OriginalAccountNumber = ED.OriginalAccountNumber\r\n\t\t\t\tAND EM.UtilityCompanySeqid = ED.UtilityCompanyId\r\n\t\t\tWHERE EM.OriginalAccountSeqid = @OldAccountSeqid AND ED.UploadNYPAExchangeDataSeqid = @ExchangeSeqid;\r\n\t\t\t\r\n\t\t\tUPDATE Nypa.UploadNYPAExchangeData\r\n\t\t\tSET IsProcessed = 'Y'\r\n\t\t\tWHERE UploadNYPAExchangeDataSeqid = @ExchangeSeqid;\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\tDECLARE @ExchangeErrorMessage NVARCHAR(4000), @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT\r\n\t\t\t\t,@ErrorState INT, @ErrorNumber INT, @ErrorLine INT, @ErrorProcedure NVARCHAR(126);\r\n\t\t\t\r\n\t\t\tSELECT @ExchangeErrorMessage ='Error in StoredProcedure %125s at line number %8.0d'+@crlf+'NYPA Billing Period: %6s'+@crlf+'Exchange Sequence Id:%4.0d'+@crlf+'Account Current:Original (%15s : %15s)  '+@crlf,\r\n\t\t\t\t@ErrorMessage = ERROR_MESSAGE(), @ErrorSeverity = ERROR_SEVERITY(), @ErrorState = ERROR_STATE(),\r\n\t\t\t\t@ErrorNumber = ERROR_NUMBER(), @ErrorProcedure = ERROR_PROCEDURE(), @ErrorLine = ERROR_LINE();\t\t\t\r\n\t\t\t\t\r\n\t\t\tSET\t@ErrorMessage = @ExchangeErrorMessage + @ErrorMessage+@crlf+'@ErrorNumber: '+cast(@ErrorNumber as varchar(10))+@crlf;\r\n\r\n\t\t\tRAISERROR(@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine, @BillingPeriod\r\n\t\t\t\t,@ExchangeSeqid, @CurrentAccountNumber, @OriginalAccountNumber) with log;\r\n\t\t\t\r\n\t\t\tSELECT @StatusCode  = 1, @CommitTransaction = 'N';\r\n\t\tEND CATCH;\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}