{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Published_LookupTotalDollarsBtusAndRunningTotalCO2ByEnergyType_Upgrade",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Published_LookupTotalDollarsBtusAndRunningTotalCO2ByEnergyType_Upgrade",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve and format energy-related data, including total dollars, BTUs, and CO2 emissions, categorized by energy type. It logs the usage of the report and fetches data based on the type of entity (citywide, agency, or facility) specified by the input parameters. The procedure utilizes a function to generate fiscal year data and formats the output for reporting purposes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity is considered medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional logic branches based on input parameters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a combination of dynamic SQL function calls and formatted output."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It handles data retrieval from a user-defined table-valued function, which adds a layer of abstraction."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The email address of the user requesting the report, used for logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@CitywideAgencyOrFacility AS CHAR(2)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A code indicating the scope of the report (e.g., citywide, agency, or facility)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The billing period for which the report is generated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AgencyCode AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The code of the agency for which data is requested, applicable when the scope is agency or facility."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@FacilityNumber AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The facility number for which data is requested, applicable when the scope is facility."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by logging the report usage through a call to "
                },
                {
                  "type": "text",
                  "text": "Audit.usp_AddReportUsageLog",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", capturing details such as the report name, requested by, and billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Fiscal Year Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It calculates the prior fiscal year using the "
                },
                {
                  "type": "text",
                  "text": "dbo.CreateFiscalYear",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " function based on the published billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Depending on the "
                        },
                        {
                          "type": "text",
                          "text": "@CitywideAgencyOrFacility",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " parameter, it executes different branches of logic:"
                        }
                      ]
                    },
                    {
                      "type": "bulletList",
                      "content": [
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Citywide (`CW`, `CE`)",
                                  "marks": [
                                    {
                                      "type": "strong"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": ": Retrieves data for citywide entities, using a UNION ALL to combine results for different entity types."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Agency (`AG`, `AE`)",
                                  "marks": [
                                    {
                                      "type": "strong"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": ": Retrieves data for specific agencies, with results ordered by fiscal year, billing period, and energy type."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Facility (`FA`, `FE`)",
                                  "marks": [
                                    {
                                      "type": "strong"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": ": Retrieves data for specific facilities, similar to agency logic but includes facility-specific parameters."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output Formatting",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure formats numeric outputs (e.g., total billed amount, CO2, BTU) for readability using the "
                },
                {
                  "type": "text",
                  "text": "FORMAT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " function."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure sets the isolation level to READ UNCOMMITTED, which can improve performance by reducing locking but may result in reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a table-valued function ("
                },
                {
                  "type": "text",
                  "text": "Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") can impact performance depending on its internal complexity and execution plan."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "UNION ALL",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of UNION ALL can be efficient since it does not remove duplicates, but it may increase the result set size."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Consistency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The READ UNCOMMITTED isolation level may lead to dirty reads, which could affect the accuracy of the report if data is being modified concurrently."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of VARCHAR(MAX) for "
                },
                {
                  "type": "text",
                  "text": "@AgencyCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "@FacilityNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " might be excessive if these values are not expected to be large, potentially impacting memory usage."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and unclear failure points."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the input parameters are properly validated to prevent SQL injection, especially since the procedure involves dynamic data retrieval based on user input."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_Published_LookupTotalDollarsBtusAndRunningTotalCO2ByEnergyType_Upgrade]\n(\r\n\t@EmailAddress AS VARCHAR(75),\r\n\t@CitywideAgencyOrFacility AS CHAR(2),\r\n\t@PublishedBillingPeriod AS VARCHAR(6),\r\n\t@AgencyCode AS VARCHAR(MAX),\r\n\t@FacilityNumber AS VARCHAR(MAX)\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @spname VARCHAR(100) = OBJECT_NAME(@@PROCID);\r\n\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t@ReportName\t\t\t\t\t= @spname,\r\n    @StoredProcName\t\t\t\t= @spname,\r\n    @RequestedBy\t\t\t\t= @EmailAddress,    \r\n    @prmPublishedBillingPeriod\t= @PublishedBillingPeriod,\r\n    @prmBillingPeriod\t\t\t= NULL,\r\n    @prmAgency_ies\t\t\t\t= @AgencyCode,\r\n    @prmFacilityNumber_s\t\t= @FacilityNumber,\r\n    @prmStartingBillingPeriod\t= NULL,\r\n    @prmEndingBillingPeriod\t\t= NULL;\r\n\r\n\tDECLARE @PriorFY AS VARCHAR(4);\r\n\r\n\tSELECT @PriorFY = dbo.CreateFiscalYear(@PublishedBillingPeriod, 'P');\r\n\t\r\n\tIF (@CitywideAgencyOrFacility IN ('CW','CE'))\r\n\tBEGIN\r\n\t\tSELECT \r\n\t\t\t CitywideAgencyOrFacility,\r\n\t\t\t PublishedBillingPeriod,\r\n\t\t\t FiscalYear,\r\n\t\t\t BillingPeriod,\r\n\t\t\t EnergyType,\r\n\t\t\t AgencyCodeOEC,\r\n\t\t\t FacilityNumber,\r\n\t\t\t FORMAT(TotalBilledAmount, 'C0') AS TotalBilledAmount,\r\n\t\t\t FORMAT(TotalCO2, 'N0') AS TotalCO2,\r\n\t\t\t FORMAT(TotalBTU, 'N0') AS TotalBTU,\r\n\t\t\t FORMAT(PublishedBillingPeriodRunningTotalCO2, 'N0') AS PublishedBillingPeriodRunningTotalCO2,\r\n\t\t\t FORMAT(YtdRunningTotalCO2, 'N0') AS YtdRunningTotalCO2,\r\n\t\t\t [month],\r\n\t\t\t CurrentFiscalYear,\r\n\t\t\t PriorFiscalYear,\r\n\t\t\t FORMAT(EnergyUsage, 'N0') AS EnergyUsage,\r\n\t\t\t FORMAT(DemandUsage, 'N0') AS DemandUsage,\r\n\t\t\t PublishedPeriodCurrentFiscalYear,\r\n\t\t\t AgencyName,\r\n\t\t\t FacilityName,\r\n\t\t\t Address1,\r\n\t\t\t Borough,\r\n\t\t\t [Block],\r\n\t\t\t LotNumber,\r\n\t\t\t CityPlanningBin,\r\n\t\t\t SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'CW', @PublishedBillingPeriod, NULL, NULL, NULL)\r\n\t\tWHERE FiscalYear >= @PriorFY \r\n\t\tUNION ALL \r\n\t\tSELECT\r\n\t\t\t CitywideAgencyOrFacility,\r\n\t\t\t PublishedBillingPeriod,\r\n\t\t\t FiscalYear,\r\n\t\t\t BillingPeriod,\r\n\t\t\t EnergyType,\r\n\t\t\t AgencyCodeOEC,\r\n\t\t\t FacilityNumber,\r\n\t\t\t FORMAT(TotalBilledAmount, 'C0') AS TotalBilledAmount,\r\n\t\t\t FORMAT(TotalCO2, 'N0') AS TotalCO2,\r\n\t\t\t FORMAT(TotalBTU, 'N0') AS TotalBTU,\r\n\t\t\t FORMAT(PublishedBillingPeriodRunningTotalCO2, 'N0') AS PublishedBillingPeriodRunningTotalCO2,\r\n\t\t\t FORMAT(YtdRunningTotalCO2, 'N0') AS YtdRunningTotalCO2,\r\n\t\t\t [month],\r\n\t\t\t CurrentFiscalYear,\r\n\t\t\t PriorFiscalYear,\r\n\t\t\t FORMAT(EnergyUsage, 'N0') AS EnergyUsage,\r\n\t\t\t FORMAT(DemandUsage, 'N0') AS DemandUsage,\r\n\t\t\t PublishedPeriodCurrentFiscalYear,\r\n\t\t\t AgencyName,\r\n\t\t\t FacilityName,\r\n\t\t\t Address1,\r\n\t\t\t Borough,\r\n\t\t\t [Block],\r\n\t\t\t LotNumber,\r\n\t\t\t CityPlanningBin,\r\n\t\t\t SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'CE', @PublishedBillingPeriod, NULL, NULL, NULL)\r\n\t\tWHERE FiscalYear >= @PriorFY\r\n\t\tORDER BY EnergyType, FiscalYear DESC;\r\n\tEND;\r\n\tELSE IF (@CitywideAgencyOrFacility IN ('AG','AE'))\r\n\tBEGIN\r\n\t\tSELECT CitywideAgencyOrFacility,\r\n            PublishedBillingPeriod,\r\n            FiscalYear,\r\n            BillingPeriod,\r\n            EnergyType,\r\n            AgencyCodeOEC,\r\n            FacilityNumber,\r\n            TotalBilledAmount,\r\n            TotalCO2,\r\n            TotalBTU,\r\n            PublishedBillingPeriodRunningTotalCO2,\r\n            YtdRunningTotalCO2,\r\n            [month],\r\n            CurrentFiscalYear,\r\n            PriorFiscalYear,\r\n            EnergyUsage,\r\n            DemandUsage,\r\n            PublishedPeriodCurrentFiscalYear,\r\n            PublishedPeriodPriorFiscalYear,\r\n            AgencyName,\r\n            FacilityName,\r\n            Address1,\r\n            Borough,\r\n            [Block],\r\n            LotNumber,\r\n            CityPlanningBIN,\r\n            SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'AG', @PublishedBillingPeriod, @AgencyCode, NULL, NULL)\r\n\t\tWHERE FiscalYear >= @PriorFY \r\n\t\tUNION ALL \r\n\t\tSELECT CitywideAgencyOrFacility,\r\n            PublishedBillingPeriod,\r\n            FiscalYear,\r\n            BillingPeriod,\r\n            EnergyType,\r\n            AgencyCodeOEC,\r\n            FacilityNumber,\r\n            TotalBilledAmount,\r\n            TotalCO2,\r\n            TotalBTU,\r\n            PublishedBillingPeriodRunningTotalCO2,\r\n            YtdRunningTotalCO2,\r\n            [month],\r\n            CurrentFiscalYear,\r\n            PriorFiscalYear,\r\n            EnergyUsage,\r\n            DemandUsage,\r\n            PublishedPeriodCurrentFiscalYear,\r\n            PublishedPeriodPriorFiscalYear,\r\n            AgencyName,\r\n            FacilityName,\r\n            Address1,\r\n            Borough,\r\n            [Block],\r\n            LotNumber,\r\n            CityPlanningBIN,\r\n            SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'AE', @PublishedBillingPeriod, @AgencyCode, NULL, NULL)\r\n\t\tWHERE FiscalYear >= @PriorFY \r\n\t\tORDER BY FiscalYear DESC, BillingPeriod, EnergyType;\r\n\tEND\r\n\tELSE IF (@CitywideAgencyOrFacility IN ('FA','FE'))\r\n\tBEGIN\r\n\t\tSELECT CitywideAgencyOrFacility,\r\n            PublishedBillingPeriod,\r\n            FiscalYear,\r\n            BillingPeriod,\r\n            EnergyType,\r\n            AgencyCodeOEC,\r\n            FacilityNumber,\r\n            TotalBilledAmount,\r\n            TotalCO2,\r\n            TotalBTU,\r\n            PublishedBillingPeriodRunningTotalCO2,\r\n            YtdRunningTotalCO2,\r\n            [month],\r\n            CurrentFiscalYear,\r\n            PriorFiscalYear,\r\n            EnergyUsage,\r\n            DemandUsage,\r\n            PublishedPeriodCurrentFiscalYear,\r\n            PublishedPeriodPriorFiscalYear,\r\n            AgencyName,\r\n            FacilityName,\r\n            Address1,\r\n            Borough,\r\n            [Block],\r\n            LotNumber,\r\n            CityPlanningBIN,\r\n            SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'FA', @PublishedBillingPeriod, @AgencyCode, @FacilityNumber, NULL)\r\n\t\tWHERE FiscalYear >= @PriorFY \r\n\t\tUNION ALL\r\n\t\tSELECT CitywideAgencyOrFacility,\r\n            PublishedBillingPeriod,\r\n            FiscalYear,\r\n            BillingPeriod,\r\n            EnergyType,\r\n            AgencyCodeOEC,\r\n            FacilityNumber,\r\n            TotalBilledAmount,\r\n            TotalCO2,\r\n            TotalBTU,\r\n            PublishedBillingPeriodRunningTotalCO2,\r\n            YtdRunningTotalCO2,\r\n            [month],\r\n            CurrentFiscalYear,\r\n            PriorFiscalYear,\r\n            EnergyUsage,\r\n            DemandUsage,\r\n            PublishedPeriodCurrentFiscalYear,\r\n            PublishedPeriodPriorFiscalYear,\r\n            AgencyName,\r\n            FacilityName,\r\n            Address1,\r\n            Borough,\r\n            [Block],\r\n            LotNumber,\r\n            CityPlanningBIN,\r\n            SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress,'FE',@PublishedBillingPeriod,@AgencyCode,@FacilityNumber,null)\r\n\t\tWHERE FiscalYear >= @PriorFY \r\n\t\tORDER BY FiscalYear DESC, BillingPeriod, EnergyType;\t\t\t\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}