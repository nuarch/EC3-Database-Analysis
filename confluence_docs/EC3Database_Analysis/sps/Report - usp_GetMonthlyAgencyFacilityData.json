{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_GetMonthlyAgencyFacilityData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_GetMonthlyAgencyFacilityData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to generate a report of facility data for a specified agency and billing period. It retrieves and processes energy usage and cost data for facilities associated with a given agency, potentially pivoting the data by billing periods. The procedure logs the report usage and handles different types of energy data, such as electricity, gas, and steam, calculating both costs and usage metrics."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple steps, including data retrieval, transformation, and pivoting. It uses temporary tables, dynamic SQL, and conditional logic, which adds to its complexity. However, it is not overly complex due to the structured nature of the SQL operations."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The email address of the user requesting the report, used for logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The billing period for which the report is generated. If the user is an agency user, this is set to the current processing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AgencyCodeOEC AS dbo.OECAgencyCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The agency code used to filter the data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@OecFacilityNumber AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A list of facility numbers to include in the report."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsAgencyUser AS BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether the user is an agency user, which affects the billing period selection."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to avoid locking issues and initializes the procedure name for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Period Adjustment",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the user is an agency user, the billing period is set to the current processing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure logs the report request using the "
                },
                {
                  "type": "text",
                  "text": "usp_AddReportUsageLog",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " stored procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Facility Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A temporary table "
                },
                {
                  "type": "text",
                  "text": "@FacilityData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is populated with facility information by joining the "
                },
                {
                  "type": "text",
                  "text": "TemporalAccountLevelRawDataForCurrentPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table with a function that retrieves facility numbers based on the agency hierarchy."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Periods Preparation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A list of billing periods up to the specified period is prepared for pivoting."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Aggregation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure aggregates data into a common table expression (CTE) "
                },
                {
                  "type": "text",
                  "text": "AllReportData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", calculating costs and usage for different energy types and total values."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Pivoting",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The aggregated data is inserted into a temporary table "
                },
                {
                  "type": "text",
                  "text": "#AllReportDataTemp",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and dynamic SQL is used to pivot the data by billing periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If data exists, the pivoted report is executed and returned. If no data is found, a default structure with zero values is returned."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can improve performance by reducing locking but may lead to dirty reads."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic SQL",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of dynamic SQL for pivoting can be resource-intensive and should be optimized for performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of temporary tables can impact performance, especially if the dataset is large. Indexing or optimizing the temporary table usage might be necessary."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Aggregation and Grouping",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure performs multiple aggregations and groupings, which can be computationally expensive."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dirty Reads",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " isolation level can lead to reading uncommitted data, which might not be accurate."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic SQL Risks",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Dynamic SQL can be prone to SQL injection if not handled carefully, although this procedure seems to handle it safely."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face performance issues with large datasets due to the use of temporary tables and complex joins."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions or failures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The reliance on external functions and tables means that changes in those objects could affect the procedure's correctness."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_GetMonthlyAgencyFacilityData]\n(\r\n    @EmailAddress AS VARCHAR(75)\r\n    ,@PublishedBillingPeriod AS VARCHAR(6)\r\n    ,@AgencyCodeOEC AS dbo.OECAgencyCode\r\n    ,@OecFacilityNumber AS VARCHAR(MAX)\r\n\t,@IsAgencyUser AS BIT = 0\r\n)\r\nAS \r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @spname AS VARCHAR(100) = OBJECT_NAME(@@PROCID);\r\n\t\r\n\tIF (@IsAgencyUser = 1)\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = PublishedBillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\tEND;\r\n\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t\t@ReportName = @spname,\r\n\t\t@StoredProcName = @spname,\r\n\t\t@RequestedBy = @EmailAddress,\r\n\t\t@prmPublishedBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmBillingPeriod = NULL,\r\n\t\t@prmAgency_ies = @AgencyCodeOEC,\r\n\t\t@prmFacilityNumber_s = @OecFacilityNumber,\r\n\t\t@prmStartingBillingPeriod = NULL,\r\n\t\t@prmEndingBillingPeriod = NULL;\r\n\r\n    DECLARE @FacilityData TABLE (Agency VARCHAR(75) NULL\r\n\t\t,FacilityName VARCHAR(100) NULL\r\n\t\t,FacilityAddress VARCHAR(120) NULL\r\n\t\t,OECID OECBuildingNumber NULL\r\n\t\t,AgencyCodeOEC AgencyCodeOEC NULL\r\n\t\t,Borough VARCHAR(1) NULL\r\n\t\t,[Block] VARCHAR(5) NULL\r\n\t\t,LotNumber VARCHAR(4) NULL);\r\n\t\r\n\t-- add agency based on user email permission\r\n    INSERT INTO @FacilityData(Agency, FacilityName, FacilityAddress, OECID, AgencyCodeOEC, Borough, [Block], LotNumber)\r\n\tSELECT FD.AgencyName, FD.FacilityName, FD.Address1, FD.OecFacilityNumber, FD.AgencyCodeOEC, MAX(TA.Borough) AS Borough,\r\n        MAX(TA.[Block]) AS [Block], MAX(TA.LotNumber) AS LotNumber\r\n\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n\t\tINNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCodeOEC, @OecFacilityNumber, @EmailAddress) AS FD\r\n\t\t\tON TA.OecFacilityNumber = FD.OecFacilityNumber AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n\tGROUP BY FD.AgencyName, FD.FacilityName, FD.Address1, FD.OecFacilityNumber, FD.AgencyCodeOEC\r\n\tORDER BY FD.OecFacilityNumber;\r\n\r\n\t-- to pivot billing period\r\n\tDECLARE @BillingPeriods AS VARCHAR(MAX);\r\n\tSELECT @BillingPeriods = COALESCE(@BillingPeriods + ', ','') + QUOTENAME(BillingPeriod)\r\n\tFROM (SELECT DISTINCT BillingPeriod FROM Published.TemporalAccountLevelRawDataForCurrentPeriod \r\n\t\tWHERE BillingPeriod <= @PublishedBillingPeriod) AS B\r\n\t\tORDER BY B.BillingPeriod DESC\r\n\r\n\tDROP TABLE IF EXISTS #AllReportDataTemp;\r\n\r\n\t;WITH AllReportData (PublishedBillingPeriod, BillingPeriod, FiscalYear, BillingMonth, AgencyCodeOEC, AgencyName,\r\n\t\tOecFacilityNumber, FacilityName, Address1, Borough, [Block], LotNumber,\r\n\t\tCost, RevisedBilledAmount) AS\r\n\t(SELECT @PublishedBillingPeriod AS PublishedBillingPeriod\r\n\t\t,TA.BillingPeriod\r\n\t\t,TA.FiscalYear\r\n\t\t,TA.BillingMonth\r\n\t\t,FD.AgencyCodeOEC\r\n\t\t,FD.Agency\r\n\t\t,FD.OECID\r\n\t\t,FD.FacilityName\r\n\t\t,FD.FacilityAddress\r\n\t\t,FD.Borough\r\n\t\t,FD.[Block]\r\n\t\t,FD.LotNumber\r\n\t\t,CASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam Cost ($)' ELSE '' END AS Cost\r\n\t\t,SUM(ISNULL(CAST(TA.RevisedBilledAmount AS NUMERIC(18, 2)), 0)) AS RevisedBilledAmount\r\n    FROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod\r\n\tGROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.Agency, FD.OECID, FD.FacilityName,\r\n\t\tFD.FacilityAddress, FD.Borough, FD.[Block], FD.LotNumber,\r\n\t\tCASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas Cost ($)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam Cost ($)' ELSE '' END\r\n\tUNION ALL\r\n\tSELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n\t\tTA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tMAX(FD.Agency) AS Agency,\r\n\t\tFD.OECID,\r\n\t\tMAX(FD.FacilityName) AS FacilityName,\r\n\t\tMAX(FD.FacilityAddress) AS FacilityAddress,\r\n\t\tMAX(FD.Borough) AS Borough,\r\n\t\tMAX(FD.[Block]) AS [Block],\r\n\t\tMAX(FD.LotNumber) AS LotNumber,\r\n\t\t'Total Cost ($)' AS Cost,\r\n\t\tISNULL(CAST(SUM(ISNULL(TA.RevisedBilledAmount, 0)) AS NUMERIC(18, 2)), 0) AS RevisedBilledAmount\r\n\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod\r\n    GROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.OECID\r\n    UNION ALL\r\n    SELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n        TA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tMAX(FD.Agency) AS Agency,\r\n\t\tFD.OECID,\r\n\t\tMAX(FD.FacilityName) AS FacilityName,\r\n\t\tMAX(FD.FacilityAddress) AS FacilityAddress,\r\n\t\tMAX(FD.Borough) AS Borough,\r\n\t\tMAX(FD.[Block]) AS [Block],\r\n\t\tMAX(FD.LotNumber) AS LotNumber,\r\n        CASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Demand (kW)' ELSE '' END AS Cost,\r\n        SUM(ISNULL(CAST(TA.AccountDemandUsage AS NUMERIC(18, 2)), 0)) AS AccountDemandUsage\r\n    FROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod\r\n\tGROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.OECID,\r\n\t\tCASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Demand (kW)' ELSE '' END\r\n    UNION ALL    \r\n\tSELECT  @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n        TA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tMAX(FD.Agency) AS Agency,\r\n\t\tFD.OECID,\r\n\t\tMAX(FD.FacilityName) AS FacilityName,\r\n\t\tMAX(FD.FacilityAddress) AS FacilityAddress,\r\n\t\tMAX(FD.Borough) AS Borough,\r\n\t\tMAX(FD.[Block]) AS [Block],\r\n\t\tMAX(FD.LotNumber) AS LotNumber,\r\n        CASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Usage (kWh)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas (Therms)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam (MLbs)' ELSE '' END AS Cost,\r\n        SUM(ISNULL(CAST(TA.AccountEnergyUsage AS NUMERIC(18, 2)), 0)) AS AccountEnergyUsage\r\n    FROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n        INNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n    WHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod\r\n\tGROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.OECID,\r\n\t\tCASE WHEN TA.Energytype = 'ELE' THEN 'Electricity Usage (kWh)'\r\n\t\t\tWHEN TA.Energytype = 'GAS' THEN 'Gas (Therms)'\r\n\t\t\tWHEN TA.Energytype = 'STM' THEN 'Steam (MLbs)' ELSE '' END\r\n\tUNION ALL    \r\n\tSELECT @PublishedBillingPeriod AS PublishedBillingPeriod,\r\n        TA.BillingPeriod,\r\n\t\tTA.FiscalYear,\r\n\t\tTA.BillingMonth,\r\n\t\tFD.AgencyCodeOEC,\r\n\t\tMAX(FD.Agency) AS Agency,\r\n\t\tFD.OECID,\r\n\t\tMAX(FD.FacilityName) AS FacilityName,\r\n\t\tMAX(FD.FacilityAddress) AS FacilityAddress,\r\n\t\tMAX(FD.Borough) AS Borough,\r\n\t\tMAX(FD.[Block]) AS [Block],\r\n\t\tMAX(FD.LotNumber) AS LotNumber,\r\n\t\t'Total Usage (mmBTUs)' AS Cost,\r\n        ISNULL(CAST(ROUND(SUM(CASE WHEN TA.Energytype = 'ELE' THEN TA.AccountEnergyUsage * 0.00341297\r\n            WHEN TA.Energytype = 'GAS' THEN AccountEnergyUsage * 0.1\r\n            WHEN TA.Energytype = 'STM' THEN AccountEnergyUsage * 1.11718000 ELSE 0.0 END), 18, 2) AS NUMERIC(18, 2)), 0) AS AccountEnergyUsage\r\n\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS TA\r\n\t\tINNER JOIN @FacilityData AS FD ON TA.OecFacilityNumber = FD.OECID AND TA.AgencyCodeOEC = FD.AgencyCodeOEC\r\n\tWHERE TA.EffectiveStartPeriod <= @PublishedBillingPeriod AND TA.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\tAND TA.BillingPeriod <= @PublishedBillingPeriod\r\n\tGROUP BY TA.BillingPeriod, TA.FiscalYear, TA.BillingMonth, FD.AgencyCodeOEC, FD.OECID)\r\n\r\n\tSELECT PublishedBillingPeriod,\r\n        BillingPeriod,\r\n        FiscalYear,\r\n        BillingMonth,\r\n        AgencyCodeOEC,\r\n        AgencyName,\r\n        OecFacilityNumber,\r\n        FacilityName,\r\n        Address1,\r\n        Borough,\r\n        [Block],\r\n        LotNumber,\r\n        Cost,\r\n        RevisedBilledAmount, \r\n\t\tCASE WHEN Cost ='Electricity Cost ($)' THEN 5\r\n\t\t\tWHEN Cost ='Electricity Demand (kW)' THEN 3\r\n\t\t\tWHEN Cost ='Electricity Usage (kWh)' THEN 1\r\n\t\t\tWHEN Cost ='Gas (Therms)' THEN 7\r\n\t\t\tWHEN Cost ='Gas Cost ($)' THEN 9\r\n\t\t\tWHEN Cost ='Steam (MLbs)' THEN 11\r\n\t\t\tWHEN Cost ='Steam Cost ($)' THEN 13\r\n\t\t\tWHEN Cost ='Total Cost ($)' THEN 17\r\n\t\t\tWHEN Cost ='Total Usage (mmBTUs)' THEN 15\r\n\t\tELSE 0 END AS OrderNumber    \r\n\t INTO #AllReportDataTemp FROM AllReportData;\r\n\r\n\tIF EXISTS(SELECT * FROM #AllReportDataTemp)\r\n\tBEGIN\r\n\t\tDECLARE @ReportSQL AS VARCHAR(MAX);\r\n\t\tSET @ReportSQL = 'SELECT AgencyName AS Agency, FacilityName, Address1 AS FacilityAddress, OecFacilityNumber AS OECID, Cost AS Parameter,\r\n\t\t\t\tBorough, Block, LotNumber, ' + @BillingPeriods + '\r\n\t\t\tFROM (SELECT PublishedBillingPeriod, AgencyName, FacilityName, Address1, OecFacilityNumber, Cost, RevisedBilledAmount,\r\n\t\t\t\t\tBillingPeriod, Borough, Block, LotNumber, OrderNumber\r\n\t\t\t\tFROM #AllReportDataTemp WHERE Cost <> '''') AS PivotData\r\n\t\t\t\tPIVOT\r\n\t\t\t\t\t(MAX(RevisedBilledAmount) FOR BillingPeriod IN (' + @BillingPeriods + ')) AS PR\r\n\t\t\tORDER BY PR.OecFacilityNumber, PR.OrderNumber';\r\n\r\n\t\tEXEC (@ReportSQL);\r\n\tEND;\r\n\tELSE    \r\n\tBEGIN\r\n\t\tSELECT Agency, FacilityName, FacilityAddress, OECID, 0.0 AS Parameter,\r\n\t\tBorough, [Block], LotNumber FROM @FacilityData;\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}