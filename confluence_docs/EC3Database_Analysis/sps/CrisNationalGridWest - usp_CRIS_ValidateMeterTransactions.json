{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CrisNationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CRIS_ValidateMeterTransactions",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CRIS_ValidateMeterTransactions",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to validate meter transaction records before they are processed for billing. It operates on the "
        },
        {
          "type": "text",
          "text": "CrisNationalGridWest.UploadMeterReadDetail",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table, applying a series of validation checks to exclude transactions that do not meet certain criteria. The procedure uses a cursor to iterate over each transaction, performing checks to determine if transactions should be excluded based on specific business rules, such as duplicate transactions, invalid transaction codes, or transactions that have already been canceled."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional checks and updates on a potentially large dataset."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a cursor to iterate over records, which can be complex and resource-intensive."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes several nested conditional statements and multiple updates to the database."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod varchar(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period for which the transactions are being validated. It is used to compare against transaction records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@authenticatedID int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An identifier for the authenticated user or process executing the procedure. It is not directly used in the procedure logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode int OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter intended to return the status of the procedure execution. However, it is not set within the procedure, indicating a potential oversight."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Exclusions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by excluding transactions with specific activity codes (4108 and 68) that are deemed irrelevant for billing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A cursor is declared to iterate over each transaction in the "
                },
                {
                  "type": "text",
                  "text": "UploadMeterReadDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table that has not been excluded."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each transaction, several flags are reset to their default values."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure retrieves transaction details into local variables."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It checks if the transaction is a cancel transaction ("
                        },
                        {
                          "type": "text",
                          "text": "BC",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ") and attempts to match it with a corresponding bill transaction ("
                        },
                        {
                          "type": "text",
                          "text": "BI",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ") in the current or previous periods."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If a match is found, the transaction is marked accordingly, and the archive table is updated to reflect the cancellation."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For non-cancel transactions ("
                        },
                        {
                          "type": "text",
                          "text": "BI",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "), it checks if the transaction spans multiple billing periods, has been reported before, or has a corresponding cancel transaction in the current period."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Exclusions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After processing all transactions, the procedure excludes transactions that are "
                },
                {
                  "type": "text",
                  "text": "BI",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and have a cancel transaction in the current period."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance bottlenecks, especially if the "
                },
                {
                  "type": "text",
                  "text": "UploadMeterReadDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table contains a large number of records. Cursors process rows one at a time, which is less efficient than set-based operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Multiple Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure performs multiple updates on the same table, which can be resource-intensive and may lead to locking issues."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensuring that the "
                },
                {
                  "type": "text",
                  "text": "UploadMeterReadDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table is properly indexed on columns used in WHERE clauses and joins can improve performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output Parameter Not Set",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@StatusCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " output parameter is not set within the procedure, which could lead to confusion or errors in calling applications expecting a status code."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency and Locking",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's multiple updates and cursor usage could lead to locking issues, affecting concurrent access to the "
                },
                {
                  "type": "text",
                  "text": "UploadMeterReadDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the dataset grows, the performance of the cursor-based approach may degrade, necessitating a review and potential refactoring to a set-based approach."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete processing in case of errors."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [CrisNationalGridWest].[usp_CRIS_ValidateMeterTransactions]\n\t@BillingPeriod varchar(6),\r\n\t@authenticatedID int,\r\n\t@StatusCode int  OUTPUT      \r\n   \r\n AS \r\n BEGIN\r\n\t\t--********************************************************************************\r\n\t\t--\tAuthor: MOHAMMED BELARREM\r\n\t\t--\tDescription: Validate the meter information before processing\r\n\t\t--\r\n\t\t--\t\t--  validation rules\r\n\t\t--\t\t\r\n\t\t--\tLog: \r\n\t\t--\t\t12/29/2010\tMOH\tCreate\r\n\t\t--********************************************************************************\r\n\t \r\n\t\tDECLARE @UploadMeterReadDetailSeqid dbo.seqid\r\n\t\t\r\n\r\n\t\tDECLARE @RecordBillingPeriod yyyymm\r\n\t\tDECLARE @BillingPeriodRevision yyyymm\t\r\n\t\tDECLARE @FirstBillingPeriodCanceled yyyymm\r\n\t\tDECLARE @BillingTransactionCode VARCHAR(2)\r\n\t\tDECLARE @AccountNumber\tacctnum\r\n\t\tDECLARE @MeterNumber MeterNumber\r\n\t\tDECLARE @ActivityDateTime DATETIME\r\n\t\tDECLARE @CurrentMeterNumber MeterNumber\r\n\t\tDECLARE @MeterCCF EnergyUnit\r\n\t\tDECLARE @Therms EnergyUnit\r\n\t\tDECLARE @ThermsFactor ThermsFactor\r\n\t\tDECLARE @MeterFromReading MeterReading\r\n\t\tDECLARE @MeterToReading MeterReading\r\n\t\tDECLARE @MeterReadingFromDate yyyymmdd\r\n\t\tDECLARE @MeterReadingToDate yyyymmdd\r\n\t\t\r\n\t\t-- processing variables\r\n\t\tDECLARE @IsSpanned VARCHAR(1)\r\n\t\tDECLARE @IsPeriodCoveredPreviouslyBilled VARCHAR(1)\r\n\t\tDECLARE @IsCurrentTransactionCancelFound VARCHAR(1)\r\n\t\t--DECLARE @IsPreviousPeriodCancelFound VARCHAR(1)\r\n\t\tDECLARE @IsSameTransactionReportedBefore VARCHAR(1)\r\n\t\t\r\n\t\tDECLARE\t@IsCancelMatchesABillInCurrentSet VARCHAR(1)\r\n\t\tDECLARE\t@IsCancelMatchesABillInPreviousPeriods VARCHAR(1)\r\n\t\tDECLARE\t@IsCancelHasWrongFromDateOrReading VARCHAR(1)\r\n\t\t\r\n\t\t\r\n\t\tDECLARE @Notes VARCHAR(10)\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t\t\t-- initial exclusion of bad transactions\r\n\t\t\t\t\r\n\t\t\t\t-- exclude the ones that do not make sense\r\n\t\t\t\tUPDATE CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tSET ExcludeTest = 'Y'\r\n\t\t\t\t\t, ExcludeReason = ' 4108 transaction'\r\n\t\t\t\tWHERE CAST (ActivityCode AS INT) = 4108 \r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t-- exclude the ones that do not make sense\r\n\t\t\t\tUPDATE CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tSET ExcludeTest = 'Y'\r\n\t\t\t\t    , ExcludeReason = ' 68 BI transaction, not relevant in billing '\r\n\t\t\t\tWHERE CAST (ActivityCode AS INT) = 68 AND BillingTransactionCode = 'BI' \r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t-- exclude the transactions that have the same from and to dates and readings\r\n\t\t\t\tUPDATE CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tSET ExcludeTest = 'Y'\r\n\t\t\t\t\t, ExcludeReason = ' same day no usage no index change transaction'\r\n\t\t\t\tWHERE MeterReadingFromDate = MeterReadingToDate AND MeterFromReading = MeterToReading AND MeterCCF = 0\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\t--\tDECLARE a cursor to run thru all transactions\r\n\t\t\t\tDECLARE SpannedBillCursor CURSOR FOR\r\n\t\t\t\tSELECT  UploadMeterReadDetailSeqid\r\n\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\tOPEN SpannedBillCursor;\r\n\r\n\t\t\t\tFETCH NEXT FROM SpannedBillCursor INTO @UploadMeterReadDetailSeqid\r\n\t\t\t\t--\r\n\t\t\t\t-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n\t\t\t\t--\r\n\t\t\t\tWHILE @@FETCH_STATUS = 0\r\n\t\t\t\tBEGIN -- begin processing for fetched record\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- reset variables\r\n\t\t\t\t\t\tSET\t@IsSpanned = 'N'\r\n\t\t\t\t\t\tSET\t@IsPeriodCoveredPreviouslyBilled = 'N'\r\n\t\t\t\t\t\tSET\t@IsCurrentTransactionCancelFound = 'N'\r\n\t\t\t\t\t\t--SET\t@IsPreviousPeriodCancelFound = 'N'\r\n\t\t\t\t\t\tSET @IsSameTransactionReportedBefore = 'N'\t\r\n\t\t\t\t\t\tSET @IsCancelMatchesABillInCurrentSet = 'N'\r\n\t\t\t\t\t\tSET @IsCancelMatchesABillInPreviousPeriods = 'N'\r\n\t\t\t\t\t\tSET @IsCancelHasWrongFromDateOrReading = 'N'\r\n\t\t\t\t\t\tSET @Notes = ''\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- collect the information\r\n\t\t\t\t\t\tSELECT\t @RecordBillingPeriod\t\t\t= BillingPeriod\r\n\t\t\t\t\t\t\t\t,@BillingPeriodRevision\t\t\t= BillingPeriodRevision\r\n\t\t\t\t\t\t\t\t,@FirstBillingPeriodCanceled\t= FirstBillingPeriodCanceled\r\n\t\t\t\t\t\t\t\t,@BillingTransactionCode\t\t= BillingTransactionCode\r\n\t\t\t\t\t\t\t\t,@AccountNumber\t\t\t\t\t= AccountNumber\r\n\t\t\t\t\t\t\t\t,@MeterNumber\t\t\t\t\t= MeterNumber\r\n\t\t\t\t\t\t\t\t,@ActivityDateTime\t\t\t\t= ActivityDateTime\r\n\t\t\t\t\t\t\t\t,@CurrentMeterNumber\t\t\t= CurrentMeterNumber\r\n\t\t\t\t\t\t\t\t,@MeterCCF\t\t\t\t\t\t= MeterCCF\r\n\t\t\t\t\t\t\t\t,@Therms\t\t\t\t\t\t= Therms\r\n\t\t\t\t\t\t\t\t,@ThermsFactor\t\t\t\t\t= ThermsFactor\r\n\t\t\t\t\t\t\t\t,@MeterFromReading\t\t\t\t= MeterFromReading\r\n\t\t\t\t\t\t\t\t,@MeterToReading\t\t\t\t= MeterToReading\r\n\t\t\t\t\t\t\t\t,@MeterReadingFromDate\t\t\t= MeterReadingFromDate\r\n\t\t\t\t\t\t\t\t,@MeterReadingToDate\t\t\t= MeterReadingToDate\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail  \r\n\t\t\t\t\t\tWHERE UploadMeterReadDetailSeqid = @UploadMeterReadDetailSeqid AND ExcludeTest = 'N'\r\n\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t--- BI transactions\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- exclude 68 (BI only) and 4108 transactions\r\n\t\t\t\t\t\t-- remember to mark the transactions that are cancelled as so in IsCancelled both in Upload and ARCHIVEUpload\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tIF (@BillingTransactionCode = 'BC' )\r\n\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t--- BC transactions\r\n \r\n\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tSET @Notes = NULL \r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t-- @IsCancelMatchesABillInCurrentSet \r\n\t\t\t\t\t\t\t\t-- @IsCancelMatchesABillInPreviousPeriods\r\n\t\t\t\t\t\t\t\t-- @IsCancelHasWrongFromDateOrReading \r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t-- check if the cancel matches a bill in the current set\r\n\t\t\t\t\t\t\t\tIF (EXISTS (\r\n\t\t\t\t\t\t\t\t\t\t\t\tSELECT  CurrentMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail \r\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE   CurrentMeterNumber = @CurrentMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND AccountNumber = @AccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingPeriodRevision = @BillingPeriodRevision \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- AND FirstBillingPeriodCanceled = @FirstBillingPeriodCanceled\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingTransactionCode = 'BI'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterReadingFromDate = @MeterReadingFromDate\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterReadingToDate = @MeterReadingToDate\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- AND ExcludeTest = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterToReading = @MeterToReading\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterCCF = (-1) * @MeterCCF\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND ActivityDateTime <= @ActivityDateTime\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND CAST (ActivityCode AS INT) NOT IN ( 68 , 4108 )\r\n\t\t\t\t\t\t\t\t\t\t\t) )\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\t\t\t\tSET @IsCancelMatchesABillInCurrentSet = 'Y'\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tEND\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t-- check if the cancel matches a transaction from previous periods\r\n\t\t\t\t\t\t\t\tIF (EXISTS (\r\n\t\t\t\t\t\t\t\t\t\t\t\tSELECT  Billing.Meter.CurrentMeterNumber, Billing.Meter.OriginalMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tFROM Billing.Meter INNER JOIN\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCrisNationalGridWest.ARCHIVEUploadMeterReadDetail ON \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBilling.Meter.OriginalMeterNumber = CrisNationalGridWest.ARCHIVEUploadMeterReadDetail.MeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE   Billing.Meter.CurrentMeterNumber = @CurrentMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND AccountNumber = @AccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t--AND BillingPeriodRevision = @BillingPeriodRevision \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- AND FirstBillingPeriodCanceled = @FirstBillingPeriodCanceled\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingPeriod < @RecordBillingPeriod\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingTransactionCode = 'BI'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterReadingToDate = @MeterReadingToDate\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- AND ExcludeTest = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterToReading = @MeterToReading\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterCCF = (-1) * @MeterCCF\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND ActivityDateTime <= @ActivityDateTime\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND ExcludeTest = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND IsCancelled = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND CAST (ActivityCode AS INT) NOT IN ( 68 , 4108 )\r\n\t\t\t\t\t\t\t\t\t\t\t) )\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\t\t\t\tSET @IsCancelMatchesABillInPreviousPeriods = 'Y'\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t--- update the archive table transaction with \r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tUPDATE CrisNationalGridWest.ARCHIVEUploadMeterReadDetail\r\n\t\t\t\t\t\t\t\t\t\tSET\t\t IsCancelled = 'Y'\r\n\t\t\t\t\t\t\t\t\t\t\t\t,BPCancelled = @RecordBillingPeriod\r\n\t\t\t\t\t\t\t\t\t\tFROM Billing.Meter INNER JOIN\r\n\t\t\t\t\t\t\t\t\t\t\t\tCrisNationalGridWest.ARCHIVEUploadMeterReadDetail ON \r\n\t\t\t\t\t\t\t\t\t\t\t\tBilling.Meter.OriginalMeterNumber = CrisNationalGridWest.ARCHIVEUploadMeterReadDetail.MeterNumber\r\n\t\t\t\t\t\t\t\t\t\tWHERE   Billing.Meter.CurrentMeterNumber = @CurrentMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tAND AccountNumber = @AccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t-- AND BillingPeriodRevision = @BillingPeriodRevision \r\n\t\t\t\t\t\t\t\t\t\t\t\t-- AND FirstBillingPeriodCanceled = @FirstBillingPeriodCanceled\r\n\t\t\t\t\t\t\t\t\t\t\t\tAND BillingPeriod < @RecordBillingPeriod\r\n\t\t\t\t\t\t\t\t\t\t\t\tAND BillingTransactionCode = 'BI'\r\n\t\t\t\t\t\t\t\t\t\t\t\tAND MeterReadingToDate = @MeterReadingToDate\r\n\t\t\t\t\t\t\t\t\t\t\t\t-- AND ExcludeTest = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\tAND MeterToReading = @MeterToReading\r\n\t\t\t\t\t\t\t\t\t\t\t\tAND MeterCCF = (-1) * @MeterCCF\r\n\t\t\t\t\t\t\t\t\t\t\t\tAND ActivityDateTime <= @ActivityDateTime\r\n\t\t\t\t\t\t\t\t\t\t\t\tAND ExcludeTest = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\tAND IsCancelled = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\tAND CAST (ActivityCode AS INT) NOT IN ( 68 , 4108 )\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tEND\t\t\r\n\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t-- update the findings in the record for later processing\t\t\r\n\t\t\t\t\t\t\t\tUPDATE CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\t\t\t\t\tSET\t IsCancelForCurrentTransaction\t= @IsCancelMatchesABillInCurrentSet\r\n\t\t\t\t\t\t\t\t\t,IsCancelForPreviousTransaction\t= @IsCancelMatchesABillInPreviousPeriods\r\n\t\t\t\t\t\t\t\tWHERE UploadMeterReadDetailSeqid = @UploadMeterReadDetailSeqid\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tEND\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t\t\t\t\t--- BI TRANSACTIONS\r\n\t\t\t\t\t\tELSE\r\n\t\t\t\t\t\tBEGIN\t\t \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t-- is spanned\r\n\t\t\t\t\t\t\t\tIF ( @BillingPeriodRevision <> @FirstBillingPeriodCanceled )\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\t\t\t\tSET @IsSpanned = 'Y'\r\n\t\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t-- check if the same transaction was reported before\r\n\t\t\t\t\t\t\t\tIF (EXISTS (\r\n\t\t\t\t\t\t\t\t\t\t\t\tSELECT  Billing.Meter.CurrentMeterNumber, Billing.Meter.OriginalMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tFROM Billing.Meter INNER JOIN\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCrisNationalGridWest.ARCHIVEUploadMeterReadDetail ON \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBilling.Meter.OriginalMeterNumber = CrisNationalGridWest.ARCHIVEUploadMeterReadDetail.MeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE   Billing.Meter.CurrentMeterNumber = @CurrentMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND AccountNumber = @AccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingPeriodRevision = @BillingPeriodRevision \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND FirstBillingPeriodCanceled = @FirstBillingPeriodCanceled\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingPeriod < @RecordBillingPeriod\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingTransactionCode = 'BI'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterCCF = @MeterCCF\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterReadingToDate = @MeterReadingToDate\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterReadingFromDate = @MeterReadingFromDate\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterToReading = @MeterToReading\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterFromReading = @MeterFromReading\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND ExcludeTest = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND IsCancelled = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND CAST (ActivityCode AS INT) NOT IN ( 68 , 4108 )\r\n\t\t\t\t\t\t\t\t\t\t\t) )\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\t\t\t\tSET @IsSameTransactionReportedBefore = 'Y'\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t-- check if the covered period was billed before\r\n\t\t\t\t\t\t\t\tIF (EXISTS (\r\n\t\t\t\t\t\t\t\t\t\t\t\tSELECT  Billing.Meter.CurrentMeterNumber, Billing.Meter.OriginalMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tFROM Billing.Meter INNER JOIN\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tCrisNationalGridWest.ARCHIVEUploadMeterReadDetail ON \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tBilling.Meter.OriginalMeterNumber = CrisNationalGridWest.ARCHIVEUploadMeterReadDetail.MeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE   Billing.Meter.CurrentMeterNumber = @CurrentMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND AccountNumber = @AccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingPeriodRevision = @BillingPeriodRevision \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND FirstBillingPeriodCanceled = @FirstBillingPeriodCanceled\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingPeriod < @RecordBillingPeriod\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingTransactionCode = 'BI'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterReadingToDate = @MeterReadingToDate\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND ExcludeTest = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND CAST (ActivityCode AS INT) NOT IN ( 68 , 4108 )\r\n\t\t\t\t\t\t\t\t\t\t\t) )\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\t\t\t\tSET @IsPeriodCoveredPreviouslyBilled = 'Y'\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tEND\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t-- check if there is a cancel for this transaction in the current period\r\n\t\t\t\t\t\t\t\tIF (EXISTS (\r\n\t\t\t\t\t\t\t\t\t\t\t\tSELECT  CurrentMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail \r\n\t\t\t\t\t\t\t\t\t\t\t\tWHERE   CurrentMeterNumber = @CurrentMeterNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND AccountNumber = @AccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingPeriodRevision = @BillingPeriodRevision \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND FirstBillingPeriodCanceled = @FirstBillingPeriodCanceled\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND BillingTransactionCode = 'BC'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterReadingToDate = @MeterReadingToDate\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- AND ExcludeTest = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterToReading = @MeterToReading\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND MeterCCF = (-1) * @MeterCCF\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND ActivityDateTime >= @ActivityDateTime\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND IsCancelForPreviousTransaction = 'N'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAND CAST (ActivityCode AS INT) NOT IN ( 4108 )\r\n\t\t\t\t\t\t\t\t\t\t\t) )\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\t\t\t\tSET @IsCurrentTransactionCancelFound = 'Y'\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tEND\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t-- update the findings in the record for later processing\t\t\r\n\t\t\t\t\t\t\t\tUPDATE CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\t\t\t\t\tSET\t IsPeriodBilledBefore\t\t= @IsPeriodCoveredPreviouslyBilled\r\n\t\t\t\t\t\t\t\t\t,IsReportedBefore\t\t\t= @IsSameTransactionReportedBefore\r\n\t\t\t\t\t\t\t\t\t,IsTransactionCancelFound\t= @IsCurrentTransactionCancelFound\r\n\t\t\t\t\t\t\t\tWHERE UploadMeterReadDetailSeqid = @UploadMeterReadDetailSeqid\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\t\tEND\r\n\t\t\r\n\t\t\r\n\r\n\t\t\t\t\t\t--\tProcess the next row\r\n\t\t\t\t\t\t--\r\n\t\t\t\t\t\tFETCH NEXT FROM SpannedBillCursor INTO @UploadMeterReadDetailSeqid\r\n\t\t\t\tEnd -- end processing for fetched record\r\n\r\n\t\t\t\tCLOSE SpannedBillCursor; -- close cursor\r\n\t\t\t\tDEALLOCATE SpannedBillCursor;\r\n\t\t\t\r\n\r\n\r\n\t\t\t\t-- at this point all transactions have been individually processed\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t-- exclude the transactions that are BI and have a cancel in the current period\r\n\t\t\t\tUPDATE CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tSET ExcludeTest = 'Y'\r\n\t\t\t\t\t, ExcludeReason = ' BI transaction with same billing period cancel'\r\n\t\t\t\tWHERE IsTransactionCancelFound = 'Y' AND BillingTransactionCode = 'BI'\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\r\n\r\n\t\r\n end"
        }
      ]
    }
  ]
}