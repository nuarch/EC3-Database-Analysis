{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessExchangeInfo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "[Nypa].[usp_ProcessExchangeInfo]",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process exchange information for utility companies. It operates within a transactional context, handling data from the "
        },
        {
          "type": "text",
          "text": "Nypa.UploadNYPAExchangeData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table. The procedure iterates over records that have not been processed ("
        },
        {
          "type": "text",
          "text": "IsProcessed = 'N'",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": "), executing specific sub-procedures based on the "
        },
        {
          "type": "text",
          "text": "ExchangeCode",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " associated with each record. It manages transactions and error handling to ensure data integrity and logs errors if they occur."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is considered medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional branches based on "
                },
                {
                  "type": "text",
                  "text": "ExchangeCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses cursors for row-by-row processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes transaction management and error handling with detailed logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It calls multiple other stored procedures, which adds layers of complexity."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@UtilityCompanySeqid int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The sequence ID of the utility company being processed. This is used in the sub-procedures to identify the specific utility company context."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the authenticated user executing the procedure. This is likely used for auditing or logging purposes in the sub-procedures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status int OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that indicates the execution status of the procedure. It is set to "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for success and "
                },
                {
                  "type": "text",
                  "text": "1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure initializes several local variables, including "
                },
                {
                  "type": "text",
                  "text": "@BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", which is set by querying the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table for the current processing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It checks if a valid billing period is found. If not, it returns an error code "
                },
                {
                  "type": "text",
                  "text": "-100",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Declaration and Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "A cursor "
                        },
                        {
                          "type": "text",
                          "text": "read_exchange_record",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is declared to iterate over records in "
                        },
                        {
                          "type": "text",
                          "text": "Nypa.UploadNYPAExchangeData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " where "
                        },
                        {
                          "type": "text",
                          "text": "IsProcessed = 'N'",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The cursor fetches records ordered by "
                        },
                        {
                          "type": "text",
                          "text": "CurrentAccountNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and a conditional order based on "
                        },
                        {
                          "type": "text",
                          "text": "ExchangeCode",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Main Processing Loop",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each record, it starts a transaction and attempts to process the record using a series of conditional statements that call different sub-procedures based on "
                        },
                        {
                          "type": "text",
                          "text": "ExchangeCode",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If the sub-procedure indicates success ("
                        },
                        {
                          "type": "text",
                          "text": "@CommitTransaction = 'Y'",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "), the transaction is committed; otherwise, it is rolled back."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If an error occurs, the procedure captures detailed error information and logs it using "
                        },
                        {
                          "type": "text",
                          "text": "RAISERROR",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The transaction is rolled back if it is still open."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Cleanup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After processing all records, the cursor is closed and deallocated."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance bottlenecks, especially if the "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table contains a large number of records. Consider refactoring to set-based operations if possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses explicit transactions, which can lock resources and affect concurrency. Ensure that transactions are kept as short as possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table is properly indexed on columns used in the "
                },
                {
                  "type": "text",
                  "text": "WHERE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " clause and "
                },
                {
                  "type": "text",
                  "text": "ORDER BY",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " clause to improve cursor performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure logs errors, it uses "
                },
                {
                  "type": "text",
                  "text": "RAISERROR",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with "
                },
                {
                  "type": "text",
                  "text": "WITH LOG",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", which writes to the SQL Server error log. This can lead to log bloat if errors are frequent."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Fallback",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses a hardcoded fallback value "
                },
                {
                  "type": "text",
                  "text": "'187601'",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for "
                },
                {
                  "type": "text",
                  "text": "@BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", which may not be meaningful. Ensure that this value is appropriate for the business context."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of transactions and cursors can lead to locking issues, impacting other processes accessing the same tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the number of records grows, the cursor-based approach may not scale well. Consider alternative approaches for large datasets."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Nypa].[usp_ProcessExchangeInfo] @UtilityCompanySeqid int , @AuthenticatedUserID int , @Status int  OUTPUT\n   \r\n AS --**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  \r\n--*               \r\n--*               \r\n--*               \r\n--* Exec:         usp_ProcessNYPAExchangeInfo\r\n--*\r\n--* Parameter(s):         \r\n--*                            UtilityCompanySeqid int   \t   - The sequence id of the Utility Companyto be processed\r\n--*                            StatusCode  int output       \t   -  Execution Return Status \r\n--*\r\n--* Database:     OEC\r\n--*\r\n--* Return:\t    0 Success\r\n--*             1 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   10/26/2005\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 05/16/2006 PAH  First Version  \r\n--***************************************************************************************\r\nBegin \r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\nset @status =0 \r\n--\r\ndeclare @BillingPeriod varchar(6)\r\nDeclare @UploadNypaExchangeDataSeqid int\r\nDeclare @ExchangeCode varchar(2)\r\nDeclare @Yes varchar(1)\r\ndeclare @CommitTransaction varchar(1)\r\ndeclare @StatusCode int\r\n--\r\nDECLARE @CurrentAccountNumber NVARCHAR(15)\r\nDECLARE @OriginalAccountNumber NVARCHAR(15)\r\nDECLARE @CurrentMeterNumber NVARCHAR(12)\r\nDECLARE @OriginalMeterNumber NVARCHAR(12)\r\n--\r\nSet @Yes = 'Y'\r\ndeclare @crlf varchar(2)\r\nset @crlf = CHAR(13) + CHAR(10) \r\n--\r\n--\r\n--  Find the current active billing period\r\n--\r\nSELECT    @BillingPeriod = IsNull(BillingPeriod,'187601')  FROM Billing.ApplicationTimeFrame  WHERE CurrentProcessingPeriod = @Yes\r\n--***\r\n-- There must be only one active period for processing\r\n--***\r\nif ( @BillingPeriod = '187601' )    return -100\r\n\r\n--************************************************************************************** \r\n--\tDeclare Cursor\r\n--**************************************************************************************\r\n--\r\n\t\tDeclare read_exchange_record cursor for \r\n\t\t\tSELECT\tUploadNYPAExchangeDataSeqid, ExchangeCode\r\n\t\t\tFROM\t\r\n\t\t\t\tNypa.UploadNYPAExchangeData\r\n\t\t\t\twhere IsProcessed = 'N' --and ExchangeCode = '28'\r\n\t\t\torder by CurrentAccountNumber,\r\n\t\t\t CASE \r\n\t\t\t\tWHEN ExchangeCode = 'AX' THEN AccountEffectiveTurnOn \r\n\t\t\t\tWHEN ExchangeCode = '47' THEN AccountEffectiveTurnOn \r\n\t\t\t\tWHEN ExchangeCode = '28' THEN AccountEffectiveTurnOn \r\n\t\t\t\tWHEN ExchangeCode = '46' THEN MeterEffectiveTurnOnDate \r\n\t\t\t\tWHEN ExchangeCode = '45' THEN MeterEffectiveTurnOnDate\r\n\t\t\t\tWHEN ExchangeCode = '27' THEN MeterEffectiveTurnOnDate ELSE 'XXXXXXXX' \r\n\t\t\tEND \r\n--\t\t\tORDER BY \r\n--\t\t\t\tTransactionEffectiveDate, ExchangeCode desc  -- This needs to be tested 4/24/2009 PAH\r\n--\t\t\t\tCurrentAccountNumber, TransactionEffectiveDate  \r\n\t\t--************************************************************************************** \r\n\t\t--\tMain Processing\r\n\t\t--**************************************************************************************\r\n\t\t--\r\n\t\topen read_exchange_record\r\n\r\n\t\t-- Read first row\r\n\t\tfetch read_exchange_record into    @UploadNypaExchangeDataSeqid, @ExchangeCode\r\n\r\n\t\twhile @@fetch_status =0\r\n\t\t  begin\r\n\r\n\t\t\tSET XACT_ABORT ON\r\n\t\t\tbegin try\r\n\t\t\t\t\tset @status  = 0\r\n\t\t\t--\r\n\t\t\tSELECT \r\n\t\t\t\t\t@BillingPeriod = BillingPeriod, \r\n\t\t\t\t\t@CurrentAccountNumber=CurrentAccountNumber, @OriginalAccountNumber=OriginalAccountNumber, \r\n\t\t\t\t\t@CurrentMeterNumber=CurrentMeterNumber, @OriginalMeterNumber = OriginalMeterNumber \r\n\t\t\tFROM Nypa.UploadNYPAExchangeData\t\t\t\t\t\t\r\n\t\t\tWHERE \r\n\t\t\t\t\t(UploadNYPAExchangeDataSeqid = @UploadNypaExchangeDataSeqid)\r\n\t\t\t--\r\n\t\t\t--\tLegacy system meter reset (50) was eliminated by NYPA for the re-write.\r\n\t\t\t--\r\n\t\t\t\tbegin transaction ExchangeRow\r\n\t\t\t\t--\r\n\t\t\t\t\t\r\n\t\t\t\t\tif @ExchangeCode = 'AX'\r\n\t   \t\t\t\t\t   exec Nypa.usp_ProcessExchangeCode_AX @AuthenticatedUserID,@UploadNypaExchangeDataSeqid, @ExchangeCode,@BillingPeriod,@UtilityCompanySeqid,@CommitTransaction OUTPUT ,@StatusCode OUTPUT   \r\n\t\t\t\t\t   else if (@ExchangeCode in ('46'))\r\n\t   \t\t\t\t\t   exec Nypa.usp_ProcessExchangeCode_46 @AuthenticatedUserID,@UploadNypaExchangeDataSeqid, @ExchangeCode,@BillingPeriod,@UtilityCompanySeqid,@CommitTransaction OUTPUT ,@StatusCode OUTPUT   \r\n\t\t\t\t\t   else if (@ExchangeCode in ('47'))\r\n\t   \t\t\t\t\t   exec Nypa.usp_ProcessExchangeCode_47 @AuthenticatedUserID,@UploadNypaExchangeDataSeqid, @ExchangeCode,@BillingPeriod,@UtilityCompanySeqid,@CommitTransaction OUTPUT ,@StatusCode OUTPUT   \r\n\t\t\t\t\t   else if (@ExchangeCode = '45')\r\n\t   \t\t\t\t\t   exec Nypa.usp_ProcessExchangeCode_45 @AuthenticatedUserID,@UploadNypaExchangeDataSeqid, @ExchangeCode,@CommitTransaction OUTPUT ,@StatusCode OUTPUT   \r\n\t\t\t\t\t   else if (@ExchangeCode = '28')\r\n\t   \t\t\t\t\t   exec Nypa.usp_ProcessExchangeCode_28 @AuthenticatedUserID,@UploadNypaExchangeDataSeqid, @ExchangeCode,@CommitTransaction OUTPUT ,@StatusCode OUTPUT   \r\n\t\t\t\t\t   else if (@ExchangeCode = '27')\r\n\t   \t\t\t\t\t   exec Nypa.usp_ProcessExchangeCode_27 @AuthenticatedUserID,@UploadNypaExchangeDataSeqid, @ExchangeCode,@CommitTransaction OUTPUT ,@StatusCode OUTPUT   \r\n\t   \t\t\t--\r\n\t\t\t\tif (@CommitTransaction = 'Y')\r\n\t\t\t\t\tcommit transaction ExchangeRow;\r\n\t\t\t\telse\r\n\t\t\t\t\trollback transaction ExchangeRow;\r\n\t   \t\t\t\t\t   \r\n\t\tEND TRY\r\n\t\tBEGIN catch \r\n\t\t\r\n\t\t\tDECLARE @ExchangeErrorMessage NVARCHAR(4000);\r\n\t\t\tDECLARE @ErrorMessage NVARCHAR(4000);\r\n\t\t\tDECLARE @ErrorSeverity INT;\r\n\t\t\tDECLARE @ErrorState INT;\r\n \t\t\tDECLARE @ErrorNumber INT;\r\n\t\t\tDECLARE @ErrorLine INT;\r\n \t\t\tDECLARE @ErrorProcedure NVARCHAR(126);\r\n\t\t\t--\r\n\t\t\tSELECT \r\n\t\t\t\t@ExchangeErrorMessage ='Error in StoredProcedure %125s at line number %8.0d'+@crlf+'    NYPA Billing Period: %6s   '+@crlf+' Exchange Sequence Id:%4.0d'+@crlf+'Account Current:Original (%15s : %15s)  '+@crlf,\r\n\t\t\t\t@ErrorMessage = ERROR_MESSAGE(),\r\n\t\t\t\t@ErrorSeverity = ERROR_SEVERITY(),\r\n\t\t\t\t@ErrorState = ERROR_STATE(),\r\n\t\t\t\t@ErrorNumber = ERROR_NUMBER(),\r\n\t\t\t\t@ErrorProcedure = ERROR_PROCEDURE(),\r\n\t\t\t\t@ErrorLine = ERROR_LINE();\t\t\t\r\n\t\t\t--\r\n\t\t\tset\t@ErrorMessage = @ExchangeErrorMessage + @ErrorMessage+@crlf+'@ErrorNumber: '+cast(@ErrorNumber as varchar(10))+@crlf\r\n\t\t\t--\r\n\t\t\tRAISERROR (@ErrorMessage, -- Message text.\r\n\t\t\t\t\t   @ErrorSeverity, -- Severity.\r\n\t\t\t\t\t   @ErrorState, -- State.\r\n\t\t\t\t\t   @ErrorProcedure,\r\n\t\t\t\t\t   @ErrorLine,\r\n\t\t\t\t\t   @BillingPeriod,\r\n\t\t\t\t\t   @UploadNypaExchangeDataSeqid,\r\n\t\t\t\t\t   @CurrentAccountNumber,\r\n\t\t\t\t\t   @OriginalAccountNumber\r\n\t\t\t\t\t   ) with log;\r\n\t\t\t\r\n\t\t\tset @status  = 1\r\n\r\n\t\tIF @@trancount > 0 rollback -- transaction ExchangeRow;\r\n\t\t\t\r\n\t\tEND CATCH;\r\n\t   \t\t\t\t   \r\n\t\t\t\tfetch read_exchange_record into    @UploadNypaExchangeDataSeqid, @ExchangeCode\r\n\t\t end \r\n\t\t--\r\n\t\tclose read_exchange_record\r\n\r\n\t\tDeallocate read_exchange_record\r\n\r\n--\r\nend"
        }
      ]
    }
  ]
}