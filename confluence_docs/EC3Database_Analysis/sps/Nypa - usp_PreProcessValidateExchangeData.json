{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_PreProcessValidateExchangeData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_PreProcessValidateExchangeData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to perform pre-processing validation on exchange data reported by NYPA (New York Power Authority). The procedure aims to correct missing or incorrect data by using Con Edison dates, as the meter effective dates are considered accurate while the account dates are not. The procedure includes several commented-out SQL update statements that suggest various data correction operations, such as converting exchange codes, updating account effective dates, and marking certain records as recoverable errors. The procedure is currently non-functional as all SQL operations are commented out."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level is considered medium due to the multiple conditional updates and joins across tables, which require a good understanding of the data relationships and business rules. The procedure involves several logical steps and conditions that need to be carefully managed to ensure data integrity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is intended to return the execution status of the procedure. A value of "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " indicates success, while "
                },
                {
                  "type": "text",
                  "text": "1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " indicates failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The business logic is centered around correcting and validating exchange data. The workflow, as indicated by the commented-out code, includes:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Converting exchange codes from '47' to '74' and marking them as recoverable errors if certain conditions are met."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Finding the first occurrence of exchange code '46' and updating it to '47' with corrected effective dates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Marking certain meter exchanges as recoverable errors when they are involved in specific exchange scenarios."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Updating account effective turn-off dates based on more reliable meter effective turn-off dates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Associating demand meters with physical meters based on specific criteria."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Several SELECT statements are included to verify the results of these operations, although they are also commented out."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure involves multiple subqueries and joins, which could impact performance, especially if the "
                },
                {
                  "type": "text",
                  "text": "Common.ExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table is large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing on columns used in WHERE clauses and joins (e.g., "
                },
                {
                  "type": "text",
                  "text": "ExchangeCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "CurrentAccountNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UtilityCompanySeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") could improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The commented-out nature of the code suggests that the procedure is not currently in use, so performance considerations are theoretical unless the code is uncommented and executed."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure is entirely commented out, meaning it does not perform any operations. If uncommented, the logic must be thoroughly tested to ensure it does not introduce data inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The reliance on specific exchange codes and utility company IDs (e.g., "
                },
                {
                  "type": "text",
                  "text": "UtilityCompanySeqid = 7",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") suggests that the procedure is tailored to specific scenarios, which may not be applicable universally."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The use of hardcoded dates (e.g., '99991231') could lead to issues if not properly documented or understood by future developers."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure's logic assumes that certain data corrections are valid, which may not always be the case if underlying business rules change."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The commented-out code indicates that the procedure may have been deprecated or replaced by other processes, as noted in the comments from 2019."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "/*****************************************************************************************************************************************************************************************************/\n/*                                                                                                                                                                                                   */\r\n/*****************************************************************************************************************************************************************************************************/\r\nCREATE PROCEDURE [Nypa].[usp_PreProcessValidateExchangeData]\r\n    @StatusCode INT OUTPUT\r\n\r\nAS --**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Pre-process validation of the reported exchange data.  Correct the missing\r\n--*               data that NYPA failed to report correctlty.  We need to use the Con Edison\r\n--*               dates.  The meter effective dates are correct and the account dates are bogus \r\n--*               SAP data.  The account effective dates are derived from the meter effective dates\r\n--*               that are based upon Con Edison information.\r\n--*               \r\n--* Exec:         [Nypa].[usp_PreProcessValidateExchangeData]\r\n--*\r\n--* Parameter(s):         \r\n--*                            StatusCode  int output       -  Execution Return Status \r\n--*\r\n--*\r\n--* Database:     DEM\r\n--*\r\n--* Return:\t    0 Success\r\n--*             1 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   10/26/2005\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 04/23/2012 PAH  First Version  \r\n--* 10/31/2013 PAH  Added aditional checks for correcting 27 which was used in a 45\r\n--* 10/6/2016\tzd\tintegrated new exchange process\r\n--* 11/29/2016\tzd\tturn off date 9999 99 99 to 99991231\r\n--* 1/24/2019\tzd\tthis process is not needed\r\n--***************************************************************************************\r\n\r\n\r\n\r\n --   BEGIN \r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tConvert NYPA reported 47 to 74 and make it a recoverable error\r\n--\r\n----        UPDATE  Common.ExchangeData\r\n----        SET     ExchangeCode = '74'\r\n----        ,       IsProcessed = 'R'\r\n----        WHERE   ( ExchangeCode = '47' )\r\n----                AND LEN(CurrentMeterNumber) < 7\r\n----\t\t\t\tAND UtilityCompanySeqid =7\r\n------\r\n------\tUse the NYPA reported 47 to find the first 46 and make that exchange into the 47\r\n------\r\n----        UPDATE  Common.ExchangeData\r\n----        SET     ExchangeCode = '47'\r\n----        ,       AccountEffectiveTurnOn = MeterEffectiveTurnOnDate\r\n----        ,       AccountEffectiveTurnOff = '99991231'\r\n----        ,       TransactionEffectiveDate = MeterEffectiveTurnOnDate\r\n----        WHERE   ExchangeDataSeqid IN (\r\n----                SELECT  minSeqid\r\n----                FROM ( SELECT    CurrentAccountNumber\r\n----                          FROM   Common.ExchangeData\r\n----                          WHERE ( ExchangeCode = '74' )\r\n----                        ) AS newAcct\r\n----                        INNER JOIN ( SELECT CurrentAccountNumber\r\n----                                     ,      MIN(ExchangeDataSeqid) AS minSeqid\r\n----                                     FROM Common.ExchangeData\r\n----                                     WHERE  ( ExchangeCode = '46' )\r\n----                                     GROUP BY CurrentAccountNumber\r\n----                                   ) AS firstMeter ON newAcct.CurrentAccountNumber = firstMeter.CurrentAccountNumber ) \r\n----\t\t\t\tAND ExchangeData.UtilityCompanySeqid = 7\t\t\t\t\t\t                     \r\n\r\n----/*\r\n------\t\tConvert meter turns 27 to recoverable when the turned off meter is used in a meter exchange 45\r\n----*/\r\n----        UPDATE  Common.ExchangeData\r\n----        SET     IsProcessed = 'R'\r\n----        FROM Nypa.uvw_ExchangeReviewCriticalColumn\r\n----                INNER JOIN Common.ExchangeData ON Nypa.uvw_ExchangeReviewCriticalColumn.ExchangeDataSeqid = Common.ExchangeData.ExchangeDataSeqid\r\n----        WHERE   ( Nypa.uvw_ExchangeReviewCriticalColumn.ExchangeCode IN ( '27' ) )\r\n----                AND ( Nypa.uvw_ExchangeReviewCriticalColumn.CurrentMeterNumber IN (\r\n----                      SELECT    OriginalMeterNumber\r\n----                      FROM   Nypa.uvw_ExchangeReviewCriticalColumn AS uvw_ExchangeReviewCriticalColumn_1\r\n----                      WHERE ( ExchangeCode IN ( '45' ) ) ) )\r\n------\r\n------\tFind associated meters on turned off accounts and use the meter effective turn off date for the account.  It is more reliable than what NYPA reports.\r\n------\r\n----        UPDATE  xchg28\r\n----        SET     AccountEffectiveTurnOff = xchg27.MeterEffectiveTurnOffDate\r\n----        FROM ( SELECT    ExchangeDataSeqid\r\n----                  ,         ExchangeCode\r\n----                  ,         BillingPeriod\r\n----                  ,         CurrentAccountNumber\r\n----                  ,         OriginalAccountNumber\r\n----                  ,         CurrentMeterNumber\r\n----                  ,         OriginalMeterNumber\r\n----                  ,         DeliveryServiceClassEffectiveDate\r\n----                  ,         AccountEffectiveTurnOn\r\n----                  ,         AccountEffectiveTurnOff\r\n----                  ,         MeterEffectiveTurnOnDate\r\n----                  ,         MeterEffectiveTurnOffDate\r\n----                  ,         TransactionEffectiveDate\r\n----                  FROM   Common.ExchangeData AS UploadNYPAExchangeData_1\r\n----                  WHERE ( ExchangeCode = '28' )\r\n----\t\t\t\t  AND UtilityCompanySeqid = 7\r\n----                ) AS xchg28\r\n----                INNER JOIN ( SELECT ExchangeDataSeqid\r\n----                             ,      ExchangeCode\r\n----                             ,      BillingPeriod\r\n----                             ,      CurrentAccountNumber\r\n----                             ,      OriginalAccountNumber\r\n----                             ,      CurrentMeterNumber\r\n----                             ,      OriginalMeterNumber\r\n----                             ,      DeliveryServiceClassEffectiveDate\r\n----                             ,      AccountEffectiveTurnOn\r\n----                             ,      AccountEffectiveTurnOff\r\n----                             ,      MeterEffectiveTurnOnDate\r\n----                             ,      MeterEffectiveTurnOffDate\r\n----                             ,      TransactionEffectiveDate\r\n----                             FROM Common.ExchangeData AS UploadNYPAExchangeData_2\r\n----                             WHERE  ( ExchangeCode = '27' )\r\n----\t\t\t\t\t\t\t AND UtilityCompanySeqid = 7\r\n----                           ) AS xchg27 ON xchg28.CurrentAccountNumber = xchg27.CurrentAccountNumber\r\n----                INNER JOIN Common.ExchangeData ON xchg27.CurrentAccountNumber = Common.ExchangeData.CurrentAccountNumber\r\n----                                                          AND xchg27.ExchangeDataSeqid = Common.ExchangeData.ExchangeDataSeqid\r\n------\r\n------\tFind associated meters on turned off accounts and change the IsProcessed to \"R\"ecoverable error\r\n------\r\n----        UPDATE  xchg27\r\n----        SET     IsProcessed = 'R'\r\n----        FROM ( SELECT    ExchangeDataSeqid\r\n----                  ,         ExchangeCode\r\n----                  ,         BillingPeriod\r\n----                  ,         CurrentAccountNumber\r\n----                  ,         OriginalAccountNumber\r\n----                  ,         CurrentMeterNumber\r\n----                  ,         OriginalMeterNumber\r\n----                  ,         DeliveryServiceClassEffectiveDate\r\n----                  ,         AccountEffectiveTurnOn\r\n----                  ,         AccountEffectiveTurnOff\r\n----                  ,         MeterEffectiveTurnOnDate\r\n----                  ,         MeterEffectiveTurnOffDate\r\n----                  ,         TransactionEffectiveDate\r\n----                  FROM   Common.ExchangeData AS UploadNYPAExchangeData_1\r\n----                  WHERE ( ExchangeCode = '28' )\r\n----\t\t\t\t  AND UtilityCompanySeqid = 7\r\n----                ) AS xchg28\r\n----                INNER JOIN ( SELECT ExchangeDataSeqid\r\n----                             ,      ExchangeCode\r\n----                             ,      BillingPeriod\r\n----                             ,      CurrentAccountNumber\r\n----                             ,      OriginalAccountNumber\r\n----                             ,      CurrentMeterNumber\r\n----                             ,      OriginalMeterNumber\r\n----                             ,      DeliveryServiceClassEffectiveDate\r\n----                             ,      AccountEffectiveTurnOn\r\n----                             ,      AccountEffectiveTurnOff\r\n----                             ,      MeterEffectiveTurnOnDate\r\n----                             ,      MeterEffectiveTurnOffDate\r\n----                             ,      TransactionEffectiveDate\r\n----                             ,      IsProcessed\r\n----                             FROM Common.ExchangeData AS UploadNYPAExchangeData_2\r\n----                             WHERE  ( ExchangeCode = '27' )\r\n----\t\t\t\t\t\t\t AND UtilityCompanySeqid = 7\r\n----                           ) AS xchg27 ON xchg28.CurrentAccountNumber = xchg27.CurrentAccountNumber    \r\n------\r\n------\tFind all associated demand meters reported in the exchange data and update the associated demand meter number in physical meter starting with \"8\", the last\r\n------\t6 digits match identically to the meter starting with \"1\"\r\n------\r\n----        UPDATE  PhysicalMeter\r\n----        SET     AssociatedDemandMeter = AssociatedDemandMeter.CurrentMeterNumber\r\n----        FROM ( SELECT    ExchangeDataSeqid\r\n----                  ,         BillingPeriod\r\n----                  ,         CurrentAccountNumber\r\n----                  ,         OriginalAccountNumber\r\n----                  ,         CurrentMeterNumber\r\n----                  ,         SUBSTRING(CurrentMeterNumber, 1, 1) AS FirstDiget\r\n----                  ,         SUBSTRING(CurrentMeterNumber, 2, 7) AS LastSixDigets\r\n----                  ,         OriginalMeterNumber\r\n----                  ,         ExchangeCode\r\n----                  ,         AccountEffectiveTurnOn\r\n----                  ,         AccountEffectiveTurnOff\r\n----                  ,         DeliveryServiceClassEffectiveDate\r\n----                  ,         MeterEffectiveTurnOnDate\r\n----                  ,         MeterEffectiveTurnOffDate\r\n----                  ,         TransactionEffectiveDate\r\n----                  ,         AssociatedDemandMeter\r\n----                  FROM   Common.ExchangeData\r\n----                  WHERE ( SUBSTRING(CurrentMeterNumber, 1, 1) = '8' )\r\n----                            AND ( CurrentMeterNumber <> 'TRNSM' )\r\n----\t\t\t\t\t\t\tAND UtilityCompanySeqid = 7\r\n----                ) AS PhysicalMeter\r\n----                INNER JOIN ( SELECT ExchangeDataSeqid\r\n----                             ,      BillingPeriod\r\n----                             ,      CurrentAccountNumber\r\n----                             ,      OriginalAccountNumber\r\n----                             ,      CurrentMeterNumber\r\n----                             ,      SUBSTRING(CurrentMeterNumber, 1, 1) AS FirstDiget\r\n----                             ,      SUBSTRING(CurrentMeterNumber, 2, 7) AS LastSixDigets\r\n----                             ,      OriginalMeterNumber\r\n----                             ,      ExchangeCode\r\n----                             ,      AccountEffectiveTurnOn\r\n----                             ,      AccountEffectiveTurnOff\r\n----                             ,      DeliveryServiceClassEffectiveDate\r\n----                             ,      MeterEffectiveTurnOnDate\r\n----                             ,      MeterEffectiveTurnOffDate\r\n----                             ,      TransactionEffectiveDate\r\n----                             ,      AssociatedDemandMeter\r\n----                             FROM Common.ExchangeData\r\n----                             WHERE  ( SUBSTRING(CurrentMeterNumber, 1, 1) = '1' )\r\n----                                    AND ( CurrentMeterNumber <> 'TRNSM' )\r\n----\t\t\t\t\t\t\t\t\tAND UtilityCompanySeqid = 7\r\n----                           ) AS AssociatedDemandMeter ON PhysicalMeter.CurrentAccountNumber = AssociatedDemandMeter.CurrentAccountNumber\r\n----                                                         AND PhysicalMeter.LastSixDigets = AssociatedDemandMeter.LastSixDigets                \r\n\r\n------ Check queries of the pre-preprocessing\r\n\r\n----        SELECT  ExchangeDataSeqid\r\n----        ,       IsProcessed\r\n----        ,       ExchangeCode\r\n----        ,       BillingPeriod\r\n----        ,       CurrentAccountNumber\r\n----        ,       CurrentMeterNumber\r\n----        ,       AccountEffectiveTurnOff\r\n----        ,       MeterEffectiveTurnOffDate\r\n----        ,       TransactionEffectiveDate\r\n----        FROM Nypa.uvw_ExchangeReviewCriticalColumn\r\n----        WHERE   ExchangeCode IN ( '27' )\r\n----                AND CurrentMeterNumber IN (\r\n----                SELECT  OriginalMeterNumber\r\n----                FROM Nypa.uvw_ExchangeReviewCriticalColumn\r\n----                WHERE   ExchangeCode IN ( '45' ) )\r\n\r\n----        SELECT  ExchangeDataSeqid\r\n----        ,       IsProcessed\r\n----        ,       ExchangeCode\r\n----        ,       BillingPeriod\r\n----        ,       CurrentAccountNumber\r\n----        ,       CurrentMeterNumber\r\n----        ,       OriginalMeterNumber\r\n----        ,       AccountEffectiveTurnOff\r\n----        ,       MeterEffectiveTurnOnDate\r\n----        ,       TransactionEffectiveDate\r\n----        FROM Nypa.uvw_ExchangeReviewCriticalColumn\r\n----        WHERE   ExchangeCode IN ( '45' )\r\n----                AND OriginalMeterNumber IN (\r\n----                SELECT  CurrentMeterNumber\r\n----                FROM Nypa.uvw_ExchangeReviewCriticalColumn\r\n----                WHERE   ExchangeCode IN ( '27' ) )     \r\n\r\n----        SELECT  *\r\n\r\n----        FROM Nypa.uvw_ExchangeReviewCriticalColumn\r\n----        WHERE   ExchangeCode IN ( 'AX' )\r\n----        ORDER BY CurrentAccountNumber\r\n----        ,       ExchangeCode DESC\r\n\r\n----        SELECT  ExchangeDataSeqid\r\n----        ,       IsProcessed\r\n----        ,       ExchangeCode\r\n----        ,       BillingPeriod\r\n----        ,       CurrentAccountNumber\r\n----        ,       CurrentMeterNumber\r\n----        ,       AccountEffectiveTurnOff\r\n----        ,       MeterEffectiveTurnOffDate\r\n----        ,       TransactionEffectiveDate\r\n----        FROM Nypa.uvw_ExchangeReviewCriticalColumn\r\n----        WHERE   ExchangeCode IN ( '27', '28' )\r\n----        ORDER BY CurrentAccountNumber\r\n----        ,       ExchangeCode DESC\r\n\r\n----        SELECT  *\r\n\r\n----        FROM Nypa.uvw_ExchangeReviewCriticalColumn\r\n----        WHERE   ExchangeCode IN ( '46', '47', '74' )\r\n----        ORDER BY CurrentAccountNumber\r\n----        ,       ExchangeCode DESC\r\n\r\n----        SELECT  ExchangeDataSeqid\r\n----        ,       IsProcessed\r\n----        ,       ExchangeCode\r\n----        ,       BillingPeriod\r\n----        ,       CurrentAccountNumber\r\n----        ,       CurrentMeterNumber\r\n----        ,       OriginalMeterNumber\r\n----        ,       MeterEffectiveTurnOnDate\r\n----        ,       MeterEffectiveTurnOffDate\r\n----        ,       TransactionEffectiveDate\r\n----        FROM Nypa.uvw_ExchangeReviewCriticalColumn\r\n----        WHERE   ExchangeCode IN ( '45' )\r\n----        ORDER BY CurrentAccountNumber\r\n----        ,       ExchangeCode DESC\r\n--END"
        }
      ]
    }
  ]
}