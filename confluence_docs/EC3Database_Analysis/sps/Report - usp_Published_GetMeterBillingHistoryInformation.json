{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Published_GetMeterBillingHistoryInformation",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Published_GetMeterBillingHistoryInformation",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve historical billing information for meters associated with a specific facility or agency. It processes data related to energy consumption and demand over fiscal years, differentiating between actual and estimated readings. The procedure uses various SQL operations, including joins, subqueries, and pivots, to compile and format the data for reporting purposes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to its use of multiple SQL constructs, including table variables, dynamic filtering based on input parameters, and the use of pivot tables to transform data. It also involves intricate logic to determine fiscal years and handle different scenarios based on user roles and facility or agency context."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Used to identify the user making the request, potentially for filtering or logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Specifies the billing period for which data is being requested."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AgencyCode AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Identifies the agency for which billing data is required."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@OECFacilityNumber AS VARCHAR(7)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Identifies the facility for which billing data is required."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsAgencyUser AS BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether the user is an agency user, affecting how data is filtered and retrieved."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Setup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to avoid locking issues and declares several variables and table variables for processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Billing Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the user is an agency user, the current billing period is retrieved from the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Fiscal Year Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The current fiscal year is calculated using a custom function "
                },
                {
                  "type": "text",
                  "text": "dbo.CalculateFiscalYear",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and the billing period for July of the previous fiscal year is determined."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Facility and Agency Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The facility sequence ID is retrieved based on the provided facility number. A table variable is populated with agency and descendant IDs using a user-defined function."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure determines whether to return data by agency or facility based on the presence of a facility sequence ID."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Meter Data Collection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Meter data is collected into a table variable, including historical meter numbers and current meter information."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Meter Type Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The meter type is updated based on data from the "
                },
                {
                  "type": "text",
                  "text": "Billing.MeterBillingElectric",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table, considering specific conditions for NYPA."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Transformation and Output",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses a series of pivot operations to transform the data into a format suitable for reporting, aggregating consumption, demand, and reading types across fiscal years."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can improve performance by reducing locking but may lead to reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins and Subqueries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves complex joins and subqueries, which can be resource-intensive, especially with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Pivot Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Pivoting data can be computationally expensive and may impact performance if not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensuring appropriate indexing on tables involved in joins and filtering can significantly enhance performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Consistency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " may result in reading dirty data, which could affect the accuracy of the report."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The complexity of the procedure may lead to performance bottlenecks as data volume grows, particularly with the use of pivot operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions or incomplete data processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not include any explicit security checks or logging, which could be a concern if sensitive data is involved."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_Published_GetMeterBillingHistoryInformation]\n(\r\n\t@EmailAddress AS VARCHAR(75)\r\n\t,@PublishedBillingPeriod AS VARCHAR(6)\r\n\t,@AgencyCode AS VARCHAR(6)\r\n\t,@OECFacilityNumber AS VARCHAR(7)\r\n\t,@IsAgencyUser AS BIT = 0\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @FacilitySeqid AS INT, @ResultByAgency AS CHAR(1), @CurrentFY AS VARCHAR(4)\r\n\t\t,@JulyPeriodPreviousFY AS VARCHAR(6);\r\n\t\r\n\t-- table variable to hold the previous meter numbers\r\n\tDECLARE @PreviousMeterNumbersTable TABLE\r\n\t\t(UniqueAccountSeqid INT\r\n\t\t,UniqueMeterSeqid INT\r\n\t\t,PriorMeterNumber VARCHAR(9)\r\n\t\t,CurrentMeterNumber VARCHAR(15)\r\n\t\t,MeterEffectiveOnDate VARCHAR(8)\r\n\t\t,AccountExchangeMeterTrackSeqid INT\r\n\t\t,UtilityServiceAddress VARCHAR(500)\r\n\t\t,MeterType INT);\r\n\r\n\tIF (@IsAgencyUser = 1)\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = PublishedBillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\tEND;\r\n\r\n\t-- calculate current fiscal year\r\n\tSELECT @CurrentFY = dbo.CalculateFiscalYear(@PublishedBillingPeriod);\r\n\t\r\n\t-- set the billing period for July of previous FY\r\n\tSELECT @JulyPeriodPreviousFY = CAST(CAST(@CurrentFY AS INT) - 2 AS VARCHAR(4)) + '07';\r\n\r\n\t-- convert the facility number to seqid\r\n\tSELECT @FacilitySeqid = FacilitySeqid FROM Billing.Facility WHERE OecFacilityNumber = @OECFacilityNumber;\r\n\r\n\t-- collect the agencies into a table variable to save a bit\r\n\tDECLARE @AgencyAndItsDecendants TABLE (AgencyDivisionSeqID INT);\r\n\r\n\t-- populate the table\r\n\tINSERT INTO @AgencyAndItsDecendants(AgencyDivisionSeqID)\r\n\tSELECT AgencyDivisionSeqID FROM Billing.uftn_TableGetAllAgencyChildrenByAgencyCodeOEC(@AgencyCode, @EmailAddress);\r\n\t\r\n\t-- determine if we need to return data by agency or simply for the single facility\r\n\tIF (@FacilitySeqid IS NULL)\r\n\tBEGIN\r\n\t\tSET @ResultByAgency = 'Y';\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tSET @ResultByAgency = 'N';\r\n\tEND;\r\n\r\n\t-- populate the temp table\r\n\tINSERT INTO @PreviousMeterNumbersTable\r\n\t\t(UniqueAccountSeqid\r\n\t\t,UniqueMeterSeqid\r\n\t\t,PriorMeterNumber\r\n\t\t,CurrentMeterNumber\r\n\t\t,MeterEffectiveOnDate\r\n\t\t,UtilityServiceAddress\r\n\t\t,MeterType)\r\n\tSELECT A.UniqueAccountSeqid\r\n\t\t,M.UniqueMeterSeqid\r\n\t\t,(SELECT TOP (1) SM.OriginalMeterNumber\r\n\t\tFROM Billing.Meter AS SM\r\n\t\tWHERE SM.UniqueAccountSeqID = M.UniqueAccountSeqID\r\n\t\t\tAND SM.UniqueMeterSeqid = M.UniqueMeterSeqid\r\n\t\t\tAND SM.OriginalMeterNumber <> M.OriginalMeterNumber) AS PriorMeterNumber\r\n\t\t,M.CurrentMeterNumber\r\n\t\t,M.MeterEffectiveOnDate\r\n\t\t,M.UtilityServiceAddress\r\n\t\t,0 -- set that as a default\r\n\tFROM Billing.Meter AS M\r\n\t\tINNER JOIN Billing.Account AS A ON M.UniqueAccountSeqID = A.UniqueAccountSeqid\r\n\tWHERE A.IsCurrentRecord = 'Y' AND M.IsCurrentRecord = 'Y'\r\n\t\tAND (@ResultByAgency <> 'Y' OR A.AgencyAccount IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\t\tAND (@ResultByAgency <> 'N' OR A.FacilityAccount = @FacilitySeqid);\r\n\t\t\r\n\t-- update the table variable with the meter type\r\n\t-- the meter type is calculated from the meterbillingelectric since NYPA doesnt report it accuratly on the meter record\r\n\tUPDATE @PreviousMeterNumbersTable\r\n\tSET MeterType = MTI.MeterType\r\n    FROM (SELECT DISTINCT A.UniqueAccountSeqid\r\n\t\t\t,MB.UniqueMeterSeqId\r\n\t\t\t,CASE WHEN TRIM(ISNULL(MBE.RecordTypeConsumption, 0)) = 1\r\n\t\t\t\t\tAND TRIM(ISNULL(MBE.RecordTypeDemand, 0)) <> 4 THEN 1\r\n\t\t\t\tWHEN TRIM(ISNULL(MBE.RecordTypeConsumption, 0)) <> 1\r\n\t\t\t\t\tAND TRIM(ISNULL(MBE.RecordTypeDemand, 0)) = 4 THEN 2\r\n\t\t\t\tWHEN TRIM(ISNULL(MBE.RecordTypeConsumption, 0)) = 1\r\n\t\t\t\t\tAND TRIM(ISNULL(MBE.RecordTypeDemand, 0)) = 4 THEN 3\r\n\t\t\t\tEND AS MeterType\r\n\t\tFROM Billing.MeterBillingElectric AS MBE\r\n\t\t\tINNER JOIN Billing.MeterBilling AS MB ON MBE.UniqueMeterSeqId = MB.UniqueMeterSeqId\r\n\t\t\t\tAND MB.UniqueAccountSeqId = MBE.UniqueAccountSeqId\r\n\t\t\tINNER JOIN Billing.Account AS A ON MB.UniqueAccountSeqId = A.UniqueAccountSeqid\r\n\t\tWHERE A.IsCurrentRecord = 'Y' AND A.UtilityAccountProvider = 7 -- since this only applies to NYPA\r\n\t\t\tAND MBE.BillingPeriod <= @PublishedBillingPeriod\r\n\t\t\tAND MBE.BillingPeriod >= @JulyPeriodPreviousFY\r\n\t\t\tAND (@ResultByAgency <> 'Y' OR A.AgencyAccount IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\t\t\tAND (@ResultByAgency <> 'N' OR A.FacilityAccount = @FacilitySeqid)\r\n\t\t) AS MTI\r\n\t\tINNER JOIN @PreviousMeterNumbersTable AS PMNT\r\n\t\t\tON MTI.UniqueAccountSeqid = PMNT.UniqueAccountSeqid AND PMNT.UniqueMeterSeqid = MTI.UniqueMeterSeqId;\r\n\r\n\tSELECT P.UniqueAccountSeqID AS AccountSeqid\r\n        ,PMNT.CurrentMeterNumber\r\n        ,PMNT.UtilityServiceAddress AS meterUtilityServiceAddress\r\n        ,P.EnergyUnit\r\n        ,P.EnergySource\r\n        ,P.EnergyType\r\n        ,P.PreviousFYJuly\r\n        ,P.PreviousFYAugust\r\n        ,P.PreviousFYSeptember\r\n        ,P.PreviousFYOctober\r\n        ,P.PreviousFYNovember\r\n        ,P.PreviousFYDecember\r\n        ,P.PreviousFYJanuary\r\n        ,P.PreviousFYFebruary\r\n        ,P.PreviousFYMarch\r\n        ,P.PreviousFYApril\r\n        ,P.PreviousFYMay\r\n        ,P.PreviousFYJune\r\n        ,P.CurrentFYJuly\r\n        ,P.CurrentFYAugust\r\n        ,P.CurrentFYSeptember\r\n        ,P.CurrentFYOctober\r\n        ,P.CurrentFYNovember\r\n        ,P.CurrentFYDecember\r\n        ,P.CurrentFYJanuary\r\n        ,P.CurrentFYFebruary\r\n        ,P.CurrentFYMarch\r\n        ,P.CurrentFYApril\r\n        ,P.CurrentFYMay\r\n        ,P.CurrentFYJune\r\n        ,P.EPreviousFYJuly\r\n        ,P.EPreviousFYAugust\r\n        ,P.EPreviousFYSeptember\r\n        ,P.EPreviousFYOctober\r\n        ,P.EPreviousFYNovember\r\n        ,P.EPreviousFYDecember\r\n        ,P.EPreviousFYJanuary\r\n        ,P.EPreviousFYFebruary\r\n        ,P.EPreviousFYMarch\r\n        ,P.EPreviousFYApril\r\n        ,P.EPreviousFYMay\r\n        ,P.EPreviousFYJune\r\n        ,P.ECurrentFYJuly\r\n        ,P.ECurrentFYAugust\r\n        ,P.ECurrentFYSeptember\r\n        ,P.ECurrentFYOctober\r\n        ,P.ECurrentFYNovember\r\n        ,P.ECurrentFYDecember\r\n        ,P.ECurrentFYJanuary\r\n        ,P.ECurrentFYFebruary\r\n        ,P.ECurrentFYMarch\r\n        ,P.ECurrentFYApril\r\n        ,P.ECurrentFYMay\r\n        ,P.ECurrentFYJune\r\n        ,P.DPreviousFYJuly\r\n        ,P.DPreviousFYAugust\r\n        ,P.DPreviousFYSeptember\r\n        ,P.DPreviousFYOctober\r\n        ,P.DPreviousFYNovember\r\n        ,P.DPreviousFYDecember\r\n        ,P.DPreviousFYJanuary\r\n        ,P.DPreviousFYFebruary\r\n        ,P.DPreviousFYMarch\r\n        ,P.DPreviousFYApril\r\n        ,P.DPreviousFYMay\r\n        ,P.DPreviousFYJune\r\n        ,P.DCurrentFYJuly\r\n        ,P.DCurrentFYAugust\r\n        ,P.DCurrentFYSeptember\r\n        ,P.DCurrentFYOctober\r\n        ,P.DCurrentFYNovember\r\n        ,P.DCurrentFYDecember\r\n        ,P.DCurrentFYJanuary\r\n        ,P.DCurrentFYFebruary\r\n        ,P.DCurrentFYMarch\r\n        ,P.DCurrentFYApril\r\n        ,P.DCurrentFYMay\r\n        ,P.DCurrentFYJune\r\n\t\t,PMNT.PriorMeterNumber AS PreviousMeterNumber\r\n\t\t,PMNT.MeterEffectiveOnDate\r\n\t\t,PMNT.MeterType\r\n\tFROM (SELECT p3.UniqueAccountSeqID\r\n\t\t\t,p3.UniqueMeterSeqid\r\n\t\t\t,p3.EnergyUnit\r\n\t\t\t,p3.EnergySource\r\n\t\t\t,p3.EnergyType\r\n\t\t\t,MAX(p3.PreviousFYJuly) AS PreviousFYJuly\r\n\t\t\t,MAX(p3.PreviousFYAugust) AS PreviousFYAugust\r\n\t\t\t,MAX(p3.PreviousFYSeptember) AS PreviousFYSeptember\r\n\t\t\t,MAX(p3.PreviousFYOctober) AS PreviousFYOctober\r\n\t\t\t,MAX(p3.PreviousFYNovember) AS PreviousFYNovember\r\n\t\t\t,MAX(p3.PreviousFYDecember) AS PreviousFYDecember\r\n\t\t\t,MAX(p3.PreviousFYJanuary) AS PreviousFYJanuary\r\n\t\t\t,MAX(p3.PreviousFYFebruary) AS PreviousFYFebruary\r\n\t\t\t,MAX(p3.PreviousFYMarch) AS PreviousFYMarch\r\n\t\t\t,MAX(p3.PreviousFYApril) AS PreviousFYApril\r\n\t\t\t,MAX(p3.PreviousFYMay) AS PreviousFYMay\r\n\t\t\t,MAX(p3.PreviousFYJune) AS PreviousFYJune\r\n\t\t\t,MAX(p3.CurrentFYJuly) AS CurrentFYJuly\r\n\t\t\t,MAX(p3.CurrentFYAugust) AS CurrentFYAugust\r\n\t\t\t,MAX(p3.CurrentFYSeptember) AS CurrentFYSeptember\r\n\t\t\t,MAX(p3.CurrentFYOctober) AS CurrentFYOctober\r\n\t\t\t,MAX(p3.CurrentFYNovember) AS CurrentFYNovember\r\n\t\t\t,MAX(p3.CurrentFYDecember) AS CurrentFYDecember\r\n\t\t\t,MAX(p3.CurrentFYJanuary) AS CurrentFYJanuary\r\n\t\t\t,MAX(p3.CurrentFYFebruary) AS CurrentFYFebruary\r\n\t\t\t,MAX(p3.CurrentFYMarch) AS CurrentFYMarch\r\n\t\t\t,MAX(p3.CurrentFYApril) AS CurrentFYApril\r\n\t\t\t,MAX(p3.CurrentFYMay) AS CurrentFYMay\r\n\t\t\t,MAX(p3.CurrentFYJune) AS CurrentFYJune\r\n\t\t\t-- estimated or actual block\r\n\t\t\t,MAX(p3.EPreviousFYJuly) AS EPreviousFYJuly\r\n\t\t\t,MAX(p3.EPreviousFYAugust) AS EPreviousFYAugust\r\n\t\t\t,MAX(p3.EPreviousFYSeptember) AS EPreviousFYSeptember\r\n\t\t\t,MAX(p3.EPreviousFYOctober) AS EPreviousFYOctober\r\n\t\t\t,MAX(p3.EPreviousFYNovember) AS EPreviousFYNovember\r\n\t\t\t,MAX(p3.EPreviousFYDecember) AS EPreviousFYDecember\r\n\t\t\t,MAX(p3.EPreviousFYJanuary) AS EPreviousFYJanuary\r\n\t\t\t,MAX(p3.EPreviousFYFebruary) AS EPreviousFYFebruary\r\n\t\t\t,MAX(p3.EPreviousFYMarch) AS EPreviousFYMarch\r\n\t\t\t,MAX(p3.EPreviousFYApril) AS EPreviousFYApril\r\n\t\t\t,MAX(p3.EPreviousFYMay) AS EPreviousFYMay\r\n\t\t\t,MAX(p3.EPreviousFYJune) AS EPreviousFYJune\r\n\t\t\t,MAX(p3.ECurrentFYJuly) AS ECurrentFYJuly\r\n\t\t\t,MAX(p3.ECurrentFYAugust) AS ECurrentFYAugust\r\n\t\t\t,MAX(p3.ECurrentFYSeptember) AS ECurrentFYSeptember\r\n\t\t\t,MAX(p3.ECurrentFYOctober) AS ECurrentFYOctober\r\n\t\t\t,MAX(p3.ECurrentFYNovember) AS ECurrentFYNovember\r\n\t\t\t,MAX(p3.ECurrentFYDecember) AS ECurrentFYDecember\r\n\t\t\t,MAX(p3.ECurrentFYJanuary) AS ECurrentFYJanuary\r\n\t\t\t,MAX(p3.ECurrentFYFebruary) AS ECurrentFYFebruary\r\n\t\t\t,MAX(p3.ECurrentFYMarch) AS ECurrentFYMarch\r\n\t\t\t,MAX(p3.ECurrentFYApril) AS ECurrentFYApril\r\n\t\t\t,MAX(p3.ECurrentFYMay) AS ECurrentFYMay\r\n\t\t\t,MAX(p3.ECurrentFYJune) AS ECurrentFYJune\r\n\t\t\t-- demand block\r\n\t\t\t,MAX(p3.DPreviousFYJuly) AS DPreviousFYJuly\r\n\t\t\t,MAX(p3.DPreviousFYAugust) AS DPreviousFYAugust\r\n\t\t\t,MAX(p3.DPreviousFYSeptember) AS DPreviousFYSeptember\r\n\t\t\t,MAX(p3.DPreviousFYOctober) AS DPreviousFYOctober\r\n\t\t\t,MAX(p3.DPreviousFYNovember) AS DPreviousFYNovember\r\n\t\t\t,MAX(p3.DPreviousFYDecember) AS DPreviousFYDecember\r\n\t\t\t,MAX(p3.DPreviousFYJanuary) AS DPreviousFYJanuary\r\n\t\t\t,MAX(p3.DPreviousFYFebruary) AS DPreviousFYFebruary\r\n\t\t\t,MAX(p3.DPreviousFYMarch) AS DPreviousFYMarch\r\n\t\t\t,MAX(p3.DPreviousFYApril) AS DPreviousFYApril\r\n\t\t\t,MAX(p3.DPreviousFYMay) AS DPreviousFYMay\r\n\t\t\t,MAX(p3.DPreviousFYJune) AS DPreviousFYJune\r\n\t\t\t,MAX(p3.DCurrentFYJuly) AS DCurrentFYJuly\r\n\t\t\t,MAX(p3.DCurrentFYAugust) AS DCurrentFYAugust\r\n\t\t\t,MAX(p3.DCurrentFYSeptember) AS DCurrentFYSeptember\r\n\t\t\t,MAX(p3.DCurrentFYOctober) AS DCurrentFYOctober\r\n\t\t\t,MAX(p3.DCurrentFYNovember) AS DCurrentFYNovember\r\n\t\t\t,MAX(p3.DCurrentFYDecember) AS DCurrentFYDecember\r\n\t\t\t,MAX(p3.DCurrentFYJanuary) AS DCurrentFYJanuary\r\n\t\t\t,MAX(p3.DCurrentFYFebruary) AS DCurrentFYFebruary\r\n\t\t\t,MAX(p3.DCurrentFYMarch) AS DCurrentFYMarch\r\n\t\t\t,MAX(p3.DCurrentFYApril) AS DCurrentFYApril\r\n\t\t\t,MAX(p3.DCurrentFYMay) AS DCurrentFYMay\r\n\t\t\t,MAX(p3.DCurrentFYJune) AS DCurrentFYJune\r\n\t\tFROM (SELECT M.UniqueAccountSeqID\r\n\t\t\t\t,T.UniqueMeterSeqid\r\n\t\t\t\t,T.BillingPeriod\r\n\t\t\t\t,MAX(T.EnergyUnit) AS EnergyUnit\r\n\t\t\t\t,MAX(T.EnergySource) AS EnergySource\r\n\t\t\t\t,MAX(T.EnergyType) AS EnergyType\r\n\t\t\t\t,SUM(T.Consumption) AS Consumption\r\n\t\t\t\t,SUM(T.Demand) AS Demand\r\n\t\t\t\t,MAX(CASE WHEN T.EstimatedReading = 'ACT' THEN 'A' ELSE 'E' END) AS EstimatedReading\r\n\t\t\t\t,CASE WHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @CurrentFY\r\n\t\t\t\t\tTHEN 'CurrentFY' + SUBSTRING(T.BillingMonthConsumption, 1, LEN(T.BillingMonthConsumption) - 11)\r\n\t\t\t\t\tELSE 'PreviousFY' + SUBSTRING(T.BillingMonthConsumption, 1, LEN(T.BillingMonthConsumption) - 11)\r\n\t\t\t\t\tEND AS FYmonth -- 11 is the length of 'Consumption'\r\n\t\t\t\t,CASE WHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @CurrentFY\r\n\t\t\t\t\tTHEN 'ECurrentFY' + SUBSTRING(T.BillingMonthConsumption, 1, LEN(T.BillingMonthConsumption) - 11)\r\n\t\t\t\t\tELSE 'EPreviousFY' + SUBSTRING(T.BillingMonthConsumption, 1, LEN(T.BillingMonthConsumption) - 11)\r\n\t\t\t\t\tEND AS FYmonth2\r\n\t\t\t\t,CASE WHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @CurrentFY\r\n\t\t\t\t\tTHEN 'DCurrentFY' + SUBSTRING(T.BillingMonthConsumption, 1, LEN(T.BillingMonthConsumption) - 11)\r\n\t\t\t\t\tELSE 'DPreviousFY' + SUBSTRING(T.BillingMonthConsumption, 1, LEN(T.BillingMonthConsumption) - 11)\r\n\t\t\t\t\tEND AS FYmonth3\r\n\t\t\tFROM Published.TemporalAccountMeterLevelRawDataForCurrentPeriod AS T\r\n\t\t\t\tINNER JOIN Billing.Meter AS M ON M.UniqueMeterSeqid = T.UniqueMeterSeqid\r\n\t\t\tWHERE M.IsCurrentRecord = 'Y' AND T.EffectiveStartPeriod <= @PublishedBillingPeriod AND T.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\t\t\tAND T.BillingPeriod >= @JulyPeriodPreviousFY\r\n\t\t\t\tAND T.FacilitySeqid = @FacilitySeqid\r\n\t\t\tGROUP BY M.UniqueAccountSeqID, T.UniqueMeterSeqid, T.BillingPeriod, T.BillingMonthConsumption) AS SourceTable\r\n\t\tPIVOT (SUM(Consumption) FOR FYmonth IN (PreviousFYJuly, PreviousFYAugust, PreviousFYSeptember\r\n\t\t\t,PreviousFYOctober, PreviousFYNovember, PreviousFYDecember, PreviousFYJanuary, PreviousFYFebruary\r\n\t\t\t,PreviousFYMarch, PreviousFYApril, PreviousFYMay, PreviousFYJune, CurrentFYJuly, CurrentFYAugust\r\n\t\t\t,CurrentFYSeptember, CurrentFYOctober, CurrentFYNovember, CurrentFYDecember, CurrentFYJanuary\r\n\t\t\t,CurrentFYFebruary, CurrentFYMarch, CurrentFYApril, CurrentFYMay, CurrentFYJune)) AS p1\r\n\t\tPIVOT (MAX(EstimatedReading) FOR FYmonth2 IN (EPreviousFYJuly, EPreviousFYAugust, EPreviousFYSeptember\r\n\t\t\t,EPreviousFYOctober, EPreviousFYNovember, EPreviousFYDecember, EPreviousFYJanuary, EPreviousFYFebruary\r\n\t\t\t,EPreviousFYMarch, EPreviousFYApril, EPreviousFYMay, EPreviousFYJune, ECurrentFYJuly, ECurrentFYAugust\r\n\t\t\t,ECurrentFYSeptember, ECurrentFYOctober, ECurrentFYNovember, ECurrentFYDecember, ECurrentFYJanuary\r\n\t\t\t,ECurrentFYFebruary, ECurrentFYMarch, ECurrentFYApril, ECurrentFYMay, ECurrentFYJune)) AS p2\r\n\t\tPIVOT (SUM(Demand) FOR FYmonth3 IN (DPreviousFYJuly, DPreviousFYAugust, DPreviousFYSeptember, DPreviousFYOctober\r\n\t\t\t,DPreviousFYNovember, DPreviousFYDecember, DPreviousFYJanuary, DPreviousFYFebruary, DPreviousFYMarch\r\n\t\t\t,DPreviousFYApril, DPreviousFYMay, DPreviousFYJune, DCurrentFYJuly, DCurrentFYAugust, DCurrentFYSeptember\r\n\t\t\t,DCurrentFYOctober, DCurrentFYNovember, DCurrentFYDecember, DCurrentFYJanuary, DCurrentFYFebruary\r\n\t\t\t,DCurrentFYMarch, DCurrentFYApril, DCurrentFYMay, DCurrentFYJune)) AS p3\r\n\tGROUP BY p3.UniqueAccountSeqID, p3.UniqueMeterSeqid, p3.EnergySource, p3.EnergyUnit\r\n\t\t,p3.EnergyType) AS P\r\n\tINNER JOIN @PreviousMeterNumbersTable AS PMNT ON P.UniqueMeterSeqid = PMNT.UniqueMeterSeqid\r\n\t\tAND P.UniqueAccountSeqID = PMNT.UniqueAccountSeqid\r\n\tORDER BY PMNT.CurrentMeterNumber;\r\nEND;"
        }
      ]
    }
  ]
}