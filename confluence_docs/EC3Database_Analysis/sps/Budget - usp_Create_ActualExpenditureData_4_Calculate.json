{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Budget",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Create_ActualExpenditureData_4_Calculate",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Create_ActualExpenditureData_4_Calculate",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to calculate and update budget versus actual expenditure data for a specified billing period within a budgeting system. It performs a series of calculations and updates on the "
        },
        {
          "type": "text",
          "text": "BudgetVersusActualExpendituresByAgencyAndServiceClassification",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table, including calculating rates, surpluses, and year-to-date totals. The procedure also validates the calculated data against certain business rules and raises errors if discrepancies are found."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple updates and inserts across several steps."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses nested queries and joins to aggregate and validate data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes conditional logic with loops and error handling."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It interacts with user-defined functions for calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It performs validations that involve complex business rules."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period for which the calculations are to be performed. It is used to filter and update records for the specified period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the published billing period, which is used alongside the billing period to filter records for updates and validations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Declares variables for sequence IDs and calculates previous and fiscal beginning periods using user-defined functions."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Calculations and Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "4.1 Actual Formula",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Updates budget and actual rates, total surplus, and adjustment surplus for the specified billing period."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Surplus Calculations",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Calculates and updates current month surplus, rate surplus, usage surplus, and combined surplus."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hierarchy Level Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "4.2 Validation and Subtotal Calculation",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Iterates through hierarchy levels to aggregate data and insert summarized records into the table."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Root Level Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates surplus information at the root level by aggregating data from child records."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Energy Usage Nullification",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Sets energy usage and rates to NULL for records where energy sums are ignored."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Year-to-Date Calculations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates year-to-date actual dollars and inserts missing year-to-date data for energy types not reported in the current period."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Budget Calculations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Recalculates budget and actual rates for specific expenditure types and updates surpluses."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Validations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Performs several checks to ensure data integrity, including budget total, subtotal, child-parent total matching, and year-to-date consistency. Raises errors if validations fail."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Queries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple complex queries with joins and aggregations, which can be resource-intensive."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Looping Constructs",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of loops for hierarchy processing can lead to performance bottlenecks, especially with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing on frequently queried columns (e.g., "
                },
                {
                  "type": "text",
                  "text": "BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "PublishedBillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "AgencyCodeOEC",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") is crucial to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure performs multiple updates, which could lead to locking issues in a high-concurrency environment."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies heavily on accurate calculations and validations. Any errors in logic or data can lead to incorrect financial reporting."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure raises errors for validation failures, it does not include transaction management (BEGIN TRANSACTION/COMMIT/ROLLBACK), which could lead to partial updates in case of errors."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The complexity and number of operations may not scale well with large datasets or increased data volume."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The high complexity and interdependencies make the procedure difficult to maintain and modify without thorough testing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Assumptions on Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes certain data conditions (e.g., hierarchy levels, specific expenditure types) that, if changed, could affect its correctness."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [Budget].[usp_Create_ActualExpenditureData_4_Calculate]\r\n\t@BillingPeriod BillingPeriod,\r\n\t@PublishedBillingPeriod BillingPeriod\r\nAS\r\nBEGIN\r\n\t\r\n\r\n\tDECLARE @TotalExpenditureSeqID INT = 19\r\n\tDECLARE @PreviousPeriod BillingPeriod \r\n\tDECLARE @FiscalBeginning BillingPeriod\r\n\t\r\n\tSELECT @PreviousPeriod = dbo.CalculatePreviousBillingPeriod(@Billingperiod, 'M')\r\n\tSET @FiscalBeginning =  dbo.CreateFiscalYearPeriod(@BillingPeriod, 'S')\r\n\t\r\n\t-- 4.1 actual formula\r\n\t\r\n\t\t\r\n\tUPDATE budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\tSET BudgetRate = budget.CalcBudgetRate(CurrentMonthBudgetEnergyDollars,   CurrentMonthBudgetEnergyUsage),\r\n\t\tActualRate = budget.CalcActualRate(CurrentMonthActualDollars, CurrentMonthPaidAdjustment,CurrentMonthActualUsage),\r\n\t\tTotalSurplus = ISNULL(CurrentMonthBudgetEnergyDollars, 0) - ISNULL(CurrentMonthActualDollars, 0),\r\n\t\tAdjustmentSurplus = -1 * ISNULL(CurrentMonthPaidAdjustment, 0)\r\n\tWHERE BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\r\n\t\r\n\t\r\n\tUPDATE budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\tSET CurrentMonthSurplus = TotalSurplus - AdjustmentSurplus\r\n\tWHERE BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\r\n\r\n\tUPDATE \tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\tSET RateSurplus = budget.CalcBudgetRateSurplus(BudgetRate, ActualRate, CurrentMonthBudgetEnergyUsage),\r\n\t\tUsageSurplus = budget.CalcBudgetUsageSurplus(CurrentMonthBudgetEnergyUsage, CurrentMonthActualUsage, BudgetRate)\r\n\tWHERE BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\r\n\r\n\tUPDATE \tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\tSET CombinedSurplus = CurrentMonthSurplus - (RateSurplus + UsageSurplus)\r\n\tWHERE BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\r\n\t\r\n\t-- 4.2 validation is passed calculate subtotal\r\n\t\r\n\t-- max tree level is 4\r\n\tDECLARE @Level INT = 4\r\n\tWHILE(@Level > 2)--skip the root\r\n\tBEGIN\r\n\t\r\n\t\tINSERT INTO budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t\t\t( PublishedBillingPeriod ,\r\n\t\t\t  BillingPeriod ,\r\n\t\t\t  BudgetVersusExpenditureTypeSeqID,\r\n\t\t\t  AgencyCodeOEC ,\r\n\t\t\t  AgencyName,\r\n\t\t\t  CurrentMonthBudgetEnergyDollars,\r\n\t\t\t  CurrentMonthBudgetEnergyUsage,\r\n\t\t\t  CurrentMonthActualDollars,\r\n\t\t\t  CurrentMonthActualUsage,\r\n\t\t\t  CurrentMonthPaidAdjustment,\r\n\t\t\t  YearToDateBudgetDollars,\r\n\t\t\t  YearToDateActuralDollars,\r\n\t\t\t  EndOfYearBudgetDollars,\r\n\t\t\t  EnergyDeliveryType,\r\n\t\t\t  IsSourceOfFundingGroupData,\r\n\t\t\t  ParentAgencyCodeOEC,\r\n\t\t\t  UsageSurplus,\r\n\t\t\t  RateSurplus,\r\n\t\t\t  CombinedSurplus,\r\n\t\t\t  AdjustmentSurplus,\r\n\t\t\t  TotalSurplus\t\t\t  \r\n\t\t\t)\r\n\t\tSELECT PublishedBillingPeriod ,\r\n\t\t\t\t  BillingPeriod ,\r\n\t\t\t\t  parentType.BudgetVersusExpenditureTypeSeqid,\r\n\t\t\t\t  AgencyCodeOEC ,\r\n\t\t\t\t  MAX(AgencyName),\r\n\t\t\t\t  SUM(CurrentMonthBudgetEnergyDollars),\r\n\t\t\t\t  SUM(CASE WHEN childType.dataType <> 'demand' THEN CurrentMonthBudgetEnergyUsage ELSE 0 end),--skip demand\r\n\t\t\t\t  SUM(CurrentMonthActualDollars),\r\n\t\t\t\t  SUM(CASE WHEN childType.dataType <> 'demand' THEN  CurrentMonthActualUsage ELSE 0 end), -- skip demand\r\n\t\t\t\t  SUM(CurrentMonthPaidAdjustment),\r\n\t\t\t\t  SUM(YearToDateBudgetDollars),\r\n\t\t\t\t  SUM(YearToDateActuralDollars),\r\n\t\t\t\t  SUM(EndOfYearBudgetDollars),\r\n\t\t\t\t  EnergyDeliveryType,\r\n\t\t\t\t  IsSourceOfFundingGroupData,\r\n\t\t\t\t  MAX(ParentAgencyCodeOEC),\r\n\t\t\t\t  SUM(UsageSurplus),\r\n\t\t\t\t  SUM(RateSurplus),\r\n\t\t\t\t  SUM(CombinedSurplus),\r\n\t\t\t\t  SUM(AdjustmentSurplus),\r\n\t\t\t\t  SUM(TotalSurplus)\r\n\t\tFROM budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification AS BAData INNER JOIN Budget.BudgetVersusExpenditureType AS childType\r\n\t\tON \r\n\t\tBAData.BudgetVersusExpenditureTypeSeqID = childType.BudgetVersusExpenditureTypeSeqid\r\n\t\tINNER JOIN \tBudget.BudgetVersusExpenditureType AS parentType\r\n\t\tON childType.ParentExpenditureTypeID = parentType.BudgetVersusExpenditureTypeSeqid\r\n\t\tWHERE childType.HierarchyLevel = @Level AND PublishedBillingPeriod = @PublishedBillingPeriod \r\n\t\tAND BillingPeriod = @BillingPeriod\r\n\t\tGROUP BY PublishedBillingPeriod, BillingPeriod, AgencyCodeOEC, EnergyDeliveryType, parentType.BudgetVersusExpenditureTypeSeqid, IsSourceOfFundingGroupData\r\n\t\r\n\t\tSET @Level = @Level -1\r\n\tEND\r\n\t\r\n\t-- update the surplus informatino in the root. loop skipped the root\r\n\tUPDATE budgetComparisonData\r\n\tSET budgetComparisonData.UsageSurplus = TotalData.UsageSurplus,\r\n\t\tbudgetComparisonData.RateSurplus = TotalData.RateSurplus,\r\n\t\tbudgetComparisonData.CombinedSurplus = TotalData.CombinedSurplus,\r\n\t\tbudgetComparisonData.AdjustmentSurplus = TotalData.AdjustmentSurplus,\r\n\t\tbudgetComparisonData.TotalSurplus = TotalData.TotalSurplus\r\n\tFROM \r\n\tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification AS budgetComparisonData\r\n\tINNER JOIN\r\n\t(\r\n\t\tSELECT \t\t\t\t  \r\n\t\t\tSUM(UsageSurplus) UsageSurplus,\r\n\t\t\tSUM(RateSurplus) RateSurplus,\r\n\t\t\tSUM(CombinedSurplus) CombinedSurplus,\r\n\t\t\tSUM(AdjustmentSurplus) AdjustmentSurplus,\r\n\t\t\tSUM(TotalSurplus) TotalSurplus,\r\n\t\t\tPublishedBillingPeriod, BillingPeriod, AgencyCodeOEC, IsSourceOfFundingGroupData\r\n\t\tfrom\r\n\t\tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification AS BAData INNER JOIN Budget.BudgetVersusExpenditureType AS childType\r\n\t\tON \r\n\t\tBAData.BudgetVersusExpenditureTypeSeqID = childType.BudgetVersusExpenditureTypeSeqid\r\n\t\tWHERE childType.ParentExpenditureTypeID = '19'\r\n\t\t\tand PublishedBillingPeriod = @PublishedBillingPeriod \r\n\t\t\tAND BillingPeriod = @BillingPeriod\r\n\t\t\tGROUP BY PublishedBillingPeriod, BillingPeriod, AgencyCodeOEC, IsSourceOfFundingGroupData\r\n\t) AS TotalData\r\n\tON budgetComparisonData.BillingPeriod = TotalData.BillingPeriod \r\n\tAND budgetComparisonData.AgencyCodeOEC = TotalData.AgencyCodeOEC\r\n\tAND budgetComparisonData.PublishedBillingPeriod = TotalData.PublishedBillingPeriod\r\n\tAND budgetComparisonData.BudgetVersusExpenditureTypeSeqID = 19\r\n\tAND budgetComparisonData.IsSourceOfFundingGroupData = TotalData.IsSourceOfFundingGroupData\r\n\r\n\t\r\n\t-- 4.5 set energy usage to null for energy type with ignoreEnergySum = 'Y' (this is to set meaningless sum(energy, demand) to null)\r\n\tUPDATE BAData\r\n\tSET BAData.CurrentMonthBudgetEnergyUsage = NULL,\r\n\t\tBAData.CurrentMonthActualUsage = NULL,\r\n\t\tBAData.BudgetRate = NULL,\r\n\t\tBAData.ActualRate = NULL\r\n\tfrom\r\n\tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification AS BAData INNER JOIN Budget.BudgetVersusExpenditureType AS expType\r\n\tON \r\n\tBAData.BudgetVersusExpenditureTypeSeqID = expType.BudgetVersusExpenditureTypeSeqid\r\n\tWHERE expType.IngoreEnergySum = 'Y'\r\n\tand BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\r\n\t-- handle exception case\r\n\t--UPDATE budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t--SET IsSourceOfFundingGroupData = 'Y'\r\n\t--WHERE AgencyCodeOEC in ('056000', '126016', '826000')\r\n\t--and BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\r\n\t--UPDATE budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t--SET IsSourceOfFundingGroupData = 'N'\r\n\t--WHERE  ParentAgencyCodeOEC in ('056000', '126016', '826000')\r\n\t--and BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\r\n\r\n\tPRINT 'calculate year to date total'\r\n\t-- year to date actual expenditure\r\n\tUPDATE currentPeriod\r\n\tSET currentPeriod.YearToDateActuralDollars = YTDSummary.CurrentMonthActualDollars\r\n\tfrom\r\n\tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification AS currentPeriod\r\n\tINNER join\r\n\t(\r\n\t\tSELECT SUM(CurrentMonthActualDollars) CurrentMonthActualDollars,\r\n\t\tp.AgencyCodeOEC, p.IsSourceOfFundingGroupData, BudgetVersusExpenditureTypeSeqID\r\n\t\tfrom\r\n\t\tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification AS p\r\n\t\tWHERE p.BillingPeriod <= @BillingPeriod and p.BillingPeriod >= @FiscalBeginning\r\n\t\tGROUP BY p.AgencyCodeOEC, p.IsSourceOfFundingGroupData, BudgetVersusExpenditureTypeSeqID\r\n\t) AS YTDSummary\r\n\tON currentPeriod.AgencyCodeOEC = YTDSummary.AgencyCodeOEC\r\n\tAND currentPeriod.IsSourceOfFundingGroupData = YTDSummary.IsSourceOfFundingGroupData\r\n\tAND currentPeriod.BudgetVersusExpenditureTypeSeqID = YTDSummary.BudgetVersusExpenditureTypeSeqID\r\n\tWHERE currentPeriod.BillingPeriod = @BillingPeriod\r\n\t\r\n\t\r\n\t-- In the current period, Agency might not have energy data type that was reported in the previous period\r\n\t-- use insert statement to add year to date information for such energy type\r\n\tINSERT INTO Budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t        ( BudgetVersusExpenditureTypeSeqID ,\r\n\t          PublishedBillingPeriod ,\r\n\t          BillingPeriod ,\r\n\t          AgencyCodeOEC ,\r\n\t          AgencyName ,\r\n\t          ParentAgencyCodeOEC ,\r\n\t          EnergyDeliveryType ,\r\n\t          GenericEnergyDeliveryType ,\r\n\t          GenericEnergyDeliveryTypeUnit ,\r\n\t          YearToDateActuralDollars ,\r\n\t          IsSourceOfFundingGroupData\r\n\t     )\r\n\tSELECT YTDSummary.*\r\n\tfrom\r\n\t(\r\n\t\tSELECT BudgetVersusExpenditureTypeSeqID,\r\n\t\t@BillingPeriod PublishedBillingPeriod,\r\n\t\t@BillingPeriod BillingPeriod,\r\n\t\tp.AgencyCodeOEC, \r\n\t\tMAX(AgencyName) AgencyName,\r\n\t\tMAX(ParentAgencyCodeOEC) ParentAgencyCodeOEC,\r\n\t\tMAX(EnergyDeliveryType) EnergyDeliveryType,\r\n        MAX(GenericEnergyDeliveryType) GenericEnergyDeliveryType,\r\n        MAX(GenericEnergyDeliveryTypeUnit) GenericEnergyDeliveryTypeUnit,\r\n\t\tSUM(CurrentMonthActualDollars) CurrentMonthActualDollars,\r\n\t\tp.IsSourceOfFundingGroupData\r\n\t\tfrom\r\n\t\tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification AS p\r\n\t\tWHERE p.BillingPeriod <= @BillingPeriod and p.BillingPeriod >= @FiscalBeginning\r\n\t\tGROUP BY p.AgencyCodeOEC, p.IsSourceOfFundingGroupData, BudgetVersusExpenditureTypeSeqID\r\n\t) AS YTDSummary\r\n\tLEFT JOIN\r\n\t(\r\n\t\tSELECT \r\n\t\tp.AgencyCodeOEC, p.IsSourceOfFundingGroupData, BudgetVersusExpenditureTypeSeqID\r\n\t\tfrom\r\n\t\tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification AS p\r\n\t\twhere\r\n\t\tp.BillingPeriod = @BillingPeriod\r\n\t) currentPeriod\r\n\tON currentPeriod.AgencyCodeOEC = YTDSummary.AgencyCodeOEC\r\n\tAND currentPeriod.IsSourceOfFundingGroupData = YTDSummary.IsSourceOfFundingGroupData\r\n\tAND currentPeriod.BudgetVersusExpenditureTypeSeqID = YTDSummary.BudgetVersusExpenditureTypeSeqID\r\n\tWHERE \r\n\tcurrentPeriod.BudgetVersusExpenditureTypeSeqID IS NULL\r\n\tAND YTDSummary.CurrentMonthActualDollars <> 0\r\n\t\r\n\t-- 4.3 budget calculation\r\n\t-- end of year projection. Might need to change\r\n\t\r\n\t-- handle exception (non-nypa ignores demand number) needs to recalculate based energy only\r\n\t-- Stuart suggests the actual expenditure needs to exclude adjustment when calculating the actual rate\r\n\tUPDATE budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\tSET BudgetRate = budget.CalcBudgetRate(CurrentMonthBudgetEnergyDollars, CurrentMonthBudgetEnergyUsage),\r\n\t\tActualRate = budget.CalcActualRate(CurrentMonthActualDollars, CurrentMonthPaidAdjustment, CurrentMonthActualUsage)\r\n\tWHERE BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\tAND BudgetVersusExpenditureTypeSeqID = 7\r\n\t\r\n\t\r\n\t--SELECT CurrentMonthActualDollars, CurrentMonthPaidAdjustment,   budget.CalcActualRate(CurrentMonthActualDollars-CurrentMonthPaidAdjustment, CurrentMonthActualUsage)\r\n\t--FROM budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t--WHERE AgencyCodeOEC = '039000' AND BudgetVersusExpenditureTypeSeqID = 7 AND BillingPeriod = '201109'\r\n\t\r\n\t\r\n\tUPDATE budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\tSET CurrentMonthSurplus = TotalSurplus - AdjustmentSurplus\r\n\tWHERE BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\tAND BudgetVersusExpenditureTypeSeqID = 7\r\n\t\r\n\tUPDATE \tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\tSET RateSurplus = budget.CalcBudgetRateSurplus(BudgetRate, ActualRate, CurrentMonthBudgetEnergyUsage),\r\n\t\tUsageSurplus = budget.CalcBudgetUsageSurplus(CurrentMonthBudgetEnergyUsage, CurrentMonthActualUsage, BudgetRate)\r\n\tWHERE BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\tAND BudgetVersusExpenditureTypeSeqID = 7\r\n\t\r\n\tUPDATE \tbudget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\tSET CombinedSurplus = CurrentMonthSurplus - (RateSurplus + UsageSurplus)\r\n\tWHERE BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\t\r\n\tAND BudgetVersusExpenditureTypeSeqID = 7\r\n\t\r\n\t-- 4.6 final check\r\n\t-- Validate budget total\r\n\tIF(EXISTS(\r\n\t\tSELECT \r\n\t\t* FROM\r\n\t\t(\r\n\t\t\tSELECT SUM(CurrentMonthBudgetEnergyDollars) AS CurrentMonthBudgetEnergyDollars, AgencyCodeOEC \r\n\t\t\tFROM budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t\t\tWHERE BudgetVersusExpenditureTypeSeqID = 19 AND\r\n\t\t\tBillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\t\tand BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\t\tGROUP BY AgencyCodeOEC\r\n\t\t) AS a\r\n\t\tINNER JOIN \r\n\t\t(\r\n\t\t\r\n\t\t\tSELECT SUM(EnergyUsage) cost, AgencyCodeOEC\r\n\t\t\tFROM Budget.uvw_BaseBudgetByAgencySummaryByAgencyEnergyType\r\n\t\t\twhere\r\n\t\t\t\t(BudgetStage = 'Total Budget' OR BudgetStage LIKE 'encore%' OR BudgetStage = 'Tenant Charges')\r\n\t\t\t\t\tAND BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\t\t\t\tAND GenericEnergyDeliveryTypeUnit= 'cost'\r\n\t\t\t\tAND  AgencyCodeOEC NOT in (\r\n\t\t\t\t'040002',\r\n\t\t\t'826002',\r\n\t\t\t'836001',\r\n\t\t\t'856030')\r\n\t\t\tand BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\t\t\t\r\n\t\t\tGROUP BY AgencyCodeOEC\r\n\r\n\t\t) AS b\r\n\t\tON a.AgencyCodeOEC = b.AgencyCodeOEC\r\n\t\tWHERE ABS(a.CurrentMonthBudgetEnergyDollars - b.cost) > 0.4\r\n\t\tAND a.AgencyCodeOEC NOT IN ('056000', '057000', '057010', '126016', '801000')-- special case\r\n\t)) \r\n\tBEGIN\r\n\t\tRAISERROR('Fail final budget total check', 12, 1)\r\n\tend\r\n\r\n\t-- validate subtotal\r\n\tIF(EXISTS(SELECT \r\n\t* FROM\r\n\t(\r\n\t\tSELECT SUM(CurrentMonthBudgetEnergyDollars) AS CurrentMonthBudgetEnergyDollars,\r\n\t\tSUM(CurrentMonthActualDollars) AS CurrentMonthActualDollars,\r\n\t\tSUM(YearToDateBudgetDollars) AS YearToDateBudgetDollars,\r\n\t\tSUM(YearToDateActuralDollars) AS YearToDateActuralDollars,\r\n\t\tAgencyCodeOEC \r\n\t\tFROM budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t\tWHERE BudgetVersusExpenditureTypeSeqID = 19 AND\r\n\t\tBillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\tGROUP BY AgencyCodeOEC\r\n\t) AS a\r\n\tINNER JOIN\r\n\t(\r\n\t\tSELECT SUM(CurrentMonthBudgetEnergyDollars) AS CurrentMonthBudgetEnergyDollars, \r\n\t\tSUM(CurrentMonthActualDollars) AS CurrentMonthActualDollars,\r\n\t\tSUM(YearToDateBudgetDollars) AS YearToDateBudgetDollars,\r\n\t\tSUM(YearToDateActuralDollars) AS YearToDateActuralDollars,\r\n\t\tAgencyCodeOEC \r\n\t\tFROM budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t\tWHERE BudgetVersusExpenditureTypeSeqID IN (8, 14, 15, 16, 17, 18, 30, 31, 32)\r\n\t\tAND BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\tGROUP BY AgencyCodeOEC\r\n\t) AS b\r\n\ton a.AgencyCodeOEC = b.AgencyCodeOEC\r\n\tWHERE ABS(a.CurrentMonthBudgetEnergyDollars - b.CurrentMonthBudgetEnergyDollars) > 0.4\r\n\tOR ABS(a.CurrentMonthActualDollars - b.CurrentMonthActualDollars) > 0.4\r\n\tOR ABS(a.YearToDateBudgetDollars - b.YearToDateBudgetDollars) > 0.4\r\n\tOR ABS(a.YearToDateActuralDollars - b.YearToDateActuralDollars) > 0.4\r\n\t)) \r\n\tBEGIN\r\n\t\r\n\t\tRAISERROR('Fail final subtotal check', 12, 1)\r\n\tend\r\n\t\r\n    IF(EXISTS(\r\n\t\tSELECT * FROM \r\n\t\t(\r\n\t\t\tSELECT \r\n\t\t\tParentAgencyCodeOEC AS agencyCode, \r\n\t\t\tSUM(CurrentMonthActualDollars) CurrentMonthActualDollars,\r\n\t\t\tSUM(CurrentMonthActualUsage) CurrentMonthActualUsage,\r\n\t\t\tSUM(CurrentMonthBudgetEnergyDollars) CurrentMonthBudgetEnergyDollars,\r\n\t\t\tSUM(CurrentMonthBudgetEnergyUsage) CurrentMonthBudgetEnergyUsage\r\n\t\t\tFROM budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t\t\tWHERE BudgetVersusExpenditureTypeSeqID = 19\r\n\t\t\tand BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\t\tGROUP BY ParentAgencyCodeOEC\r\n\t\t) AS a\r\n\t\tINNER JOIN \r\n\t\t(\r\n\t\t\tSELECT \r\n\t\t\tAgencyCodeOEC AS asgencyCode, \r\n\t\t\tIsSourceOfFundingGroupData,\r\n\t\t\tSUM(CurrentMonthActualDollars) CurrentMonthActualDollars,\r\n\t\t\tSUM(CurrentMonthActualUsage) CurrentMonthActualUsage,\r\n\t\t\tSUM(CurrentMonthBudgetEnergyDollars) CurrentMonthBudgetEnergyDollars,\r\n\t\t\tSUM(CurrentMonthBudgetEnergyUsage) CurrentMonthBudgetEnergyUsage\r\n\t\t\tFROM budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t\t\tWHERE BudgetVersusExpenditureTypeSeqID = 19\r\n\t\t\tand BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\t\tGROUP BY AgencyCodeOEC, IsSourceOfFundingGroupData\r\n\t\t) AS b\r\n\t\tON a.agencyCode = b.asgencyCode\r\n\t\tWHERE \r\n\t\t(\r\n\t\t\ta.CurrentMonthActualDollars <> b.CurrentMonthActualDollars\r\n\t\t\tOR\r\n\t\t\ta.CurrentMonthActualUsage <> b.CurrentMonthActualUsage\r\n\t\t\tOR\r\n\t\t\ta.CurrentMonthBudgetEnergyDollars <> b.CurrentMonthBudgetEnergyDollars\r\n\t\t\tOR\r\n\t\t\ta.CurrentMonthBudgetEnergyUsage <> b.CurrentMonthBudgetEnergyUsage\r\n\t\t) AND b.IsSourceOfFundingGroupData = 'N'\r\n\t))\r\n\tBEGIN\r\n\t\tRAISERROR('child total not matching parent total', 12, 1)\r\n\tEND\r\n\r\n\t-- validate year-to-date\r\n\t\r\n\t IF(\r\n\t\t@BillingPeriod <> @FiscalBeginning \r\n\t\tAND \r\n\t\tEXISTS(\r\n\t\tSELECT * FROM \r\n\t\t(\r\n\t\t\tSELECT \r\n\t\t\tAgencyCodeOEC AS agencyCode, \r\n\t\t\tSUM(YearToDateBudgetDollars) AS YearToDateBudgetDollars,\r\n\t\t\tSUM(YearToDateActuralDollars) AS YearToDateActuralDollars\r\n\t\t\tFROM budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t\t\tWHERE BudgetVersusExpenditureTypeSeqID = 19\r\n\t\t\tand BillingPeriod = @PreviousPeriod AND PublishedBillingPeriod = @PreviousPeriod\r\n\t\t\tGROUP BY AgencyCodeOEC\r\n\t\t) AS previousMonth\r\n\t\tINNER JOIN \r\n\t\t(\r\n\t\t\tSELECT \r\n\t\t\tAgencyCodeOEC AS agencyCode, \r\n\t\t\tSUM(YearToDateBudgetDollars) AS YearToDateBudgetDollars,\r\n\t\t\tSUM(YearToDateActuralDollars) AS YearToDateActuralDollars,\r\n\t\t\tSUM(CurrentMonthActualDollars) CurrentMonthActualDollars,\r\n\t\t\tSUM(CurrentMonthBudgetEnergyDollars) CurrentMonthBudgetEnergyDollars\t\t\t\r\n\t\t\tFROM budget.BudgetVersusActualExpendituresByAgencyAndServiceClassification\r\n\t\t\tWHERE BudgetVersusExpenditureTypeSeqID = 19\r\n\t\t\tand BillingPeriod = @BillingPeriod AND PublishedBillingPeriod = @BillingPeriod\r\n\t\t\tGROUP BY AgencyCodeOEC\r\n\t\t) AS currentMonth\r\n\t\tON currentMonth.agencyCode = previousMonth.agencyCode\r\n\t\tWHERE \r\n\t\t(\r\n\t\t\tABS(currentMonth.YearToDateActuralDollars - currentMonth.CurrentMonthActualDollars- previousMonth.YearToDateActuralDollars) > 0.4\r\n\t\t\t--Removed this part of validation to implement new report\r\n\t\t\t--OR ABS(currentMonth.YearToDateBudgetDollars - currentMonth.CurrentMonthBudgetEnergyDollars- previousMonth.YearToDateBudgetDollars) > 0.4\r\n\t\t)\r\n\t))\r\n\tBEGIN\r\n\t\t\r\n\t\tRAISERROR('year to date of current period does not match the sum of year to date of previous period + current month expenditure', 12, 1)\r\n\tEND\r\n\r\n\r\nEND"
        }
      ]
    }
  ]
}