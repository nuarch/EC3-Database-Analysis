{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CrisNationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CRIS_ValidateMeterData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CRIS_ValidateMeterData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to validate meter data before it is processed for billing purposes. It performs several checks to ensure the integrity and correctness of the meter data, such as verifying the existence of meters, checking date ranges, validating meter numbers, and ensuring the correctness of calculated values. The procedure uses a transaction to ensure that all validations are performed consistently, and it handles errors by rolling back the transaction and logging detailed error information."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is medium. It involves multiple validation checks, uses transactions, and includes error handling with detailed logging. The logic is straightforward but involves several SQL operations and joins, which require a good understanding of the database schema and business rules."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod varchar(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period for which the meter data is being validated. This is likely in the format 'YYYYMM'."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@authenticatedID int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An identifier for the authenticated user or process executing the procedure. It is not used within the procedure, suggesting it might be for logging or auditing purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode int OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that indicates the status of the procedure execution. A value of 0 indicates success, while 1 indicates an error occurred."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Declares several variables to store counts of different validation failures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Start",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Begins a transaction named "
                },
                {
                  "type": "text",
                  "text": "MeterValidation",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation Checks",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Unknown Account/Meter Combinations",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Checks if any meters or accounts in the upload data do not exist in the system as active or potentially new."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Date Validation",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Ensures that the "
                        },
                        {
                          "type": "text",
                          "text": "FromDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is not greater than the "
                        },
                        {
                          "type": "text",
                          "text": "ToDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Meter Number Length",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Validates that meter numbers are exactly 9 characters long."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "CCF Calculation",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Verifies that the calculated CCF (hundred cubic feet) matches the expected value based on readings and a fixed factor."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Date Range Validation",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Ensures meter reading dates fall within the account's billing date range."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Corrector ID Association",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Checks if any corrector IDs are associated with more than one meter."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Result Display",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Outputs the counts of each type of validation failure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Commit",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Commits the transaction if all validations pass."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Catches any errors, logs detailed error information, sets the status code to 1, and rolls back the transaction."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Subqueries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses several joins and subqueries, which could impact performance, especially with large datasets. Indexing on relevant columns could help improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The transaction scope is broad, covering all validation checks. This ensures data consistency but could lead to locking issues if the procedure takes a long time to execute."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Count Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Multiple "
                },
                {
                  "type": "text",
                  "text": "COUNT(*)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " operations are used, which can be resource-intensive. Ensuring efficient indexing can mitigate this."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The error handling mechanism logs detailed information, which is good for debugging but could expose sensitive data if not properly secured."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Unused Parameter",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@authenticatedID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " parameter is not used within the procedure, which could indicate incomplete implementation or oversight."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the dataset grows, the performance of the procedure might degrade due to the complexity of the queries and the broad transaction scope."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of transactions and potential locking could affect concurrency, especially if the procedure is executed frequently or on large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in the "
                },
                {
                  "type": "text",
                  "text": "UploadMeterReadDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and related tables is accurate and complete, which might not always be the case."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [CrisNationalGridWest].[usp_CRIS_ValidateMeterData]\n\t@BillingPeriod varchar(6),\r\n\t@authenticatedID int,\r\n\t@StatusCode int  OUTPUT      \r\n   \r\n AS \r\n BEGIN\r\n\t\t--********************************************************************************\r\n\t\t--\tAuthor: MOHAMMED BELARREM\r\n\t\t--\tDescription: Validate the meter information before processing\r\n\t\t--\r\n\t\t--\t\t--  validation rules\r\n\t\t--\t\t\t* Meter should exist in the system as active, or in the exchange table as potentially new\r\n\t\t--\t\t\t* FromDate <= ToDate\r\n\t\t--\t\t\t* Meter dates should be within the account range\t\r\n\t\t--\t\t\t* Meter Number should be 9 characters\r\n\t\t--\t\t\t* CCF = ( ToReading - FromReading ) x FixFactor\r\n\t\t--\t\t\t* \r\n\t\t--\t\t\r\n\t\t--\r\n\t\t--\r\n\t\t--\tLog: \r\n\t\t--\t\t06/10/2010\tMOH\tCreate\r\n\t\t--\t\t06/29/2010\tMOH Update: changes the account meter combination lookup to go by originalmeternumber since they are reporting it on the \r\n\t\t--\t\t\t\t\t\t\t\tmeters at the time of transaction\r\n\t\t--      09/23/2010  MOH Update: changed the query for unknown accounts to include turned off accounts and meters\r\n\t\t--\t\t11/05/2010  MOH Update: Added @CountOfMeterCorrectotIDAssociatedWithMultipleMeters to monitor the corrector ID if they are associated with multiple meters\r\n\t\t--      12/28/2018  VY  Update: Modified for UniqueSeqIDs\r\n\t\t--********************************************************************************\r\n\t \r\n\t\t--********************************************************************************\r\n\t\tDECLARE @AccountNumber acctnum\r\n\t\tDECLARE @MeterNumber MeterNumber\r\n\r\n\t\tDECLARE @CountOfUnknownAccountMeterCombination INT\r\n\t\tDECLARE @CountOfFlippedDates INT\r\n\t\tDECLARE @CountOfInvalidMeterNumber INT\r\n\t\tDECLARE @CountOfInvalidCCF INT \r\n\t\tDECLARE @CountOfMetersOutsideAccountBillingRange INT\r\n\t\tDECLARE @CountOfMeterCorrectotIDAssociatedWithMultipleMeters INT \r\n\t\t\r\n\t\tdeclare @crlf varchar(2)\r\n\t\tset @crlf = CHAR(13) + CHAR(10) \r\n\r\n\t\r\n\t\t\t\r\n\t\tbegin try\t\r\n\t\t\r\n\t\t\t\tbegin TRANSACTION MeterValidation\r\n\t\t\t\tset @StatusCode  = 0\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t--* Meter should exist in the system as active, or in the exchange table as potentially new\r\n\t\t\t\t\r\n\t\t\t\t-- return a list of unknows accounts or meters\r\n\t\t\t\tSELECT @CountOfUnknownAccountMeterCombination = COUNT(*) \r\n\t\t\t\tFROM \r\n\t\t\t\t\t( \r\n\t\t\t\t\t\tSELECT distinct AllAccountsAndMeters.OriginalAccountNumber, AllAccountsAndMeters.OriginalMeterNumber, UploadMeterReadDetail.AccountNumber, MeterNumber,UtilityServiceAccountName,UtilityServiceAddress\r\n\t\t\t\t\t\tFROM\r\n\t\t\t\t\t\tCrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\t\t\tLEFT JOIN \r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\tSELECT DISTINCT Billing.Account.OriginalAccountNumber, Billing.Meter.OriginalMeterNumber FROM Billing.Account\r\n\t\t\t\t\t\t\tINNER JOIN Billing.AccountExchangeMeterTrack ON Billing.Account.AccountSeqid = Billing.AccountExchangeMeterTrack.OriginalAccountSeqid \r\n\t\t\t\t\t\t\tINNER JOIN Billing.Meter ON Billing.AccountExchangeMeterTrack.OriginalMeterSeqid = Billing.Meter.MeterSeqid \r\n\t\t\t\t\t\t\tWHERE CurrentInvoiceAccountGroup = 3 AND AccountStatus IN  ('28', 'AC' , '46' ) AND MeterStatus IN ('27', 'AC', '46', '45')\r\n\t\t\t\t\t\t\tUNION ALL \r\n\t\t\t\t\t\t\tSELECT DISTINCT CurrentAccountNumber + '0000' AS OriginalAccountNumber, CurrentMeterNumber AS CurrentMeterNumber \r\n\t\t\t\t\t\t\tFROM Common.ExchangeData  --CrisNationalGridWest.UploadExchangeDetail\r\n\t\t\t\t\t\t\tWHERE ExchangeCode IN ('45' , '46' , '47') --AND ActivityCode <> 717\r\n\t\t\t\t\t\t) AS AllAccountsAndMeters\t\t\t\t\t\r\n\t\t\t\t\t\tON CrisNationalGridWest.UploadMeterReadDetail.AccountNumber = AllAccountsAndMeters.OriginalAccountNumber \r\n\t\t\t\t\t\tAND CrisNationalGridWest.UploadMeterReadDetail.MeterNumber = AllAccountsAndMeters.OriginalMeterNumber \r\n\t\t\t\t\t\tWHERE AllAccountsAndMeters.OriginalAccountNumber IS NULL OR AllAccountsAndMeters.OriginalMeterNumber  IS NULL\r\n\t\t\t\t\t) allCombinations\r\n\t\r\n\t\t\t\t--* FromDate <= ToDate\r\n\t\t\t\tSELECT @CountOfFlippedDates = COUNT(*) \r\n\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tWHERE MeterReadingFromDate > MeterReadingToDate \r\n\t\t\t\t\r\n\t\t\t\t--* Meter Number should be 9 characters\r\n\t\t\t\tSELECT @CountOfInvalidMeterNumber = COUNT(*) \r\n\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tWHERE LEN(MeterNumber) <> 9 \r\n\r\n\r\n\t\t\t\tSELECT @CountOfInvalidCCF = COUNT(*) \r\n\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tWHERE (abs(MeterCCF) <> CAST (ROUND(POWER(10, MeterConstant -1) * (MeterToReading - MeterFromReading) * CAST(FixFactor AS DECIMAL(6,4)), 0 ) AS INT) and HasMeterRolledOver = 'N' ) \r\n\t\t\t\t\r\n\r\n\t\t\t\t--* Meter dates should be within the account range\t\r\n\t\t\t\tSELECT @CountOfMetersOutsideAccountBillingRange = COUNT(*)\r\n\t\t\t\tFROM \r\n\t\t\t\tCrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tINNER JOIN \r\n\t\t\t\t( \r\n\t\t\t\t\tSELECT AccountNumber , MIN(billingFromDate) AS MinFromDate, MAX(billingToDate) AS MaxToDate\r\n\t\t\t\t\tFROM CrisNationalGridWest.UploadAccountBillingDetail\r\n\t\t\t\t\tGROUP BY AccountNumber\r\n\t\t\t\t) AS AccountRangeOfBilling\r\n\t\t\t\tON CrisNationalGridWest.UploadMeterReadDetail.AccountNumber = AccountRangeOfBilling.AccountNumber\r\n\t\t\t\tWHERE MeterReadingFromDate < MinFromDate OR MeterReadingToDate > MaxToDate\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\tSELECT @CountOfMeterCorrectotIDAssociatedWithMultipleMeters = COUNT( * )\r\n\t\t\t\tFROM \r\n\t\t\t\t(\r\n\t\t\t\t\tSELECT b.MeterCorrectorID  , ( SELECT COUNT( DISTINCT  MeterNumber ) FROM CrisNationalGridWest.UploadMeterReadDetail a WHERE a.MeterCorrectorID = b.MeterCorrectorID ) AS MeterCount\t \r\n\t\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail b\r\n\t\t\t\t\tWHERE MeterCorrectorID IS NOT NULL \r\n\t\t\t\t\tGROUP BY  MeterCorrectorID\r\n\t\t\t\t) AS MeterCorrectorsAndCountOfMeters\r\n\t\t\t\tWHERE MeterCount > 1\r\n\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t-- show results\r\n\t\t\t\tSELECT\t\r\n\t\t\t\t\t\t@CountOfUnknownAccountMeterCombination AS CountOfUnknownAccountMeterCombination  \r\n\t\t\t\t\t\t,@CountOfFlippedDates AS CountOfFlippedDates\r\n\t\t\t\t\t\t,@CountOfInvalidMeterNumber AS CountOfInvalidMeterNumber\r\n\t\t\t\t\t\t,@CountOfInvalidCCF AS CountOfInvalidCCF\r\n\t\t\t\t\t\t,@CountOfMetersOutsideAccountBillingRange AS CountOfMetersOutsideAccountBillingRange\r\n\t\t\t\t\t\t,@CountOfMeterCorrectotIDAssociatedWithMultipleMeters AS CountOfMeterCorrectotIDAssociatedWithMultipleMeters\t\r\n\t\t\t\t\r\n\r\n\t\t\t\tcommit TRANSACTION MeterValidation\r\n\r\n\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\r\n\t\t\t\tDECLARE @CustomErrorMessage NVARCHAR(4000);\r\n\t\t\t\tDECLARE @ErrorMessage NVARCHAR(4000);\r\n\t\t\t\tDECLARE @ErrorSeverity INT;\r\n\t\t\t\tDECLARE @ErrorState INT;\r\n\t\t\t\tDECLARE @ErrorNumber INT;\r\n\t\t\t\tDECLARE @ErrorLine INT;\r\n\t\t\t\tDECLARE @ErrorProcedure NVARCHAR(126);\r\n\t\t\t\t--\r\n\t\t\t\tSELECT \r\n\t\t\t\t\t@CustomErrorMessage ='Error in StoredProcedure %s at line number %d' + @crlf + 'Billing Period: %s' + @crlf + 'Account:Meter (%s : %s)  ' + @crlf,\r\n\t\t\t\t\t@ErrorMessage\t= ERROR_MESSAGE(),\r\n\t\t\t\t\t@ErrorSeverity\t= ERROR_SEVERITY(),\r\n\t\t\t\t\t@ErrorState\t\t= ERROR_STATE(),\r\n\t\t\t\t\t@ErrorNumber\t= ERROR_NUMBER(),\r\n\t\t\t\t\t@ErrorProcedure = ERROR_PROCEDURE(),\r\n\t\t\t\t\t@ErrorLine\t\t= ERROR_LINE();\t\t\t\r\n\t\t\t\t--\r\n\t\t\t\tset\t@ErrorMessage = @CustomErrorMessage + @ErrorMessage + @crlf + 'ErrorNumber: ' + cast(@ErrorNumber as varchar(10)) + @crlf\r\n\t\t\t\t--\r\n\t\t\t\tRAISERROR (@ErrorMessage, -- Message text.\r\n\t\t\t\t\t\t   @ErrorSeverity, -- Severity.\r\n\t\t\t\t\t\t   @ErrorState, -- State.\r\n\t\t\t\t\t\t   @ErrorProcedure,\r\n\t\t\t\t\t\t   @ErrorLine,\r\n\t\t\t\t\t\t   @BillingPeriod,\r\n\t\t\t\t\t\t   @AccountNumber,\r\n\t\t\t\t\t\t   @MeterNumber\r\n\t\t\t\t\t\t   ) with log;\r\n\t\t\t\t\r\n\t\t\t\tset @StatusCode  = 1\r\n\t\t\t\t\t\t   \r\n\t\t\t\tROLLBACK TRANSACTION MeterValidation\t\r\n\t\t\t\t\t\t   \r\n\t\tEND CATCH\r\n\r\n\r\n\r\n\r\n\t\r\n end"
        }
      ]
    }
  ]
}