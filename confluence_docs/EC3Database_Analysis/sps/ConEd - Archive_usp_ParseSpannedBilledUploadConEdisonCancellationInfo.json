{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Archive_usp_ParseSpannedBilledUploadConEdisonCancellationInfo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "Archive_usp_ParseSpannedBilledUploadConEdisonCancellationInfo",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and archive cancellation information for spanned Con Edison bills. It parses data from temporary tables, calculates billing adjustments, and inserts the processed data into a summary table. The procedure handles multiple billing periods, calculates adjustments for each period, and ensures that the data is correctly archived for further analysis or reporting."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to several factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple calculations and adjustments for billing periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a cursor to iterate over potentially large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It calls several user-defined functions for calculations, which adds layers of complexity."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves intricate logic for handling billing period revisions and adjustments."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status int output",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This is an output parameter intended to return the execution status of the procedure. A value of "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " indicates success, while "
                },
                {
                  "type": "text",
                  "text": "9",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " indicates failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Variable Declarations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring numerous variables to store intermediate data and results. These include billing amounts, periods, therms, and other utility-related metrics."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Set Defaults",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It initializes some default values, such as the billing period and utility code."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A cursor named "
                },
                {
                  "type": "text",
                  "text": "SpannedGasBillCursor",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is declared and opened to iterate over records in the "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonCancellationTempSummarySpanned",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table where "
                },
                {
                  "type": "text",
                  "text": "DeltaNumberOfPeriods",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is greater than 1."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": For each record fetched by the cursor:"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It retrieves detailed billing and cancellation information."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It calculates the total gas spanned billed percentage using a user-defined function."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It performs a series of calculations to distribute the billed amounts, therms, and CCFs across the billing periods."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It inserts the calculated and adjusted data into the "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonCancellationSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Adjustments",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After processing all but the last period, it makes final adjustments to ensure that rounding errors are minimized and the last period's data is correctly calculated and inserted."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Cleanup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The cursor is closed and deallocated after processing all records."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance bottlenecks, especially if the dataset is large. Cursors process rows one at a time, which is less efficient than set-based operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Calculations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple complex calculations and function calls, which can be computationally expensive."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Scans",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Depending on the size of the tables and the presence of indexes, the SELECT statements might result in full table scans, impacting performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling mechanisms. If any part of the procedure fails, it might not set the "
                },
                {
                  "type": "text",
                  "text": "@Status",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " output parameter correctly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If multiple instances of this procedure run simultaneously, there could be issues with data consistency or locking."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of cursors and the complexity of calculations might not scale well with increasing data volumes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in the temporary tables is accurate and complete. Any discrepancies in the source data could lead to incorrect calculations and archiving."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The high complexity and reliance on multiple user-defined functions make the procedure difficult to maintain and debug."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [ConEd].[Archive_usp_ParseSpannedBilledUploadConEdisonCancellationInfo] (@Status int output)\nAS\r\n--\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Parse Spanned Con Edison Bills Cancellation Upload Information\r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--* Exec:\t\t    [ConEd].[usp_ParseSpannedBilledUploadConEdisonCancellationInfo]\r\n--*\r\n--* Parameter(s):         \r\n--*\t\t\t\t\tStatusCode  int output       -  Execution Return Status \r\n--*\r\n--*\r\n--* Database:\t\tEC3database\r\n--*\r\n--* Return:\t\t\t0 Success\r\n--*                 9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   06/18/2008\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 06/18/2008 PAH  First Version  \r\n--* 03/27/2006 PAH  Revised to \r\n--***************************************************************************************\r\n--\r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\ndeclare @UploadConEdisonCancellationTempSummarySpannedSeqid dbo.seqid\r\n--\r\ndeclare @Notes dbo.notes\r\ndeclare @AccountNumber dbo.acctnum\r\ndeclare @FacilityName dbo.UtilityServiceAccountName\r\ndeclare @ServiceAddress dbo.addr\r\ndeclare @CancelTariffCode dbo.tariff\r\ndeclare @PostingDate dbo.PostingDate\r\n--\r\ndeclare @NumberOfPeriodsMinusOne dbo.Accumulator\r\ndeclare @DeltaNumberOfPeriods dbo.Accumulator\r\ndeclare @BillingPeriod dbo.yyyymm \r\ndeclare @FirstPeriodCanceled dbo.yyyymm \r\ndeclare @CancelThermFactor dbo.ThermsFactor \r\ndeclare @FudgedThermFactor dbo.ThermsFactor \r\ndeclare @BillingPeriodRevision dbo.yyyymm \r\ndeclare @CancelFromDate dbo.yyyymmdd \r\ndeclare @CancelToDate dbo.yyyymmdd \r\ndeclare @CalculatedBillingPeriodRevision dbo.yyyymm \r\ndeclare @CalculatedFromDate dbo.yyyymmdd \r\ndeclare @CalculatedToDate dbo.yyyymmdd \r\ndeclare @CancelBilledAmount dbo.BillingAmt \r\ndeclare @CancelBilledAmountMonthly dbo.BillingAmt \r\ndeclare @CancelBilledAmountMonthlySum dbo.BillingAmt \r\ndeclare @CancelBilledAmountAverage dbo.BillingAmt \r\ndeclare @CancelBilledAmountRemainder dbo.BillingAmt \r\ndeclare @CancelBillingPeriodDays dbo.Accumulator \r\ndeclare @CancelBillingPeriodDaysAverage dbo.Accumulator \r\ndeclare @CancelBillingPeriodDaysRemainder dbo.Accumulator \r\ndeclare @CancelTherms dbo.EnergyUnit \r\ndeclare @CancelLastPeriodTherms dbo.EnergyUnit \r\ndeclare @CancelThermsAverage dbo.EnergyUnit \r\ndeclare @CancelThermsRemainder dbo.EnergyUnit \r\ndeclare @CancelCCF dbo.EnergyUnit \r\ndeclare @CancelCCFAverage dbo.EnergyUnit \r\ndeclare @CancelCCFRemainder dbo.EnergyUnit \r\ndeclare @CancelSumAverageCCF dbo.EnergyUnit \r\ndeclare @idx int\r\ndeclare @StartingBillingPeriodDaysIncrement int\r\ndeclare @StartingBillingPeriodCCFIncrement int\r\ndeclare @StartingBillingPeriodThermsIncrement int\r\ndeclare @IncrementBillingPeriodDays int\r\ndeclare @IncrementBillingPeriodCCF int\r\ndeclare @IncrementBillingPeriodTherms int\r\n-- \r\ndeclare @CancelBilledAmountMonthlyLastPeriod dbo.BillingAmt\r\ndeclare @CancelThermsMonthlyLastPeriod dbo.EnergyUnit \r\ndeclare @CancelCCFMonthlyLastPeriod dbo.EnergyUnit \r\n\r\ndeclare @ApplyMonthlyPercentage  dbo.DiscountPercentage\r\ndeclare @CancelThermsMonthlySum  dbo.EnergyUnit \r\ndeclare @CancelThermsMonthly  dbo.EnergyUnit \r\ndeclare @CancelCCFMonthly  dbo.EnergyUnit \r\ndeclare @CancelCCFMonthlySum  dbo.EnergyUnit \r\ndeclare @TotalGasSpannedBilledPercentage dbo.DiscountPercentage\r\ndeclare @BillingCycle dbo.MonthlyBillingCycle\r\ndeclare @ConEdUtilityCode dbo.Seqid\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n--SELECT @BillingPeriod = BillingPeriod FROM ApplicationTimeFrame WHERE (CurrentProcessingPeriod = 'Y')\r\n--\r\n--Set @BillingPeriod = '200607'\r\nSELECT TOP 1 @BillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonCancellation\r\n--\r\nset @ConEdUtilityCode = 9\r\nSet @BillingCycle = 'M'\r\n--\r\nDECLARE SpannedGasBillCursor CURSOR FOR\r\nSELECT UploadConEdisonCancellationTempSummarySpannedSeqid FROM ConEd.UploadConEdisonCancellationTempSummarySpanned \r\nwhere (DeltaNumberOfPeriods > 1) --and @BillingPeriod=@BillingPeriod\r\n--\r\nOPEN SpannedGasBillCursor;\r\n--\r\nFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonCancellationTempSummarySpannedSeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.  UploadConEdisonCancellationTempSummarySpannedSeqid\r\n--\r\nWHILE @@FETCH_STATUS = 0\r\n   BEGIN\r\n\t--\r\n\tSELECT  @DeltaNumberOfPeriods=DeltaNumberOfPeriods,  @BillingPeriodRevision=BillingPeriodRevision, @FirstPeriodCanceled=FirstPeriodCanceled, \r\n\t\t\t@CancelFromDate=CancelFromDate,@CancelToDate=CancelToDate,@CancelBilledAmount=CancelBilledAmount, @CancelCCF=CancelCCF, \r\n\t\t\t@CancelTherms=CancelTherms, @CancelThermFactor=CancelThermFactor,@CancelBillingPeriodDays=CancelBillingPeriodDays,\r\n\t\t\t@BillingPeriod = BillingPeriod,@AccountNumber=AccountNumber,@FacilityName=FacilityName,@ServiceAddress =ServiceAddress,\r\n\t\t\t@CancelTariffCode=CancelTariffCode,@PostingDate=PostingDate\r\n\tFROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n\tWHERE  (UploadConEdisonCancellationTempSummarySpannedSeqid = @UploadConEdisonCancellationTempSummarySpannedSeqid) \r\n\t--\r\n--\tSELECT  'Spanned Information',@DeltaNumberOfPeriods, @BillingPeriodRevision,@FirstPeriodCanceled,@CancelFromDate,@CancelFromDate,@BillingPeriodDays,@BilledAmount,@CCF,@Therms,@ThermFactor,@BillingPeriodDays\r\n\t--\r\n\tselect @TotalGasSpannedBilledPercentage= dbo.[CalculateTotalGasSpannedBilledPercentage] (@BillingCycle,@DeltaNumberOfPeriods,@FirstPeriodCanceled,@BillingPeriodRevision)\r\n\t--select @TotalGasSpannedBilledPercentage\r\n\t\r\n\t-- Correction for zero or negative numbers\r\n\tBegin\r\n\t\t--\r\n\t\tset @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods-1\r\n\t\t--\r\n\t\tset @CancelBillingPeriodDaysAverage = (@CancelBillingPeriodDays / @DeltaNumberOfPeriods)\r\n\t\tset @CancelBillingPeriodDaysRemainder = @CancelBillingPeriodDays - (@CancelBillingPeriodDaysAverage * @DeltaNumberOfPeriods)\r\n\t\tset @StartingBillingPeriodDaysIncrement = @DeltaNumberOfPeriods - @CancelBillingPeriodDaysRemainder\r\n\t\t--\r\n\t\t--\tInitialize the counters for the n-1 parses\r\n\t\t--\r\n\t\tset @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n\t\tset @CalculatedFromDate = @CancelFromDate\r\n\t\tset @CalculatedToDate = @CancelToDate\r\n\t\tset @idx = 0\r\n\t\tset @CancelBilledAmountMonthlySum = 0.00\r\n\t\tset @CancelThermsMonthlySum = 0\r\n\t\tset @CancelCCFMonthlySum = 0\r\n\t\t--\r\n\t\twhile (@NumberOfPeriodsMinusOne > @idx)\r\n\t\t\tBegin\r\n\t\t\t\t--\r\n\t\t\t\tselect @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t\t\t\t--\r\n\t\t\t\t-- Apply the Monthly Percentage to the CCF,Therms and Billed Amount and accumulate the weigthed average units.\r\n\t\t\t\t--\r\n\t\t\t\tset @CancelBilledAmountMonthly = ROUND(@CancelBilledAmount * @ApplyMonthlyPercentage,2)\r\n\t\t\t\tset @CancelBilledAmountMonthlySum = @CancelBilledAmountMonthlySum + @CancelBilledAmountMonthly\r\n\t\t\t\tset @CancelThermsMonthly = ROUND(@CancelTherms * @ApplyMonthlyPercentage,0)\r\n\t\t\t\tset @CancelThermsMonthlySum = @CancelThermsMonthlySum + @CancelThermsMonthly\r\n\t\t\t\tset @CancelCCFMonthly = ROUND(@CancelCCF * @ApplyMonthlyPercentage,0)\r\n\t\t\t\tset @CancelCCFMonthlySum = @CancelCCFMonthlySum + @CancelCCFMonthly\r\n\t\t\t\t--\r\n\t\t\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" as the derived \"Todate\" for the account.\r\n\t\t\t\t--\r\n\t\t\t\tselect @CalculatedToDate = [dbo].[DetermineConEdisonBillingPeriodProjectedToDate](@CalculatedBillingPeriodRevision,@CancelTariffCode,@ConEdUtilityCode)\r\n\t\t\t\t--\r\n\t\t\t\tselect @Notes = 'Therm factor '+cast(@CancelThermFactor as varchar(6))+\r\n\t\t\t\t' for '+cast(@DeltaNumberOfPeriods as varchar(6))+' First: '+@FirstPeriodCanceled +' ( '+@CancelFromDate+') Last: '+ \r\n\t\t\t\t@BillingPeriodRevision +' ( '+@CancelFromDate+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+cast(@ApplyMonthlyPercentage as varchar(10))+\r\n\t\t\t\t' - Total %: '+cast(@TotalGasSpannedBilledPercentage as varchar(10))\r\n\t\t\t\t--\r\n\t\t\t\t--  \r\n\t\t\t\t--\r\n\t\t\t\tINSERT INTO ConEd.UploadConEdisonCancellationSummary\r\n\t\t\t\t\t\t(AccountUtilityCompanySeqid, OriginalAccountNumber, NumberOfCancelTransactions, NumberOfTransactions, DerivedFromSpannedBill,BillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, \r\n\t\t\t\t\t\tEstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, \r\n\t\t\t\t\t\tTotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, \r\n\t\t\t\t\t\tCanceledBilledAmount, AverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, FromDate, ToDate, BilledAmount, BillingAction, ProcessedInTheCurrentPeriod, \r\n\t\t\t\t\t\tGasRateCode, DeliveryChargeAmount,TotalCCF, TotalTherms, ThermsFactor, \r\n\t\t\t\t\t\tCancelFromDate, CancelToDate, CancelDeliveryChargeAmount,CancelTotalCCF, CancelTotalTherms, CancelThermsFactor,CancelBillingDays,Notes,\r\n\t\t\t\t\t\tSpannedBillingPeriodRevision,SpannedFirstCanceledBillingPeriod,SpannedBilledAmount,SpannedCCF,SpannedThermFactor,SpannedTherm,SpannedMonthlyPercentage,SpannedTotalPercentage,\r\n\t\t\t\t\t\tBillingDate,ProcessEffectiveDate,FacilityName,ServiceAddress)\r\n\t\t\t\tSELECT \r\n\t\t\t\t\t'9',\r\n\t\t\t\t\t@AccountNumber,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,  \r\n\t\t\t\t\t1, --  NumberOfCancelTransactions\r\n\t\t\t\t\t1, --  NumberOfTransactions\r\n\t\t\t\t\t'Y',  -- DerivedFromSpannedBill = 'Y'\r\n\t\t\t\t\tBillingPeriod, \r\n\t\t\t\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n\t\t\t\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n\t\t\t\t\t'ACT',  -- EstimatedOrActualBilling needs to be upodated\r\n\t\t\t\t\t@CancelFromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n\t\t\t\t\t@CancelToDate, --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n\t\t\t\t\t[dbo].[CalculateDeltaBillingPeriods] (\r\n\t\t\t\t\t\t  [dbo].[CalculateNextBillingPeriod](\r\n\t\t\t\t\t\t\t\t\t\t\t [dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedFromDate,@CancelTariffCode,@ConEdUtilityCode),@BillingCycle)\r\n\t\t\t\t\t\t\t\t\t\t\t,[dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedToDate,@CancelTariffCode,@ConEdUtilityCode)\r\n\t\t\t\t\t\t\t\t\t\t\t,@BillingCycle), --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n\t\t\t\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate),-- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n\t\t\t\t\t0, --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n\t\t\t\t\t@CancelBilledAmountMonthly, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n\t\t\t\t\t0 AS PriorRevisedBilledAmount,\r\n\t\t\t\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n\t\t\t\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n\t\t\t\t\t0 AS AverageRebillCostOfGasCharge, \r\n\t\t\t\t\t1.00 AS AverageRebillThermsFactor, \r\n\t\t\t\t\t0,-- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t\t\t\tnull,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n\t\t\t\t\tnull, -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n\t\t\t\t\t@CancelBilledAmountMonthly, --  (IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) as  - IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0)) as BilledAmount,\r\n\t\t\t\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END, -- as BillingAction, \r\n\t\t\t\t\t'N' AS ProcessedInTheCurrentPeriod, \r\n\t\t\t\t\t@CancelTariffCode, \r\n\t\t\t\t\t@CancelBilledAmountMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n\t\t\t\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n\t\t\t\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n\t\t\t\t\t1.000, --  IsNull(UploadConEdisonAccountTempSummarySPanned.ThermFactor,1.0) AS ThermsFactor,\r\n\t\t\t\t\t@CalculatedFromDate, --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n\t\t\t\t\t@CalculatedToDate, --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n\t\t\t\t\t@CancelBilledAmountMonthly, --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n\t\t\t\t\t@CancelCCFMonthly, --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n\t\t\t\t\t@CancelThermsMonthly, --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n\t\t\t\t\tCASE @CancelCCFMonthly WHEN 0 THEN 1.0000 ELSE round(@CancelThermsMonthly*1.0 / @CancelCCFMonthly,4) END, --  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n\t\t\t\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t\t\t\t@Notes,\r\n\t\t\t\t\t@BillingPeriodRevision,@FirstPeriodCanceled,@CancelBilledAmount,@CancelCCF,@CancelThermFactor,@CancelTherms,@ApplyMonthlyPercentage,@TotalGasSpannedBilledPercentage,\r\n\t\t\t\t\t[dbo].ConvertDateToYYYYMMDD (@PostingDate),[dbo].ConvertDateToYYYYMMDD (Getdate()),\r\n\t\t\t\t\tFacilityName,ServiceAddress\r\n\t\t\t\tFROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n\t\t\t\tWHERE   (UploadConEdisonCancellationTempSummarySpannedSeqid = @UploadConEdisonCancellationTempSummarySpannedSeqid) \r\n\r\n\t\t\t\t--\r\n\t\t\t\t\t\tset @CancelSumAverageCCF = @CancelSumAverageCCF + @CancelCCFAverage \t  \r\n\t\t\t\t\t\tset @idx = @idx + 1\r\n\t\t\t\t--\r\n\t\t\t\t--\tCalculate the next the Revised Billing Period row.\r\n\t\t\t\tselect @CalculatedBillingPeriodRevision = [dbo].[CalculateNextBillingPeriod]  (@CalculatedBillingPeriodRevision,@BillingCycle)\r\n\t\t\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n\t\t\t\tselect @CalculatedFromDate = [dbo].[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision,@CancelTariffCode,@ConEdUtilityCode)\r\n\t\t\t\t--\r\n\t\t\t\t--\tProcess the next Revised Billing Period row\r\n\t\t\t\t--\r\n\t\tEnd\r\n\t\t--\r\n\t\t--\tFinish up the last period's processing\r\n\t\t--\r\n\t\t--\tUse the (Nth -1) periods @CalculatedToDate as the \"FromDate\" and the acutal \"ToDate\" from the spanned record as the \"ToDate\"\r\n\t\t--\r\n\t\tselect @CalculatedFromDate = @CalculatedToDate\r\n\t\tselect @CalculatedToDate = @CancelToDate\r\n\t\t--\r\n\t\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\t\t--\r\n\t\tselect @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t\t--\r\n\t\t--\tDerive the net changes to avoid rounding errors\r\n\t\t--\r\n\t\tset @CancelBilledAmountMonthlyLastPeriod = @CancelBilledAmount - @CancelBilledAmountMonthlySum\r\n\t\tset @CancelThermsMonthlyLastPeriod = @CancelTherms - @CancelThermsMonthlySum\r\n\t\tset @CancelCCFMonthlyLastPeriod = @CancelCCF  - @CancelCCFMonthlySum\r\n\r\n\tEnd\r\n\t--\r\n\tselect @Notes = 'Therm factor '+cast(@CancelThermFactor as varchar(6))+\r\n\t' for '+cast(@DeltaNumberOfPeriods as varchar(6))+' First: '+@FirstPeriodCanceled +' ( '+@CancelFromDate+') Last: '+ \r\n\t@BillingPeriodRevision +' ( '+@CancelFromDate+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+cast(@ApplyMonthlyPercentage as varchar(10))+\r\n\t' - Total %: '+cast(@TotalGasSpannedBilledPercentage as varchar(10))\r\n\t--\r\n\tINSERT INTO ConEd.UploadConEdisonCancellationSummary\r\n\t\t\t(AccountUtilityCompanySeqid, OriginalAccountNumber, NumberOfCancelTransactions, NumberOfTransactions, DerivedFromSpannedBill,BillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, \r\n\t\t\tEstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, \r\n\t\t\tTotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, \r\n\t\t\tCanceledBilledAmount, AverageRebillCostOfGasCharge,AverageRebillThermsFactor, BillingDays,  FromDate,ToDate, BilledAmount, BillingAction, ProcessedInTheCurrentPeriod, \r\n\t\t\tGasRateCode, DeliveryChargeAmount,TotalCCF, TotalTherms, ThermsFactor, \r\n\t\t\tCancelFromDate, CancelToDate, CancelDeliveryChargeAmount,CancelTotalCCF, CancelTotalTherms, CancelThermsFactor,CancelBillingDays,Notes,\r\n\t\t    SpannedBillingPeriodRevision,SpannedFirstCanceledBillingPeriod,SpannedBilledAmount,SpannedCCF,SpannedThermFactor,SpannedTherm,SpannedMonthlyPercentage,SpannedTotalPercentage,\r\n\t\t\tBillingDate,ProcessEffectiveDate,FacilityName,ServiceAddress)\r\n\tSELECT \r\n\t\t'9',\r\n\t\t@AccountNumber,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,\r\n\t\t1, --  NumberOfCancelTransactions\r\n\t\t1, --  NumberOfTransactions\r\n\t\t'Y',  -- DerivedFromSpannedBill = 'Y'\r\n\t\tBillingPeriod, \r\n\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n\t\t'ACT',  -- EstimatedOrActualBilling needs to be upodated\r\n\t\t@CancelFromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n\t\t@CancelToDate, --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n\t\t\t\t\t[dbo].[CalculateDeltaBillingPeriods] (\r\n\t\t\t\t\t\t  [dbo].[CalculateNextBillingPeriod](\r\n\t\t\t\t\t\t\t\t\t\t\t [dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedFromDate,@CancelTariffCode,@ConEdUtilityCode),@BillingCycle)\r\n\t\t\t\t\t\t\t\t\t\t\t,[dbo].DetermineConEdisonBillingPeriodProjected(@CalculatedToDate,@CancelTariffCode,@ConEdUtilityCode)\r\n\t\t\t\t\t\t\t\t\t\t\t,@BillingCycle), --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n\t\t0, --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n\t\t@CancelBilledAmountMonthlyLastPeriod, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n\t\t0 AS PriorRevisedBilledAmount,\r\n\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n\t\t0 AS AverageRebillCostOfGasCharge, \r\n\t\t1.00 AS AverageRebillThermsFactor, \r\n\t\t0, --IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\tnull,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n\t\tnull, -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n\t\t@CancelBilledAmountMonthlyLastPeriod, --  (IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) as  - IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0)) as BilledAmount,\r\n\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END, -- 'O' as BillingAction, \r\n\t\t'N' AS ProcessedInTheCurrentPeriod, \r\n\t\t@CancelTariffCode, \r\n\t\t@CancelBilledAmountMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n\t\t1.0,\r\n\t\t@CalculatedFromDate, --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n\t\t@CalculatedToDate, --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n\t\t@CancelCCFMonthlyLastPeriod, --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n\t\t@CancelThermsMonthlyLastPeriod, --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n\t\tCASE @CancelCCFMonthlyLastPeriod WHEN 0 THEN 1.0000 ELSE round(@CancelThermsMonthlyLastPeriod*1.0 / @CancelCCFMonthlyLastPeriod,4) END,--  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate),-- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t@Notes,\r\n\t    @BillingPeriodRevision,@FirstPeriodCanceled,@CancelBilledAmount,@CancelCCF,@CancelThermFactor,@CancelTherms,@ApplyMonthlyPercentage,@TotalGasSpannedBilledPercentage,\r\n\t\t[dbo].ConvertDateToYYYYMMDD (@PostingDate),[dbo].ConvertDateToYYYYMMDD (Getdate()),FacilityName,ServiceAddress\r\n\r\n\tFROM ConEd.UploadConEdisonCancellationTempSummarySpanned\r\n\tWHERE   (UploadConEdisonCancellationTempSummarySpannedSeqid = @UploadConEdisonCancellationTempSummarySpannedSeqid) \r\n\r\nFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonCancellationTempSummarySpannedSeqid\r\nEND\r\n\r\nCLOSE SpannedGasBillCursor;\r\nDEALLOCATE SpannedGasBillCursor;"
        }
      ]
    }
  ]
}