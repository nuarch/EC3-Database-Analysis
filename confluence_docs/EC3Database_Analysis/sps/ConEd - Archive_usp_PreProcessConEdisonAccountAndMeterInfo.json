{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Archive_usp_PreProcessConEdisonAccountAndMeterInfo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "Archive_usp_PreProcessConEdisonAccountAndMeterInfo",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to preprocess billing and meter information for Con Edison accounts. It performs a series of operations to prepare data for further processing or reporting. The procedure involves truncating tables, inserting and updating records, and handling discrepancies between account and meter billing data. It also prepares data for electronic gas exchange processing and handles cases where account or meter information is unknown or needs reconciliation."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple operations on several tables, including truncation, insertion, deletion, and updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It contains numerous conditional logic and calculations for billing adjustments."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It integrates data from various sources and handles discrepancies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure includes several business rules and transformations that require a deep understanding of the domain."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is intended to return the status of the procedure execution. However, it is not utilized within the procedure, indicating a potential oversight or future implementation plan."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure starts by determining the current billing period from the "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonAccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It truncates the "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonCurrentlyBilledAccounts",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table to prepare for new data insertion."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Inserts distinct account numbers billed in the current period into "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonCurrentlyBilledAccounts",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Cleaning",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Removes accounts from "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonCurrentlyBilledAccounts",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " that have original bills, leaving only adjustment accounts."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Account Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates account information with sequence IDs and statuses from the "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Adjustments",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates billing adjustment records with calculated values for rebilled, canceled, and revised amounts."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Meter Billing Adjustments",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates meter billing records with discrepancies and prepares them for further processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Preparation for Exchange",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Prepares data for electronic gas exchange by inserting records into "
                },
                {
                  "type": "text",
                  "text": "UploadCommonElectronicGasExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Handling Unknowns",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Identifies and processes unknown accounts and meters, updating their statuses and preparing them for reconciliation."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Truncation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Frequent truncation of tables can lead to performance issues if not managed properly, especially in high-transaction environments."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple joins across large tables, which can impact performance if indexes are not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Extensive use of conditional logic and calculations can slow down execution, particularly if the data volume is large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues if multiple instances are executed simultaneously, especially with table truncation and updates."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Unused Parameter",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@Status",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " parameter is defined but not used, which could lead to confusion or errors in future maintenance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves complex updates and deletions, which could lead to data integrity issues if not carefully managed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": There is no explicit error handling or transaction management, which could result in partial updates or data corruption in case of failures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of the procedure may degrade due to its complexity and the operations involved."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's complexity and extensive use of business logic make it challenging to maintain and update without a thorough understanding of the domain and data relationships."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [ConEd].[Archive_usp_PreProcessConEdisonAccountAndMeterInfo]\n(\r\n\t@Status AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\t--**************************************************************************************\r\n\t--* Date         Tech Description of Change\r\n\t--* ---------- ----  -------------------------------------------------------------\r\n\t--* 10/26/2005 PAH  First Version \r\n\t--* 11/29/2016  zd\tturnoff date 9999 99 99 to 99991231 \r\n\t--* 11/27/2018  VY  Changes for UniqueAccountSeqID\r\n\t--* 12/21/2018  VY  Updated for UniqueAccountSeqID\r\n\t--**************************************************************************************\r\n\tDECLARE @CurrentBillingPeriod AS VARCHAR(6);\r\n\r\n\tSELECT TOP (1) @CurrentBillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas;\r\n\r\n\t-- Intialize the table UploadConEdisonCurrentlyBilledAccounts by truncating it.\r\n\tTRUNCATE TABLE ConEd.UploadConEdisonCurrentlyBilledAccounts;\r\n\r\n\t-- Insert into UploadConEdisonCurrentlyBilledAccounts all of the distinct account numbers that were billed \r\n\t-- for the currently billing period\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonCurrentlyBilledAccounts(OriginalAccountNumber)\r\n\tSELECT DISTINCT OriginalAccountNumber\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas;\r\n\r\n\t-- Remove from the UploadConEdisonCurrentlyBilledAccounts table all of the account numbers that were billed \r\n\t-- as an original bill (Billing (BillingPeriod = BillingPeriodRevision)\r\n\r\n\tDELETE FROM ConEd.UploadConEdisonCurrentlyBilledAccounts\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\tINNER JOIN ConEd.UploadConEdisonCurrentlyBilledAccounts AS UC ON UAG.OriginalAccountNumber = UC.OriginalAccountNumber\r\n\tWHERE UAG.BillingPeriod = UAG.BillingPeriodRevision\r\n\tselect @@rowcount\r\n\r\n\t--\tAny account remaining is an adjustment account that does not have an orginal bill.  A stub will be needed to handle the net charges\r\n\t--\tas a paid adjustment and original billed amount,revised billed amount and original paid amount will be $0.00 and the energyusage\r\n\t--\twill be 0.\r\n\r\n\t--select 'Accounts Without an Original Bill',* from ConEd.UploadConEdisonCurrentlyBilledAccounts\r\n\t--\r\n\t--\tFind all of the existing accounts known to EC3 and the follwing fields\r\n\t--\t\t\t\tAdjustedAccount = A.AccountSeqid,\r\n\t--\t\t\t\tAccountStatus = A.AccountStatus, \r\n\t--\t\t\t\tAccountpreviousStatus = A.AccountPreviousStatus, \r\n\t--\t\t\t\tAccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\r\n\tUPDATE UAG\r\n\tSET AdjustedAccount = A.AccountSeqid,\r\n\t\tAccountStatus = A.AccountStatus, \r\n\t\tAccountpreviousStatus = A.AccountPreviousStatus, \r\n\t\tAccountUtilityCompanySeqid = A.UtilityAccountProvider,\r\n\t\tUniqueAccountSeqID = A.UniqueAccountSeqid /* added on 12/21/2018 */\r\n\tFROM Billing.Account AS A\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG ON A.OriginalAccountNumber = UAG.OriginalAccountNumber\r\n\tWHERE A.UtilityAccountProvider = 9;\r\n\r\n\t--\tAssume that the derived PriorRevisedXXXX,RevisedXXXX & CanceledXXXX are correct.  The next  \r\n\t--\tupdate will grab the correct information from the account billing and account billing gas that being\r\n\t--\tadjusted.\r\n\t--\tFormulas:\r\n\t--\t\tThese formulas work in the same manner Amount, CCF or Therm.\r\n\t--\t\t\tTotalRebilledAmount is the aggregated Rebilled Amount inclusive of erroneous net zero rebills reported by Con Edison\r\n\t--\r\n\t--\t\t\tTotalCanceledAmount is the aggregated Canceled Amount inclusive of erroneous net zero cancels reported by Con Edison\r\n\t--\r\n\t--\t\t\tPriorRevisedBilledAmount is the revised billed amount in EC3 or the reported TotalCanceledAmount times minus one to \r\n\t--\t\t\tsimulate the revised billed amount in EC3.\r\n\t--\r\n\t--\t\t\tCanceledBilledAmount is the revised billed amount times minus one in EC3 or the reported TotalCanceledAmount to \r\n\t--\t\t\tsimulate the Canceled billed amount in EC3.\r\n\t--\r\n\t--\t\t\tRevisedBilledAmount is derived by adding the PriorRevisedBilledAmount + TotalRebilledAmount + TotalCanceledAmount whether it was \r\n\t--\t\t\treported by Con Edison or taken from AB.RevisedBilledAmount\r\n\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET TotalRebilledAmount = IsNull(TotalRebilledAmount,0), \r\n\t\tTotalCanceledAmount = IsNUll(TotalCanceledAmount,0), \r\n\t\tPriorRevisedBilledAmount =IsNUll(TotalCanceledAmount,0)*-1.00, \r\n\t\tCanceledBilledAmount = IsNUll(TotalCanceledAmount,0), \r\n\t\tRevisedBilledAmount = IsNull(TotalRebilledAmount, 0),--IsNUll(TotalCanceledAmount,0)*-1.00+ (IsNull(TotalRebilledAmount, 0) + IsNUll(TotalCanceledAmount,0)),\r\n\t\tTotalTherms =IsNUll(TotalTherms,0),\r\n\t\tCancelTotalTherms =IsNull(CancelTotalTherms, 0),\r\n\t\tPriorRevisedTherms = CancelTotalTherms*-1, \r\n\t\tCanceledTherms = CancelTotalTherms, \r\n\t\tRevisedTherms = isnull(TotalTherms,0), -- CancelTotalTherms*-1 + (TotalTherms+CancelTotalTherms),\r\n\t\tTotalCCF = IsNull(TotalCCF,0), \r\n\t\tCancelTotalCCF = IsNull(CancelTotalCCF,0),\r\n\t\tPriorRevisedCCF = CancelTotalCCF*-1, \r\n\t\tCanceledCCF = CancelTotalCCF, \r\n\t\tRevisedCCF =isnull(TotalCCF,0), -- CancelTotalCCF*-1+(TotalCCF+CancelTotalCCF),\r\n\t\tAccountStatus = 'UA',\r\n\t\tAccountpreviousStatus = 'NU',\r\n\t\tAccountStatusPeriod = @CurrentBillingPeriod,\r\n\t\tInitialCancelFromDate = Case when InitialCancelFromDate is null then FromDate else InitialCancelFromDate end,\r\n\t\tCurrentBillingToDate = Case when CurrentBillingToDate is null then ToDate else CurrentBillingToDate end,\r\n\t\tSpannedThermFactor = Case when SpannedThermFactor is null then ThermsFactor else SpannedThermFactor end\r\n\r\n\t--\tSetup the core billing information for the current bill(UAG.BillingPeriod = @CurrentBillingPeriod)\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET TotalRebilledAmount = IsNull(TotalRebilledAmount,0), \r\n\t\tTotalCanceledAmount = IsNUll(TotalCanceledAmount,0), \r\n\t\tPriorRevisedBilledAmount =AB.RevisedBilledAmount, \r\n\t\tCanceledBilledAmount =IsNUll(TotalCanceledAmount,0) , --AB.RevisedBilledAmount*-1, \r\n\t\tRevisedBilledAmount =IsNull(TotalRebilledAmount, 0),  --AB.RevisedBilledAmount+ (IsNull(TotalRebilledAmount, 0) + IsNUll(TotalCanceledAmount,0)),\r\n\t\tTotalTherms =IsNUll(UAG.TotalTherms,0),\r\n\t\tCancelTotalTherms =IsNull(UAG.CancelTotalTherms, 0),\r\n\t\tPriorRevisedTherms = IsNull(AB.AccountEnergyUsage,0),\r\n\t\tCanceledTherms = IsNull(UAG.CancelTotalTherms,0),  -- IsNull(AB.AccountEnergyUsage*-1,0), \r\n\t\tRevisedTherms = IsNull(UAG.TotalTherms,0), --IsNull(AB.AccountEnergyUsage,0) + (IsNull(UAG.TotalTherms,0)+IsNull(UAG.CancelTotalTherms,0)),\r\n\t\tTotalCCF = IsNull(UAG.TotalCCF,0), \r\n\t\tCancelTotalCCF = IsNull(UAG.CancelTotalCCF,0), -- IsNull(UAG.CancelTotalCCF,0),\r\n\t\tPriorRevisedCCF = IsNull(ABG.TotalCCF,0), \r\n\t\tCanceledCCF = IsNull(UAG.CancelTotalCCF,0), -- IsNull(ABG.TotalCCF*-1,0),\r\n\t\tRevisedCCF = IsNull(UAG.TotalCCF,0) -- IsNull(ABG.TotalCCF,0)+(IsNull(UAG.TotalCCF,0)+IsNull(UAG.CancelTotalCCF,0))\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\tINNER JOIN Billing.AccountBilling AS AB ON UAG.BillingPeriodRevision = AB.BillingPeriod\r\n\t\t\tAND UAG.BillingPeriodRevision = AB.BillingPeriodRevision\r\n\t\t\tAND UAG.OriginalAccountNumber = AB.OriginalAccountNumber\r\n\t\tINNER JOIN Billing.AccountBillingGas AS ABG ON AB.AccountBillingSeqid = ABG.AccountBillingSeqid\r\n\tWHERE UAG.BillingPeriod = @CurrentBillingPeriod;\r\n\r\n\t--\tStart getting the existing information from EC3 about the account (ie. Sequence Id's)\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AdjustedAccount =A.AccountSeqid, \r\n\t\tAccountStatus = 'AC', -- A.AccountStatus, \r\n\t\tAccountpreviousStatus = 'AC', -- A.AccountpreviousStatus,  \r\n\t\tCurrentInvoiceAccountBillingGroup =2, -- A.CurrentInvoiceAccountGroup, \r\n\t\tAccountUtilityCompanySeqid =A.UtilityAccountProvider,\r\n\t\tEnergySource = 5, -- A.EnergySource,\r\n\t\tIsTimeOfDayAccount = 'N',\r\n\t\tLastPeriodModified =UAG.BillingPeriod,\r\n\t\tBillingCycle =  A.BillingCycle,\r\n\t\tSalesType =  A.SalesType,\r\n\t\tManualPaymentOverride = 'N',\r\n\t\tManualDataEntry  = 'N'\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\tINNER JOIN Billing.Account AS A ON UAG.OriginalAccountNumber = A.OriginalAccountNumber\r\n\t\t\tAND UAG.AccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\t\tINNER JOIN Billing.AccountBilling AS AB ON A.UniqueAccountSeqid = AB.UniqueAccountSeqId \r\n\t\t\tAND A.IsCurrentRecord = 'Y';\r\n\r\n\t--\tGet all of the prior period adjustment sequence ids from the AccountBilling and AccountBillingGas tables.\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AdjustedAccountBilling =AB.AccountBillingSeqid, \r\n\t\tAdjustedAccountBillingGas = ABG.AccountBillingGasSeqid,  -- Fixed Peter\r\n\t\tAccountStatus = case when AB.AccountBillingStatus is null then 'BA' else AB.AccountBillingStatus end , \r\n\t\tAccountpreviousStatus = case when AB.PreviousAccountBillingStatus is null then 'NB' else AB.PreviousAccountBillingStatus end , \r\n\t\tAccountStatusPeriod = case when AB.AccountBillingStatusCodePeriod is null then @CurrentBillingPeriod else AB.AccountBillingStatusCodePeriod end \r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\tINNER JOIN Billing.AccountBilling AS AB ON UAG.BillingPeriodRevision = AB.BillingPeriod\r\n\t\t\tAND UAG.BillingPeriodRevision = AB.BillingPeriodRevision AND UAG.OriginalAccountNumber = AB.OriginalAccountNumber \r\n\t\tINNER JOIN Billing.AccountBillingGas AS ABG ON AB.AccountBillingSeqid = ABG.AccountBillingSeqid \r\n\tWHERE UAG.BillingPeriod <> UAG.BillingPeriodRevision;\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AccountStatus = 'BA', \r\n\t\tAccountpreviousStatus = 'NB',\r\n\t\tAccountStatusPeriod = @CurrentBillingPeriod, \r\n\t\tPriorRevisedCCF =0, \r\n\t\tRevisedCCF =isnull(TotalCCF,0), \r\n\t\tCanceledCCF =isnull(CancelTotalCCF,0), \r\n\t\tPriorRevisedTherms =0, \r\n\t\tRevisedTherms =isnull(TotalTherms,0),\r\n\t\tCanceledTherms =isnull(CancelTotalTherms,0)\r\n\tWHERE (AccountStatus <> 'BC') AND \r\n\t\t(BillingPeriod <> BillingPeriodRevision) AND \r\n\t\t(AdjustedAccountBilling IS NULL);\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET CurrentInvoiceAccountBillingGroup = 2,        \r\n\t\tPriorRevisedCCF =0, \r\n\t\tRevisedCCF =isnull(TotalCCF,0), \r\n\t\tCanceledCCF =isnull(CancelTotalCCF,0), \r\n\t\tPriorRevisedTherms =0, \r\n\t\tRevisedTherms =isnull(TotalTherms,0),\r\n\t\tCanceledTherms =isnull(CancelTotalTherms,0)\r\n\tWHERE (AccountStatus in ('UA','AC')) AND \r\n\t\t(BillingPeriod = BillingPeriodRevision) AND \r\n\t\t(AdjustedAccountBilling IS NULL);\r\n\r\n\t-- Account and Meter Billing usage Discrepancies are noted in the meter billing and the \r\n\t-- reported information saved as the rebilled amount.\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET Notes ='Account and Meter Billing usage Discrepancies  ' +\r\n\t\tcase when netTherms <> 0 then 'Net Therms('+cast(netTherms as varchar(10))+') ' +\r\n\t\tcase when netCCF <> 0 then ')  CCF('+cast(netCCF as varchar(10))+')  '  else '' end + \r\n\t\t':           Reported: Therms('+cast(AccountTotalTherms as varchar(10)) +')           CCF('+cast(AccountTotalCcf as varchar(10)) +')           ThermsFactor('+cast(AccountTotalThermsFactor as varchar(10)) +')  ' else '' end --+\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tINNER JOIN ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS V ON \r\n\t\t\tUM.BillingPeriod = V.BillingPeriod AND UM.UniqueAccountSeqID = V.UniqueAccountSeqID\r\n\t\t\tAND UM.BillingPeriodRevision = V.BillingPeriodRevision;\r\n\r\n\t--\tAssume that all of the meter billing rows are unknown meters on existing accounts and the Meter Billing Status Period is the current processing\r\n\t--\tbilling period.  This is processing by exception.\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET NumberOfCancelTransactions = 0, \r\n\t\tMeterBillingStatus = 'UM', \r\n\t\tMeterBillingPreviousStatus = 'NU', \r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod, \r\n\t\tRevisedBilledCCF = isnull(Ccf, 0),\r\n\t\tCanceledBilledCCF = 0, \r\n\t\tRevisedBilledTherms =isnull(Therms, 0),\r\n\t\tCanceledBilledTherms = 0,\r\n\t\tMeterReset = case when Notes is null then 'N' \r\n\t\t                  else case when CHARINDEX('Reset:', Notes) <> 0 then 'Y' else 'N' end END;\r\n\t\t\r\n\t--\tThe ConEd.UploadConEdisonMeterBillingAdjustmentGas is being joined with the ConEd.UploadConEdisonAccountBillingAdjustmentGas table to link the\r\n\t--\texisting meter billing transactions with their account billing conterpart.  The account table is being joined with the UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\ttable since the all of the known accounts sequence id has been updated in that table.  The UploadConEdisonMeterBillingAdjustmentGas is being joined with \r\n\t--\tBilling.Meter and Billing.AccountExchangeMeterTrack to identify all meters and the AccountExchangeMeterTrack information that is currently known to EC3.\r\n\t--\r\n\t--\t\t\t\t\t\t\t\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\t\t\t\t\t\t\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t--\t\t\t\t\t\t\t\t\tBilling.Account\r\n\t--\t\t\t\t\t\t\t\t\tBilling.Meter \r\n\t--\t\t\t\t\t\t\t\t\tBilling.AccountExchangeMeterTrack \r\n\t--\r\n\t--\tAfter the update, all of the meters that are unknown to EC3 will have a Status code of 'UM'.\r\n\t--\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET AccountUtilityCompanySeqid =A.UtilityAccountProvider, \r\n\t\tAccountBilled =A.AccountSeqid, \r\n\t\tMeterBilled =M.MeterSeqid, \r\n\t\tAccountExchangeMeterTrackSeqid =AE.AccountExchangeMeterTrackSeqid, \r\n\t\tMeterBillingStatus ='AC',  ---  M.MeterStatus, \r\n\t\tMeterBillingPreviousStatus ='AC',  ---  M.MeterPreviousStatus, \r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod, -- M.MeterStatusCodePeriod\r\n\t\tUniqueAccountSeqID = A.UniqueAccountSeqID, -- Added on 1/2/2019\r\n\t\tUniqueMeterSeqID = M.UniqueMeterSeqid -- Added on 1/15/2019\r\n\tFROM Billing.AccountExchangeMeterTrack AS AE\r\n\t\tINNER JOIN Billing.Account AS A ON AE.OriginalAccountSeqid = A.AccountSeqid AND AE.OriginalAccountSeqid = A.AccountSeqid\r\n\t\tINNER JOIN Billing.Meter AS M ON AE.OriginalMeterSeqid = M.MeterSeqid AND AE.OriginalMeterSeqid = M.MeterSeqid\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG ON A.AccountSeqid = UAG.AdjustedAccount\r\n\t\tINNER JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM ON UAG.BillingPeriod = UM.BillingPeriod AND \r\n\t\tUAG.BillingPeriodRevision = UM.BillingPeriodRevision AND UAG.OriginalAccountNumber = UM.OriginalAccountNumber AND \r\n\t\tM.OriginalAccountNumber = UM.OriginalAccountNumber AND M.OriginalMeterNumber = UM.OriginalMeterNumber AND \r\n\t\tAE.OriginalAccountNumber = UM.OriginalAccountNumber AND AE.OriginalMeterNumber = UM.OriginalMeterNumber\r\n\r\n\t--\tThe UploadConEdisonMeterBillingAdjustmentGas is using a LEFT JOIN with the account table to find all rows whose status is 'UM'.  If the \r\n\t--\taccount exists the AccountSeqid is updated in the AccountBilled column and no change to the status code.  If the AccountSeqid is null then the \r\n\t--\tmeter and the account are unknown to EC3 and the status updated to 'UA'\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET AccountBilled =A.AccountSeqid,\r\n\t\tMeterBillingStatus = Case when A.AccountSeqid is null then 'UA' else 'UM' end\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tLEFT JOIN Billing.Account AS A ON UM.OriginalAccountNumber = A.OriginalAccountNumber AND \r\n\t\tUM.AccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\tWHERE UM.MeterBillingStatus = 'UM';\r\n\r\n\t--\tCon Edison does not provide the meter billing cancellations. The meter billing rebills with be used to search EC3 for the row that needs to\r\n\t--\tbe adjusted.  The prior billed CCF and Therms will be used as the basis for the prior billed amount and the amount to be canceled.  The negation\r\n\t--\tof the prior objects will reverse the state of the prior value.  Also, if there is a match the NumberOfCancelTransactions is set to 1 and\r\n\t--\tNumberOfTransactions is increased by one (NumberOfTransactions + 1).\r\n\t--\r\n\t--\t\tRevisedBilledCCF = IsNull(MBG.Ccf,0) + \r\n\t--\t\t\t\t\t\t  (IsNull(UM.CCF,0)+IsNull(-1 * MBG.Ccf,0)),\r\n\t--\t\tCanceledBilledCCF = IsNull(-1 * MBG.Ccf,0),\r\n\t--\t\tRevisedBilledTherms = IsNull(MB.Consumption,0)+\r\n\t--\t\t\t\t\t\t\t   (IsNull(UM.Therms,0)+IsNull(-1 * MB.Consumption,0)),\r\n\t--\t\tCanceledBilledTherms = IsNull(-1 * MB.Consumption,0),\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET NumberOfCancelTransactions = 1, \r\n\t\tNumberOfTransactions = IsNull(UM.NumberOfTransactions,0) + 1, \r\n\t\tAdjustedMeterBilling = MB.MeterBillingSeqid,\r\n\t\tAdjustedMeterBillingGas =MBG.MeterBillingGasSeqid,\r\n\t\tMeterBillingStatus = MB.MeterBillingStatus, \r\n\t\tMeterBillingPreviousStatus = MB.PreviousMeterBillingStatus, \r\n\t\tMeterBillingStatusPeriod = MB.MeterBillingStatusCodePeriod, \r\n\t\tRevisedBilledCCF = IsNull(UM.CCF,0),\r\n\t\tCanceledBilledCCF = 0, -- IsNull(UM.CCF,0), --IsNull(-1 * MBG.Ccf,0),\r\n\t\tPriorRevisedBilledCCF = IsNull(MBG.Ccf,0),\r\n\t\tCCF = IsNull(UM.CCF,0),\r\n\t\tCancelCcf = 0, -- IsNull(UM.CancelCcf,0), -- Con Edison does not report Cancellations on the meter billing level\r\n\t\tPriorRevisedBilledTherms = IsNull(MB.Consumption,0), \r\n\t\tRevisedBilledTherms = IsNull(UM.Therms,0),\r\n\t\tCanceledBilledTherms = IsNull(UM.CanceledBilledTherms,0),  -- IsNull(-1 * MB.Consumption,0),\r\n\t\tTherms = IsNull(UM.Therms,0),\r\n\t\tCancelTherms = IsNull(UM.CanceledBilledTherms,0),\r\n\t\tCancelFromDate = MBG.FromDate, \r\n\t\tCancelToDate = MBG.ToDate, \r\n\t\tCancelMeterFromReading = IsNull(MBG.MeterFromReading,0),\r\n\t\tCancelMeterToReading = IsNull(MBG.MeterToReading,0),\r\n\t\tCancelThermsFactor = IsNull(MBG.ThermsFactor, 1.03),\r\n\t\tCancelMeterConstant = IsNull(MBG.MeterConstant,1)\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tINNER JOIN Billing.MeterBilling AS MB ON UM.AccountExchangeMeterTrackSeqid = MB.AccountExchangeMeterTrackSeqid\r\n\t\t\tAND UM.BillingPeriodRevision = MB.BillingPeriodRevision AND UM.BillingPeriodRevision = MB.BillingPeriod\r\n\t\tINNER JOIN Billing.MeterBillingGas AS MBG ON MB.MeterBillingSeqid = MBG.MeterBillingSeqid\r\n\t\t\tAND MB.OriginalAccountNumber = MBG.OriginalAccountNumber AND MB.OriginalMeterNumber = MBG.OriginalMeterNumber\r\n\t\t\tAND MB.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n\tWHERE UM.AccountBilled IS NOT NULL AND UM.MeterBilled IS NOT NULL;\r\n\r\n\t--\tUpdate the meter billing adjustments with a 'BA' status if they were not found with EC3. Exclude any\r\n\t--\tmeter billing whose status starts with 'U*' since they are unknown to EC3.  They will be added as new\r\n\t--\tmeters.  If they are being added to existing accounts then OEC will have to contact Con Edison to find out\r\n\t--\twhether it was a meter exchange or an additional meter.\r\n\r\n\tUPDATE UM\r\n\tSET MeterBillingStatus = 'BA', \r\n\t\tMeterBillingPreviousStatus = 'NB', \r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod,\r\n\t\tNotes = Case when substring(Notes,1,5) = 'Meter' then Notes\r\n\t\t\t\t\twhen DerivedFromSpannedBill = 'Y' \r\n\t\t\t\t\t\tthen Notes + ' Back Billed in: '+ @CurrentBillingPeriod+ ' for Revised Billing Period: '+UM.BillingPeriodRevision\r\n\t\t\t\t\t\telse         ' Back Billed in: '+ @CurrentBillingPeriod+ ' for Revised Billing Period: '+UM.BillingPeriodRevision end \r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\tWHERE (BillingPeriod <> BillingPeriodRevision) AND \r\n\t\t(CancelThermsFactor IS NULL) AND \r\n\t\t(MeterBillingStatus NOT LIKE 'U%');\r\n\r\n\t--\tCreate Common.UploadCommonExchangeData in preparation to do the exchange processing.\r\n\r\n\tTRUNCATE TABLE Gas.UploadCommonElectronicGasExchangeData;\r\n\r\n\tINSERT INTO Gas.UploadCommonElectronicGasExchangeData\r\n\t\t(UtilityCompanyId,\r\n\t\tAccountBillingGroup,\r\n\t\tBillingPeriod,\r\n\t\tApprovedForCreation,\r\n\t\tCurrentAccountNumber,\r\n\t\tCurrentMeterNumber,\r\n\t\tExchangeCode,\r\n\t\tAccountStatus,\r\n\t\tAccountEffectiveTurnOn,\r\n\t\tAccountEffectiveTurnOff,\r\n\t\t--  KWHAccountDescription,\r\n\t\tSalesType,\r\n\t\tDeliveryServiceClass,\r\n\t\tDeliveryServiceClassEffectiveDate,\r\n\t\tProductionServiceClass,\r\n\t\tProductionServiceClassEffectiveDate,\r\n\t\tBillingCycle,\r\n\t\t--   ExcessDistributionAccount,\r\n\t\tTODAccount,\r\n\t\tTripNumber,\r\n\t\tAccountName,\r\n\t\tAccountAddress,\r\n\t\tBorough,\r\n\t\tMeterStatus,\r\n\t\tMeterEffectiveTurnOnDate,\r\n\t\tMeterEffectiveTurnOffDate,\r\n\t\tMeterType,\r\n\t\tMeterNumberofDials,\r\n\t\tMeterConstant,\r\n\t\t--    MeterTension,\r\n\t\tManualDataEntry,\r\n\t\tEnergyDeliveryCount, \r\n\t\tEnergyDeliveryType,\r\n\t\t--   EnergyDeliveryType1, \r\n\t\tauthenticatedUserID)\r\n\tSELECT Min(9) as UtilityCompanyId,\r\n\t\tmin(2) as AccountBillingGroup,\r\n\t\tmin(UM.BillingPeriod) as BillingPeriod,\r\n\t\tmin('Y') as ApprovedForCreation,\r\n\t\tUM.OriginalAccountNumber, \r\n\t\tUM.OriginalMeterNumber,\r\n\t\tUM.MeterBillingStatus as ExchangeCode,\r\n\t\tUM.MeterBillingStatus as AccountStatus,\r\n\t\tmin(UM.FromDate) as AccountEffectiveTurnOn,\r\n\t\tmin('99991231') as AccountEffectiveTurnOff,\r\n\t\t--min(null) as KWHAccountDescription,\r\n\t\tmin('BT') as SalesType,\r\n\t\tmin(UM.GasRateCode) as DeliveryServiceClass,\r\n\t\tmin(UM.FromDate) as DeliveryServiceClassEffectiveDate,\r\n\t\tmin(UM.GasRateCode) as ProductionServiceClass,\r\n\t\tmin(UM.FromDate) as ProductionServiceClassEffectiveDate,\r\n\t\tmin('M') as BillingCycle,\r\n\t\t--min(null) as ExcessDistributionAccount,\r\n\t\tmin('N') as TODAccount,\r\n\t\tmin('18') as TripNumber,\r\n\t\tmin(case when UM.FacilityName is null then 'Missing Facility Name' else UM.FacilityName end ) as AccountName,\r\n\t\tmin(case when UM.ServiceAddress is null then 'Missing Service Address' else UM.ServiceAddress end ) as AccountAddress,\r\n\t\tmin(1) as Borough,\r\n\t\tUM.MeterBillingStatus as MeterStatus,\r\n\t\tmin(UM.FromDate) as MeterEffectiveTurnOnDate,\r\n\t\tmin('99991231') as MeterEffectiveTurnOffDate,\r\n\t\tmin('G') as MeterType,\r\n\t\tmin(UM.NumberOfDials) as MeterNumberofDials,\r\n\t\tmin(MeterConstant) as MeterConstant,\r\n\t\t--min(null) as MeterTension,\r\n\t\tmin('N') as ManualDataEntry,\r\n\t\tmin(1) as EnergyDeliveryCount,\r\n\t\tmin(5) as EnergyDeliveryType,\r\n\t\t--min(null) as EnergyDeliveryType1, \r\n\t\tmin(1) as authenticatedUserID\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tFULL OUTER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG ON UM.OriginalAccountNumber = UAG.OriginalAccountNumber\r\n\t\t\tAND UM.BillingPeriod = UAG.BillingPeriod AND UM.BillingPeriodRevision = UAG.BillingPeriodRevision\r\n\tWHERE (UAG.AccountStatus LIKE 'U%' and UAG.AdjustedAccount is null) OR\r\n\t\t(UM.MeterBillingStatus LIKE 'U%' and UM.AccountExchangeMeterTrackSeqid is null)\r\n\tGROUP BY UM.OriginalAccountNumber, \r\n\t\tUM.OriginalMeterNumber,\r\n\t\tUM.MeterBillingStatus\r\n\r\n\tDELETE FROM Gas.UploadCommonElectronicGasExchangeData\r\n\tFROM Billing.AccountExchangeMeterTrack AS AE\r\n\t\tINNER JOIN Billing.Account AS A ON AE.OriginalAccountSeqid = A.AccountSeqid\r\n\t\tINNER JOIN Billing.Meter AS M ON AE.OriginalMeterSeqid = M.MeterSeqid\r\n\t\tINNER JOIN Gas.UploadCommonElectronicGasExchangeData AS GE ON M.OriginalAccountNumber = GE.CurrentAccountNumber\r\n\t\t\tAND M.OriginalMeterNumber = GE.CurrentMeterNumber AND A.UtilityAccountProvider = GE.UtilityCompanyId\r\n\t\t\tAND A.OriginalAccountNumber = GE.CurrentAccountNumber\r\n\tWHERE A.AccountStatusCodePeriod < @CurrentBillingPeriod AND M.MeterStatusCodePeriod < @CurrentBillingPeriod;\t\t\r\n\r\n\t--\tRemove any garbage row where the (CurrentAccountNumber IS NULL) OR (CurrentMeterNumber IS NULL)\r\n\r\n\tDELETE FROM Gas.UploadCommonElectronicGasExchangeData\r\n\tWHERE CurrentAccountNumber IS NULL OR CurrentMeterNumber IS NULL;\r\n\t\t\r\n\t--\tInsert the AccountBilling records from \"ConEd.UploadConEdisonCurrentlyBilledAccounts AS NoOriginalAccountBilling\" to provide\r\n\t--\ta record that can be used for the current period billing.  All of these bills will have a status code of \"BC\" back billed without\r\n\t--\ta current period bill.  The Current period usage and dollars are zero.  This was included for interuptible gas that lags billing\r\n\t--\tby a month.  The money will be count as a net paid adjustment.\r\n\t\r\n\tINSERT INTO ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\t(UniqueAccountSeqID, /* added on 12/21/2018 */\r\n\t\tFacilityName,\r\n\t\tServiceAddress,\r\n\t\tAdjustedAccount,\r\n\t\tAccountUtilityCompanySeqid,\r\n\t\tAccountStatus,\r\n\t\tAccountpreviousStatus,\r\n\t\tAccountStatusPeriod,\r\n\t\tCurrentInvoiceAccountBillingGroup,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tOriginalAccountNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCanceledBillingPeriod,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tTotalRebilledAmount,\r\n\t\tTotalCanceledAmount,\r\n\t\tPriorRevisedBilledAmount,\r\n\t\tRevisedBilledAmount,\r\n\t\tCanceledBilledAmount,\r\n\t\tPriorRevisedCCF,\r\n\t\tRevisedCCF,\r\n\t\tCanceledCCF,\r\n\t\tPriorRevisedTherms,\r\n\t\tRevisedTherms,\r\n\t\tCanceledTherms,\r\n\t\tAverageRebillCostOfGasCharge,\r\n\t\tAverageRebillThermsFactor,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tToDate,\r\n\t\tFromDate,\r\n\t\tBillingAction,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tGasRateCode,\r\n\t\tTotalCCF,\r\n\t\tTotalTherms,\r\n\t\tThermsFactor,\r\n\t\tCancelFromDate,\r\n\t\tCancelToDate,\r\n\t\tCancelTotalCCF,\r\n\t\tCancelTotalTherms,\r\n\t\tCancelThermsFactor,\r\n\t\tCancelBillingDays,\r\n\t\tProcessEffectiveDate,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedBilledAmount,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tNotes, \r\n\t\tAuthenticatedUserID)\r\n\tSELECT UAG.UniqueAccountSeqID, /* added on 12/21/2018 */\r\n\t\t-- UAG.UploadConEdisonAccountBillingAdjustmentGasSeqid, \r\n\t\tUAG.FacilityName, \r\n\t\tUAG.ServiceAddress, \r\n\t\tUAG.AdjustedAccount,\r\n\t\tUAG.AccountUtilityCompanySeqid, \r\n\t\t'BC', -- UAG.AccountStatus, \r\n\t\t'NB', -- UAG.AccountpreviousStatus, \r\n\t\t@CurrentBillingPeriod, -- UAG.AccountStatusPeriod, \r\n\t\tUAG.CurrentInvoiceAccountBillingGroup, \r\n\t\t1, -- UAG.NumberOfTransactions, \r\n\t\t1, -- UAG.NumberOfRebillTransactions,\r\n\t\t0, --  UAG.NumberOfCancelTransactions, \r\n\t\tUAG.OriginalAccountNumber, \r\n\t\t@CurrentBillingPeriod, \r\n\t\t@CurrentBillingPeriod, -- @CurrentBillingPeriodRevision, \r\n\t\t@CurrentBillingPeriod, -- UAG.FirstCanceledBillingPeriod, \r\n\t\t'EST', -- UAG.EstimatedOrActualBilling, \r\n\t\tUAG.InitialCancelFromDate, \r\n\t\tUAG.CurrentBillingToDate, \r\n\t\tUAG.NumberOfBillingPeriods, \r\n\t\tUAG.TotalBillingDaysRebilled, \r\n\t\t0, --  UAG.TotalRebilledAmount, \r\n\t\t0, --  UAG.TotalCanceledAmount, \r\n\t\t0, --  UAG.PriorRevisedBilledAmount,\r\n\t\t0, --  UAG.RevisedBilledAmount, \r\n\t\t0, --  UAG.CanceledBilledAmount, \r\n\t\t0, --  UAG.PriorRevisedCCF, \r\n\t\t0, --  UAG.RevisedCCF, \r\n\t\t0, --  UAG.CanceledCCF,\r\n\t\t0, --  UAG.PriorRevisedTherms, \r\n\t\t0, --  UAG.RevisedTherms, \r\n\t\t0, --  UAG.CanceledTherms, \r\n\t\t0, --  UAG.AverageRebillCostOfGasCharge, \r\n\t\t0, --  UAG.AverageRebillThermsFactor,\r\n\t\tdbo.[CalculateNumberOfBillingDays]  (dbo.[DetermineConEdisonBillingPeriodProjectedFromDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid),\r\n\t\t\t\t\t\t\t\t\t\t\t   dbo.[DetermineConEdisonBillingPeriodProjectedToDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid)\r\n\t\t\t\t\t\t\t\t\t\t\t   ), --  UAG.BillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD] ( getDate()), --  UAG.BillingDate,\r\n\t\tdbo.[DetermineConEdisonBillingPeriodProjectedToDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid), --  UAG.ToDate,\r\n\t\tdbo.[DetermineConEdisonBillingPeriodProjectedFromDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid), --  UAG.FromDate,\r\n\t\t'O', --  UAG.BillingAction,\r\n\t\t'N', --  UAG.ProcessedInTheCurrentPeriod,\r\n\t\tUAG.GasRateCode,\r\n\t\t0, --  UAG.TotalCCF,\r\n\t\t0, --  UAG.TotalTherms,\r\n\t\t0, --  UAG.ThermsFactor,\r\n\t\tnull, --  UAG.CancelFromDate,\r\n\t\tnull, --  UAG.CancelToDate,\r\n\t\t0, --  UAG.CancelTotalCCF,\r\n\t\t0, --  UAG.CancelTotalTherms,\r\n\t\t0, --  UAG.CancelThermsFactor,\r\n\t\t0, --  UAG.CancelBillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD] ( getDate()), --  UAG.ProcessEffectiveDate,\r\n\t\t'N', --  UAG.DerivedFromSpannedBill,\r\n\t\t0, --  UAG.SpannedBillingPeriodRevision,\r\n\t\t0, --  UAG.SpannedFirstCanceledBillingPeriod,\r\n\t\t0, --  UAG.SpannedBilledAmount,\r\n\t\t0, --  UAG.SpannedCCF,\r\n\t\t0, --  UAG.SpannedThermFactor,\r\n\t\t0, --  UAG.SpannedTherm,\r\n\t\t0, --  UAG.SpannedMonthlyPercentage,\r\n\t\t0, --  UAG.SpannedTotalPercentage,\r\n\t\t'No Current Account Billing Period record: '+@CurrentBillingPeriod, --  UAG.Notes\r\n\t\t1 -- AuthenticatedUserID\r\n\tFROM ConEd.UploadConEdisonCurrentlyBilledAccounts AS UC\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG ON UC.OriginalAccountNumber = UAG.OriginalAccountNumber\r\n\tWHERE UAG.BillingPeriodRevision = (SELECT MAX(BillingPeriodRevision) AS MaxBillingPeriodRevision\r\n\t\t\t\t\t\t\t\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS MaxRevised\r\n\t\t\t\t\t\t\t\tGROUP BY OriginalAccountNumber\r\n\t\t\t\t\t\t\t\tHAVING OriginalAccountNumber = UAG.OriginalAccountNumber);\r\n\r\n\t--\tInsert the AccountBilling records when the \"UploadConEdisonAccountBillingAdjustmentGasSeqid IS NULL and \r\n\t--\tUploadConEdisonMeterBillingAdjustmentGasSeqid is not null\".  This provides a record that can be used for the current period billing that\r\n\t--\twas not provided by Con edison.  All of these bills will have a status code of \"BM\" back billed meter billing without\r\n\t--\ta current period account bill.  The period will reflect the billing period revison and the usage is set to the CCF,Therms and Thermsfactor.  \r\n\t--\tAll dollar columns will be set to Zero (no money).\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\t(UniqueAccountSeqID, /* added on 12/21/2018 */\r\n\t\tFacilityName,\r\n\t\tServiceAddress,\r\n\t\tAdjustedAccount,\r\n\t\tAccountUtilityCompanySeqid,\r\n\t\tAccountStatus,\r\n\t\tAccountpreviousStatus,\r\n\t\tAccountStatusPeriod,\r\n\t\tCurrentInvoiceAccountBillingGroup,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tOriginalAccountNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCanceledBillingPeriod,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tTotalRebilledAmount,\r\n\t\tTotalCanceledAmount,\r\n\t\tPriorRevisedBilledAmount,\r\n\t\tRevisedBilledAmount,\r\n\t\tCanceledBilledAmount,\r\n\t\tPriorRevisedCCF,\r\n\t\tRevisedCCF,\r\n\t\tCanceledCCF,\r\n\t\tPriorRevisedTherms,\r\n\t\tRevisedTherms,\r\n\t\tCanceledTherms,\r\n\t\tAverageRebillCostOfGasCharge,\r\n\t\tAverageRebillThermsFactor,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tToDate,\r\n\t\tFromDate,\r\n\t\tBillingAction,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tGasRateCode,\r\n\t\tTotalCCF,\r\n\t\tTotalTherms,\r\n\t\tThermsFactor,\r\n\t\tCancelFromDate,\r\n\t\tCancelToDate,\r\n\t\tCancelTotalCCF,\r\n\t\tCancelTotalTherms,\r\n\t\tCancelThermsFactor,\r\n\t\tCancelBillingDays,\r\n\t\tProcessEffectiveDate,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedBilledAmount,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tNotes, \r\n\t\tAuthenticatedUserID)\r\n\tSELECT UAG.UniqueAccountSeqID, /* added on 12/21/2018 */\r\n\t\tUMG.FacilityName, \r\n\t\tUMG.ServiceAddress, \r\n\t\tUMG.AccountBilled,\r\n\t\tUMG.AccountUtilityCompanySeqid, \r\n\t\t'BM', -- UAG.AccountStatus, \r\n\t\t'NB', -- UAG.AccountpreviousStatus, \r\n\t\t@CurrentBillingPeriod, -- UAG.AccountStatusPeriod, \r\n\t\t(select A.CurrentInvoiceAccountGroup from Billing.Account AS A WHERE A.AccountSeqid =UMG.AccountBilled), --UAG.CurrentInvoiceAccountBillingGroup, \r\n\t\t0, -- UAG.NumberOfTransactions, \r\n\t\t0, -- UAG.NumberOfRebillTransactions,\r\n\t\t0, --  UAG.NumberOfCancelTransactions, \r\n\t\tUMG.OriginalAccountNumber, \r\n\t\t@CurrentBillingPeriod, \r\n\t\tUMG.BillingPeriodRevision, -- @CurrentBillingPeriodRevision, \r\n\t\tUMG.BillingPeriodRevision, -- UAG.FirstCanceledBillingPeriod, \r\n\t\t'EST', -- UAG.EstimatedOrActualBilling, \r\n\t\tUMG.FromDate, -- UAG.InitialCancelFromDate, \r\n\t\tUMG.ToDate, -- UAG.CurrentBillingToDate, \r\n\t\tUMG.NumberOfBillingPeriods, \r\n\t\tUMG.TotalBillingDaysRebilled, \r\n\t\t0, --  UAG.TotalRebilledAmount, \r\n\t\t0, --  UAG.TotalCanceledAmount, \r\n\t\t0, --  UAG.PriorRevisedBilledAmount,\r\n\t\t0, --  UAG.RevisedBilledAmount, \r\n\t\t0, --  UAG.CanceledBilledAmount, \r\n\t\t0, --  UAG.PriorRevisedCCF, \r\n\t\t0, --  UAG.RevisedCCF, \r\n\t\t0, --  UAG.CanceledCCF,\r\n\t\t0, --  UAG.PriorRevisedTherms, \r\n\t\t0, --  UAG.RevisedTherms, \r\n\t\t0, --  UAG.CanceledTherms, \r\n\t\t0, --  UAG.AverageRebillCostOfGasCharge, \r\n\t\t0, --  UAG.AverageRebillThermsFactor,\r\n\t\tUMG.BillingDays, --  UAG.BillingDays,\r\n\t\tUMG.BillingDate, -- dbo.[ConvertDatetimeToYYYYMMDD] ( getDate()), --  UAG.BillingDate,\r\n\t\tUMG.ToDate,  --  dbo.[DetermineConEdisonBillingPeriodProjectedToDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid), --  UAG.ToDate,\r\n\t\tUMG.FromDate,  --  dbo.[DetermineConEdisonBillingPeriodProjectedFromDate] (@CurrentBillingPeriod,UAG.GasRateCode,UAG.AccountUtilityCompanySeqid), --  UAG.FromDate,\r\n\t\tUMG.BillingAction, --  UAG.BillingAction,\r\n\t\t'N', --  UAG.ProcessedInTheCurrentPeriod,\r\n\t\t(select A.CommodityTariffRate from Billing.Account AS A where A.AccountSeqid =UMG.AccountBilled), --UMG.GasRateCode,\r\n\t\t0, --  UMG.Ccf, --  UAG.TotalCCF,\r\n\t\t0, --  UMG.Therms, --  UAG.TotalTherms,\r\n\t\t0, --  UMG.ThermsFactor, --  UAG.ThermsFactor,\r\n\t\tnull, --  UAG.CancelFromDate,\r\n\t\tnull, --  UAG.CancelToDate,\r\n\t\t0, --  UAG.CancelTotalCCF,\r\n\t\t0, --  UAG.CancelTotalTherms,\r\n\t\t0, --  UAG.CancelThermsFactor,\r\n\t\t0, --  UAG.CancelBillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD] ( getDate()), --  UAG.ProcessEffectiveDate,\r\n\t\t'N', --  UAG.DerivedFromSpannedBill,\r\n\t\t0, --  UAG.SpannedBillingPeriodRevision,\r\n\t\t0, --  UAG.SpannedFirstCanceledBillingPeriod,\r\n\t\t0, --  UAG.SpannedBilledAmount,\r\n\t\t0, --  UAG.SpannedCCF,\r\n\t\t0, --  UAG.SpannedThermFactor,\r\n\t\t0, --  UAG.SpannedTherm,\r\n\t\t0, --  UAG.SpannedMonthlyPercentage,\r\n\t\t0, --  UAG.SpannedTotalPercentage,\r\n\t\t'No Account Billing record, Revision: '+UMG.BillingPeriodRevision+' Current: '+@CurrentBillingPeriod+\r\n\t\t'  CCF ('+cast(UMG.Ccf as varchar(12))+')  ThermsFactor ('+cast(UMG.ThermsFactor as varchar(12))+')   Therms ('+cast(UMG.Therms as varchar(12))+')', --  UAG.Notes\r\n\t\t1 -- AuthenticatedUserID\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\tRIGHT JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UMG ON UAG.OriginalAccountNumber = UMG.OriginalAccountNumber\r\n\t\t\tAND UAG.BillingPeriod = UMG.BillingPeriod AND UAG.BillingPeriodRevision = UMG.BillingPeriodRevision\r\n\tWHERE (UAG.UploadConEdisonAccountBillingAdjustmentGasSeqid IS NULL)\r\n      AND UMG.AccountBilled IS null\r\n\r\n\t-- Adjust ConEd.UploadConEdisonMeterBillingAdjustmentGas with information from the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t-- that is to used in the Gas.UM.  Eventually, it be inserted into the Billing.MeterBilling and\r\n\t-- MBG.  Grab BillCreationDate from the Common.UploadCycleParameters table.\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET BillCreationDate =UC.BillCreationDate, \r\n\t\tEnergySource =UAG.EnergySource, \r\n\t\tLastPeriodModified =UAG.LastPeriodModified, \r\n\t\tBillingCycle =UAG.BillingCycle, \r\n\t\tSalesType =UAG.SalesType, \r\n\t\tIsTimeOfDayAccount ='N',-- Electricity only \r\n\t\tUtilityServiceAddress =UAG.ServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS UAG\r\n\t\t\tON UM.AccountUtilityCompanySeqid = UAG.AccountUtilityCompanySeqid\r\n\t\t\tAND UM.OriginalAccountNumber = UAG.OriginalAccountNumber AND UM.BillingPeriod = UAG.BillingPeriod\r\n\t\t\tAND UM.BillingPeriodRevision = UAG.BillingPeriodRevision AND UM.AccountBilled = UAG.AdjustedAccount\r\n\t\tINNER JOIN Common.UploadCycleParameters AS UC ON UAG.BillingPeriod = UC.BillingPeriod\r\n\t\t\tAND UAG.AccountUtilityCompanySeqid = UC.UtilityCompanySeqid AND UAG.CurrentInvoiceAccountBillingGroup = UC.InvoiceAccountGroupSeqid\r\n\tWHERE UAG.BillingPeriod = @CurrentBillingPeriod;\r\n\r\n\t-- Adjust ConEd.UploadConEdisonMeterBillingAdjustmentGas with information from the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t-- that is to used in the Gas.UM.  Eventually, it be inserted into the Billing.MeterBilling and\r\n\t-- MBG.  Grab MeterDials from the M.\r\n\r\n\tUPDATE UM\r\n\tSET MeterDials = M.MeterDials\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS UM\r\n\t\tINNER JOIN Billing.Meter AS M ON UM.MeterBilled = M.MeterSeqid AND \r\n\t\t\tUM.OriginalAccountNumber = M.OriginalAccountNumber AND \r\n\t\t\tUM.OriginalMeterNumber = M.CurrentMeterNumber\r\n\tWHERE UM.BillingPeriod = @CurrentBillingPeriod;                     \r\n\r\n\t--\tIdentify all accounts and meters that were previously identified as unknown exchanges and \r\n\t--\thave not as of yet been reconciled with the utility company as to what kind of exchange was done.\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AccountpreviousStatus = AccountStatus, \r\n\t\tAccountStatus = 'AC', \r\n\t\tAccountStatusPeriod = BillingPeriod \r\n\tWHERE AccountStatus LIKE 'U%' AND AdjustedAccount IS NOT NULL;\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET MeterBillingPreviousStatus = MeterBillingStatus, \r\n\t\tMeterBillingStatus = 'AC', \r\n\t\tMeterBillingStatusPeriod = BillingPeriod\r\n\tWHERE MeterBillingStatus LIKE 'U%' AND AccountExchangeMeterTrackSeqid IS NOT NULL;\r\nEND;"
        }
      ]
    }
  ]
}