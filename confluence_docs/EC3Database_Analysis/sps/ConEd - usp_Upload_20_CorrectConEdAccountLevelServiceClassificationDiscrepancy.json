{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_20_CorrectConEdAccountLevelServiceClassificationDiscrepancy",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_20_CorrectConEdAccountLevelServiceClassificationDiscrepancy",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to automate the correction of account-level service classification discrepancies for Con Edison. It performs several operations, including identifying discrepancies, updating account information with new tariff rates, and ensuring data consistency across related tables. The procedure also manages temporary data for processing and updates a common view for reporting purposes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple steps, including data insertion, updates, and temporary table management. It integrates data from several tables and performs conditional logic to ensure data consistency. The complexity arises from the need to handle multiple joins, conditional updates, and the use of temporary tables."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status int output",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is intended to return the status of the procedure execution. It is not explicitly used within the procedure, which might indicate an oversight or future implementation plan."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Identify Discrepancies",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Inserts records into "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountLevelServiceClassificationDiscrepancy",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for accounts with mismatched tariff rates between "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonAccount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Retrieve Billing Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Fetches the billing period from "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonAccount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to use in subsequent updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Accounts",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with new tariff rate information and other related fields for accounts identified with discrepancies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Mark Accounts as Updated",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates "
                },
                {
                  "type": "text",
                  "text": "AccountLevelServiceClassificationDiscrepancy",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to mark accounts as updated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Manage Temporary Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Drops and recreates a temporary table "
                },
                {
                  "type": "text",
                  "text": "#MinFromDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to store the minimum effective date for tariff updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Effective Dates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with new tariff effective dates based on the temporary data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Ensure Data Consistency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates accounts with missing "
                },
                {
                  "type": "text",
                  "text": "UtilityTariffRateInformationSeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " based on existing conditions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Common View Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Selects data from a common view for reporting purposes, filtered by the current billing period and account group."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Indexes",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple joins, which can be resource-intensive. Ensuring that the joined columns are indexed can improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Table Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a temporary table ("
                },
                {
                  "type": "text",
                  "text": "#MinFromDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") can impact performance, especially if the data volume is large. Consideration should be given to optimizing the temporary table creation and usage."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the data volume is significant, consider processing in batches to reduce transaction size and lock contention."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure updates multiple tables and uses temporary tables, which could lead to concurrency issues if executed simultaneously by multiple users."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete transactions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Unused Parameter",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@Status",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " output parameter is declared but not used, which could lead to confusion or errors in future maintenance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonAccount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is accurate and complete. Any discrepancies in this data could lead to incorrect updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the data grows, the performance of the procedure may degrade, especially if indexes are not properly maintained or if the temporary table usage is not optimized."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Name:         \r\n--*\r\n--* Description:  Automate the account level service classification discrepancy for con edison.\r\n--*\r\n--*\t\t\t1. Identify current period Account Level Service Classification Discrepancies\r\n--\t\t\t2. Get the BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\t\t\t3. Update account with new UtilityTariffRateInformation\r\n--\t\t\t4. Update AccountLevelServiceClassificationDiscrepancy with AccountIsUpdated = 'Y' for all of the accounts that were changed.\r\n--\t\t\t5. Drop temp table #MinFromDate if it exists and recreate it\r\n--\t\t\t6. Update account with new Tariff Effective Date from upload data based upon the minimum from date of the billing\r\n--\t\t\t7. A view for common usage.\r\n--*               \r\n--* Exec:       \t\t[ConEd].[usp_ConEdAccountLevelServiceClassificationDiscrepancy]\r\n--*\r\n--* Parameter(s):         @Status int output\r\n--*\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   08/16/2011\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 08/16/2011 PAH  First Version \r\n--* 2017-08-11\tZD\t[usp_UpdateUniqueSeqIDsForAllTables] SP is added at the end of the process\r\n--**************************************************************************************\r\nCREATE PROCEDURE [ConEd].[usp_Upload_20_CorrectConEdAccountLevelServiceClassificationDiscrepancy]\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\t\r\n\t\r\n    DECLARE @CurrentInvoiceAccountGroup INT = 2, @UtilityCompanySeqid INT = 9, @BillingPeriod VARCHAR(6);\r\n\r\n--**************************************************************************************\r\n--Main Process\r\n--**************************************************************************************\r\n    \r\n--\r\n--\t\t\t1. Identify current period Account Level Service Classification Discrepancies\r\n--\r\n        INSERT  INTO Billing.AccountLevelServiceClassificationDiscrepancy\r\n                ( CurrentInvoiceAccountGroup ,\r\n                  UtilityTariffRateInformationSeqid ,\r\n                  BillingPeriod ,\r\n                  CurrentAccountNumber ,\r\n                  AccountSeqid ,\r\n                  UtilityServiceAddress ,\r\n                  UtilityCompanyShortDesc ,\r\n                  AgencyCodeOEC ,\r\n                  AgencyShortDesc ,\r\n                  OecFacilityNumber ,\r\n                  FacilityName ,\r\n                  Address1 ,\r\n                  BudgetRateClassDescription ,\r\n                  Description ,\r\n                  ShortDesc ,\r\n                  AccountStatus ,\r\n                  AccountStatusCodePeriod ,\r\n                  IsTimeOfDayAccount ,\r\n                  DeliveryTariffRate ,\r\n                  TariffCode ,\r\n                  UtilityCompanySeqid ,\r\n                  IsTOD ,\r\n                  AuthenticatedUserID ,\r\n                  Notes ,\r\n                  DateAdded ,\r\n                  LastUpdate\r\n                )\r\n--\r\n                SELECT DISTINCT\r\n                        Billing.Account.CurrentInvoiceAccountGroup ,\r\n                        Billing.Account.UtilityTariffRateInformationSeqid ,\r\n                        ConEd.UploadConEdisonAccount.BillingPeriod ,\r\n                        Billing.Account.CurrentAccountNumber ,\r\n                        Billing.Account.AccountSeqid ,\r\n                        Billing.Account.UtilityServiceAddress ,\r\n                        Billing.UtilityCompany.ShortDesc AS UtilityCompanyShortDesc ,\r\n                        Billing.AgencyDivision.AgencyCodeOEC ,\r\n                        Billing.AgencyDivision.AgencyShortDesc ,\r\n                        Billing.Facility.OecFacilityNumber ,\r\n                        Billing.Facility.FacilityName ,\r\n                        Billing.Facility.Address1 ,\r\n                        Billing.UtilityTariffRateInformation.BudgetRateClassDescription ,\r\n                        Billing.UtilityTariffRateInformation.Description ,\r\n                        Billing.UtilityTariffRateInformation.ShortDesc ,\r\n                        Billing.Account.AccountStatus ,\r\n                        Billing.Account.AccountStatusCodePeriod ,\r\n                        Billing.Account.IsTimeOfDayAccount ,\r\n                        Billing.UtilityTariffRateInformation.DeliveryTariffRate ,\r\n                        ConEd.UploadConEdisonAccount.TariffCode ,\r\n                        9 AS UtilityCompanySeqid ,\r\n                        'N' AS IsTOD ,\r\n                        1 ,\r\n                        NULL ,\r\n                        GETDATE() ,\r\n                        GETDATE()\r\n                FROM Billing.Account\r\n                        INNER JOIN ConEd.UploadConEdisonAccount ON Billing.Account.CurrentAccountNumber = ConEd.UploadConEdisonAccount.AccountNumber\r\n                        INNER JOIN Billing.UtilityTariffRateInformation ON Billing.UtilityTariffRateInformation.UtilityTariffRateInformationSeqid = Billing.Account.UtilityTariffRateInformationSeqid\r\n                                                              AND ConEd.UploadConEdisonAccount.TariffCode <> Billing.UtilityTariffRateInformation.DeliveryTariffRate\r\n                        INNER JOIN Billing.AgencyDivision ON Billing.Account.AgencyAccount = Billing.AgencyDivision.AgencyDivisionSeqid\r\n                        INNER JOIN Billing.Facility ON Billing.Account.FacilityAccount = Billing.Facility.FacilitySeqid\r\n                        INNER JOIN Billing.UtilityCompany ON Billing.Account.UtilityAccountProvider = Billing.UtilityCompany.UtilityCompanySeqid\r\n                                                             AND Billing.UtilityTariffRateInformation.UtilityCompanyTariff = Billing.UtilityCompany.UtilityCompanySeqid\r\n                                                             AND Billing.UtilityTariffRateInformation.UtilityCompanyTariff = Billing.UtilityCompany.UtilityCompanySeqid\r\n                WHERE   ( Billing.Account.CurrentInvoiceAccountGroup = 2 )\r\n                        AND ( Billing.Account.AccountStatus NOT IN ( 'AX' ) )\r\n--\r\n--\t\t\t2. Get the BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\r\n        SELECT TOP 1\r\n                @BillingPeriod = BillingPeriod\r\n        FROM ConEd.UploadConEdisonAccount\r\n--\r\n--\t\t\t3. Update account with new UtilityTariffRateInformation\r\n--\r\n        UPDATE  Billing.Account\r\n        SET     UtilityTariffRateInformationSeqid = Billing.UtilityTariffRateInformation.UtilityTariffRateInformationSeqid ,\r\n                IsTimeOfDayAccount = Billing.UtilityTariffRateInformation.IsTod ,\r\n                DeliveryTariffRate = Billing.UtilityTariffRateInformation.DeliveryTariffRate ,\r\n                CommodityTariffRate = Billing.UtilityTariffRateInformation.DeliveryTariffRate ,\r\n                AccountStatusCodePeriod = @BillingPeriod ,\r\n                FireAuditTrigger = 'Y' ,\r\n                Notes = 'Automated Service Classification update' ,\r\n                AuthenticatedUserID = 1 ,\r\n                LastUpdate = GETDATE()\r\n        FROM Billing.AccountLevelServiceClassificationDiscrepancy\r\n                INNER JOIN Billing.Account ON Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid = Billing.Account.AccountSeqid\r\n                INNER JOIN Billing.UtilityTariffRateInformation ON Billing.AccountLevelServiceClassificationDiscrepancy.TariffCode = Billing.UtilityTariffRateInformation.DeliveryTariffRate\r\n                                                              AND Billing.AccountLevelServiceClassificationDiscrepancy.UtilityCompanySeqid = Billing.UtilityTariffRateInformation.UtilityCompanyTariff\r\n                                                              AND Billing.AccountLevelServiceClassificationDiscrepancy.IsTOD = Billing.UtilityTariffRateInformation.IsTod\r\n        WHERE   ( Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod )\r\n                AND ( Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup )\r\n                AND ( Billing.AccountLevelServiceClassificationDiscrepancy.AccountIsUpdated = 'N' )\r\n--\r\n--\t\t\t4. Update AccountLevelServiceClassificationDiscrepancy with AccountIsUpdated = 'Y' for all of the accounts that were changed.\r\n--\r\n\t\r\n        UPDATE  Billing.AccountLevelServiceClassificationDiscrepancy\r\n        SET     AccountIsUpdated = 'Y' ,\r\n                DeliveryTariffRateExistsInEC3 = 'Y'\r\n        FROM Billing.AccountLevelServiceClassificationDiscrepancy\r\n                INNER JOIN Billing.Account ON Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid = Billing.Account.AccountSeqid\r\n                INNER JOIN Billing.UtilityTariffRateInformation ON Billing.AccountLevelServiceClassificationDiscrepancy.TariffCode = Billing.UtilityTariffRateInformation.DeliveryTariffRate\r\n                                                              AND Billing.AccountLevelServiceClassificationDiscrepancy.UtilityCompanySeqid = Billing.UtilityTariffRateInformation.UtilityCompanyTariff\r\n                                                              AND Billing.AccountLevelServiceClassificationDiscrepancy.IsTOD = Billing.UtilityTariffRateInformation.IsTod\r\n        WHERE   ( Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod )\r\n                AND ( Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup )\r\n                AND ( Billing.AccountLevelServiceClassificationDiscrepancy.AccountIsUpdated = 'N' )\r\n--\r\n--\t\t\t5. Drop temp table #MinFromDate if it exists and recreate it\r\n--\r\n        IF OBJECT_ID('tempdb..#MinFromDate') IS NOT NULL \r\n            DROP TABLE #MinFromDate\r\n--\r\n        SELECT  Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber ,\r\n                ConEd.UploadConEdisonAccount.AccountNumber ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid ,\r\n                MIN(ConEd.UploadConEdisonAccount.FromDate) AS DeliveryTariffEffectiveDate ,\r\n                AccountIsUpdated ,\r\n                DeliveryTariffRateExistsInEC3\r\n        INTO    #MinFromDate\r\n        FROM Billing.AccountLevelServiceClassificationDiscrepancy\r\n                INNER JOIN ConEd.UploadConEdisonAccount ON Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = ConEd.UploadConEdisonAccount.BillingPeriod\r\n                                                           AND Billing.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber = ConEd.UploadConEdisonAccount.AccountNumber\r\n        WHERE   ( Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod )\r\n                AND ( Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup )\r\n        GROUP BY Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber ,\r\n                ConEd.UploadConEdisonAccount.AccountNumber ,\r\n                Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid ,\r\n                AccountIsUpdated ,\r\n                DeliveryTariffRateExistsInEC3\r\n--\r\n--\t\t\t6. Update account with new Tariff Effective Date from upload data based upon the minimum from date of the billing\r\n--\r\n        UPDATE  Billing.Account\r\n        SET     DeliveryTariffEffectiveDate = [#MinFromDate].DeliveryTariffEffectiveDate ,\r\n                CommodityTariffEffectiveDate = [#MinFromDate].DeliveryTariffEffectiveDate\r\n        FROM [#MinFromDate]\r\n                INNER JOIN Billing.Account ON [#MinFromDate].AccountSeqid = Billing.Account.AccountSeqid\r\n        WHERE   ( [#MinFromDate].AccountIsUpdated = 'Y' )\r\n                AND ( [#MinFromDate].DeliveryTariffRateExistsInEC3 = 'Y' )\r\n\r\n        DROP TABLE #MinFromDate\r\n\t\t\r\n\t\tUPDATE a\r\n\t\tset\r\n\t\ta.UtilityTariffRateInformationSeqid = u.UtilityTariffRateInformationSeqid\r\n\t\tFROM Billing.Account AS a\r\n\t\tINNER JOIN Billing.UtilityTariffRateInformation AS u\r\n\t\tON a.UtilityAccountProvider = u.UtilityCompanyTariff\r\n\t\tAND a.IsTimeOfDayAccount = u.IsTod\r\n\t\tAND a.DeliveryTariffRate = u.DeliveryTariffRate\r\n\t\tWHERE a.UtilityTariffRateInformationSeqid IS NULL\r\n\t\tAND a.CurrentInvoiceAccountGroup = 2 AND a.UtilityAccountProvider = 9\r\n--\r\n--\t\t\t7. Common view.\r\n--\r\n        SELECT  *\r\n        FROM Common.uvw_AccountLevelServiceClassificationDiscrepancyCorrectionFromUploadData vw\r\n        WHERE   ( vw.BillingPeriod = @BillingPeriod )\r\n                AND ( vw.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup );\r\nEND;"
        }
      ]
    }
  ]
}