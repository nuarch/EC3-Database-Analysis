{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_AccountLevelBillingHistory",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_AccountLevelBillingHistory",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve and report billing history for a specific account over a defined billing period range. It logs the usage of the report, checks for the existence of billing data, and retrieves detailed billing adjustments for various types of accounts (electric, gas, manual billing). The procedure uses a Common Table Expression (CTE) to consolidate billing adjustments and outputs a detailed report of billing charges, adjustments, and usage metrics."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple conditional checks, dynamic SQL logic, and complex joins across several tables. It also uses a CTE to aggregate data from different billing adjustment tables, making it complex in terms of both logic and execution."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The email address of the user requesting the report, used for logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod1 AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The start of the billing period range."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod2 AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The end of the billing period range."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@CurrentAccountNumber AS VARCHAR(15)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The account number for which the billing history is requested."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS VARCHAR(1) OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter intended to return a status code indicating the success or failure of the procedure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure logs the usage of the report by calling another stored procedure "
                },
                {
                  "type": "text",
                  "text": "usp_AddReportUsageLog",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Existence Check",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It checks if billing history exists for the specified account and period range. If not, it returns an error message."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Period Adjustment",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the billing periods are not provided, it adjusts them to cover the entire range of available billing data for the account."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves the unique account sequence ID and related agency and facility information."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Aggregation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using a CTE, it aggregates billing adjustments from multiple sources (electric, gas, manual billing) and calculates various metrics such as billed charges, arrears, and usage."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The final SELECT statement outputs a detailed report of billing history, including revised and canceled charges, adjustments, and usage metrics, ordered by account number and billing period."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", which can improve performance by avoiding locks but may result in reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins and CTE",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of multiple joins and a CTE can be resource-intensive, especially if the underlying tables are large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing on the involved tables (e.g., "
                },
                {
                  "type": "text",
                  "text": "BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UniqueAccountSeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") is crucial to ensure efficient query execution."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The conditional logic for adjusting billing periods can add overhead if not optimized."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dirty Reads",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can lead to dirty reads, where uncommitted changes from other transactions are visible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks comprehensive error handling, which could lead to unhandled exceptions or incorrect status codes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the number of accounts and billing records grows, the complexity and resource demands of the procedure may impact performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not sanitize input parameters, which could pose a risk if the inputs are not properly validated before being passed to the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output Parameter Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@StatusCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " output parameter is defined but not utilized within the procedure, which may indicate incomplete implementation or oversight."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_AccountLevelBillingHistory]\n(\r\n    @EmailAddress AS VARCHAR(75)\r\n\t,@BillingPeriod1 AS VARCHAR(6)\r\n\t,@BillingPeriod2 AS VARCHAR(6)\r\n\t,@CurrentAccountNumber AS VARCHAR(15)\r\n\t,@StatusCode AS VARCHAR(1) OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @spname VARCHAR(100) = OBJECT_NAME(@@PROCID);\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t\t@ReportName = @spname,\r\n\t\t@StoredProcName = @spname,\r\n\t\t@RequestedBy = @EmailAddress,\r\n\t\t@prmPublishedBillingPeriod = NULL,\r\n\t\t@prmBillingPeriod = NULL,\r\n\t\t@prmAgency_ies = NULL,\r\n\t\t@prmFacilityNumber_s = NULL,\r\n\t\t@prmStartingBillingPeriod = @BillingPeriod1,\r\n\t\t@prmEndingBillingPeriod\t= @BillingPeriod2\r\n\r\n    DECLARE @UniqueAccountSeqId AS INT,  @AgencyCodeOEC AS VARCHAR(6), @OECFacilityNumber AS VARCHAR(7);\r\n\r\n\tIF NOT EXISTS(SELECT DISTINCT A.UniqueAccountSeqid FROM Billing.AccountBilling AS AB\r\n\t\t\tINNER JOIN Billing.Account AS A ON A.UniqueAccountSeqid = AB.UniqueAccountSeqId\r\n\t\tWHERE A.OriginalAccountNumber = @CurrentAccountNumber AND AB.BillingPeriod BETWEEN @BillingPeriod1 AND @BillingPeriod2)\r\n\tBEGIN\r\n\t\tSELECT 'Billing History for ' + @CurrentAccountNumber + ' does not exist for period between ' + @BillingPeriod1 + ' and ' + @BillingPeriod2 + '. Please verify.' AS Error;\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n   IF (@BillingPeriod1 IS NULL AND @BillingPeriod2 IS NULL)\r\n   BEGIN\r\n        SELECT @BillingPeriod1 = MIN(AB.BillingPeriod), @BillingPeriod2 = MAX(AB.BillingPeriod)\r\n        FROM Billing.Account AS A\r\n\t\t\tINNER JOIN Billing.AccountBilling AS AB ON AB.AccountSeqid = A.AccountSeqid\r\n        WHERE A.CurrentAccountNumber IN (@CurrentAccountNumber)\r\n            AND A.CurrentAccountNumber = A.OriginalAccountNumber\r\n        GROUP BY AB.AccountSeqid;\r\n\tEND;\r\n    ELSE\r\n\tBEGIN\r\n        IF (@BillingPeriod1 IS NOT NULL AND @BillingPeriod2 IS NULL)\r\n\t\tBEGIN\r\n            SELECT @BillingPeriod2 = BillingPeriod\r\n            FROM Billing.ApplicationTimeFrame\r\n            WHERE CurrentProcessingPeriod = 'Y';\r\n\t\tEND;\r\n\tEND;\r\n\r\n    SELECT @UniqueAccountSeqId = A.UniqueAccountSeqid\r\n\t\t,@AgencyCodeOEC = AD.AgencyCodeOEC\r\n\t\t,@OECFacilityNumber = F.OecFacilityNumber\r\n    FROM Billing.Account AS A\r\n        INNER JOIN Billing.Facility AS F ON F.FacilitySeqid = A.FacilityAccount\r\n        INNER JOIN Billing.AgencyDivision AS AD ON AD.AgencyDivisionSeqid = A.AgencyAccount\r\n    WHERE A.UniqueAccountSeqid IN (SELECT DISTINCT A.UniqueAccountSeqid FROM Billing.AccountBilling AS AB\r\n\t\t\tINNER JOIN Billing.Account AS A ON A.UniqueAccountSeqid = AB.UniqueAccountSeqId\r\n\t\tWHERE A.OriginalAccountNumber = @CurrentAccountNumber AND AB.BillingPeriod BETWEEN @BillingPeriod1 AND @BillingPeriod2)\r\n\t\tAND A.IsCurrentRecord = 'Y';\r\n\r\n   WITH CTE_AllAdjustedAccountsAndPeriods AS(\r\n\t\t---- All NYPA accounts adjusted\r\n\t\tSELECT a.CurrentAccountNumber\r\n\t\t\t,abae.BillingPeriod\r\n\t\t\t,abae.BillingPeriodRevision\r\n\t\t\t,AB.RevisedBilledAmount\r\n\t\t\t,abae.CanceledAmount AS CanceledBilledAmount\r\n\t\t\t,abae.TotalNetAdjustedAmount AS PaidAdjustmentAmount\r\n\t\t\t,abae.AccountEnergyUsage AS RevisedEnergyUsage\r\n\t\t\t,abae.CancelAccountEnergyUsage AS CanceledEnergyUsage\r\n\t\t\t,abae.AccountDemandUsage AS RevisedDemandUsage\r\n\t\t\t,abae.CancelAccountDemandUsage AS CanceledDemandUsage\r\n\t\t\t,AB.ManualPaymentOverrideAmount\r\n\t\t\t,CAST(COALESCE(ABE.ArrearAmount, 0.00) AS MONEY) AS AccountArrears\r\n\t\t\t,CAST(0 AS MONEY) AS TerminationBalance\r\n\t\t\t,CAST(NULL AS NUMERIC(6, 4)) AS SpannedMonthlyPercentage\r\n        FROM Billing.Account AS a\r\n            INNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCodeOEC, @OECFacilityNumber, @EmailAddress) AS utgonbah\r\n\t\t\t\tON utgonbah.FacilitySeqid = a.FacilityAccount AND utgonbah.AgencyDivisionSeqID = a.AgencyAccount\r\n            INNER JOIN Billing.AccountBillingAdjustmentElectric AS abae ON abae.UniqueAccountSeqId = a.UniqueAccountSeqid\r\n            LEFT JOIN Billing.AccountBilling AS AB ON AB.AccountBillingSeqid = abae.AdjustedAccountBill\r\n            LEFT JOIN Billing.AccountBillingElectric AS ABE ON ABE.AdjustedAccountElectric = abae.AccountBillingAdjustmentElectricSeqid\r\n        WHERE a.UniqueAccountSeqid = @UniqueAccountSeqId AND a.IsCurrentRecord = 'Y'\r\n\t\tUNION ALL\r\n\t\t---- All ConEd Gas accounts adjusted\r\n        SELECT a.CurrentAccountNumber\r\n            ,abag.BillingPeriod\r\n            ,abag.BillingPeriodRevision\r\n            ,abag.RevisedBilledAmount\r\n            ,abag.CanceledBilledAmount\r\n            ,abag.PaidAdjustmentAmount\r\n            ,abag.RevisedTherms AS RevisedEnergyUsage\r\n            ,abag.CanceledTherms AS CanceledEnergyUsage\r\n            ,CAST(0 AS INT) AS RevisedDemandUsage\r\n            ,CAST(0 AS NUMERIC(12, 2)) AS CanceledDemandUsage\r\n            ,AB.ManualPaymentOverrideAmount\r\n            ,CAST(0 AS MONEY) AS AccountArrears\r\n            ,CAST(0 AS MONEY) AS TerminationBalance\r\n            ,abag.SpannedMonthlyPercentage\r\n        FROM Billing.Account AS a INNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCodeOEC, @OECFacilityNumber, @EmailAddress) AS utgonbah\r\n\t\t\t\tON utgonbah.FacilitySeqid = a.FacilityAccount AND utgonbah.AgencyDivisionSeqID = a.AgencyAccount\r\n            INNER JOIN Billing.AccountBillingAdjustmentGas AS abag ON abag.UniqueAccountSeqId = a.UniqueAccountSeqid\r\n            LEFT JOIN Billing.AccountBilling AS AB ON AB.AccountBillingSeqid = abag.AccountBillingSeqid\r\n        WHERE a.UniqueAccountSeqid = @UniqueAccountSeqId AND a.IsCurrentRecord = 'Y'\r\n        UNION ALL\r\n\t\t---- All National Grid Gas accounts adjusted\r\n        SELECT a.CurrentAccountNumber\r\n            ,abacg.BillingPeriod\r\n            ,abacg.BillingPeriodRevision\r\n            ,abacg.RevisedBilledAmount\r\n            ,abacg.CancelBilledAmount\r\n            ,abacg.PaidAdjustmentAmount\r\n            ,abacg.RevisedTherms AS RevisedEnergyUsage\r\n            ,abacg.CancelTherms AS CanceledEnergyUsage\r\n            ,CAST(0 AS INT) AS RevisedDemandUsage\r\n            ,CAST(0 AS NUMERIC(12, 2)) AS CanceledDemandUsage\r\n            ,AB.ManualPaymentOverrideAmount\r\n            ,CAST(COALESCE(abcg.AccountArrears, 0.00) AS MONEY) AS AccountArrears\r\n            ,COALESCE(abcg.TerminationBalance, 0.00) AS TerminationBalance\r\n            ,CASE abacg.SpannedGasChargeAmount WHEN 0 THEN NULL ELSE ROUND(abacg.RevisedBilledAmount / CAST(abacg.SpannedGasChargeAmount AS NUMERIC(18, 4)), 4) END AS SpannedMonthlyPercentage\r\n        FROM Billing.Account AS a\r\n\t\t\tINNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCodeOEC, @OECFacilityNumber, @EmailAddress) AS utgonbah\r\n\t\t\t\tON utgonbah.FacilitySeqid = a.FacilityAccount AND utgonbah.AgencyDivisionSeqID = a.AgencyAccount\r\n            INNER JOIN Billing.AccountBillingAdjustmentCrisGas AS abacg ON abacg.UniqueAccountSeqId = a.UniqueAccountSeqid\r\n            LEFT JOIN Billing.AccountBilling AS AB ON AB.AccountBillingSeqid = abacg.AccountBillingSeqid\r\n            LEFT JOIN Billing.AccountBillingCrisGas AS abcg ON abcg.BillingPeriodRevision = abcg.BillingPeriodRevision\r\n\t\t\t\tAND abcg.AccountBillingAdjustmentCrisGasSeqid = abacg.AccountBillingAdjustmentCrisGasSeqid\r\n        WHERE a.UniqueAccountSeqid = @UniqueAccountSeqId AND a.IsCurrentRecord = 'Y'\r\n        UNION ALL\r\n\t\t---- All Manual Billing accounts adjusted\r\n        SELECT a.CurrentAccountNumber\r\n\t\t\t,abapb.BillingPeriod\r\n\t\t\t,abapb.BillingPeriodRevision\r\n\t\t\t,abapb.RevisedBilledAmount\r\n\t\t\t,abapb.CanceledBilledAmount\r\n\t\t\t,abapb.PaidAdjustmentAmount\r\n\t\t\t,abapb.RevisedEnergy AS RevisedEnergyUsage\r\n\t\t\t,abapb.CanceledEnergy AS CanceledEnergyUsage\r\n\t\t\t,abapb.RevisedDemand AS RevisedDemandUsage\r\n\t\t\t,abapb.CanceledDemand AS CanceledDemandUsage\r\n\t\t\t,AB.ManualPaymentOverrideAmount\r\n\t\t\t,CAST(0 AS MONEY) AS AccountArrears\r\n\t\t\t,CAST(0 AS MONEY) AS TerminationBalance\r\n\t\t\t,abapb.SpannedMonthlyPercentage\r\n        FROM Billing.Account AS a\r\n\t\t\tINNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCodeOEC, @OECFacilityNumber, @EmailAddress) AS utgonbah\r\n\t\t\t\tON utgonbah.FacilitySeqid = a.FacilityAccount AND utgonbah.AgencyDivisionSeqID = a.AgencyAccount\r\n            INNER JOIN Billing.AccountBillingAdjustmentPaperBill AS abapb ON abapb.UniqueAccountSeqId = a.UniqueAccountSeqid\r\n            LEFT JOIN Billing.AccountBilling AS AB ON AB.AccountBillingSeqid = abapb.AccountBillingSeqid\r\n        WHERE a.UniqueAccountSeqid = @UniqueAccountSeqId AND a.IsCurrentRecord = 'Y')\r\n\r\n    SELECT CurrentAccountNumber\r\n\t\t,CAST(CONCAT(dbo.FindMonthFromBillingPeriod(BillingPeriodRevision), NULL, LEFT(BillingPeriodRevision, 4)) AS VARCHAR(50)) AS BillingPeriodRevision\r\n\t\t,CAST(CONCAT(dbo.FindMonthFromBillingPeriod(BillingPeriod), NULL, LEFT(BillingPeriod, 4)) AS VARCHAR(50)) AS BillingPeriod\r\n\t\t,(RevisedBilledAmount - AccountArrears) AS BilledCharges\r\n\t\t,CASE AccountArrears WHEN 0.00 THEN NULL ELSE AccountArrears END AS AccountArrears\r\n\t\t,CASE BillingPeriodRevision WHEN BillingPeriod THEN RevisedBilledAmount ELSE NULL END AS CurrentCharges\r\n\t\t,CASE BillingPeriodRevision WHEN BillingPeriod THEN NULL ELSE RevisedBilledAmount END AS RevisedCharges\r\n\t\t,CASE WHEN SpannedMonthlyPercentage IS NULL THEN NULL\r\n\t\t\tWHEN BillingPeriodRevision = BillingPeriod THEN NULL\r\n\t\t\t\tELSE CONCAT(CAST(SpannedMonthlyPercentage * 100 AS NUMERIC(6, 2)), '%') END AS [Spanned Allocation %]\r\n\t\t,CASE BillingPeriodRevision WHEN BillingPeriod THEN NULL ELSE -CanceledBilledAmount END AS CanceledCharges\r\n\t\t,CASE BillingPeriodRevision WHEN BillingPeriod THEN NULL ELSE RevisedBilledAmount + CanceledBilledAmount END AS DeltaCharges\r\n\t\t,CASE BillingPeriodRevision WHEN BillingPeriod THEN PaidAdjustmentAmount ELSE NULL END AS PaidAdjustmentAmount\r\n\t\t,CASE BillingPeriodRevision WHEN BillingPeriod THEN ManualPaymentOverrideAmount ELSE NULL END AS ManualPaymentOverrideAmount\r\n\t\t,TerminationBalance AS TerminationBalance\r\n\t\t,RevisedEnergyUsage AS RevisedUsage\r\n\t\t,CASE WHEN BillingPeriod <> BillingPeriodRevision THEN -CanceledEnergyUsage ELSE NULL END AS CanceledUsage\r\n\t\t,CASE BillingPeriodRevision WHEN BillingPeriod THEN NULL ELSE CAST((RevisedEnergyUsage + CanceledEnergyUsage) AS INT) END AS DeltaUsage\r\n\t\t,RevisedDemandUsage AS RevisedDemand\r\n\t\t,CASE BillingPeriodRevision WHEN BillingPeriod THEN NULL ELSE -CanceledDemandUsage END AS CanceledDemand\r\n\t\t,CASE BillingPeriodRevision WHEN BillingPeriod THEN NULL ELSE (RevisedDemandUsage + CanceledDemandUsage) END AS DeltaDemand\r\n    FROM CTE_AllAdjustedAccountsAndPeriods\r\n    WHERE BillingPeriod BETWEEN @BillingPeriod1 AND @BillingPeriod2\r\n    ORDER BY CurrentAccountNumber, BillingPeriod DESC, BillingPeriodRevision DESC;\r\nEND;"
        }
      ]
    }
  ]
}