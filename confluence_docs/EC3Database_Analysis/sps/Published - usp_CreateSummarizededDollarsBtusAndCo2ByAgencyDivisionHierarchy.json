{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Published",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CreateSummarizededDollarsBtusAndCo2ByAgencyDivisionHierarchy",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CreateSummarizededDollarsBtusAndCo2ByAgencyDivisionHierarchy",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to generate a summarized report of energy usage, demand, billing amounts, CO2 emissions, and BTU consumption by agency division hierarchy for a specified billing period. It processes data from the "
        },
        {
          "type": "text",
          "text": "Published.AccountLevelSummaryForDollarsBtusAndCo2",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table and inserts the summarized results back into the same table. The procedure uses a cursor to iterate over active agency divisions and aggregates data for each agency."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves several complex operations, including the use of cursors, temporary tables, and hierarchical queries. The complexity arises from the need to handle hierarchical data structures and perform aggregations across multiple dimensions."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " (varchar(6)): Represents the billing period for which the summary is to be generated. It is used to filter the data in the aggregation process."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " (nvarchar(256)): Used in a function call to retrieve agency children based on the agency code. This parameter allows for dynamic retrieval of agency hierarchy data."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Table Creation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A temporary table "
                },
                {
                  "type": "text",
                  "text": "#SummedByAgencyDivision",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is created to store intermediate results of the aggregation process."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Declaration",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A cursor "
                },
                {
                  "type": "text",
                  "text": "AgencyCodeOECHierarchy",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is declared to iterate over active agency divisions. It selects agency codes and names from the "
                },
                {
                  "type": "text",
                  "text": "Billing.AgencyDivision",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table, filtering out inactive divisions and those without active children."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The cursor iterates over each agency division:"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each agency, it inserts aggregated data into the temporary table by joining with the "
                        },
                        {
                          "type": "text",
                          "text": "Published.AccountLevelSummaryForDollarsBtusAndCo2",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table and a function that retrieves child agencies."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The aggregation includes summing up energy usage, demand, billing amounts, CO2 emissions, and BTU consumption."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After processing all agencies, the summarized data from the temporary table is inserted back into the "
                },
                {
                  "type": "text",
                  "text": "Published.AccountLevelSummaryForDollarsBtusAndCo2",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cleanup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The temporary table is dropped, and the cursor is closed and deallocated."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Cursors can be slow, especially with large datasets, as they process rows one at a time. Consider replacing the cursor with a set-based operation if possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Table",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a temporary table can impact performance due to disk I/O operations. Ensure that the tempdb has sufficient resources."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved, especially those in joins and where clauses, are properly indexed to improve query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function "
                },
                {
                  "type": "text",
                  "text": "uftn_TableGetAgencyChildrenByAgencyCodeOEC",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is called for each agency, which could be a performance bottleneck if it involves complex logic or large datasets."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of temporary tables and cursors may lead to concurrency issues if multiple instances of the procedure are executed simultaneously."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the dataset grows, the performance of the cursor and temporary table operations may degrade."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete data processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the logic for determining active/inactive agencies and their hierarchies is accurate to prevent incorrect data aggregation."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the "
                },
                {
                  "type": "text",
                  "text": "@EmailAddress",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " parameter is used securely within the function call. Ensure that it does not expose sensitive information or lead to SQL injection vulnerabilities."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--******************************************************************************************************\n--* Description:\t\r\n--*\t\t\t\t\t\r\n--* AUTHOR:       Peter Heller\r\n--* Created On:   XXXXXX\r\n--******************************************************************************************************\r\n--* Date       Tech Description of Change\r\n--* ---------- ---\t------------------------------------------------------------------------------------\r\n--* Unknown\t   PAH  First Version  \r\n--* 04/03/2016 MB\tUpdate: Added @EmailAddress as a parameters, the stored proc was using a Peter's hardcoded email address\r\n--* 05/03/2017 zd-mb\tupdate: replaced existing hardcoded table with a query listing agencies for summary\r\n--* 10/20/2017 zd\tupdate: Added filter to take out parents whose children are inactive to \"agencies for summary\" list\r\n--******************************************************************************************************\r\n\r\n\r\n\r\nCREATE PROCEDURE [Published].[usp_CreateSummarizededDollarsBtusAndCo2ByAgencyDivisionHierarchy] @PublishedBillingPeriod varchar(6),@EmailAddress nvarchar(256)\r\nas\r\nbegin\r\n-- create temp table to hold the query results from cursor\r\n\r\nCREATE TABLE #SummedByAgencyDivision(\r\n\t[CitywideAgencyOrFacility] [varchar](2) NOT NULL,\r\n\t[PublishedBillingPeriod] varchar(6) NOT NULL,\r\n\t[Month] [varchar](20) NULL,\r\n\t[FiscalYear] varchar(4) NOT NULL,\r\n\t[PublishedPeriodCurrentFiscalYear] varchar(4) NULL,\r\n\t[PublishedPeriodPriorFiscalYear] varchar(4) NULL,\r\n\t[CurrentFiscalYear] varchar(4) NULL,\r\n\t[PriorFiscalYear] varchar(4) NULL,\r\n\t[BillingPeriod] varchar(6) NOT NULL,\r\n\t[SummaryORDetail] [char](1) NULL,\r\n\t[AgencyCodeOEC] [varchar](6) NULL,\r\n\t[AgencyName] [varchar](75) NULL,\r\n\t[EnergyType] VARCHAR(3) NULL,\r\n\t[EnergyUsage] BigInt NULL,\r\n\t[DemandUsage] BigInt NULL,\r\n\t[TotalBilledAmount] MONEY NULL,\r\n\t[TotalCO2] [numeric](38, 6) NULL,\r\n\t[TotalBTU] [numeric](38, 6) NULL,\r\n\t[PublishedBillingPeriodRunningTotalCO2] [numeric](38, 6) NULL,\r\n\t[YtdRunningTotalCO2] [numeric](38, 6) NULL\r\n) ON [PRIMARY]\r\n\r\n-- construct the results agency by agency\r\nSET NOCOUNT ON\r\n\r\nDECLARE  @AgencyCodeOEC varchar(6), @AgencyName varchar(75)\r\n--\r\n--set @PublishedBillingPeriod = '201009'\r\n--\r\nDECLARE AgencyCodeOECHierarchy CURSOR FOR \r\n\r\nSELECT  AgencyCodeOEC, AgencyName\r\nFROM Billing.AgencyDivision\r\nWHERE   Inactive = 'N'\r\n        AND AgencyDivisionSeqid NOT IN (\r\n        SELECT  A.AgencyDivisionSeqid\r\n        FROM Billing.AgencyDivision AS A\r\n                LEFT JOIN Billing.AgencyDivision AS B ON A.AgencyDivisionHierarchy = B.AgencyDivisionHierarchy.GetAncestor(1)\r\n        WHERE   B.AgencyDivisionHierarchy IS NULL )\r\nAND AgencyCodeOEC IN\r\n-- Active parents    \r\n(SELECT  A.AgencyCodeOEC \r\nFROM Billing.AgencyDivision AS A\r\n        INNER JOIN Billing.AgencyDivision AS B ON A.AgencyDivisionHierarchy = B.AgencyDivisionHierarchy.GetAncestor(1)\r\n\t\tWHERE B.Inactive = 'N')\r\nORDER BY AgencyDivisionHierarchy.GetLevel()  DESC\r\n\r\n\r\n\r\n\r\nOPEN AgencyCodeOECHierarchy\r\n\r\nFETCH NEXT FROM AgencyCodeOECHierarchy into @AgencyCodeOEC,@AgencyName\r\n\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN\r\n\tINSERT INTO #SummedByAgencyDivision\r\n\tSELECT Published.AccountLevelSummaryForDollarsBtusAndCo2.CitywideAgencyOrFacility, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.PublishedBillingPeriod, Published.AccountLevelSummaryForDollarsBtusAndCo2.Month, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.FiscalYear, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.PublishedPeriodCurrentFiscalYear, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.PublishedPeriodPriorFiscalYear, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.CurrentFiscalYear, Published.AccountLevelSummaryForDollarsBtusAndCo2.PriorFiscalYear, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.BillingPeriod,'S' as SummaryORDetail, \r\n\t\t\t\t\t\t  @AgencyCodeOEC AS AgencyCodeOEC, \r\n\t\t\t\t\t\t  @AgencyName AS AgencyName, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.EnergyType, \r\n\t\t\t\t\t\t  SUM(Published.AccountLevelSummaryForDollarsBtusAndCo2.EnergyUsage) AS EnergyUsage, \r\n\t\t\t\t\t\t  SUM(Published.AccountLevelSummaryForDollarsBtusAndCo2.DemandUsage) AS DemandUsage, \r\n\t\t\t\t\t\t  SUM(Published.AccountLevelSummaryForDollarsBtusAndCo2.TotalBilledAmount) AS TotalBilledAmount, \r\n\t\t\t\t\t\t  SUM(Published.AccountLevelSummaryForDollarsBtusAndCo2.TotalCO2) AS TotalCO2, \r\n\t\t\t\t\t\t  SUM(Published.AccountLevelSummaryForDollarsBtusAndCo2.TotalBTU) AS TotalBTU, \r\n\t\t\t\t\t\t  SUM(Published.AccountLevelSummaryForDollarsBtusAndCo2.PublishedBillingPeriodRunningTotalCO2) AS PublishedBillingPeriodRunningTotalCO2, \r\n\t\t\t\t\t\t  SUM(Published.AccountLevelSummaryForDollarsBtusAndCo2.YtdRunningTotalCO2) AS YtdRunningTotalCO2\r\n\t\t\t\t\t\t \r\n\tFROM Published.AccountLevelSummaryForDollarsBtusAndCo2 INNER JOIN\r\n\t\t\t\t\t\t  Billing.uftn_TableGetAgencyChildrenByAgencyCodeOEC(@AgencyCodeOEC, @EmailAddress ) AS uftn_TableGetAgencyChildrenByAgencyCodeOEC_1 ON \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.AgencyCodeOEC = uftn_TableGetAgencyChildrenByAgencyCodeOEC_1.AgencyCodeOEC\r\n\tGROUP BY Published.AccountLevelSummaryForDollarsBtusAndCo2.CitywideAgencyOrFacility, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.PublishedBillingPeriod, Published.AccountLevelSummaryForDollarsBtusAndCo2.Month, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.FiscalYear, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.PublishedPeriodCurrentFiscalYear, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.PublishedPeriodPriorFiscalYear, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.CurrentFiscalYear, Published.AccountLevelSummaryForDollarsBtusAndCo2.PriorFiscalYear, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.BillingPeriod, Published.AccountLevelSummaryForDollarsBtusAndCo2.SummaryORDetail, \r\n\t\t\t\t\t\t  --AgencyCodeOEC, \r\n\t\t\t\t\t\t  --AgencyName, \r\n\t\t\t\t\t\t  Published.AccountLevelSummaryForDollarsBtusAndCo2.EnergyType\r\n\tHAVING (Published.AccountLevelSummaryForDollarsBtusAndCo2.CitywideAgencyOrFacility LIKE 'A%') AND \r\n\t\t\t\t\t\t  (Published.AccountLevelSummaryForDollarsBtusAndCo2.PublishedBillingPeriod = @PublishedBillingPeriod)\t\r\n\t\t\t\t\t\t  --AND CitywideAgencyOrFacility = 'AE'\r\n\t\t\t\t\t      --AND (Published.AccountLevelSummaryForDollarsBtusAndCo2.BillingPeriod = '201009')\r\n\t\t\t\t\t\t  \r\n\t\t\t\t\t\t  \r\n\tFETCH NEXT FROM AgencyCodeOECHierarchy into @AgencyCodeOEC,@AgencyName\r\nEND \r\nCLOSE AgencyCodeOECHierarchy\r\nDEALLOCATE AgencyCodeOECHierarchy      \r\n\r\n\r\n\r\n\r\n-- return results\r\nINSERT INTO Published.AccountLevelSummaryForDollarsBtusAndCo2\r\n                      ( CitywideAgencyOrFacility, PublishedBillingPeriod, Month, FiscalYear, PublishedPeriodCurrentFiscalYear, PublishedPeriodPriorFiscalYear, \r\n                      CurrentFiscalYear, PriorFiscalYear, BillingPeriod, SummaryORDetail, AgencyCodeOEC, AgencyName, EnergyType, EnergyUsage, DemandUsage, \r\n                      TotalBilledAmount, TotalCO2, TotalBTU, PublishedBillingPeriodRunningTotalCO2, YtdRunningTotalCO2,\r\n                      AuthenticatedUserID)\r\nSELECT CitywideAgencyOrFacility, PublishedBillingPeriod, Month, FiscalYear, PublishedPeriodCurrentFiscalYear, PublishedPeriodPriorFiscalYear, \r\n                      CurrentFiscalYear, PriorFiscalYear, BillingPeriod, SummaryORDetail, AgencyCodeOEC, AgencyName, EnergyType, EnergyUsage, DemandUsage, \r\n                      TotalBilledAmount, TotalCO2, TotalBTU, PublishedBillingPeriodRunningTotalCO2, YtdRunningTotalCO2,1\r\nFROM [#SummedByAgencyDivision]\r\n-- clean up\r\nDROP TABLE #SummedByAgencyDivision\r\nend"
        }
      ]
    }
  ]
}