{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Archive_usp_ParseSpannedBilledUploadConEdisonMeterInfo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "Archive_usp_ParseSpannedBilledUploadConEdisonMeterInfo",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and archive spanned billing data for Con Edison gas meters. It handles cases where billing periods span multiple months, requiring the data to be split and processed accordingly. The procedure calculates various metrics such as therms and CCF (hundred cubic feet of gas) for each billing period, adjusts for meter rollovers, and inserts the processed data into a summary table."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This procedure is complex due to several factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple calculations and adjustments for each billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a cursor to iterate over potentially large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves several custom functions and calculations to determine billing metrics."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It handles edge cases like meter rollovers and spanned billing periods."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status int output",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is intended to return the status of the procedure execution. However, it is not used within the procedure, which might be an oversight."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring a series of variables to hold data for processing each billing record."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Setup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A cursor named "
                },
                {
                  "type": "text",
                  "text": "SpannedGasBillCursor",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is declared to iterate over records in the "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonMeterTempSummarySpanned",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table where "
                },
                {
                  "type": "text",
                  "text": "DeltaNumberOfPeriods",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is greater than 1, indicating spanned billing periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval and Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each record, it retrieves necessary data such as account number, meter readings, and billing periods."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It calculates the total gas spanned billed percentage using a custom function."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It determines the number of periods minus one for pro-rating purposes."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It initializes counters and calculates therms using the CCF and therm factor."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Meter Rollover Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure checks if the meter has rolled over and adjusts readings accordingly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Loop Through Billing Periods",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each period, it calculates the monthly percentage, CCF, and therms."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It adjusts the meter readings for rollovers."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It determines the projected \"ToDate\" for the billing period."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It constructs a custom note explaining the parsing and original data."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The processed data is inserted into the "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonMeterSummary",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Period Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After the loop, it processes the last period's data, ensuring no rounding errors, and inserts the final data into the summary table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Cleanup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The cursor is closed and deallocated."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance issues, especially with large datasets, as it processes rows one at a time."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies heavily on custom functions, which can add overhead if not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Calculations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The numerous calculations and conditional logic can impact performance, particularly if the dataset is large."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Unused Parameter",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@Status",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " output parameter is not utilized, which could lead to confusion or errors in calling applications expecting a status update."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Overhead",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can be inefficient and may lead to performance bottlenecks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": There is no explicit error handling within the procedure, which could lead to unhandled exceptions and data integrity issues."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Rollover Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The logic for handling meter rollovers is complex and may not cover all edge cases, potentially leading to incorrect data processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dependency on External Functions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on several custom functions, which are not visible here. Any issues or inefficiencies in these functions could affect the procedure's performance and accuracy."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [ConEd].[Archive_usp_ParseSpannedBilledUploadConEdisonMeterInfo] (@Status int output)\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\t\r\n\tDECLARE @UploadConEdisonMeterTempSummarySpannedSeqid AS dbo.seqid, @Notes AS dbo.notes\r\n\t\t,@AccountNumber AS dbo.acctnum, @TariffCode AS dbo.tariff, @OriginalMeterNumber AS meternumber \r\n\t\t,@GasRateCode AS GasRateCode, @MeterFromReading AS MeterReadingNumber7\r\n\t\t,@MeterToReading AS MeterReadingNumber7, @MeterConstant AS MeterConstantMultiplier \r\n\t\t,@ReadingCode AS ReadingCode, @NumberOfDials AS MeterDials, @NumberOfPeriodsMinusOne AS dbo.Accumulator\r\n\t\t,@DeltaNumberOfPeriods AS dbo.Accumulator, @BillingPeriod AS dbo.yyyymm, @FirstPeriodCanceled AS dbo.yyyymm\r\n\t\t,@ThermFactor AS dbo.ThermsFactor, @BillingPeriodRevision AS dbo.yyyymm, @FromDate AS dbo.yyyymmdd \r\n\t\t,@ToDate AS dbo.yyyymmdd, @CalculatedBillingPeriodRevision AS dbo.yyyymm, @CalculatedFromDate AS dbo.yyyymmdd \r\n\t\t,@CalculatedToDate AS dbo.yyyymmdd, @Therms AS dbo.EnergyUnit, @CCF AS dbo.EnergyUnit \r\n\t\t,@CCFAverage AS dbo.EnergyUnit, @SumAverageCCF AS dbo.EnergyUnit, @idx AS INT\r\n\t\t,@MeterRolloverAdjustmentFactor AS INT, @NumberOfDialsAdjustmentFactor AS INT, @MeterHasRolledOver AS BIT\r\n\t\t,@ThermsMonthlyLastPeriod AS dbo.EnergyUnit, @CCFMonthlyLastPeriod AS dbo.EnergyUnit\r\n\t\t,@CalculatedMeterFromReading AS INT, @CalculatedMeterToReading AS INT, @CalculatedMeterConstant AS DECIMAL(7, 1)\r\n\t\t,@ConEdUtilityCode AS dbo.seqid = 9, @ApplyMonthlyPercentage AS dbo.DiscountPercentage\r\n\t\t,@ThermsMonthlySum AS dbo.EnergyUnit, @ThermsMonthly AS dbo.EnergyUnit, @CCFMonthly AS dbo.EnergyUnit \r\n\t\t,@CCFMonthlySum AS dbo.EnergyUnit, @TotalGasSpannedBilledPercentage AS dbo.DiscountPercentage\r\n\t\t,@BillingCycle AS dbo.MonthlyBillingCycle = 'M', @BillingDate AS dbo.yyyymmdd;\r\n\r\n\tSELECT TOP (1) @BillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonMeter;\r\n\r\n\tDECLARE SpannedGasBillCursor CURSOR FOR\r\n\tSELECT UploadConEdisonMeterTempSummarySpannedSeqid FROM ConEd.UploadConEdisonMeterTempSummarySpanned \r\n\tWHERE DeltaNumberOfPeriods > 1\r\n\tOPEN SpannedGasBillCursor;\r\n\tFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonMeterTempSummarySpannedSeqid\r\n\tWHILE @@FETCH_STATUS = 0\r\n\tBEGIN\r\n\t\tSELECT @AccountNumber = AccountNumber,\r\n\t\t\t@OriginalMeterNumber = MeterNumber,\r\n\t\t\t@MeterFromReading = ISNULL(FromReading, 0),\r\n\t\t\t@MeterToReading = ISNULL(ToReading, 0),\r\n\t\t\t@MeterConstant = ISNULL(MeterConstant, 1),\r\n\t\t\t@ReadingCode = ReadingCode,\r\n\t\t\t@NumberOfDials = Dials,\r\n\t\t\t@DeltaNumberOfPeriods = DeltaNumberOfPeriods, \r\n\t\t\t@BillingPeriodRevision = BillingPeriodRevision,\r\n\t\t\t@FirstPeriodCanceled = FirstPeriodCanceled, \r\n\t\t\t@FromDate = FromDate,\r\n\t\t\t@ToDate = ToDate, \r\n\t\t\t@CCF = CCF, \r\n\t\t\t@ThermFactor = ThermFactor,\r\n\t\t\t@BillingPeriod = BillingPeriod\r\n\t\tFROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n\t\tWHERE UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid;\r\n\t\r\n\t--\tAggregate the average City wide monthly gas usage percentage for the spanned row billing periods \r\n\tSELECT @TotalGasSpannedBilledPercentage = dbo.CalculateTotalGasSpannedBilledPercentage(@BillingCycle\r\n\t\t,@DeltaNumberOfPeriods, @FirstPeriodCanceled, @BillingPeriodRevision);\r\n\t\r\n\t--\tDetermine the number of periods minus 1 to pro-rate the money and usage.  The last period will derive the money and usage\r\n\t--\tby row totals - (the n-1 aggregates of money and usage)\r\n\tSET @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods-1;\r\n\t\r\n\t--\tInitialize the counters for the n-1 parses\r\n\tSELECT @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n\t\t,@CalculatedFromDate = @FromDate, @CalculatedToDate = @ToDate, @idx = 0\r\n\t\t,@ThermsMonthlySum = 0, @CCFMonthlySum = 0\r\n\t\t,@CalculatedMeterFromReading = CAST(@MeterFromReading AS INT)\r\n\t\t,@CalculatedMeterToReading = CAST(@MeterToReading AS INT)\r\n\t\t,@CalculatedMeterConstant = CAST(@MeterConstant AS DECIMAL(7, 1));\r\n\r\n\t--\r\n\tSELECT @ThermFactor = dbo.DetermineConEdisonGetThermFactorFromAccountTable(@AccountNumber, @BillingPeriodRevision)\r\n\t\t,@GasRateCode = dbo.DetermineConEdisonGetGasTariffRateFromAccountTable(@AccountNumber, @BillingPeriodRevision)\r\n\t\t,@BillingDate = dbo.ConvertDatetimeToYYYYMMDD(dbo.DetermineConEdisonGetPostingDateFromAccountTable(@AccountNumber, @BillingPeriodRevision));\r\n\t\r\n\tSET @Therms = Round(@CCF * @ThermFactor, 0);\r\n\t\r\n\tset @NumberOfDialsAdjustmentFactor = CASE \r\n\t\t\t\t\t\t\t\t\t\t\t-- Standard Gas meter has from 3 to 6 dials.  \r\n\t\t\t\t\t\t\t\t\t\t\twhen 2 < @NumberOfDials and @NumberOfDials < 7 \r\n\t\t\t\t\t\t\t\t\t\t\tthen Cast (@NumberOfDials AS int)\r\n\t\t\t\t\t\t\t\t\t\t\t-- If there are no dials reported or the number of dials is outside the \r\n\t\t\t\t\t\t\t\t\t\t\t-- range of the standard number of dials (3 to 6 dials).  The sum of the \r\n\t\t\t\t\t\t\t\t\t\t\t-- MeterFromReading + total CCF will derive a number that is equal to the \r\n\t\t\t\t\t\t\t\t\t\t\t-- number of dials - 1 raised to the power of 10 plus the MeterToReading.\r\n\t\t\t\t\t\t\t\t\t\t\telse len(CAST(@CCF+@CalculatedMeterFromReading AS VARCHAR(7)))-1\r\n\t\t\t\t\t\t\t\t\t\t END;\r\n\tSELECT @MeterHasRolledOver = 0, @MeterRolloverAdjustmentFactor = POWER(10, @NumberOfDialsAdjustmentFactor);\r\n\r\n\tIF (@CalculatedMeterToReading < @CalculatedMeterFromReading\r\n\t\tOR POWER(10, @NumberOfDialsAdjustmentFactor) < = @CCF)\r\n\tBEGIN\r\n\t\tSET @MeterHasRolledOver = 1;\r\n\tEND;\r\n\t\r\n\tWHILE(@NumberOfPeriodsMinusOne > @idx)\r\n\tBEGIN\r\n\t\t-- The @ApplyMonthlyPercentage holds the weigthed average for the particular month\r\n\t\tselect @ApplyMonthlyPercentage = dbo.[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t\t\t\r\n\t\t-- Apply the Monthly Percentage to the meter reading and derive the CCF, Therms  and accumulate the weigthed average units.\r\n\t\tset @CCFMonthly = ROUND(@CCF * @ApplyMonthlyPercentage,0)\r\n\t\tset @CCFMonthlySum = @CCFMonthlySum + @CCFMonthly\r\n\t\tset @ThermsMonthly = ROUND(@Therms * @ApplyMonthlyPercentage,0)\r\n\t\tset @ThermsMonthlySum = @ThermsMonthlySum + @ThermsMonthly\r\n\t\t\t\r\n\t\t--\tThe CCF, Therms and Meter To Reading are derived.  The CCF\r\n\t\tset @CalculatedMeterToReading = @CalculatedMeterFromReading + round(@CCFMonthly/@CalculatedMeterConstant,0)\r\n\t\tset @CalculatedMeterToReading = case when @MeterHasRolledOver = 0 then @CalculatedMeterToReading \r\n\t\t\t\t\t\t\t\t\t\t\t\telse \r\n\t\t\t\t\t\t\t\t\t\t\t\t-- \r\n\t\t\t\t\t\t\t\t\t\t\t\t-- The spanned meter reading has rolled over.  If the MeterToReading is less than @NumberOfDialsAdjustmentFactor then \r\n\t\t\t\t\t\t\t\t\t\t\t\t-- the derived MeterToReading remains unadjusted. When the sum of the @CalculatedMeterFromReading + @CCFMonthly is greater\r\n\t\t\t\t\t\t\t\t\t\t\t\t-- than the @NumberOfDialsAdjustmentFactor is subtracted to make the adjustment for the rollover meter reset.\r\n\t\t\t\t\t\t\t\t\t\t\t\t-- \r\n\t\t\t\t\t\t\t\t\t\t\t\tcase when @CalculatedMeterToReading < @MeterRolloverAdjustmentFactor then @CalculatedMeterToReading\r\n\t\t\t\t\t\t\t\t\t\t\t\t\telse @CalculatedMeterToReading - @MeterRolloverAdjustmentFactor \r\n\t\t\t\t\t\t\t\t\t\t\t\tend\r\n\t\t\t\t\t\t\t\t\t\tend\r\n\t\t--\r\n\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" AS the derived \"Todate\" for the account.\r\n\t\t--\r\n\t\tselect @CalculatedToDate = dbo.[DetermineConEdisonBillingPeriodProjectedToDate](@CalculatedBillingPeriodRevision,@TariffCode,@ConEdUtilityCode)\r\n\t\t--\r\n\t\tprint @AccountNumber+' '+@BillingPeriodRevision+' '+@FromDate+' '+@ToDate\r\n\t\t--\r\n\t\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t\t--\tIt will note in EC3 that the transaction was derived.\r\n\t\t--\r\n\t\tselect @Notes = 'CalcTherm '+CAST(@Therms AS VARCHAR(10))+' = '+CAST(@ThermFactor AS VARCHAR(6))+' * '+CAST(@CCF AS VARCHAR(10))+\r\n\t\t' for '+CAST(@DeltaNumberOfPeriods AS VARCHAR(6))+' periods, First: '+@FirstPeriodCanceled +' ( '+@MeterFromReading+') Last: '+ \r\n\t\t@BillingPeriodRevision +' ( '+@MeterToReading+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+CAST(@ApplyMonthlyPercentage AS VARCHAR(10))+\r\n\t\t' - Total %: '+CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t\t--\r\n\t\t--\tINSERT the data into the table \"ConEd.UploadConEdisonAccountSummary\"\r\n\t\t--\r\n\t\tINSERT INTO ConEd.UploadConEdisonMeterSummary (\r\n\t\t\tAccountUtilityCompanySeqid,\r\n\t\t\tOriginalAccountNumber,\r\n\t\t\tOriginalMeterNumber,\r\n\t\t\tNumberOfTransactions, \r\n\t\t\tNumberOfRebillTransactions,\r\n\t\t\tNumberOfCancelTransactions,\r\n\t\t\tBillingPeriod,\r\n\t\t\tBillingPeriodRevision,\r\n\t\t\tFirstCancelPeriod,\r\n\t\t\tBillingAction,\r\n\t\t\tInitialCancelFromDate,\r\n\t\t\tCurrentBillingToDate,\r\n\t\t\tGasRateCode,\r\n\t\t\tFromDate,\r\n\t\t\tToDate,\r\n\t\t\tMeterFromReading,\r\n\t\t\tMeterToReading,\r\n\t\t\tCcf,\r\n\t\t\tTherms,\r\n\t\t\tThermsFactor,\r\n\t\t\tMeterConstant,\r\n\t\t\tTotalBillingDaysRebilled,\r\n\t\t\tNumberOfBillingPeriods,\r\n\t\t\tBillingDays,\r\n\t\t\tBillingDate,\r\n\t\t\tReadingCode,\r\n\t\t\tNumberOfDials,\r\n\t\t\tMeterType,\r\n\t\t\tProcessedInTheCurrentPeriod,\r\n\t\t\tProcessEffectiveDate,\r\n\t\t\tInitialPostingDate,\r\n\t\t\tAuthenticatedUserID,\r\n\t\t\tNotes,\r\n\t\t\tDerivedFromSpannedBill,\r\n\t\t\tSpannedBillingPeriodRevision,\r\n\t\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\t\tSpannedCCF,\r\n\t\t\tSpannedThermFactor,\r\n\t\t\tSpannedTherm,\r\n\t\t\tSpannedMonthlyPercentage,\r\n\t\t\tSpannedTotalPercentage,\r\n\t\t\tEstimatedOrActualBilling,\r\n\t\t\tFacilityName,\r\n\t\t\tServiceAddress)\r\n\t\tSELECT @ConEdUtilityCode,\r\n\t\t\t@AccountNumber,\r\n\t\t\t@OriginalMeterNumber, \r\n\t\t\t1,-- NumberOfTransactions, \r\n\t\t\t1,-- NumberOfRebillTransactions,\r\n\t\t\t0,-- NumberOfCancelTransactions,\r\n\t\t\t@BillingPeriod, \r\n\t\t\t@CalculatedBillingPeriodRevision,\r\n\t\t\t@CalculatedBillingPeriodRevision,\r\n\t\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END,-- BillingAction, \r\n\t\t\t@CalculatedFromDate,\r\n\t\t\t@CalculatedToDate,\r\n\t\t\t@GasRateCode,\r\n\t\t\t@CalculatedFromDate,\r\n\t\t\t@CalculatedToDate,\r\n\t\t\tCAST(@CalculatedMeterFromReading AS VARCHAR(7)),  --dbo.MeterReadingNumber\r\n\t\t\tCAST(@CalculatedMeterToReading AS VARCHAR(7)),  --dbo.MeterReadingNumber\r\n\t\t\t@CCFMonthly, \r\n\t\t\t@ThermsMonthly,\r\n\t\t\t@ThermFactor,\r\n\t\t\t@MeterConstant,\r\n\t\t\tdbo.CalculateNumberOfBillingDays(@CalculatedFromDate,@CalculatedToDate), \r\n\t\t\t1, \r\n\t\t\tdbo.CalculateNumberOfBillingDays(@CalculatedFromDate,@CalculatedToDate),\r\n\t\t\t@BillingDate, \r\n\t\t\t@ReadingCode,\r\n\t\t\t@NumberOfDials,\r\n\t\t\t'G', -- MeterType,\r\n\t\t\t'N', --ProcessedInTheCurrentPeriod\r\n\t\t\tdbo.ConvertDateToYYYYMMDD (GETDATE()), -- ProcessEffectiveDate\r\n\t\t\tgetDate(), -- InitialPostingDate\r\n\t\t\t1, --\tAuthenticatedUserID,\r\n\t\t\t@Notes,\r\n\t\t\t'Y', -- DerivedFromSpannedBill\r\n\t\t\t@BillingPeriodRevision,  -- SpannedBillingPeriodRevision\r\n\t\t\t@FirstPeriodCanceled,  -- SpannedFirstPeriodCanceled\r\n\t\t\t@CCF,  -- SpannedCCF\r\n\t\t\t@ThermFactor,  -- SpannedThermFactor\r\n\t\t\t@Therms,  -- SpannedTherms\r\n\t\t\t@ApplyMonthlyPercentage,  -- SpannedApplyMonthlyPercentage\r\n\t\t\t@TotalGasSpannedBilledPercentage,  -- SpannedTotalGasSpannedBilledPercentage\r\n\t\t\t--case when @ReadingCode < 15 then 'EST' else 'ACT' end, -- EstimatedOrActualBilling\r\n\t\t\tdbo.CalculateEstimatedOrActual(@ReadingCode,9),\r\n\t\t\tFacilityName,\r\n\t\t\tServiceAddress\r\n\t\tFROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n\t\tWHERE UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid; \r\n\t\t\t\r\n\t\t--\tSet up for the next the Revised Billing Period row.\r\n\t\tset @SumAverageCCF = @SumAverageCCF + @CCFAverage \t  \r\n\t\tset @idx = @idx + 1\r\n\t\t\t\r\n\t\t--\tCalculate the next the Revised Billing Period row.\r\n\t\tselect @CalculatedBillingPeriodRevision = dbo.[CalculateNextBillingPeriod]  (@CalculatedBillingPeriodRevision,@BillingCycle)\r\n\t\t\t\r\n\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n\t\tselect @CalculatedFromDate = dbo.[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision,@TariffCode,@ConEdUtilityCode)\r\n\t\t\t\r\n\t\tselect @CalculatedMeterFromReading = @CalculatedMeterToReading \r\n\t\t-- CAST(@CalculatedMeterFromReading AS dbo.MeterReadingNumber)\r\n\t\t--\tProcess the next Revised Billing Period row\r\n\t\t--\r\n\tEND;\r\n\t\r\n\t--\tFinish up the last period's processing\r\n\t--\tUse the (Nth -1) periods @CalculatedToDate AS the \"FromDate\" and the acutal \"ToDate\" from the spanned record AS the \"ToDate\"\r\n\tselect @CalculatedFromDate = @CalculatedToDate, @CalculatedToDate = @ToDate;\r\n\t\r\n\t--\tUse the (Nth -1) periods Calculated Meter From Reading AS the \"MeterFromReading\" and the acutal \"MeterToReading\" from the spanned record AS the \"MeterToReading\"\r\n\tselect @CalculatedMeterFromReading = @CalculatedMeterToReading \r\n\tselect @CalculatedMeterToReading = CAST(@MeterToReading AS int)\r\n\t\r\n\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\tselect @ApplyMonthlyPercentage = dbo.[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t\r\n\t--\tDerive the net changes to avoid rounding errors\r\n\tset @ThermsMonthlyLastPeriod = @Therms - @ThermsMonthlySum\r\n\tset @CCFMonthlyLastPeriod = @CCF  - @CCFMonthlySum\r\n\t\r\n\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t--\tIt will note in EC3 that the transaction was derived.\r\n\tselect @Notes = 'CalcTherm '+CAST(@Therms AS VARCHAR(10))+' = '+CAST(@ThermFactor AS VARCHAR(6))+' * '+CAST(@CCF AS VARCHAR(10))+\r\n\t' for '+CAST(@DeltaNumberOfPeriods AS VARCHAR(6))+' periods, First: '+@FirstPeriodCanceled +' ( '+@MeterFromReading+') Last: '+ \r\n\t@BillingPeriodRevision +' ( '+@MeterToReading+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+CAST(@ApplyMonthlyPercentage AS VARCHAR(10))+\r\n\t' - Total %: '+CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t\r\n\t--\tINSERT the data into the table \"ConEd.UploadConEdisonMeterSummary\"\r\n\tINSERT INTO ConEd.UploadConEdisonMeterSummary (\r\n\t\tAccountUtilityCompanySeqid,\r\n\t\tOriginalAccountNumber,\r\n\t\tOriginalMeterNumber,\r\n\t\tNumberOfTransactions, \r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCancelPeriod,\r\n\t\tBillingAction,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tGasRateCode,\r\n\t\tFromDate,\r\n\t\tToDate,\r\n\t\tMeterFromReading,\r\n\t\tMeterToReading,\r\n\t\tCcf,\r\n\t\tTherms,\r\n\t\tThermsFactor,\r\n\t\tMeterConstant,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tReadingCode,\r\n\t\tNumberOfDials,\r\n\t\tMeterType,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tProcessEffectiveDate,\r\n\t\tInitialPostingDate,\r\n\t\tAuthenticatedUserID,\r\n\t\tNotes,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tFacilityName,\r\n\t\tServiceAddress)\r\n\tSELECT @ConEdUtilityCode,\r\n\t\t@AccountNumber,\r\n\t\t@OriginalMeterNumber, \r\n\t\t1,-- NumberOfTransactions, \r\n\t\t1,-- NumberOfRebillTransactions,\r\n\t\t0,-- NumberOfCancelTransactions,\r\n\t\t@BillingPeriod, \r\n\t\t@CalculatedBillingPeriodRevision,\r\n\t\t@CalculatedBillingPeriodRevision,\r\n\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END,-- BillingAction, \r\n\t\t@CalculatedFromDate,\r\n\t\t@CalculatedToDate,\r\n\t\t@GasRateCode,\r\n\t\t@CalculatedFromDate,\r\n\t\t@CalculatedToDate,\r\n\t\tCAST(@CalculatedMeterFromReading AS VARCHAR(7)),  --dbo.MeterReadingNumber\r\n\t\tCAST(@CalculatedMeterToReading AS VARCHAR(7)),  --dbo.MeterReadingNumber\r\n\t\t@CCFMonthlyLastPeriod, \r\n\t\t@ThermsMonthlyLastPeriod,\r\n\t\t@ThermFactor,\r\n\t\t@MeterConstant,\r\n\t\tdbo.CalculateNumberOfBillingDays(@CalculatedFromDate, @CalculatedToDate), \r\n\t\t1, \r\n\t\tdbo.CalculateNumberOfBillingDays(@CalculatedFromDate, @CalculatedToDate),\r\n\t\t@BillingDate, \r\n\t\t@ReadingCode,\r\n\t\t@NumberOfDials,\r\n\t\t'G', -- MeterType,\r\n\t\t'N', --ProcessedInTheCurrentPeriod\r\n\t\tdbo.ConvertDateToYYYYMMDD (GETDATE()), -- ProcessEffectiveDate\r\n\t\tgetDate(), -- InitialPostingDate\r\n\t\t1, --\tAuthenticatedUserID,\r\n\t\t@Notes,\r\n\t\t'Y', -- DerivedFromSpannedBill\r\n\t\t@BillingPeriodRevision,  -- SpannedBillingPeriodRevision\r\n\t\t@FirstPeriodCanceled,  -- SpannedFirstPeriodCanceled\r\n\t\t@CCF,  -- SpannedCCF\r\n\t\t@ThermFactor,  -- SpannedThermFactor\r\n\t\t@Therms,  -- SpannedTherms\r\n\t\t@ApplyMonthlyPercentage,  -- SpannedApplyMonthlyPercentage\r\n\t\t@TotalGasSpannedBilledPercentage,  -- SpannedTotalGasSpannedBilledPercentage\r\n\t\tdbo.CalculateEstimatedOrActual(@ReadingCode, 9),\r\n\t\tFacilityName,\r\n\t\tServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n\tWHERE UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid;\r\n\r\n\t\t--\tProcess the next row\r\n\t\tFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonMeterTempSummarySpannedSeqid\r\n\tEND;\r\n\r\n\tCLOSE SpannedGasBillCursor;\r\n\tDEALLOCATE SpannedGasBillCursor;\r\nEND;"
        }
      ]
    }
  ]
}