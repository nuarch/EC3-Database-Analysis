{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ManualBill",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Reporting_GetCurrentPeriodBalancesByInvoiceBillingGroup",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Reporting_GetCurrentPeriodBalancesByInvoiceBillingGroup",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve account balances and payment information for a specified invoice billing group within a given billing period. It also identifies and lists billing periods that have not been billed for each account. The procedure uses several table variables to organize and process data, and it returns a comprehensive dataset that includes account details, payment amounts, missing billing periods, and masked account numbers."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple steps, including data retrieval, transformation, and aggregation. It uses several table variables, joins, and a cursor to process data, which adds to its complexity. However, the logic is straightforward and well-documented, making it manageable for experienced developers."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@InvoiceBillingGroupSeqid INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter specifies the sequence ID of the invoice billing group for which the report is generated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StartBillingPeriod VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter defines the starting billing period (in 'YYYYMM' format) from which the report should begin."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Current Billing Period Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure starts by determining the current billing period from the "
                },
                {
                  "type": "text",
                  "text": "ManualBillingApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table. If no current period is found, an error is raised."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Variable Declarations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Several table variables are declared to store intermediate data, such as account details, billing periods, and missing periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion into @MBData",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure populates the "
                },
                {
                  "type": "text",
                  "text": "@MBData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table with account and billing information by joining the "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "ManualBill.AccountManualBillingHeader",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " tables. It calculates taxes and converts date formats using a custom function."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Periods Construction",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@BillingPeriods",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table is filled with distinct billing periods, cycles, and trip numbers from the "
                },
                {
                  "type": "text",
                  "text": "ReadingScheduleManualBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Check List Creation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@BillingCheckList",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table is populated to identify expected billing periods for each account and mark those that are missing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Missing Periods Identification",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A cursor iterates over accounts to compile a list of missing billing periods, which is stored in the "
                },
                {
                  "type": "text",
                  "text": "@MissingPeriods",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Data Selection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure returns a dataset that includes account details, payment amounts, missing periods, and additional information such as masked account numbers and the current billing period."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor to iterate over accounts can be a performance bottleneck, especially with large datasets. Consider replacing it with set-based operations if possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Variables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While table variables are suitable for small to medium-sized datasets, they may not perform well with large volumes of data due to lack of statistics and indexing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Subqueries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple joins and subqueries, which can impact performance. Ensure that the underlying tables are properly indexed to optimize query execution."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure raises an error if no current billing period is found, but it does not handle other potential errors, such as data type mismatches or null values in critical fields."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of table variables and cursors may limit scalability. As data volume grows, performance may degrade."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that data in the "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "ManualBill.AccountManualBillingHeader",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " tables is consistent and accurate. Any discrepancies could lead to incorrect results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the procedure is executed with appropriate permissions to prevent unauthorized access to sensitive data, such as account numbers."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [ManualBill].[usp_Reporting_GetCurrentPeriodBalancesByInvoiceBillingGroup]\n\t@InvoiceBillingGroupSeqid INT,\r\n\t@StartBillingPeriod varchar(6)\r\n\t\r\n AS \r\n BEGIN\r\n\t\t--**********************************************************************************************************************************\r\n\t\t--\tAuthor: MOHAMMED BELARREM\r\n\t\t--\tDescription: Returns a list of accounts and their current balances and a sum of any payment requested this period \r\n\t\t--\t\t\t\t it also returns a list of all the periods that havent been billed \r\n\t\t--\r\n\t\t--\tLog: \r\n\t\t--\t02/01/2011\tMOH\tCreation \r\n\t\t--  02/09/2011\tMOH Update:\tchanges the structure of the Stored Procedure from a Common Table expression to a table variables\r\n\t\t--  03/08/2011  MOH Update: Added LatePaymentCharges and Taxes\r\n\t\t--  01/18/2019  VY  Update: Modified for UniqueAccountSeqID\r\n\t\t--**********************************************************************************************************************************\r\n\t \r\n\t\t--**********************************************************************************************************************************\r\n\t\t\r\n\t\tDECLARE @CurrentBillingPeriod VARCHAR(6) \r\n\t\t\r\n\t\tSET @CurrentBillingPeriod = ( SELECT BillingPeriod FROM ManualBill.ManualBillingApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y' )\r\n\t\t\r\n\t\tIF ( @CurrentBillingPeriod IS NULL )\r\n\t\tBEGIN\r\n\t\t\tRAISERROR ('The manual billing subsystem does not have a current billing period. Please verify. ', 12, 1) \r\n\t\tEND\r\n\t\t\r\n\t\t-- we have a billing period, lets proceeed\r\n\t\t\r\n\t\tDECLARE @InvoiceAccountBillingGroupLongDesc varchar(100)\r\n\t\tDECLARE @UtilityCompanySeqid int\r\n\t\t\r\n\t\tDECLARE @MissingPeriodsByAccount TABLE (\r\n\t\tAccountSeqid int,\r\n\t\tperiods VARCHAR(max) )\r\n\r\n\t\tDECLARE @MBData TABLE (\r\n\t\t\t\tRowNumber INT,\r\n\t\t\t\tAccountSeqid INT,\r\n\t\t\t\tOriginalAccountNumber VARCHAR(15),\r\n\t\t\t\tBillingCycle VARCHAR(1),\r\n\t\t\t\tTripNumber VARCHAR(2),\r\n\t\t\t\tBillingPeriod VARCHAR(6),\r\n\t\t\t\tBillingPeriodRevision VARCHAR(6),\r\n\t\t\t\tFirstPeriodCanceled VARCHAR(6),\r\n\t\t\t\tTotalAmountDue MONEY,\r\n\t\t\t\tManualPaymentOverrideAmount MONEY,\r\n\t\t\t\tLatePaymentCharges MONEY,\r\n\t\t\t\tTaxes MONEY,\r\n\t\t\t\tFromDate DATETIME,\r\n\t\t\t\tToDate DATETIME,\r\n\t\t\t\tInitialPostingDate DATETIME\r\n\t\t)\r\n\r\n\t\tDECLARE @BillingPeriods TABLE (\r\n\t\t\t\tBillingPeriod VARCHAR(6), \r\n\t\t\t\tBillingCycle VARCHAR(1), \r\n\t\t\t\tTripNumber VARCHAR(2)\r\n\t\t)\r\n\r\n\r\n\r\n\t\tDECLARE @BillingCheckList TABLE (\r\n\t\t\t\tAccountSeqid INT, \r\n\t\t\t\tProjectedBillingPeriod VARCHAR(6), \r\n\t\t\t\tisMissing VARCHAR(1)\r\n\t\t)\r\n\r\n\t\tDECLARE @MissingPeriods TABLE (\r\n\t\t\t\tAccountSeqid INT, \r\n\t\t\t\tMissingPeriodsList VARCHAR(max)\r\n\t\t)\r\n\r\n\t\t \r\n\t\tSELECT @InvoiceAccountBillingGroupLongDesc = InvoiceAccountBillingGroupLongDesc \r\n\t\t\t\t, @UtilityCompanySeqid = InvoiceAccountGroupUtiliyCompany\r\n\t\tFROM Billing.InvoiceAccountGroup WHERE InvoiceAccountGroupSeqid = @InvoiceBillingGroupSeqid \r\n\t\t \r\n\t\t -- construct the manual billing data\r\n\t\t INSERT INTO @MBData (\r\n\t\t\t\tRowNumber ,\r\n\t\t\t\tAccountSeqid ,\r\n\t\t\t\tOriginalAccountNumber ,\r\n\t\t\t\tBillingCycle ,\r\n\t\t\t\tTripNumber ,\r\n\t\t\t\tBillingPeriod ,\r\n\t\t\t\tBillingPeriodRevision ,\r\n\t\t\t\tFirstPeriodCanceled ,\r\n\t\t\t\tTotalAmountDue ,\r\n\t\t\t\tManualPaymentOverrideAmount ,\r\n\t\t\t\tLatePaymentCharges ,\r\n\t\t\t\tTaxes , \r\n\t\t\t\tFromDate ,\r\n\t\t\t\tToDate ,\r\n\t\t\t\tInitialPostingDate \r\n\t\t\t\t)\r\n\t\t SELECT ROW_NUMBER() OVER (ORDER BY Billing.Account.AccountSeqid, \r\n\t\t\t\tBillingPeriod, FromDate, InitialPostingDate ) AS 'RowNumber' ,\r\n\t\t\t\tBilling.Account.AccountSeqid, \r\n\t\t\t\tAccount.OriginalAccountNumber, \r\n\t\t\t\tBilling.Account.BillingCycle, \r\n\t\t\t\tBilling.Account.TripNumber, \r\n\t\t\t\tBillingPeriod, \r\n\t\t\t\tBillingPeriodRevision, \r\n\t\t\t\tFirstPeriodCanceled, \r\n\t\t\t\tTotalAmountDue, \r\n\t\t\t\tManualPaymentOverrideAmount, \r\n\t\t\t\tLatePaymentAmount,\r\n\t\t\t\t( SELECT SUM(Tax) FROM ManualBill.AccountManualBillingDetail WHERE AccountManualBillingHeaderSeqid = ManualBill.AccountManualBillingHeader.AccountManualBillingHeaderSeqid  ) AS Taxes ,\r\n\t\t\t\tdbo.ConvertYYYYMMDDToDatetime(FromDate) AS FromDate, \r\n\t\t\t\tdbo.ConvertYYYYMMDDToDatetime(ToDate) AS ToDate, \r\n\t\t\t\tInitialPostingDate\r\n\t\t\tFROM Billing.Account\r\n\t\t\t\tINNER JOIN Billing.Account account_1 ON Billing.Account.CurrentAccountNumber = account_1.CurrentAccountNumber\r\n\t\t\t\t--INNER JOIN ManualBill.AccountManualBillingHeader ON account_1.AccountSeqid = ManualBill.AccountManualBillingHeader.AccountSeqid /* comment out 1/18/2019 */\r\n\t\t\t\tINNER JOIN ManualBill.AccountManualBillingHeader ON account_1.UniqueAccountSeqid = ManualBill.AccountManualBillingHeader.UniqueAccountSeqid and /* added 1/18/2019 */\r\n\t\t\t\taccount_1.IsCurrentRecord = 'Y'\r\n\r\n\t\t\tWHERE Account.CurrentInvoiceAccountGroup = @InvoiceBillingGroupSeqid AND Account.OriginalAccountNumber = Account.CurrentAccountNumber\r\n\t\t\t\tAND InitialPostingDate IS NOT NULL\r\n\t\t\t\tAND BillingPeriod >= @StartBillingPeriod AND BillingPeriod <= @CurrentBillingPeriod\r\n\r\n\t\t\t\r\n\t\t\t-- updates the Taxes in the @MBData from detail records\r\n\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t \r\n\t\t\t-- contstruct billing periods by trip number and billingcycles\t\t \r\n\t\t\tINSERT INTO @BillingPeriods (\r\n\t\t\t\t\t\tBillingPeriod, \r\n\t\t\t\t\t\tBillingCycle, \r\n\t\t\t\t\t\tTripNumber\r\n\t\t\t\t\t\t)\r\n\t\t\tSELECT DISTINCT \r\n\t\t\t\t\t\tBillingPeriod, \r\n\t\t\t\t\t\tBillingCycle, \r\n\t\t\t\t\t\tTripNumber\r\n\t\t\tFROM ManualBill.ReadingScheduleManualBilling\r\n\t\t\tWHERE InvoiceAccountGroupSeqid = @InvoiceBillingGroupSeqid AND BillingPeriod >= @StartBillingPeriod AND BillingPeriod <= @CurrentBillingPeriod\r\n\r\n\r\n\r\n\t\t\t\r\n\t\t\tINSERT INTO @BillingCheckList (\r\n\t\t\t\t\tAccountSeqid , \r\n\t\t\t\t\tProjectedBillingPeriod , \r\n\t\t\t\t\tisMissing \r\n\t\t\t\t)\r\n\t\t\tSELECT\tExpectedBilling.Accountseqid , \r\n\t\t\t\t\tEXPectedBilling.ProjectedBillingPeriod  , \r\n\t\t\t\t\tCASE WHEN ActualBilledPeriods.AccountSeqid is NULL THEN 'Y' ELSE 'N' END isMissing\r\n\t\t\tFROM \r\n\t\t\t(\r\n\t\t\t\tSELECT Accountseqid, billingperiod AS ProjectedBillingPeriod \r\n\t\t\t\tFROM \r\n\t\t\t\t( SELECT DISTINCT accountseqid, TripNumber, BillingCycle FROM @MBData ) AS uniqueAccountseqid CROSS JOIN @BillingPeriods BillingPeriods_1 \r\n\t\t\t\tWHERE uniqueAccountseqid.BillingCycle = BillingPeriods_1.BillingCycle  AND uniqueAccountseqid.TripNumber = BillingPeriods_1.TripNumber \r\n\t\t\t  \r\n\t\t\t) AS ExpectedBilling\r\n\t\t\tLEFT JOIN \r\n\t\t\t(\r\n\t\t\t\tSELECT BillingPeriodRevision, FirstPeriodCanceled, BillingPeriods_1.BillingPeriod , AccountSeqid\r\n\t\t\t\tFROM @MBData MBData_1\r\n\t\t\t\tCROSS JOIN @BillingPeriods BillingPeriods_1\r\n\t\t\t\tWHERE BillingPeriods_1.BillingPeriod >= MBData_1.FirstPeriodCanceled AND BillingPeriods_1.BillingPeriod <= MBData_1.BillingPeriodRevision\r\n\t\t\t) AS ActualBilledPeriods\r\n\t\t\tON ExpectedBilling.accountseqid = ActualBilledPeriods.AccountSeqid AND ExpectedBilling.ProjectedBillingPeriod = ActualBilledPeriods.BillingPeriod\r\n\t\t\t\r\n\r\n\t\t\t\r\n\t\t\t-- test\r\n\t\t\t-- SELECT * FROM @BillingCheckList\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t-- collect all missing periods\r\n\t\t\tDECLARE @AccountSeqid INT\r\n\t\t\tDECLARE @AllPeriods VARCHAR(MAX)\r\n\t\t\t\r\n\t\t\tDECLARE voucher_cursor CURSOR FOR\r\n\t\t\tSELECT DISTINCT Accountseqid FROM @BillingCheckList\r\n\t\t \r\n\t\t \r\n\t\t\t\tOPEN voucher_cursor  \r\n\t\t\t\tFETCH NEXT FROM voucher_cursor INTO @AccountSeqid\r\n\t\t\t\t\r\n\t\t\t\tWHILE @@FETCH_STATUS = 0  \r\n\t\t\t\tBEGIN  \r\n\t\t\t\t\t\t-- clear variable\r\n\t\t\t\t\t\tSET @AllPeriods = ''\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t-- concatenate all period into a comma seperated string\r\n\t\t\t\t\t\tSELECT @AllPeriods = ISNULL(@AllPeriods + ', ', '') + ProjectedBillingPeriod\r\n\t\t\t\t\t\tFROM @BillingCheckList \r\n\t\t\t\t\t\tWHERE Accountseqid = @AccountSeqid AND isMissing = 'Y'\r\n\t\t\t\t\t\tORDER BY ProjectedBillingPeriod \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tIF ( CHARINDEX( ',' , @AllPeriods ) = 1 )\r\n\t\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\t\tSET @AllPeriods = SUBSTRING(@AllPeriods, 3, LEN(@AllPeriods) - 2 )\r\n\t\t\t\t\t\tEND\r\n\t\t\t\t\t\t-- \r\n\t\t\t\t\t\tINSERT INTO @MissingPeriods  (\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tAccountSeqid , \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tMissingPeriodsList \r\n\t\t\t   \t\t\t\t\t\t\t\t\t\t )\r\n\t\t\t\t\t\tSELECT @AccountSeqid, @AllPeriods \t\t\t\t \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tFETCH NEXT FROM voucher_cursor INTO @AccountSeqid\r\n\t\t\t\tEND  \r\n\r\n\t\t\t\tCLOSE voucher_cursor  \r\n\t\t\t\tDEALLOCATE voucher_cursor\r\n\t\t\t\t\r\n\t\t\t\r\n\t\r\n\t\t-- return the constructed result\t\t\t\r\n\t\tSELECT MBData.* , ( SELECT SUM(ManualPaymentOverrideAmount )  FROM @MBData c WHERE c.AccountSeqid = MBData.AccountSeqid AND c.BillingPeriod = MBData.BillingPeriod     ) AS AmountPaidForCurrentPeriod, MissingPeriods.MissingPeriodsList, @InvoiceAccountBillingGroupLongDesc AS InvoiceAccountBillingGroupLongDesc, dbo.MaskAccountNumber(MBData.OriginalAccountNumber, @UtilityCompanySeqid) AS MaskedAccountNumber, @CurrentBillingPeriod AS CurrentBillingPeriod\r\n\t\tFROM @MBData MBData\r\n\t\tINNER JOIN  @MissingPeriods MissingPeriods\r\n\t\tON MBData.Accountseqid = MissingPeriods.Accountseqid\r\n\t\tWHERE RowNumber = ( SELECT TOP 1 RowNumber \r\n\t\t\t\t\t\t\tFROM @MBData b  \r\n\t\t\t\t\t\t\tWHERE b.AccountSeqid = MBData.AccountSeqid \r\n\t\t\t\t\t\t\tORDER BY b.AccountSeqid, b.BillingPeriod DESC, b.ToDate DESC, b.InitialPostingDate DESC  \r\n\t\t\t\t\t\t   )\r\n\r\n\t\tORDER BY MBData.OriginalAccountNumber\r\n\t\t\t\r\n\t\t\t\r\n\r\n\r\n\r\n\t\r\n end"
        }
      ]
    }
  ]
}