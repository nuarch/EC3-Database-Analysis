{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_2_TransformRawData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_2_TransformRawData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and transform raw data related to ConEdison accounts, meters, and cancellations. It performs several key operations: truncating existing data in target tables, updating account numbers in preload tables, inserting transformed data into main tables, synchronizing exchange data, and validating records. The procedure is part of a larger data processing workflow, likely executed periodically to handle new data uploads and ensure data integrity and consistency."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple operations, including data truncation, updates, inserts, and execution of other stored procedures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses several user-defined functions for data transformation."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes conditional logic and joins, which add to the complexity."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It interacts with multiple tables and requires understanding of the data model."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates on predefined tables and data structures within the database."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncate Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by truncating three tables: "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonAccount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonMeter",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonCancellation",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". This clears existing data to prepare for new data insertion."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Preload Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It updates account numbers in the preload tables ("
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonExchangeDataPreload",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonAccountPreload",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonCancellationPreload",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonMeterPreload",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") by removing spaces and appending '0000' to ensure a consistent format and length."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert Transformed Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure inserts data from the preload tables into the main tables ("
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonAccount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonCancellation",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonMeter",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "). During this process, it applies several transformations using user-defined functions to convert dates and numeric values."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Synchronize Exchange Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It executes another stored procedure, "
                },
                {
                  "type": "text",
                  "text": "CopyConEdExchangeDataUploadToCommon",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", to synchronize exchange data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Billing Periods",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It updates the "
                },
                {
                  "type": "text",
                  "text": "ToDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "BillingPeriodRevision",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " in the "
                },
                {
                  "type": "text",
                  "text": "UploadConEdisonAccount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table based on the current billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Process Exchange Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It executes "
                },
                {
                  "type": "text",
                  "text": "usp_ProcessExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to handle exchange data processing, passing a specific option and capturing status and messages."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure concludes by executing validation stored procedures to check for incorrect billing period revisions and reading codes."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncation Overhead",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating tables can be resource-intensive, especially if the tables are large. It is efficient for clearing data but should be used with caution in high-transaction environments."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure processes data in batches (via inserts and updates), which can be optimized further by using set-based operations where possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Overhead",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of user-defined functions for data transformation can introduce overhead, especially if they are scalar functions. Consider using inline table-valued functions for better performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not handle concurrency explicitly, which could lead to issues if multiple instances are run simultaneously."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Loss",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating tables without backup or logging can lead to data loss if the procedure is executed unintentionally."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the transformations and updates will not introduce errors. Any issues in the user-defined functions or logic could lead to incorrect data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of this procedure may degrade, particularly due to the truncation and transformation steps."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could result in unhandled exceptions and incomplete data processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of hardcoded values (e.g., '0000' appended to account numbers) may not be flexible for future changes in data requirements."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [ConEd].[usp_Upload_2_TransformRawData]\nAS \r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\t-- truncate upload data\r\n    TRUNCATE TABLE ConEd.UploadConEdisonAccount;\r\n    TRUNCATE TABLE ConEd.UploadConEdisonMeter;\r\n    TRUNCATE TABLE ConEd.UploadConEdisonCancellation;\r\n\r\n\t---------------------\r\n\tUPDATE UCEEDP\r\n\tSET UCEEDP.ACT# =REPLACE(UCEEDP.[ACT#],' ','')+'0000'\r\n\t, UCEEDP.[O-ACT#] =REPLACE(UCEEDP.[O-ACT#],' ','')+'0000'\r\n\t, UCEEDP.[N-ACT#] =REPLACE(UCEEDP.[N-ACT#],' ','')+'0000'\r\n\tFROM coned.UploadConEdisonExchangeDataPreload AS UCEEDP\r\n\tWHERE LEN(UCEEDP.ACT#)<15\r\n\t\r\n\tUPDATE UCEAP\r\n\tSET UCEAP.AccountNumber =REPLACE(UCEAP.AccountNumber,' ','')+'0000'\r\n\tFROM coned.UploadConEdisonAccountPreload AS UCEAP\r\n\tWHERE LEN(AccountNumber)<15\r\n\t\r\n\tUPDATE UCECP\r\n\tSET UCECP.AccountNumber =REPLACE(UCECP.AccountNumber,' ','')+'0000'\r\n\tFROM coned.UploadConEdisonCancellationPreload AS UCECP\r\n\tWHERE LEN(AccountNumber)<15\t\r\n\r\n\tUPDATE UCEMP\r\n\tSET UCEMP.AccountNumber =REPLACE(UCEMP.AccountNumber,' ','')+'0000'\r\n\tFROM coned.UploadConEdisonMeterPreload AS UCEMP\r\n\tWHERE LEN(AccountNumber)<15\r\n\r\n\t---------------------\r\n\r\n    INSERT INTO ConEd.[UploadConEdisonAccount]\r\n        ([BillingPeriod],\r\n        [BillingPeriodRevision],\r\n        [FirstPeriodCanceled],\r\n        [DeltaNumberOfPeriods],\r\n        [RecordType],\r\n        [AccountNumber],\r\n        [FacilityName],\r\n        [ServiceAddress],\r\n        [FromDate],\r\n        [ToDate],\r\n        [BillingPeriodDays],\r\n        [CCF],\r\n        [BilledAmount],\r\n        [PreviousBalance],\r\n        [Therms],\r\n        [ThermFactor],\r\n        [TariffCode],\r\n        [Dials],\r\n        [FiscalYear],\r\n        [PostingDate],\r\n        [AuthenticatedUserID],\r\n        [DateAdded],\r\n        [LastUpdate])\r\n    SELECT BillingPeriod,\r\n        BillingPeriodRevision,\r\n        FirstPeriodCanceled,\r\n        DeltaNumberOfPeriods,\r\n        RecordType,\r\n\t\tAccountNumber,\r\n        FacilityName,\r\n        ServiceAddress,\r\n        [dbo].[JulianDateToYYYYMMDD](FromDate) AS FromDate,\r\n        [dbo].[JulianDateToYYYYMMDD](ToDateJul) AS ToDate,\r\n        BillingPeriodDays,\r\n        dbo.ConvertOverpunch8ToInt32(CCF) AS CCF,\r\n        dbo.ConvertOverpunch9ToMoney(BilledAmount) AS BilledAmount,\r\n        dbo.ConvertOverpunch9ToMoney(PreviousBalance) AS PreviousBalance,\r\n        dbo.ConvertOverpunch8ToInt32(Therms) AS Therms,\r\n        dbo.ConvertOverpunch4ToDecimal(ThermFactor) AS ThermFactor,\r\n        TariffCode,\r\n        Dials,\r\n        [dbo].[CalculateFiscalYear](dbo.JulDatetoYYYYMM(ToDateJul)) AS calcFiscalYear,\r\n        [dbo].[JulianDateToYYYYMMDD](PostingDate) AS PostingDate,\r\n        1,\r\n        GETDATE(),\r\n        GETDATE()\r\n    FROM ConEd.UploadConEdisonAccountPreload;\r\n\r\n    INSERT INTO ConEd.[UploadConEdisonCancellation]\r\n        ([BillingPeriod],\r\n        [BillingPeriodRevision],\r\n        [FirstPeriodCanceled],\r\n        [DeltaNumberOfPeriods],\r\n        [RecordType],\r\n        [AccountNumber],\r\n        [MeterNumber],\r\n        [FacilityName],\r\n        [ServiceAddress],\r\n        [FromDate],\r\n        [ToDate],\r\n        [BillingPeriodDays],\r\n        [CCF],\r\n        [BilledAmount],\r\n        [Therms],\r\n        [ThermFactor],\r\n        [TariffCode],\r\n        [Dials],\r\n        [FiscalYear],\r\n        [PostingDate],\r\n        [AuthenticatedUserID],\r\n        [DateAdded],\r\n        [LastUpdate])\r\n    SELECT  BillingPeriod,\r\n        BillingPeriodRevision,\r\n        FirstPeriodCanceled,\r\n        DeltaNumberOfPeriods,\r\n        RecordType,\r\n\t\tAccountNumber,\r\n        MeterNumber,\r\n        FacilityName,\r\n        ServiceAddress,\r\n        [dbo].[JulianDateToYYYYMMDD](FromDate) AS FromDate,\r\n        [dbo].[JulianDateToYYYYMMDD](ToDateJul) AS ToDate,\r\n        BillingPeriodDays,\r\n        dbo.ConvertOverpunch8ToInt32(CCF) AS CCF,\r\n        dbo.ConvertOverpunch9ToMoney(BilledAmount) AS BilledAmount,\r\n        dbo.ConvertOverpunch8ToInt32(Therms) AS Therms,\r\n        dbo.ConvertOverpunch4ToDecimal(ThermFactor) AS ThermFactor,\r\n        TariffCode,\r\n        Dials,\r\n        [dbo].[CalculateFiscalYear](dbo.JulDatetoYYYYMM(ToDateJul)) AS calcFiscalYear,\r\n        [dbo].[JulianDateToYYYYMMDD](PostingDate) AS PostingDate,\r\n        1,\r\n        GETDATE(),\r\n        GETDATE()\r\n    FROM ConEd.UploadConEdisonCancellationPreload;\r\n\r\n    INSERT INTO ConEd.[UploadConEdisonMeter]\r\n        ([BillingPeriod],\r\n        [BillingPeriodRevision],\r\n        [FirstPeriodCanceled],\r\n        [DeltaNumberOfPeriods],\r\n        [AccountNumber],\r\n        [MeterNumber],\r\n        [FromDate],\r\n        [ToDate],\r\n        [RecordType],\r\n        [FromReading],\r\n        [ToReading],\r\n        [MeterConstant],\r\n        [Dials],\r\n        [FacilityName],\r\n        [ReadingCode],\r\n        [CCF],\r\n        [CycleBillingDays],\r\n        [ThermFactor],\r\n        [ServiceAddress],\r\n        [FiscalYear],\r\n        [PostingDate],\r\n        [AuthenticatedUserID],\r\n        [DateAdded],\r\n        [LastUpdate])\r\n    SELECT BillingPeriod,\r\n        BillingPeriodRevision,\r\n        FirstPeriodCanceled,\r\n        DeltaNumberOfPeriods,\r\n\t\tAccountNumber,\r\n        MeterNumber,\r\n        [dbo].[JulianDateToYYYYMMDD](FromDate) AS FromDate,\r\n        [dbo].[JulianDateToYYYYMMDD](ToDate) AS ToDate,\r\n        RecordType,\r\n        [dbo].[ConvertOverpunch7ToInt32](FromReading) AS FromReading,\r\n        [dbo].[ConvertOverpunch7ToInt32](ToReading) AS ToReading,\r\n        MeterConstant,\r\n        Dials,\r\n        FacilityName,\r\n        ReadingCode,\r\n        dbo.ConvertOverpunch8ToInt32(CCF) AS CCF,\r\n        CAST(CycleBillingDays AS INT),\r\n        dbo.ConvertOverpunch4ToDecimal(ThermFactor) AS ThermFactor,\r\n        ServiceAddress,\r\n        [dbo].[CalculateFiscalYear](dbo.JulDatetoYYYYMM(ToDate)) AS calcFiscalYear,\r\n        [dbo].[JulianDateToYYYYMMDD](BillCreationDate),\r\n        1,\r\n        GETDATE(),\r\n        GETDATE()\r\n    FROM ConEd.UploadConEdisonMeterPreload;\r\n\r\n\t--------------------\r\n\r\n\tDECLARE @BillingPeriod AS BillingPeriod;\r\n\r\n\tSELECT @BillingPeriod = BillingPeriod \r\n\tFROM Billing.ApplicationTimeFrame\r\n\tWHERE CurrentProcessingPeriod = 'Y';\r\n\r\n\tUPDATE ucea\r\n\tSET ucea.ToDate = bpp.EndofPeriodTodate, ucea.BillingPeriodRevision = bpp.BillingPeriod\r\n\tFROM coned.UploadConEdisonAccount AS ucea\r\n\tLEFT JOIN [Billing].BillingPeriodProjected AS bpp\r\n\tON bpp.BillingPeriod = @BillingPeriod AND bpp.UtilityCompanySeqid = 9\r\n\tWHERE ucea.BillingPeriodRevision > @BillingPeriod;\r\n\r\n\t---- Exchange data table synched- re-run is ok\r\n\tEXECUTE [Common].[CopyConEdExchangeDataUploadToCommon];\r\n\t------\r\n\t\r\n\t-- in case main exchanges have problem\r\n\t-- start\r\n\r\n\t-- New Step to integrate common.exchangedate table usage\r\n\t-- This process compare billing file and billing table and adds missing accounts and meters as exchange data record.\r\n\r\n\r\n\t---------------------------------------------------------------------------\r\n\r\n\t-- This process executes the monthly exchange data file issues.\r\n\t--EXEC [Common].[usp_CONED_HandleExchangeDataIssues]\r\n\r\n\t---- TODO include defult fixes like exchanging same meternumber\r\n\t--UPDATE ED \tSET ED.Exclude = 'Y'\tFROM Common.ExchangeData AS ED\tWHERE ED.BillingPeriod ='202404' AND ED.CurrentMeterNumber ='3979164'\tAND ED.UtilityCompanySeqid = 9\tAND ED.ExchangeCode = '45'\r\n\t--UPDATE ED \tSET ED.Exclude = 'Y'\tFROM Common.ExchangeData AS ED\tWHERE ED.BillingPeriod ='202404' AND ED.CurrentAccountNumber ='613115200030000'\tAND ED.UtilityCompanySeqid = 9\tAND ED.ExchangeCode = '28'\r\n\tUPDATE ED \tSET ED.Exclude = 'Y'\tFROM Common.ExchangeData AS ED\tWHERE ED.BillingPeriod ='202409' AND ED.CurrentAccountNumber ='744132000020000'\tAND ED.UtilityCompanySeqid = 9\tAND ED.ExchangeCode = '47'\r\n\tUPDATE ED \tSET ED.Exclude = 'Y'\tFROM Common.ExchangeData AS ED\tWHERE ED.BillingPeriod ='202409' AND ED.CurrentAccountNumber ='424904200090000'\tAND ED.UtilityCompanySeqid = 9\tAND ED.ExchangeCode = '28'\r\n\r\n\r\n\t---- TODO run this by default\r\n\t--UPDATE ED\r\n\t--SET ED.CurrentMeterNumber = ED.OriginalMeterNumber\r\n\t--FROM Common.ExchangeData AS ED\r\n\t--WHERE ED.BillingPeriod ='202404'\r\n\t--AND ED.UtilityCompanySeqid = 9\r\n\t--AND ED.CurrentMeterNumber = '       '\r\n\t--AND ED.ExchangeCode = '27'\r\n\t---------------------------------------------------------------------------\r\n\t-- end\r\n\r\n\r\n\t--preocess exchanges\r\n\tDECLARE @InvoiceBillingGroupdSeqidOrOption AS VARCHAR(1), @StatusCode3 AS INT, @Message3 AS VARCHAR(1000);\r\n\tSET @InvoiceBillingGroupdSeqidOrOption = '2';\r\n\tEXECUTE [Common].[usp_ProcessExchangeData] @InvoiceBillingGroupdSeqidOrOption, @StatusCode3 OUTPUT, @Message3 OUTPUT;\r\n\r\n\t\r\n\t-- add missing leftover exchange records\r\n\t--eXECUTE [Common].[CopyConEdExchangeDataToCommon]\r\n\r\n\r\n\r\n\t--DECLARE @InvoiceBillingGroupdSeqidOrOption1 AS VARCHAR(1), @StatusCode4 AS INT, @Message4 AS VARCHAR(1000);\r\n\t--SET @InvoiceBillingGroupdSeqidOrOption1 = '2';\r\n\t--EXECUTE [Common].[usp_ProcessExchangeData] @InvoiceBillingGroupdSeqidOrOption1, @StatusCode4 OUTPUT, @Message4 OUTPUT;\r\n\r\n\r\n\t-- check the records with incorrect billing period revision\r\n\tEXECUTE [ConEd].[usp_Validation_AccountRecordsWithIncorrectBillingPeriodRevision];\r\n\r\n\t-- Check reading code which is used to find out if the reading is est or act\r\n\tEXEC [ConEd].[usp_Validation_CheckReadingCode];\r\nEND;"
        }
      ]
    }
  ]
}