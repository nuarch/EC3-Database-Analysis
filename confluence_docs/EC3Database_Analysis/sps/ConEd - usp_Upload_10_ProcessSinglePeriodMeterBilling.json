{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_10_ProcessSinglePeriodMeterBilling",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_10_ProcessSinglePeriodMeterBilling",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and insert single-period meter billing data into the "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonMeterSummary",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table. It first clears the existing data in the target table and resets its identity column. Then, it inserts new records from the "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonMeter",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table, transforming and calculating various fields as needed. The procedure involves calculations for therms, billing days, and other billing-related metrics, using both direct data from the source table and additional logic through user-defined functions."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is considered medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple transformations and calculations using user-defined functions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It handles conditional logic to determine billing actions and revisions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It resets and manages identity columns, which requires careful handling to avoid data integrity issues."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates on predefined tables within the "
        },
        {
          "type": "text",
          "text": "ConEd",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncate and Reset Identity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by truncating the "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonMeterSummary",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table to remove existing data. It then resets the identity column to start from 1 using "
                },
                {
                  "type": "text",
                  "text": "DBCC CHECKIDENT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure inserts data into "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonMeterSummary",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " from "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonMeter",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with the following transformations:"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Billing Period and Revision",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Determines the correct billing period revision using conditional logic."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Transaction Counts",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Sets default values for the number of transactions, rebills, and cancellations."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Billing Action",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Determines whether the billing action is original ('O') or adjusted ('A') based on the billing period and revision."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Gas Rate Code and Therm Factor",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Uses user-defined functions to determine the gas rate code and therm factor."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Therms Calculation",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Calculates therms using the CCF value and therm factor, rounding to the nearest integer."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Billing Days",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Calculates total billing days using a user-defined function."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Date Handling",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Converts dates to a specific format and sets default values for date fields."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Estimated or Actual Billing",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Determines if the billing is estimated or actual using a user-defined function."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure includes conditional logic to handle different scenarios for billing period revisions and cancellations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncation and Identity Reset",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating the table and resetting the identity column can be resource-intensive operations, especially if the table is large. This should be done with caution in a production environment."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of user-defined functions for calculations can impact performance, especially if these functions are complex or inefficient."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure processes all records in "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonMeter",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " where "
                },
                {
                  "type": "text",
                  "text": "DeltaNumberOfPeriods < 2",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". If this table is large, consider processing in smaller batches to improve performance and reduce locking."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating the table and resetting the identity column can lead to data integrity issues if not managed properly, especially if there are dependencies on the identity values."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not handle concurrency explicitly. If multiple instances of this procedure run simultaneously, it could lead to race conditions or data inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling. Any failures during execution could leave the database in an inconsistent state."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Dependencies",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The reliance on user-defined functions means that any changes to these functions could impact the procedure's behavior and results."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n--* 2019-03-12\tzd\testimate or actual calculation is updated\t\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_10_ProcessSinglePeriodMeterBilling]\r\nAS \r\n    BEGIN\r\n\t\r\n\t\r\n\t/*\r\n\tput single period data into ConEd.UploadConEdisonMeterSummary\r\n\t*/\r\n        BEGIN\r\n            TRUNCATE TABLE ConEd.UploadConEdisonMeterSummary\r\n            DBCC CHECKIDENT ('ConEd.[UploadConEdisonMeterSummary]', RESEED, 1)\r\n\r\n\r\n            INSERT  INTO ConEd.UploadConEdisonMeterSummary\r\n                    (AccountUtilityCompanySeqid\r\n                    ,OriginalAccountNumber\r\n                    ,OriginalMeterNumber\r\n                    ,BillingPeriod\r\n                    ,BillingPeriodRevision\r\n                    ,FirstCancelPeriod\r\n                    ,NumberOfTransactions\r\n                    ,NumberOfRebillTransactions\r\n                    ,NumberOfCancelTransactions\r\n                    ,BillingAction\r\n                    ,GasRateCode\r\n                    ,InitialCancelFromDate\r\n                    ,CurrentBillingToDate\r\n                    ,FromDate\r\n                    ,ToDate\r\n                    ,MeterFromReading\r\n                    ,MeterToReading\r\n                    ,Ccf\r\n                    ,Therms\r\n                    ,ThermsFactor\r\n                    ,MeterConstant\r\n                    ,TotalBillingDaysRebilled\r\n                    ,NumberOfBillingPeriods\r\n                    ,BillingDays\r\n                    ,BillingDate\r\n                    ,ReadingCode\r\n                    ,NumberOfDials\r\n                    ,MeterType\r\n                    ,ProcessEffectiveDate\r\n                    ,SpannedBillingPeriodRevision\r\n                    ,SpannedFirstCanceledBillingPeriod\r\n                    ,SpannedCCF\r\n                    ,SpannedThermFactor\r\n                    ,SpannedTherm\r\n                    ,SpannedMonthlyPercentage\r\n                    ,SpannedTotalPercentage\r\n                    ,AuthenticatedUserID\r\n                    ,Notes\r\n                    ,DateAdded\r\n                    ,LastUpdate\r\n                    ,InitialPostingDate\r\n                    ,EstimatedOrActualBilling\r\n                    ,AverageRebillThermsFactor\r\n                    ,PriorRevisedBilledCCF\r\n                    ,RevisedBilledCCF\r\n                    ,CanceledBilledCCF\r\n                    ,PriorRevisedBilledTherms\r\n                    ,RevisedBilledTherms\r\n                    ,CanceledBilledTherms\r\n                    ,FacilityName\r\n                    ,ServiceAddress\r\n                    )\r\n            SELECT  9 AS AccountUtilityCompanySeqid\r\n            ,       AccountNumber\r\n            ,       MeterNumber\r\n            ,       BillingPeriod\r\n            ,       CASE WHEN BillingPeriod < BillingPeriodRevision THEN BillingPeriod ELSE BillingPeriodRevision END AS BillingPeriodRevision\r\n            ,       CASE WHEN BillingPeriod < BillingPeriodRevision THEN BillingPeriod ELSE BillingPeriodRevision END AS FirstPeriodCanceled\r\n            ,       1 AS NumberOfTransactions\r\n            ,       1 AS NumberOfRebillTransactions\r\n            ,       0 AS NumberOfCancelTransactions\r\n            ,       CASE WHEN BillingPeriod = BillingPeriodRevision THEN 'O' ELSE 'A' END AS BillingAction\r\n            ,       [dbo].[DetermineConEdisonGetGasTariffRateFromAccountTable](AccountNumber, BillingPeriodRevision) AS GasRateCode\r\n            ,       FromDate\r\n            ,       ToDate\r\n            ,       FromDate\r\n            ,       ToDate\r\n            ,       FromReading AS FromMeterReading\r\n            ,       ToReading AS ToMeterReading\r\n            ,       CCF\r\n            ,       CAST(CCF * dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber, BillingPeriodRevision) + .501 AS INT) AS Therms\r\n            ,       dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber, BillingPeriodRevision) AS ThermFactor\r\n            ,       MeterConstant\r\n            ,       [dbo].[CalculateNumberOfBillingDays](FromDate, ToDate) AS TotalBillingDaysRebilled\r\n            ,       DeltaNumberOfPeriods AS NumberOfBillingPeriods\r\n            ,       [dbo].[CalculateNumberOfBillingDays](FromDate, ToDate) AS BillingDays\r\n            ,       [dbo].[ConvertDatetimeToYYYYMMDD](PostingDate) AS BillingDate\r\n            ,       ReadingCode\r\n            ,       Dials AS NumberOfDials\r\n            ,       'G' AS MeterType\r\n            ,       NULL AS ProcessEffectiveDate\r\n            ,       CASE WHEN BillingPeriod < BillingPeriodRevision THEN BillingPeriod ELSE BillingPeriodRevision END AS SpannedBillingPeriodRevision\r\n            ,       CASE WHEN BillingPeriod < BillingPeriodRevision THEN BillingPeriod ELSE BillingPeriodRevision END AS SpannedFirstCanceledBillingPeriod\r\n            ,       CCF AS SpannedCCF\r\n            ,       dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber, BillingPeriodRevision) AS SpannedThermFactor\r\n            ,       CAST(CCF * dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber, BillingPeriodRevision) + .501 AS INT) AS SpannedTherm\r\n            ,       1.0 AS SpannedMonthlyPercentage\r\n            ,       1.0 AS SpannedTotalPercentage\r\n            ,       1 AS AuthenticatedUserID\r\n            ,       NULL AS Notes\r\n            ,       GETDATE() AS DateAdded\r\n            ,       GETDATE() AS LastUpdate\r\n            ,       GETDATE() AS InitialPostingDate\r\n            --,       CASE WHEN ReadingCode < 15 THEN 'EST' ELSE 'ACT' END AS EstimatedOrActualBilling\r\n\t\t\t,\t\tdbo.CalculateEstimatedOrActual(ReadingCode,9) AS EstimatedOrActualBilling\r\n            ,       1.00 AS AverageRebillThermsFactor\r\n            ,       0 AS PriorRevisedBilledCCF\r\n            ,       0 AS RevisedBilledCCF\r\n            ,       0 AS CanceledBilledCCF\r\n            ,       0 AS PriorRevisedBilledTherms\r\n            ,       0 AS RevisedBilledTherms\r\n            ,       0 AS CanceledBilledTherms\r\n            ,       FacilityName\r\n            ,       ServiceAddress\r\n            FROM ConEd.UploadConEdisonMeter\r\n            WHERE   DeltaNumberOfPeriods < 2\r\n  \r\n        END -- ends  \r\n\r\n   \r\n\r\n    END"
        }
      ]
    }
  ]
}