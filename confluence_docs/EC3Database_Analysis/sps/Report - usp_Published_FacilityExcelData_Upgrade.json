{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Published_FacilityExcelData_Upgrade",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Published_FacilityExcelData_Upgrade",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to generate reports on energy usage and costs for facilities associated with a specific agency. It retrieves and processes data from a set of tables, calculates energy usage in BTUs, and formats the results based on the specified report type. The procedure logs the report usage and supports different types of energy data, including electricity, gas, steam, and their respective costs."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple conditional logic branches, data transformations, and calculations, which contribute to its medium complexity. It handles various types of energy data and formats the output accordingly, requiring a good understanding of the underlying data structures and business rules."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The email address of the user requesting the report. Used for logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The billing period for which the report is generated. It can be overridden if the user is an agency user."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AgencyCodeOEC AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The agency code used to filter the data for the report."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Type AS VARCHAR(50)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Specifies the type of report to generate (e.g., BTU, Electricity Usage, Gas Cost)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsAgencyUser BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether the user is an agency user. If true, the billing period is set to the current processing period."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to avoid locking issues and initializes the procedure name for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Period Adjustment",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the user is an agency user, the billing period is set to the current processing period from the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure logs the report request using the "
                },
                {
                  "type": "text",
                  "text": "Audit.usp_AddReportUsageLog",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " stored procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval and Transformation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Declares a table variable "
                        },
                        {
                          "type": "text",
                          "text": "@tbl",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to store intermediate results."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts data into "
                        },
                        {
                          "type": "text",
                          "text": "@tbl",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " by joining "
                        },
                        {
                          "type": "text",
                          "text": "Published.TemporalFiscalYearPivotByAgencyFacilityAndAccountDollarsAndUsage",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " with agency data and facility information."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Calculates energy usage in BTUs based on energy type using predefined multipliers."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Report Generation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Depending on the "
                },
                {
                  "type": "text",
                  "text": "@Type",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " parameter, the procedure selects and formats data from "
                },
                {
                  "type": "text",
                  "text": "@tbl",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to generate the desired report. It supports various report types, including energy usage, demand, and cost for electricity, gas, and steam."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The results are grouped and ordered by fiscal year, agency code, and facility number."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can improve performance by reducing locking but may lead to reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Variable",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a table variable ("
                },
                {
                  "type": "text",
                  "text": "@tbl",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") for intermediate storage is efficient for small to medium-sized datasets but may not perform well with large datasets due to lack of statistics and indexing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The multiple "
                },
                {
                  "type": "text",
                  "text": "IF",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " branches for different report types can lead to complex execution paths, potentially impacting performance if not optimized."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can result in dirty reads, which may affect the accuracy of the report if the underlying data is being modified concurrently."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may not scale well with large datasets due to the use of a table variable and lack of indexing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the input parameters are safe and does not include validation or sanitization, which could expose it to SQL injection risks if the inputs are not properly controlled."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_Published_FacilityExcelData_Upgrade]\n(\r\n\t@EmailAddress AS VARCHAR(75)\r\n\t,@PublishedBillingPeriod AS VARCHAR(6)\r\n\t,@AgencyCodeOEC AS VARCHAR(MAX)\r\n\t,@Type AS VARCHAR(50)\r\n\t,@IsAgencyUser BIT = 0\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @spname AS VARCHAR(100) = OBJECT_NAME(@@PROCID);\r\n\t\r\n\tIF (@IsAgencyUser = 1)\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = PublishedBillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\tEND;\r\n\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t\t@ReportName\t= @spname,\r\n\t\t@StoredProcName = @spname,\r\n\t\t@RequestedBy = @EmailAddress,    \r\n\t\t@prmPublishedBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmBillingPeriod = NULL,\r\n\t\t@prmAgency_ies = @AgencyCodeOEC,\r\n\t\t@prmFacilityNumber_s = NULL,\r\n\t\t@prmStartingBillingPeriod = NULL,\r\n\t\t@prmEndingBillingPeriod = NULL;\r\n\r\n\tDECLARE @CHWMultiplier AS FLOAT = 0.0223436, @ELEMultiplier AS FLOAT = 0.00341297\r\n\t\t,@STMMultiplier AS FLOAT = 1.11718000, @GASMultiplier AS FLOAT = 0.1;\r\n\r\n\tDECLARE @tbl TABLE\r\n\t\t(FacilityName VARCHAR(200),   \r\n\t\tPublishedBillingPeriod VARCHAR(6),\r\n\t\tAgencyCodeOEC VARCHAR(10),\r\n\t\tFiscalYearPivotByAgencyFacilityAndAccountDollarsAndUsageSeqid VARCHAR(10),\r\n\t\tBillToAgencyCode VARCHAR(10), \r\n\t\tAgencyName VARCHAR(200), \r\n\t\tOecFacilityNumber VARCHAR(10), \r\n\t\tAddress1 VARCHAR(200), \r\n\t\tFiscalYear VARCHAR(4), \r\n\t\tUtilityCompany VARCHAR(200), \r\n\t\tEnergyType VARCHAR(25), \r\n\t\tJulyRevisedBilledDollars MONEY, \r\n\t\tAugustRevisedBilledDollars MONEY, \r\n\t\tSeptemberRevisedBilledDollars MONEY, \r\n\t\tOctoberRevisedBilledDollars MONEY, \r\n\t\tNovemberRevisedBilledDollars MONEY, \r\n\t\tDecemberRevisedBilledDollars MONEY, \r\n\t\tJanuaryRevisedBilledDollars MONEY, \r\n\t\tFebruaryRevisedBilledDollars MONEY, \r\n\t\tMarchRevisedBilledDollars MONEY, \r\n\t\tAprilRevisedBilledDollars MONEY, \r\n\t\tMayRevisedBilledDollars MONEY, \r\n\t\tJuneRevisedBilledDollars MONEY, \r\n\t\tFiscalYearToDateRevisedBilledDollars MONEY,\r\n      \tJulyRevisedEnergy INT,\r\n\t\tAugustRevisedEnergy INT, \r\n\t\tSeptemberRevisedEnergy INT, \r\n\t\tOctoberRevisedEnergy INT, \r\n\t\tNovemberRevisedEnergy INT, \r\n\t\tDecemberRevisedEnergy INT, \r\n\t\tJanuaryRevisedEnergy INT, \r\n\t\tFebruaryRevisedEnergy INT, \r\n\t\tMarchRevisedEnergy INT, \r\n\t\tAprilRevisedEnergy INT, \r\n\t\tMayRevisedEnergy INT, \r\n\t\tJuneRevisedEnergy INT, \r\n\t\tFiscalYearToDateRevisedEnergy INT, \r\n\t\tJulyRevisedDemand NUMERIC(38, 2), \r\n\t\tAugustRevisedDemand NUMERIC(38, 2), \r\n\t\tSeptemberRevisedDemand NUMERIC(38, 2), \r\n\t\tOctoberRevisedDemand NUMERIC(38, 2), \r\n\t\tNovemberRevisedDemand NUMERIC(38, 2), \r\n\t\tDecemberRevisedDemand NUMERIC(38, 2), \r\n\t\tJanuaryRevisedDemand NUMERIC(38, 2), \r\n\t\tFebruaryRevisedDemand NUMERIC(38, 2), \r\n\t\tMarchRevisedDemand NUMERIC(38, 2), \r\n\t\tAprilRevisedDemand NUMERIC(38, 2), \r\n\t\tMayRevisedDemand NUMERIC(38, 2), \r\n\t\tJuneRevisedDemand NUMERIC(38, 2), \r\n\t\tFiscalYearToDateRevisedDemand NUMERIC(38, 2), \r\n\t\tLastUpdate DATETIME,\r\n\t\tJulyRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tAugustRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tSeptemberRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tOctoberRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tNovemberRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tDecemberRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tJanuaryRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tFebruaryRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tMarchRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tAprilRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tMayRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tJuneRevisedEnergyBTU NUMERIC(38, 2),\r\n\t\tFiscalYearToDateRevisedEnergyBTU NUMERIC(38, 2));\r\n\r\n    INSERT INTO @tbl\r\n\tSELECT FA.FacilityName,   \r\n\t\t@PublishedBillingPeriod AS PublishedBillingPeriod, \r\n\t\tFA.AgencyCodeOEC, \r\n\t\tFA.Seqid AS FiscalYearPivotByAgencyFacilityAndAccountDollarsAndUsageSeqid, \r\n\t\tFA.BillToAgencyCode, \r\n\t\tFA.AgencyName, \r\n\t\tFA.OecFacilityNumber, \r\n\t\tFA.Address1 + CASE WHEN F.FacilityName <> 'Unassigned' THEN ' [' + F.FacilityName + ']' ELSE '' END AS Address1, \r\n\t\tFA.FiscalYear, \r\n\t\tFA.UtilityCompany, \r\n\t\tFA.EnergyType, \r\n\t\tFA.JulyRevisedBilledDollars, \r\n\t\tFA.AugustRevisedBilledDollars, \r\n\t\tFA.SeptemberRevisedBilledDollars, \r\n\t\tFA.OctoberRevisedBilledDollars, \r\n\t\tFA.NovemberRevisedBilledDollars, \r\n\t\tFA.DecemberRevisedBilledDollars, \r\n\t\tFA.JanuaryRevisedBilledDollars, \r\n\t\tFA.FebruaryRevisedBilledDollars, \r\n\t\tFA.MarchRevisedBilledDollars, \r\n\t\tFA.AprilRevisedBilledDollars, \r\n\t\tFA.MayRevisedBilledDollars, \r\n\t\tFA.JuneRevisedBilledDollars, \r\n\t\tFA.FiscalYearToDateRevisedBilledDollars, \r\n\t\tFA.JulyRevisedEnergy, \r\n\t\tFA.AugustRevisedEnergy, \r\n\t\tFA.SeptemberRevisedEnergy, \r\n\t\tFA.OctoberRevisedEnergy, \r\n\t\tFA.NovemberRevisedEnergy, \r\n\t\tFA.DecemberRevisedEnergy, \r\n\t\tFA.JanuaryRevisedEnergy, \r\n\t\tFA.FebruaryRevisedEnergy, \r\n\t\tFA.MarchRevisedEnergy, \r\n\t\tFA.AprilRevisedEnergy, \r\n\t\tFA.MayRevisedEnergy, \r\n\t\tFA.JuneRevisedEnergy, \r\n\t\tFA.FiscalYearToDateRevisedEnergy, \r\n\t\tFA.JulyRevisedDemand, \r\n\t\tFA.AugustRevisedDemand, \r\n\t\tFA.SeptemberRevisedDemand, \r\n\t\tFA.OctoberRevisedDemand, \r\n\t\tFA.NovemberRevisedDemand, \r\n\t\tFA.DecemberRevisedDemand, \r\n\t\tFA.JanuaryRevisedDemand, \r\n\t\tFA.FebruaryRevisedDemand, \r\n\t\tFA.MarchRevisedDemand, \r\n\t\tFA.AprilRevisedDemand, \r\n\t\tFA.MayRevisedDemand, \r\n\t\tFA.JuneRevisedDemand, \r\n\t\tFA.FiscalYearToDateRevisedDemand, \r\n\t\tFA.LastUpdate,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.JulyRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.JulyRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.JulyRevisedEnergy * @STMMultiplier\r\n\t\tEND AS JulyRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.AugustRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.AugustRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.AugustRevisedEnergy * @STMMultiplier\r\n\t\tEND AS AugustRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.SeptemberRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.SeptemberRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.SeptemberRevisedEnergy * @STMMultiplier\r\n\t\tEND AS SeptemberRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.OctoberRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.OctoberRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.OctoberRevisedEnergy * @STMMultiplier\r\n\t\tEND AS OctoberRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.NovemberRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.NovemberRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.NovemberRevisedEnergy * @STMMultiplier\r\n\t\tEND AS NovemberRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.DecemberRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.DecemberRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.DecemberRevisedEnergy * @STMMultiplier\r\n\t\tEND AS DecemberRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.JanuaryRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.JanuaryRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.JanuaryRevisedEnergy * @STMMultiplier\r\n\t\tEND AS JanuaryRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.FebruaryRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.FebruaryRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.FebruaryRevisedEnergy * @STMMultiplier\r\n\t\tEND AS FebruaryRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.MarchRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.MarchRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.MarchRevisedEnergy * @STMMultiplier\r\n\t\tEND AS MarchRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.AprilRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.AprilRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.AprilRevisedEnergy * @STMMultiplier\r\n\t\tEND AS AprilRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.MayRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.MayRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.MayRevisedEnergy * @STMMultiplier\r\n\t\tEND AS MayRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.JuneRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.JuneRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.JuneRevisedEnergy * @STMMultiplier\r\n\t\tEND AS JuneRevisedEnergyBTU,\r\n\t\tCASE WHEN FA.EnergyType = 'ELE' THEN FA.FiscalYearToDateRevisedEnergy * @ELEMultiplier \r\n\t\t\tWHEN FA.EnergyType = 'GAS' THEN FA.FiscalYearToDateRevisedEnergy * @GASMultiplier\r\n\t\t\tWHEN FA.EnergyType = 'STM' THEN FA.FiscalYearToDateRevisedEnergy * @STMMultiplier\r\n\t\tEND AS FiscalYearToDateRevisedEnergyBTU\r\n\tFROM Published.TemporalFiscalYearPivotByAgencyFacilityAndAccountDollarsAndUsage AS FA \r\n\t\tINNER JOIN Billing.uftn_TableGetAgencyChildrenByAgencyCodeOEC(@AgencyCodeOEC,@EmailAddress) AS A ON FA.AgencyCodeOEC = A.AgencyCodeOEC\r\n\t\tLEFT JOIN Billing.Facility AS F ON FA.OecFacilityNumber = F.OecFacilityNumber\t\t\t\t\r\n\tWHERE FA.EffectiveStartPeriod <= @PublishedBillingPeriod AND FA.EffectiveEndPeriod > @PublishedBillingPeriod;\r\n\r\n\tIF (@Type = 'BTU')\r\n\tBEGIN\r\n\t\tSELECT OecFacilityNumber\r\n\t\t\t,Address1\r\n\t\t\t,FiscalYear\r\n\t\t\t,@Type AS EnergyType\r\n\t\t\t,AgencyCodeOEC,AgencyName\r\n\t\t\t,FORMAT(SUM(JulyRevisedEnergyBTU), 'N2') AS July\r\n\t\t\t,FORMAT(SUM(AugustRevisedEnergyBTU), 'N2') AS August\r\n\t\t\t,FORMAT(SUM(SeptemberRevisedEnergyBTU), 'N2') AS September\r\n\t\t\t,FORMAT(SUM(OctoberRevisedEnergyBTU), 'N2') AS October\r\n\t\t\t,FORMAT(SUM(NovemberRevisedEnergyBTU), 'N2') AS November\r\n\t\t\t,FORMAT(SUM(DecemberRevisedEnergyBTU), 'N2') AS December\r\n\t\t\t,FORMAT(SUM(JanuaryRevisedEnergyBTU), 'N2') AS January\r\n\t\t\t,FORMAT(SUM(FebruaryRevisedEnergyBTU), 'N2') AS February\r\n\t\t\t,FORMAT(SUM(MarchRevisedEnergyBTU), 'N2') AS March\r\n\t\t\t,FORMAT(SUM(AprilRevisedEnergyBTU), 'N2') AS April\r\n\t\t\t,FORMAT(SUM(MayRevisedEnergyBTU), 'N2') AS May\r\n\t\t\t,FORMAT(SUM(JuneRevisedEnergyBTU), 'N2') AS June\r\n\t\t\t,FORMAT(SUM(FiscalYearToDateRevisedEnergyBTU), 'N2') AS YearToDate\t\t\t\r\n\t\tFROM @tbl\r\n\t\tGROUP BY OecFacilityNumber, FiscalYear, AgencyCodeOEC, Address1, FiscalYear, AgencyName\r\n\t\tORDER BY FiscalYear DESC, AgencyCodeOEC DESC, OecFacilityNumber;\r\n\tEND;\r\n\tELSE IF (@Type = 'Electricity Usage (kWh)')\r\n\tBEGIN\r\n\t\tSELECT OecFacilityNumber\r\n\t\t\t,Address1\r\n\t\t\t,FiscalYear\r\n\t\t\t,@Type AS EnergyType\r\n\t\t\t,AgencyCodeOEC,AgencyName\r\n\t\t\t,FORMAT(SUM(FiscalYearToDateRevisedEnergy), 'N2') AS YearToDate\r\n\t\t\t,FORMAT(SUM(JulyRevisedEnergy), 'N2') AS July\r\n\t\t\t,FORMAT(SUM(AugustRevisedEnergy), 'N2') AS August\r\n\t\t\t,FORMAT(SUM(SeptemberRevisedEnergy), 'N2') AS September\r\n\t\t\t,FORMAT(SUM(OctoberRevisedEnergy), 'N2') AS October\r\n\t\t\t,FORMAT(SUM(NovemberRevisedEnergy), 'N2') AS November\r\n\t\t\t,FORMAT(SUM(DecemberRevisedEnergy), 'N2') AS December\r\n\t\t\t,FORMAT(SUM(JanuaryRevisedEnergy), 'N2') AS January\r\n\t\t\t,FORMAT(SUM(FebruaryRevisedEnergy), 'N2') AS February\r\n\t\t\t,FORMAT(SUM(MarchRevisedEnergy), 'N2') AS March\r\n\t\t\t,FORMAT(SUM(AprilRevisedEnergy), 'N2') AS April\r\n\t\t\t,FORMAT(SUM(MayRevisedEnergy), 'N2') AS May\r\n\t\t\t,FORMAT(SUM(JuneRevisedEnergy), 'N2') AS June\t\t\t\t\r\n\t\tFROM @tbl WHERE EnergyType = 'ELE'\r\n\t\tGROUP BY OecFacilityNumber, FiscalYear, AgencyCodeOEC, Address1, FiscalYear, AgencyName\r\n\t\tORDER BY FiscalYear DESC, AgencyCodeOEC DESC, OecFacilityNumber;\r\n\tEND;\r\n\tELSE IF (@Type = 'Electricity Demand (kW)')\r\n\tBEGIN\r\n\t\tSELECT OecFacilityNumber\r\n\t\t\t,Address1\r\n\t\t\t,FiscalYear\r\n\t\t\t,@Type AS EnergyType\r\n\t\t\t,AgencyCodeOEC,AgencyName\r\n\t\t\t,FORMAT(SUM(FiscalYearToDateRevisedDemand), 'N2') AS YearToDate\r\n\t\t\t,FORMAT(SUM(JulyRevisedDemand), 'N2') AS July\r\n\t\t\t,FORMAT(SUM(AugustRevisedDemand), 'N2') AS August\r\n\t\t\t,FORMAT(SUM(SeptemberRevisedDemand), 'N2') AS September\r\n\t\t\t,FORMAT(SUM(OctoberRevisedDemand), 'N2') AS October\r\n\t\t\t,FORMAT(SUM(NovemberRevisedDemand), 'N2') AS November\r\n\t\t\t,FORMAT(SUM(DecemberRevisedDemand), 'N2') AS December\r\n\t\t\t,FORMAT(SUM(JanuaryRevisedDemand), 'N2') AS January\r\n\t\t\t,FORMAT(SUM(FebruaryRevisedDemand), 'N2') AS February\r\n\t\t\t,FORMAT(SUM(MarchRevisedDemand), 'N2') AS March\r\n\t\t\t,FORMAT(SUM(AprilRevisedDemand), 'N2') AS April\r\n\t\t\t,FORMAT(SUM(MayRevisedDemand), 'N2') AS May\r\n\t\t\t,FORMAT(SUM(JuneRevisedDemand), 'N2') AS June\r\n\t\tFROM @tbl WHERE EnergyType = 'ELE' \r\n\t\tGROUP BY OecFacilityNumber, FiscalYear, AgencyCodeOEC, Address1, FiscalYear, AgencyName\r\n\t\tORDER BY FiscalYear DESC, AgencyCodeOEC DESC, OecFacilityNumber;\r\n\tEND;\r\n\tELSE IF (@Type = 'Gas (Therms)')\r\n\tBEGIN\r\n\t\tSELECT OecFacilityNumber\r\n\t\t\t,Address1\r\n\t\t\t,FiscalYear\r\n\t\t\t,@Type AS EnergyType\r\n\t\t\t,AgencyCodeOEC\r\n\t\t\t,AgencyName\r\n\t\t\t,FORMAT(SUM(FiscalYearToDateRevisedEnergy), 'N2') AS YearToDate\r\n\t\t\t,FORMAT(SUM(JulyRevisedEnergy), 'N2') AS July\r\n\t\t\t,FORMAT(SUM(AugustRevisedEnergy), 'N2') AS August\r\n\t\t\t,FORMAT(SUM(SeptemberRevisedEnergy), 'N2') AS September\r\n\t\t\t,FORMAT(SUM(OctoberRevisedEnergy), 'N2') AS October\r\n\t\t\t,FORMAT(SUM(NovemberRevisedEnergy), 'N2') AS November\r\n\t\t\t,FORMAT(SUM(DecemberRevisedEnergy), 'N2') AS December\r\n\t\t\t,FORMAT(SUM(JanuaryRevisedEnergy), 'N2') AS January\r\n\t\t\t,FORMAT(SUM(FebruaryRevisedEnergy), 'N2') AS February\r\n\t\t\t,FORMAT(SUM(MarchRevisedEnergy), 'N2') AS March\r\n\t\t\t,FORMAT(SUM(AprilRevisedEnergy), 'N2') AS April\r\n\t\t\t,FORMAT(SUM(MayRevisedEnergy), 'N2') AS May\r\n\t\t\t,FORMAT(SUM(JuneRevisedEnergy), 'N2') AS June\t\t\t\t\r\n\t\tFROM @tbl WHERE EnergyType = 'GAS'\r\n\t\tGROUP BY OecFacilityNumber, FiscalYear, AgencyCodeOEC, Address1, FiscalYear, AgencyName\r\n\t\tORDER BY FiscalYear DESC, AgencyCodeOEC DESC, OecFacilityNumber;\r\n\tEND;\r\n\tELSE IF (@Type = 'Steam (MLbs)')\r\n\tBEGIN\r\n\t\tSELECT OecFacilityNumber\r\n\t\t\t,Address1\r\n\t\t\t,FiscalYear\r\n\t\t\t,@Type AS EnergyType\r\n\t\t\t,AgencyCodeOEC\r\n\t\t\t,AgencyName\r\n\t\t\t,FORMAT(SUM(FiscalYearToDateRevisedEnergy), 'N2') AS YearToDate\r\n\t\t\t,FORMAT(SUM(JulyRevisedEnergy), 'N2') AS July\r\n\t\t\t,FORMAT(SUM(AugustRevisedEnergy), 'N2') AS August\r\n\t\t\t,FORMAT(SUM(SeptemberRevisedEnergy), 'N2') AS September\r\n\t\t\t,FORMAT(SUM(OctoberRevisedEnergy), 'N2') AS October\r\n\t\t\t,FORMAT(SUM(NovemberRevisedEnergy), 'N2') AS November\r\n\t\t\t,FORMAT(SUM(DecemberRevisedEnergy), 'N2') AS December\r\n\t\t\t,FORMAT(SUM(JanuaryRevisedEnergy), 'N2') AS January\r\n\t\t\t,FORMAT(SUM(FebruaryRevisedEnergy), 'N2') AS February\r\n\t\t\t,FORMAT(SUM(MarchRevisedEnergy), 'N2') AS March\r\n\t\t\t,FORMAT(SUM(AprilRevisedEnergy), 'N2') AS April\r\n\t\t\t,FORMAT(SUM(MayRevisedEnergy), 'N2') AS May\r\n\t\t\t,FORMAT(SUM(JuneRevisedEnergy), 'N2') AS June\t\t\t\t\r\n\t\tFROM @tbl WHERE EnergyType = 'STM'\r\n\t\tGROUP BY OecFacilityNumber, FiscalYear, AgencyCodeOEC, Address1, FiscalYear, AgencyName\r\n\t\tORDER BY FiscalYear DESC, AgencyCodeOEC DESC, OecFacilityNumber;\r\n\tEND;\r\n\tELSE IF (@Type = 'Electricity Cost ($)')\r\n\tBEGIN\r\n\t\tSELECT OecFacilityNumber\r\n\t\t\t,Address1\r\n\t\t\t,FiscalYear\r\n\t\t\t,@Type AS EnergyType\r\n\t\t\t,AgencyCodeOEC\r\n\t\t\t,AgencyName\r\n\t\t\t,FORMAT(SUM(FiscalYearToDateRevisedBilledDollars), 'C') AS YearToDate\r\n\t\t\t,FORMAT(SUM(JulyRevisedBilledDollars), 'C') AS July\r\n\t\t\t,FORMAT(SUM(AugustRevisedBilledDollars), 'C') AS August\r\n\t\t\t,FORMAT(SUM(SeptemberRevisedBilledDollars), 'C') AS September\r\n\t\t\t,FORMAT(SUM(OctoberRevisedBilledDollars), 'C') AS October\r\n\t\t\t,FORMAT(SUM(NovemberRevisedBilledDollars), 'C') AS November\r\n\t\t\t,FORMAT(SUM(DecemberRevisedBilledDollars), 'C') AS December\r\n\t\t\t,FORMAT(SUM(JanuaryRevisedBilledDollars), 'C') AS January\r\n\t\t\t,FORMAT(SUM(FebruaryRevisedBilledDollars), 'C') AS February\r\n\t\t\t,FORMAT(SUM(MarchRevisedBilledDollars), 'C') AS March\r\n\t\t\t,FORMAT(SUM(AprilRevisedBilledDollars), 'C') AS April\r\n\t\t\t,FORMAT(SUM(MayRevisedBilledDollars), 'C') AS May\r\n\t\t\t,FORMAT(SUM(JuneRevisedBilledDollars), 'C') AS June\t\t\t\t\r\n\t\tFROM @tbl WHERE EnergyType = 'ELE' \r\n\t\tGROUP BY OecFacilityNumber, FiscalYear, AgencyCodeOEC, Address1, FiscalYear, AgencyName\r\n\t\tORDER BY FiscalYear DESC, AgencyCodeOEC DESC, OecFacilityNumber;\r\n\tEND;\r\n\tELSE IF (@Type = 'Gas Cost ($)')\r\n\tBEGIN\r\n\t\tSELECT OecFacilityNumber\r\n\t\t\t,Address1\r\n\t\t\t,FiscalYear\r\n\t\t\t,@Type AS EnergyType\r\n\t\t\t,AgencyCodeOEC\r\n\t\t\t,AgencyName\r\n\t\t\t,FORMAT(SUM(FiscalYearToDateRevisedBilledDollars), 'C') AS YearToDate\r\n\t\t\t,FORMAT(SUM(JulyRevisedBilledDollars), 'C') AS July\r\n\t\t\t,FORMAT(SUM(AugustRevisedBilledDollars), 'C') AS August\r\n\t\t\t,FORMAT(SUM(SeptemberRevisedBilledDollars), 'C') AS September\r\n\t\t\t,FORMAT(SUM(OctoberRevisedBilledDollars), 'C') AS October\r\n\t\t\t,FORMAT(SUM(NovemberRevisedBilledDollars), 'C') AS November\r\n\t\t\t,FORMAT(SUM(DecemberRevisedBilledDollars), 'C') AS December\r\n\t\t\t,FORMAT(SUM(JanuaryRevisedBilledDollars), 'C') AS January\r\n\t\t\t,FORMAT(SUM(FebruaryRevisedBilledDollars), 'C') AS February\r\n\t\t\t,FORMAT(SUM(MarchRevisedBilledDollars), 'C') AS March\r\n\t\t\t,FORMAT(SUM(AprilRevisedBilledDollars), 'C') AS April\r\n\t\t\t,FORMAT(SUM(MayRevisedBilledDollars), 'C') AS May\r\n\t\t\t,FORMAT(SUM(JuneRevisedBilledDollars), 'C') AS June\t\t\t\t\r\n\t\tFROM @tbl WHERE EnergyType = 'GAS'\r\n\t\tGROUP BY OecFacilityNumber, FiscalYear, AgencyCodeOEC, Address1, FiscalYear, AgencyName\r\n\t\tORDER BY FiscalYear DESC, AgencyCodeOEC DESC, OecFacilityNumber;\r\n\tEND;\r\n\tELSE IF (@Type = 'Steam Cost ($)')\r\n\tBEGIN\r\n\t\tSELECT OecFacilityNumber\r\n\t\t\t,Address1\r\n\t\t\t,FiscalYear\r\n\t\t\t,@Type AS EnergyType\r\n\t\t\t,AgencyCodeOEC\r\n\t\t\t,AgencyName\r\n\t\t\t,FORMAT(SUM(FiscalYearToDateRevisedBilledDollars), 'C') AS YearToDate\r\n\t\t\t,FORMAT(SUM(JulyRevisedBilledDollars), 'C') AS July\r\n\t\t\t,FORMAT(SUM(AugustRevisedBilledDollars), 'C') AS August\r\n\t\t\t,FORMAT(SUM(SeptemberRevisedBilledDollars), 'C') AS September\r\n\t\t\t,FORMAT(SUM(OctoberRevisedBilledDollars), 'C') AS October\r\n\t\t\t,FORMAT(SUM(NovemberRevisedBilledDollars), 'C') AS November\r\n\t\t\t,FORMAT(SUM(DecemberRevisedBilledDollars), 'C') AS December\r\n\t\t\t,FORMAT(SUM(JanuaryRevisedBilledDollars), 'C') AS January\r\n\t\t\t,FORMAT(SUM(FebruaryRevisedBilledDollars), 'C') AS February\r\n\t\t\t,FORMAT(SUM(MarchRevisedBilledDollars), 'C') AS March\r\n\t\t\t,FORMAT(SUM(AprilRevisedBilledDollars), 'C') AS April\r\n\t\t\t,FORMAT(SUM(MayRevisedBilledDollars), 'C') AS May\r\n\t\t\t,FORMAT(SUM(JuneRevisedBilledDollars), 'C') AS June\t\t\t\t\r\n\t\tFROM @tbl WHERE EnergyType = 'STM'\r\n\t\tGROUP BY OecFacilityNumber, FiscalYear, AgencyCodeOEC, Address1, FiscalYear, AgencyName\r\n\t\tORDER BY FiscalYear DESC, AgencyCodeOEC DESC, OecFacilityNumber;\r\n\tEND;\r\n\tELSE IF (@Type = 'Total Cost ($)')\r\n\tBEGIN\r\n\t\tSELECT OecFacilityNumber\r\n\t\t\t,Address1\r\n\t\t\t,FiscalYear\r\n\t\t\t,@Type AS EnergyType\r\n\t\t\t,AgencyCodeOEC\r\n\t\t\t,AGencyName\r\n\t\t\t,FORMAT(SUM(FiscalYearToDateRevisedBilledDollars), 'C') AS YearToDate\r\n\t\t\t,FORMAT(SUM(JulyRevisedBilledDollars), 'C') AS July\r\n\t\t\t,FORMAT(SUM(AugustRevisedBilledDollars), 'C') AS August\r\n\t\t\t,FORMAT(SUM(SeptemberRevisedBilledDollars), 'C') AS September\r\n\t\t\t,FORMAT(SUM(OctoberRevisedBilledDollars), 'C') AS October\r\n\t\t\t,FORMAT(SUM(NovemberRevisedBilledDollars), 'C') AS November\r\n\t\t\t,FORMAT(SUM(DecemberRevisedBilledDollars), 'C') AS December\r\n\t\t\t,FORMAT(SUM(JanuaryRevisedBilledDollars), 'C') AS January\r\n\t\t\t,FORMAT(SUM(FebruaryRevisedBilledDollars), 'C') AS February\r\n\t\t\t,FORMAT(SUM(MarchRevisedBilledDollars), 'C') AS March\r\n\t\t\t,FORMAT(SUM(AprilRevisedBilledDollars), 'C') AS April\r\n\t\t\t,FORMAT(SUM(MayRevisedBilledDollars), 'C') AS May\r\n\t\t\t,FORMAT(SUM(JuneRevisedBilledDollars), 'C') AS June\t\t\t\t\r\n\t\tFROM @tbl\r\n\t\tGROUP BY OecFacilityNumber, FiscalYear, AgencyCodeOEC, Address1, FiscalYear, AgencyName\r\n\t\tORDER BY FiscalYear DESC\r\n\t\t\t,AgencyCodeOEC DESC\r\n\t\t\t,OecFacilityNumber;\t\t\t\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}