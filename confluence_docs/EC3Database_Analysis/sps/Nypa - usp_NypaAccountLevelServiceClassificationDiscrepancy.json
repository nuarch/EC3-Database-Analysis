{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_NypaAccountLevelServiceClassificationDiscrepancy",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_NypaAccountLevelServiceClassificationDiscrepancy",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to automate the process of identifying and resolving discrepancies in account-level service classifications for Con Edison. It performs several operations, including identifying discrepancies, updating account information, and managing temporary data for further updates. The procedure also includes a step to select data for common usage, which is intended to be replaced by a view."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple steps, including data insertion, updates, and temporary table management. It interacts with several tables and performs conditional logic to identify and resolve discrepancies. The complexity arises from the need to coordinate these operations and ensure data integrity across multiple tables."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure does not explicitly define input parameters in its signature. However, it uses local variables such as "
                },
                {
                  "type": "text",
                  "text": "@CurrentInvoiceAccountGroup",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "@UtilityCompanySeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "@BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to control its logic."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Identify Discrepancies",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Inserts records into "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountLevelServiceClassificationDiscrepancy",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for accounts with discrepancies in service classification, based on differences in time-of-day account status or tariff codes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Retrieve Billing Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Selects the billing period from "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAAccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to use in subsequent updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Accounts",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with new tariff rate information and other details for accounts identified with discrepancies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Mark Accounts as Updated",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates the "
                },
                {
                  "type": "text",
                  "text": "AccountLevelServiceClassificationDiscrepancy",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table to mark accounts as updated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Manage Temporary Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Drops and recreates a temporary table "
                },
                {
                  "type": "text",
                  "text": "#MinFromDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to store the minimum effective date for tariff updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Effective Dates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates accounts with new tariff effective dates based on the temporary data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Select for Common Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Selects data from a view for further usage, intended to be replaced by a more permanent solution."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Index Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved, especially those with large datasets like "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", have appropriate indexes to optimize join and where clause performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Table Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a temporary table ("
                },
                {
                  "type": "text",
                  "text": "#MinFromDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") can be resource-intensive if not managed properly. Ensure that the server has adequate resources to handle temporary table operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure updates multiple tables, which could lead to locking issues in a high-concurrency environment. Consider transaction management and isolation levels to mitigate this."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAAccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and related tables is accurate and up-to-date. Any discrepancies in source data could propagate errors."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling. Consider adding try-catch blocks or error logging to capture and manage exceptions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of this procedure may degrade, especially if indexes are not optimized or if the server resources are limited."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses hardcoded values (e.g., "
                },
                {
                  "type": "text",
                  "text": "UtilityCompanySeqid = 7",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "), which reduces flexibility and may require changes if business rules or data structures change."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE   PROCEDURE [Nypa].[usp_NypaAccountLevelServiceClassificationDiscrepancy]\nAS\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Automate the account level service classification discrepancy for con edison.\r\n--*\r\n--*\t\t\t1. Identify current period Account Level Service Classification Discrepancies\r\n--\t\t\t2. Get the BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\t\t\t3. Update account with new UtilityTariffRateInformation\r\n--\t\t\t4. Update AccountLevelServiceClassificationDiscrepancy with AccountIsUpdated = 'Y' for all of the accounts that were changed.\r\n--\t\t\t5. Drop temp table #MinFromDate if it exists and recreate it\r\n--\t\t\t6. Update account with new Tariff Effective Date from upload data based upon the minimum from date of the billing\r\n--\t\t\t7. A view for common usage.\r\n--*               \r\n--* Exec:   [Nypa].[usp_NypaAccountLevelServiceClassificationDiscrepancy]\r\n--*\r\n--* Parameter(s):         @Status int output\r\n--*\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   08/16/2011\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 08/16/2011 PAH  First Version \r\n--* 2020-08-31  ZD\tEdited compare logic to find out discrepancies\r\n--**************************************************************************************\r\n\r\n--**************************************************************************************\r\n--Declare Variables\r\n--**************************************************************************************\r\n--\r\ndeclare @CurrentInvoiceAccountGroup int = 1\r\ndeclare @UtilityCompanySeqid int = 7\r\ndeclare @BillingPeriod varchar(6)\r\n\r\n--**************************************************************************************\r\n--Main Process\r\n--**************************************************************************************\r\nBEGIN\r\n--\r\n--\t\t\t1. Identify current period Account Level Service Classification Discrepancies\r\n--\r\ninsert  into  Billing.AccountLevelServiceClassificationDiscrepancy\r\n\t\t(CurrentInvoiceAccountGroup,UtilityTariffRateInformationSeqid, BillingPeriod, CurrentAccountNumber, AccountSeqid, \r\n\t\tUtilityServiceAddress, UtilityCompanyShortDesc, AgencyCodeOEC, AgencyShortDesc, OecFacilityNumber, FacilityName, Address1, \r\n\t\tBudgetRateClassDescription, Description, ShortDesc, AccountStatus, AccountStatusCodePeriod, IsTimeOfDayAccount, DeliveryTariffRate, TariffCode, \r\n\t\tUtilityCompanySeqid, IsTOD, AuthenticatedUserID, Notes, DateAdded, LastUpdate)\r\n--\r\nSELECT DISTINCT \r\n                      Billing.Account.CurrentInvoiceAccountGroup,Billing.Account.UtilityTariffRateInformationSeqid,Nypa.UploadNYPAAccountBilling.BillingPeriod, Billing.Account.CurrentAccountNumber,Billing.Account.AccountSeqid, Billing.Account.UtilityServiceAddress, \r\n                      Billing.UtilityCompany.ShortDesc AS UtilityCompanyShortDesc, Billing.AgencyDivision.AgencyCodeOEC, Billing.AgencyDivision.AgencyShortDesc, \r\n                      Billing.Facility.OecFacilityNumber, Billing.Facility.FacilityName, Billing.Facility.Address1, \r\n                      Billing.UtilityTariffRateInformation.BudgetRateClassDescription, Billing.UtilityTariffRateInformation.Description, \r\n                      Billing.UtilityTariffRateInformation.ShortDesc, Billing.Account.AccountStatus, Billing.Account.AccountStatusCodePeriod, Billing.Account.IsTimeOfDayAccount, \r\n                      Billing.UtilityTariffRateInformation.DeliveryTariffRate, SUBSTRING(Nypa.UploadNYPAAccountBilling.ProductionAndDeliveryTariff, 9, 3) as TariffCode, 7 AS UtilityCompanySeqid, Nypa.UploadNYPAAccountBilling.IsTimeOfDayAccount AS IsTOD,\r\n                      1,null,getdate(),getdate()\r\nFROM Billing.Account\r\n    INNER JOIN Nypa.UploadNYPAAccountBilling\r\n        ON Account.CurrentAccountNumber = UploadNYPAAccountBilling.CurrentAccountNumber\r\n    INNER JOIN Billing.UtilityTariffRateInformation\r\n        ON UtilityTariffRateInformation.UtilityTariffRateInformationSeqid = Account.UtilityTariffRateInformationSeqid\r\n    INNER JOIN Billing.AgencyDivision\r\n        ON Account.AgencyAccount = AgencyDivisionSeqid\r\n    INNER JOIN Billing.Facility\r\n        ON FacilityAccount = FacilitySeqid\r\n    INNER JOIN Billing.UtilityCompany\r\n        ON UtilityAccountProvider = UtilityCompany.UtilityCompanySeqid\r\n           AND UtilityCompanyTariff = UtilityCompany.UtilityCompanySeqid\r\n  \r\nWHERE CurrentInvoiceAccountGroup = 1\r\n\r\nAND ( UploadNYPAAccountBilling.IsTimeOfDayAccount <> Account.IsTimeOfDayAccount OR (SUBSTRING(ProductionAndDeliveryTariff, 9, 3) <> UtilityTariffRateInformation.DeliveryTariffRate) )\r\nAND IsCurrentRecord= 'Y'\r\n\r\n\r\n--\t\t\t2. Get the BillingPeriod from ConEd.UploadConEdisonAccount\r\n--\r\nSELECT  top 1   @BillingPeriod = BillingPeriod from Nypa.UploadNYPAAccountBilling\r\n--\r\n--\t\t\t3. Update account with new UtilityTariffRateInformation\r\n--\r\nUPDATE    Billing.Account\r\nSET              \r\n\t\tUtilityTariffRateInformationSeqid =Billing.UtilityTariffRateInformation.UtilityTariffRateInformationSeqid, \r\n\t\tIsTimeOfDayAccount =Billing.UtilityTariffRateInformation.IsTod, \r\n\t\tDeliveryTariffRate =Billing.UtilityTariffRateInformation.DeliveryTariffRate, \r\n\t\tCommodityTariffRate =Billing.UtilityTariffRateInformation.DeliveryTariffRate, \r\n\t\tAccountStatusCodePeriod = @BillingPeriod, \r\n\t\tFireAuditTrigger = 'Y', \r\n\t\tNotes = 'Automated Service Classification update', \r\n\t\tAuthenticatedUserID = 1, \r\n\t\tLastUpdate = GETDATE()\r\nFROM \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy INNER JOIN\r\n\t\tBilling.Account ON Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n\t\tBilling.UtilityTariffRateInformation ON \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.TariffCode = Billing.UtilityTariffRateInformation.DeliveryTariffRate AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.UtilityCompanySeqid = Billing.UtilityTariffRateInformation.UtilityCompanyTariff AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.IsTOD = Billing.UtilityTariffRateInformation.IsTod\r\nWHERE \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod) AND \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup) and\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.AccountIsUpdated = 'N')\r\n--\r\n--\t\t\t4. Update AccountLevelServiceClassificationDiscrepancy with AccountIsUpdated = 'Y' for all of the accounts that were changed.\r\n--\r\nupdate\tBilling.AccountLevelServiceClassificationDiscrepancy\r\nSET              \r\n\t\tAccountIsUpdated = 'Y',\r\n\t\tDeliveryTariffRateExistsInEC3 = 'Y'\r\nFROM \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy INNER JOIN\r\n\t\tBilling.Account ON Billing.AccountLevelServiceClassificationDiscrepancy.AccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n\t\tBilling.UtilityTariffRateInformation ON \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.TariffCode = Billing.UtilityTariffRateInformation.DeliveryTariffRate AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.UtilityCompanySeqid = Billing.UtilityTariffRateInformation.UtilityCompanyTariff AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.IsTOD = Billing.UtilityTariffRateInformation.IsTod\r\nWHERE \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod) AND \r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup) and\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.AccountIsUpdated = 'N')\r\n--\r\n--\t\t\t5. Drop temp table #MinFromDate if it exists and recreate it\r\n--\r\nIF OBJECT_ID('tempdb..#MinFromDate') IS NOT NULL DROP TABLE #MinFromDate\r\n--\r\nSELECT  \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.BillingPeriod,   \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber, \r\n\t\tnypa.CurrentAccountNumber as AccountNumber,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.AccountSeqid,\r\n\t\tmin(nypa.FromDate) as DeliveryTariffEffectiveDate,\r\n\t\tAccountIsUpdated,\r\n\t\tDeliveryTariffRateExistsInEC3\r\ninto\t#MinFromDate\r\nFROM \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy INNER JOIN\r\n\t\tNypa.UploadNYPAAccountBilling as nypa ON \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = nypa.BillingPeriod AND \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber = nypa.CurrentAccountNumber\r\nwhere\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.BillingPeriod = @BillingPeriod) and\r\n\t\t(Billing.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup)\t\t\r\ngroup by \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentInvoiceAccountGroup,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.BillingPeriod,   \r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.CurrentAccountNumber, \r\n\t\tnypa.CurrentAccountNumber,\r\n\t\tBilling.AccountLevelServiceClassificationDiscrepancy.AccountSeqid,\r\n\t\tAccountIsUpdated,\r\n\t\tDeliveryTariffRateExistsInEC3\r\n--\r\n--\t\t\t6. Update account with new Tariff Effective Date from upload data based upon the minimum from date of the billing and\r\n--\t\t\t\tthat the AccountIsUpdated = 'Y' AND DeliveryTariffRateExistsInEC3 = 'Y'\r\n--\r\nUPDATE    Billing.Account\r\nSET              \r\n\t\tDeliveryTariffEffectiveDate = [#MinFromDate].DeliveryTariffEffectiveDate, \r\n\t\tCommodityTariffEffectiveDate =[#MinFromDate].DeliveryTariffEffectiveDate\r\nFROM \r\n\t\t[#MinFromDate] INNER JOIN\r\n\t\tBilling.Account ON [#MinFromDate].AccountSeqid = Billing.Account.AccountSeqid\r\nWHERE \r\n\t\t([#MinFromDate].AccountIsUpdated = 'Y') AND \r\n\t\t([#MinFromDate].DeliveryTariffRateExistsInEC3 = 'Y')\r\n--\r\n--\t\t\t7. TODO: Change this to a view for common usage.\r\n--\r\nSELECT * \r\nFROM Common.uvw_AccountLevelServiceClassificationDiscrepancyCorrectionFromUploadData vw\r\nWHERE \r\n\t\t(vw.BillingPeriod = @BillingPeriod) AND \r\n\t\t(vw.CurrentInvoiceAccountGroup = @CurrentInvoiceAccountGroup)\r\n--\r\nEND"
        }
      ]
    }
  ]
}