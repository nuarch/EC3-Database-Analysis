{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Published_GetMeterBillingHistoryInformation_ExcelExport",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Published_GetMeterBillingHistoryInformation_ExcelExport",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to generate a detailed report of meter billing history for a specified billing period. It retrieves and processes data related to utility meters, including consumption and demand metrics, for a given agency or facility. The procedure is intended for exporting data to Excel, likely for analysis or reporting purposes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to its extensive use of temporary tables, dynamic data transformations, and multiple conditional logic branches. It involves intricate data retrieval and manipulation, including pivot operations and fiscal year calculations, which contribute to its high complexity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The email address of the user requesting the report, used for logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The billing period for which the report is generated, formatted as YYYYMM."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AgencyCode AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The code representing the agency for which the report is generated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@OECFacilityNumber AS VARCHAR(7)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The facility number used to filter data specific to a facility."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsAgencyUser BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether the user is an agency user, affecting the billing period selection logic."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization and Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Sets transaction isolation level to "
                        },
                        {
                          "type": "text",
                          "text": "READ UNCOMMITTED",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to avoid locking issues."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Logs the report request using "
                        },
                        {
                          "type": "text",
                          "text": "usp_AddReportUsageLog",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Fiscal Year",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Calculates the current and prior fiscal years based on the provided billing period."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Facility and Agency Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Converts the facility number to a sequence ID."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Determines if data should be returned by agency or facility."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Preparation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Populates a table with previous meter numbers and their details."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the table with meter types based on billing records."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Aggregation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Retrieves and aggregates billing history data into temporary tables."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Uses pivot operations to transform data for consumption, demand, and estimated readings across fiscal years."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Data Selection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Joins aggregated data with facility and agency information."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Outputs the final dataset with detailed billing history, ready for export."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can improve performance by reducing locking but may lead to dirty reads."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Extensive use of temporary tables can impact performance, especially if the data volume is large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Pivot Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": These can be resource-intensive, particularly with large datasets and multiple fiscal years."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that relevant columns in joined tables are indexed to optimize query performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " may result in reading uncommitted or inconsistent data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's complexity and reliance on temporary tables may not scale well with increasing data volumes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions or incomplete data processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The high complexity and extensive use of business logic make the procedure difficult to maintain and modify."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_Published_GetMeterBillingHistoryInformation_ExcelExport]\n(\r\n\t@EmailAddress AS VARCHAR(75)\r\n\t,@PublishedBillingPeriod AS VARCHAR(6)\r\n\t,@AgencyCode AS VARCHAR(6)\r\n\t,@OECFacilityNumber AS VARCHAR(7)\r\n\t,@IsAgencyUser BIT = 0\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @spname AS VARCHAR(100) = OBJECT_NAME(@@PROCID);\r\n\t\r\n\tIF (@IsAgencyUser = 1)\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = PublishedBillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\tEND;\r\n\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t\t@ReportName = @spname,\r\n\t\t@StoredProcName = @spname,\r\n\t\t@RequestedBy = @EmailAddress,\r\n\t\t@prmPublishedBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmBillingPeriod = NULL,\r\n\t\t@prmAgency_ies = @AgencyCode,\r\n\t\t@prmFacilityNumber_s = @OECFacilityNumber,\r\n\t\t@prmStartingBillingPeriod = NULL,\r\n\t\t@prmEndingBillingPeriod\t= NULL;\r\n\r\n\tDECLARE @CurrentFY AS VARCHAR(4), @PriorFiscalYear AS dbo.yyyy, @PriorFiscalYear1 AS VARCHAR(4), @PriorFiscalYear2 AS VARCHAR(4),\r\n\t\t@JulyPeriodPreviousFY AS VARCHAR(6),@FacilitySeqid AS INT = NULL, @ResultByAgency AS CHAR(1);\r\n\t\r\n\tSELECT @CurrentFY = dbo.DetermineFiscalYear(@PublishedBillingPeriod);\r\n\r\n\tSELECT @PriorFiscalYear = CAST((CAST(@CurrentFY AS NUMERIC(4, 0)) - 1) AS VARCHAR(4))\r\n\t\t,@PriorFiscalYear1 = CAST((CAST(@CurrentFY AS NUMERIC(4, 0)) - 2) AS VARCHAR(4))\r\n\t\t,@PriorFiscalYear2 = CAST((CAST(@CurrentFY AS NUMERIC(4, 0)) - 3) AS VARCHAR(4));\r\n\r\n\tSET @JulyPeriodPreviousFY = dbo.CalculatePreviousBillingPeriod(CONCAT(@PriorFiscalYear2, '07'), 'Y');\r\n\r\n\t-- convert the facility number to seqid\r\n\tSELECT @FacilitySeqid = FacilitySeqid FROM Billing.Facility WHERE OecFacilityNumber = @OECFacilityNumber; \r\n\r\n\t-- determine if we need to return data by agency or simply for the single facility\r\n\tSELECT @ResultByAgency = CASE WHEN @FacilitySeqid IS NULL THEN 'Y'ELSE 'N' END;\r\n\r\n\tDECLARE @AgencyAndItsDecendants TABLE(AgencyDivisionSeqID INT NOT NULL);\r\n\t-- populate the table\r\n\tINSERT INTO @AgencyAndItsDecendants(AgencyDivisionSeqID)\r\n\tSELECT AgencyDivisionSeqID FROM Billing.uftn_TableGetAllAgencyChildrenByAgencyCodeOEC(@AgencyCode, @EmailAddress);\r\n\r\n\t/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\r\n\t/* table variable to hold the previous meter numbers                        */\r\n\t/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\r\n\tDECLARE @PreviousMeterNumbersTable TABLE\r\n\t\t(AccountNumber dbo.acctnum\r\n\t\t,CurrentMeterNumber VARCHAR(15)\r\n\t\t,PriorMeterNumber VARCHAR(15)\r\n\t\t,MeterEffectiveOnDate VARCHAR(8)\r\n\t\t,MeterType INT DEFAULT ((0))\r\n\t\t, MeterConstant INT);\r\n\r\n\tDROP TABLE IF EXISTS #PreviousMeterNumbersTable;\r\n\r\n\tSELECT DISTINCT A.AccountSeqid AS CurrentAccountSeqid\r\n\t\t,M.MeterSeqid AS CurrentMeterSeqid\r\n\t\t,A.CurrentAccountNumber AS AccountNumber\r\n\t\t,M.OriginalMeterNumber AS PriorMeterNumber\r\n\t\t,M.CurrentMeterNumber\r\n\t\t,CASE WHEN M.MeterEffectiveOnDate IS NULL THEN NULL WHEN LTRIM(RTRIM(M.MeterEffectiveOnDate)) = '' THEN NULL ELSE M.MeterEffectiveOnDate END AS MeterEffectiveOnDate\r\n\t\t,AE.AccountExchangeMeterTrackSeqid\r\n\t\t,M.MeterConstant\r\n\tINTO #PreviousMeterNumbersTable\r\n\tFROM Billing.AccountExchangeMeterTrack AS AE\r\n\t\tINNER JOIN Billing.Meter AS M ON M.MeterSeqid = AE.OriginalMeterSeqid\r\n\t\tINNER JOIN Billing.Account AS A ON A.AccountSeqid = AE.OriginalAccountSeqid\r\n\tWHERE (@ResultByAgency <> 'N' OR A.FacilityAccount = @FacilitySeqid)\r\n\t\t AND (@ResultByAgency <> 'Y' OR A.AgencyAccount IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\t\t AND M.CurrentMeterNumber = M.OriginalMeterNumber\r\n\tORDER BY A.AccountSeqid, M.MeterSeqid;\r\n\r\n\t---- update the table variable with the meter type\r\n\t---- the meter type is calculated from the meterbillingelectric since NYPA doesnt report it accuratly on the meter record \r\n\tINSERT INTO @PreviousMeterNumbersTable\r\n\t\t(AccountNumber\r\n\t\t,CurrentMeterNumber\r\n\t\t,PriorMeterNumber\r\n\t\t,MeterEffectiveOnDate\r\n\t\t,MeterType\r\n\t\t,MeterConstant)\r\n\tSELECT DISTINCT pmnt.AccountNumber\r\n\t\t,pmnt.CurrentMeterNumber\r\n\t\t,pmnt.PriorMeterNumber\r\n\t\t,pmnt.MeterEffectiveOnDate\r\n\t\t,COALESCE(MeterTypeInfo.MeterType, 0) AS MeterType\r\n\t\t,pmnt.MeterConstant\r\n\tFROM #PreviousMeterNumbersTable AS pmnt\r\n\t\tLEFT JOIN (SELECT DISTINCT AE.AccountExchangeMeterTrackSeqid\r\n\t\t\t\t,CASE WHEN LTRIM(RTRIM(COALESCE(MBE.RecordTypeConsumption, AMBE.RecordTypeConsumption, 0))) = 1 AND LTRIM(RTRIM(COALESCE(MBE.RecordTypeDemand, AMBE.RecordTypeDemand, 0))) <> 4 THEN 1\r\n\t\t\t\t\tWHEN LTRIM(RTRIM(COALESCE(MBE.RecordTypeConsumption, AMBE.RecordTypeConsumption, 0))) <> 1 AND LTRIM(RTRIM(COALESCE(MBE.RecordTypeDemand, AMBE.RecordTypeDemand, 0))) = 4 THEN 2\r\n\t\t\t\t\tWHEN LTRIM(RTRIM(COALESCE(MBE.RecordTypeConsumption, AMBE.RecordTypeConsumption, 0))) = 1 AND LTRIM(RTRIM(COALESCE(MBE.RecordTypeDemand, AMBE.RecordTypeDemand, 0))) = 4 THEN 3\r\n\t\t\t\t\tEND AS MeterType\r\n\t\t\tFROM Billing.AccountExchangeMeterTrack AS AE\r\n\t\t\t\tINNER JOIN Billing.Account AS A ON AE.OriginalAccountSeqid = A.AccountSeqid\r\n\t\t\t\tINNER JOIN Billing.MeterBilling AS MB ON MB.AccountExchangeMeterTrackSeqid = AE.AccountExchangeMeterTrackSeqid\r\n\t\t\t\tLEFT JOIN Billing.MeterBillingElectric AS MBE ON MBE.MeterBillingRowId = MB.MeterBillingSeqid\r\n\t\t\t\tLEFT JOIN [Audit].AuditMeterBillingElectric AS AMBE ON AMBE.MeterBillingRowId = MB.MeterBillingSeqid\r\n\t\t\tWHERE MB.BillingPeriod <= @PublishedBillingPeriod\r\n\t\t\t\tAND AE.UtilityCompanySeqid = 7 -- since this only applies to NYPA\r\n\t\t\t\tAND MBE.BillingPeriod >= @JulyPeriodPreviousFY\r\n\t\t\t\tAND (@ResultByAgency <> 'N' OR A.FacilityAccount = @FacilitySeqid)\r\n\t\t\t\tAND (@ResultByAgency <> 'Y' OR A.AgencyAccount IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\t\t\t) AS MeterTypeInfo ON MeterTypeInfo.AccountExchangeMeterTrackSeqid = pmnt.AccountExchangeMeterTrackSeqid;\r\n\r\n\tDROP TABLE IF EXISTS #AccountMeterBillingHistory;\r\n\r\n\tSELECT DISTINCT T.UtilityCompany\r\n\t\t,T.CurrentAccountNumber AS AccountNumber\r\n\t\t,T.CurrentMeterNumber\r\n\t\t,T.mbOriginalMeterNumber AS OriginalMeterNumber\r\n\t\t,T.BillingPeriod\r\n\t\t,T.UtilityServiceAddress\r\n\t\t,T.AgencyCodeOEC\r\n\t\t,T.OecFacilityNumber\r\n\t\t,UT.[Description] AS TariffClass\r\n\t\t,MAX(T.EnergyUnit) AS EnergyUnit\r\n\t\t,MAX(T.EnergySource) AS EnergySource\r\n\t\t,MAX(T.EnergyType) AS EnergyType\r\n\t\t,COALESCE(T.Consumption, CAST(0 AS INT)) AS Consumption\r\n\t\t,CAST(COALESCE(T.Demand, 0) AS NUMERIC(12, 2)) AS Demand\r\n\t\t,MAX(CASE WHEN LTRIM(RTRIM(T.EstimatedReading)) = '' THEN NULL WHEN T.EstimatedReading IS NULL THEN 'E' WHEN T.EstimatedReading = 'ACT' THEN 'A' ELSE 'E' END) AS EstimatedReading\r\n\t\t,CONCAT(T.Borough, CASE WHEN T.Block IS NULL THEN NULL WHEN LTRIM(RTRIM(T.Block)) = '' THEN NULL ELSE CONCAT('-', T.Block) END, CASE WHEN T.LotNumber IS NULL THEN NULL WHEN LTRIM(RTRIM(T.LotNumber)) = '' THEN NULL ELSE CONCAT('-', T.LotNumber) END) AS BBL\r\n\t\t,CASE WHEN T.CityPlanningBIN IS NULL THEN NULL WHEN RTRIM(LTRIM(T.CityPlanningBIN)) = '' THEN NULL ELSE T.CityPlanningBIN END AS CityPlanningBin\r\n\t\t,CAST(CASE WHEN T.Consumption IS NULL THEN NULL\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @CurrentFY THEN CONCAT('CurrentFY', SUBSTRING(BillingMonthConsumption, 1, LEN(BillingMonthConsumption) - 11))\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear THEN CONCAT('PreviousFY', SUBSTRING(BillingMonthConsumption, 1, LEN(BillingMonthConsumption) - 11))\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear1 THEN CONCAT('PreviousFY1', SUBSTRING(BillingMonthConsumption, 1, LEN(BillingMonthConsumption) - 11))\r\n\t\t\t\tELSE CONCAT('PreviousFY2', SUBSTRING(BillingMonthConsumption, 1, LEN(BillingMonthConsumption) - 11))\r\n\t\t\tEND AS VARCHAR(50)) AS FYConsumption\r\n\t\t,CAST(CASE WHEN T.Demand IS NULL THEN NULL\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @CurrentFY THEN CONCAT('DCurrentFY', dbo.FindMonthFromBillingPeriod(T.BillingPeriod))\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear THEN CONCAT('DPreviousFY', dbo.FindMonthFromBillingPeriod(T.BillingPeriod))\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear1 THEN CONCAT('DPreviousFY1', dbo.FindMonthFromBillingPeriod(T.BillingPeriod))\r\n\t\t\t\tELSE CONCAT('DPreviousFY2', dbo.FindMonthFromBillingPeriod(T.BillingPeriod))\r\n\t\t\tEND AS VARCHAR(50)) AS FYDemand\r\n\t\t,CAST(CASE WHEN T.Consumption IS NULL AND T.Demand IS NULL THEN NULL\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @CurrentFY THEN CONCAT('ECurrentFY', SUBSTRING(BillingMonthConsumption, 1, LEN(BillingMonthConsumption) - 11))\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear THEN CONCAT('EPreviousFY', SUBSTRING(BillingMonthConsumption, 1, LEN(BillingMonthConsumption) - 11))\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear1 THEN CONCAT('EPreviousFY1', SUBSTRING(BillingMonthConsumption, 1, LEN(BillingMonthConsumption) - 11))\r\n\t\t\t\tELSE CONCAT('EPreviousFY2', SUBSTRING(BillingMonthConsumption, 1, LEN(BillingMonthConsumption) - 11))\r\n\t\t\tEND AS VARCHAR(50)) AS FYEstimated\r\n\t\tINTO #AccountMeterBillingHistory\r\n\t\tFROM Published.TemporalAccountMeterLevelRawDataForCurrentPeriod AS T\r\n\t\t\tINNER JOIN Billing.Account AS A ON A.OriginalAccountNumber = T.CurrentAccountNumber\r\n\t\t\tINNER JOIN Billing.UtilityTariffRateInformation AS UT ON UT.UtilityTariffRateInformationSeqid = A.UtilityTariffRateInformationSeqid\r\n\t\tWHERE T.BillingPeriod >= @JulyPeriodPreviousFY\r\n\t\t\t AND T.EffectiveStartPeriod <= @PublishedBillingPeriod AND T.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\t\t AND (@ResultByAgency <> 'N' OR T.FacilitySeqid = @FacilitySeqid)\r\n\t\t\t AND (@ResultByAgency <> 'Y' OR T.AgencyDivisionSeqid IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\t\tGROUP BY T.UtilityCompany\r\n\t\t\t,T.CurrentAccountNumber\r\n\t\t\t,T.CurrentMeterNumber\r\n\t\t\t,T.mbOriginalMeterNumber\r\n\t\t\t,T.BillingPeriod\r\n\t\t\t,T.UtilityServiceAddress\r\n\t\t\t,T.AgencyCodeOEC\r\n\t\t\t,T.OecFacilityNumber\r\n\t\t\t,UT.[Description]\r\n\t\t\t,T.BillingMonthConsumption\r\n\t\t\t,T.BillingMonthDemand\r\n\t\t\t,T.Consumption\r\n\t\t\t,T.Demand\r\n\t\t\t,CASE WHEN T.CityPlanningBIN IS NULL THEN NULL WHEN RTRIM(LTRIM(T.CityPlanningBIN)) = '' THEN NULL ELSE T.CityPlanningBIN END\r\n\t\t\t,CONCAT(T.Borough, CASE WHEN T.Block IS NULL THEN NULL WHEN LTRIM(RTRIM(T.Block)) = '' THEN NULL ELSE CONCAT('-', T.Block) END, CASE WHEN T.LotNumber IS NULL THEN NULL WHEN LTRIM(RTRIM(T.LotNumber)) = '' THEN NULL ELSE CONCAT('-', T.LotNumber) END);\r\n\r\n\tINSERT INTO #AccountMeterBillingHistory\r\n\tSELECT DISTINCT T.UtilityCompany\r\n\t\t ,T.CurrentAccountNumber\r\n\t\t ,'N/A' AS CurrentMeterNumber\r\n\t\t ,'N/A' AS OriginalMeterNumber\r\n\t\t ,T.BillingPeriod\r\n\t\t ,T.UtilityServiceAddress\r\n\t\t ,T.AgencyCodeOEC\r\n\t\t ,T.OecFacilityNumber\r\n\t\t ,UT.[Description] AS TariffClass\r\n\t\t ,MAX(T.EnergyUnit) AS EnergyUnit\r\n\t\t ,MAX(T.EnergySource) AS EnergySource\r\n\t\t ,MAX(T.EnergyType) AS EnergyType\r\n\t\t ,CAST(NULL AS INT) AS Consumption\r\n\t\t ,CAST(NULL AS NUMERIC(12, 2)) AS Demand\r\n\t\t ,CAST(NULL AS VARCHAR(3)) AS EstimatedReading\r\n \t\t ,CONCAT(T.Borough, CASE WHEN T.Block IS NULL THEN NULL WHEN LTRIM(RTRIM(T.Block)) = '' THEN NULL ELSE CONCAT('-', T.Block) END, CASE WHEN T.LotNumber IS NULL THEN NULL WHEN LTRIM(RTRIM(T.LotNumber)) = '' THEN NULL ELSE CONCAT('-', T.LotNumber) END) AS 'BBL'\r\n\t\t ,CASE WHEN T.CityPlanningBIN IS NULL THEN NULL WHEN RTRIM(LTRIM(T.CityPlanningBIN)) = '' THEN NULL ELSE T.CityPlanningBIN END AS 'CityPlanningBin'\r\n\t\t ,CAST(CASE WHEN T.AccountEnergyUsage IS NULL THEN NULL\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @CurrentFY THEN CONCAT('CurrentFY', T.BillingMonth)\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear THEN CONCAT('PreviousFY', T.BillingMonth)\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear1 THEN CONCAT('PreviousFY1', T.BillingMonth)\r\n\t\t\t\tELSE CONCAT('PreviousFY2', T.BillingMonth)\r\n\t\t\tEND AS VARCHAR(50)) AS FYConsumption\r\n\t\t,CAST(CASE WHEN T.AccountDemandUsage IS NULL THEN NULL\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @CurrentFY THEN CONCAT('DCurrentFY', T.BillingMonth)\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear THEN CONCAT('DPreviousFY', T.BillingMonth)\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear1 THEN CONCAT('DPreviousFY1', T.BillingMonth)\r\n\t\t\t\tELSE CONCAT('DPreviousFY2', T.BillingMonth)\r\n\t\t\tEND AS VARCHAR(50)) AS FYDemand\r\n\t\t,CAST(CASE WHEN T.AccountEnergyUsage IS NULL AND T.AccountDemandUsage IS NULL THEN NULL\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @CurrentFY THEN CONCAT('ECurrentFY', T.BillingMonth)\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear THEN CONCAT('EPreviousFY', T.BillingMonth)\r\n\t\t\t\tWHEN dbo.CalculateFiscalYear(T.BillingPeriod) = @PriorFiscalYear1 THEN CONCAT('EPreviousFY1', T.BillingMonth)\r\n\t\t\t\tELSE CONCAT('EPreviousFY2', T.BillingMonth)\r\n\t\t\tEND AS VARCHAR(50)) AS FYEstimated\r\n\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS T\r\n\t\tINNER JOIN (SELECT CurrentAccountNumber, UtilityTariffRateInformationSeqid FROM Billing.Account WHERE ManualDataEntry = 'Y' OR EnergyAccountDescription IN (6, 7)) AS Account ON Account.CurrentAccountNumber = T.CurrentAccountNumber\r\n\t\tINNER JOIN Billing.UtilityTariffRateInformation AS UT ON UT.UtilityTariffRateInformationSeqid = Account.UtilityTariffRateInformationSeqid\r\n\tWHERE (T.BillingPeriod >= @JulyPeriodPreviousFY)\r\n\t\tAND (T.EffectiveStartPeriod <= @PublishedBillingPeriod AND T.EffectiveEndPeriod > @PublishedBillingPeriod)\r\n\t\tAND (@ResultByAgency <> 'N' OR T.FacilitySeqid = @FacilitySeqid)\r\n\t\tAND (@ResultByAgency <> 'Y' OR T.AgencyDivisionSeqid IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\tGROUP BY T.UtilityCompany\r\n\t\t,T.CurrentAccountNumber\r\n\t\t,T.BillingPeriod\r\n\t\t,T.UtilityServiceAddress\r\n\t\t,T.AgencyCodeOEC\r\n\t\t,T.OecFacilityNumber\r\n\t\t,UT.[Description]\r\n\t\t,T.AccountEnergyUsage\r\n\t\t,T.AccountDemandUsage\r\n \t\t,CONCAT(T.Borough, CASE WHEN T.Block IS NULL THEN NULL WHEN LTRIM(RTRIM(T.Block)) = '' THEN NULL ELSE CONCAT('-', T.Block) END, CASE WHEN T.LotNumber IS NULL THEN NULL WHEN LTRIM(RTRIM(T.LotNumber)) = '' THEN NULL ELSE CONCAT('-', T.LotNumber) END)\r\n\t\t,CASE WHEN T.CityPlanningBIN IS NULL THEN NULL WHEN RTRIM(LTRIM(T.CityPlanningBIN)) = '' THEN NULL ELSE T.CityPlanningBIN END\r\n\t\t,T.BillingMonth;\r\n\r\n\tDROP TABLE IF EXISTS #PivotMeterBillingHistory;\r\n\r\n\tSELECT DISTINCT PivotedData.*\r\n\t\t,AD.AgencyName AS Agency\r\n\t\t,F.Address1 AS [Facility Address]\r\n\t\t,CASE WHEN F.FacilityName IS NULL THEN CHAR(32) ELSE F.FacilityName END AS [Facility Name]\r\n\t\t,pmnt.PriorMeterNumber AS PreviousMeterNumber\r\n\t\t,pmnt.MeterEffectiveOnDate AS MeterTurnOnDate\r\n\t\t,pmnt.MeterType\r\n\t\t, pmnt.meterconstant\r\n\tINTO #PivotMeterBillingHistory\r\n\tFROM (SELECT DISTINCT AccountNumber\r\n\t\t\t,pvtEstimatedReading.CurrentMeterNumber\r\n\t\t\t,OriginalMeterNumber\r\n\t\t\t,UtilityServiceAddress\r\n\t\t\t,UtilityCompany AS Utility\r\n\t\t\t,AgencyCodeOEC\r\n\t\t\t,OecFacilityNumber\r\n\t\t\t,EnergyUnit\r\n\t\t\t,EnergySource\r\n\t\t\t,EnergyType\r\n\t\t\t,[TariffClass]\r\n\t\t\t,BBL\r\n\t\t\t,CityPlanningBin\r\n\t\t\t,CONCAT('FY', RIGHT(dbo.CalculateFiscalYear(BillingPeriod), 2)) AS [Fiscal Year]\r\n\t\t\t,MAX(PreviousFYJuly) AS PreviousFYJuly\r\n\t\t\t,MAX(PreviousFYAugust) AS PreviousFYAugust\r\n\t\t\t,MAX(PreviousFYSeptember) AS PreviousFYSeptember\r\n\t\t\t,MAX(PreviousFYOctober) AS PreviousFYOctober\r\n\t\t\t,MAX(PreviousFYNovember) AS PreviousFYNovember\r\n\t\t\t,MAX(PreviousFYDecember) AS PreviousFYDecember\r\n\t\t\t,MAX(PreviousFYJanuary) AS PreviousFYJanuary\r\n\t\t\t,MAX(PreviousFYFebruary) AS PreviousFYFebruary\r\n\t\t\t,MAX(PreviousFYMarch) AS PreviousFYMarch\r\n\t\t\t,MAX(PreviousFYApril) AS PreviousFYApril\r\n\t\t\t,MAX(PreviousFYMay) AS PreviousFYMay\r\n\t\t\t,MAX(PreviousFYJune) AS PreviousFYJune\r\n\t\t\t,MAX(CurrentFYJuly) AS CurrentFYJuly\r\n\t\t\t,MAX(CurrentFYAugust) AS CurrentFYAugust\r\n\t\t\t,MAX(CurrentFYSeptember) AS CurrentFYSeptember\r\n\t\t\t,MAX(CurrentFYOctober) AS CurrentFYOctober\r\n\t\t\t,MAX(CurrentFYNovember) AS CurrentFYNovember\r\n\t\t\t,MAX(CurrentFYDecember) AS CurrentFYDecember\r\n\t\t\t,MAX(CurrentFYJanuary) AS CurrentFYJanuary\r\n\t\t\t,MAX(CurrentFYFebruary) AS CurrentFYFebruary\r\n\t\t\t,MAX(CurrentFYMarch) AS CurrentFYMarch\r\n\t\t\t,MAX(CurrentFYApril) AS CurrentFYApril \r\n\t\t\t,MAX(CurrentFYMay) AS CurrentFYMay\r\n\t\t\t,MAX(CurrentFYJune) AS CurrentFYJune\r\n\t\t\t,MAX(EPreviousFYJuly) AS EPreviousFYJuly\r\n\t\t\t,MAX(EPreviousFYAugust) AS EPreviousFYAugust\r\n\t\t\t,MAX(EPreviousFYSeptember) AS EPreviousFYSeptember\r\n\t\t\t,MAX(EPreviousFYOctober) AS EPreviousFYOctober \r\n\t\t\t,MAX(EPreviousFYNovember) AS EPreviousFYNovember \r\n\t\t\t,MAX(EPreviousFYDecember) AS EPreviousFYDecember\r\n\t\t\t,MAX(EPreviousFYJanuary) AS EPreviousFYJanuary\r\n\t\t\t,MAX(EPreviousFYFebruary) AS EPreviousFYFebruary\r\n\t\t\t,MAX(EPreviousFYMarch) AS EPreviousFYMarch\r\n\t\t\t,MAX(EPreviousFYApril) AS EPreviousFYApril\r\n\t\t\t,MAX(EPreviousFYMay) AS EPreviousFYMay\r\n\t\t\t,MAX(EPreviousFYJune) AS EPreviousFYJune\r\n\t\t\t,MAX(ECurrentFYJuly) AS ECurrentFYJuly\r\n\t\t\t,MAX(ECurrentFYAugust) AS ECurrentFYAugust\r\n\t\t\t,MAX(ECurrentFYSeptember) AS ECurrentFYSeptember\r\n\t\t\t,MAX(ECurrentFYOctober) AS ECurrentFYOctober\r\n\t\t\t,MAX(ECurrentFYNovember) AS ECurrentFYNovember \r\n\t\t\t,MAX(ECurrentFYDecember) AS ECurrentFYDecember \r\n\t\t\t,MAX(ECurrentFYJanuary) AS ECurrentFYJanuary \r\n\t\t\t,MAX(ECurrentFYFebruary) AS ECurrentFYFebruary \r\n\t\t\t,MAX(ECurrentFYMarch) AS ECurrentFYMarch \r\n\t\t\t,MAX(ECurrentFYApril) AS ECurrentFYApril \r\n\t\t\t,MAX(ECurrentFYMay) AS ECurrentFYMay\r\n\t\t\t,MAX(ECurrentFYJune) AS ECurrentFYJune \r\n\t\t\t,MAX(DPreviousFYJuly) AS DPreviousFYJuly \r\n\t\t\t,MAX(DPreviousFYAugust) AS DPreviousFYAugust\r\n\t\t\t,MAX(DPreviousFYSeptember) AS DPreviousFYSeptember\r\n\t\t\t,MAX(DPreviousFYOctober) AS DPreviousFYOctober\r\n\t\t\t,MAX(DPreviousFYNovember) AS DPreviousFYNovember \r\n\t\t\t,MAX(DPreviousFYDecember) AS DPreviousFYDecember \r\n\t\t\t,MAX(DPreviousFYJanuary) AS DPreviousFYJanuary\r\n\t\t\t,MAX(DPreviousFYFebruary) AS DPreviousFYFebruary\r\n\t\t\t,MAX(DPreviousFYMarch) AS DPreviousFYMarch \r\n\t\t\t,MAX(DPreviousFYApril) AS DPreviousFYApril\r\n\t\t\t,MAX(DPreviousFYMay) AS DPreviousFYMay\r\n\t\t\t,MAX(DPreviousFYJune) AS DPreviousFYJune\r\n\t\t\t,MAX(DCurrentFYJuly) AS DCurrentFYJuly\r\n\t\t\t,MAX(DCurrentFYAugust) AS DCurrentFYAugust\r\n\t\t\t,MAX(DCurrentFYSeptember) AS DCurrentFYSeptember\r\n\t\t\t,MAX(DCurrentFYOctober) AS DCurrentFYOctober \r\n\t\t\t,MAX(DCurrentFYNovember) AS DCurrentFYNovember\r\n\t\t\t,MAX(DCurrentFYDecember) AS DCurrentFYDecember\r\n\t\t\t,MAX(DCurrentFYJanuary) AS DCurrentFYJanuary \r\n\t\t\t,MAX(DCurrentFYFebruary) AS DCurrentFYFebruary\r\n\t\t\t,MAX(DCurrentFYMarch) AS DCurrentFYMarch\r\n\t\t\t,MAX(DCurrentFYApril) AS DCurrentFYApril\r\n\t\t\t,MAX(DCurrentFYMay) AS DCurrentFYMay\r\n\t\t\t,MAX(DCurrentFYJune) AS DCurrentFYJune \r\n\t\t\t,MAX(PreviousFY1July) AS PreviousFY1July\r\n\t\t\t,MAX(PreviousFY1August) AS PreviousFY1August\r\n\t\t\t,MAX(PreviousFY1September) AS PreviousFY1September\r\n\t\t\t,MAX(PreviousFY1October) AS PreviousFY1October\r\n\t\t\t,MAX(PreviousFY1November) AS PreviousFY1November\r\n\t\t\t,MAX(PreviousFY1December) AS PreviousFY1December\r\n\t\t\t,MAX(PreviousFY1January) AS PreviousFY1January\r\n\t\t\t,MAX(PreviousFY1February) AS PreviousFY1February\r\n\t\t\t,MAX(PreviousFY1March) AS PreviousFY1March \r\n\t\t\t,MAX(PreviousFY1April) AS PreviousFY1April \r\n\t\t\t,MAX(PreviousFY1May) AS PreviousFY1May \r\n\t\t\t,MAX(PreviousFY1June) AS PreviousFY1June\r\n\t\t\t,MAX(DPreviousFY1July) AS DPreviousFY1July \r\n\t\t\t,MAX(DPreviousFY1August) AS DPreviousFY1August\r\n\t\t\t,MAX(DPreviousFY1September) AS DPreviousFY1September \r\n\t\t\t,MAX(DPreviousFY1October) AS DPreviousFY1October\r\n\t\t\t,MAX(DPreviousFY1November) AS DPreviousFY1November\r\n\t\t\t,MAX(DPreviousFY1December) AS DPreviousFY1December\r\n\t\t\t,MAX(DPreviousFY1January) AS DPreviousFY1January \r\n\t\t\t,MAX(DPreviousFY1February) AS DPreviousFY1February \r\n\t\t\t,MAX(DPreviousFY1March) AS DPreviousFY1March \r\n\t\t\t,MAX(DPreviousFY1April) AS DPreviousFY1April \r\n\t\t\t,MAX(DPreviousFY1May) AS DPreviousFY1May\r\n\t\t\t,MAX(DPreviousFY1June) AS DPreviousFY1June\r\n\t\t\t,MAX(EPreviousFY1July) AS EPreviousFY1July \r\n\t\t\t,MAX(EPreviousFY1August) AS EPreviousFY1August\r\n\t\t\t,MAX(EPreviousFY1September) AS EPreviousFY1September \r\n\t\t\t,MAX(EPreviousFY1October) AS EPreviousFY1October \r\n\t\t\t,MAX(EPreviousFY1November) AS EPreviousFY1November \r\n\t\t\t,MAX(EPreviousFY1December) AS EPreviousFY1December\r\n\t\t\t,MAX(EPreviousFY1January) AS EPreviousFY1January \r\n\t\t\t,MAX(EPreviousFY1February) AS EPreviousFY1February \r\n\t\t\t,MAX(EPreviousFY1March) AS EPreviousFY1March\r\n\t\t\t,MAX(EPreviousFY1April) AS EPreviousFY1April \r\n\t\t\t,MAX(EPreviousFY1May) AS EPreviousFY1May\r\n\t\t\t,MAX(EPreviousFY1June) AS EPreviousFY1June \r\n\t\t\t,MAX(PreviousFY2July) AS PreviousFY2July\r\n\t\t\t,MAX(PreviousFY2August) AS PreviousFY2August\r\n\t\t\t,MAX(PreviousFY2September) AS PreviousFY2September\r\n\t\t\t,MAX(PreviousFY2October) AS PreviousFY2October\r\n\t\t\t,MAX(PreviousFY2November) AS PreviousFY2November \r\n\t\t\t,MAX(PreviousFY2December) AS PreviousFY2December \r\n\t\t\t,MAX(PreviousFY2January) AS PreviousFY2January\r\n\t\t\t,MAX(PreviousFY2February) AS PreviousFY2February \r\n\t\t\t,MAX(PreviousFY2March) AS PreviousFY2March \r\n\t\t\t,MAX(PreviousFY2April) AS PreviousFY2April \r\n\t\t\t,MAX(PreviousFY2May) AS PreviousFY2May \r\n\t\t\t,MAX(PreviousFY2June) AS PreviousFY2June \r\n\t\t\t,MAX(DPreviousFY2July) AS DPreviousFY2July \r\n\t\t\t,MAX(DPreviousFY2August) AS DPreviousFY2August \r\n\t\t\t,MAX(DPreviousFY2September) AS DPreviousFY2September \r\n\t\t\t,MAX(DPreviousFY2October) AS DPreviousFY2October \r\n\t\t\t,MAX(DPreviousFY2November) AS DPreviousFY2November \r\n\t\t\t,MAX(DPreviousFY2December) AS DPreviousFY2December \r\n\t\t\t,MAX(DPreviousFY2January) AS DPreviousFY2January \r\n\t\t\t,MAX(DPreviousFY2February) AS DPreviousFY2February \r\n\t\t\t,MAX(DPreviousFY2March) AS DPreviousFY2March \r\n\t\t\t,MAX(DPreviousFY2April) AS DPreviousFY2April \r\n\t\t\t,MAX(DPreviousFY2May) AS DPreviousFY2May \r\n\t\t\t,MAX(DPreviousFY2June) AS DPreviousFY2June \r\n\t\t\t,MAX(EPreviousFY2July) AS EPreviousFY2July \r\n\t\t\t,MAX(EPreviousFY2August) AS EPreviousFY2August\r\n\t\t\t,MAX(EPreviousFY2September) AS EPreviousFY2September \r\n\t\t\t,MAX(EPreviousFY2October) AS EPreviousFY2October\r\n\t\t\t,MAX(EPreviousFY2November) AS EPreviousFY2November \r\n\t\t\t,MAX(EPreviousFY2December) AS EPreviousFY2December \r\n\t\t\t,MAX(EPreviousFY2January) AS EPreviousFY2January \r\n\t\t\t,MAX(EPreviousFY2February) AS EPreviousFY2February \r\n\t\t\t,MAX(EPreviousFY2March) AS EPreviousFY2March \r\n\t\t\t,MAX(EPreviousFY2April) AS EPreviousFY2April \r\n\t\t\t,MAX(EPreviousFY2May) AS EPreviousFY2May \r\n\t\t\t,MAX(EPreviousFY2June) AS EPreviousFY2June \r\n\t\tFROM (SELECT * FROM #AccountMeterBillingHistory) AS SourceTable\r\n\t\t\t\tPIVOT (SUM(Consumption) FOR [FYConsumption] IN (PreviousFYJuly, PreviousFYAugust, PreviousFYSeptember, PreviousFYOctober, PreviousFYNovember, PreviousFYDecember, PreviousFYJanuary, PreviousFYFebruary, PreviousFYMarch, PreviousFYApril, PreviousFYMay, PreviousFYJune,\r\n\t\t\t\t\t\tPreviousFY1July, PreviousFY1August, PreviousFY1September, PreviousFY1October, PreviousFY1November, PreviousFY1December, PreviousFY1January, PreviousFY1February, PreviousFY1March, PreviousFY1April, PreviousFY1May, PreviousFY1June,\r\n\t\t\t\t\t\tPreviousFY2July, PreviousFY2August, PreviousFY2September, PreviousFY2October, PreviousFY2November, PreviousFY2December, PreviousFY2January, PreviousFY2February, PreviousFY2March, PreviousFY2April, PreviousFY2May, PreviousFY2June,\r\n\t\t\t\t\t\tCurrentFYJuly, CurrentFYAugust, CurrentFYSeptember, CurrentFYOctober, CurrentFYNovember, CurrentFYDecember, CurrentFYJanuary, CurrentFYFebruary, CurrentFYMarch, CurrentFYApril, CurrentFYMay, CurrentFYJune) \r\n\t\t\t\t\t) AS pvtConsumption\r\n\t\t\t\tPIVOT (SUM(Demand) FOR [FYDemand] IN (DPreviousFYJuly, DPreviousFYAugust, DPreviousFYSeptember, DPreviousFYOctober, DPreviousFYNovember, DPreviousFYDecember, DPreviousFYJanuary, DPreviousFYFebruary, DPreviousFYMarch, DPreviousFYApril, DPreviousFYMay, DPreviousFYJune,\r\n\t\t\t\t\t\tDPreviousFY1July, DPreviousFY1August, DPreviousFY1September, DPreviousFY1October, DPreviousFY1November, DPreviousFY1December, DPreviousFY1January, DPreviousFY1February, DPreviousFY1March, DPreviousFY1April, DPreviousFY1May, DPreviousFY1June,\r\n\t\t\t\t\t\tDPreviousFY2July, DPreviousFY2August, DPreviousFY2September, DPreviousFY2October, DPreviousFY2November, DPreviousFY2December, DPreviousFY2January, DPreviousFY2February, DPreviousFY2March, DPreviousFY2April, DPreviousFY2May, DPreviousFY2June,\r\n\t\t\t\t\t\tDCurrentFYJuly, DCurrentFYAugust, DCurrentFYSeptember, DCurrentFYOctober, DCurrentFYNovember, DCurrentFYDecember, DCurrentFYJanuary, DCurrentFYFebruary, DCurrentFYMarch, DCurrentFYApril, DCurrentFYMay, DCurrentFYJune) \r\n\t\t\t\t\t) AS pvtDemand\r\n\t\t\t\tPIVOT(MAX(EstimatedReading) FOR [FYEstimated] IN (EPreviousFYJuly, EPreviousFYAugust, EPreviousFYSeptember, EPreviousFYOctober, EPreviousFYNovember, EPreviousFYDecember, EPreviousFYJanuary, EPreviousFYFebruary, EPreviousFYMarch, EPreviousFYApril, EPreviousFYMay, EPreviousFYJune,\r\n\t\t\t\t\t\tEPreviousFY1July, EPreviousFY1August, EPreviousFY1September, EPreviousFY1October, EPreviousFY1November, EPreviousFY1December, EPreviousFY1January, EPreviousFY1February, EPreviousFY1March, EPreviousFY1April, EPreviousFY1May, EPreviousFY1June,\r\n\t\t\t\t\t\tEPreviousFY2July, EPreviousFY2August, EPreviousFY2September, EPreviousFY2October, EPreviousFY2November, EPreviousFY2December, EPreviousFY2January, EPreviousFY2February, EPreviousFY2March, EPreviousFY2April, EPreviousFY2May, EPreviousFY2June,\r\n\t\t\t\t\t\tECurrentFYJuly, ECurrentFYAugust, ECurrentFYSeptember, ECurrentFYOctober, ECurrentFYNovember, ECurrentFYDecember, ECurrentFYJanuary, ECurrentFYFebruary, ECurrentFYMarch, ECurrentFYApril, ECurrentFYMay, ECurrentFYJune) \r\n\t\t\t\t\t) AS pvtEstimatedReading\r\n\t\t\tGROUP BY AccountNumber, CurrentMeterNumber, UtilityServiceAddress, AgencyCodeOEC, OecFacilityNumber, EnergySource, EnergyUnit, EnergyType, CONCAT('FY', RIGHT(dbo.CalculateFiscalYear(BillingPeriod), 2)), UtilityCompany,\r\n\t\t\t\t  [TariffClass], OriginalMeterNumber, CityPlanningBin, BBL\r\n\t\t\t\t) AS PivotedData\r\n\t\t\tINNER JOIN Billing.Facility AS F ON F.OecFacilityNumber = PivotedData.OecFacilityNumber\r\n\t\t\tINNER JOIN Billing.AgencyDivision AS AD ON AD.AgencyCodeOEC = PivotedData.AgencyCodeOEC\r\n\t\t\tLEFT JOIN @PreviousMeterNumbersTable AS pmnt ON pmnt.AccountNumber = PivotedData.AccountNumber AND pmnt.CurrentMeterNumber = PivotedData.CurrentMeterNumber\r\n\t\tORDER BY PivotedData.CurrentMeterNumber;\r\n\r\n\tSELECT DISTINCT AccountNumber\r\n\t\t,OriginalMeterNumber AS MeterNumber\r\n\t\t,UtilityServiceAddress\r\n\t\t,Utility\r\n\t\t,EnergyType\r\n\t\t,TariffClass\r\n\t\t,MeterTurnOnDate\r\n\t\t,[Fiscal Year]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYJuly, PreviousFY1July, PreviousFY2July, CurrentFYJuly)) AS [Consumption Jul]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYJuly, DPreviousFY1July, DPreviousFY2July, DCurrentFYJuly)) AS [Demand Jul]\r\n\t\t,COALESCE(EPreviousFYAugust, EPreviousFY1August, EPreviousFY2August, ECurrentFYAugust) AS [ACT/EST Jul]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYAugust, PreviousFY1August, PreviousFY2August, CurrentFYAugust)) AS [Consumption Aug]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYAugust, DPreviousFY1August, DPreviousFY2August, DCurrentFYAugust)) AS [Demand Aug] \r\n\t\t,COALESCE(EPreviousFYAugust, EPreviousFY1August, EPreviousFY2August, ECurrentFYAugust) AS [ACT/EST Aug]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYSeptember, PreviousFY1September, PreviousFY2September, CurrentFYSeptember)) AS [Consumption Sep]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYSeptember, DPreviousFY1September, DPreviousFY2September, DCurrentFYSeptember)) AS [Demand Sep] \r\n\t\t,COALESCE(EPreviousFYSeptember, EPreviousFY1September, EPreviousFY2September, ECurrentFYSeptember) AS [ACT/EST Sep]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYOctober, PreviousFY1October, PreviousFY2October, CurrentFYOctober)) AS [Consumption Oct] \r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYOctober, DPreviousFY1October, DPreviousFY2October, DCurrentFYOctober)) AS [Demand Oct]\r\n\t\t,COALESCE(EPreviousFYOctober, EPreviousFY1October, EPreviousFY2October, ECurrentFYOctober)AS [ACT/EST Oct]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYNovember, PreviousFY1November, PreviousFY2November, CurrentFYNovember)) AS [Consumption Nov]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYNovember, DPreviousFY1November, DPreviousFY2November, DCurrentFYNovember)) AS [Demand Nov]\r\n\t\t,COALESCE(EPreviousFYNovember, EPreviousFY1November, EPreviousFY2November, ECurrentFYNovember) AS [ACT/EST Nov] \r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYDecember, PreviousFY1December, PreviousFY2December, CurrentFYDecember)) AS [Consumption Dec]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYDecember, DPreviousFY1December, DPreviousFY2December, DCurrentFYDecember)) AS [Demand Dec]\r\n\t\t,COALESCE(EPreviousFYDecember, EPreviousFY1December, EPreviousFY2December, ECurrentFYDecember) AS [ACT/EST Dec]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYJanuary, PreviousFY1January, PreviousFY2January, CurrentFYJanuary)) AS [Consumption Jan]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYJanuary, DPreviousFY1January, DPreviousFY2January, DCurrentFYJanuary)) AS [Demand Jan]\r\n\t\t,COALESCE(EPreviousFYJanuary, EPreviousFY1January, EPreviousFY2January, ECurrentFYJanuary) AS [ACT/EST Jan]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYFebruary, PreviousFY1February, PreviousFY2February, CurrentFYFebruary)) AS [Consumption Feb]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYFebruary, DPreviousFY1February, DPreviousFY2February, DCurrentFYFebruary)) AS [Demand Feb]\r\n\t\t,COALESCE(EPreviousFYFebruary, EPreviousFY1February, EPreviousFY2February, ECurrentFYFebruary) AS [ACT/EST Feb]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYMarch, PreviousFY1March, PreviousFY2March, CurrentFYMarch)) AS [Consumption Mar]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYMarch, DPreviousFY1March, DPreviousFY2March, DCurrentFYMarch)) AS [Demand Mar]\r\n\t\t,COALESCE(EPreviousFYMarch, EPreviousFY1March, EPreviousFY2March, ECurrentFYMarch) AS [ACT/EST Mar]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYApril, PreviousFY1April, PreviousFY2April, CurrentFYApril)) AS [Consumption Apr]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYApril, DPreviousFY1April, DPreviousFY2April, DCurrentFYApril)) AS [Demand Apr]\r\n\t\t,COALESCE(EPreviousFYApril, EPreviousFY1April, EPreviousFY2April, ECurrentFYApril) AS [ACT/EST Apr]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYMay, PreviousFY1May, PreviousFY2May, CurrentFYMay)) AS [Consumption May]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYMay, DPreviousFY1May, DPreviousFY2May, DCurrentFYMay)) AS [Demand May]\r\n\t\t,COALESCE(EPreviousFYMay, EPreviousFY1May, EPreviousFY2May, ECurrentFYMay) AS [ACT/EST May]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(PreviousFYJune, PreviousFY1June, PreviousFY2June, CurrentFYJune)) AS [Consumption Jun]\r\n\t\t,CONVERT(DECIMAL(18, 2), COALESCE(DPreviousFYJune, DPreviousFY1June, DPreviousFY2June, DCurrentFYJune)) AS [Demand Jun]\r\n\t\t,COALESCE(EPreviousFYJune, EPreviousFY1June, EPreviousFY2June, ECurrentFYJune) AS [ACT/EST Jun]\r\n\t\t,MeterConstant\r\n\tFROM #PivotMeterBillingHistory;\r\nEND;"
        }
      ]
    }
  ]
}