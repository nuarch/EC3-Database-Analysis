{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Published_LookupTotalDollarsBtusAndRunningTotalCO2ByEnergyType_CoreRepForSelFac",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Published_LookupTotalDollarsBtusAndRunningTotalCO2ByEnergyType_CoreRepForSelFac",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to generate a report that aggregates energy usage, costs, and CO2 emissions data by energy type for selected facilities. It processes data for a specified billing period and outputs a detailed report including fiscal year comparisons and percentage changes. The procedure handles data for different energy categories, such as total energy in BTUs, electric demand, and CO2 emissions, and formats the results for reporting purposes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to its extensive use of dynamic SQL operations, multiple PIVOT operations, and UNION ALL statements to aggregate and format data from various categories. It also involves intricate logic for calculating year-to-date values and percentage changes, making it challenging to maintain and optimize."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The email address of the user requesting the report, used for logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The billing period for which the report is generated, formatted as YYYYMM."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AgencyCode AS VARCHAR(10)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The code representing the agency for which the report is generated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@FacilityNumber AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A list of facility numbers to include in the report."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsAgencyUser AS BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating if the user is an agency user, which affects the billing period selection logic."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Setup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting the transaction isolation level to READ UNCOMMITTED to avoid locking issues and initializes local variables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Period Adjustment",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the user is an agency user, the procedure retrieves the current processing period from the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It logs the report request details using the "
                },
                {
                  "type": "text",
                  "text": "Audit.usp_AddReportUsageLog",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Period Month Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Extracts the month from the "
                },
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and adjusts it for fiscal year calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Aggregation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Uses a temporary table "
                        },
                        {
                          "type": "text",
                          "text": "@finalResult",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to store aggregated data."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Executes multiple SELECT statements with PIVOT operations to transform monthly data into columns for each month."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Calculates year-to-date values based on the current billing period month."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Report Generation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Formats the results for each category and calculates percentage changes compared to the prior fiscal year."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Outputs the final result set ordered by category and facility number."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using READ UNCOMMITTED can improve performance by reducing locking but may lead to dirty reads."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "PIVOT Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Multiple PIVOT operations can be resource-intensive, especially with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic SQL",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of dynamic SQL and UNION ALL can increase complexity and execution time."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the underlying tables have appropriate indexes to optimize JOIN operations and WHERE clause filters."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": READ UNCOMMITTED isolation level may lead to reading uncommitted data, which can affect report accuracy."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The complexity and number of operations may impact performance as data volume grows."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that user inputs are validated to prevent SQL injection, especially with dynamic SQL components."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The complexity of the procedure makes it difficult to maintain and troubleshoot, requiring careful documentation and testing."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_Published_LookupTotalDollarsBtusAndRunningTotalCO2ByEnergyType_CoreRepForSelFac]\n(\r\n\t@EmailAddress AS VARCHAR(75)\r\n\t,@PublishedBillingPeriod AS VARCHAR(6)\r\n\t,@AgencyCode AS VARCHAR(10)\r\n\t,@FacilityNumber AS VARCHAR(MAX)\r\n\t,@IsAgencyUser AS BIT = 0\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @spname VARCHAR(100) = OBJECT_NAME(@@PROCID), @BillingPeriodMonth AS INT;\r\n\r\n\tIF (@IsAgencyUser = 1)\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = PublishedBillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\tEND;\r\n\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t\t@ReportName = @spname,\r\n\t\t@StoredProcName  = @spname,\r\n\t\t@RequestedBy  = @EmailAddress,\r\n\t\t@prmPublishedBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmBillingPeriod = NULL,\r\n\t\t@prmAgency_ies = @AgencyCode,\r\n\t\t@prmFacilityNumber_s = @FacilityNumber,\r\n\t\t@prmStartingBillingPeriod = NULL,\r\n\t\t@prmEndingBillingPeriod = NULL;\r\n\r\n\tSET @BillingPeriodMonth = CAST(SUBSTRING(@PublishedBillingPeriod, 5, 6) AS INT);\r\n\tSET @BillingPeriodMonth = CASE WHEN @BillingPeriodMonth <= 6 THEN @BillingPeriodMonth + 12 ELSE @BillingPeriodMonth END;\r\n\t\r\n\tDECLARE @finalResult TABLE (Category VARCHAR(50)\r\n\t\t,CitywideAgencyOrFacility VARCHAR(2)\r\n\t\t,PublishedBillingPeriod VARCHAR(6)\r\n\t\t,FiscalYear VARCHAR(4)\r\n\t\t,EnergyType VARCHAR(3)\r\n\t\t,AgencyCodeOEC VARCHAR(6)\r\n\t\t,FacilityNumber VARCHAR(7)\r\n\t\t,CurrentFiscalYear VARCHAR(4)\r\n\t\t,PriorFiscalYear VARCHAR(4)\r\n\t\t,PublishedPeriodCurrentFiscalYear VARCHAR(4)\r\n\t\t,PublishedPeriodPriorFiscalYear VARCHAR(4)\r\n\t\t,AgencyName VARCHAR(75)\r\n\t\t,FacilityName VARCHAR(100)\r\n\t\t,Address1 VARCHAR(120)\r\n\t\t,CityPlanningBin VARCHAR(7)\r\n\t\t,Borough VARCHAR(1)\r\n\t\t,[Block] VARCHAR(5)\r\n\t\t,LotNumber VARCHAR(4)\r\n\t\t,SummaryORDetail VARCHAR(1)\r\n\t\t,July BTUEquivalentBig\r\n\t\t,August BTUEquivalentBig\r\n\t\t,September BTUEquivalentBig\r\n\t\t,October BTUEquivalentBig\r\n\t\t,November BTUEquivalentBig\r\n\t\t,December BTUEquivalentBig\r\n\t\t,January BTUEquivalentBig\r\n\t\t,February BTUEquivalentBig\r\n\t\t,March BTUEquivalentBig\r\n\t\t,April BTUEquivalentBig\r\n\t\t,May BTUEquivalentBig\r\n\t\t,June BTUEquivalentBig\r\n\t\t,YearToDate BTUEquivalentBig);\r\n\r\n\tINSERT INTO @finalResult\r\n\tSELECT * FROM (SELECT t.Category,\r\n\t\t\tt.CitywideAgencyOrFacility,\r\n\t\t\tt.PublishedBillingPeriod,\r\n\t\t\tt.FiscalYear,\r\n\t\t\tt.EnergyType,\r\n\t\t\tt.AgencyCodeOEC,\r\n\t\t\tt.FacilityNumber,\r\n\t\t\tt.CurrentFiscalYear,\r\n\t\t\tt.PriorFiscalYear,\r\n\t\t\tt.PublishedPeriodCurrentFiscalYear,\r\n\t\t\tt.PublishedPeriodPriorFiscalYear,\r\n\t\t\tt.AgencyName,\r\n\t\t\tt.FacilityName,\r\n\t\t\tt.Address1,\r\n\t\t\tt.CityPlanningBIN,\r\n\t\t\tt.Borough,\r\n\t\t\tt.[Block],\r\n\t\t\tt.LotNumber,\r\n\t\t\tt.SummaryORDetail,\r\n\t\t\tt.July,\r\n\t\t\tt.August,\r\n\t\t\tt.September,\r\n\t\t\tt.October,\r\n\t\t\tt.November,\r\n\t\t\tt.December,\r\n\t\t\tt.January,\r\n\t\t\tt.February,\r\n\t\t\tt.March,\r\n\t\t\tt.April,\r\n\t\t\tt.May,\r\n\t\t\tt.June,\r\n\t\t\tCASE WHEN @BillingPeriodMonth >= 7 THEN ISNULL(July, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 8 THEN ISNULL(August, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 9 THEN ISNULL(September, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 10 THEN ISNULL(October, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 11 THEN ISNULL(November, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 12 THEN ISNULL(December, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 13 THEN ISNULL(January, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 14 THEN ISNULL(February, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 15 THEN ISNULL(March, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 16 THEN ISNULL(April, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 17 THEN ISNULL(May, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 18 THEN ISNULL(June, 0) ELSE 0 END AS YearToDate\r\n\t\tFROM (SELECT  'Total Energy in Millions of BTUs' AS Category\r\n\t\t\t\t,ALSFDBC.CitywideAgencyOrFacility\r\n\t\t\t\t,@PublishedBillingPeriod AS PublishedBillingPeriod\r\n\t\t\t\t,ALSFDBC.FiscalYear\r\n\t\t\t\t,ALSFDBC.EnergyType\r\n\t\t\t\t,ALSFDBC.AgencyCodeOEC\r\n\t\t\t\t,ALSFDBC.FacilityNumber\r\n\t\t\t\t,ALSFDBC.TotalBTU\r\n\t\t\t\t,ALSFDBC.[Month]\r\n\t\t\t\t,ALSFDBC.CurrentFiscalYear\r\n\t\t\t\t,ALSFDBC.PriorFiscalYear\r\n\t\t\t\t,ALSFDBC.PublishedPeriodCurrentFiscalYear\r\n\t\t\t\t,ALSFDBC.PublishedPeriodPriorFiscalYear\r\n\t\t\t\t,AG.AgencyName\r\n\t\t\t\t,ALSFDBC.FacilityName\r\n\t\t\t\t,ALSFDBC.Address1\r\n\t\t\t\t,ALSFDBC.CityPlanningBIN\r\n\t\t\t\t,ALSFDBC.Borough\r\n\t\t\t\t,ALSFDBC.[Block]\r\n\t\t\t\t,ALSFDBC.LotNumber\r\n\t\t\t\t,ALSFDBC.SummaryORDetail\r\n\t\t\tFROM Published.TemporalAccountLevelSummaryForDollarsBtusAndCo2 AS ALSFDBC\r\n\t\t\t\tINNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCode, @FacilityNumber, @EmailAddress) AS AG\r\n\t\t\t\t\tON ALSFDBC.AgencyCodeOEC = AG.AgencyCodeOEC AND ALSFDBC.FacilityNumber = AG.OecFacilityNumber\r\n\t\t\tWHERE ALSFDBC.CitywideAgencyOrFacility = 'FA'\r\n\t\t\t\tAND ALSFDBC.EffectiveStartPeriod <= @PublishedBillingPeriod AND ALSFDBC.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\t\t\tAND ALSFDBC.FiscalYear >= dbo.CalculatePreviousFiscalYear(@PublishedBillingPeriod)) AS x\r\n\t\tPIVOT (SUM(TotalBTU) FOR [Month] IN (July, August, September, October, November, December\r\n\t\t\t,January, February, March, April, May, June)) AS t\r\n\t\tUNION ALL\r\n\t\tSELECT *,\r\n\t\t\tCASE WHEN @BillingPeriodMonth >= 7 THEN ISNULL(July, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 8 THEN ISNULL(August, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 9 THEN ISNULL(September, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 10 THEN ISNULL(October, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 11 THEN ISNULL(November, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 12 THEN ISNULL(December, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 13 THEN ISNULL(January, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 14 THEN ISNULL(February, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 15 THEN ISNULL(March, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 16 THEN ISNULL(April, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 17 THEN ISNULL(May, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 18 THEN ISNULL(June, 0) ELSE 0 END AS YearToDate\r\n\t\tFROM (SELECT 'Electric Demand (kW)' AS Category\r\n\t\t\t\t,ALSFDBC.CitywideAgencyOrFacility\r\n\t\t\t\t,@PublishedBillingPeriod AS PublishedBillingPeriod\r\n\t\t\t\t,ALSFDBC.FiscalYear\r\n\t\t\t\t,ALSFDBC.EnergyType\r\n\t\t\t\t,ALSFDBC.AgencyCodeOEC\r\n\t\t\t\t,ALSFDBC.FacilityNumber\r\n\t\t\t\t,ALSFDBC.[Month]\r\n\t\t\t\t,ALSFDBC.CurrentFiscalYear\r\n\t\t\t\t,ALSFDBC.PriorFiscalYear\r\n\t\t\t\t,ALSFDBC.DemandUsage\r\n\t\t\t\t,ALSFDBC.PublishedPeriodCurrentFiscalYear\r\n\t\t\t\t,ALSFDBC.PublishedPeriodPriorFiscalYear\r\n\t\t\t\t,AG.AgencyName\r\n\t\t\t\t,ALSFDBC.FacilityName\r\n\t\t\t\t,ALSFDBC.Address1\r\n\t\t\t\t,ALSFDBC.CityPlanningBIN\r\n\t\t\t\t,ALSFDBC.Borough\r\n\t\t\t\t,ALSFDBC.[Block]\r\n\t\t\t\t,ALSFDBC.LotNumber\r\n\t\t\t\t,ALSFDBC.SummaryORDetail\r\n\t\t\tFROM Published.TemporalAccountLevelSummaryForDollarsBtusAndCo2 AS ALSFDBC\r\n\t\t\t\tINNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCode, @FacilityNumber, @EmailAddress) AS AG\r\n\t\t\t\t\tON ALSFDBC.AgencyCodeOEC = AG.AgencyCodeOEC AND ALSFDBC.FacilityNumber = AG.OecFacilityNumber\r\n\t\t\tWHERE ALSFDBC.CitywideAgencyOrFacility = 'FE'\r\n\t\t\t\tAND ALSFDBC.EffectiveStartPeriod <= @PublishedBillingPeriod\r\n\t\t\t\tAND ALSFDBC.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\t\t\tAND ALSFDBC.FiscalYear >= dbo.CalculatePreviousFiscalYear(@PublishedBillingPeriod)\r\n\t\t\t\tAND ALSFDBC.EnergyType ='ELE') AS x\r\n\t\t\tPIVOT (SUM(DemandUsage) FOR [Month] IN (July, August, September, October, November, December\r\n\t\t\t\t,January, February, March, April, May, June)) AS t\r\n\t\tUNION ALL\r\n\t\tSELECT *,\r\n\t\t\tCASE WHEN @BillingPeriodMonth >= 7 THEN ISNULL(July, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 8 THEN ISNULL(August, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 9 THEN ISNULL(September, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 10 THEN ISNULL(October, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 11 THEN ISNULL(November, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 12 THEN ISNULL(December, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 13 THEN ISNULL(January, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 14 THEN ISNULL(February, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 15 THEN ISNULL(March, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 16 THEN ISNULL(April, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 17 THEN ISNULL(May, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 18 THEN ISNULL(June, 0) ELSE 0 END AS YearToDate\r\n\t\tFROM (SELECT CASE WHEN ALSFDBC.EnergyType ='ELE' THEN 'Electric consumption (kWh)'\r\n\t\t\t\t\tWHEN ALSFDBC.EnergyType ='GAS' THEN 'Natural gas (Therms)'\r\n\t\t\t\t\tWHEN ALSFDBC.EnergyType ='STM' THEN 'Steam (MLbs)'\r\n\t\t\t\t\tELSE 'Other' END AS Category\r\n\t\t\t\t,ALSFDBC.CitywideAgencyOrFacility\r\n\t\t\t\t,@PublishedBillingPeriod AS PublishedBillingPeriod\r\n\t\t\t\t,ALSFDBC.FiscalYear\r\n\t\t\t\t,ALSFDBC.EnergyType\r\n\t\t\t\t,ALSFDBC.AgencyCodeOEC\r\n\t\t\t\t,ALSFDBC.FacilityNumber\r\n\t\t\t\t,ALSFDBC.[Month]\r\n\t\t\t\t,ALSFDBC.CurrentFiscalYear\r\n\t\t\t\t,ALSFDBC.PriorFiscalYear\r\n\t\t\t\t,ALSFDBC.EnergyUsage\r\n\t\t\t\t,ALSFDBC.PublishedPeriodCurrentFiscalYear\r\n\t\t\t\t,ALSFDBC.PublishedPeriodPriorFiscalYear\r\n\t\t\t\t,AG.AgencyName\r\n\t\t\t\t,ALSFDBC.FacilityName\r\n\t\t\t\t,ALSFDBC.Address1\r\n\t\t\t\t,ALSFDBC.CityPlanningBIN\r\n\t\t\t\t,ALSFDBC.Borough\r\n\t\t\t\t,ALSFDBC.[Block]\r\n\t\t\t\t,ALSFDBC.LotNumber\r\n\t\t\t\t,ALSFDBC.SummaryORDetail\r\n\t\t\tFROM Published.TemporalAccountLevelSummaryForDollarsBtusAndCo2 AS ALSFDBC\r\n\t\t\t\tINNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCode, @FacilityNumber, @EmailAddress) AS AG\r\n\t\t\t\t\tON ALSFDBC.AgencyCodeOEC = AG.AgencyCodeOEC AND ALSFDBC.FacilityNumber = AG.OecFacilityNumber\r\n\t\t\tWHERE ALSFDBC.CitywideAgencyOrFacility = 'FE'\r\n\t\t\t\tAND ALSFDBC.EffectiveStartPeriod <= @PublishedBillingPeriod AND ALSFDBC.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\t\t\tAND ALSFDBC.FiscalYear >= dbo.CalculatePreviousFiscalYear(@PublishedBillingPeriod)) AS x\r\n\t\t\tPIVOT (SUM(EnergyUsage) FOR [Month] IN (July, August, September, October, November, December\r\n\t\t\t\t,January, February, March, April, May, June)) AS t\r\n\t\tUNION ALL\r\n\t\tSELECT *,\r\n\t\t\tCASE WHEN @BillingPeriodMonth >= 7 THEN ISNULL(July, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 8 THEN ISNULL(August, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 9 THEN ISNULL(September, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 10 THEN ISNULL(October, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 11 THEN ISNULL(November, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 12 THEN ISNULL(December, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 13 THEN ISNULL(January, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 14 THEN ISNULL(February, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 15 THEN ISNULL(March, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 16 THEN ISNULL(April, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 17 THEN ISNULL(May, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 18 THEN ISNULL(June, 0) ELSE 0 END AS YearToDate\r\n\t\tFROM (SELECT CASE WHEN ALSFDBC.EnergyType ='BTU' AND ALSFDBC.CitywideAgencyOrFacility = 'FA' THEN 'Total Cost'\r\n\t\t\t\t\tWHEN ALSFDBC.EnergyType ='ELE' AND ALSFDBC.CitywideAgencyOrFacility = 'FE' THEN 'Electricity Cost'\r\n\t\t\t\t\tWHEN ALSFDBC.EnergyType ='GAS' AND ALSFDBC.CitywideAgencyOrFacility = 'FE' THEN 'Natural Gas Cost'\r\n\t\t\t\t\tWHEN ALSFDBC.EnergyType ='STM' AND ALSFDBC.CitywideAgencyOrFacility = 'FE' THEN 'Steam Cost'\r\n\t\t\t\t\tELSE 'Other' END AS Category\r\n\t\t\t\t,ALSFDBC.CitywideAgencyOrFacility\r\n\t\t\t\t,@PublishedBillingPeriod AS PublishedBillingPeriod\r\n\t\t\t\t,ALSFDBC.FiscalYear\r\n\t\t\t\t,ALSFDBC.EnergyType\r\n\t\t\t\t,ALSFDBC.AgencyCodeOEC\r\n\t\t\t\t,ALSFDBC.FacilityNumber\r\n\t\t\t\t,ALSFDBC.TotalBilledAmount\r\n\t\t\t\t,ALSFDBC.[Month]\r\n\t\t\t\t,ALSFDBC.CurrentFiscalYear\r\n\t\t\t\t,ALSFDBC.PriorFiscalYear\r\n\t\t\t\t,ALSFDBC.PublishedPeriodCurrentFiscalYear\r\n\t\t\t\t,ALSFDBC.PublishedPeriodPriorFiscalYear\r\n\t\t\t\t,AG.AgencyName\r\n\t\t\t\t,ALSFDBC.FacilityName\r\n\t\t\t\t,ALSFDBC.Address1\r\n\t\t\t\t,ALSFDBC.CityPlanningBIN\r\n\t\t\t\t,ALSFDBC.Borough\r\n\t\t\t\t,ALSFDBC.[Block]\r\n\t\t\t\t,ALSFDBC.LotNumber\r\n\t\t\t\t,ALSFDBC.SummaryORDetail\r\n\t\t\tFROM Published.TemporalAccountLevelSummaryForDollarsBtusAndCo2 AS ALSFDBC\r\n\t\t\t\tINNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCode, @FacilityNumber, @EmailAddress) AS AG\r\n\t\t\t\tON ALSFDBC.AgencyCodeOEC = AG.AgencyCodeOEC AND ALSFDBC.FacilityNumber = AG.OecFacilityNumber\r\n\t\t\tWHERE ALSFDBC.CitywideAgencyOrFacility IN ('FE','FA')\r\n\t\t\t\tAND ALSFDBC.EffectiveStartPeriod <= @PublishedBillingPeriod AND ALSFDBC.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\t\t\tAND ALSFDBC.FiscalYear >= dbo.CalculatePreviousFiscalYear(@PublishedBillingPeriod)) AS x\r\n\t\t\tPIVOT (SUM(TotalBilledAmount) FOR [Month] IN (July, August, September, October, November, December\r\n\t\t\t\t,January, February, March, April, May, June)) AS t\r\n\t\tUNION ALL\r\n\t\tSELECT *,\r\n\t\t\tCASE WHEN @BillingPeriodMonth >= 7 THEN ISNULL(July, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 8 THEN ISNULL(August, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 9 THEN ISNULL(September, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 10 THEN ISNULL(October, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 11 THEN ISNULL(November, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 12 THEN ISNULL(December, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 13 THEN ISNULL(January, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 14 THEN ISNULL(February, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 15 THEN ISNULL(March, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 16 THEN ISNULL(April, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 17 THEN ISNULL(May, 0) ELSE 0 END\r\n\t\t\t\t+ CASE WHEN @BillingPeriodMonth >= 18 THEN ISNULL(June, 0) ELSE 0 END AS YearToDate\r\n\t\tFROM (SELECT 'CO2e Emissions (FY Cumulative)' AS Category\r\n\t\t\t\t,ALSFDBC.CitywideAgencyOrFacility\r\n\t\t\t\t,@PublishedBillingPeriod AS PublishedBillingPeriod\r\n\t\t\t\t,ALSFDBC.FiscalYear\r\n\t\t\t\t,ALSFDBC.EnergyType\r\n\t\t\t\t,ALSFDBC.AgencyCodeOEC\r\n\t\t\t\t,ALSFDBC.FacilityNumber\r\n\t\t\t\t,ALSFDBC.PublishedBillingPeriodRunningTotalCO2\r\n\t\t\t\t,ALSFDBC.[Month]\r\n\t\t\t\t,ALSFDBC.CurrentFiscalYear\r\n\t\t\t\t,ALSFDBC.PriorFiscalYear\r\n\t\t\t\t,ALSFDBC.PublishedPeriodCurrentFiscalYear\r\n\t\t\t\t,ALSFDBC.PublishedPeriodPriorFiscalYear\r\n\t\t\t\t,AG.AgencyName\r\n\t\t\t\t,ALSFDBC.FacilityName\r\n\t\t\t\t,ALSFDBC.Address1\r\n\t\t\t\t,ALSFDBC.CityPlanningBIN\r\n\t\t\t\t,ALSFDBC.Borough\r\n\t\t\t\t,ALSFDBC.[Block]\r\n\t\t\t\t,ALSFDBC.LotNumber\r\n\t\t\t\t,ALSFDBC.SummaryORDetail\r\n\t\t\tFROM Published.TemporalAccountLevelSummaryForDollarsBtusAndCo2 AS ALSFDBC\r\n\t\t\t\tINNER JOIN Billing.uftn_TableGetOECFacilityNumberByAgencyHierarchy(@AgencyCode, @FacilityNumber, @EmailAddress) AS AG\r\n\t\t\t\t\tON ALSFDBC.AgencyCodeOEC = AG.AgencyCodeOEC AND ALSFDBC.FacilityNumber = AG.OecFacilityNumber\r\n\t\t\tWHERE ALSFDBC.CitywideAgencyOrFacility = 'FA'\r\n\t\t\t\tAND ALSFDBC.EffectiveStartPeriod <= @PublishedBillingPeriod AND ALSFDBC.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\t\t\tAND ALSFDBC.FiscalYear >= dbo.CalculatePreviousFiscalYear(@PublishedBillingPeriod)) AS x\r\n\t\tPIVOT (SUM(PublishedBillingPeriodRunningTotalCO2) FOR [Month] IN (July, August, September, October, November, December\r\n\t\t\t,January, February, March, April, May, June)) AS t\r\n\t\t) AS fResult\r\n\r\n\tSELECT * FROM (SELECT fn.Category\r\n\t\t\t ,fn.CitywideAgencyOrFacility\r\n\t\t\t ,fn.PublishedBillingPeriod\r\n\t\t\t ,fn.FiscalYear\r\n\t\t\t ,'FY ' + fn.FiscalYear AS FiscalYearDisplay\r\n\t\t\t ,fn.EnergyType\r\n\t\t\t ,fn.AgencyCodeOEC\r\n\t\t\t ,fn.FacilityNumber\r\n\t\t\t ,fn.CurrentFiscalYear\r\n\t\t\t ,fn.PriorFiscalYear\r\n\t\t\t ,fn.PublishedPeriodCurrentFiscalYear\r\n\t\t\t ,fn.PublishedPeriodPriorFiscalYear\r\n\t\t\t ,fn.AgencyName\r\n\t\t\t ,fn.FacilityName\r\n\t\t\t ,fn.Address1\r\n\t\t\t ,fn.CityPlanningBIN\r\n\t\t\t ,fn.Borough\r\n\t\t\t ,fn.[Block]\r\n\t\t\t ,fn.LotNumber\r\n\t\t\t ,fn.SummaryORDetail\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.July, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.July, 'N2') END July\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.August, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.August, 'N2') END AS August\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.September, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.September, 'N2') END AS September\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.October, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.October, 'N2') END AS October\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.November, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.November, 'N2') END AS November\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.December, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.December, 'N2') END AS December\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.January, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.January, 'N2') END AS January\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.February, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.February, 'N2') END AS February\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.March, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.March, 'N2') END AS March\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.April, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.April, 'N2') END AS April\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.May, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.May, 'N2') END AS May\r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.June, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.June, 'N2') END AS June \r\n\t\t\t ,CASE WHEN fn.Category IN ('Total Cost', 'Electricity Cost', 'Natural Gas Cost', 'Steam Cost','Other') THEN FORMAT(fn.YearToDate, 'N2')\r\n\t\t\t\tELSE FORMAT(fn.YearToDate, 'N2') END AS YearToDate\r\n\t\tFROM @finalResult fn\r\n\t\tUNION\r\n\t\tSELECT cur.Category\r\n\t\t\t,cur.CitywideAgencyOrFacility\r\n\t\t\t,cur.PublishedBillingPeriod\r\n\t\t\t,'% Change' AS FiscalYear\r\n\t\t\t,'% Change' AS FiscalYearDisplay\r\n\t\t\t,cur.EnergyType\r\n\t\t\t,cur.AgencyCodeOEC\r\n\t\t\t,cur.FacilityNumber\r\n\t\t\t,cur.CurrentFiscalYear\r\n\t\t\t,cur.PriorFiscalYear\r\n\t\t\t,cur.PublishedPeriodCurrentFiscalYear\r\n\t\t\t,cur.PublishedPeriodPriorFiscalYear\r\n\t\t\t,cur.AgencyName\r\n\t\t\t,cur.FacilityName\r\n\t\t\t,cur.Address1\r\n\t\t\t,cur.CityPlanningBIN\r\n\t\t\t,cur.Borough\r\n\t\t\t,cur.[Block]\r\n\t\t\t,cur.LotNumber\r\n\t\t\t,cur.SummaryORDetail\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.July, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.July, 0) - ISNULL(cur.July, 0)) / CASE WHEN ISNULL(cur.July, 0) = 0 THEN 1 ELSE cur.July END END, 'N1') AS July\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.August, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.August, 0) - ISNULL(cur.August, 0)) / CASE WHEN ISNULL(cur.August, 0) = 0 THEN 1 ELSE cur.August END END, 'N1') AS August\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.September, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.September, 0) - ISNULL(cur.September, 0) ) / CASE WHEN ISNULL(cur.September, 0) = 0 THEN 1 ELSE cur.September END END, 'N1') AS September\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.October, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.October, 0) - ISNULL(cur.October, 0)) / CASE WHEN ISNULL(cur.October, 0) = 0 THEN 1 ELSE cur.October END END, 'N1') AS October\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.November, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.November, 0) - ISNULL(cur.November, 0)) / CASE WHEN ISNULL(cur.November, 0) = 0 THEN 1 ELSE cur.November END END, 'N1') AS November\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.December, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.December, 0) - ISNULL(cur.December, 0)) / CASE WHEN ISNULL(cur.December, 0) = 0 THEN 1 ELSE cur.December END END, 'N1') AS December\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.January, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.January, 0) - ISNULL(cur.January, 0)) / CASE WHEN ISNULL(cur.January, 0) = 0 THEN 1 ELSE cur.January END END, 'N1') AS January\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.February, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.February, 0) - ISNULL(cur.February, 0)) / CASE WHEN ISNULL(cur.February, 0) = 0 THEN 1 ELSE cur.February END END, 'N1') AS February\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.March, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.March, 0) - ISNULL(cur.March, 0)) / CASE WHEN ISNULL(cur.March, 0) = 0 THEN 1 ELSE cur.March END END, 'N1') AS March\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.April, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.April, 0) - ISNULL(cur.April, 0)) / CASE WHEN ISNULL(cur.April, 0) = 0 THEN 1 ELSE cur.April END END, 'N1') AS April\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.May, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.May, 0) - ISNULL(cur.May, 0)) / CASE WHEN ISNULL(cur.May, 0) = 0 THEN 1 ELSE cur.May END END, 'N1') AS May\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.June, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.June, 0) - ISNULL(cur.June, 0) ) / CASE WHEN ISNULL(cur.June, 0) = 0 THEN 1 ELSE cur.June END END, 'N1') AS June\r\n\t\t\t,FORMAT( 100 * CASE WHEN ISNULL(pri.YearToDate, 0) = 0 THEN NULL\r\n\t\t\t\tELSE (ISNULL(pri.YearToDate, 0) - ISNULL(cur.YearToDate, 0)) / CASE WHEN ISNULL(cur.YearToDate, 0) = 0 THEN 1 ELSE cur.YearToDate END END, 'N1') AS YearToDate\r\n\t\tFROM (SELECT * FROM @finalResult WHERE PublishedPeriodCurrentFiscalYear = CurrentFiscalYear) AS pri\r\n\t\t\tINNER JOIN (SELECT * FROM @finalResult WHERE PublishedPeriodPriorFiscalYear = CurrentFiscalYear) AS cur ON pri.Category = cur.Category\r\n\t\t\t\tAND pri.EnergyType = cur.EnergyType AND pri.FacilityNumber = cur.FacilityNumber\r\n\t\t) AS frs\r\n\tORDER BY frs.Category, frs.FacilityNumber, frs.FiscalYear DESC;\r\nEND;"
        }
      ]
    }
  ]
}