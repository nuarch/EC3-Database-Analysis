{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CrisNationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CRIS_ProcessMeterPrepareData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CRIS_ProcessMeterPrepareData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to prepare and update meter reading data for billing purposes within the "
        },
        {
          "type": "text",
          "text": "CrisNationalGridWest",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema. It processes records in the "
        },
        {
          "type": "text",
          "text": "UploadMeterReadDetail",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table, updating various fields related to billing periods, meter readings, and account details. The procedure includes error handling to log and raise exceptions if any issues occur during execution."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this stored procedure is medium. It involves multiple updates to a table based on conditional logic, joins with another table, and error handling. The logic is straightforward but requires an understanding of the business rules and data relationships."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period for which the data is being prepared. It is used in error messages but not directly in the logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@authenticatedID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An identifier for the authenticated user or process executing the procedure. It is not used within the procedure logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter used to indicate the success or failure of the procedure. It is set to "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for success and "
                },
                {
                  "type": "text",
                  "text": "1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring local variables and setting the initial status code to "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "First Update",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Adjusts fields in "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterReadDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " based on conditions related to activity codes and meter read status."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Second Update",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Corrects the "
                        },
                        {
                          "type": "text",
                          "text": "CalculatedBillingPeriodRevision",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "FirstBillingPeriodCanceled",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " fields to ensure they are within valid ranges."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Third Update",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Joins with "
                        },
                        {
                          "type": "text",
                          "text": "UploadAccountBillingDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to adjust date ranges and billing periods, adding notes if records are capped."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Fourth Update",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Ensures "
                        },
                        {
                          "type": "text",
                          "text": "CalculatedBillingPeriodRevision",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is at least equal to "
                        },
                        {
                          "type": "text",
                          "text": "FirstBillingPeriodCanceled",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Fifth Update",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Updates "
                        },
                        {
                          "type": "text",
                          "text": "CurrentMeterNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " by joining with several tables to ensure the correct meter number is associated with each account."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure includes a "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block to handle exceptions. If an error occurs, it constructs a detailed error message and raises it using "
                },
                {
                  "type": "text",
                  "text": "RAISERROR",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", while setting the "
                },
                {
                  "type": "text",
                  "text": "@StatusCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to "
                },
                {
                  "type": "text",
                  "text": "1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the "
                },
                {
                  "type": "text",
                  "text": "UploadMeterReadDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "UploadAccountBillingDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " tables have appropriate indexes on columns used in "
                },
                {
                  "type": "text",
                  "text": "WHERE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " clauses and joins to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the tables contain a large number of records, consider processing data in batches to reduce transaction size and lock contention."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure updates multiple records, which could lead to locking issues in a high-concurrency environment. Consider using transaction isolation levels or row versioning to mitigate this."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in "
                },
                {
                  "type": "text",
                  "text": "UploadMeterReadDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "UploadAccountBillingDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is consistent and accurate. Any discrepancies could lead to incorrect updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure captures and logs errors, it does not implement a retry mechanism. Transient errors could cause the procedure to fail unnecessarily."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the data volume grows, the performance of the procedure may degrade if not optimized for large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The business rules are hardcoded, which may require frequent updates if business requirements change. Consider externalizing some logic to configuration tables or parameters."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [CrisNationalGridWest].[usp_CRIS_ProcessMeterPrepareData]\n(\r\n\t@BillingPeriod AS VARCHAR(6)\r\n\t,@authenticatedID AS INT\r\n\t,@StatusCode AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\t--********************************************************************************\r\n\t--\tAuthor: MOHAMMED BELARREM\r\n\t--\tDescription: populates some key fields before the processing\r\n\t--\tLog:\r\n\t--\t\t05/26/2010\tMOH\tCreation\r\n\t--\t\t06/14/2010\tMOH\tUpdate: Added therms, thermsFactor and GasRateCode\r\n\t--\t\t06/18/2010\tMOH\tUpdate: Added routine to correct the meter FBPC ,BPR, FromDate and ToDate based on their account counter parts\r\n\t--\t\t07/08/2010\tMOH\tUpdate: Added routine to update the currentMeterNumber into the MeterDetail table\r\n\t--\t\t07/14/2010\tMOH\tUpdate: Added the query to correct CalculatedBillingPeriodRevision\r\n\t--\t\t07/30/2010\tMOH\tUpdate: Added turned off accounts and meters to query that updates CurrentMeterNumber\r\n\t--\t\t11/08/2010  MOH Update: Modified the way we get the ThermsFactor from the uploadAccountDetail to be more accurate and avoid 0 factors for last bills\r\n\t--\t\t11/09/2010  MOH Update: Added throwing an exception when the ThermsFactor is null or zero\r\n\t--\t\t11/29/2010\tMOH\tUpdate:\tAdded notes for fudged thermFactor and took off the transaction\r\n\t--\t\t11/30/2010\tMOH\tUpdate:\tRemoved the ThermsFactor block and moved it be excecuted after the exchanges are run\r\n\t--      12/28/2018  VY update: Modified for UniqueSeqIDs\r\n\t--********************************************************************************\r\n\tDECLARE @AccountNumber AS acctnum, @MeterNumber AS MeterNumber, @crlf AS CHAR(2) = CHAR(13) + CHAR(10);\r\n\r\n\tBEGIN TRY\r\n\t\t-- begin TRANSACTION preparationTran\r\n\t\tSET @StatusCode  = 0;\r\n\r\n\t\t-- update the extra fields\r\n\t\tUPDATE CrisNationalGridWest.UploadMeterReadDetail\r\n\t\tSET CalculatedBillingPeriodRevision = CrisNationalGridWest.DetermineBillingPeriodRevisionByToDate(MeterReadingToDate)\r\n\t\t\t,FirstBillingPeriodCanceled = CrisNationalGridWest.DetermineFirstPeriodCanceledByFromDate(MeterReadingFromDate)\r\n\t\t\t,MeterCCF = CASE WHEN ActivityCode ='0827' AND MeterReadStatus ='X' THEN ABS(MeterCCF) * -1 ELSE MeterCCF END\r\n\t\t\t,IsCancel = CASE when ActivityCode ='0827' AND MeterReadStatus ='X' THEN 'Y' ELSE 'N' END\r\n\t\tWHERE IsProcessed = 'N' AND ExcludeAndReview = 'N';\r\n\r\n\t\t-- correct FBPC and BPR\r\n\t\tUPDATE CrisNationalGridWest.UploadMeterReadDetail\r\n\t\tSET CalculatedBillingPeriodRevision\t= CASE WHEN CalculatedBillingPeriodRevision > BillingPeriod THEN BillingPeriod\r\n\t\t\t\tELSE CalculatedBillingPeriodRevision END\r\n\t\t\t,FirstBillingPeriodCanceled = CASE WHEN CalculatedBillingPeriodRevision < FirstBillingPeriodCanceled THEN CalculatedBillingPeriodRevision\r\n\t\t\t\tELSE FirstBillingPeriodCanceled END\r\n\t\tWHERE IsProcessed = 'N' AND ExcludeAndReview = 'N';\r\n\r\n\t\t-- range of dates and billing periods\r\n\t\t-- update the end point dates and period\r\n\t\t-- notes show the range of dates\r\n\t\tUPDATE M\r\n\t\tSET Notes = CASE WHEN M.CalculatedBillingPeriodRevision > A.BPR\r\n\t\t\t\tOR M.FirstBillingPeriodCanceled < A.FBPC\r\n\t\t\t\tOR M.MeterReadingToDate > A.ToDate\r\n\t\t\t\tOR M.MeterReadingFromDate < A.FromDate\r\n\t\t\t\tOR M.MeterReadingFromDate > A.ToDate THEN M.Notes + 'this record has been capped'\r\n\t\t\t\t\tELSE M.Notes END\r\n\t\t\t,CalculatedBillingPeriodRevision = CASE WHEN M.CalculatedBillingPeriodRevision > A.BPR THEN A.BPR\r\n\t\t\t\tELSE M.CalculatedBillingPeriodRevision END\r\n\t\t\t,FirstBillingPeriodCanceled = CASE WHEN M.FirstBillingPeriodCanceled < A.FBPC THEN A.FBPC\r\n\t\t\t\tELSE M.FirstBillingPeriodCanceled END\r\n\t\t\t,MeterReadingToDate = CASE WHEN M.MeterReadingToDate > A.ToDate THEN A.ToDate\r\n\t\t\t\tELSE M.MeterReadingToDate END\r\n\t\t\t,MeterReadingFromDate = CASE WHEN M.MeterReadingFromDate < A.FromDate THEN A.FromDate\r\n\t\t\t\tWHEN M.MeterReadingFromDate > A.ToDate THEN A.ToDate\r\n\t\t\t\tELSE M.MeterReadingFromDate END\r\n\t\tFROM CrisNationalGridWest.UploadMeterReadDetail AS M\r\n\t\t\tINNER JOIN (SELECT AccountNumber\r\n\t\t\t\t\t,CASE WHEN MIN(FirstBillingPeriodCanceled) > MAX(CalculatedBillingPeriodRevision) THEN MAX(CalculatedBillingPeriodRevision)\r\n\t\t\t\t\t\tELSE MIN(FirstBillingPeriodCanceled) END AS FBPC\r\n\t\t\t\t\t,CASE WHEN MAX(CalculatedBillingPeriodRevision) > MAX(BillingPeriod) THEN MAX(BillingPeriod)\r\n\t\t\t\t\t\tELSE MAX(CalculatedBillingPeriodRevision) END AS BPR\r\n\t\t\t\t\t,MIN(BillingFromDate) AS FromDate\r\n\t\t\t\t\t,MAX(BillingToDate) AS ToDate\r\n\t\t\t\tFROM CrisNationalGridWest.UploadAccountBillingDetail\r\n\t\t\t\tWHERE ExcludeAndReview = 'N'\r\n\t\t\t\tGROUP BY AccountNumber) AS A ON A.AccountNumber = M.AccountNumber\r\n\t\tWHERE M.IsProcessed = 'N' AND M.ExcludeAndReview = 'N';\r\n\r\n\t\t-- correct the CalculatedBillingPeriodRevision to be at least equal to the FirstBillingPeriodCanceled\r\n\t\tUPDATE U\r\n\t\tSET CalculatedBillingPeriodRevision = CASE WHEN CalculatedBillingPeriodRevision < FirstBillingPeriodCanceled THEN FirstBillingPeriodCanceled\r\n\t\t\tELSE  CalculatedBillingPeriodRevision END\r\n\t\tFROM CrisNationalGridWest.UploadMeterReadDetail AS U\r\n\t\tWHERE IsProcessed = 'N' AND ExcludeAndReview = 'N';\r\n\r\n\t\t-- update the CurrentMeterNumber in the record\r\n\t\tUPDATE U\r\n\t\tSET CurrentMeterNumber = M.CurrentMeterNumber\r\n\t\tFROM Billing.Account AS A\r\n\t\t\tINNER JOIN Billing.AccountExchangeMeterTrack AS E ON A.AccountSeqid = E.OriginalAccountSeqid\r\n\t\t\tINNER JOIN Billing.Meter AS M ON E.OriginalMeterSeqid = M.MeterSeqid\r\n\t\t\tINNER JOIN CrisNationalGridWest.UploadMeterReadDetail AS U ON A.OriginalAccountNumber = U.AccountNumber\r\n\t\t\t\tAND M.OriginalMeterNumber = U.MeterNumber\r\n\t\tWHERE A.CurrentInvoiceAccountGroup = 3 AND A.AccountStatus IN ('AC' , '46', '28') AND M.MeterStatus IN ('AC', '46', '45', '27');\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tDECLARE @CustomErrorMessage AS NVARCHAR(4000), @ErrorMessage AS NVARCHAR(4000), @ErrorSeverity AS INT, @ErrorState AS INT\r\n\t\t\t,@ErrorNumber AS INT, @ErrorLine AS INT, @ErrorProcedure AS NVARCHAR(126);\r\n\t\t\t\r\n\t\tSELECT @CustomErrorMessage = 'Error in StoredProcedure %s at line number %d' + @crlf + 'Billing Period: %s' + @crlf + 'Account:Meter (%s : %s)  ' + @crlf,\r\n\t\t\t@ErrorMessage = ERROR_MESSAGE(),\r\n\t\t\t@ErrorSeverity = ERROR_SEVERITY(),\r\n\t\t\t@ErrorState = ERROR_STATE(),\r\n\t\t\t@ErrorNumber = ERROR_NUMBER(),\r\n\t\t\t@ErrorProcedure = ERROR_PROCEDURE(),\r\n\t\t\t@ErrorLine = ERROR_LINE();\r\n\t\t\t\r\n\t\tSET\t@ErrorMessage = @CustomErrorMessage + @ErrorMessage + @crlf + 'ErrorNumber: ' + CAST(@ErrorNumber AS VARCHAR(10)) + @crlf;\r\n\t\t\r\n\t\tRAISERROR (@ErrorMessage, @ErrorSeverity, @ErrorState, @ErrorProcedure, @ErrorLine, @BillingPeriod, @AccountNumber\r\n\t\t\t,@MeterNumber) WITH LOG;\r\n\r\n\t\tSET @StatusCode  = 1;\r\n\tEND CATCH;\r\n END;"
        }
      ]
    }
  ]
}