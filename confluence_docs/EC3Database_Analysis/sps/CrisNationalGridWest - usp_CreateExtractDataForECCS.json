{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CrisNationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CreateExtractDataForECCS",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CreateExtractDataForECCS",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and transform data related to meter readings and account billing details for a utility company. It performs several operations, including truncating tables, inserting summarized data, updating records, and creating temporary tables for further processing. The procedure ultimately prepares data for extraction to an external system, likely for billing or reporting purposes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple data transformations and aggregations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses several temporary tables and complex joins."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes conditional logic and string manipulations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It performs operations on large datasets, which can impact performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates on predefined tables within the "
        },
        {
          "type": "text",
          "text": "CrisNationalGridWest",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncate Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by truncating several tables ("
                },
                {
                  "type": "text",
                  "text": "UploadMeterReadDetailSummary",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "ECCS_LegacyExtractCRISAccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "ECCS_LegacyExtractCRISMeterBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "ECCS_LegacyExtractSpecialLedger",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") to prepare for fresh data insertion."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Summarize Meter Read Details",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Data from "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterReadDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is summarized and inserted into "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterReadDetailSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The summarization involves grouping by account and meter numbers, calculating sums, and determining min/max values for certain fields."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert into Account Billing Table",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Data is inserted into "
                        },
                        {
                          "type": "text",
                          "text": "ECCS_LegacyExtractCRISAccountBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " from "
                        },
                        {
                          "type": "text",
                          "text": "UploadAccountBillingDetailPreload",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "UploadAccountBillingDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The insertion includes data transformations such as substring operations and conditional logic for certain fields."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Account Billing Table",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Records in "
                        },
                        {
                          "type": "text",
                          "text": "ECCS_LegacyExtractCRISAccountBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " are updated to reset balances for accounts with outdated activity dates."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert into Meter Billing Table",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Data is inserted into "
                        },
                        {
                          "type": "text",
                          "text": "ECCS_LegacyExtractCRISMeterBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " from "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterReadDetailSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Similar to account billing, this involves data transformations and conditional logic."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Create Account and Meter Groupings",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Temporary tables "
                        },
                        {
                          "type": "text",
                          "text": "#AccountInfo",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "#MeterInfo",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " are created to store aggregated account and meter data."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "These tables are populated with summarized data, including calculated fields and formatted strings."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Combine Data for Special Ledger",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Data from "
                        },
                        {
                          "type": "text",
                          "text": "#AccountInfo",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "#MeterInfo",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is combined and inserted into "
                        },
                        {
                          "type": "text",
                          "text": "ECCS_LegacyExtractSpecialLedger",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The insertion involves a union of account and meter records, with specific formatting applied."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Special Ledger Format",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The "
                        },
                        {
                          "type": "text",
                          "text": "ECCS_LegacyExtractSpecialLedger",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table is updated to ensure fixed-length formatting for certain fields."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncation and Bulk Inserts",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Frequent truncation and bulk inserts can be resource-intensive and may lock tables, affecting concurrent access."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins and Aggregations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of complex joins and aggregations can lead to high CPU and memory usage, especially on large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The creation and use of temporary tables can impact tempdb performance, particularly if the server is under heavy load."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "String Manipulations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Extensive use of string functions can slow down query execution, especially when processing large volumes of data."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Loss",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating tables without backups can lead to data loss if the procedure is executed unintentionally."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may cause blocking or deadlocks if executed concurrently with other operations on the same tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of the procedure may degrade, requiring optimization or hardware upgrades."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks error handling, which could lead to incomplete data processing or unhandled exceptions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of hardcoded values and assumptions in string manipulations and conditional logic may lead to errors if data formats change."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [CrisNationalGridWest].[usp_CreateExtractDataForECCS]\r\nAS\r\nBEGIN\r\n--\r\ntruncate table CrisNationalGridWest.UploadMeterReadDetailSummary\r\n--\r\n--\tSummarize the meterReadDetail for ECCS processing\r\n--\r\nINSERT INTO CrisNationalGridWest.UploadMeterReadDetailSummary\r\n                      (UploadMeterReadDetailSeqid, UtilityCompanySeqid, AccountInvoiceBillingGroup, BillingPeriod, BillingPeriodRevision, AccountNumber, \r\n                      MeterReadWorkDay, UtilityServiceAccountName, UtilityServiceAddress, Borough, Zipcode, State, ActivityCode, ActivityDate, ActivityTime, \r\n                      ActivityDateTime, TransactionCode, SpecialLedgerAccountNumber, SpecialLedgerWorkDay, MeterNumber, MeterConstant, NumberOfDials, \r\n                      MeterReadType, EstimatedOrActual, BillingTransactionCode, MeterReadStatus, MeterReadSource, MeterReadReason, MeterType, \r\n                      MeterReadingFromDate, MeterReadingToDate, MeterFromReading, MeterToReading, MeterReadTime, MeterCCF, FixFactor, PartSupplied, \r\n                      HasMeterRolledOver, ExcludeAndReview, FireAuditTrigger, Notes, AuthenticatedUserID, DateAdded, LastUpdate, meterTransactions)\r\nselect\r\n\t\t\tmb.UploadMeterReadDetailSeqid,mb.UtilityCompanySeqid,mb.AccountInvoiceBillingGroup,mb.BillingPeriod,groupedMB.BillingPeriodRevision,mb.AccountNumber,\r\n\t\t\tmb.MeterReadWorkDay,mb.UtilityServiceAccountName,mb.UtilityServiceAddress,mb.Borough,mb.Zipcode,mb.State,mb.ActivityCode,\r\n\t\t\tmb.ActivityDate,mb.ActivityTime,mb.ActivityDateTime,mb.TransactionCode,mb.SpecialLedgerAccountNumber,mb.SpecialLedgerWorkDay,mb.MeterNumber,mb.MeterConstant,mb.NumberOfDials,\r\n\t\t\tmb.MeterReadType,groupedMB.EstimatedOrActual,mb.BillingTransactionCode,mb.MeterReadStatus,mb.MeterReadSource,mb.MeterReadReason,mb.MeterType,\r\n\t\t\tgroupedMB.MeterReadingFromDate,groupedMB.MeterReadingToDate,groupedMB.MeterFromReading,groupedMB.MeterToReading,mb.MeterReadTime,groupedMB.MeterCCF,mb.FixFactor,mb.PartSupplied,\r\n\t\t\tmb.HasMeterRolledOver,mb.ExcludeAndReview,mb.FireAuditTrigger,mb.Notes,mb.AuthenticatedUserID,mb.DateAdded,mb.LastUpdate,groupedMB.meterTransactions\r\nfrom \r\n(\r\n\tSELECT    \r\n\t\t\t\tUploadMeterReadDetailSeqid, UtilityCompanySeqid, AccountInvoiceBillingGroup, BillingPeriod, AccountNumber, \r\n\t\t\t\tMeterReadWorkDay, UtilityServiceAccountName, UtilityServiceAddress, Borough, Zipcode, State, ActivityCode, ActivityDate, ActivityTime, \r\n\t\t\t\tActivityDateTime, TransactionCode, SpecialLedgerAccountNumber, SpecialLedgerWorkDay, MeterNumber, MeterConstant, NumberOfDials, \r\n\t\t\t\tMeterReadType, EstimatedOrActual, BillingTransactionCode, MeterReadStatus, MeterReadSource, MeterReadReason, MeterType, \r\n\t\t\t\tMeterReadingFromDate, MeterReadingToDate, MeterFromReading, MeterToReading, MeterReadTime, MeterCCF, FixFactor, PartSupplied, \r\n\t\t\t\tHasMeterRolledOver, ExcludeAndReview, FireAuditTrigger, Notes, AuthenticatedUserID, DateAdded, LastUpdate\r\n\tFROM CrisNationalGridWest.UploadMeterReadDetail\r\n) as mb \r\ninner join\r\n(\r\n\tSELECT AccountNumber, MeterNumber, BillingPeriodRevision,sum(MeterCCF) as MeterCCF,count(*) as meterTransactions,min(MeterReadingFromDate) as MeterReadingFromDate, max(EstimatedOrActual) as EstimatedOrActual,\r\n\tmax(MeterReadingToDate) as MeterReadingToDate,min(MeterFromReading) as MeterFromReading,max(MeterToReading) as MeterToReading,min(UploadMeterReadDetailSeqid) as UploadMeterReadDetailSeqid\r\n\tFROM CrisNationalGridWest.UploadMeterReadDetail\r\n\tgroup by AccountNumber, MeterNumber,BillingPeriodRevision\r\n) as groupedMB on\r\n\t\tmb.AccountNumber = groupedMB.AccountNumber and\r\n\t\tmb.MeterNumber = groupedMB.MeterNumber and\r\n\t\tmb.UploadMeterReadDetailSeqid = groupedMB.UploadMeterReadDetailSeqid\r\n--\r\n--\r\n--\r\n--\r\n\r\ntruncate table CrisNationalGridWest.ECCS_LegacyExtractCRISAccountBilling\r\n\r\nINSERT INTO CrisNationalGridWest.ECCS_LegacyExtractCRISAccountBilling\r\n(\r\n\tUploadAccountBillingDetailPreloadSEqid, \r\n\tUploadAccountBillingDetailSeqid,\r\n\tEC3BillingPeriod ,\r\n\tEC3BillingPeriodRevision ,\r\n\tEC3AccountNumber ,\r\n\tEC3MeterReadWorkDay ,\r\n\tEC3SpecialLedgerAccountNumber ,\r\n\tEC3GasRateCode ,\r\n\tEC3EstimatedOrActualBillingCode ,\r\n\tEC3BilledCCF ,\r\n\tEC3BilledTherms ,\r\n\tEC3GasChargeAmount ,\r\n\tEC3CurrentAccountBalance ,\r\n\tEC3AcountArrears ,\r\n\tEC3TerminationBalance ,\r\n\tEC3TransactionCode ,\r\n\tEC3BillingFromDate ,\r\n\tEC3BillingToDate ,\r\n\tFill, AccountNumber, RecordType, AccountName, ReadDate, BillingAmount, CCF, ThermFactor, Therms, GasRateCode, SACode, FromDate, ToDate, \r\n\tGAC, GAC_Amount, Arrears, CurrentAccountBalance, \r\n\tfill2,Ec3MiscellaneousCharges,ActivityDateTime)\r\n\r\nSELECT\t\t\t\t\r\n\t\tCrisNationalGridWest.UploadAccountBillingDetailPreload.[UploadAccountBillingDetailPreloadSeqid], \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.UploadAccountBillingDetailSeqid,\r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.BillingPeriod, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.BillingPeriodRevision, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.AccountNumber, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.MeterReadWorkDay, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.SpecialLedgerAccountNUmber, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.GasRateCode, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.EstimatedOrActualBillingCode, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.BilledCCF, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.BilledTherms, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.GasChargeAmount, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.CurrentAccountBalance, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.AccountArrears, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.TerminationBalance, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.TransactionCode, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.BillingFromDate, \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.BillingToDate \r\n\t\t,REPLICATE('0', 1) -- [Fill] [char](1) NULL,\r\n\t\t,substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.AccountNumber,2,10) -- [AccountNumber] [char](10) NULL,\r\n\t\t,'1' -- [RecordType] [char](1) NULL,  1 account record and 2 meter record type\r\n\t\t,CrisNationalGridWest.UploadAccountBillingDetailPreload.UtilityServiceAccountName --[AccountName] [char](25) NULL,\r\n\t\t,substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.[BillingToDate],5,2)+'/'+substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.[BillingToDate],7,2)+'/'+substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.[BillingToDate],1,4) --[ReadDate] [char](10) NULL,\r\n\t\t,substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.[GasChargeAmount],1,1)+substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.[GasChargeAmount],5,11)  --[BillingAmount] [char](12) NULL,\r\n\t\t,substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.[BilledCCF],1,1)+substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.[BilledCCF],4,11)  --[CCF] [char](9) NULL,\r\n\t\t,CrisNationalGridWest.UploadAccountBillingDetailPreload.[ThermFactor]  --[ThermFactor] [char](6) NULL,\r\n\t\t,substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.[BilledTherms],1,1)+substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.[BilledTherms],4,9)  --[Therms] [char](9) NULL,\r\n\t\t,CrisNationalGridWest.UploadAccountBillingDetailPreload.[GasRateCode]  --[GasRateCode] [char](3) NULL,\r\n\t\t,REPLICATE('0', 4)  --[SACode] [char](4) NULL,\r\n\t\t,CrisNationalGridWest.UploadAccountBillingDetailPreload.[BillingFromDate] -- [FromDate] [char](8) NULL,\r\n\t\t,CrisNationalGridWest.UploadAccountBillingDetailPreload.[BillingToDate] --[ToDate] [char](8) NULL,\r\n\t\t,REPLICATE('0', 16) --[GAC] [char](16) NULL,\r\n\t\t,REPLICATE('0', 16) --[GAC_Amount] [char](16) NULL,\r\n\t\t,substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.AccountArrears,1,1)+substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.AccountArrears,5,11)  --[Arrears] [char](12) NULL,\r\n\t\t,case when CrisNationalGridWest.UploadAccountBillingDetail.ActivityDateTime is null then '+00000000.00' else substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.CurrentAccountBalance,1,1)+substring(CrisNationalGridWest.UploadAccountBillingDetailPreload.CurrentAccountBalance,5,11) end --[CurrentAccountBalance] [char](12) NULL,\r\n\t\t,REPLICATE('0', 83),  --[fill2] [char](77) NULL +\t[Period] [char](6) NULL, is 83\r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.MiscellaneousChargeAmount,\r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.ActivityDateTime\r\n\t\t\r\nFROM \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetailPreload INNER JOIN\r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail ON \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetailPreload.[UploadAccountBillingDetailPreloadSeqid] = CrisNationalGridWest.UploadAccountBillingDetail.UploadAccountBillingDetailSeqid\r\nwhere \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.SpecialLedgerAccountNUmber is null and \r\n\t\tCrisNationalGridWest.UploadAccountBillingDetail.ExcludeAndReview = 'N'\r\n--\r\n--\r\n--\r\nUPDATE    CrisNationalGridWest.ECCS_LegacyExtractCRISAccountBilling\r\nSET              CurrentAccountBalance ='+00000000.00', Arrears ='+00000000.00', EC3AcountArrears =0, EC3CurrentAccountBalance =0\r\nWHERE (ActivityDateTime <>\r\n                          (SELECT MAX(ActivityDateTime) AS MAXActivityDateTime\r\n                            FROM CrisNationalGridWest.ECCS_LegacyExtractCRISAccountBilling AS b\r\n                            WHERE  (CrisNationalGridWest.ECCS_LegacyExtractCRISAccountBilling.EC3AccountNumber = b.EC3AccountNumber)\r\n                            ))\r\n\r\n--\r\n--\r\n--\r\nprint 'CrisNationalGridWest.ECCS_LegacyExtractCRISAccountBilling inserted row count: '+str(@@ROWCOUNT)\r\n\r\ntruncate table CrisNationalGridWest.ECCS_LegacyExtractCRISMeterBilling\r\n\r\nINSERT INTO CrisNationalGridWest.ECCS_LegacyExtractCRISMeterBilling\r\n\t\t(\r\n        UploadMeterReadDetailPreloadSeqid,\r\n        UploadMeterReadDetailSeqid ,\r\n        EC3BillingPeriod ,\r\n        EC3BillingPeriodRevision ,\r\n        EC3AccountNumber ,\r\n        EC3MeterNumber,\r\n        EC3MeterReadWorkDay ,\r\n        EC3SpecialLedgerAccountNumber ,\r\n        EC3MeterCCF ,\r\n        EC3MeterReadingFromDate ,\r\n        EC3MeterReadingToDate ,\r\n        EC3MeterReadStatus ,\r\n        EC3TransactionCode ,\r\n\t\tFill, \r\n\t\tAccountNumber, \r\n\t\tRecordType,\r\n\t\tMeterNumber,\r\n\t\tFromReading, \r\n\t\tToReading, \r\n\t\tReadingCode, \r\n\t\tMeterConstant,  \r\n\t\tReg, \r\n\t\tFromDate, \r\n\t\tToDate,\r\n\t\tConsumption,\r\n\t\tStreetNumber,\r\n\t\tStreetName, \r\n\t\tfill4)\r\nselect\r\n\t\tUploadMeterReadDetailSeqid,\r\n\t\tUploadMeterReadDetailSeqid ,\r\n\t\tBillingPeriod ,\r\n\t\tBillingPeriodRevision ,\r\n\t\tAccountNumber ,\r\n\t\tMeterNumber,\r\n\t\tSpecialLedgerWorkDay ,\r\n\t\tSpecialLedgerAccountNumber ,\r\n\t\tMeterCCF ,\r\n\t\tMeterReadingFromDate ,\r\n\t\tMeterReadingToDate ,\r\n\t\tMeterReadStatus ,\r\n\t\tTransactionCode\r\n\t\t,REPLICATE('0', 1) -- [Fill] [char](1) NULL,\r\n\t\t,substring(AccountNumber,2,10) -- [AccountNumber] [char](10) NULL,\r\n\t\t,'2' -- [RecordType] [char](1) NULL,  1 account record and 2 meter record type\r\n\t\t,[MeterNumber] --  [char](9) NULL,\r\n\t\t,cast([MeterFromReading] as char(8))-- [FromReading] [char](8) NULL,\r\n\t\t,cast(MeterToReading as char(8)) -- [ToDate] [char](8) NULL,\r\n\t\t,substring([EstimatedOrActual],1,1) --[ReadingCode] [char](1) NULL,\r\n\t\t,'0'+cast([MeterConstant] as char(5)) -- [MeterConstant] [char](6) NULL,\r\n\t\t,'0'  -- [Reg] [char](1) NULL,\r\n\t\t,[MeterReadingFromDate] -- [FromDate] [char](8) NULL,\r\n\t\t,[MeterReadingToDate] -- [ToReading] [char](8) NULL,\r\n\t\t,REPLICATE('0', 9) --[MeterCCF] -- [Consumption] [char](9) NULL,\r\n\t\t,substring(UtilityServiceAddress,1,6) --[StreetNumber] [char](6) NULL,\r\n\t\t,substring(UtilityServiceAddress,7,24) --[StreetName] [char](24) NULL,\r\n\t\t,REPLICATE('0', 109) --[fill4] [char](109) NULL+\t[Period] [char](8) NULL, 101 + 8 = 109\r\nFROM CrisNationalGridWest.UploadMeterReadDetailSummary\r\nWHERE (SpecialLedgerAccountNumber IS NULL)\r\n\r\nprint 'CrisNationalGridWest.ECCS_LegacyExtractCRISMeterBilling inserted row count: '+str(@@ROWCOUNT)\r\n\t\t\r\n--\r\n--\r\n\r\n-- create the account grouping\r\n\r\nSELECT *\r\nINTO #AccountInfo\r\nFROM \r\n(\r\n\t\tSELECT\t\r\n\t\t\t\t-- EC3 Fields\r\n\t\t\t\t  AccountNumber \r\n\t\t\t\t, SUM(CurrentAccountBalance) AS CurrentAccountBalance\r\n\t\t\t\t, SUM(GasChargeAmount) AS GasChargeAmount\r\n\t\t\t\t, SUM(BilledCCF) AS BilledCCF\r\n\t\t\t\t, SUM(BilledTherms) AS BilledTherms\r\n\t\t\t\t, MAX(ThermFactor) AS ThermFactor\r\n\t\t\t\t, MIN(BillingFromDate) AS BillingFromDate\r\n\t\t\t\t, MAX(BillingToDate) AS BillingToDate\r\n\t\t\t\t\r\n\t\t\t\t-- ECCS Fields\r\n\t\t\t\t, 'A'\t\t\t\t\tas EC3RecordTYpeAccount\r\n\t\t\t\t, REPLICATE('0', 1)\t\tas Blank\r\n\t\t\t\t, REPLICATE('0', 1)\t\tas Area\r\n\t\t\t\t, REPLICATE('0', 2)\t\tas Dept \r\n\t\t\t\t, REPLICATE('0', 2)\t\tas Record \r\n\t\t\t\t, REPLICATE('0', 3)\t\tas Unit \r\n\t\t\t\t, REPLICATE('0', 2)\t\tas CardNumber \r\n\t\t\t\t, CrisNationalGridWest.EccsCancelBumpAccountTenantNumber(MAX(SpecialLedgerWorkDay )+ substring( MAX(SpecialLedgerAccountNUmber) ,2 ,10) , 'BI') AS ECCSAccountNumber\r\n\t\t\t\t, REPLICATE('0',9)\t\tas fill1 \r\n\t\t\t\t, substring( MAX(UtilityServiceAccountName) ,1,21) as  ServiceName\r\n\t\t\t\t, REPLICATE('0', 4)\t\tas fill2 \r\n\t\t\t\t, substring(MAX(UtilityServiceAddress) ,1,19) AS Address \r\n\t\t\t\t, REPLICATE('0', 2)\t\tas Pz \r\n\t\t\t\t, REPLICATE('0', 5)\t\tas fill3 \r\n\t\t\t\t, case when MAX(EstimatedOrActualBillingCode) = 'EST' then 'ES'else '  ' end AS BillCode\r\n\t\t\t\t, REPLICATE('0', 7)\t\tAS fill35 --substring(MeterNumber ,3,7)\r\n\t\t\t\t, substring( MIN(BillingFromDate),5,4) + substring( MIN(BillingFromDate),4,1) AS FromDate\r\n\t\t\t\t, substring( MAX(BillingToDate),5,4) + substring( MAX(BillingToDate),4,1) AS ToDate\r\n\t\t\t\t, REPLICATE('0', 1)\t\t\tas fill4 \r\n\t\t\t\t, CrisNationalGridWest.EccsCreateOverpunch( CAST( dbo.CalculateNumberOfBillingDays(  MIN(BillingFromDate) , MAX(BillingToDate) ) AS VARCHAR(20) ) , 3 ) as BillingDays\r\n\t\t\t\t, REPLICATE('0', 1)\t\tas Step \r\n\t\t\t\t, REPLICATE('0', 6)\t\tAS  fill45 -- CrisNationalGridWest.EccsCreateOverpunch(FromReading \r\n\t\t\t\t, REPLICATE('0', 1)\t\tas fill5 \r\n\t\t\t\t, REPLICATE('0', 1)\t\tas ThermZone \r\n\t\t\t\t, REPLICATE('0', 1)\t\tas Reg \r\n\t\t\t\t, REPLICATE('0', 1)\t\tas Dials \r\n\t\t\t\t, REPLICATE('0', 6)\t\tas fill55 --ToReading,\r\n\t\t\t\t, CrisNationalGridWest.EccsCreateOverpunch( CAST ( SUM( BilledCCF ) AS VARCHAR(20) ) , 10 ) AS ECCSBilledCCF\r\n\t\t\t\t, CrisNationalGridWest.EccsCreateOverpunch( CAST ( SUM(BilledTherms) AS VARCHAR(20) ) , 10 ) AS ECCSBilledTherms\r\n\t\t\t\t, substring( CAST ( MAX(ThermFactor) AS VARCHAR(6) )  ,1 ,1 ) + substring( CAST ( MAX(ThermFactor) AS VARCHAR(6) )  ,3 ,4 ) AS ECCSThermFactors\r\n\t\t\t\t, REPLICATE('0', 5)\t\tas Gallon \r\n\t\t\t\t, CrisNationalGridWest.EccsCreateOverpunchBilledAmountWithImpliedDecimal( CAST ( SUM(CurrentAccountBalance) AS VARCHAR(20) ) ) AS ECCSCurrentAccountBalance\r\n\t\t\t\t, SUM( MiscellaneousChargeAmount ) AS ECCSMiscellaneousChargeAmount\r\n\t\t\t\t, MAX( ActivityDateTime ) AS MaxActivityDateTime\r\n\r\n\t\tFROM CrisNationalGridWest.UploadAccountBillingDetail\r\n\t\tWHERE   (SpecialLedgerAccountNUmber IS NOT NULL)\r\n\t\tGROUP BY AccountNumber\r\n) AS AccountInfo\r\n\r\n\r\nprint 'AccountInfo inserted row count: '+str(@@ROWCOUNT)\r\n\r\n\r\n-- create meter grouping\r\n\r\nSELECT *\r\nINTO #MeterInfo\r\nFROM \r\n(\r\n\t\tSELECT  \r\n\t\t\t\t-- EC3 Fields\r\n\t\t\t\t CrisNationalGridWest.EccsCancelBumpAccountTenantNumber( MAX(SpecialLedgerWorkDay) + substring( MAX(SpecialLedgerAccountNUmber),2 ,10) , 'BI') AS ECCSAccountNumber\r\n\t\t\t\t, MeterNumber\r\n\t\t\t\t, MIN(MeterReadingFromDate) AS MeterReadingFromDate\r\n\t\t\t\t, MAX(MeterReadingToDate) AS MeterReadingToDate\r\n\t\t\t\t, SUM(MeterCCF) AS MeterCCF\r\n\t\t\t\t, SUM(Therms) AS Therms\r\n\t\t\t\t, MAX(HasMeterRolledOver) AS HasMeterRolledOver\r\n\t\t\t\t, (SELECT MIN(MeterFromReading) FROM CrisNationalGridWest.UploadMeterReadDetail AS c WHERE (c.AccountNumber = a.AccountNumber) AND (c.MeterNumber = a.MeterNumber) AND (ActivityDateTime = (SELECT MIN(ActivityDateTime) FROM CrisNationalGridWest.UploadMeterReadDetail AS b WHERE (a.AccountNumber = b.AccountNumber) AND (a.MeterNumber = b.MeterNumber) )) ) AS MeterFromReading\r\n\t\t\t\t, (SELECT MAX(MeterToReading)\tFROM CrisNationalGridWest.UploadMeterReadDetail AS c WHERE (c.AccountNumber = a.AccountNumber) AND (c.MeterNumber = a.MeterNumber) AND (ActivityDateTime = (SELECT MAX(ActivityDateTime) FROM CrisNationalGridWest.UploadMeterReadDetail AS b WHERE (a.AccountNumber = b.AccountNumber) AND (a.MeterNumber = b.MeterNumber) )) ) AS MeterToReading\r\n\t\t\t\t\r\n\t\t\t\t-- ECCS Fields\r\n\t\t\t\t, 'M' AS EC3MeterRecordType\r\n\t\t\t\t, case when  MAX(EstimatedOrActual) = 'EST' then 'ES'else '  ' end AS BillCode\r\n\t\t\t\t, substring( max(MeterNumber) ,3,7) AS eccsMeterNumber\r\n\t\t\t\t, substring( MIN( MeterReadingFromDate) ,5 ,4) + substring( MIN(MeterReadingFromDate),4 ,1) AS FromDate\r\n\t\t\t\t, substring( MAX( MeterReadingToDate) ,5 ,4) + substring( MAX(MeterReadingToDate),4 ,1) AS ToDate\r\n\t\t\t\t, REPLICATE('0',3) AS BillingDays -- CrisNationalGridWest.EccsCreateOverpunch('+'+[BillingDays],3)\r\n\t\t\t\t, case when MAX ( MeterReadStatus ) in ('111','112') then '000000000}' else '000000000{' end\tAS ECCSMeterCCF\t\t\t\t --CrisNationalGridWest.EccsCreateNegativeOverpunch(UploadMeterReadDetailSummary.[MeterCCF],9,case when UploadMeterReadDetailSummary.MeterReadStatus in ('111','112') then 'BC' else 'BI' end)\r\n\t\t\t\t, CrisNationalGridWest.EccsCreateOverpunch(CrisNationalGridWest.EccsLeadZeroesPlusSign(cast( (SELECT MIN(MeterFromReading) FROM CrisNationalGridWest.UploadMeterReadDetail AS c WHERE (c.AccountNumber = a.AccountNumber) AND (c.MeterNumber = a.MeterNumber) AND (ActivityDateTime = (SELECT MIN(ActivityDateTime) FROM CrisNationalGridWest.UploadMeterReadDetail AS b WHERE (a.AccountNumber = b.AccountNumber) AND (a.MeterNumber = b.MeterNumber) )) ) as varchar(6)),6,'N'),6) AS FromReading\r\n\t\t\t\t, CrisNationalGridWest.EccsCreateOverpunch(CrisNationalGridWest.EccsLeadZeroesPlusSign(cast( (SELECT MAX(MeterToReading)\tFROM CrisNationalGridWest.UploadMeterReadDetail AS c WHERE (c.AccountNumber = a.AccountNumber) AND (c.MeterNumber = a.MeterNumber) AND (ActivityDateTime = (SELECT MAX(ActivityDateTime) FROM CrisNationalGridWest.UploadMeterReadDetail AS b WHERE (a.AccountNumber = b.AccountNumber) AND (a.MeterNumber = b.MeterNumber) )) ) as varchar(6)),6,'N'),6) AS ToReading\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t-- irrelevant fields\r\n\t\t\t\t, REPLICATE('0', 1)\tas blank  -- Blank\r\n\t\t\t\t, REPLICATE('0', 1)  AS Area\r\n\t\t\t\t, REPLICATE('0', 2) AS Dept \r\n\t\t\t\t, '41' AS  Record \r\n\t\t\t\t, REPLICATE('0', 3) as Unit  --  old MeterReadStatus \r\n\t\t\t\t, REPLICATE('0', 2) as CardNumber -- case when MeterReadStatus in ('111','112') then 'BC' else 'BI' end as\r\n\t\t\t\t, accountnumber AS AccountNumber -- CrisNationalGridWest.EccsCancelBumpAccountTenantNumber(CrisNationalGridWest.UploadMeterReadDetailSummary.SpecialLedgerWorkDay+substring(CrisNationalGridWest.UploadMeterReadDetailSummary.[SpecialLedgerAccountNUmber],2,10),case when UploadMeterReadDetailSummary.MeterReadStatus in ('111','112') then 'BC' else 'BI' end)  --AccountNumber \r\n\t\t\t\t, REPLICATE('0', 9) AS fill1 \r\n\t\t\t\t, substring(MAX(UtilityServiceAccountName) ,1,21) as  ServiceName\r\n\t\t\t\t, REPLICATE('0', 4) AS fill2 \r\n\t\t\t\t, substring(MAX(UtilityServiceAddress) ,1,19) AS Address \r\n\t\t\t\t, REPLICATE('0',2) AS Pz \r\n\t\t\t\t, REPLICATE('0',5) AS fill3 \r\n\t\t\t\t, REPLICATE('0',1) AS fill4 \r\n\t\t\t\t, REPLICATE('0',1) AS Step \r\n\t\t\t\t, REPLICATE('0', 1) AS fill5 \r\n\t\t\t\t, REPLICATE('0', 1)\t AS ThermZone \r\n\t\t\t\t, REPLICATE('0', 1) AS Reg \r\n\t\t\t\t, REPLICATE('0', 1) AS Dials \r\n\t\t\t\t, REPLICATE('0',10) AS eccstherms --CrisNationalGridWest.EccsCreateOverpunch([BilledTherms],10)\r\n\t\t\t\t, REPLICATE('0',5) AS thermsFactor  --CrisNationalGridWest.EccsCreateOverpunch([ThermFactor],5) \r\n\t\t\t\t, REPLICATE('0',5) AS Gallon -- Gallon \r\n\t\t\t\t, REPLICATE('0',10) AS GasChargeAmount --CrisNationalGridWest.EccsCreateOverpunch([GasChargeAmount],10)\r\n\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\tFROM\tCrisNationalGridWest.UploadMeterReadDetail AS a\r\n\t\tWHERE  (SpecialLedgerAccountNumber IS NOT NULL)\r\n\t\tGROUP BY AccountNumber, MeterNumber\r\n) AS MeterInfo\r\n\r\n\r\nprint 'MeterInfo inserted row count: '+str(@@ROWCOUNT)\r\n\r\n\r\n-- combine data for meter and account\r\n\r\n\r\nTRUNCATE TABLE  CrisNationalGridWest.ECCS_LegacyExtractSpecialLedger\r\n\r\n\r\nINSERT   into CrisNationalGridWest.ECCS_LegacyExtractSpecialLedger\r\n(\r\n\t\t--UploadAccountBillingDetailPreloadSeqid, \r\n\t\t--UploadAccountBillingDetailSeqid,\r\n\t\t--EC3BillingPeriod ,\r\n\t\t--EC3BillingPeriodRevision ,\r\n\t\t--EC3AccountNumber ,\r\n\t\t--EC3MeterReadWorkDay ,\r\n\t\t--EC3SpecialLedgerAccountNumber ,\r\n\t\t--EC3GasRateCode ,\r\n\t\t--EC3EstimatedOrActualBillingCode ,\r\n\t\t--EC3BilledCCF ,\r\n\t\t--EC3BilledTherms ,\r\n\t\t--EC3ThermFactor,\r\n\t\t--EC3GasChargeAmount ,\r\n\t\t--EC3CurrentAccountBalance ,\r\n\t\t--EC3AcountArrears ,\r\n\t\t--EC3TerminationBalance ,\r\n\t\t--EC3TransactionCode ,\r\n\t\t--EC3BillingFromDate ,\r\n\t\t--EC3BillingToDate ,\r\n\t\tEC3RecordTypeAccount,\r\n\t\tBlank, Area, Dept, Record, Unit, Card_no, \r\n\t\tAccountNumber, Fill1, AccountName, Fill2, \r\n\t\tLocation, Pz, Fill3, Bill_Code, MeterNumber,\r\n\t\tFromDate, ToDate, Fill4, \r\n\t\tBillingDays, Step, \r\n\t\tFromReading, Fill5,Therm_zn, Reg, Dials, \r\n\t\tToReading, CCF, \r\n\t\tTherms, ThermFactor, Gal, \r\n\t\tBillingAmount\r\n)\r\n\r\nSELECT * \r\nFROM \r\n( \r\n\t\t-- info injected into only 1st meter\r\n\t\tSELECT 'A' AS EC3MeterRecordType-- m.EC3MeterRecordType\r\n\t\t\t\t,#AccountInfo.blank\r\n\t\t\t\t,#AccountInfo.area\r\n\t\t\t\t,#AccountInfo.dept\r\n\t\t\t\t,#AccountInfo.record\r\n\t\t\t\t,#AccountInfo.unit\t\t\r\n\t\t\t\t,#AccountInfo.CardNumber\r\n\t\t\t\t, #AccountInfo.eccsAccountNumber\r\n\t\t\t\t, #AccountInfo.Fill1\r\n\t\t\t\t, #AccountInfo.servicename\r\n\t\t\t\t, #AccountInfo.Fill2\r\n\t\t\t\t,#AccountInfo.Address\r\n\t\t\t\t, #AccountInfo.Pz\r\n\t\t\t\t, #AccountInfo.Fill3\r\n\t\t\t\t, #AccountInfo.BillCode\r\n\t\t\t\t, m.eccsMeterNumber\r\n\t\t\t\t, m.FromDate\r\n\t\t\t\t, m.ToDate\r\n\t\t\t\t, #AccountInfo.Fill4\r\n\t\t\t\t, #AccountInfo.BillingDays\r\n\t\t\t\t, #AccountInfo.Step\r\n\t\t\t\t, m.FromReading\r\n\t\t\t\t,#AccountInfo.Fill5\r\n\t\t\t\t,#AccountInfo.ThermZone\r\n\t\t\t\t, #AccountInfo.Reg\r\n\t\t\t\t, #AccountInfo.Dials\r\n\t\t\t\t, m.ToReading\r\n\t\t\t\t, #AccountInfo.ECCSBilledCCF\r\n\t\t\t\t,#AccountInfo.ECCSBilledtherms\r\n\t\t\t\t, #AccountInfo.ECCSThermFactors\r\n\t\t\t\t, #AccountInfo.Gallon\r\n\t\t\t\t, #AccountInfo.ECCSCurrentAccountBalance\r\n\t\r\n\t\tFROM #AccountInfo\r\n\t\tINNER JOIN #MeterInfo AS m\r\n\t\tON #AccountInfo.AccountNumber = m.AccountNumber\r\n\t\tWHERE (MeterNumber = ( SELECT MAX(MeterNumber) FROM #MeterInfo AS b WHERE b.AccountNumber = m.AccountNumber ) )\r\n\r\n\r\n\t\tUNION ALL \r\n\r\n\r\n\t\t-- info not injected to any other meter\r\n\t\tSELECT m.EC3MeterRecordType\r\n\t\t\t\t,m.blank\r\n\t\t\t\t,m.area\r\n\t\t\t\t,m.dept\r\n\t\t\t\t,m.record\r\n\t\t\t\t,m.unit\t\t\r\n\t\t\t\t,m.CardNumber\r\n\t\t\t\t, m.eccsAccountNumber\r\n\t\t\t\t, m.Fill1\r\n\t\t\t\t, m.servicename\r\n\t\t\t\t, m.Fill2\r\n\t\t\t\t,m.Address\r\n\t\t\t\t, m.Pz\r\n\t\t\t\t, m.Fill3\r\n\t\t\t\t, m.BillCode\r\n\t\t\t\t, m.eccsMeterNumber\r\n\t\t\t\t, m.FromDate\r\n\t\t\t\t, m.ToDate\r\n\t\t\t\t, m.Fill4\r\n\t\t\t\t, m.BillingDays\r\n\t\t\t\t, m.Step\r\n\t\t\t\t, m.FromReading\r\n\t\t\t\t,m.Fill5\r\n\t\t\t\t,m.ThermZone\r\n\t\t\t\t, m.Reg\r\n\t\t\t\t, m.Dials\r\n\t\t\t\t, m.ToReading\r\n\t\t\t\t, m.ECCSmeterCCF\r\n\t\t\t\t,m.ECCStherms\r\n\t\t\t\t, m.thermsFactor\r\n\t\t\t\t, m.Gallon\r\n\t\t\t\t, m.gaschargeamount\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tFROM #AccountInfo\r\n\t\tINNER JOIN #MeterInfo AS m\r\n\t\tON #AccountInfo.AccountNumber = m.AccountNumber\r\n\t\tWHERE (MeterNumber <> ( SELECT MAX(MeterNumber) FROM #MeterInfo AS b WHERE b.AccountNumber = m.AccountNumber ) )\r\n\r\n) AS ECCSData\r\nORDER BY eccsAccountNumber, eccsMeterNumber\r\n\r\n\r\nprint 'Special Ledger accounts and meters inserted row count: '+str(@@ROWCOUNT)\r\n\r\n\r\n\r\n\r\n\r\nUPDATE CrisNationalGridWest.ECCS_LegacyExtractSpecialLedger\r\nSET\t\r\n\t\t MeterNumber\t= REPLICATE('0', 7 - LEN( MeterNumber )) + MeterNumber\r\n\t\t,BillingDays\t= REPLICATE('0', 3 - LEN( BillingDays )) + BillingDays\r\n\t\t,FromReading\t= REPLICATE('0', 6 - LEN( FromReading )) + FromReading\r\n\t\t,ToReading\t\t= REPLICATE('0', 6 - LEN( ToReading )) + ToReading\r\n\t\t,CCF\t\t\t= REPLICATE('0', 10 - LEN( CCF )) + CCF\r\n\t\t,Therms\t\t\t= REPLICATE('0', 10 - LEN( Therms )) + Therms\r\n\t\t,ThermFactor\t= REPLICATE('0', 5 - LEN( ThermFactor )) + ThermFactor\r\n\t\t,Gal\t\t\t= REPLICATE('0', 5 - LEN( Gal )) + Gal\r\n\t\t,BillingAmount\t= REPLICATE('0', 10 - LEN( BillingAmount )) + BillingAmount\r\n\r\n\r\nprint 'Special Ledger accounts and meters updated to fixed format row count: '+str(@@ROWCOUNT)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\r\nEND"
        }
      ]
    }
  ]
}