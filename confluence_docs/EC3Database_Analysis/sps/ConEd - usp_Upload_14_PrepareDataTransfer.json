{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_14_PrepareDataTransfer",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_14_PrepareDataTransfer",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to prepare and process billing data adjustments for Con Edison gas accounts and meters. It involves multiple steps to update, insert, and validate data across several tables related to account and meter billing adjustments. The procedure handles unique sequence IDs, billing status updates, and data validation to ensure that the billing adjustments are correctly prepared for further processing."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple complex SQL operations, including "
                },
                {
                  "type": "text",
                  "text": "INSERT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UPDATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "DELETE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "JOIN",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " operations across several tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses user-defined functions for generating unique sequence IDs."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It contains numerous conditional logic and case statements to handle various scenarios."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure includes multiple validation steps and interacts with other stored procedures for data integrity checks."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It relies on internal logic and data from the database tables to perform its operations."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization and Setup:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure starts by declaring a variable "
                        },
                        {
                          "type": "text",
                          "text": "@CurrentBillingPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to store the current billing period."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It truncates the "
                        },
                        {
                          "type": "text",
                          "text": "UploadConEdisonCurrentlyBilledAccounts",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to prepare it for new data."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Preparation:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts distinct account numbers billed in the current period into "
                        },
                        {
                          "type": "text",
                          "text": "UploadConEdisonCurrentlyBilledAccounts",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Deletes accounts that were billed as original bills (where "
                        },
                        {
                          "type": "text",
                          "text": "BillingPeriod = BillingPeriodRevision",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ")."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Unique ID Assignment:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates tables to set unique account and meter sequence IDs using user-defined functions."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Account and Meter Status Updates:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates account and meter billing adjustments with status and sequence IDs based on existing records in the system."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Handles discrepancies and updates notes for accounts and meters with usage discrepancies."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Adjustments:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates billing adjustment records with calculated values for rebilled, canceled, and revised amounts and usage metrics."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts new records for accounts and meters that lack current period billing data."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Executes validation procedures to ensure data integrity and correctness."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " Ensure that the tables involved in joins and updates have appropriate indexes to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " Consider breaking down large updates and inserts into smaller batches to reduce locking and improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The use of "
                },
                {
                  "type": "text",
                  "text": "TRUNCATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and large updates can lead to locking issues. Evaluate the impact on concurrent transactions."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The procedure relies heavily on existing data integrity. Any discrepancies in the source data can lead to incorrect billing adjustments."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency and Locking:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The use of "
                },
                {
                  "type": "text",
                  "text": "TRUNCATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and large-scale updates can cause locking issues, affecting other transactions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete data processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " As data volume grows, the complexity and size of the procedure may impact performance and maintainability."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dependency on External Functions:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The procedure depends on user-defined functions for generating unique IDs, which must be reliable and performant."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Update History:\r\n-- UPDATE  VY  11/27/2018 Modified for UniqueAccountSeqID\r\n-- UPDATE  VY  12/20/2018 Modified for UniqueMeterSeqID\r\n-- update\tzd\t4/16/2019 added udf_GetAccountSeqId when the process picks up account seq id for new transactions\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_14_PrepareDataTransfer]\r\nAS\r\nBEGIN\r\n\tDECLARE @CurrentBillingPeriod AS VARCHAR(6);\r\n\r\n\tSELECT TOP (1) @CurrentBillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas;\r\n\r\n\t-- Intialize the table UploadConEdisonCurrentlyBilledAccounts by truncating it.\r\n\tTRUNCATE table ConEd.UploadConEdisonCurrentlyBilledAccounts;\r\n\r\n\t-- Insert into UploadConEdisonCurrentlyBilledAccounts all of the distinct account numbers that were billed \r\n\t-- for the currently billing period\r\n\tINSERT INTO ConEd.UploadConEdisonCurrentlyBilledAccounts(OriginalAccountNumber)\r\n\tSELECT DISTINCT OriginalAccountNumber FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas;\r\n\r\n\t-- Remove from the UploadConEdisonCurrentlyBilledAccounts table all of the account numbers that were billed \r\n\t-- as an original bill (Billing (BillingPeriod = BillingPeriodRevision)\r\n\tDELETE FROM ConEd.UploadConEdisonCurrentlyBilledAccounts\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G\r\n\t\tINNER JOIN ConEd.UploadConEdisonCurrentlyBilledAccounts AS C ON G.OriginalAccountNumber = C.OriginalAccountNumber\r\n\tWHERE G.BillingPeriod = G.BillingPeriodRevision;\r\n\tSELECT @@rowcount;\r\n\r\n\t--\tAny account remaining is an adjustment account that does not have an orginal bill.  A stub will be needed to handle the net charges\r\n\t--\tas a paid adjustment and original billed amount,revised billed amount and original paid amount will be $0.00 and the energyusage\r\n\t--\twill be 0.\r\n\t--\r\n\t--select 'Accounts Without an Original Bill',* from ConEd.UploadConEdisonCurrentlyBilledAccounts\r\n\t--\r\n\t--\tFind all of the existing accounts known to EC3 and the follwing fields\r\n\t--\t\tAdjustedAccount =Account.AccountSeqid,\r\n\t--\t\tAccountStatus =Account.AccountStatus,\r\n\t--\t\tAccountpreviousStatus =Account.AccountPreviousStatus,\r\n\t--\t\tAccountUtilityCompanySeqid =Account.UtilityAccountProvider\r\n\r\n\t-- setting the unique seq IDs\r\n\tUPDATE G\r\n\tSET UniqueAccountSeqID = Common.udf_GetUniqueAccountSeqId(G.OriginalAccountNumber)\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G\r\n\tWHERE G.UniqueAccountSeqID IS NULL;\r\n\r\n\tUPDATE MG \r\n\tSET UniqueMeterSeqID = Common.udf_GetUniqueMeterSeqId(MG.OriginalMeterNumber)\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG\r\n\tWHERE MG.UniqueMeterSeqID IS NULL;\r\n\r\n\tUPDATE MG \r\n\tSET UniqueAccountSeqID = Common.udf_GetUniqueAccountSeqId(MG.OriginalAccountNumber)\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG  \r\n\tWHERE MG.UniqueAccountSeqID is null\r\n    \r\n\tupdate AEMT set AEMT.UniqueMeterSeqID =  M.UniqueMeterSeqid, AEMT.UniqueAccountSeqID= M.UniqueAccountSeqID\r\n\tfrom Billing.AccountExchangeMeterTrack as AEMT\r\n\tinner join Billing.Meter as M on M.MeterSeqid = AEMT.OriginalMeterSeqid\r\n\twhere AEMT.UniqueMeterSeqID is null\r\n\r\n\t-------------------\r\n\r\n\tUPDATE G\r\n\tSET AdjustedAccount = A.AccountSeqid,\r\n\t\tAccountStatus = A.AccountStatus,\r\n\t\tAccountpreviousStatus = A.AccountPreviousStatus,\r\n\t\tAccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\tFROM Billing.Account AS A INNER JOIN\r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas AS G ON A.OriginalAccountNumber = G.OriginalAccountNumber\r\n\tWHERE A.UtilityAccountProvider = 9;\r\n\r\n\t--\tAssume that the derived PriorRevisedXXXX,RevisedXXXX & CanceledXXXX are correct.  The next  \r\n\t--\tupdate will grab the correct information from the account billing and account billing gas that being\r\n\t--\tadjusted.\r\n\t--\r\n\t--\tFormulas:\r\n\t--\r\n\t--\tThese formulas work in the same manner Amount,CCF or Therm.\r\n\t--\t\tTotalRebilledAmount is the aggregated Rebilled Amount inclusive of erroneous net zero rebills reported by Con Edison\r\n\t--\t\tTotalCanceledAmount is the aggregated Canceled Amount inclusive of erroneous net zero cancels reported by Con Edison\r\n\t--\t\tPriorRevisedBilledAmount is the revised billed amount in EC3 or the reported TotalCanceledAmount times minus one to \r\n\t--\t\tsimulate the revised billed amount in EC3.\r\n\t--\r\n\t--\t\tCanceledBilledAmount is the revised billed amount times minus one in EC3 or the reported TotalCanceledAmount to \r\n\t--\t\tsimulate the Canceled billed amount in EC3.\r\n\t--\r\n\t--\t\tRevisedBilledAmount is derived by adding the PriorRevisedBilledAmount + TotalRebilledAmount + TotalCanceledAmount whether it was \r\n\t--\t\treported by Con Edison or taken from AB.RevisedBilledAmount\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET TotalRebilledAmount = ISNULL(TotalRebilledAmount, 0),\r\n\t\tTotalCanceledAmount = ISNULL(TotalCanceledAmount, 0),\r\n\t\tPriorRevisedBilledAmount = ISNULL(TotalCanceledAmount, 0)*-1.00,\r\n\t\tCanceledBilledAmount = ISNULL(TotalCanceledAmount, 0),\r\n\t\tRevisedBilledAmount = ISNULL(TotalRebilledAmount, 0),--ISNULL(TotalCanceledAmount, 0)*-1.00+ (ISNULL(TotalRebilledAmount, 0) + ISNULL(TotalCanceledAmount, 0)),\r\n\t\tTotalTherms = ISNULL(TotalTherms, 0),\r\n\t\tCancelTotalTherms = ISNULL(CancelTotalTherms, 0),\r\n\t\tPriorRevisedTherms = CancelTotalTherms*-1,\r\n\t\tCanceledTherms = CancelTotalTherms,\r\n\t\tRevisedTherms = ISNULL(TotalTherms, 0),-- CancelTotalTherms*-1 + (TotalTherms+CancelTotalTherms),\r\n\t\tTotalCCF = ISNULL(TotalCCF, 0),\r\n\t\tCancelTotalCCF = ISNULL(CancelTotalCCF, 0),\r\n\t\tPriorRevisedCCF = CancelTotalCCF*-1,\r\n\t\tCanceledCCF = CancelTotalCCF,\r\n\t\tRevisedCCF = ISNULL(TotalCCF, 0),-- CancelTotalCCF*-1+(TotalCCF+CancelTotalCCF),\r\n\t\tAccountStatus = 'UA',\r\n\t\tAccountpreviousStatus = 'NU',\r\n\t\tAccountStatusPeriod = @CurrentBillingPeriod,\r\n\t\tInitialCancelFromDate = Case when InitialCancelFromDate is NULL then FromDate else InitialCancelFromDate end,\r\n\t\tCurrentBillingToDate = Case when CurrentBillingToDate is NULL then ToDate else CurrentBillingToDate end,\r\n\t\tSpannedThermFactor = Case when SpannedThermFactor is NULL then ThermsFactor else SpannedThermFactor END;\r\n\r\n\t--\tSetup the core billing information for the current bill(G.BillingPeriod = @CurrentBillingPeriod)\r\n\tUPDATE G\r\n\tSET TotalRebilledAmount = ISNULL(TotalRebilledAmount, 0),\r\n\t\tTotalCanceledAmount = ISNULL(TotalCanceledAmount, 0),\r\n\t\tPriorRevisedBilledAmount =AB.RevisedBilledAmount,\r\n\t\tCanceledBilledAmount = ISNULL(TotalCanceledAmount, 0) ,--AB.RevisedBilledAmount*-1,\r\n\t\tRevisedBilledAmount = ISNULL(TotalRebilledAmount, 0), --AB.RevisedBilledAmount+ (ISNULL(TotalRebilledAmount, 0) + ISNULL(TotalCanceledAmount, 0)),\r\n\t\tTotalTherms = ISNULL(G.TotalTherms, 0),\r\n\t\tCancelTotalTherms = ISNULL(G.CancelTotalTherms, 0),\r\n\t\tPriorRevisedTherms = ISNULL(AB.AccountEnergyUsage, 0),\r\n\t\tCanceledTherms = ISNULL(G.CancelTotalTherms, 0), -- ISNULL(AB.AccountEnergyUsage*-1, 0),\r\n\t\tRevisedTherms = ISNULL(G.TotalTherms, 0),--ISNULL(AB.AccountEnergyUsage, 0) + (ISNULL(G.TotalTherms, 0)+ISNULL(G.CancelTotalTherms, 0)),\r\n\t\tTotalCCF = ISNULL(G.TotalCCF, 0),\r\n\t\tCancelTotalCCF = ISNULL(G.CancelTotalCCF, 0),-- ISNULL(G.CancelTotalCCF, 0),\r\n\t\tPriorRevisedCCF = ISNULL(BG.TotalCCF, 0),\r\n\t\tCanceledCCF = ISNULL(G.CancelTotalCCF, 0),-- ISNULL(BG.TotalCCF*-1, 0),\r\n\t\tRevisedCCF = ISNULL(G.TotalCCF, 0) -- ISNULL(BG.TotalCCF, 0)+(ISNULL(G.TotalCCF, 0)+ISNULL(G.CancelTotalCCF, 0))\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G INNER JOIN\r\n\t\tBilling.AccountBilling AS AB ON G.BillingPeriodRevision = AB.BillingPeriod AND \r\n\t\tG.BillingPeriodRevision = AB.BillingPeriodRevision \r\n\t\t--AND G.OriginalAccountNumber = AB.OriginalAccountNumber\r\n\t\tAND G.UniqueAccountSeqID = AB.UniqueAccountSeqId\r\n\t\tINNER JOIN Billing.AccountBillingGas AS BG ON AB.AccountBillingSeqid = BG.AccountBillingSeqid\r\n\tWHERE G.BillingPeriod = @CurrentBillingPeriod;\r\n\r\n\t--\tStart getting the existing information from EC3 about the account (ie. Sequence Id's)\r\n\tUPDATE G\r\n\tSET AdjustedAccount = A.AccountSeqid,\r\n\t\tAccountStatus = 'AC',-- A.AccountStatus,\r\n\t\tAccountpreviousStatus = 'AC',-- A.AccountpreviousStatus, \r\n\t\tCurrentInvoiceAccountBillingGroup = 2,-- A.CurrentInvoiceAccountGroup,\r\n\t\tAccountUtilityCompanySeqid = A.UtilityAccountProvider,\r\n\t\tEnergySource = 5,-- A.EnergySource,\r\n\t\tIsTimeOfDayAccount = 'N',\r\n\t\tLastPeriodModified = G.BillingPeriod,\r\n\t\tBillingCycle = A.BillingCycle,\r\n\t\tSalesType = A.SalesType,\r\n\t\tManualPaymentOverride = 'N',\r\n\t\tManualDataEntry = 'N'\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G INNER JOIN\r\n\t\tBilling.Account AS A ON G.UniqueAccountSeqID = A.UniqueAccountSeqid AND A.IsCurrentRecord = 'Y' AND G.AccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\t\tINNER JOIN Billing.AccountBilling AS AB ON A.UniqueAccountSeqid = AB.UniqueAccountSeqId AND A.IsCurrentRecord = 'Y';\r\n\r\n\t--\tGet all of the prior period adjustment sequence ids from the AccountBilling and AccountBillingGas tables.\r\n\tUPDATE G\r\n\tSET AdjustedAccountBilling =AB.AccountBillingSeqid,\r\n\t\tAdjustedAccountBillingGas = BG.AccountBillingGasSeqid, -- Fixed Peter\r\n\t\tAccountStatus = CASE WHEN AB.AccountBillingStatus IS NULL THEN 'BA' ELSE AB.AccountBillingStatus END ,\r\n\t\tAccountpreviousStatus = CASE WHEN AB.PreviousAccountBillingStatus IS NULL THEN 'NB' ELSE AB.PreviousAccountBillingStatus END ,\r\n\t\tAccountStatusPeriod = CASE WHEN AB.AccountBillingStatusCodePeriod IS NULL THEN @CurrentBillingPeriod ELSE AB.AccountBillingStatusCodePeriod END \r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G \r\n\tINNER JOIN Billing.AccountBilling AS AB ON \r\n\t\tG.BillingPeriodRevision = AB.BillingPeriod \r\n\t\tAND G.BillingPeriodRevision = AB.BillingPeriodRevision \r\n\t\tAND G.UniqueAccountSeqID = AB.UniqueAccountSeqId\r\n\t\t--AND G.OriginalAccountNumber = AB.OriginalAccountNumber \r\n\r\n\t\tINNER JOIN Billing.AccountBillingGas AS BG ON AB.AccountBillingSeqid = BG.AccountBillingSeqid \r\n\tWHERE G.BillingPeriod <> G.BillingPeriodRevision;\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AccountStatus = 'BA',\r\n\t\tAccountpreviousStatus = 'NB',\r\n\t\tAccountStatusPeriod = @CurrentBillingPeriod,\r\n\t\tPriorRevisedCCF = 0,\r\n\t\tRevisedCCF = ISNULL(TotalCCF, 0),\r\n\t\tCanceledCCF = ISNULL(CancelTotalCCF, 0),\r\n\t\tPriorRevisedTherms =0,\r\n\t\tRevisedTherms = ISNULL(TotalTherms, 0),\r\n\t\tCanceledTherms = ISNULL(CancelTotalTherms, 0)\r\n\tWHERE AccountStatus <> 'BC' AND BillingPeriod <> BillingPeriodRevision AND AdjustedAccountBilling IS NULL;\r\n\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET CurrentInvoiceAccountBillingGroup = 2,  \r\n\t\tPriorRevisedCCF = 0,\r\n\t\tRevisedCCF = ISNULL(TotalCCF, 0),\r\n\t\tCanceledCCF = ISNULL(CancelTotalCCF, 0),\r\n\t\tPriorRevisedTherms = 0,\r\n\t\tRevisedTherms = ISNULL(TotalTherms, 0),\r\n\t\tCanceledTherms = ISNULL(CancelTotalTherms, 0)\r\n\tWHERE AccountStatus IN ('UA','AC') AND BillingPeriod = BillingPeriodRevision AND AdjustedAccountBilling IS NULL;\r\n\r\n\t-- Account and Meter Billing usage Discrepancies are noted in the meter billing and the \r\n\t-- reported information saved as the rebilled amount.\r\n\tUPDATE MG\r\n\tSET Notes ='Account and Meter Billing usage Discrepancies  ' +\r\n\t\tCASE WHEN netTherms <> 0 THEN 'Net Therms('+CAST(netTherms AS VARCHAR(10))+') ' +\r\n\t\tCASE WHEN netCCF <> 0 THEN ')  CCF('+CAST(netCCF AS VARCHAR(10))+')  '  ELSE '' END + \r\n\t\t':  Reported: Therms('+CAST(AccountTotalTherms AS VARCHAR(10)) +')  CCF('+CAST(AccountTotalCcf AS VARCHAR(10)) +')  ThermsFactor('+CAST(AccountTotalThermsFactor AS VARCHAR(10)) +')  ' ELSE '' END --+\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG \r\n\t\tINNER JOIN ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS UR \r\n\t\tON MG.BillingPeriod = UR.BillingPeriod \r\n\t\tAND MG.UniqueAccountSeqID = UR.UniqueAccountSeqID\r\n\t\t--AND MG.OriginalAccountNumber = UR.OriginalAccountNumber\r\n\t\tAND MG.BillingPeriodRevision = UR.BillingPeriodRevision;\r\n\r\n\t--\tAssume that all of the meter billing rows are unknown meters on existing accounts and the Meter Billing Status Period is the current processing\r\n\t--\tbilling period.  This is processing by exception.\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET NumberOfCancelTransactions = 0,\r\n\t\tMeterBillingStatus = 'UM',\r\n\t\tMeterBillingPreviousStatus = 'NU',\r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod,\r\n\t\tRevisedBilledCCF = ISNULL(Ccf, 0),\r\n\t\tCanceledBilledCCF = 0,\r\n\t\tRevisedBilledTherms = ISNULL(Therms, 0),\r\n\t\tCanceledBilledTherms = 0,\r\n\t\tMeterReset = CASE WHEN Notes IS NULL THEN 'N' \r\n\t\t\tELSE CASE WHEN CHARINDEX('Reset:',Notes) <> 0 THEN 'Y' ELSE 'N' END\r\n\t\t\tEND\r\n\t\t\r\n\t--\tThe ConEd.UploadConEdisonMeterBillingAdjustmentGas is being joined with the ConEd.UploadConEdisonAccountBillingAdjustmentGas table to link the\r\n\t--\texisting meter billing transactions with their account billing conterpart.  The account table is being joined with the UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\ttable since the all of the known accounts sequence id has been updated in that table.  The UploadConEdisonMeterBillingAdjustmentGas is being joined with \r\n\t--\tBilling.Meter and Billing.AccountExchangeMeterTrack to identify all meters and the AccountExchangeMeterTrack information that is currently known to EC3.\r\n\t--\r\n\t--\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t--\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t--\t\tBilling.Account\r\n\t--\t\tBilling.Meter \r\n\t--\t\tBilling.AccountExchangeMeterTrack \r\n\t--\r\n\t--\tAfter the update,all of the meters that are unknown to EC3 will have a Status code of 'UM'.\r\n\tUPDATE MG\r\n\tSET AccountUtilityCompanySeqid =A.UtilityAccountProvider,\r\n\t\tAccountBilled =A.AccountSeqid,\r\n\t\tMeterBilled =M.MeterSeqid,\r\n\t\tAccountExchangeMeterTrackSeqid = NULL , --AEMT.AccountExchangeMeterTrackSeqid,\r\n\t\tMeterBillingStatus ='AC', ---  M.MeterStatus,\r\n\t\tMeterBillingPreviousStatus ='AC', ---  M.MeterPreviousStatus,\r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod -- M.MeterStatusCodePeriod\r\n\tFROM Billing.Account AS A \r\n\t\tINNER JOIN Billing.Meter AS M ON M.UniqueAccountSeqID = A.UniqueAccountSeqid AND A.IsCurrentRecord ='Y' AND M.IsCurrentRecord ='Y'\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G  ON G.UniqueAccountSeqID = A.UniqueAccountSeqid\r\n\t\tINNER JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG \r\n\t\tON MG.UniqueAccountSeqID = G.UniqueAccountSeqID \r\n\t\tAND mg.UniqueMeterSeqID = m.UniqueMeterSeqid\r\n\t\tAND G.BillingPeriod = MG.BillingPeriod \r\n\t\tAND G.BillingPeriodRevision = MG.BillingPeriodRevision \r\n\r\n\t--FROM Billing.AccountExchangeMeterTrack AS AEMT \r\n\t--\tINNER JOIN Billing.Account AS A ON AEMT.OriginalAccountSeqid = A.AccountSeqid AND AEMT.OriginalAccountSeqid = A.AccountSeqid \r\n\t--\tINNER JOIN Billing.Meter AS M ON  AEMT.OriginalMeterSeqid = M.MeterSeqid AND AEMT.OriginalMeterSeqid = M.MeterSeqid \r\n\t--\tINNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G \r\n\t--\tINNER JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG \r\n\t--\tON G.BillingPeriod = MG.BillingPeriod AND G.BillingPeriodRevision = MG.BillingPeriodRevision\r\n\t--\tAND G.OriginalAccountNumber = MG.OriginalAccountNumber \r\n\t--\tON A.AccountSeqid = G.AdjustedAccount \r\n\t--\t--AND M.OriginalAccountNumber = MG.OriginalAccountNumber AND M.OriginalMeterNumber = MG.OriginalMeterNumber \r\n\t--\tAND AEMT.OriginalAccountNumber = MG.OriginalAccountNumber AND AEMT.OriginalMeterNumber = MG.OriginalMeterNumber\r\n\t--\tAND mg.UniqueMeterSeqID = m.UniqueMeterSeqid\r\n\t--WHERE A.IsCurrentRecord ='Y' AND M.IsCurrentRecord ='Y'\r\n\r\n-- UPDATING AccountExchangeMeterTrackSeqid for legacy\r\nUPDATE MG SET MG.AccountExchangeMeterTrackSeqid =  AEMT.AccountExchangeMeterTrackSeqid \r\nFROM conEd.UploadConEdisonMeterBillingAdjustmentGas MG\r\nINNER JOIN Billing.AccountExchangeMeterTrack AS AEMT \r\nON AEMT.UniqueMeterSeqID= mg.UniqueMeterSeqID\r\nAND AEMT.UniqueAccountSeqID = mg.UniqueAccountSeqID\r\nINNER JOIN Billing.Meter AS M ON M.UniqueMeterSeqid = AEMT.UniqueMeterSeqID AND M.IsCurrentRecord ='Y'\r\nINNER JOIN Billing.Account AS A ON AEMT.UniqueAccountSeqID = a.UniqueAccountSeqid  AND A.IsCurrentRecord ='Y'\r\nAND A.AccountSeqid = AEMT.OriginalAccountSeqid\r\n\r\n\t---- added by dho - 10/8/2013 - previous update fails to handle span meter records for single period account record\r\n\t--UPDATE MG\r\n\t--SET AccountUtilityCompanySeqid =A.UtilityAccountProvider,\r\n\t--\tAccountBilled =A.AccountSeqid,\r\n\t--\tMeterBilled =M.MeterSeqid,\r\n\t--\tAccountExchangeMeterTrackSeqid =AEMT.AccountExchangeMeterTrackSeqid,\r\n\t--\tMeterBillingStatus ='AC', ---  M.MeterStatus,\r\n\t--\tMeterBillingPreviousStatus ='AC', ---  M.MeterPreviousStatus,\r\n\t--\tMeterBillingStatusPeriod = @CurrentBillingPeriod -- M.MeterStatusCodePeriod\r\n\t--FROM Billing.AccountExchangeMeterTrack AS AEMT INNER JOIN Billing.Account AS A ON AEMT.OriginalAccountSeqid = A.AccountSeqid AND \r\n\t--\tAEMT.OriginalAccountSeqid = A.AccountSeqid INNER JOIN Billing.Meter AS M ON AEMT.OriginalMeterSeqid = M.MeterSeqid AND \r\n\t--\tAEMT.OriginalMeterSeqid = M.MeterSeqid INNER JOIN ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G INNER JOIN\r\n\t--\tConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG ON G.BillingPeriod = MG.BillingPeriod\r\n\t--\tAND G.OriginalAccountNumber = MG.OriginalAccountNumber ON A.AccountSeqid = G.AdjustedAccount AND \r\n\t--\tM.OriginalAccountNumber = MG.OriginalAccountNumber AND M.OriginalMeterNumber = MG.OriginalMeterNumber AND \r\n\t--\tAEMT.OriginalAccountNumber = MG.OriginalAccountNumber AND AEMT.OriginalMeterNumber = MG.OriginalMeterNumber\r\n\t--WHERE MG.AccountExchangeMeterTrackSeqid IS NULL;\r\n\r\n\t--\tThe UploadConEdisonMeterBillingAdjustmentGas is using a LEFT JOIN with the account table to find all rows whose status is 'UM'.  If the \r\n\t--\taccount exists the AccountSeqid is updated in the AccountBilled column and no change to the status code.  If the AccountSeqid is NULL then the \r\n\t--\tmeter and the account are unknown to EC3 and the status updated to 'UA'\r\n\tUPDATE MG\r\n\tSET AccountBilled =A.AccountSeqid,\r\n\t\tMeterBillingStatus = CASE WHEN A.AccountSeqid IS NULL THEN 'UA' ELSE 'UM' END\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG LEFT JOIN\r\n\t\tBilling.Account AS A ON MG.UniqueAccountSeqID = A.UniqueAccountSeqid AND \r\n\t\t--Billing.Account AS A ON MG.OriginalAccountNumber = A.OriginalAccountNumber AND \r\n\t\tMG.AccountUtilityCompanySeqid = A.UtilityAccountProvider\r\n\tWHERE MG.MeterBillingStatus = 'UM';\r\n\r\n\r\n-- update missing ids\r\nupdate MG \r\nset MG.AdjustedMeterBilling = MB.MeterBillingSeqid\r\n,MG.AdjustedMeterBillingGas =MBG.MeterBillingGasSeqid\r\n\r\nfrom ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG\r\n\tINNER JOIN\tBilling.MeterBilling AS MB ON MB.UniqueMeterSeqId = MG.UniqueMeterSeqID \r\n\t\tAND\tMG.BillingPeriodRevision = MB.BillingPeriodRevision \r\n\t\tAND MG.BillingPeriodRevision = MB.BillingPeriod \r\n\tINNER JOIN Billing.MeterBillingGas MBG ON \r\n\t\t--MB.MeterBillingSeqid = MBG.MeterBillingSeqid AND \r\n\t\tMB.UniqueAccountSeqId = MBG.UniqueAccountSeqId \r\n\t\tAND MB.UniqueMeterSeqId = MBG.UniqueMeterSeqId\r\n\t\tAND MB.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n\tWHERE \r\n\tMG.AdjustedMeterBilling is null\r\n\r\n\r\n\t--\tCon Edison does not provide the meter billing cancellations. The meter billing rebills with be used to search EC3 for the row that needs to\r\n\t--\tbe adjusted.  The prior billed CCF and Therms will be used as the basis for the prior billed amount and the amount to be canceled.  The negation\r\n\t--\tof the prior objects will reverse the state of the prior value.  Also,if there is a match the NumberOfCancelTransactions is set to 1 and\r\n\t--\tNumberOfTransactions is increased by one (NumberOfTransactions + 1).\r\n\t--\r\n\t--\t\tRevisedBilledCCF = ISNULL(Billing.MeterBillingGas.Ccf, 0) + \r\n\t--\t\t\t\t\t\t  (ISNULL(MG.CCF, 0)+ISNULL(-1 * Billing.MeterBillingGas.Ccf, 0)),\r\n\t--\t\tCanceledBilledCCF = ISNULL(-1 * Billing.MeterBillingGas.Ccf, 0),\r\n\t--\t\tRevisedBilledTherms = ISNULL(MB.Consumption, 0)+\r\n\t--\t\t\t\t\t\t\t   (ISNULL(MG.Therms, 0)+ISNULL(-1 * MB.Consumption, 0)),\r\n\t--\t\tCanceledBilledTherms = ISNULL(-1 * MB.Consumption, 0),\r\n\tUPDATE MG\r\n\tSET\tNumberOfCancelTransactions = 1,\r\n\t\tNumberOfTransactions = ISNULL(MG.NumberOfTransactions, 0) + 1,\r\n\t\tAdjustedMeterBilling = MB.MeterBillingSeqid,\r\n\t\tAdjustedMeterBillingGas =MBG.MeterBillingGasSeqid,\r\n\t\tMeterBillingStatus = MB.MeterBillingStatus,\r\n\t\tMeterBillingPreviousStatus = MB.PreviousMeterBillingStatus,\r\n\t\tMeterBillingStatusPeriod = MB.MeterBillingStatusCodePeriod,\r\n\t\tRevisedBilledCCF = ISNULL(MG.CCF, 0),\r\n\t\tCanceledBilledCCF = 0,-- ISNULL(MG.CCF, 0),--ISNULL(-1 * Billing.MeterBillingGas.Ccf, 0),\r\n\t\tPriorRevisedBilledCCF = ISNULL(MBG.Ccf, 0),\r\n\t\tCCF = ISNULL(MG.CCF, 0),\r\n\t\tCancelCcf = 0,-- ISNULL(MG.CancelCcf, 0),-- Con Edison does not report Cancellations on the meter billing level\r\n\t\tPriorRevisedBilledTherms = ISNULL(MB.Consumption, 0),\r\n\t\tRevisedBilledTherms = ISNULL(MG.Therms, 0),\r\n\t\tCanceledBilledTherms = ISNULL(MG.CanceledBilledTherms, 0), -- ISNULL(-1 * MB.Consumption, 0),\r\n\t\tTherms = ISNULL(MG.Therms, 0),\r\n\t\tCancelTherms = ISNULL(MG.CanceledBilledTherms, 0),\r\n\t\tCancelFromDate = MBG.FromDate,\r\n\t\tCancelToDate = MBG.ToDate,\r\n\t\tCancelMeterFromReading = ISNULL(MBG.MeterFromReading, 0),\r\n\t\tCancelMeterToReading = ISNULL(MBG.MeterToReading, 0),\r\n\t\tCancelThermsFactor = ISNULL(MBG.ThermsFactor,1.03),\r\n\t\tCancelMeterConstant = ISNULL(MBG.MeterConstant,1)\r\n\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG\r\n\tINNER JOIN\tBilling.MeterBilling AS MB ON MB.UniqueMeterSeqId = MG.UniqueMeterSeqID \r\n\t\tAND\tMG.BillingPeriodRevision = MB.BillingPeriodRevision \r\n\t\tAND MG.BillingPeriodRevision = MB.BillingPeriod \r\n\tINNER JOIN Billing.MeterBillingGas MBG ON MB.MeterBillingSeqid = MBG.MeterBillingSeqid \r\n\t\tAND MB.UniqueAccountSeqId = MBG.UniqueAccountSeqId \r\n\t\tAND MB.UniqueMeterSeqId = MBG.UniqueMeterSeqId\r\n\t\tAND MB.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n\tWHERE MG.AccountBilled IS NOT NULL AND MG.MeterBilled IS NOT NULL;\r\n\r\n\t--\tUpdate the meter billing adjustments with a 'BA' status if they were not found with EC3. Exclude any\r\n\t--\tmeter billing whose status starts with 'U*' since they are unknown to EC3.  They will be added as new\r\n\t--\tmeters.  If they are being added to existing accounts then OEC will have to contact Con Edison to find out\r\n\t--\twhether it was a meter exchange or an additional meter.\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET MeterBillingStatus = 'BA',\r\n\t\tMeterBillingPreviousStatus = 'NB',\r\n\t\tMeterBillingStatusPeriod = @CurrentBillingPeriod,\r\n\t\tNotes = CASE WHEN SUBSTRING(Notes,1,5) = 'Meter' THEN Notes\r\n\t\t\t\t\tWHEN DerivedFromSpannedBill = 'Y' \r\n\t\t\t\t\t\tTHEN Notes + ' Back Billed in: '+ @CurrentBillingPeriod+ ' for Revised Billing Period: '+ BillingPeriodRevision\r\n\t\t\t\t\t\tELSE' Back Billed in: '+ @CurrentBillingPeriod+ ' for Revised Billing Period: '+ BillingPeriodRevision END \r\n\tWHERE BillingPeriod <> BillingPeriodRevision AND CancelThermsFactor IS NULL AND MeterBillingStatus NOT LIKE 'U%';\r\n\t\r\n\t--\tInsert the AccountBilling records from \"ConEd.UploadConEdisonCurrentlyBilledAccounts AS NoOriginalAccountBilling\" to provide\r\n\t--\ta record that can be used for the current period billing.  All of these bills will have a status code of \"BC\" back billed without\r\n\t--\ta current period bill.  The Current period usage and dollars are zero.  This was included for interuptible gas that lags billing\r\n\t--\tby a month.  The money will be count as a net paid adjustment.\r\n\tINSERT INTO ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\t(FacilityName,\r\n\t\tServiceAddress,\r\n\t\tAdjustedAccount,\r\n\t\tAccountUtilityCompanySeqid,\r\n\t\tAccountStatus,\r\n\t\tAccountpreviousStatus,\r\n\t\tAccountStatusPeriod,\r\n\t\tCurrentInvoiceAccountBillingGroup,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tOriginalAccountNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCanceledBillingPeriod,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tTotalRebilledAmount,\r\n\t\tTotalCanceledAmount,\r\n\t\tPriorRevisedBilledAmount,\r\n\t\tRevisedBilledAmount,\r\n\t\tCanceledBilledAmount,\r\n\t\tPriorRevisedCCF,\r\n\t\tRevisedCCF,\r\n\t\tCanceledCCF,\r\n\t\tPriorRevisedTherms,\r\n\t\tRevisedTherms,\r\n\t\tCanceledTherms,\r\n\t\tAverageRebillCostOfGasCharge,\r\n\t\tAverageRebillThermsFactor,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tToDate,\r\n\t\tFromDate,\r\n\t\tBillingAction,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tGasRateCode,\r\n\t\tTotalCCF,\r\n\t\tTotalTherms,\r\n\t\tThermsFactor,\r\n\t\tCancelFromDate,\r\n\t\tCancelToDate,\r\n\t\tCancelTotalCCF,\r\n\t\tCancelTotalTherms,\r\n\t\tCancelThermsFactor,\r\n\t\tCancelBillingDays,\r\n\t\tProcessEffectiveDate,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedBilledAmount,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tNotes,\r\n\t\tAuthenticatedUserID,\r\n\t\tBillingCycle)\r\n\tSELECT  \r\n\t\tABA.FacilityName,\r\n\t\tABA.ServiceAddress,\r\n\t\tABA.AdjustedAccount,\r\n\t\tABA.AccountUtilityCompanySeqid,\r\n\t\t'BC',-- ABA.AccountStatus,\r\n\t\t'NB',-- ABA.AccountpreviousStatus,\r\n\t\t@CurrentBillingPeriod,-- ABA.AccountStatusPeriod,\r\n\t\tABA.CurrentInvoiceAccountBillingGroup,\r\n\t\t1,-- ABA.NumberOfTransactions,\r\n\t\t1,-- ABA.NumberOfRebillTransactions,\r\n\t\t0,--  ABA.NumberOfCancelTransactions,\r\n\t\tABA.OriginalAccountNumber,\r\n\t\t@CurrentBillingPeriod,\r\n\t\t@CurrentBillingPeriod,-- @CurrentBillingPeriodRevision,\r\n\t\t@CurrentBillingPeriod,-- ABA.FirstCanceledBillingPeriod,\r\n\t\t'EST',-- ABA.EstimatedOrActualBilling,\r\n\t\tABA.InitialCancelFromDate,\r\n\t\tABA.CurrentBillingToDate,\r\n\t\tABA.NumberOfBillingPeriods,\r\n\t\tABA.TotalBillingDaysRebilled,\r\n\t\t0,--  ABA.TotalRebilledAmount,\r\n\t\t0,--  ABA.TotalCanceledAmount,\r\n\t\t0,--  ABA.PriorRevisedBilledAmount,\r\n\t\t0,--  ABA.RevisedBilledAmount,\r\n\t\t0,--  ABA.CanceledBilledAmount,\r\n\t\t0,--  ABA.PriorRevisedCCF,\r\n\t\t0,--  ABA.RevisedCCF,\r\n\t\t0,--  ABA.CanceledCCF,\r\n\t\t0,--  ABA.PriorRevisedTherms,\r\n\t\t0,--  ABA.RevisedTherms,\r\n\t\t0,--  ABA.CanceledTherms,\r\n\t\t0,--  ABA.AverageRebillCostOfGasCharge,\r\n\t\t0,--  ABA.AverageRebillThermsFactor,\r\n\t\tdbo.[CalculateNumberOfBillingDays](dbo.[DetermineConEdisonBillingPeriodProjectedFromDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid),\r\n\t\t\t\t\t\t\t\t\t\t\t   dbo.[DetermineConEdisonBillingPeriodProjectedToDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid)\r\n\t\t\t\t\t\t\t\t\t\t\t   ),--  ABA.BillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD](GETDATE()),--  ABA.BillingDate,\r\n\t\tdbo.[DetermineConEdisonBillingPeriodProjectedToDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid),--  ABA.ToDate,\r\n\t\tdbo.[DetermineConEdisonBillingPeriodProjectedFromDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid),--  ABA.FromDate,\r\n\t\t'O',--  ABA.BillingAction,\r\n\t\t'N',--  ABA.ProcessedInTheCurrentPeriod,\r\n\t\tABA.GasRateCode,\r\n\t\t0,--  ABA.TotalCCF,\r\n\t\t0,--  ABA.TotalTherms,\r\n\t\t0,--  ABA.ThermsFactor,\r\n\t\tNULL,--  ABA.CancelFromDate,\r\n\t\tNULL,--  ABA.CancelToDate,\r\n\t\t0,--  ABA.CancelTotalCCF,\r\n\t\t0,--  ABA.CancelTotalTherms,\r\n\t\t0,--  ABA.CancelThermsFactor,\r\n\t\t0,--  ABA.CancelBillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD](GETDATE()),--  ABA.ProcessEffectiveDate,\r\n\t\t'N',--  ABA.DerivedFromSpannedBill,\r\n\t\t0,--  ABA.SpannedBillingPeriodRevision,\r\n\t\t0,--  ABA.SpannedFirstCanceledBillingPeriod,\r\n\t\t0,--  ABA.SpannedBilledAmount,\r\n\t\t0,--  ABA.SpannedCCF,\r\n\t\t0,--  ABA.SpannedThermFactor,\r\n\t\t0,--  ABA.SpannedTherm,\r\n\t\t0,--  ABA.SpannedMonthlyPercentage,\r\n\t\t0,--  ABA.SpannedTotalPercentage,\r\n\t\t'No Current Account Billing Period record: ' + @CurrentBillingPeriod,--  ABA.Notes\r\n\t\t1,-- AuthenticatedUserID,\r\n\t\t'M'\r\n\tFROM ConEd.UploadConEdisonCurrentlyBilledAccounts AS CB INNER JOIN\r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas AS ABA ON \r\n\t\tCB.OriginalAccountNumber = ABA.OriginalAccountNumber\r\n\tWHERE ABA.BillingPeriodRevision = (SELECT MAX(BillingPeriodRevision) FROM ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\tGROUP BY OriginalAccountNumber HAVING OriginalAccountNumber = ABA.OriginalAccountNumber);\r\n\r\n\t--\tInsert the AccountBilling records when the \"UploadConEdisonAccountBillingAdjustmentGasSeqid IS NULL and \r\n\t--\tUploadConEdisonMeterBillingAdjustmentGasSeqid is not NULL\".  This provides a record that can be used for the current period billing that\r\n\t--\twas not provided by Con edison.  All of these bills will have a status code of \"BM\" back billed meter billing without\r\n\t--\ta current period account bill.  The period will reflect the billing period revison and the usage is set to the CCF,Therms and Thermsfactor.  \r\n\t--\tAll dollar columns will be set to Zero (no money).\r\n\tINSERT INTO ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t\t(FacilityName,\r\n\t\tServiceAddress,\r\n\t\tAdjustedAccount,\r\n\t\tAccountUtilityCompanySeqid,\r\n\t\tAccountStatus,\r\n\t\tAccountpreviousStatus,\r\n\t\tAccountStatusPeriod,\r\n\t\tCurrentInvoiceAccountBillingGroup,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tOriginalAccountNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCanceledBillingPeriod,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tTotalRebilledAmount,\r\n\t\tTotalCanceledAmount,\r\n\t\tPriorRevisedBilledAmount,\r\n\t\tRevisedBilledAmount,\r\n\t\tCanceledBilledAmount,\r\n\t\tPriorRevisedCCF,\r\n\t\tRevisedCCF,\r\n\t\tCanceledCCF,\r\n\t\tPriorRevisedTherms,\r\n\t\tRevisedTherms,\r\n\t\tCanceledTherms,\r\n\t\tAverageRebillCostOfGasCharge,\r\n\t\tAverageRebillThermsFactor,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tToDate,\r\n\t\tFromDate,\r\n\t\tBillingAction,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tGasRateCode,\r\n\t\tTotalCCF,\r\n\t\tTotalTherms,\r\n\t\tThermsFactor,\r\n\t\tCancelFromDate,\r\n\t\tCancelToDate,\r\n\t\tCancelTotalCCF,\r\n\t\tCancelTotalTherms,\r\n\t\tCancelThermsFactor,\r\n\t\tCancelBillingDays,\r\n\t\tProcessEffectiveDate,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedBilledAmount,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tNotes,\r\n\t\tAuthenticatedUserID)\r\n\tSELECT MG.FacilityName,\r\n\t\tMG.ServiceAddress,\r\n\t\tMG.AccountBilled,\r\n\t\tMG.AccountUtilityCompanySeqid,\r\n\t\t'BM',-- ABA.AccountStatus,\r\n\t\t'NB',-- ABA.AccountpreviousStatus,\r\n\t\t@CurrentBillingPeriod,-- ABA.AccountStatusPeriod,\r\n\t\t(SELECT A.CurrentInvoiceAccountGroup FROM Billing.Account AS A WHERE A.AccountSeqid = MG.AccountBilled),--ABA.CurrentInvoiceAccountBillingGroup,\r\n\t\t0,-- ABA.NumberOfTransactions,\r\n\t\t0,-- ABA.NumberOfRebillTransactions,\r\n\t\t0,--  ABA.NumberOfCancelTransactions,\r\n\t\tMG.OriginalAccountNumber,\r\n\t\t@CurrentBillingPeriod,\r\n\t\tMG.BillingPeriodRevision,-- @CurrentBillingPeriodRevision,\r\n\t\tMG.BillingPeriodRevision,-- ABA.FirstCanceledBillingPeriod,\r\n\t\t'EST',-- ABA.EstimatedOrActualBilling,\r\n\t\tMG.FromDate,-- ABA.InitialCancelFromDate,\r\n\t\tMG.ToDate,-- ABA.CurrentBillingToDate,\r\n\t\tMG.NumberOfBillingPeriods,\r\n\t\tMG.TotalBillingDaysRebilled,\r\n\t\t0,--  ABA.TotalRebilledAmount,\r\n\t\t0,--  ABA.TotalCanceledAmount,\r\n\t\t0,--  ABA.PriorRevisedBilledAmount,\r\n\t\t0,--  ABA.RevisedBilledAmount,\r\n\t\t0,--  ABA.CanceledBilledAmount,\r\n\t\t0,--  ABA.PriorRevisedCCF,\r\n\t\t0,--  ABA.RevisedCCF,\r\n\t\t0,--  ABA.CanceledCCF,\r\n\t\t0,--  ABA.PriorRevisedTherms,\r\n\t\t0,--  ABA.RevisedTherms,\r\n\t\t0,--  ABA.CanceledTherms,\r\n\t\t0,--  ABA.AverageRebillCostOfGasCharge,\r\n\t\t0,--  ABA.AverageRebillThermsFactor,\r\n\t\tMG.BillingDays,--  ABA.BillingDays,\r\n\t\tMG.BillingDate,-- dbo.[ConvertDatetimeToYYYYMMDD](GETDATE()),--  ABA.BillingDate,\r\n\t\tMG.ToDate, --  dbo.[DetermineConEdisonBillingPeriodProjectedToDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid),--  ABA.ToDate,\r\n\t\tMG.FromDate, --  dbo.[DetermineConEdisonBillingPeriodProjectedFromDate](@CurrentBillingPeriod,ABA.GasRateCode,ABA.AccountUtilityCompanySeqid),--  ABA.FromDate,\r\n\t\tMG.BillingAction,--  ABA.BillingAction,\r\n\t\t'N',--  ABA.ProcessedInTheCurrentPeriod,\r\n\t\t(SELECT A.CommodityTariffRate from Billing.Account AS A WHERE A.AccountSeqid = MG.AccountBilled),--MG.GasRateCode,\r\n\t\t0,--  MG.Ccf,--  ABA.TotalCCF,\r\n\t\t0,--  MG.Therms,--  ABA.TotalTherms,\r\n\t\t0,--  MG.ThermsFactor,--  ABA.ThermsFactor,\r\n\t\tNULL,--  ABA.CancelFromDate,\r\n\t\tNULL,--  ABA.CancelToDate,\r\n\t\t0,--  ABA.CancelTotalCCF,\r\n\t\t0,--  ABA.CancelTotalTherms,\r\n\t\t0,--  ABA.CancelThermsFactor,\r\n\t\t0,--  ABA.CancelBillingDays,\r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD](GETDATE()),--  ABA.ProcessEffectiveDate,\r\n\t\t'N',--  ABA.DerivedFromSpannedBill,\r\n\t\t0,--  ABA.SpannedBillingPeriodRevision,\r\n\t\t0,--  ABA.SpannedFirstCanceledBillingPeriod,\r\n\t\t0,--  ABA.SpannedBilledAmount,\r\n\t\t0,--  ABA.SpannedCCF,\r\n\t\t0,--  ABA.SpannedThermFactor,\r\n\t\t0,--  ABA.SpannedTherm,\r\n\t\t0,--  ABA.SpannedMonthlyPercentage,\r\n\t\t0,--  ABA.SpannedTotalPercentage,\r\n\t\t'No Account Billing record,Revision: '+MG.BillingPeriodRevision+' Current: ' + @CurrentBillingPeriod+\r\n\t\t'  CCF ('+cast(MG.Ccf as varchar(12))+')  ThermsFactor ('+cast(MG.ThermsFactor as varchar(12))+')   Therms ('+cast(MG.Therms as varchar(12))+')',--  ABA.Notes\r\n\t\t1 -- AuthenticatedUserID\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS G RIGHT JOIN\r\n\t\tConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG ON G.OriginalAccountNumber = MG.OriginalAccountNumber\r\n\t\tAND G.BillingPeriod = MG.BillingPeriod AND G.BillingPeriodRevision = MG.BillingPeriodRevision\r\n\tWHERE G.UploadConEdisonAccountBillingAdjustmentGasSeqid IS NULL AND MG.AccountBilled IS NULL;\r\n\r\n\t-- Adjust ConEd.UploadConEdisonMeterBillingAdjustmentGas with information from the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t-- that is to used in the Gas.MG.  Eventually,it be inserted into the Billing.MeterBilling and\r\n\t-- Billing.MeterBillingGas.  Grab BillCreationDate from the Common.UploadCycleParameters table.\r\n\tUPDATE MG\r\n\tSET BillCreationDate =CP.BillCreationDate ,\r\n\t\tEnergySource =G.EnergySource,\r\n\t\tLastPeriodModified =G.LastPeriodModified,\r\n\t\tBillingCycle =G.BillingCycle,\r\n\t\tSalesType =G.SalesType,\r\n\t\tIsTimeOfDayAccount ='N',-- Electricity only \r\n\t\tUtilityServiceAddress =G.ServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG INNER JOIN\r\n\t\tConEd.UploadConEdisonAccountBillingAdjustmentGas AS G ON MG.AccountUtilityCompanySeqid = G.AccountUtilityCompanySeqid\r\n\t\tAND MG.OriginalAccountNumber = G.OriginalAccountNumber AND MG.BillingPeriod = G.BillingPeriod AND \r\n\t\tMG.BillingPeriodRevision = G.BillingPeriodRevision AND MG.AccountBilled = G.AdjustedAccount INNER JOIN\r\n\t\tCommon.UploadCycleParameters AS CP ON G.BillingPeriod = CP.BillingPeriod AND \r\n\t\tG.AccountUtilityCompanySeqid = CP.UtilityCompanySeqid AND G.CurrentInvoiceAccountBillingGroup = CP.InvoiceAccountGroupSeqid\r\n\tWHERE G.BillingPeriod = @CurrentBillingPeriod;\r\n\r\n\t-- Adjust ConEd.UploadConEdisonMeterBillingAdjustmentGas with information from the ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\t-- that is to used in the Gas.MG.  Eventually,it be inserted into the Billing.MeterBilling and\r\n\t-- Billing.MeterBillingGas.  Grab MeterDials from the M.\r\n\tUPDATE MG\r\n\tSET MeterDials =M.MeterDials\r\n\t\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS MG \r\n\t\tINNER JOIN Billing.Meter AS M ON MG.MeterBilled = M.MeterSeqid \r\n\t\tAND MG.UniqueAccountSeqID = M.UniqueAccountSeqID\r\n\t\tAND M.UniqueMeterSeqid = MG.UniqueMeterSeqID\r\n\tWHERE MG.BillingPeriod = @CurrentBillingPeriod;   \r\n\r\n\t--\tIdentify all accounts and meters that were previously identified as unknown exchanges and \r\n\t--\thave not as of yet been reconciled with the utility company as to what kind of exchange was done.\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET AccountpreviousStatus = AccountStatus,\r\n\t\tAccountStatus = 'AC',\r\n\t\tAccountStatusPeriod = BillingPeriod \r\n\tWHERE AccountStatus LIKE 'U%' AND AdjustedAccount IS NOT NULL;\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET MeterBillingPreviousStatus =MeterBillingStatus,\r\n\t\tMeterBillingStatus = 'AC',\r\n\t\tMeterBillingStatusPeriod =BillingPeriod\r\n\tWHERE MeterBillingStatus LIKE 'U%' AND AccountExchangeMeterTrackSeqid IS NOT NULL;\r\n\r\n\t-- update accounts or actual flag\r\n\tUPDATE AccountEstOrAct \r\n\tSET AccountEstOrAct.EstimatedOrActualBilling = MeterEstOrAct.EstimatedOrActualBilling\r\n\tFROM ConEd.UploadConEdisonAccountBillingAdjustmentGas AS AccountEstOrAct\r\n\tINNER JOIN \r\n\t\t(\r\n\t\t\tSELECT ucembag.UniqueAccountSeqID,MAX(ucembag.EstimatedOrActualBilling) AS EstimatedOrActualBilling,BillingPeriodRevision \r\n\t\t\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS ucembag\r\n\t\t\tGROUP BY ucembag.UniqueAccountSeqID,BillingPeriodRevision\r\n\t\t) AS MeterEstOrAct ON AccountEstOrAct.BillingPeriodRevision = MeterEstOrAct.BillingPeriodRevision\r\n\tAND AccountEstOrAct.UniqueAccountSeqID = MeterEstOrAct.UniqueAccountSeqID\r\n\tAND AccountEstOrAct.EstimatedOrActualBilling <> MeterEstOrAct.EstimatedOrActualBilling\r\n\tAND MeterEstOrAct.EstimatedOrActualBilling <> dbo.[DetermineConEdisonActualOrEstimatedBilling](\r\n\tAccountEstOrAct.OriginalAccountNumber,AccountEstOrAct.BillingPeriodRevision)\r\n\t\r\n\tUPDATE ConEd.UploadConEdisonAccountBillingAdjustmentGas\r\n\tSET UniqueAccountSeqID = Common.udf_GetUniqueAccountSeqId(OriginalAccountNumber)\r\n\tWHERE UniqueAccountSeqID IS NULL;\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET UniqueAccountSeqID = Common.udf_GetUniqueAccountSeqId(OriginalAccountNumber)\r\n\tWHERE UniqueAccountSeqID IS NULL;\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET UniqueMeterSeqID = Common.udf_GetUniqueMeterSeqId(OriginalMeterNumber)\r\n\tWHERE UniqueMeterSeqID IS NULL;\r\n\r\n\t/* Validation*/\r\n\tEXEC ConEd.[usp_Validation_CheckUploadDataSummary]\r\n\tEXEC ConEd.usp_Validation_CheckMeterBillingAdjustmentGas\r\nEND;"
        }
      ]
    }
  ]
}