{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "NationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_LegacyData_ParseSplitBillingAndMeterResets",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_LegacyData_ParseSplitBillingAndMeterResets",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and merge split billing transactions and meter resets for a utility company. It updates billing period revisions, merges split transactions with reset rows, and cleans up the data by removing unnecessary splits. The procedure operates on tables and views within the "
        },
        {
          "type": "text",
          "text": "NationalGridWest",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema, specifically targeting legacy data related to meter summaries."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple steps, including data updates, inserts, cursor operations, and conditional logic. While it is not overly complex in terms of SQL constructs, the use of cursors and the detailed business logic for merging transactions contribute to a medium complexity level."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod varchar(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period in a "
                },
                {
                  "type": "text",
                  "text": "yyyymm",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " format."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@authenticatedID int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An identifier for the authenticated user executing the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingCycle varchar(1)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing cycle, likely a single character indicating a specific cycle."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Billing Period Revisions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by updating the "
                },
                {
                  "type": "text",
                  "text": "BillingPeriodRevision",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " in the "
                },
                {
                  "type": "text",
                  "text": "UploadLegacyKeyspanWestMeterSummary",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table using data from a view that determines overrides based on date criteria."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Prepare Split Transactions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It truncates the "
                },
                {
                  "type": "text",
                  "text": "TempSplitTransactions",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table and populates it with data from "
                },
                {
                  "type": "text",
                  "text": "UploadLegacyKeyspanWestMeterSummary",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " where "
                },
                {
                  "type": "text",
                  "text": "NumberOfBillingPeriods",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is zero and "
                },
                {
                  "type": "text",
                  "text": "Ccf",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is non-zero. This prepares the data for merging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A cursor is declared to iterate over the "
                },
                {
                  "type": "text",
                  "text": "TempSplitTransactions",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table. For each transaction, it determines if the row contains reset information and retrieves corresponding data from a view."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Merge Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Depending on whether the row is a reset or not, it updates the merge row's dates, readings, and other metrics. It constructs a "
                },
                {
                  "type": "text",
                  "text": "Notes",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " field to document the merge process."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update and Cleanup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After processing all rows, it updates the "
                },
                {
                  "type": "text",
                  "text": "UploadLegacyKeyspanWestMeterSummary",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table to set "
                },
                {
                  "type": "text",
                  "text": "NumberOfBillingPeriods",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to one for processed rows and deletes rows with zero billing periods."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance bottlenecks, especially with large datasets. Consider refactoring to set-based operations if possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Truncation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating "
                },
                {
                  "type": "text",
                  "text": "TempSplitTransactions",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can be efficient but may require careful handling in concurrent environments."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved, especially those in joins and where clauses, are properly indexed to optimize query performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's reliance on truncating and inserting into a temporary table may lead to issues in a multi-user environment if not managed properly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The logic assumes that the data in the views and tables is consistent and accurate. Any discrepancies could lead to incorrect merges."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the cursor-based approach may not scale well, potentially leading to longer execution times."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [NationalGridWest].[usp_LegacyData_ParseSplitBillingAndMeterResets]\n(\r\n\t@BillingPeriod varchar(6),\r\n\t@authenticatedID int,\r\n\t@BillingCycle varchar(1)\r\n)\r\n\r\nAS\r\n\r\ndeclare @TempSplitTransactionsSeqid int\r\ndeclare @ResetSplitRow int\r\ndeclare @BillingPeriodRevision dbo.yyyymmdd\r\ndeclare @OriginalAccountNumber varchar(15)\r\ndeclare @OriginalMeterNumber varchar(10)\r\ndeclare @FromDate dbo.yyyymmdd\r\ndeclare @ToDate dbo.yyyymmdd\r\ndeclare @MeterFromReading int\r\ndeclare @MeterToReading int\r\ndeclare @Ccf int\r\ndeclare @Therms int\r\ndeclare @ThermsFactor dbo.ThermsFactor\r\ndeclare @MeterConstant int\r\n--\r\ndeclare @MergeRowResetSplitRow int\r\ndeclare @MergeRowUploadNationalGridMeterSummarySeqid int\r\ndeclare @MergeRowBillingPeriodRevision dbo.yyyymmdd\r\ndeclare @MergeRowOriginalAccountNumber varchar(15)\r\ndeclare @MergeRowOriginalMeterNumber varchar(10)\r\ndeclare @MergeRowFromDate dbo.yyyymmdd\r\ndeclare @MergeRowToDate dbo.yyyymmdd\r\ndeclare @MergeRowMeterFromReading int\r\ndeclare @MergeRowMeterToReading int\r\ndeclare @MergeRowCcf int\r\ndeclare @MergeRowTherms int\r\ndeclare @MergeRowThermsFactor dbo.ThermsFactor\r\ndeclare @MergeRowMeterConstant int\r\n--\r\ndeclare @Notes dbo.notes\r\n\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n-- Find UploadConEdAccountSummary reset rows that would override UploadConEdMeterSummary\r\n-- billing revision period.  The criteria is the UploadConEdMeterSummary.ToDate is greater\r\n-- than the UploadConEdAccountSummary.FromDate and is less than and equal to the UploadConEdAccountSummary.ToDate\r\n--\r\n--\r\nUPDATE NationalGridWest.UploadLegacyKeyspanWestMeterSummary\r\nSET             \r\n\tBillingPeriodRevision =\r\n\t\tNationalGridWest.uvw_UploadNationalGridLegacyAccountSummaryOverrideMeterSummaryBillingRevisionPeriod.AccountBillingPeriodRevision \r\nFROM \r\n\tNationalGridWest.uvw_UploadNationalGridLegacyAccountSummaryOverrideMeterSummaryBillingRevisionPeriod\r\n\tINNER JOIN\r\n\tNationalGridWest.UploadLegacyKeyspanWestMeterSummary\r\n\tON \r\n\tNationalGridWest.uvw_UploadNationalGridLegacyAccountSummaryOverrideMeterSummaryBillingRevisionPeriod.UploadLegacyKeyspanWestMeterSummarySeqid\r\n\t= NationalGridWest.UploadLegacyKeyspanWestMeterSummary.UploadLegacyKeyspanWestMeterSummarySeqid\r\n\r\n       \r\n-- \r\n-- Once the override is completed.  Find all of the split transactions that need to be merged with the reset\r\n-- row.\r\n--\r\ntruncate table NationalGridWest.TempSplitTransactions\r\n\r\nINSERT  INTO NationalGridWest.TempSplitTransactions\r\n        (\r\n          AccountUtilityCompanySeqid,\r\n          AccountBilled,\r\n          MeterBilled,\r\n          AccountExchangeMeterTrackSeqid,\r\n          AdjustedMeterBilling,\r\n          AdjustedMeterBillingElectric,\r\n          OriginalAccountNumber,\r\n          OriginalMeterNumber,\r\n          BillingPeriod,\r\n          BillingPeriodRevision,\r\n          FirstCancelPeriod,\r\n          NumberOfTransactions,\r\n          NumberOfRebillTransactions,\r\n          NumberOfCancelTransactions,\r\n          BillingAction,\r\n          PriorRevisedBilledCCF,\r\n          RevisedBilledCCF,\r\n          CanceledBilledCCF,\r\n          PriorRevisedBilledTherms,\r\n          RevisedBilledTherms,\r\n          CanceledBilledTherms,\r\n          InitialCancelFromDate,\r\n          CurrentBillingToDate,\r\n          GasRateCode,\r\n          FromDate,\r\n          ToDate,\r\n          MeterFromReading,\r\n          MeterToReading,\r\n          Ccf,\r\n          Therms,\r\n          ThermsFactor,\r\n          MeterConstant,\r\n          TotalBillingDaysRebilled,\r\n          NumberOfBillingPeriods,\r\n          AverageRebillCostOfGasCharge,\r\n          AverageRebillThermsFactor,\r\n          BillingDays,\r\n          BillingDate,\r\n          ReadingCode,\r\n          NumberOfDials,\r\n          MeterType,\r\n          ProcessedInTheCurrentPeriod,\r\n          ProcessEffectiveDate,\r\n          CancelReadingCode,\r\n          CancelFromDate,\r\n          CancelToDate,\r\n          CancelMeterFromReading,\r\n          CancelMeterToReading,\r\n          CancelCcf,\r\n          CancelTherms,\r\n          CancelThermsFactor,\r\n          CancelMeterConstant,\r\n          InitialPostingDate,\r\n          DerivedFromSpannedBill,\r\n          SpannedBillingPeriodRevision,\r\n          SpannedFirstCanceledBillingPeriod,\r\n          SpannedCCF,\r\n          SpannedThermFactor,\r\n          SpannedTherm,\r\n          SpannedMonthlyPercentage,\r\n          SpannedTotalPercentage,\r\n          EstimatedOrActualBilling,\r\n          FacilityName,\r\n          ServiceAddress,\r\n          AuthenticatedUserID,\r\n          Notes,\r\n          DateAdded,\r\n          LastUpdate\r\n        )\r\n        SELECT  AccountUtilityCompanySeqid,\r\n                AccountBilled,\r\n                MeterBilled,\r\n                AccountExchangeMeterTrackSeqid,\r\n                AdjustedMeterBilling,\r\n                AdjustedMeterBillingElectric,\r\n                OriginalAccountNumber,\r\n                OriginalMeterNumber,\r\n                BillingPeriod,\r\n                BillingPeriodRevision,\r\n                FirstCancelPeriod,\r\n                NumberOfTransactions,\r\n                NumberOfRebillTransactions,\r\n                NumberOfCancelTransactions,\r\n                BillingAction,\r\n                PriorRevisedBilledCCF,\r\n                RevisedBilledCCF,\r\n                CanceledBilledCCF,\r\n                PriorRevisedBilledTherms,\r\n                RevisedBilledTherms,\r\n                CanceledBilledTherms,\r\n                InitialCancelFromDate,\r\n                CurrentBillingToDate,\r\n                GasRateCode,\r\n                FromDate,\r\n                ToDate,\r\n                MeterFromReading,\r\n                MeterToReading,\r\n                Ccf,\r\n                Therms,\r\n                ThermsFactor,\r\n                MeterConstant,\r\n                TotalBillingDaysRebilled,\r\n                NumberOfBillingPeriods,\r\n                AverageRebillCostOfGasCharge,\r\n                AverageRebillThermsFactor,\r\n                BillingDays,\r\n                BillingDate,\r\n                ReadingCode,\r\n                NumberOfDials,\r\n                MeterType,\r\n                ProcessedInTheCurrentPeriod,\r\n                ProcessEffectiveDate,\r\n                CancelReadingCode,\r\n                CancelFromDate,\r\n                CancelToDate,\r\n                CancelMeterFromReading,\r\n                CancelMeterToReading,\r\n                CancelCcf,\r\n                CancelTherms,\r\n                CancelThermsFactor,\r\n                CancelMeterConstant,\r\n                InitialPostingDate,\r\n                DerivedFromSpannedBill,\r\n                SpannedBillingPeriodRevision,\r\n                SpannedFirstCanceledBillingPeriod,\r\n                SpannedCCF,\r\n                SpannedThermFactor,\r\n                SpannedTherm,\r\n                SpannedMonthlyPercentage,\r\n                SpannedTotalPercentage,\r\n                EstimatedOrActualBilling,\r\n                FacilityName,\r\n                ServiceAddress,\r\n                AuthenticatedUserID,\r\n                Notes,\r\n                DateAdded,\r\n                LastUpdate\r\n        FROM NationalGridWest.UploadLegacyKeyspanWestMeterSummary\r\n        WHERE   ( NumberOfBillingPeriods = 0 )\r\n                AND ( Ccf <> 0 )\r\n        ORDER BY NumberOfBillingPeriods\r\n\r\n\r\n--\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\n--\r\nDECLARE SplitBillingAndMeterResetsCursor CURSOR FOR\r\nSELECT TempSplitTransactionsSeqid FROM NationalGridWest.TempSplitTransactions \r\n--\r\nOPEN SplitBillingAndMeterResetsCursor;\r\n--\r\nFETCH NEXT FROM SplitBillingAndMeterResetsCursor INTO @TempSplitTransactionsSeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n\r\nWHILE @@FETCH_STATUS = 0\r\n   BEGIN\r\n\t--\r\n\t--\tGet a split row to process - if @ResetSplitRow = 1 then the row contains the reset information and the meter from reading is set to zero\r\n\t--\telse it the information prior to reset.\r\n\t--\r\n\tSELECT  @ResetSplitRow = case when MeterFromReading = 0 then 1 else 0 end,\r\n\t\t\t@TempSplitTransactionsSeqid = TempSplitTransactionsSeqid, \r\n\t\t\t@BillingPeriodRevision = BillingPeriodRevision,\r\n\t\t\t@OriginalAccountNumber = OriginalAccountNumber, \r\n\t\t\t@OriginalMeterNumber = OriginalMeterNumber, \r\n\t\t\t@FromDate = FromDate, \r\n\t\t\t@ToDate = ToDate, \r\n\t\t\t@MeterFromReading = MeterFromReading, \r\n\t\t\t@MeterToReading = MeterToReading,\r\n\t\t\t@Ccf = Ccf, \r\n\t\t\t@Therms = Therms, \r\n\t\t\t@ThermsFactor = ThermsFactor,\r\n\t\t\t@MeterConstant = MeterConstant\r\n\tFROM NationalGridWest.TempSplitTransactions\r\n\twhere TempSplitTransactionsSeqid = @TempSplitTransactionsSeqid\r\n\t--\r\n\t--\tFind the split row to conterpart by joining the view and split table.\r\n\t--\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo \r\n\t--\t\t\tConEd.TempSplitTransactions \t\r\n\t--\r\n\t--\tif @MergeRowResetSplitRow = 1 then the row contains the reset information and the meter from reading is set to zero\r\n\t--\telse it the information prior to reset.\r\n\t--\r\n\t\r\n\tselect \r\n\t\t\t@MergeRowResetSplitRow = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.ResetSplitRow,\r\n\t\t\t@MergeRowUploadNationalGridMeterSummarySeqid = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.UploadLegacyKeyspanWestMeterSummarySeqid,\r\n\t\t\t@MergeRowBillingPeriodRevision = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.BillingPeriodRevision,\r\n\t\t\t@MergeRowOriginalAccountNumber = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.OriginalAccountNumber,\r\n\t\t\t@MergeRowOriginalMeterNumber = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.OriginalMeterNumber,\r\n\t\t\t@MergeRowFromDate = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.FromDate,\r\n\t\t\t@MergeRowToDate = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.ToDate,\r\n\t\t\t@MergeRowMeterFromReading = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.MeterFromReading,\r\n\t\t\t@MergeRowMeterToReading = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.MeterToReading,\r\n\t\t\t@MergeRowCcf = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.Ccf,\r\n\t\t\t@MergeRowTherms = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.Therms,\r\n\t\t\t@MergeRowThermsFactor = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.ThermsFactor,\r\n\t\t\t@MergeRowMeterConstant  = NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.MeterConstant \r\n\tFROM \r\n\t\t\tNationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo\r\n\t\t\tINNER JOIN\r\n\t\t\tNationalGridWest.TempSplitTransactions \r\n\t\t\tON \r\n\t\t\tNationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.OriginalAccountNumber \r\n\t\t\t= NationalGridWest.TempSplitTransactions.OriginalAccountNumber\r\n\t\t\tAND \r\n\t\t\tNationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.OriginalMeterNumber = NationalGridWest.TempSplitTransactions.OriginalMeterNumber\r\n\twhere\r\n\t\t\tNationalGridWest.TempSplitTransactions.TempSplitTransactionsSeqid \r\n\t\t\t= @TempSplitTransactionsSeqid and     \r\n\t\t\t(NationalGridWest.TempSplitTransactions.FromDate \r\n\t\t\t=  NationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.ToDate or\r\n\t\t\tNationalGridWest.uvw_MergeSplitBillingAndMeterResetsUploadNationalGridWestMeterInfo.FromDate =  NationalGridWest.TempSplitTransactions.ToDate)\r\n\t\r\n\t--\r\n\t-- Start the merge\r\n\t--\r\n\t--\t\tSet up the Notes for prior to meter reset\r\n\t--\r\n\tset @MergeRowFromDate = case when @MergeRowFromDate >= @FromDate then @FromDate else @MergeRowFromDate end\r\n\tset @MergeRowToDate  = case when @MergeRowToDate <=  @ToDate then @ToDate else @MergeRowToDate end\r\n\t\r\n\tif (@ResetSplitRow = 0)\r\n\t\tbegin\r\n\t\t\tset @Notes = 'Prior to Meter Reset: From Date '+cast(@FromDate as varchar(8))+' (Reading: '+cast(@MeterFromReading as varchar(10))+') -  To Date:  '+\r\n\t\t\t\tcast(@ToDate as varchar(8))+' (Reading: '+cast(@MeterToReading as varchar(10))+')  CCF: '+\r\n\t\t\t\tcast(@Ccf as varchar(6))+' Thermsfactor  '+cast(@ThermsFactor as varchar(10))+'  Therms:   '+cast(@Therms as varchar(10))+'    Meter Constant:  '+ \t\t\t\t\r\n\t\t\t\tcast(@MeterConstant as varchar(10))\r\n\t\t\tset @MergeRowCcf  = @MergeRowCcf + @Ccf \r\n\t\t\tset @MergeRowTherms = @MergeRowTherms + @Therms\r\n\t\t\t\t\r\n\t\tend\t\r\n\telse if (@ResetSplitRow = 1)\r\n\t\t\tbegin\r\n\t\t\t\tset @Notes = 'Prior to Meter Reset: From Date '+cast(@MergeRowFromDate as varchar(8))+' (Reading: '+cast(@MergeRowMeterFromReading as varchar(10))+') -  To Date: '+\r\n\t\t\t\t\tcast(@MergeRowToDate as varchar(8))+' (Reading: '+cast(@MergeRowMeterToReading as varchar(10))+')  CCF: '+\r\n\t\t\t\t\tcast(@MergeRowCcf as varchar(6))+' Thermsfactor  '+cast(@MergeRowThermsFactor as varchar(10))+'  Therms:   '+cast(@MergeRowTherms as varchar(10))+'    Meter Constant:  '+ \t\t\t\t\r\n\t\t\t\t\tcast(@MergeRowMeterConstant as varchar(10))\r\n\t\t\t\tset @MergeRowMeterFromReading  = @MeterFromReading\r\n\t\t\t\tset @MergeRowMeterToReading  = @MeterToReading\r\n\t\t\t\tset @MergeRowThermsFactor = @ThermsFactor\r\n\t\t\t\tset @MergeRowMeterConstant  = @MeterConstant\r\n\t\t\t\tset @MergeRowCcf  = @MergeRowCcf + @Ccf \r\n\t\t\t\tset @MergeRowTherms = @MergeRowTherms + @Therms\r\n\t\t\tend\t\r\n\telse\r\n\tBEGIN\r\n\t\tprint 'Problem with reset data: Split Data seqid: '+cast(@TempSplitTransactionsSeqid as varchar(10)) + '  Merge Id: '+cast(@MergeRowUploadNationalGridMeterSummarySeqid as varchar(10))\r\n\tEND\r\n--\r\n-- Complete the processing by updating the ConEd.UploadConEdisonMeterSummary table\r\n--\r\n\tUPDATE NationalGridWest.UploadLegacyKeyspanWestMeterSummary\r\n\tSET              \r\n\t\t\tFromDate =@MergeRowFromDate, \r\n\t\t\tToDate =@MergeRowToDate, \r\n\t\t\tMeterFromReading =@MergeRowMeterFromReading, \r\n\t\t\tMeterToReading =@MergeRowMeterToReading, \r\n\t\t\tCcf =@MergeRowCcf, \r\n\t\t\tTherms =@MergeRowTherms,\r\n\t\t\tThermsFactor =@MergeRowThermsFactor, \r\n\t\t\tMeterConstant =@MergeRowMeterConstant,\r\n\t\t\tNotes = @Notes\r\n\twhere\t\r\n\t\t\tUploadLegacyKeyspanWestMeterSummarySeqid\r\n\t\t\t = @MergeRowUploadNationalGridMeterSummarySeqid\r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\n\tFETCH NEXT FROM SplitBillingAndMeterResetsCursor INTO @TempSplitTransactionsSeqid\r\n   END\r\n\r\nCLOSE SplitBillingAndMeterResetsCursor;\r\nDEALLOCATE SplitBillingAndMeterResetsCursor;\r\n\t\r\n\t\r\n\t--\r\n\t-- Remove the splits from the ConEd.UploadConEdisonMeterSummary after the merge\r\n\t--\r\n\tUPDATE  NationalGridWest.UploadLegacyKeyspanWestMeterSummary\r\nSET              \r\n\t\tNumberOfBillingPeriods = 1,\r\n\t\tNotes = 'Zero number of billing periods set to one to process as a whole period not a merged split'\r\nWHERE \r\n\t\t(NumberOfBillingPeriods = 0) AND (Ccf <> 0)\r\n\t\t\r\n\tDELETE FROM NationalGridWest.UploadLegacyKeyspanWestMeterSummary WHERE  (NumberOfBillingPeriods = 0)"
        }
      ]
    }
  ]
}