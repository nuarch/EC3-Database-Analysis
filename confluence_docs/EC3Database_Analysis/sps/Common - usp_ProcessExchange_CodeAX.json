{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Common",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessExchange_CodeAX",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessExchange_CodeAX",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process exchange records related to \"AX\" exchange accounts in a Microsoft SQL Server database. It performs several checks and operations to ensure that the exchange record is valid, unprocessed, and not excluded. The procedure updates existing account records, inserts new account records, and tracks changes in the "
        },
        {
          "type": "text",
          "text": "Billing.AccountExchangeMeterTrack",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table. It also handles exceptions and logs messages for successful or failed operations."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple conditional checks, data retrieval, updates, and inserts across different tables. It also includes transaction management and error handling, which adds to its complexity. However, the logic is straightforward and follows a clear sequence of operations, making it moderately complex."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@ExchangeSeqid AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The unique identifier for the exchange record to be processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the user executing the procedure, used for auditing purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter indicating the status of the procedure execution (1 for success, 0 for failure)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Message AS VARCHAR(1000) OUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that provides a message about the procedure's execution status or any errors encountered."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Checks",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure checks if the exchange record is marked as excluded. If so, it exits with a message."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It verifies the existence of the exchange record. If not found, it exits with an error message."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It checks if the exchange record has already been processed. If so, it exits with a message."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Account Verification",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Retrieves account details from the "
                        },
                        {
                          "type": "text",
                          "text": "Common.ExchangeData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Checks if the account number exists in the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.Account",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table with an active status. If not, it exits with an error message."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Ensures that the new account does not already exist in an active state."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction and Data Manipulation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Begins a transaction named "
                        },
                        {
                          "type": "text",
                          "text": "ExchangeAccount",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Retrieves additional account data and the current billing period."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the existing account to mark it as not current."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts a new account record with updated details."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the previous account record with new status and audit information."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates other related accounts with the current account number."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts a new record into "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountExchangeMeterTrack",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to track the exchange."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Marks the exchange record as processed in "
                        },
                        {
                          "type": "text",
                          "text": "Common.ExchangeData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Uses a "
                        },
                        {
                          "type": "text",
                          "text": "TRY...CATCH",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " block to handle exceptions. If an error occurs, it rolls back the transaction and throws an error with a detailed message."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Index Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the "
                },
                {
                  "type": "text",
                  "text": "ExchangeDataSeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "AccountSeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "UniqueAccountSeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " columns are indexed to optimize the SELECT, UPDATE, and INSERT operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The transaction scope is well-defined, but long-running transactions can lead to locks. Ensure that the operations within the transaction are optimized to minimize execution time."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues if multiple instances are executed simultaneously. Consider implementing row-level locking or other concurrency control mechanisms."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on the assumption that the data in "
                },
                {
                  "type": "text",
                  "text": "Common.ExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Billing.Account",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is accurate and up-to-date. Any discrepancies can lead to incorrect processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure uses "
                },
                {
                  "type": "text",
                  "text": "THROW",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for error handling, it may not capture all possible exceptions. Ensure comprehensive testing to identify edge cases."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of data grows, the procedure's performance may degrade. Regularly review and optimize the database schema and indexes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses hardcoded values like '99991231' for dates, which may not be suitable for all scenarios. Consider parameterizing these values or using configuration settings."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Description:\t\"AX\" Exchange Account\r\n--*\r\n--* AUTHOR:       Zafer Durmaz\r\n--* Created On:   06/23/2016\r\n--* Modified On:  12/27/2018\r\n--**************************************************************************************\r\n--* Change Log\r\n--* \r\n--* 06/21/2016 ZD  First Version \r\n--* 11/15/2016 MB  Fixed the billing periods on the newly created account record \r\n--* 11/16/2016 ZD  AccountExchangeMeterTrack insertion is updated \r\n--* 3/24/2017\tzd Updated AccountMeterExchangeTrack insertion\r\n--* 03/27/2017 zd  Added Throw for exception handling\r\n--* 12/27/2018 VY  Modified for UniqueAccountSeqID and UniqueMeterSeqID\r\n--* 04/09/2019 VY  Modified for EnergySubTypeID\r\n--**************************************************************************************\r\nCREATE PROCEDURE [Common].[usp_ProcessExchange_CodeAX]\r\n(\r\n\t@ExchangeSeqid AS INT\r\n\t,@AuthenticatedUserID AS INT\r\n\t,@StatusCode AS INT OUTPUT\r\n\t,@Message AS VARCHAR(1000) OUT\r\n)\r\nAS\r\nBEGIN\r\n\tDECLARE @RecordExchangeCode VARCHAR(2)\r\n\r\n\t-- if the record is flagged as exclude,return and exit\r\n\tIF ('Y' = (SELECT Exclude FROM Common.ExchangeData WHERE ExchangeDataSeqid = @ExchangeSeqid))\r\n\tBEGIN\r\n\t\tSET @Message = 'This AX exchange is excluded from processing. ExchangeSeqid: ' + CAST(@ExchangeSeqid AS VARCHAR(8)) \r\n\t\tSET @StatusCode = 1\t-- this is not necessary an error\r\n\t\t;THROW 50000,@Message,1;\r\n\t\tRETURN\r\n\tEND;\r\n\r\n\t-- CHECK IF the record exists\r\n\tIF (NOT EXISTS (SELECT ExchangeDataSeqid FROM Common.ExchangeData WHERE ExchangeDataSeqid = @ExchangeSeqid))\r\n\tBEGIN\r\n\t\tSET @Message = 'The AX ExchangeSeqid ' + CAST(@ExchangeSeqid AS VARCHAR(8)) + ' does not exist. Please verify '\r\n\t\tSET @StatusCode = 0\r\n\t\t;THROW 50000,@Message,1;\r\n\t\tRETURN\r\n\tEND;\r\n\r\n\t-- check if the record was processed\r\n\tIF ('N' <> (SELECT IsProcessed FROM Common.ExchangeData WHERE ExchangeDataSeqid = @ExchangeSeqid))\r\n\tBEGIN\r\n\t\tSET @Message = 'This AX exchange was already processed. ExchangeSeqid: ' + CAST(@ExchangeSeqid AS VARCHAR(8)) \r\n\t\tSET @StatusCode = 0\r\n\t\t;THROW 50000,@Message,1;\r\n\t\tRETURN\r\n\tEND;\r\n\r\n\t-- check if the current account number is already in the system under an active status\r\n\tDECLARE @AccountNumber VARCHAR(15)\r\n\tDECLARE @AccountSeqid INT\r\n    DECLARE @NewAccountSeqid INT\r\n\tDECLARE @CurrentAccountNumber VARCHAR(15)\r\n\tDECLARE @OriginalAccountNumber  VARCHAR(15)\r\n\tDECLARE @AccountEffectiveTurnOn VARCHAR(8)\r\n\r\n\tSELECT\t@AccountNumber = OriginalAccountNumber\r\n\t\t\t,@CurrentAccountNumber = CurrentAccountNumber\r\n\t\t\t,@OriginalAccountNumber = OriginalAccountNumber\r\n\t\t\t,@AccountEffectiveTurnOn = AccountEffectiveTurnOn\r\n\tFROM Common.ExchangeData \r\n\tWHERE ExchangeDataSeqid = @ExchangeSeqid\r\n\r\n\t-- get the account seqid of the active account if it exists\r\n\t--SELECT @AccountSeqid = AccountSeqid FROM Billing.Account WHERE OriginalAccountNumber = @AccountNumber AND AccountStatus IN ('AC','47','46','UA') AND IsCurrentRecord = 'Y' \r\n\tSELECT @AccountSeqid = AccountSeqid FROM Billing.Account WHERE OriginalAccountNumber = @AccountNumber  AND IsCurrentRecord = 'Y' \r\n\r\n\r\n\r\n\tIF (@AccountSeqid IS NULL)\r\n\tBEGIN\r\n\t\tSET @Message = 'Error in processing AX. The account number: ' + @AccountNumber + ' is NOT in the system under an active status. Please verfiy ' \r\n\t\tSET @StatusCode = 0\r\n\t\t;THROW 50000,@Message,1;\r\n\t\tRETURN\r\n\tEND;\r\n\r\n\t-- Check if the new account EXISTS other than '0000000' or 'TRNSM' \r\n\tIF (EXISTS (SELECT * FROM Billing.Account WHERE OriginalAccountNumber = @CurrentAccountNumber AND AccountStatus not in ('28','27','AX')  and @OriginalAccountNumber not in ('0000000','TRNSM','STANDBY')))\r\n\tBEGIN\r\n\t\tSET @Message = 'Error in processing AX. The Account number: ' + @OriginalAccountNumber + ' already exists and is active.' \r\n\t\tSET @StatusCode = 0\r\n\t\t;THROW 50000,@Message,1;\r\n\t\tRETURN\r\n\tEND;\r\n\r\n\tBEGIN TRY\t\r\n\t\tBEGIN TRANSACTION ExchangeAccount\r\n\t\t\t\t\r\n\t\tDECLARE @UniqueAccountSeqid AS INT, @RecordVersion AS INT, @BillingPeriod AS VARCHAR(6), @AgencySeqid AS INT\r\n\t\t\t,@FacilitySeqid AS INT, @AccountEffectiveTurnOnDate AS VARCHAR(8), @AccountEffectiveTurnOffDate AS VARCHAR(8);\r\n\r\n\t\t-- get some account data\r\n\t\tSELECT @FacilitySeqid = FacilityAccount\r\n\t\t\t,@AgencySeqid\t = AgencyAccount\r\n\t\t\t,@AccountEffectiveTurnOnDate = AccountEffectiveTurnOn\r\n\t\t\t,@AccountEffectiveTurnOffDate = AccountEffectiveTurnOff \r\n\t\tFROM Billing.Account WHERE AccountSeqid = @AccountSeqid\r\n\r\n\t\t-- get current Billing Period\r\n\t\tSET @BillingPeriod = (SELECT BillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y')\r\n\r\n\t\t-- get some info for the insert\r\n\t\tSELECT @UniqueAccountSeqid = UniqueAccountSeqid,@RecordVersion = RecordVersion FROM Billing.Account WHERE AccountSeqid = @AccountSeqid\r\n\r\n\t\t-- update the previous account  \r\n\t\tUPDATE Billing.Account\r\n\t\tSET IsCurrentRecord = 'N'\r\n\t\tFROM Billing.Account\r\n\t\tWHERE AccountSeqid = @AccountSeqid\r\n\r\n\t\t-- insert the new Account based on the original Account and the additional data from the exchange\r\n\t\tINSERT INTO Billing.Account\r\n\t\t\t(ExcessDistributionAssocEnergyAccount\r\n\t\t\t,IsExcessDistribution\r\n\t\t\t,CommodityAssocDeliveryAccount\r\n\t\t\t,IsCommodityAccount\r\n\t\t\t,UtilityAccountProvider\r\n\t\t\t,AgencyAccount\r\n\t\t\t,FacilityAccount\r\n\t\t\t,UtilityTariffRateInformationSeqid\r\n\t\t\t,AgencyEnergyBillingBudgetLine\r\n\t\t\t,ManualDataEntry\r\n\t\t\t,CurrentAccountNumber\r\n\t\t\t,OriginalAccountNumber\r\n\t\t\t,ReadingCycleNumber\r\n\t\t\t,AccountStatus\r\n\t\t\t,AccountPreviousStatus\r\n\t\t\t,AccountStatusCodePeriod\r\n\t\t\t,CurrentInvoiceAccountGroup\r\n\t\t\t,AccountEffectiveTurnOn\r\n\t\t\t,AccountEffectiveTurnOff\r\n\t\t\t,EnergySource\r\n\t\t\t,EnergyAccountDescription\r\n\t\t\t,EnergyDeliverySubTypeId\r\n\t\t\t,IsMultipleEnergySourceAccount\r\n\t\t\t,IsTimeOfDayAccount\r\n\t\t\t,HasAccountLevelChange\r\n\t\t\t,HasMeters\r\n\t\t\t,HasMultipleActiveMeters\r\n\t\t\t,SalesType\r\n\t\t\t,DeliveryTariffRate\r\n\t\t\t,DeliveryTariffEffectiveDate\r\n\t\t\t,CommodityTariffRate\r\n\t\t\t,CommodityTariffEffectiveDate\r\n\t\t\t,BillingCycle\r\n\t\t\t,Delivery\r\n\t\t\t,AccountInMultipleBuildings\r\n\t\t\t,SourceOfRevenue\r\n\t\t\t,TurnOnDate\r\n\t\t\t,TurnOffDate\r\n\t\t\t,MunicipalCode\r\n\t\t\t,Territory\r\n\t\t\t,Tension\r\n\t\t\t,TripNumber\r\n\t\t\t,PartSupplied\r\n\t\t\t,UtilityServiceAccountName\r\n\t\t\t,UtilityServiceAddress\r\n\t\t\t,Borough\r\n\t\t\t,Block\r\n\t\t\t,LotNumber\r\n\t\t\t,CityPlanningBIN\r\n\t\t\t,ELOAgencyAddress\r\n\t\t\t,LastPeriodOriginalBilled\r\n\t\t\t,LastPeriodAdjustmentBilled\r\n\t\t\t,LastZeroDollarsBillingPeriod\r\n\t\t\t,IsSeasonalAccount\r\n\t\t\t,AdjustmentRecordSeqid\r\n\t\t\t,AccountDataCorrectionBillingPeriod\r\n\t\t\t,FireAuditTrigger\r\n\t\t\t,Notes\r\n\t\t\t,AuthenticatedUserID\r\n\t\t\t,DateAdded\r\n\t\t\t,LastUpdate\r\n\t\t\t,UniqueAccountSeqid\r\n\t\t\t,IsCurrentRecord\r\n\t\t\t,ContractNumber\r\n\t\t\t,RecordVersion)\r\n\t\tSELECT \t  \r\n\t\t\taccount.ExcessDistributionAssocEnergyAccount\r\n\t\t\t,account.IsExcessDistribution\r\n\t\t\t,account.CommodityAssocDeliveryAccount\r\n\t\t\t,account.IsCommodityAccount\r\n\t\t\t,account.UtilityAccountProvider\r\n\t\t\t,account.AgencyAccount\r\n\t\t\t,account.FacilityAccount\r\n\t\t\t,account.UtilityTariffRateInformationSeqid\r\n\t\t\t,account.AgencyEnergyBillingBudgetLine\r\n\t\t\t,account.ManualDataEntry\r\n\t\t\t,ED.CurrentAccountNumber\r\n\t\t\t,ED.CurrentAccountNumber\r\n\t\t\t,account.ReadingCycleNumber\r\n            ,'AC'\r\n            ,'AC'\r\n\t\t\t,@BillingPeriod\r\n\t\t\t,account.CurrentInvoiceAccountGroup\r\n\t\t\t,account.AccountEffectiveTurnOn\r\n\t\t\t,'99991231'\r\n\t\t\t,account.EnergySource\r\n\t\t\t,account.EnergyAccountDescription\r\n\t\t\t,account.EnergyDeliverySubTypeId /* added on 4/9/2019 */\r\n\t\t\t,account.IsMultipleEnergySourceAccount\r\n\t\t\t,account.IsTimeOfDayAccount\r\n\t\t\t,'N'\r\n\t\t\t,account.HasMeters\r\n\t\t\t,account.HasMultipleActiveMeters\r\n\t\t\t,account.SalesType\r\n\t\t\t,account.DeliveryTariffRate\r\n\t\t\t,account.DeliveryTariffEffectiveDate\r\n\t\t\t,account.CommodityTariffRate\r\n\t\t\t,account.CommodityTariffEffectiveDate\r\n\t\t\t,account.BillingCycle\r\n\t\t\t,account.Delivery\r\n\t\t\t,account.AccountInMultipleBuildings\r\n\t\t\t,account.SourceOfRevenue\r\n\t\t\t,@BillingPeriod\r\n\t\t\t,'999912'\r\n\t\t\t,account.MunicipalCode\r\n\t\t\t,account.Territory\r\n\t\t\t,account.Tension\r\n\t\t\t,account.TripNumber\r\n\t\t\t,account.PartSupplied\r\n\t\t\t,account.UtilityServiceAccountName\r\n\t\t\t,account.UtilityServiceAddress\r\n\t\t\t,account.Borough\r\n\t\t\t,account.Block\r\n\t\t\t,account.LotNumber\r\n\t\t\t,account.CityPlanningBIN\r\n\t\t\t,account.ELOAgencyAddress\r\n\t\t\t,account.LastPeriodOriginalBilled\r\n\t\t\t,account.LastPeriodAdjustmentBilled\r\n\t\t\t,account.LastZeroDollarsBillingPeriod\r\n\t\t\t,account.IsSeasonalAccount\r\n\t\t\t,NULL \r\n\t\t\t,account.AccountDataCorrectionBillingPeriod\r\n\t\t\t,account.FireAuditTrigger\r\n\t\t\t,account.Notes\r\n\t\t\t,@AuthenticatedUserID\r\n\t\t\t,getdate()\r\n\t\t\t,getdate()\r\n\t\t\t,@UniqueAccountSeqid\r\n\t\t\t,'Y'\r\n\t\t\t,account.ContractNumber\r\n\t\t\t,(@RecordVersion + 1)\r\n\t\tFROM billing.Account AS account CROSS JOIN common.ExchangeData as ED\r\n\t\tWHERE Account.AccountSeqid = @AccountSeqid AND ExchangeDataSeqid = @ExchangeSeqid;\r\n\r\n\t\t-- get id of the newly created account\r\n\t\tSELECT @NewAccountSeqid = ident_current('Billing.Account');\r\n\t\t\t\r\n\t\t-- update the previous account\r\n\t\tUPDATE Billing.Account\r\n\t\tSET CurrentAccountNumber = @CurrentAccountNumber\r\n\t\t\t,AccountPreviousStatus = account.AccountStatus\r\n\t\t\t,AccountStatus = 'AX'\r\n\t\t\t,AccountStatusCodePeriod = @BillingPeriod\r\n\t\t\t,TurnOffDate = @BillingPeriod\r\n\t\t\t,AccountEffectiveTurnOff = @AccountEffectiveTurnOnDate\r\n\t\t\t,LastUpdate = getdate()\r\n\t\t\t,AuthenticatedUserID = @AuthenticatedUserID\r\n\t\t\t,IsCurrentRecord = 'N'\r\n\t\t\t,FireAuditTrigger = 'Y'\r\n\t\tFROM Billing.Account\r\n\t\tWHERE AccountSeqid = @AccountSeqid\r\n\r\n\r\n\t\t-- update the other accounts\r\n        UPDATE  Billing.Account\r\n        SET CurrentAccountNumber = @CurrentAccountNumber\r\n\t\t\t,LastUpdate = GETDATE()\r\n\t\t\t,AuthenticatedUserID = @AuthenticatedUserID\r\n\t\t\t,FireAuditTrigger = 'Y'\r\n        FROM Billing.Account\r\n        WHERE UniqueAccountSeqid = @UniqueAccountSeqid AND IsCurrentRecord = 'N' AND AccountSeqid <> @AccountSeqid;\r\n\r\n\t\t-- insert new link with new account id into accountExchangeTrackMeter\r\n\t\tINSERT INTO Billing.AccountExchangeMeterTrack\r\n\t\t\t(UniqueAccountSeqID\r\n\t\t\t,UniqueMeterSeqID\r\n\t\t\t,UtilityCompanySeqid\r\n\t\t\t,OriginalAgencyDivisionSeqid\r\n\t\t\t,OriginalFacilitySeqid\r\n\t\t\t,OriginalAccountSeqid\r\n\t\t\t,OriginalMeterSeqid\r\n\t\t\t,OriginalAccountNumber\r\n\t\t\t,OriginalMeterNumber\r\n\t\t\t,AccountEffectiveBillingStartDate\r\n\t\t\t,AccountEffectiveBillingEndDate\r\n\t\t\t,AuthenticatedUserID\r\n\t\t\t,DateAdded\r\n\t\t\t,LastUpdate)\r\n\t\tSELECT DISTINCT\r\n\t\t\tcommon.GetUniqueAccountSeqID(@NewAccountSeqID)\r\n\t\t\t,common.GetUniqueMeterSeqID(aemt.OriginalMeterSeqid)\r\n\t\t\t,aemt.UtilityCompanySeqid\r\n\t\t\t,aemt.OriginalAgencyDivisionSeqid\r\n\t\t\t,aemt.OriginalFacilitySeqid\r\n\t\t\t,@NewAccountSeqid\r\n\t\t\t,aemt.OriginalMeterSeqid\r\n\t\t\t,@CurrentAccountNumber\r\n\t\t\t,aemt.OriginalMeterNumber\r\n\t\t\t,@AccountEffectiveTurnOnDate\r\n\t\t\t,@AccountEffectiveTurnOffDate\r\n\t\t\t,@AuthenticatedUserID\r\n\t\t\t,GETDATE()\r\n\t\t\t,GETDATE()\r\n\t\tFROM \t\t \r\n\t\t\tBilling.AccountExchangeMeterTrack AS aemt \r\n\t\tWHERE aemt.OriginalAccountSeqid = @AccountSeqid;\r\n\r\n\t\t-- if we make it here and all is well,come back and update the record as processes\r\n\t\tUPDATE Common.ExchangeData\r\n\t\tSET IsProcessed = 'Y',\r\n\t\t\tAccountSeqid = @NewAccountSeqid\r\n\t\tWHERE ExchangeDataSeqid = @ExchangeSeqid\r\n\r\n\r\n\t\tCOMMIT TRAN ExchangeAccount\r\n\r\n\r\n\r\n\t\tSELECT @Message = '', @StatusCode = 1;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tROLLBACK TRAN ExchangeAccount\r\n\t\tSET @Message = 'Error processing exchange  ' + CAST(@ExchangeSeqid AS VARCHAR(8)) + ' error message: ' + ERROR_MESSAGE()\r\n\t\tSET @StatusCode = 0\r\n\t\t;THROW 50000,@Message,1;\r\n\tEND CATCH;\r\nEND;"
        }
      ]
    }
  ]
}