{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Temporal",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_InsertNewPeriodFromPublishedToTemporalAccountMeterLevelRawDataForCurrentPeriod",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_InsertNewPeriodFromPublishedToTemporalAccountMeterLevelRawDataForCurrentPeriod",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to manage the insertion and update of billing period data from a published source table to a temporal destination table. It ensures that only the next sequential billing period is inserted and updates the effective periods for existing records in the temporal table. The procedure also checks for data integrity by ensuring that hash values are populated in both source and destination tables before proceeding with the data manipulation."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple steps, including validation checks, data insertion, and updates with conditional logic. It interacts with two tables and uses subqueries and joins, which adds to its complexity. However, it does not involve highly complex logic or advanced SQL features, keeping it at a medium complexity level."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter represents the billing period that is intended to be inserted into the temporal table. It is expected to be in a specific format (likely YYYYMM)."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine the Next Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure starts by determining the maximum effective start period from the temporal table and calculates the next period using a function "
                },
                {
                  "type": "text",
                  "text": "CreateNextPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It checks if the "
                        },
                        {
                          "type": "text",
                          "text": "@PublishedBillingPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " matches the calculated next period. If not, it raises an error and exits."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It ensures that there are no null hash values in both the source and destination tables. If any are found, it raises an error and exits."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts new records from the source table into the temporal table for the specified billing period, ensuring no duplicate hash values are inserted."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the "
                        },
                        {
                          "type": "text",
                          "text": "EffectiveEndPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " for records in the temporal table that have been superseded by the new billing period."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Adjusts records that exist in the temporal table but not in the current period of the source table, setting their "
                        },
                        {
                          "type": "text",
                          "text": "EffectiveEndPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to the current billing period."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Adjustments",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Ensures that any records in the temporal table that do not have a corresponding record in the source table for the current period are updated to reflect the end of their effective period."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the columns used in joins and where clauses, such as "
                },
                {
                  "type": "text",
                  "text": "hashValue",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "EffectiveStartPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "EffectiveEndPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", are indexed to improve query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may lock tables during execution, which could impact performance in a high-concurrency environment. Consider using transaction isolation levels to manage locks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the source table contains a large volume of data, consider processing in batches to reduce the impact on system resources."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies heavily on the integrity of hash values. Any discrepancies in hash value generation or storage could lead to incorrect data manipulation."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses "
                },
                {
                  "type": "text",
                  "text": "RAISERROR",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for error handling, which stops execution but does not roll back any changes made before the error. Consider wrapping the procedure in a transaction with proper rollback mechanisms."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of the procedure may degrade due to the complexity of joins and subqueries. Regular monitoring and optimization may be required."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dependency on External Function",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure depends on the "
                },
                {
                  "type": "text",
                  "text": "CreateNextPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " function, which is not included in the code. Any changes to this function could affect the procedure's behavior."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Temporal].[usp_InsertNewPeriodFromPublishedToTemporalAccountMeterLevelRawDataForCurrentPeriod]\n(\r\n\t@PublishedBillingPeriod AS VARCHAR(6)\r\n)\r\nAS\r\nBEGIN\r\n\tDECLARE @MaxPeriod VARCHAR(6) = (SELECT MAX(EffectiveStartPeriod) FROM Published.TemporalAccountMeterLevelRawDataForCurrentPeriod);\r\n\tDECLARE @NextPeriod VARCHAR(6) = [dbo].[CreateNextPeriod](@MaxPeriod, 'M');\r\n        \r\n\t-- Make sure only next period after the max is being inserted\r\n\tIF (@NextPeriod <> @PublishedBillingPeriod)\r\n\tBEGIN\r\n\t\tRAISERROR ('ERROR: You can only insert this period: %s', 12, 1, @NextPeriod);\r\n\t\tRETURN;\r\n\tEND;\r\n\t\t\r\n\t-- make sure the hashcode is populated before starting\r\n\tDECLARE @CountNullHashCodeSource INT = (SELECT COUNT(*) FROM [Published].[AccountMeterLevelRawDataForCurrentPeriod]  WHERE HashValue IS NULL);\r\n\tDECLARE @CountNullHashCodeDestination INT = (SELECT COUNT(*) FROM [Published].[TemporalAccountMeterLevelRawDataForCurrentPeriod]  WHERE HashValue IS NULL);\r\n\t\t\r\n\tIF (@CountNullHashCodeSource > 0 OR @CountNullHashCodeDestination > 0)\r\n\tBEGIN\r\n\t\tRAISERROR ('ERROR: HashCode is missing from either [Published].[TemporalAccountMeterLevelRawDataForCurrentPeriod]  or [Published].[AccountMeterLevelRawDataForCurrentPeriod] .', 12, 1);\r\n\t\tRETURN;\r\n\tEND;\r\n\t\t\r\n\t---Process start---------------------------------------\r\n\tINSERT INTO  Published.TemporalAccountMeterLevelRawDataForCurrentPeriod\r\n\t\t(FiscalYear\r\n\t\t,CurrentFiscalYear\r\n\t\t,PriorFiscalYear\r\n\t\t,BillingPeriod\r\n\t\t,LastPeriodModified\r\n\t\t,BillingMonthConsumption\r\n\t\t,BillingMonthDemand\r\n\t\t,mbOriginalAccountNumber\r\n\t\t,mbOriginalMeterNumber\r\n\t\t,EstimatedReading\r\n\t\t,ConsecutivePeriodsEstimatedReading\r\n\t\t,MeterBillingStatus\r\n\t\t,PreviousMeterBillingStatus\r\n\t\t,MeterBillingStatusCodePeriod\r\n\t\t,IsTodMeterBilling\r\n\t\t,BillingPeriodDays\r\n\t\t,mbMeterConstant\r\n\t\t,Tension\r\n\t\t,FromDate\r\n\t\t,ToDate\r\n\t\t,FromReadingDate\r\n\t\t,ToReadingDate\r\n\t\t,Consumption\r\n\t\t,Demand\r\n\t\t,AdjustmentRecordSeqid\r\n\t\t,EnergySource\r\n\t\t,IsTimeOfDayAccount\r\n\t\t,SalesType\r\n\t\t,DeliveryTariffRate\r\n\t\t,CommodityTariffRate\r\n\t\t,BillingCycle\r\n\t\t,CurrentAccountNumber\r\n\t\t,OriginalAccountNumber\r\n\t\t,AccountEffectiveTurnOn\r\n\t\t,AccountEffectiveTurnOff\r\n\t\t,AccountStatus\r\n\t\t,AccountPreviousStatus\r\n\t\t,AccountStatusCodePeriod\r\n\t\t,meterOriginalAccountNumber\r\n\t\t,CurrentMeterNumber\r\n\t\t,meterOriginalMeterNumber\r\n\t\t,UtilityServiceAddress\r\n\t\t,MeterEffectiveOnDate\r\n\t\t,MeterEffectiveOffDate\r\n\t\t,MeterType\r\n\t\t,MeterDials\r\n\t\t,MeterConstant\r\n\t\t,MeterStatus\r\n\t\t,MeterPreviousStatus\r\n\t\t,MeterStatusCodePeriod\r\n\t\t,OecFacilityNumber\r\n\t\t,FacilityName\r\n\t\t,Borough\r\n\t\t,[Block]\r\n\t\t,LotNumber\r\n\t\t,CityPlanningBIN\r\n\t\t,IsRentalSpace\r\n\t\t,Address1\r\n\t\t,BillToAgencyCode\r\n\t\t,AgencyCodeOEC\r\n\t\t,AgencyName\r\n\t\t,EnergyType\r\n\t\t,InvoiceAccountBillingGroupDesc\r\n\t\t,UtilityCompany\r\n\t\t,EnergyUnit\r\n\t\t,UtilityCompanySeqid\r\n\t\t,EnergyDeliveryType\r\n\t\t,EnergyDeliverySubTypeID\r\n\t\t,EnergyDeliverySubType\r\n\t\t,MeterSeqid\r\n\t\t,MeterBillingSeqid\r\n\t\t,AccountExchangeMeterTrackSeqid\r\n\t\t,FacilitySeqid\r\n\t\t,AgencyDivisionSeqid\r\n\t\t,AccountSeqid\r\n\t\t,UtilityServiceAccountName\r\n\t\t,meterUtilityServiceAddress\r\n\t\t,AgencyELOMeterLocationSeqid\r\n\t\t,OnPeakEnergyUsage\r\n\t\t,OffPeakEnergyUsage\r\n\t\t,AssociatedDemandMeter\r\n\t\t,NgridCorrectorMeterId\r\n\t\t,HashValue\r\n\t\t,EffectiveStartPeriod\r\n\t\t,EffectiveEndPeriod\r\n\t\t,UniqueMeterSeqid\r\n\t\t,UniqueAccountSeqID)\r\n\tSELECT \r\n\t\tamlrdfcp.FiscalYear\r\n\t\t,amlrdfcp.CurrentFiscalYear\r\n\t\t,amlrdfcp.PriorFiscalYear\r\n\t\t,amlrdfcp.BillingPeriod\r\n\t\t,amlrdfcp.LastPeriodModified\r\n\t\t,amlrdfcp.BillingMonthConsumption\r\n\t\t,amlrdfcp.BillingMonthDemand\r\n\t\t,amlrdfcp.mbOriginalAccountNumber\r\n\t\t,amlrdfcp.mbOriginalMeterNumber\r\n\t\t,amlrdfcp.EstimatedReading\r\n\t\t,amlrdfcp.ConsecutivePeriodsEstimatedReading\r\n\t\t,amlrdfcp.MeterBillingStatus\r\n\t\t,amlrdfcp.PreviousMeterBillingStatus\r\n\t\t,amlrdfcp.MeterBillingStatusCodePeriod\r\n\t\t,amlrdfcp.IsTodMeterBilling\r\n\t\t,amlrdfcp.BillingPeriodDays\r\n\t\t,amlrdfcp.mbMeterConstant\r\n\t\t,amlrdfcp.Tension\r\n\t\t,amlrdfcp.FromDate\r\n\t\t,amlrdfcp.ToDate\r\n\t\t,amlrdfcp.FromReadingDate\r\n\t\t,amlrdfcp.ToReadingDate\r\n\t\t,amlrdfcp.Consumption\r\n\t\t,amlrdfcp.Demand\r\n\t\t,amlrdfcp.AdjustmentRecordSeqid\r\n\t\t,amlrdfcp.EnergySource\r\n\t\t,amlrdfcp.IsTimeOfDayAccount\r\n\t\t,amlrdfcp.SalesType\r\n\t\t,amlrdfcp.DeliveryTariffRate\r\n\t\t,amlrdfcp.CommodityTariffRate\r\n\t\t,amlrdfcp.BillingCycle\r\n\t\t,amlrdfcp.CurrentAccountNumber\r\n\t\t,amlrdfcp.OriginalAccountNumber\r\n\t\t,amlrdfcp.AccountEffectiveTurnOn\r\n\t\t,amlrdfcp.AccountEffectiveTurnOff\r\n\t\t,amlrdfcp.AccountStatus\r\n\t\t,amlrdfcp.AccountPreviousStatus\r\n\t\t,amlrdfcp.AccountStatusCodePeriod\r\n\t\t,amlrdfcp.meterOriginalAccountNumber\r\n\t\t,amlrdfcp.CurrentMeterNumber\r\n\t\t,amlrdfcp.meterOriginalMeterNumber\r\n\t\t,amlrdfcp.UtilityServiceAddress\r\n\t\t,amlrdfcp.MeterEffectiveOnDate\r\n\t\t,amlrdfcp.MeterEffectiveOffDate\r\n\t\t,amlrdfcp.MeterType\r\n\t\t,amlrdfcp.MeterDials\r\n\t\t,amlrdfcp.MeterConstant\r\n\t\t,amlrdfcp.MeterStatus\r\n\t\t,amlrdfcp.MeterPreviousStatus\r\n\t\t,amlrdfcp.MeterStatusCodePeriod\r\n\t\t,amlrdfcp.OecFacilityNumber\r\n\t\t,amlrdfcp.FacilityName\r\n\t\t,amlrdfcp.Borough\r\n\t\t,amlrdfcp.[Block]\r\n\t\t,amlrdfcp.LotNumber\r\n\t\t,amlrdfcp.CityPlanningBIN\r\n\t\t,amlrdfcp.IsRentalSpace\r\n\t\t,amlrdfcp.Address1\r\n\t\t,amlrdfcp.BillToAgencyCode\r\n\t\t,amlrdfcp.AgencyCodeOEC\r\n\t\t,amlrdfcp.AgencyName\r\n\t\t,amlrdfcp.EnergyType\r\n\t\t,amlrdfcp.InvoiceAccountBillingGroupDesc\r\n\t\t,amlrdfcp.UtilityCompany\r\n\t\t,amlrdfcp.EnergyUnit\r\n\t\t,amlrdfcp.UtilityCompanySeqid\r\n\t\t,amlrdfcp.EnergyDeliveryType\r\n\t\t,amlrdfcp.EnergyDeliverySubTypeID\r\n\t\t,amlrdfcp.EnergyDeliverySubType\r\n\t\t,amlrdfcp.MeterSeqid\r\n\t\t,amlrdfcp.MeterBillingSeqid\r\n\t\t,amlrdfcp.AccountExchangeMeterTrackSeqid\r\n\t\t,amlrdfcp.FacilitySeqid\r\n\t\t,amlrdfcp.AgencyDivisionSeqid\r\n\t\t,amlrdfcp.AccountSeqid\r\n\t\t,amlrdfcp.UtilityServiceAccountName\r\n\t\t,amlrdfcp.meterUtilityServiceAddress\r\n\t\t,amlrdfcp.AgencyELOMeterLocationSeqid\r\n\t\t,amlrdfcp.OnPeakEnergyUsage\r\n\t\t,amlrdfcp.OffPeakEnergyUsage\r\n\t\t,amlrdfcp.AssociatedDemandMeter\r\n\t\t,amlrdfcp.NgridCorrectorMeterId\r\n\t\t,amlrdfcp.HashValue\r\n\t\t,amlrdfcp.PublishedBillingPeriod\r\n\t\t,'999912'\r\n\t\t,amlrdfcp.UniqueMeterSeqid\r\n\t\t,amlrdfcp.UniqueAccountSeqID\r\n\tFROM Published.AccountMeterLevelRawDataForCurrentPeriod AS amlrdfcp\r\n\t\tLEFT JOIN (SELECT * FROM Published.TemporalAccountMeterLevelRawDataForCurrentPeriod WHERE EffectiveEndPeriod='999912') AS talrdfcp \r\n\t\t\tON talrdfcp.hashValue = amlrdfcp.hashValue\r\n\tWHERE amlrdfcp.PublishedBillingPeriod = @PublishedBillingPeriod AND talrdfcp.EffectiveStartPeriod IS NULL;\r\n\r\n\t-- we are joining with active data only\r\n\r\n\t-- this is data change, just set datato publishedbillingperiod\r\n\tUPDATE Published.TemporalAccountMeterLevelRawDataForCurrentPeriod\r\n\tSET EffectiveEndPeriod = @PublishedBillingPeriod\r\n\tWHERE Seqid IN (\r\n\t\tSELECT previousPeriods.Seqid \r\n\t\tFROM \r\n\t\t(SELECT * FROM Published.TemporalAccountMeterLevelRawDataForCurrentPeriod AS talrdfcp WHERE talrdfcp.EffectiveStartPeriod=@PublishedBillingPeriod) AS processingPeriod\r\n\t\tINNER JOIN \r\n\t\t(SELECT * FROM Published.TemporalAccountMeterLevelRawDataForCurrentPeriod AS talrdfcp WHERE talrdfcp.EffectiveStartPeriod<@PublishedBillingPeriod) AS previousPeriods\r\n\t\tON previousPeriods.MeterBillingSeqid = processingPeriod.MeterBillingSeqid\r\n\t\tWHERE previousPeriods.EffectiveEndPeriod='999912');\r\n\r\n\t-- this is existing accountbilling seqid but does not exist in current period, set datato publishedbillingperiod\r\n\tUPDATE Published.TemporalAccountMeterLevelRawDataForCurrentPeriod\r\n\tSET EffectiveEndPeriod = @PublishedBillingPeriod\r\n\tWHERE Seqid IN (\r\n\t\tSELECT talrdfcp.Seqid FROM \r\n\t\tPublished.TemporalAccountMeterLevelRawDataForCurrentPeriod AS talrdfcp\r\n\t\tLEFT JOIN \r\n\t\tPublished.AccountMeterLevelRawDataForCurrentPeriod AS alrdfcp\r\n\t\tON alrdfcp.hashValue = talrdfcp.hashValue \r\n\t\tWHERE alrdfcp.PublishedBillingPeriod=@PublishedBillingPeriod\r\n\t\tAND  talrdfcp.EffectiveEndPeriod='999912'\r\n\t\tAND alrdfcp.MeterBillingSeqid IS NULL);\r\n\t\r\n\t-- this is setting datato to publishedbillingperiod for data that exists in destination but not exist in source\r\n\tUPDATE Published.TemporalAccountMeterLevelRawDataForCurrentPeriod\r\n\tSET EffectiveEndPeriod = @PublishedBillingPeriod\r\n\tWHERE Seqid IN (\r\n\t\tSELECT t.Seqid\r\n\t\tFROM \r\n\t\t(\r\n\t\t\tSELECT * FROM Published.TemporalAccountMeterLevelRawDataForCurrentPeriod\r\n\t\t\tWHERE EffectiveStartPeriod <= @PublishedBillingPeriod AND EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\t) t\r\n\t\tLEFT JOIN\r\n\t\t(\r\n\t\t\tSELECT * FROM Published.AccountMeterLevelRawDataForCurrentPeriod AS ammlrdfcp\r\n\t\t\tWHERE ammlrdfcp.PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\t) p \r\n\t\tON p.hashValue = t.hashValue\r\n\t\tWHERE p.PublishedBillingPeriod IS NULL);\r\n\t--PROCESS ENDS-------------------------\r\nEND;"
        }
      ]
    }
  ]
}