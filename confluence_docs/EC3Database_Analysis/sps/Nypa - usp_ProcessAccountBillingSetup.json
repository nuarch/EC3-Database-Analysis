{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessAccountBillingSetup",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessAccountBillingSetup",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to manage and update account billing records for the New York Power Authority (NYPA). It processes billing data by updating account statuses, handling billing cycles, and managing exchange actions. The procedure ensures that all accounts that should have been billed are accounted for, and it updates records with the correct statuses and adjustments. It also handles the allocation of customer-level adjustments and updates the billing records with exchange data."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to its extensive use of conditional logic, multiple updates and inserts, and interactions with several tables. It involves intricate business logic for handling billing cycles, account statuses, and exchange actions, making it challenging to maintain and understand without a deep understanding of the underlying business processes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is used to track which user is executing the procedure, likely for auditing purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This output parameter is used to return the execution status of the procedure, indicating success or failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Several local variables are declared and initialized to manage the procedure's flow and store intermediate results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Check",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure checks if there are original bills for the current processing period and if they have been processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Account Verification",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It verifies if all billed accounts have a current period bill. If not, it inserts zero-dollar transactions for accounts without current period transactions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Account Status Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates account billing records with the correct statuses and adjustments, setting exchange codes to null."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Exchange Data Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates records with exchange data, marking accounts that have been exchanged."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Customer-Level Adjustments",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Calls another stored procedure to allocate customer-level adjustments."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Status Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Sets the "
                },
                {
                  "type": "text",
                  "text": "@StatusCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to indicate success."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved in joins and updates are properly indexed to improve performance, especially given the multiple joins and updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Consider wrapping the procedure in a transaction to ensure atomicity, as multiple updates and inserts could lead to inconsistent data if the procedure fails midway."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the data volume is large, consider processing in batches to avoid locking issues and reduce transaction log growth."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues if multiple users execute it simultaneously, potentially leading to race conditions or deadlocks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Without explicit transaction handling, partial updates could leave the database in an inconsistent state if an error occurs."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the data grows, the complexity and number of operations could lead to performance degradation."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks comprehensive error handling, which could make troubleshooting difficult if issues arise during execution."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of hardcoded values (e.g., "
                },
                {
                  "type": "text",
                  "text": "UtilityCompanySeqid = 7",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") reduces flexibility and could lead to maintenance challenges if business rules change."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Description: Process the NYPA account billing setup. The sequential processing steps needed to\r\n-- Update the Account billing records with the correct account statuses of the existing accounts and the\r\n-- current cycle exchange actions. The exchange code will be set to null.\r\n-- \r\n-- Determine the active accounts that the utility company did not send a bill for the cycle and add them to the \r\n-- to the \"UploadNYPAAccountBilling\" table. At this point, we should have a collection of all of the accounts \r\n-- that were billed and all of the accounts that should have been billed.\r\n--* Exec: usp_ProcessAccountBillingSetup\r\n--* Parameter(s): \r\n--*\t\t\t\tAuthenticatedUserID int,\r\n--*\t\t\t\tStatusCode int output - Execution Return Status \r\n--* Return:\t0 Success\r\n--*\t\t\t9 Failure\r\n--* AUTHOR: Peter Heller (PAH)\r\n--* Created On: 10/26/2005\r\n--**************************************************************************************\r\n--* Date Tech Description of Change\r\n--* ---------- ---- -------------------------------------------------------------\r\n--* 11/20/2006 PAH Revised to \r\n--* 03/27/2006 PAH Revised to \r\n--* 10/26/2005 PAH First Version \r\n--* 11/23/2018\tzd\tunique account seq id fix needed here stting\r\n--* 12/14/2018  VY Modified for UniqueAccountSeqID\r\n--* 04/16/2019  zd common.GetUniqueAccountSeqID function is added for update\r\n--***************************************************************************************\r\nCREATE PROCEDURE [Nypa].[usp_ProcessAccountBillingSetup]\r\n(\r\n\t@AuthenticatedUserID AS INT,\r\n\t@StatusCode AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @RC int, @InvoiceTrackingSeqid int, @InvoiceUtilityCompanyCoverSheetSeqid INT,\r\n\t\t@UtililtyCompanyCycleParametersExist INT, @BillingCycle varchar(1), @ExhangeCodeNull varchar(2),\r\n\t\t@FromDateParm varchar(1), @ToDateParm varchar(1), @Yes varchar(1), @VoucherAmount MONEY,\r\n\t\t@PostMarkDate varchar(8), @DatePaymentDue varchar(8), @DateAcceptanceIntoOEC varchar(8),\r\n\t\t@BillingPeriod varchar(6), @IsCurrentBillingPeriod INT, @NumberOfOriginalBills INT,\r\n\t\t@NumberOfOriginalBillsProcessed INT, @HasCurrentBillingPeriodBeenProcessed INT,\r\n\t\t@BillingPeriodMismatch INT, @StopCurrentBillingPeriodProcess INT,\r\n\t\t@NumberOfAccountsWithoutCurrentPeriodTransaction INT, @BCAccountStatusInsertCount INT,\r\n\t\t@BCAccountStatusUpdateCount INT;\r\n\r\n\tSELECT @InvoiceTrackingSeqid = NULL, @BillingCycle = 'M', @FromDateParm = 'F',\r\n\t\t@ToDateParm = 'T', @Yes = 'Y', @BillingPeriodMismatch = 0, @StopCurrentBillingPeriodProcess = 0;\r\n\r\n\t--\tCheck Whether it is the current billing and that it has not been already processed\r\n\tSELECT @NumberOfOriginalBills = COUNT(*)\r\n\tFROM Nypa.UploadNYPAAccountBilling INNER JOIN\r\n\t\tBilling.ApplicationTimeFrame ON Nypa.UploadNYPAAccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\tNypa.UploadNYPAAccountBilling.RevisedBillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\tBilling.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y';\r\n\r\n\tSELECT\r\n\t\t@NumberOfOriginalBillsProcessed = COUNT(*)\r\n\tFROM Billing.AccountBilling INNER JOIN\r\n\t\tBilling.ApplicationTimeFrame ON Billing.AccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\tBilling.AccountBilling.BillingPeriodRevision = Billing.ApplicationTimeFrame.BillingPeriod\r\n\tWHERE (Billing.AccountBilling.UtilityCompanySeqid = 7) AND \r\n\t\t(Billing.AccountBilling.CurrentInvoiceAccountBillingGroup = 1) AND \r\n\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y');\r\n\r\n\tIF((@NumberOfOriginalBills > 0) AND (@NumberOfOriginalBillsProcessed = 0))\r\n\tBEGIN\r\n\t\t-- Get the Application current billing period from the ApplicationTimeFrame table\r\n\t\tSELECT @BillingPeriod = BillingPeriod FROM Billing.ApplicationTimeFrame WHERE (CurrentProcessingPeriod = 'Y')\r\n\t\t-- Verify that all of the accounts that are billed have a current period bill (@NumberOfAccountsWithoutCurrentPeriodTransaction)\r\n\t\tSELECT @NumberOfAccountsWithoutCurrentPeriodTransaction = ISNULL(COUNT(*), 0) from Nypa.uvw_UploadWithoutCurrentPeriodTransactionForAccountBilling\r\n\t\t\r\n\t\tIF(@NumberOfAccountsWithoutCurrentPeriodTransaction<>0)\r\n\t\tBEGIN\r\n\t\t\t-- Insert current period zero dollars and usage for the next paid adjustment back billing.\r\n\t\t\tINSERT INTO Nypa.UploadNYPAAccountBilling\r\n\t\t\t\t(UtilityCompanyId, \r\n\t\t\t\tAccountBillingGroup, \r\n\t\t\t\tCurrentAccountNumber, \r\n\t\t\t\tPreviousBillingPeriod, \r\n\t\t\t\tBillingPeriod, \r\n\t\t\t\tRevisedBillingPeriod, \r\n\t\t\t\tNextBillingPeriod, \r\n\t\t\t\tBillCreationDate, \r\n\t\t\t\tBillingAction, \r\n\t\t\t\tFromDate, \r\n\t\t\t\tToDate, \r\n\t\t\t\tProductionAndDeliveryTariff,\r\n\t\t\t\tAuthenticatedUserID,\r\n\t\t\t\tAccountStatus,\r\n\t\t\t\tAccountPreviousStatus,\r\n\t\t\t\tAccountStatusCodePeriod,\r\n\t\t\t\tBillingPeriodDays,\r\n\t\t\t\tInitialPostingDate,\r\n\t\t\t\tLastUpdate)\r\n\t\t\tSELECT \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.UtilityCompanyId, \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.AccountBillingGroup, \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.CurrentAccountNumber, \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.BillingPeriod, --Nypa.UploadNYPAAccountBilling.PreviousBillingPeriod, \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.BillingPeriod, \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.BillingPeriod, --Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod, \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.BillingPeriod, --Nypa.UploadNYPAAccountBilling.NextBillingPeriod, \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.BillCreationDate, \r\n\t\t\t\t'O', -- Nypa.UploadNYPAAccountBilling.BillingAction, \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.ToDate, -- Nypa.UploadNYPAAccountBilling.FromDate, \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.BillingPeriod+'28', --Nypa.UploadNYPAAccountBilling.ToDate, \r\n\t\t\t\tNypa.UploadNYPAAccountBilling.ProductionAndDeliveryTariff,\r\n\t\t\t\tNypa.UploadNYPAAccountBilling.AuthenticatedUserID,\r\n\t\t\t\t'BC', -- AccountStatus,\r\n\t\t\t\t'NB', --AccountPreviousStatus,\r\n\t\t\t\tNypa.UploadNYPAAccountBilling.BillingPeriod, -- AccountStatusCodePeriod\r\n\t\t\t\t0, -- BillingPeriodDays\r\n\t\t\t\tgetDate(), --InitialPostingDate\r\n\t\t\t\tgetDate() --LastUpdate\r\n\t\t\tFROM Nypa.uvw_UploadWithoutCurrentPeriodTransactionForAccountBilling INNER JOIN\r\n\t\t\t\tNypa.UploadNYPAAccountBilling ON \r\n\t\t\t\tNypa.uvw_UploadWithoutCurrentPeriodTransactionForAccountBilling.MaxRevisedBillingPeriod = Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod\r\n\t\t\t\tAND Nypa.uvw_UploadWithoutCurrentPeriodTransactionForAccountBilling.CurrentAccountNumber = Nypa.UploadNYPAAccountBilling.CurrentAccountNumber AND\r\n\t\t\t\tNypa.uvw_UploadWithoutCurrentPeriodTransactionForAccountBilling.BillingPeriod = Nypa.UploadNYPAAccountBilling.BillingPeriod;\r\n\r\n\t\t\tSET @BCAccountStatusInsertCount = @@rowcount;\r\n\t\tEND;\r\n\r\n\t\t-- Update all of the Account billing records (original and adjustments) with the correct account statuses of the existing accounts and the\r\n\t\t-- current cycle exchange actions. The exchange code will be set to null. Apply the Billing.AccountBillingElectric.CustomerLevelAdjustmentAmount\r\n\t\t-- to the revised billed amount.\r\n\t\tUPDATE Nypa.UploadNYPAAccountBilling\r\n\t\tSET \r\n\t\t\tAccountBillingElectricSeqid = Billing.AccountBillingElectric.AccountBillingElectricSeqid, \r\n\t\t\tAccountBillingSeqid = Billing.AccountBilling.AccountBillingSeqid,\r\n\t\t\tCustomerLevelAdjustmentAmount = Billing.AccountBillingElectric.CustomerLevelAdjustmentAmount,\r\n\t\t\tAccountSeqid = Billing.Account.AccountSeqid,\r\n\t\t\tUniqueAccountSeqid = Billing.Account.UniqueAccountSeqid /* added 12/3/2018 */\r\n\t\tFROM Nypa.UploadNYPAAccountBilling\r\n\t\t\tinner join Billing.Account on Nypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.CurrentAccountNumber\r\n\t\t\tinner join Billing.AccountBilling on Billing.Account.UniqueAccountSeqid = Billing.accountBilling.UniqueAccountSeqId AND Billing.Account.IsCurrentRecord = 'Y' /* added 12/3/2018 */\r\n\t\t\t\tand Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod = Billing.AccountBilling.BillingPeriodRevision\r\n\t\t\tinner join Billing.AccountBillingElectric on Billing.AccountBilling.AccountBillingSeqid = Billing.AccountBillingElectric.MonthlyAccountBillingChargesElectric\r\n\t\t\tinner join Billing.ApplicationTimeFrame on Nypa.UploadNYPAAccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\tWHERE Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y';\r\n\r\n\t\tUPDATE Nypa.UploadNYPAAccountBilling\r\n\t\tSET AgencyAccount = Billing.Account.AgencyAccount, \r\n\t\t\tAccountSeqid = [Nypa].[GetMaxAccountSequenceId] (Nypa.UploadNYPAAccountBilling.CurrentAccountNumber,7),\r\n\t\t\tUniqueAccountSeqID = common.udf_GetUniqueAccountSeqId(Nypa.UploadNYPAAccountBilling.CurrentAccountNumber), -- added by zd\r\n\t\t\tAccountStatus = [Nypa].[DetermineBackBilledStatus] (Billing.Account.AccountStatus,'BA',Nypa.UploadNYPAAccountBilling.BillingPeriod,Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod,Nypa.UploadNYPAAccountBilling.AccountBillingSeqid), -- Billing.Account.AccountStatus, \r\n\t\t\tAccountPreviousStatus = [Nypa].[DetermineBackBilledStatus] (Billing.Account.AccountPreviousStatus,'NB',Nypa.UploadNYPAAccountBilling.BillingPeriod,Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod,Nypa.UploadNYPAAccountBilling.AccountBillingSeqid), -- Billing.Account.AccountPreviousStatus, \r\n\t\t\tAccountStatusCodePeriod = [Nypa].[DetermineBackBilledStatusPeriod] (Billing.Account.AccountStatusCodePeriod,Nypa.UploadNYPAAccountBilling.BillingPeriod,Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod,Nypa.UploadNYPAAccountBilling.AccountBillingSeqid), -- Billing.Account.AccountStatusCodePeriod, \r\n\t\t\tBillingPeriodDays = [dbo].[CalculateNumberOfBillingDays] (FromDate, ToDate), \r\n\t\t\tInitialPostingDate = getDate(),\r\n\t\t\tLastUpdate = getDate(),\r\n\t\t\tAuthenticatedUserID = 1, --@AuthenticatedUserID,\r\n\t\t\tExhangeCode = null --@ExhangeCodeNull \r\n\t\tFROM Nypa.UploadNYPAAccountBilling INNER JOIN\r\n\t\t\tBilling.Account ON Nypa.UploadNYPAAccountBilling.UtilityCompanyId = Billing.Account.UtilityAccountProvider AND \r\n\t\t\tNypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.OriginalAccountNumber INNER JOIN\r\n\t\t\tBilling.ApplicationTimeFrame ON Nypa.UploadNYPAAccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod \r\n\t\tWHERE Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y';\r\n\t\t\t\r\n\t\t--\tUpdate only when the Account Status code 'BC' back billed with no current bill\r\n\t\tUPDATE Nypa.UploadNYPAAccountBilling\r\n\t\tSET AgencyAccount = Billing.Account.AgencyAccount, \r\n\t\t\tAccountSeqid = [Nypa].[GetMaxAccountSequenceId] (Nypa.UploadNYPAAccountBilling.CurrentAccountNumber,7), \r\n\t\t\tAccountStatus = 'BC',\r\n\t\t\tAccountPreviousStatus = 'NB',\r\n\t\t\tAccountStatusCodePeriod = Billing.ApplicationTimeFrame.BillingPeriod \r\n\t\tFROM Nypa.UploadNYPAAccountBilling INNER JOIN\r\n\t\t\tBilling.Account ON Nypa.UploadNYPAAccountBilling.UtilityCompanyId = Billing.Account.UtilityAccountProvider AND \r\n\t\t\tNypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.OriginalAccountNumber INNER JOIN\r\n\t\t\tBilling.ApplicationTimeFrame ON Nypa.UploadNYPAAccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\t\tNypa.UploadNYPAAccountBilling.RevisedBillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\t\tNypa.UploadNYPAAccountBilling.NextBillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\tWHERE Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y';\r\n\r\n\t\t-- Added on 12/14/2018 for UniqueAccountSeqID\r\n        UPDATE Nypa.UploadNYPAAccountBilling\r\n\t\tSET Nypa.UploadNYPAAccountBilling.UniqueAccountSeqid= Billing.Account.UniqueAccountSeqid\r\n\t\tFROM Nypa.UploadNYPAAccountBilling INNER JOIN Billing.Account on Billing.Account.AccountSeqID = Nypa.UploadNYPAAccountBilling.AccountSeqID \r\n\t\tWHERE Nypa.UploadNYPAAccountBilling.UniqueAccountSeqid IS NULL;\r\n\t\t\t\r\n\t\tSET @BCAccountStatusUpdateCount = @@rowcount;\r\n\r\n\t\t-- Tag all of the account billing rows that were associated with an exchange record. If there was a new account the previous billing period is set to the current and revised billing period. This combination\r\n\t\t-- will help to determine when a new account enters into the system even though the '46' status code drops out in the next billing cycle.\r\n\t\t-- UploadNYPAExchangeData.CurrentAccountNumber exchanged accounts (AX or 46)\r\n\t\tUPDATE Nypa.UploadNYPAAccountBilling\r\n\t\tSET PreviousBillingPeriod = dbo.CreateNewActivePreviousPeriod (Nypa.UploadNYPAAccountBilling.BillingPeriod,@BillingCycle,ExchangeData.ExchangeCode), \r\n\t\t\tExhangeCode = ExchangeData.ExchangeCode,\r\n\t\t\tExchangeEffectiveTransactionDate = ExchangeData.AccountEffectiveTurnOn,\r\n\t\t\tLastUpdate = getDate(),\r\n\t\t\tAuthenticatedUserID = @AuthenticatedUserID\r\n\t\tFROM Nypa.UploadNYPAAccountBilling INNER JOIN\r\n\t\t\tCommon.ExchangeData ON \r\n\t\t\tNypa.UploadNYPAAccountBilling.CurrentAccountNumber = Common.ExchangeData.CurrentAccountNumber;\r\n\t\t\t\r\n\t\t-- UploadNYPAExchangeData.OriginalAccountNumber exchanged accounts (AX)\r\n\t\tUPDATE Nypa.UploadNYPAAccountBilling\r\n\t\tSET PreviousBillingPeriod = dbo.CreateNewActivePreviousPeriod (Nypa.UploadNYPAAccountBilling.BillingPeriod,@BillingCycle,Common.ExchangeData.ExchangeCode), \r\n\t\t\tExhangeCode = Common.ExchangeData.ExchangeCode,\r\n\t\t\tExchangeEffectiveTransactionDate = Common.ExchangeData.AccountEffectiveTurnOn,\r\n\t\t\tLastUpdate = getDate(),\r\n\t\t\tAuthenticatedUserID = @AuthenticatedUserID\r\n\t\tFROM Nypa.UploadNYPAAccountBilling INNER JOIN\r\n\t\t\tCommon.ExchangeData ON Nypa.UploadNYPAAccountBilling.CurrentAccountNumber = Common.ExchangeData.OriginalAccountNumber\r\n\t\tWHERE Common.ExchangeData.ExchangeCode = 'AX';\r\n\t\t\t\r\n\t\t-- Identifies all accounts that were billed in the current billing period\r\n\t\t-- It represents the orginal billed records recorded in the LastPeriodOriginalBilled column\r\n\t\tUPDATE Billing.Account\r\n\t\tSET LastPeriodOriginalBilled = Nypa.UploadNYPAAccountBilling.BillingPeriod,\r\n\t\t\tLastUpdate = getDate(),\r\n\t\t\tAuthenticatedUserID = @AuthenticatedUserID\r\n\t\tFROM Nypa.UploadNYPAAccountBilling INNER JOIN\r\n\t\t\tBilling.Account ON Nypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.OriginalAccountNumber AND \r\n\t\t\tNypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.CurrentAccountNumber INNER JOIN\r\n\t\t\tBilling.ApplicationTimeFrame ON Nypa.UploadNYPAAccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\tWHERE Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y';\r\n\t\t\r\n\t\t-- Allocate the CustomerLevelAdjustments to the accounts\r\n\t\tEXEC [Nypa].[usp_ProRateCustomerLevelAdjustments] @StatusCode OUTPUT\r\n\r\n\t\tSET @StatusCode = 0;\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}