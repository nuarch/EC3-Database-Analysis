{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessMeterBillingSetup",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessMeterBillingSetup",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process meter billing setup for a utility company. It establishes unique bills for each account, meter, billing period, and meter type. The procedure updates various tables to reflect the current billing period's data, including handling meter exchanges, updating estimated readings, and ensuring unique identifiers for accounts and meters."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple table joins and updates across different schemas."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes conditional logic for updating records based on various criteria."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses several user-defined functions to determine billing types and periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It manages multiple counters and status updates, indicating a complex workflow."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is used to track the user who is executing the procedure, likely for auditing purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This output parameter is intended to return the execution status of the procedure, where 0 indicates success and 9 indicates failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure initializes several local variables, including billing cycle parameters and status flags."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Period Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves the current billing period from the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Bill Creation Date",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It fetches the bill creation date from "
                },
                {
                  "type": "text",
                  "text": "Common.UploadCycleParameters",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " based on specific conditions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Main Update Operation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure updates the "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAMeterBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table with data from various billing and account tables. This includes setting account and meter sequence IDs, billing sequence IDs, and other related fields."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Unique Identifiers Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It ensures that unique account and meter sequence IDs are set for records where they are currently null."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Exchange Data Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure updates records with exchange data to identify new transactions and old meters that were exchanged during the current period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Estimated Readings Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It updates the number of consecutive estimated readings and resets them when an actual reading is recorded."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Back Billing Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It processes back-billed meter billing records by updating their status and estimated readings."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple complex joins, which can be resource-intensive and may impact performance, especially with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Row Count Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "@@rowcount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " after updates can be costly if the updates affect a large number of rows."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of user-defined functions within updates can slow down execution, particularly if these functions are not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing on the tables involved in joins and updates is crucial to ensure efficient execution."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not include explicit transaction handling, which could lead to concurrency issues if multiple instances are executed simultaneously."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Without transaction management, partial updates could occur, leading to data inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks error handling mechanisms, which means any runtime errors could cause the procedure to fail without a clear indication of the issue."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the data grows, the complexity and number of operations in this procedure may lead to performance degradation, requiring optimization or refactoring."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses a hardcoded "
                },
                {
                  "type": "text",
                  "text": "AuthenticatedUserID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " in some updates, which could be a security concern if not properly managed."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Description: Meter Billing Setup to establish unique bills for each Account, Meter, Billing Period and Meter Type\r\n--* Exec: usp_ProcessMeterBillingSetup\r\n--* Parameter(s): \tAuthenticatedUserID int\r\n--* StatusCode int output - Execution Return Status \r\n--* Return:\t0 Success\r\n--*\t\t\t9 Failure\r\n--* AUTHOR: Peter Heller (PAH)\r\n--* Created On: 10/26/2005\r\n--**************************************************************************************\r\n--* Date Tech Description of Change\r\n--* ---------- ---- -------------------------------------------------------------\r\n--* 10/26/2005 PAH First Version \r\n--* 01/31/2008 PAH Revised to \r\n--* 11/23/2018 zd\tstting NYPA meter unique seq is fix needed in this SP\r\n--* 12/14/2018 VY   modified for UniqueMeterSeqID\r\n--* 12/20/2018 VY   modified for UniqueMeterSeqID\r\n--***************************************************************************************\r\nCREATE PROCEDURE [Nypa].[usp_ProcessMeterBillingSetup]\r\n(\r\n\t@AuthenticatedUserID AS INT,\r\n\t@StatusCode AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN \r\n\tDECLARE @RC int, @InvoiceTrackingSeqid int, @InvoiceUtilityCompanyCoverSheetSeqid INT,\r\n\t@UtililtyCompanyCycleParametersExist INT, @BillingCycle varchar(1), @ExhangeCodeNull varchar(2),\r\n\t@FromDateParm varchar(1), @ToDateParm varchar(1), @Yes varchar(1), @VoucherAmount MONEY,\r\n\t@PostMarkDate varchar(8), @DatePaymentDue varchar(8), @DateAcceptanceIntoOEC varchar(8),\r\n\t@BillCreationDate varchar(8), @BillingPeriod varchar(6), @IsCurrentBillingPeriod INT,\r\n\t@HasCurrentBillingPeriodBeenProcessed INT, @BillingPeriodMismatch INT, @StopCurrentBillingPeriodProcess INT,\r\n\t@UpdateSeqidAndStatusCount INT, @UpdateExchangeStatusCount INT, @Update45OldMeterExchangeStatusCount INT,\r\n\t@EstimatedReadingCount INT, @CurrentPeriodNumberOfEstimatedReadingsCount INT, @BackBilledMeterBillingCount INT;\r\n\r\n\tSELECT @InvoiceTrackingSeqid = null, @BillingCycle = 'M', @FromDateParm = 'F', @ToDateParm = 'T',\r\n\t\t @Yes = 'Y', @BillingPeriodMismatch = 0, @StopCurrentBillingPeriodProcess = 0;\r\n\r\n\t-- Get the Application current billing period from the Billing.ApplicationTimeFrame table\r\n\tSELECT @BillingPeriod = BillingPeriod FROM Billing.ApplicationTimeFrame WHERE (CurrentProcessingPeriod = 'Y')\r\n\r\n\t-- Nypa.UploadNYPAMeterBillingTemporary has been initialized\r\n\tSELECT @BillCreationDate = UploadCycleParameters.BillCreationDate\r\n\tFROM Common.UploadCycleParameters INNER JOIN\r\n\t\t Billing.ApplicationTimeFrame ON Common.UploadCycleParameters.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\tWHERE (Common.UploadCycleParameters.UtilityCompanySeqid = 7 and Common.UploadCycleParameters.InvoiceAccountGroupSeqid =1)\r\n\r\n\tUPDATE Nypa.UploadNYPAMeterBilling\r\n\tSET\r\n\t\tAccountExchangeMeterTrackSeqid = Billing.AccountExchangeMeterTrack.AccountExchangeMeterTrackSeqid, \r\n\t\tAccountSeqid = Billing.AccountExchangeMeterTrack.OriginalAccountSeqid, \r\n\t\tMeterSeqid = Billing.AccountExchangeMeterTrack.OriginalMeterSeqid, \r\n\t\tMeterBillingSeqid = Billing.MeterBilling.MeterBillingSeqid, \r\n\t\tMeterBillingElectricSeqid = Billing.MeterBillingElectric.MeterBillingElectricSeqid, \r\n\t\tMeterStatus = Billing.Meter.MeterStatus, \r\n\t\tMeterPreviousStatus = Billing.Meter.MeterPreviousStatus, \r\n\t\tMeterStatusCodePeriod = Billing.Meter.MeterStatusCodePeriod, \r\n\t\tUtilityServiceAddress = Billing.Account.UtilityServiceAddress, \r\n\t\tIsUploadProcessed = 'N', \r\n\t\tSalesType = 'BS',\r\n\t\tBillCreationDate = @BillCreationDate,\r\n\t\tEstimatedReading = case when Nypa.UploadNYPAMeterBilling.ESTOrACT = 'EST' then 'EST' else 'ACT' end,\r\n\t\tCurrentPeriodNumberOfEstimatedReadings = case when Nypa.UploadNYPAMeterBilling.ESTOrACT = 'EST' then 1 else 0 end,\r\n\t\tMeterBillingAdjustmentTypeElectric = [dbo].[DetermineMeterBillingTypeElectric] ( Nypa.UploadNYPAMeterBilling.MeterType),\r\n\t\tPreviousBillingPeriod = dbo.[CreatePreviousPeriod] (Nypa.UploadNYPAMeterBilling.BillingPeriod,'M'), \r\n\t\tNextBillingPeriod = dbo.[CreateNextPeriod] (Nypa.UploadNYPAMeterBilling.BillingPeriod,'M')\r\n\tFROM \r\n\t\tBilling.MeterBillingElectric INNER JOIN\r\n\t\tBilling.MeterBilling ON Billing.MeterBillingElectric.MeterBillingRowId = Billing.MeterBilling.MeterBillingSeqid RIGHT JOIN\r\n\t\tNypa.UploadNYPAMeterBilling INNER JOIN\r\n\t\tBilling.AccountExchangeMeterTrack ON Nypa.UploadNYPAMeterBilling.UtilityCompanySeqid = Billing.AccountExchangeMeterTrack.UtilityCompanySeqid AND \r\n\t\tNypa.UploadNYPAMeterBilling.CurrentAccountNumber = Billing.AccountExchangeMeterTrack.OriginalAccountNumber AND \r\n\t\tNypa.UploadNYPAMeterBilling.CurrentMeter = Billing.AccountExchangeMeterTrack.OriginalMeterNumber INNER JOIN\r\n\t\tBilling.Account ON Billing.AccountExchangeMeterTrack.OriginalAccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n\t\tBilling.Meter ON Billing.AccountExchangeMeterTrack.OriginalMeterSeqid = Billing.Meter.MeterSeqid ON \r\n\t\tBilling.MeterBilling.BillingPeriodRevision = Nypa.UploadNYPAMeterBilling.RevisedBillingPeriod AND \r\n\t\tBilling.MeterBilling.BillingPeriod = Nypa.UploadNYPAMeterBilling.RevisedBillingPeriod AND \r\n\t\tBilling.MeterBilling.AccountExchangeMeterTrackSeqid = Billing.AccountExchangeMeterTrack.AccountExchangeMeterTrackSeqid\t\t\r\n\r\n\tSET @UpdateSeqidAndStatusCount = @@rowcount\r\n\tPRINT '@UpdateSeqidAndStatusCount: '+str(@UpdateSeqidAndStatusCount)\r\n\r\n     -- added 12/20/2018 update unique account seqid information\r\n\t UPDATE\tNypa.UploadNYPAMeterBilling\r\n\t SET Nypa.UploadNYPAMeterBilling.UniqueAccountSeqid = Billing.Account.UniqueAccountSeqid\r\n\t FROM Nypa.UploadNYPAMeterBilling INNER JOIN Billing.Account ON Nypa.UploadNYPAMeterBilling.AccountSeqId = Billing.Account.AccountSeqid\r\n\t WHERE Nypa.UploadNYPAMeterBilling.UniqueAccountSeqid is null\r\n\t\t\t\t\r\n\r\n\t -- added 12/14/2018 update unique meter seqid information\r\n\t UPDATE\tNypa.UploadNYPAMeterBilling\r\n\t SET Nypa.UploadNYPAMeterBilling.UniqueMeterSeqID = Billing.Meter.UniqueMeterSeqid\r\n\t FROM Nypa.UploadNYPAMeterBilling INNER JOIN Billing.Meter ON Nypa.UploadNYPAMeterBilling.MeterSeqID = Billing.Meter.MeterSeqID\r\n\t WHERE Nypa.UploadNYPAMeterBilling.UniqueMeterSeqID is null\r\n\t\t\t\t\r\n\r\n\t--\tUpdate the Billing.MeterBilling with the exchange data to identify new transactions\r\n\t--\tthis current period.\r\n\tUPDATE Nypa.UploadNYPAMeterBilling\r\n\tSET\r\n\t\tOrginalMeter = Common.ExchangeData.OriginalMeterNumber, \r\n\t\tExchangeCode = Common.ExchangeData.ExchangeCode, \r\n\t\tExhangeFileSeqid = Common.ExchangeData.ExchangeDataSeqid,\r\n\t\tExchangeEffectiveTransactionDate = Common.ExchangeData.AccountEffectiveTurnOn, -- AccountEffectiveTurnOn is the Transaction Effective Date\r\n\t\tAuthenticatedUserID =1, \r\n\t\tLastUpdate = getDate()\r\n\tFROM \r\n\t\tNypa.UploadNYPAMeterBilling RIGHT JOIN\r\n\t\tCommon.ExchangeData ON Nypa.UploadNYPAMeterBilling.CurrentAccountNumber = Common.ExchangeData.CurrentAccountNumber AND \r\n\t\tNypa.UploadNYPAMeterBilling.CurrentMeter = Common.ExchangeData.CurrentMeterNumber\r\n\tWHERE \r\n\t\t(Common.ExchangeData.BillingPeriod = @BillingPeriod);\r\n\r\n\tSET @UpdateExchangeStatusCount = @@rowcount;\r\n\tPRINT '@UpdateExchangeStatusCount: '+str(@UpdateExchangeStatusCount);\r\n\r\n--\tUpdate the MeterBilling with the \"45\" exchange data to identify the old meters that were exchanged\r\n--\tthis current period. The current meter number has the old meter number that is being replaced by the \r\n--\tutility company\r\n\tUPDATE Nypa.UploadNYPAMeterBilling\r\n\tSET\r\n\t\tOrginalMeter = Common.ExchangeData.OriginalMeterNumber, \r\n\t\tExchangeCode = Common.ExchangeData.ExchangeCode, \r\n\t\tExhangeFileSeqid = Common.ExchangeData.ExchangeDataSeqid,\r\n\t\tExchangeEffectiveTransactionDate = Common.ExchangeData.AccountEffectiveTurnOn, -- AccountEffectiveTurnOn is the Transaction Effective Date\r\n\t\tAuthenticatedUserID =1, \r\n\t\tLastUpdate = getDate()\r\n\tFROM \r\n\t\tNypa.UploadNYPAMeterBilling INNER JOIN\r\n\t\tCommon.ExchangeData ON Nypa.UploadNYPAMeterBilling.CurrentMeter = Common.ExchangeData.OriginalMeterNumber AND \r\n\t\tNypa.UploadNYPAMeterBilling.CurrentAccountNumber = Common.ExchangeData.CurrentAccountNumber\r\n\tWHERE (Common.ExchangeData.BillingPeriod = @BillingPeriod);\r\n\r\n\tSET @Update45OldMeterExchangeStatusCount = @@rowcount;\r\n\tPRINT '@Update45OldMeterExchangeStatusCount: '+str(@Update45OldMeterExchangeStatusCount);\r\n\r\n\t--\tUpdate whether estimated or an actual reading. Determine the number of consecutive billing cycles that are estimated.\r\n\t--\tThe first actual reading resets to zero. \r\n\tUPDATE Nypa.UploadNYPAMeterBilling\r\n\tSET\r\n\t\tCurrentPeriodNumberOfEstimatedReadings = IsNull(Billing.MeterBilling.ConsecutivePeriodsEstimatedReading,0)\r\n\tFROM \r\n\t\tNypa.UploadNYPAMeterBilling INNER JOIN\r\n\t\tBilling.MeterBilling ON Nypa.UploadNYPAMeterBilling.CurrentAccountNumber = Billing.MeterBilling.OriginalAccountNumber AND \r\n\t\tNypa.UploadNYPAMeterBilling.CurrentMeter = Billing.MeterBilling.OriginalMeterNumber AND \r\n\t\tNypa.UploadNYPAMeterBilling.UtilityCompanySeqid = Billing.MeterBilling.AccountUtilityCompanySeqid AND \r\n\t\tNypa.UploadNYPAMeterBilling.RevisedBillingPeriod = Billing.MeterBilling.BillingPeriod AND \r\n\t\tNypa.UploadNYPAMeterBilling.RevisedBillingPeriod = Billing.MeterBilling.BillingPeriodRevision\r\n\tWHERE \r\n\t\t(Nypa.UploadNYPAMeterBilling.RevisedBillingPeriod <> Nypa.UploadNYPAMeterBilling.BillingPeriod) \r\n\r\n\tSET @CurrentPeriodNumberOfEstimatedReadingsCount = @@rowcount\r\n\tPRINT '@CurrentPeriodNumberOfEstimatedReadingsCount: '+str(@CurrentPeriodNumberOfEstimatedReadingsCount)\r\n\r\n\tUPDATE Nypa.UploadNYPAMeterBilling\r\n\tSET \r\n\t\tEstimatedReading = Nypa.UploadNYPAMeterBilling.ESTOrACT,\r\n\t\tCurrentPeriodNumberOfEstimatedReadings = dbo.CalcEstimatedReadings(Nypa.UploadNYPAMeterBilling.ESTOrACT, Billing.MeterBilling.ConsecutivePeriodsEstimatedReading), \r\n\t\tMeterBillingAdjustmentTypeElectric = dbo.DetermineMeterBillingAdjustmentType(Nypa.UploadNYPAMeterBilling.RecordTypeConsumption, \r\n\t\tNypa.UploadNYPAMeterBilling.RecordTypeDemand), AuthenticatedUserID = 1, LastUpdate = GETDATE()\r\n\tFROM \r\n\t\tBilling.ApplicationTimeFrame INNER JOIN\r\n\t\tNypa.UploadNYPAMeterBilling ON Billing.ApplicationTimeFrame.BillingPeriod = Nypa.UploadNYPAMeterBilling.RevisedBillingPeriod INNER JOIN\r\n\t\tBilling.MeterBilling ON Nypa.UploadNYPAMeterBilling.CurrentAccountNumber = Billing.MeterBilling.OriginalAccountNumber AND \r\n\t\tNypa.UploadNYPAMeterBilling.CurrentMeter = Billing.MeterBilling.OriginalMeterNumber\r\n\tWHERE \r\n\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y') AND \r\n\t\tBilling.MeterBilling.BillingPeriodRevision= dbo.[CreatePreviousPeriod](Billing.ApplicationTimeFrame.BillingPeriod, 'M')\r\n\r\n\tSET @EstimatedReadingCount = @@rowcount\r\n\tPRINT '@EstimatedReadingCount: '+str(@EstimatedReadingCount)\r\n\r\n\tUPDATE\tNypa.UploadNYPAMeterBilling\r\n\tSET \r\n\t\tMeterStatus ='BA', \r\n\t\tMeterPreviousStatus ='NB', \r\n\t\tMeterStatusCodePeriod = Nypa.UploadNYPAMeterBilling.BillingPeriod,\r\n\t\tEstimatedReading = case when Nypa.UploadNYPAMeterBilling.ESTOrACT = 'EST' then 'EST' else 'ACT' end,\r\n\t\tCurrentPeriodNumberOfEstimatedReadings = case when Nypa.UploadNYPAMeterBilling.ESTOrACT = 'EST' then 1 else 0 end\r\n\tFROM \r\n\t\tBilling.MeterBillingElectric INNER JOIN\r\n\t\tBilling.MeterBilling ON Billing.MeterBillingElectric.MeterBillingRowId = Billing.MeterBilling.MeterBillingSeqid RIGHT JOIN\r\n\t\tNypa.UploadNYPAMeterBilling INNER JOIN\r\n\t\tBilling.AccountExchangeMeterTrack ON \r\n\t\tNypa.UploadNYPAMeterBilling.UtilityCompanySeqid = Billing.AccountExchangeMeterTrack.UtilityCompanySeqid AND \r\n\t\tNypa.UploadNYPAMeterBilling.CurrentAccountNumber = Billing.AccountExchangeMeterTrack.OriginalAccountNumber AND \r\n\t\tNypa.UploadNYPAMeterBilling.CurrentMeter = Billing.AccountExchangeMeterTrack.OriginalMeterNumber INNER JOIN\r\n\t\tBilling.Account ON Billing.AccountExchangeMeterTrack.OriginalAccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n\t\tBilling.Meter ON Billing.AccountExchangeMeterTrack.OriginalMeterSeqid = Billing.Meter.MeterSeqid ON \r\n\t\tBilling.MeterBilling.BillingPeriodRevision = Nypa.UploadNYPAMeterBilling.RevisedBillingPeriod AND \r\n\t\tBilling.MeterBilling.BillingPeriod = Nypa.UploadNYPAMeterBilling.RevisedBillingPeriod AND \r\n\t\tBilling.MeterBilling.AccountExchangeMeterTrackSeqid = Billing.AccountExchangeMeterTrack.AccountExchangeMeterTrackSeqid\r\n\tWHERE \r\n\t\t(Nypa.UploadNYPAMeterBilling.MeterBillingSeqid IS NULL) AND \r\n\t\t(Nypa.UploadNYPAMeterBilling.BillingPeriod <> Nypa.UploadNYPAMeterBilling.RevisedBillingPeriod)\r\n\t\r\n\tSET @BackBilledMeterBillingCount = @@rowcount;\r\n\tPRINT '@BackBilledMeterBillingCount: '+str(@BackBilledMeterBillingCount);\r\nEND;"
        }
      ]
    }
  ]
}