{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Billing",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_GetEstimatedActualForMetersExtract",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_GetEstimatedActualForMetersExtract",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to generate a report on estimated actual meter counts for different utility providers and meter types. It retrieves data for the current and previous billing periods, calculates percentages of meter counts relative to total counts, and outputs a comparison between the two periods. The procedure uses a temporary table to pivot data from the "
        },
        {
          "type": "text",
          "text": "Billing.EstimatedActualReadingCounts",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table, allowing for a structured comparison of meter counts across different categories."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple SQL operations, including data retrieval, pivoting, and calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses temporary tables and joins to organize and compare data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes conditional logic for percentage calculations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates based on the data available in the "
        },
        {
          "type": "text",
          "text": "Billing.EstimatedActualReadingCounts",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table and the calculated billing periods."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Set Up Environment",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting "
                },
                {
                  "type": "text",
                  "text": "NOCOUNT ON",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to prevent the message that shows the number of rows affected by SQL statements. It also sets the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to avoid locking issues and allow dirty reads."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Billing Periods",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It retrieves the latest billing period from the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.EstimatedActualReadingCounts",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It calculates the previous billing period using a user-defined function "
                        },
                        {
                          "type": "text",
                          "text": "dbo.CalculatePreviousBillingPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Preparation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "A temporary table "
                        },
                        {
                          "type": "text",
                          "text": "@tmpEstAct",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is created to store pivoted data for the current and previous billing periods."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Data is inserted into this table by pivoting the "
                        },
                        {
                          "type": "text",
                          "text": "DataCount",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " values for different meter types and providers."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval and Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure selects data from the temporary table for the current billing period and calculates the percentage of each meter type relative to the total for that type."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It performs a similar operation for the previous billing period and joins the results to provide a comparative view."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The final SELECT statement outputs the billing period, reading type, meter counts, and their respective percentages for both the current and previous periods."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can improve performance by reducing locking overhead but may lead to reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Table Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a temporary table can be efficient for organizing and processing data but may consume additional memory and I/O resources."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Pivot Operation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Pivoting can be computationally expensive, especially with large datasets, and may impact performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dirty Reads",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " isolation level allows for dirty reads, which can lead to inconsistencies if the underlying data is being modified concurrently."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Dependency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on the "
                },
                {
                  "type": "text",
                  "text": "dbo.CalculatePreviousBillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " function, which must be correctly implemented and available."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the "
                },
                {
                  "type": "text",
                  "text": "Billing.EstimatedActualReadingCounts",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table contains accurate and complete data for the billing periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of data grows, the performance of the pivot operation and temporary table usage may degrade, requiring optimization or indexing strategies."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Billing].[usp_GetEstimatedActualForMetersExtract]\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @PublishedBillingPeriod AS VARCHAR(6), @PreviousBillingPeriod AS VARCHAR(6);\r\n\r\n\tSELECT @PublishedBillingPeriod = MAX(BillingPeriod) FROM Billing.EstimatedActualReadingCounts;\r\n\tSELECT @PreviousBillingPeriod = dbo.CalculatePreviousBillingPeriod(@PublishedBillingPeriod, 'M');\r\n\t\r\n\tDECLARE @tmpEstAct TABLE\r\n\t\t([BillingPeriod] VARCHAR(6) NOT NULL,\r\n\t\t[Reading] VARCHAR(20) NULL,\r\n\t\t[NYPA Meters] INT NULL,\r\n\t\t[Coned Meters] INT NULL,\r\n\t\t[National Grid West Meters] INT NULL,\r\n\t\t[Meters from Other] VARCHAR(MAX) NULL,\r\n\t\t[ELE Meters] INT NULL,\r\n\t\t[GAS Meters] INT NULL,\r\n\t\t[Steam Meters] INT NULL,\r\n\t\t[Meters from Other Types] VARCHAR(MAX) NULL);\r\n\r\n\t-- Report for Estimated Actual Meter Count\r\n\tINSERT INTO @tmpEstAct\r\n\t\t(BillingPeriod,\r\n\t    Reading,\r\n\t    [NYPA Meters],\r\n\t    [Coned Meters],\r\n\t    [National Grid West Meters],\r\n\t    [Meters from Other],\r\n\t    [ELE Meters],\r\n\t    [GAS Meters],\r\n\t    [Steam Meters],\r\n\t    [Meters from Other Types])\r\n\tSELECT pt_met.BillingPeriod\r\n\t\t,pt_met.Reading\r\n\t\t,pt_met.[NYPA Meters]\r\n\t\t,pt_met.[Coned Meters]\r\n\t\t,pt_met.[National Grid West Meters]\r\n\t\t,ISNULL(pt_met.[Meters from Other],0) AS [Meters from Other]\r\n\t\t,pt_met.[ELE Meters]\r\n\t\t,pt_met.[GAS Meters]\r\n\t\t,pt_met.[Steam Meters]\r\n\t\t,ISNULL(pt_met.[Meters from Other Types],0) AS [Meters from Other Types]\r\n\tFROM (SELECT ea.BillingPeriod\r\n\t\t\t,ea.DataType\r\n\t\t\t,ea.Reading\r\n\t\t\t,ea.Header\r\n\t\t\t,ea.DataCount\r\n\t\t\t,ea.DateAdded\r\n\t\tFROM Billing.EstimatedActualReadingCounts AS ea \r\n\t\tWHERE ea.DataType='Meters' AND ea.BillingPeriod IN (@PublishedBillingPeriod, @PreviousBillingPeriod)) AS t \r\n\t\tPIVOT(SUM(DataCount) FOR Header IN ([NYPA Meters]\r\n\t\t\t,[Coned Meters]\r\n\t\t\t,[National Grid West Meters]\r\n\t\t\t,[Meters from Other]\r\n\t\t\t,[ELE Meters]\r\n\t\t\t,[GAS Meters]\r\n\t\t\t,[Steam Meters]\r\n\t\t\t,[Meters from Other Types])) AS pt_met;\r\n\r\n\tSELECT DISTINCT curr.BillingPeriod\r\n\t\t,curr.Reading\r\n\t\t,curr.[NYPA Meters]\r\n\t\t,CASE WHEN curr.[NYPA Meters Total] = 0 THEN 0 ELSE ROUND( 100 * CAST(curr.[NYPA Meters] AS DECIMAL(18, 2)) / CAST(curr.[NYPA Meters Total] AS DECIMAL(18, 2)), 0) END [NYPA Meters %]\r\n\t\t,prev.[Previous Month NYPA Meters]\r\n\t\t,CASE WHEN prev.[Previous Month NYPA Meters Total] = 0 THEN 0 ELSE  ROUND( 100 * CAST(prev.[Previous Month NYPA Meters] AS DECIMAL(18, 2)) / CAST(prev.[Previous Month NYPA Meters Total] AS DECIMAL(18, 2)), 0) END [Previous Month NYPA Meters %]\r\n\t\t,curr.[Coned Meters]\r\n\t\t,CASE WHEN curr.[Coned Meters Total] = 0 THEN 0 ELSE  ROUND( 100 * CAST(curr.[Coned Meters] AS DECIMAL(18, 2)) / CAST(curr.[Coned Meters Total] AS DECIMAL(18, 2)), 0) END [Coned Meters %]\r\n\t\t,prev.[Previous Month Coned Meters]\r\n\t\t,CASE WHEN prev.[Previous Month Coned Meters Total] = 0 THEN 0 ELSE  ROUND( 100 * CAST(prev.[Previous Month Coned Meters] AS DECIMAL(18, 2)) / CAST(prev.[Previous Month Coned Meters Total] AS DECIMAL(18, 2)), 0) END [Previous Month Coned Meters %]\r\n\t\t,curr.[National Grid West Meters]\r\n\t\t,CASE WHEN curr.[National Grid West Meters Total] = 0 THEN 0 ELSE  ROUND( 100 * CAST(curr.[National Grid West Meters] AS DECIMAL(18, 2)) / CAST(curr.[National Grid West Meters Total] AS DECIMAL(18, 2)), 0) END [National Grid West Meters %]\r\n\t\t,curr.[Meters from Other] AS [Other Meters]\r\n\t\t,CASE WHEN curr.[Meters from Other Total] = 0 THEN 0 ELSE  ROUND( 100 * CAST(curr.[Meters from Other] AS DECIMAL(18, 2)) / CAST(curr.[Meters from Other Total] AS DECIMAL(18, 2)), 0) END [Other Meters %]\r\n\t\t,curr.[ELE Meters]\r\n\t\t,CASE WHEN curr.[ELE Meters Total] = 0 THEN 0 ELSE  ROUND( 100 * CAST(curr.[ELE Meters] AS DECIMAL(18, 2)) / CAST(curr.[ELE Meters Total] AS DECIMAL(18, 2)), 0) END [ELE Meters %]\r\n\t\t,curr.[GAS Meters]\r\n\t\t,CASE WHEN curr.[GAS Meters Total] = 0 THEN 0 ELSE  ROUND( 100 * CAST(curr.[GAS Meters] AS DECIMAL(18, 2)) / CAST(curr.[GAS Meters Total] AS DECIMAL(18, 2)), 0) END [GAS Meters %]\r\n\t\t,curr.[Steam Meters]\r\n\t\t,CASE WHEN curr.[Steam Meters Total] = 0 THEN 0 ELSE  ROUND( 100 * CAST(curr.[Steam Meters] AS DECIMAL(18, 2)) / CAST(curr.[Steam Meters Total] AS DECIMAL(18, 2)), 0) END [Steam Meters %]\r\n\t\t,curr.[Meters from Other Types]\r\n\t\t,CASE WHEN curr.[Meters from Other Types Total] = 0 THEN 0 ELSE  ROUND( 100 * CAST(curr.[Meters from Other Types] AS DECIMAL(18, 2)) / CAST(curr.[Meters from Other Types Total] AS DECIMAL(18, 2)), 0) END [Meters from Other Types %]\r\n\tFROM (SELECT tea.BillingPeriod\r\n\t\t\t,tea.Reading\r\n\t\t\t,tea.[NYPA Meters]\r\n\t\t\t,tea.[Coned Meters]\r\n\t\t\t,tea.[National Grid West Meters]\r\n\t\t\t,tea.[Meters from Other]\r\n\t\t\t,tea.[ELE Meters]\r\n\t\t\t,tea.[GAS Meters]\r\n\t\t\t,tea.[Steam Meters]\r\n\t\t\t,tea.[Meters from Other Types]\r\n\t\t\t,teb.[NYPA Meters] AS [NYPA Meters Total]\r\n\t\t\t,teb.[Coned Meters] AS [Coned Meters Total]\r\n\t\t\t,teb.[National Grid West Meters] AS [National Grid West Meters Total]\r\n\t\t\t,teb.[Meters from Other] AS [Meters from Other Total]\r\n\t\t\t,teb.[ELE Meters] AS [ELE Meters Total]\r\n\t\t\t,teb.[GAS Meters] AS [GAS Meters Total]\r\n\t\t\t,teb.[Steam Meters] AS [Steam Meters Total]\r\n\t\t\t,teb.[Meters from Other Types] AS [Meters from Other Types Total]\r\n\t\tFROM @tmpEstAct AS tea\r\n\t\t\tINNER JOIN @tmpEstAct AS teb ON teb.BillingPeriod = tea.BillingPeriod AND teb.Reading ='Billed'\r\n\t\tWHERE tea.BillingPeriod = @PublishedBillingPeriod) AS curr\r\n\t\tINNER JOIN(SELECT tea.BillingPeriod\r\n\t\t\t\t,tea.Reading\r\n\t\t\t\t,tea.[NYPA Meters] AS [Previous Month NYPA Meters]\r\n\t\t\t\t,tea.[Coned Meters] AS [Previous Month Coned Meters]\r\n\t\t\t\t,teb.[NYPA Meters] AS [Previous Month NYPA Meters Total]\r\n\t\t\t\t,teb.[Coned Meters] AS [Previous Month Coned Meters Total]\r\n\t\t\tFROM @tmpEstAct AS tea\r\n\t\t\t\tINNER JOIN @tmpEstAct AS teb ON teb.BillingPeriod = tea.BillingPeriod AND teb.Reading ='Billed'\r\n\t\t\tWHERE tea.BillingPeriod = @PreviousBillingPeriod) AS prev ON prev.Reading = curr.Reading;\r\nEND;"
        }
      ]
    }
  ]
}