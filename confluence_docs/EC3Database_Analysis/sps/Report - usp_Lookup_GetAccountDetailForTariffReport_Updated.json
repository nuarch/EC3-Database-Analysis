{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Lookup_GetAccountDetailForTariffReport_Updated",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Lookup_GetAccountDetailForTariffReport_Updated",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve detailed account information for generating a tariff report. It takes into account the fiscal year, account number, email address, and user type to filter and compile data from various tables related to billing, utility companies, and facilities. The procedure logs its usage and returns a dataset that includes tariff rates, billing amounts, and account details."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple steps, including setting transaction isolation levels, conditional logic based on user type, dynamic SQL execution, and complex joins across several tables. While it is not overly complex, the integration of various components and the use of temporary tables elevate its complexity to a medium level."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BeginningFiscalYear AS VARCHAR(4)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Specifies the starting fiscal year for the report."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@OriginalAccountNumber AS acctnum = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional parameter to filter results by a specific account number."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Used to identify the user and filter data based on agency access."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsAgencyUser AS BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether the user is an agency user, affecting the selection of the billing period."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure sets the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to allow dirty reads, which can improve performance by avoiding locks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Billing Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Depending on whether the user is an agency user, it selects the current or maximum published billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Log Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Calls an audit procedure to log the usage of this report, capturing details like the report name, user email, and billing periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Select Accounts",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Populates a temporary table "
                },
                {
                  "type": "text",
                  "text": "@SelectedAccounts",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with account details by joining several tables. It filters accounts based on status and optionally by account number."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Retrieve and Return Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Joins the selected accounts with tariff rate information and raw billing data to compile the final dataset, which includes financial and account details for the specified periods."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can improve performance by reducing locking overhead but at the risk of reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Table Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a temporary table ("
                },
                {
                  "type": "text",
                  "text": "@SelectedAccounts",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") can be efficient for managing intermediate data, but it may consume memory and affect performance if the dataset is large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Filtering",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple joins and filters, which can be resource-intensive. Indexes on the joined columns can help improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The conditional logic for determining the billing period adds complexity but is necessary for accurate data retrieval."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dirty Reads",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " allows for dirty reads, which can lead to inconsistencies if the underlying data is being modified concurrently."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Null Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses "
                },
                {
                  "type": "text",
                  "text": "ISNULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to handle optional parameters, which may not be optimal if the default behavior is not desired."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the dataset grows, the performance of joins and temporary table operations may degrade, requiring optimization or refactoring."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the email address is a valid identifier for agency access, which could be a security risk if not properly validated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions or incomplete transactions in case of failures."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_Lookup_GetAccountDetailForTariffReport_Updated]\n(\r\n\t@BeginningFiscalYear AS VARCHAR(4)\r\n\t,@OriginalAccountNumber AS acctnum = NULL\r\n\t,@EmailAddress AS VARCHAR(75)\r\n\t,@IsAgencyUser AS BIT = 0\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @PublishedBillingPeriod AS VARCHAR(6), @BeginningPeriod AS VARCHAR(6), @spname AS VARCHAR(100) = OBJECT_NAME(@@PROCID);\r\n\r\n\tIF (@IsAgencyUser = 1)\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = PublishedBillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = MAX(PublishedBillingPeriod) FROM Published.MonthlyPublishedSummaryData;\r\n\tEND;\r\n\r\n\tSELECT @BeginningPeriod = dbo.CreateFiscalYearPeriod(@BeginningFiscalYear, 'S');\r\n\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t\t@ReportName = @spname,\r\n\t\t@StoredProcName = @spname,\r\n\t\t@RequestedBy = @EmailAddress,\r\n\t\t@prmPublishedBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmAgency_ies = NULL,\r\n\t\t@prmFacilityNumber_s = NULL,\r\n\t\t@prmStartingBillingPeriod = @BeginningPeriod,\r\n\t\t@prmEndingBillingPeriod = @PublishedBillingPeriod;\r\n\r\n    DECLARE @SelectedAccounts TABLE (AccountSeqID seqid NULL\r\n        ,OriginalAccountNumber acctnum NULL\r\n        ,AgencyDivisionSeqID seqid NULL\r\n        ,AgencyName ldesc NULL\r\n        ,AgencyCodeOEC AgencyCodeOEC NULL\r\n        ,UtilityTariffRateInformationSeqid seqid NULL\r\n        ,UtilityCompanySeqID seqid NULL\r\n        ,UtilityCompanyName ldesc NULL\r\n        ,FacilitySeqId seqid  NULL\r\n        ,OECFacilityNumber OECBuildingNumber NULL\r\n        ,FacilityName SeptsBuildName NULL\r\n        ,FacilityAddress LongAddress NULL\r\n        ,UtilityServiceAddress LongAddress NULL\r\n\t\t,EnergySource seqid NULL\r\n\t\t,UNIQUE NONCLUSTERED (AccountSeqID, OriginalAccountNumber, UtilityTariffRateInformationSeqid, AgencyDivisionSeqID, FacilitySeqId));\r\n\r\n    INSERT INTO @SelectedAccounts\r\n        (AccountSeqID\r\n        ,OriginalAccountNumber\r\n        ,AgencyDivisionSeqID\r\n        ,AgencyName\r\n        ,AgencyCodeOEC\r\n        ,UtilityTariffRateInformationSeqid\r\n        ,UtilityCompanySeqID\r\n        ,UtilityCompanyName\r\n        ,FacilitySeqId\r\n        ,OECFacilityNumber\r\n        ,FacilityName\r\n        ,FacilityAddress\r\n        ,UtilityServiceAddress\r\n\t\t,EnergySource)\r\n    SELECT A.AccountSeqid\r\n        ,A.OriginalAccountNumber\r\n        ,A.AgencyAccount AS AgencyDivisionSeqID\r\n        ,ad.AgencyName\r\n        ,ad.AgencyCodeOEC\r\n        ,A.UtilityTariffRateInformationSeqid\r\n        ,A.UtilityAccountProvider AS UtilityCompanySeqID\r\n        ,uc.[Description] AS UtilityCompanyName\r\n        ,f.FacilitySeqid\r\n        ,f.OecFacilityNumber\r\n        ,f.FacilityName\r\n        ,f.Address1 AS FacilityAddress\r\n        ,A.UtilityServiceAddress\r\n\t\t,A.EnergyAccountDescription AS EnergySource\r\n    FROM Billing.Account AS A\r\n        INNER JOIN dbo.uftn_TableGetActiveAgenciesByEmailAddress(@EmailAddress) AS ad ON A.AgencyAccount = ad.AgencyDivisionSeqID\r\n        INNER JOIN Billing.UtilityCompany AS uc ON A.UtilityAccountProvider = uc.UtilityCompanySeqid\r\n        INNER JOIN Billing.UtilityTariffRateInformation AS uti ON A.UtilityTariffRateInformationSeqid = uti.UtilityTariffRateInformationSeqid\r\n        INNER JOIN Billing.Facility AS f ON A.FacilityAccount = f.FacilitySeqid\r\n    WHERE A.AccountStatus IN ('AC', '46', 'UA') AND A.OriginalAccountNumber LIKE ISNULL(@OriginalAccountNumber, '%');\r\n\r\n\tSELECT T.DeliveryTariffRate\r\n\t\t,sa.OriginalAccountNumber\r\n\t\t,A.RevisedBilledAmount\r\n\t\t,ISNULL(A.RevisedReactivePowerDollars, 0) AS RevisedReactivePowerDollars\r\n\t\t,ISNULL(A.AccountReactivePowerEnergy, 0) AS ReactivePowerKVAR\r\n\t\t,A.RevisedDemandDollar AS DemandUsageDollars\r\n\t\t,CASE WHEN sa.UtilityCompanySeqID = 7 THEN A.RevisedEnergyDollar ELSE A.RevisedBilledAmount END AS EnergyUsageDollars\r\n\t\t,A.AccountDemandUsage\r\n\t\t,A.AccountEnergyUsage\r\n\t\t,A.BillingPeriod\r\n\t\t,sa.AgencyDivisionSeqID\r\n\t\t,sa.AgencyCodeOEC\r\n\t\t,sa.AgencyName\r\n\t\t,sa.UtilityCompanyName AS UtilityCompany\r\n\t\t,T.EnergyDeliveryType AS EnergyType\r\n\t\t,dbo.CalculateFiscalYear(A.BillingPeriod) AS FiscalYear\r\n\t\t,LEFT(DATENAME(MONTH, DATEADD(MONTH, CAST(SUBSTRING(A.BillingPeriod, 5, 2) AS INT), 0) - 1), 3) AS mon\r\n\t\t,A.EnergyUnit\r\n\t\t,T.[Description] AS tariffRateDescription\r\n\t\t,sa.AccountSeqID\r\n\t\t,sa.FacilitySeqId\r\n\t\t,sa.OECFacilityNumber\r\n\t\t,sa.FacilityName\r\n\t\t,sa.FacilityAddress\r\n\t\t,sa.UtilityServiceAddress\r\n    FROM @SelectedAccounts AS sa\r\n        INNER JOIN Billing.UtilityTariffRateInformation AS T ON sa.UtilityTariffRateInformationSeqid = T.UtilityTariffRateInformationSeqid\r\n\t\tINNER JOIN Billing.EnergyDeliveryType AS EDT ON EDT.EnergyDeliveryType = sa.EnergySource\r\n        LEFT JOIN Published.TemporalAccountLevelRawDataForCurrentPeriod AS A ON A.AccountSeqid = sa.AccountSeqID\r\n    WHERE A.BillingPeriod >= @BeginningPeriod\r\n        AND A.EffectiveStartPeriod <= @PublishedBillingPeriod\r\n\t\tAND A.EffectiveEndPeriod > @PublishedBillingPeriod;\r\nEND;"
        }
      ]
    }
  ]
}