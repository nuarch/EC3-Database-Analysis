{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "GreenHouseGas",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CityHallGreenHouseGasRequestedExtract",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CityHallGreenHouseGasRequestedExtract",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to extract and transform data related to greenhouse gas emissions from a temporal table and store it in a scratch table for further analysis. It processes data from a specified billing period range and pivots the data to display energy usage across different billing periods."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves several SQL operations, including conditional logic, data transformation, aggregation, and dynamic SQL for pivoting. While the individual components are not overly complex, the combination of these elements and the use of dynamic SQL increases the complexity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period for which the data is considered current. It is used to filter records based on their effective periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StartingBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Marks the beginning of the billing period range for which data is extracted."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EndingBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Marks the end of the billing period range for which data is extracted."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Check and Drop Existing Table",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure first checks if the "
                },
                {
                  "type": "text",
                  "text": "Scratch.GHG",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table exists and drops it if it does. This ensures that the table is recreated fresh for each execution."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Selection and Transformation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure selects data from "
                        },
                        {
                          "type": "text",
                          "text": "Published.TemporalAccountLevelRawDataForCurrentPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " joined with "
                        },
                        {
                          "type": "text",
                          "text": "Billing.UtilityTariffRateInformation",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It filters records based on the effective period and the specified billing period range."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It transforms data by calculating the sector, formatting addresses, and handling missing values with defaults."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The data is aggregated by summing "
                        },
                        {
                          "type": "text",
                          "text": "AccountEnergyUsage",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and grouped by various attributes."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic SQL for Pivoting",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure constructs a dynamic SQL query to pivot the data on "
                        },
                        {
                          "type": "text",
                          "text": "BillingPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", creating columns for each billing period within the specified range."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It uses the "
                        },
                        {
                          "type": "text",
                          "text": "STUFF",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " function to build a comma-separated list of billing periods for the pivot operation."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The pivoted data is then executed and returned."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Recreation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Dropping and recreating the "
                },
                {
                  "type": "text",
                  "text": "Scratch.GHG",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table can be resource-intensive, especially if the table is large or frequently accessed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic SQL",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of dynamic SQL for pivoting can lead to execution plan caching issues, potentially affecting performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Aggregation and Grouping",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The aggregation and grouping operations can be computationally expensive, particularly if the dataset is large."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Dropping and recreating the "
                },
                {
                  "type": "text",
                  "text": "Scratch.GHG",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table can lead to concurrency issues if multiple processes attempt to access or modify the table simultaneously."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "SQL Injection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Although the dynamic SQL is constructed internally, care should be taken to ensure that no user input is directly concatenated into the SQL string to prevent SQL injection vulnerabilities."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the input parameters are valid and that the data in the source tables is consistent. Invalid or unexpected data could lead to incorrect results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of data grows, the performance of the procedure may degrade, particularly due to the aggregation and pivot operations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n-- AUTHOR:\t\tPeter Heller\r\n--\r\n-- Date\t\t\tTech\tDescription of Change\r\n-- XX/XX/20XX\tPH\t\tFirst Version\r\n-- 03/17/2016\tZD\tUpdate: Changed to use temporal tables\r\n--***************************************************************************************\r\nCREATE PROCEDURE [GreenHouseGas].[usp_CityHallGreenHouseGasRequestedExtract]\r\n(\r\n\t@PublishedBillingPeriod AS VARCHAR(6)\r\n    ,@StartingBillingPeriod AS VARCHAR(6)\r\n    ,@EndingBillingPeriod AS VARCHAR(6)\r\n)\r\nAS\r\nBEGIN\r\n\tIF EXISTS(SELECT * FROM INFORMATION_SCHEMA.tables WHERE TABLE_NAME = 'GHG' AND TABLE_SCHEMA = 'Scratch')\r\n\tBEGIN\r\n\t\tDROP TABLE Scratch.GHG;\r\n\tEND;\r\n\r\n    SELECT ACP.Sector\r\n        ,ACP.Address1\r\n        ,CHOOSE(Boro, 'Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island', 'Upstate NY', 'Unknown') AS City\r\n        ,CONCAT('\"', '00000', '\"') AS ZipCode\r\n        ,ACP.OecFacilityNumber\r\n        ,ACP.Borough\r\n        ,ACP.[Block]\r\n        ,ACP.LotNumber\r\n        ,ACP.UtilityCompany\r\n        ,ACP.EnergyType AS [Service]\r\n        ,ACP.AgencyCodeOEC\r\n        ,ACP.UtilityCompany AS [Utility (Agency)]\r\n        ,ACP.EnergyType AS EmmissionsSource\r\n        ,' ' AS EmmissionsSubSource\r\n        ,ACP.EnergyUnit AS Unit\r\n        ,ACP.BillingPeriod\r\n        ,CAST(SUM(ACP.AccountEnergyUsage) AS INT) AS AccountEnergyUsage\r\n        INTO Scratch.GHG\r\n    FROM (SELECT @PublishedBillingPeriod AS PublishedBillingPeriod \r\n\t\t\t,COALESCE(CONCAT('\"', ALRD.Address1, '\"'), ' ') AS Address1\r\n\t\t\t,ALRD.OecFacilityNumber\r\n\t\t\t,ALRD.AgencyCodeOEC\r\n\t\t\t,ALRD.Borough\r\n\t\t\t,CONCAT('\"', COALESCE(ALRD.Block, '00000'), '\"') AS Block\r\n\t\t\t,CONCAT('\"', COALESCE(ALRD.LotNumber, '0000'), '\"') AS LotNumber\r\n\t\t\t,ALRD.UtilityCompany\r\n\t\t\t,ALRD.EnergyType\r\n\t\t\t,ALRD.EnergyUnit\r\n\t\t\t,ALRD.BillingPeriod\r\n\t\t\t,CAST(CASE WHEN ALRD.Borough IS NULL THEN '7'  WHEN ALRD.Borough >= '1' AND ALRD.Borough <= '7' THEN ALRD.Borough ELSE '7' END AS VARCHAR(1)) AS Boro\r\n\t\t\t,CASE WHEN ALRD.UtilityTariffRateInformationSeqid IN (9, 19, 109, 115) THEN 'Street Lighting' ELSE 'Building' END AS Sector\r\n\t\t\t,CAST(COALESCE(ALRD.AccountEnergyUsage, 0) AS INT) AS AccountEnergyUsage\r\n\t\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS ALRD\r\n\t\t\tINNER JOIN Billing.UtilityTariffRateInformation AS UTRI ON UTRI.UtilityTariffRateInformationSeqid = ALRD.UtilityTariffRateInformationSeqid\r\n\t\tWHERE ALRD.EffectiveStartPeriod <= @PublishedBillingPeriod  AND ALRD.EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\t\tAND @StartingBillingPeriod <= ALRD.BillingPeriod AND ALRD.BillingPeriod <= @EndingBillingPeriod) AS ACP\r\n    GROUP BY ACP.Sector, ACP.Address1, CHOOSE(ACP.Boro, 'Manhattan', 'Bronx', 'Brooklyn', 'Queens', 'Staten Island', 'Upstate NY', 'Unknown')\r\n        ,ACP.OecFacilityNumber, ACP.Borough, ACP.[Block], ACP.LotNumber, ACP.UtilityCompany, ACP.EnergyType, ACP.AgencyCodeOEC\r\n\t\t,ACP.EnergyType, ACP.EnergyUnit, ACP.BillingPeriod\r\n\tORDER BY ACP.Address1, ACP.BillingPeriod;\r\n\r\n\tDECLARE @cols AS NVARCHAR(MAX), @query AS NVARCHAR(MAX);\r\n\r\n    SELECT  @cols = stuff((SELECT   ',' + QUOTENAME(talrdfcp.BillingPeriod)\r\n\t\tFROM Published.TemporalAccountLevelRawDataForCurrentPeriod AS talrdfcp\r\n        WHERE talrdfcp.EffectiveStartPeriod <= @PublishedBillingPeriod AND talrdfcp.EffectiveEndPeriod > @PublishedBillingPeriod\r\n            AND @StartingBillingPeriod <= talrdfcp.BillingPeriod AND talrdfcp.BillingPeriod <= @EndingBillingPeriod\r\n        GROUP BY talrdfcp.BillingPeriod\r\n        ORDER BY talrdfcp.BillingPeriod\r\n        FOR XML PATH(''), TYPE).value('.', 'NVARCHAR(MAX)'), 1, 1, '');\r\n\r\n    SET @query = 'SELECT *, ' + @cols + ' FROM (SELECT * FROM Scratch.GHG) AS SourceTable pivot(SUM(AccountEnergyUsage) for BillingPeriod IN (' + @cols + ')) AS pivotTable';\r\n\r\n    EXECUTE(@query);\r\nEND;"
        }
      ]
    }
  ]
}