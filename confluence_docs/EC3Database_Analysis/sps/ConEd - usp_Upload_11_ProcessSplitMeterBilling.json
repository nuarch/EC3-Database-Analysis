{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_11_ProcessSplitMeterBilling",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_11_ProcessSplitMeterBilling",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and merge split meter billing records into a summary table, "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonMeterSummary",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ". It uses a cursor to iterate over temporary split transactions and updates the summary table with merged data. The procedure handles records that span multiple billing periods and ensures that the data is consolidated correctly. It also manages the deletion of reset meter records once they are merged."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple SQL operations, including updates, inserts, and deletes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a cursor to iterate over records, which adds complexity in terms of control flow."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves joining multiple tables and views to fetch and update data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The logic for merging and updating records is intricate, involving conditional checks and updates."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates on predefined tables and views within the "
        },
        {
          "type": "text",
          "text": "ConEd",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring variables to hold sequence IDs and other necessary data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Billing Period Revision",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It updates the "
                },
                {
                  "type": "text",
                  "text": "BillingPeriodRevision",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " in "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonMeterSummary",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " using data from a view that determines overrides based on date criteria."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Prepare Temporary Table",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure truncates "
                },
                {
                  "type": "text",
                  "text": "ConEd.TempSplitTransactions",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to prepare it for new data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert Split Transactions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It inserts records into "
                },
                {
                  "type": "text",
                  "text": "ConEd.TempSplitTransactions",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " from "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonMeterSummary",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " where certain conditions (e.g., "
                },
                {
                  "type": "text",
                  "text": "MeterFromReading = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "BillingDays < 30",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") are met."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "A cursor "
                        },
                        {
                          "type": "text",
                          "text": "SplitBillingAndMeterResetsCursor",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is declared and opened to iterate over the temporary split transactions."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each record, it updates the "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonMeterSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table with merged data from a view."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It checks if the update was successful and deletes the reset meter record if it was merged."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After processing all records, it updates any remaining records in "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonMeterSummary",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " where "
                },
                {
                  "type": "text",
                  "text": "NumberOfBillingPeriods",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is zero, setting it to one."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance bottlenecks, especially if the dataset is large. Cursors process rows one at a time, which is less efficient than set-based operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Truncation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating "
                },
                {
                  "type": "text",
                  "text": "ConEd.TempSplitTransactions",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is efficient for clearing the table but assumes that no concurrent operations require the data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved, especially those frequently joined or updated, are properly indexed to improve query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Consider processing records in batches if the dataset is large to reduce transaction log growth and improve performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not handle concurrency explicitly. If multiple instances run simultaneously, it could lead to data inconsistencies or deadlocks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": There is minimal error handling. If an update fails, it only prints a message. Consider implementing robust error handling and logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in the views and tables is accurate and consistent. Any discrepancies could lead to incorrect merges."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of data grows, the use of cursors and lack of batch processing could impact scalability and performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses hardcoded values (e.g., "
                },
                {
                  "type": "text",
                  "text": "BillingDays < 30",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "), which may need adjustments based on business rules or requirements changes."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_11_ProcessSplitMeterBilling]\r\nAS \r\n    BEGIN\r\n\t\r\n\t\r\n\t /*\r\n\tprocess split records and put them into ConEd.UploadConEdisonMeterSummary. This is achieved by \r\n\tusing cursor on temporary staging table called UploadConEdisonMeterTempSummarySpanned \r\n\t*/\r\n\r\n\r\n        BEGIN\r\n            DECLARE @TempSplitTransactionsSeqid INT\r\n            DECLARE @UploadConEdisonMeterSummarySeqid INT\r\n            DECLARE @Notes dbo.notes\r\n            DECLARE @Success INT\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n-- Find UploadConEdAccountSummary reset rows that would override UploadConEdMeterSummary\r\n-- billing revision period.  The criteria is the UploadConEdMeterSummary.ToDate is greater\r\n-- than the UploadConEdAccountSummary.FromDate and is less than and equal to the UploadConEdAccountSummary.ToDate\r\n--\r\n--\r\n            UPDATE  ConEd.UploadConEdisonMeterSummary\r\n            SET     BillingPeriodRevision = ConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod.AccountBillingPeriodRevision\r\n            FROM ConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod\r\n                    INNER JOIN ConEd.UploadConEdisonMeterSummary ON ConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod.UploadConEdisonMeterSummarySeqid = ConEd.UploadConEdisonMeterSummary.UploadConEdisonMeterSummarySeqid                      \r\n-- \r\n-- Once the override is completed.  Find all of the split transactions that need to be merged with the reset\r\n-- row.  Assume that the number of billing days are less than 30.\r\n--\r\n            TRUNCATE TABLE ConEd.TempSplitTransactions\r\n\r\n            INSERT  INTO ConEd.TempSplitTransactions\r\n                    ( UploadConEdisonMeterSummarySeqid ,\r\n                      AccountUtilityCompanySeqid ,\r\n                      AccountBilled ,\r\n                      MeterBilled ,\r\n                      AccountExchangeMeterTrackSeqid ,\r\n                      AdjustedMeterBilling ,\r\n                      AdjustedMeterBillingElectric ,\r\n                      OriginalAccountNumber ,\r\n                      OriginalMeterNumber ,\r\n                      BillingPeriod ,\r\n                      BillingPeriodRevision ,\r\n                      FirstCancelPeriod ,\r\n                      NumberOfTransactions ,\r\n                      NumberOfRebillTransactions ,\r\n                      NumberOfCancelTransactions ,\r\n                      BillingAction ,\r\n                      PriorRevisedBilledCCF ,\r\n                      RevisedBilledCCF ,\r\n                      CanceledBilledCCF ,\r\n                      PriorRevisedBilledTherms ,\r\n                      RevisedBilledTherms ,\r\n                      CanceledBilledTherms ,\r\n                      InitialCancelFromDate ,\r\n                      CurrentBillingToDate ,\r\n                      GasRateCode ,\r\n                      FromDate ,\r\n                      ToDate ,\r\n                      MeterFromReading ,\r\n                      MeterToReading ,\r\n                      Ccf ,\r\n                      Therms ,\r\n                      ThermsFactor ,\r\n                      MeterConstant ,\r\n                      TotalBillingDaysRebilled ,\r\n                      NumberOfBillingPeriods ,\r\n                      AverageRebillCostOfGasCharge ,\r\n                      AverageRebillThermsFactor ,\r\n                      BillingDays ,\r\n                      BillingDate ,\r\n                      ReadingCode ,\r\n                      NumberOfDials ,\r\n                      MeterType ,\r\n                      ProcessedInTheCurrentPeriod ,\r\n                      ProcessEffectiveDate ,\r\n                      CancelReadingCode ,\r\n                      CancelFromDate ,\r\n                      CancelToDate ,\r\n                      CancelMeterFromReading ,\r\n                      CancelMeterToReading ,\r\n                      CancelCcf ,\r\n                      CancelTherms ,\r\n                      CancelThermsFactor ,\r\n                      CancelMeterConstant ,\r\n                      InitialPostingDate ,\r\n                      DerivedFromSpannedBill ,\r\n                      SpannedBillingPeriodRevision ,\r\n                      SpannedFirstCanceledBillingPeriod ,\r\n                      SpannedCCF ,\r\n                      SpannedThermFactor ,\r\n                      SpannedTherm ,\r\n                      SpannedMonthlyPercentage ,\r\n                      SpannedTotalPercentage ,\r\n                      EstimatedOrActualBilling ,\r\n                      FacilityName ,\r\n                      ServiceAddress ,\r\n                      AuthenticatedUserID ,\r\n                      Notes ,\r\n                      DateAdded ,\r\n                      LastUpdate\r\n                    )\r\n                    SELECT  UploadConEdisonMeterSummarySeqid ,\r\n                            AccountUtilityCompanySeqid ,\r\n                            AccountBilled ,\r\n                            MeterBilled ,\r\n                            AccountExchangeMeterTrackSeqid ,\r\n                            AdjustedMeterBilling ,\r\n                            AdjustedMeterBillingElectric ,\r\n                            OriginalAccountNumber ,\r\n                            OriginalMeterNumber ,\r\n                            BillingPeriod ,\r\n                            BillingPeriodRevision ,\r\n                            FirstCancelPeriod ,\r\n                            NumberOfTransactions ,\r\n                            NumberOfRebillTransactions ,\r\n                            NumberOfCancelTransactions ,\r\n                            BillingAction ,\r\n                            PriorRevisedBilledCCF ,\r\n                            RevisedBilledCCF ,\r\n                            CanceledBilledCCF ,\r\n                            PriorRevisedBilledTherms ,\r\n                            RevisedBilledTherms ,\r\n                            CanceledBilledTherms ,\r\n                            InitialCancelFromDate ,\r\n                            CurrentBillingToDate ,\r\n                            GasRateCode ,\r\n                            FromDate ,\r\n                            ToDate ,\r\n                            MeterFromReading ,\r\n                            MeterToReading ,\r\n                            Ccf ,\r\n                            Therms ,\r\n                            ThermsFactor ,\r\n                            MeterConstant ,\r\n                            TotalBillingDaysRebilled ,\r\n                            NumberOfBillingPeriods ,\r\n                            AverageRebillCostOfGasCharge ,\r\n                            AverageRebillThermsFactor ,\r\n                            BillingDays ,\r\n                            BillingDate ,\r\n                            ReadingCode ,\r\n                            NumberOfDials ,\r\n                            MeterType ,\r\n                            ProcessedInTheCurrentPeriod ,\r\n                            ProcessEffectiveDate ,\r\n                            CancelReadingCode ,\r\n                            CancelFromDate ,\r\n                            CancelToDate ,\r\n                            CancelMeterFromReading ,\r\n                            CancelMeterToReading ,\r\n                            CancelCcf ,\r\n                            CancelTherms ,\r\n                            CancelThermsFactor ,\r\n                            CancelMeterConstant ,\r\n                            InitialPostingDate ,\r\n                            DerivedFromSpannedBill ,\r\n                            SpannedBillingPeriodRevision ,\r\n                            SpannedFirstCanceledBillingPeriod ,\r\n                            SpannedCCF ,\r\n                            SpannedThermFactor ,\r\n                            SpannedTherm ,\r\n                            SpannedMonthlyPercentage ,\r\n                            SpannedTotalPercentage ,\r\n                            EstimatedOrActualBilling ,\r\n                            FacilityName ,\r\n                            ServiceAddress ,\r\n                            AuthenticatedUserID ,\r\n                            Notes ,\r\n                            DateAdded ,\r\n                            LastUpdate\r\n                    FROM ConEd.UploadConEdisonMeterSummary\r\n                    WHERE   ( MeterFromReading = 0 )\r\n                            AND ( MeterToReading <> 0 )\r\n                            AND BillingDays < 30\r\n                    ORDER BY NumberOfBillingPeriods\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\n--\r\n            DECLARE SplitBillingAndMeterResetsCursor CURSOR\r\n            FOR\r\n                SELECT  TempSplitTransactionsSeqid ,\r\n                        UploadConEdisonMeterSummarySeqid\r\n                FROM ConEd.TempSplitTransactions \r\n--\r\n            OPEN SplitBillingAndMeterResetsCursor;\r\n--\r\n-- @UploadConEdisonMeterSummarySeqid holds the id of the reset meter records which will be deleted once the data is merged\r\n-- and the notes are created\r\n--\r\n            FETCH NEXT FROM SplitBillingAndMeterResetsCursor INTO @TempSplitTransactionsSeqid,\r\n                @UploadConEdisonMeterSummarySeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n\r\n            WHILE @@FETCH_STATUS = 0 \r\n                BEGIN\r\n\t--\r\n\t--\tFetch a split row to process \r\n\t--\r\n\t--\tFind the split row to conterpart by joining the view and split table.\r\n\t--\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo \r\n\t--\t\t\tConEd.TempSplitTransactions \t\r\n\t--\tWHERE (ConEd.UploadConEdisonMeterSummary.MeterFromReading <> '0') updates the \r\n\t--\tthe merged data record with the complete summary totals for the period.\r\n\t--\r\n                    UPDATE  ConEd.UploadConEdisonMeterSummary\r\n                    SET     FromDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationFromDate ,\r\n                            ToDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate ,\r\n                            CurrentBillingToDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate ,\r\n                            MeterFromReading = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterFromReading,\r\n                                                      0) ,\r\n                            MeterToReading = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterToReading,\r\n                                                    0) ,\r\n                            Ccf = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TotalCCF,\r\n                                         0) ,\r\n                            Therms = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TotalTherms,\r\n                                            0) ,\r\n                            ThermsFactor = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.ThermsFactor,\r\n                                                  1.03) ,\r\n                            MeterConstant = ISNULL(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterConstant,\r\n                                                   1) ,\r\n\t\t\t\t\t\t\tNotes = \r\n\t\t\t\t\t\t\tleft(\r\n\t\t\t\t\t\t\t(Common.MeterResetNotes('M',\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationFromDate,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterFromReading,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationToDate,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterToReading,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationCCF,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationThermsFactor,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationTherms,\r\n                                                           ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterConstant)\r\n                            + '--' + Common.MeterResetNotes('R',\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationFromDate,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterFromReading,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterToReading,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationCCF,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationThermsFactor,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationTherms,\r\n                                                            ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterConstant))\r\n\t\t\t\t\t\t\t, 300)\r\n\r\n\r\n                    FROM ConEd.UploadConEdisonMeterSummary\r\n                            INNER JOIN ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo ON ConEd.UploadConEdisonMeterSummary.BillingPeriod = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.BillingPeriod\r\n                                                              AND ConEd.UploadConEdisonMeterSummary.BillingPeriodRevision = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.BillingPeriodRevision\r\n                                                              AND ConEd.UploadConEdisonMeterSummary.OriginalAccountNumber = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.OriginalAccountNumber\r\n                                                              AND ConEd.UploadConEdisonMeterSummary.OriginalMeterNumber = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.OriginalMeterNumber\r\n                    WHERE   ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TempSplitTransactionsSeqid = @TempSplitTransactionsSeqid\r\n                            AND ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.UploadConEdisonMeterSummarySeqid = @UploadConEdisonMeterSummarySeqid\r\n\t--\r\n                    SET @Success = @@rowcount\r\n\t--\r\n\t-- Complete the processing by deleteing the reset meter row from the ConEd.UploadConEdisonMeterSummary table since it was already merged.\r\n\t--\r\n                    IF ( @Success > 0 ) \r\n                        DELETE  FROM ConEd.UploadConEdisonMeterSummary\r\n                        WHERE   ( UploadConEdisonMeterSummarySeqid = @UploadConEdisonMeterSummarySeqid )\r\n                    ELSE \r\n                        PRINT 'Update failed for UploadConEdisonMeterSummarySeqid Seqid'\r\n                            + CAST(@UploadConEdisonMeterSummarySeqid AS VARCHAR(10))\r\n                            + ' - TempSplitTransactionsSeqid'\r\n                            + CAST(@TempSplitTransactionsSeqid AS VARCHAR(10))\r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\n                    FETCH NEXT FROM SplitBillingAndMeterResetsCursor INTO @TempSplitTransactionsSeqid,\r\n                        @UploadConEdisonMeterSummarySeqid\r\n                END\r\n\r\n            CLOSE SplitBillingAndMeterResetsCursor;\r\n            DEALLOCATE SplitBillingAndMeterResetsCursor;\r\n--\r\n-- Remove the splits from the ConEd.UploadConEdisonMeterSummary after the merge\r\n--\r\n            UPDATE  ConEd.UploadConEdisonMeterSummary\r\n            SET     NumberOfBillingPeriods = 1 ,\r\n                    Notes = 'Zero number of billing periods set to one to process as a whole period not a merged split'\r\n            WHERE   ( NumberOfBillingPeriods = 0 )\r\n                    AND ( Ccf <> 0 )\r\n  \r\n        END -- 2 ends  \r\n    \r\n   \r\n\r\n    END"
        }
      ]
    }
  ]
}