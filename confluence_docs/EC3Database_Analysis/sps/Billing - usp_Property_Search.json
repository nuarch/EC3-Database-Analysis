{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Billing",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Property_Search",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Property_Search",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to search for properties within a billing system based on various criteria. It allows for filtering, sorting, and pagination of property records. The procedure retrieves property details such as PropertySeqid, BIN, PropertyName, Address, and AgencyName, and it supports searching through a concatenated text field that includes various property attributes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity is considered medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure involves multiple table joins, both inner and left joins, which require understanding of the database schema."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes dynamic sorting and pagination logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a transaction isolation level of READ UNCOMMITTED, which affects how data consistency is managed."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@SearchText AS VARCHAR(150) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional parameter for filtering properties based on a search string."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PageSize AS INT = 10",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Determines the number of records to return per page. Defaults to 10."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@CurrentPageNumber AS INT = 1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Specifies the current page number for pagination. Defaults to 1."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@SortColumn AS VARCHAR(100) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Specifies the column by which to sort the results. Defaults to NULL, which sorts by PropertyName."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@SortOrder AS VARCHAR(100) = 'ASC'",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Determines the sort order (ascending or descending). Defaults to 'ASC'."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure sets the transaction isolation level to READ UNCOMMITTED, allowing dirty reads, which can improve performance but may lead to reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Record Count Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It calculates the total number of distinct properties that match the search criteria. This count is used for pagination purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Joins multiple tables ("
                        },
                        {
                          "type": "text",
                          "text": "Property",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "MeterAllocation",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "Meter",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "Account",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "AgencyDivision",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "FacilityProperty",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "Facility",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ") to gather comprehensive property information."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Filters active accounts and meters ("
                        },
                        {
                          "type": "text",
                          "text": "A.IsActive = 1 AND M.IsActive = 1",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ")."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Constructs a "
                        },
                        {
                          "type": "text",
                          "text": "SearchText",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " field by concatenating various property attributes, which is used for filtering based on "
                        },
                        {
                          "type": "text",
                          "text": "@SearchText",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Filtering",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Applies the search filter if "
                },
                {
                  "type": "text",
                  "text": "@SearchText",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is provided, using a "
                },
                {
                  "type": "text",
                  "text": "LIKE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " clause to match the "
                },
                {
                  "type": "text",
                  "text": "SearchText",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Sorting and Pagination",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Sorts the results based on the specified "
                        },
                        {
                          "type": "text",
                          "text": "@SortColumn",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "@SortOrder",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Implements pagination using "
                        },
                        {
                          "type": "text",
                          "text": "OFFSET",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "FETCH NEXT",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " clauses, allowing for efficient data retrieval in chunks."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This can improve performance by reducing locking overhead but may lead to reading uncommitted or inconsistent data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic Sorting",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of CASE statements for sorting can be less efficient than direct ORDER BY clauses, especially if indexes are not aligned with the sort columns."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Pagination",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Efficiently implemented using "
                },
                {
                  "type": "text",
                  "text": "OFFSET",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "FETCH NEXT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", but performance may degrade with large datasets if not properly indexed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "SearchText Construction",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The concatenation of multiple fields for search purposes can be computationally expensive, especially if the dataset is large."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Consistency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using READ UNCOMMITTED may lead to reading dirty data, which could be problematic if data consistency is critical."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Lack of proper indexing on the columns used in joins, filters, and sorting can lead to performance bottlenecks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "SearchText Performance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a concatenated search field can lead to inefficient queries if not optimized with full-text indexing or similar techniques."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic Sorting Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The complexity of the CASE-based sorting logic can lead to maintenance challenges and potential errors if new sort columns are introduced without proper handling."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Billing].[usp_Property_Search]\n(\r\n\t@SearchText AS VARCHAR(150) = NULL,\r\n\t@PageSize AS INT = 10,\r\n\t@CurrentPageNumber AS INT = 1,\r\n\t@SortColumn AS VARCHAR(100) = NULL,\r\n\t@SortOrder AS VARCHAR(100) = 'ASC'\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @RecordCount AS INT;\r\n\r\n\tSELECT @RecordCount = ISNULL(COUNT(*), 0)\r\n\tFROM (SELECT DISTINCT P.PropertySeqid\r\n\t\t\t,P.BIN AS BIN\r\n\t\t\t,P.PropertyName\r\n\t\t\t,LTRIM(RTRIM(COALESCE(P.[Address], '') + ' ' + COALESCE(', ' + P.City, '') + ' ' + COALESCE(', ' + P.[State], '') + ' ' + COALESCE(', ' + P.Zip, ''))) AS [Address]\r\n\t\t\t,AD.[AgencyName] AS AgencyName\r\n\t\t\t,COALESCE(F.OecFacilityNumber, '') + COALESCE(P.BIN, '') + COALESCE(P.BBL, '') + COALESCE(P.PropertyName, '') + ' ' + COALESCE(P.[Address], '') + ' ' + COALESCE(', ' + P.City, '') + ' ' + COALESCE(', ' + P.[State], '') + ' ' + COALESCE(', ' + P.Zip, '') + ' ' + COALESCE(AD.AgencyName, '') AS SearchText\r\n\t\tFROM Billing.Property AS P\t\t\t\t\r\n\t\t\tINNER JOIN Billing.MeterAllocation AS ML ON ML.PropertySeqid = P.PropertySeqid\r\n\t\t\tINNER JOIN Billing.Meter AS M ON M.UniqueMeterSeqid = ML.UniqueMeterSeqid\r\n\t\t\tINNER JOIN Billing.Account AS A ON M.UniqueAccountSeqID = A.UniqueAccountSeqid\r\n\t\t\tINNER JOIN Billing.AgencyDivision AS AD ON AD.AgencyDivisionSeqid = A.AgencyAccount\r\n\t\t\tLEFT JOIN Billing.FacilityProperty AS FP ON FP.PropertySeqid = P.PropertySeqid\r\n\t\t\tLEFT JOIN Billing.Facility AS F ON F.FacilitySeqid = FP.FacilitySeqid\r\n\t\tWHERE A.IsActive = 1 AND M.IsActive = 1) AS R\r\n\tWHERE @SearchText IS NULL OR (R.[SearchText] LIKE '%' + @SearchText + '%');\r\n\r\n\t\r\n\tSELECT PropertySeqid\r\n\t\t,BIN\r\n\t\t,PropertyName\r\n\t\t,[Address]\r\n\t\t,AgencyName\r\n\t\t,@RecordCount AS RecordCount\r\n\tFROM (SELECT DISTINCT P.PropertySeqid\r\n\t\t\t,P.BIN AS BIN\r\n\t\t\t,P.PropertyName\r\n\t\t\t,LTRIM(RTRIM(COALESCE(P.[Address], '') + ' ' + COALESCE(', ' + P.City, '') + ' ' + COALESCE(', ' + P.[State], '') + ' ' + COALESCE(', ' + P.Zip, ''))) AS [Address]\r\n\t\t\t,AD.[AgencyName] AS AgencyName\r\n\t\t\t,COALESCE(F.OecFacilityNumber, '') + COALESCE(P.BIN, '') + COALESCE(P.BBL, '') + COALESCE(P.PropertyName, '') + ' ' + COALESCE(P.[Address], '') + ' ' + COALESCE(', ' + P.City, '') + ' ' + COALESCE(', ' + P.[State], '') + ' ' + COALESCE(', ' + P.Zip, '') + ' ' + COALESCE(AD.AgencyName, '') AS SearchText\r\n\t\tFROM Billing.Property AS P\t\t\t\t\r\n\t\t\tINNER JOIN Billing.MeterAllocation AS ML ON ML.PropertySeqid = P.PropertySeqid\r\n\t\t\tINNER JOIN Billing.Meter AS M ON M.UniqueMeterSeqid = ML.UniqueMeterSeqid\r\n\t\t\tINNER JOIN Billing.Account AS A ON M.UniqueAccountSeqID = A.UniqueAccountSeqid\r\n\t\t\tINNER JOIN Billing.AgencyDivision AS AD ON AD.AgencyDivisionSeqid = A.AgencyAccount\r\n\t\t\tLEFT JOIN Billing.FacilityProperty AS FP ON FP.PropertySeqid = P.PropertySeqid\r\n\t\t\tLEFT JOIN Billing.Facility AS F ON F.FacilitySeqid = FP.FacilitySeqid\r\n\t\tWHERE A.IsActive = 1 AND M.IsActive = 1) AS R\r\n\tWHERE @SearchText IS NULL OR (R.[SearchText] LIKE '%' + @SearchText + '%')\r\n\tORDER BY CASE WHEN(@SortColumn IS NULL OR @SortColumn = '') THEN PropertyName END ASC,\t\r\n\t\tCASE WHEN(@SortColumn = 'BIN' AND @SortOrder = 'ASC') THEN BIN END ASC,\r\n\t\tCASE WHEN(@SortColumn = 'BIN' AND @SortOrder = 'DESC') THEN BIN END DESC,\r\n\t\tCASE WHEN(@SortColumn = 'PropertyName' AND @SortOrder = 'ASC') THEN PropertyName END ASC,\r\n\t\tCASE WHEN(@SortColumn = 'PropertyName' AND @SortOrder = 'DESC') THEN PropertyName END DESC,\r\n\t\tCASE WHEN(@SortColumn = 'Address' AND @SortOrder = 'ASC') THEN [Address] END ASC,\r\n\t\tCASE WHEN(@SortColumn = 'Address' AND @SortOrder = 'DESC') THEN [Address] END DESC,\r\n\t\tCASE WHEN(@SortColumn = 'AgencyName' AND @SortOrder = 'ASC') THEN AgencyName END ASC,\r\n\t\tCASE WHEN(@SortColumn = 'AgencyName' AND @SortOrder = 'DESC') THEN AgencyName END DESC\r\n\t\tOFFSET CASE WHEN @PageSize = -1 THEN 0 ELSE @PageSize * (@CurrentPageNumber -1) END ROWS FETCH NEXT CASE WHEN @PageSize = -1 THEN IIF(@RecordCount > 0, @RecordCount, 1) ELSE @PageSize END ROWS ONLY;\r\nEND;"
        }
      ]
    }
  ]
}