{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Gas",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessGasAccountBilling",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessGasAccountBilling",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process gas account billing for a utility company, specifically handling adjustments and original billing records. It updates existing billing records, inserts new records where necessary, and ensures referential integrity across multiple tables. The procedure involves several steps, including checking for existing adjustments, updating records, inserting new records, and maintaining data consistency across related tables."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional checks and branching logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It performs several complex operations, including inserts, updates, and joins across multiple tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It manages referential integrity and updates sequence IDs across related tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes business logic for handling specific billing scenarios and adjustments."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is used to track the user who is executing the procedure, likely for auditing purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This output parameter is used to return the execution status of the procedure, indicating success or failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring several local variables to store intermediate results and control flow."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Retrieve Current Billing Information",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It fetches the current billing period and related identifiers from the "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadAccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Check for Existing Adjustments",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It checks if adjustments for the current billing period have already been processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert Adjustments",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If no adjustments have been processed, it inserts new records into "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " from "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadAccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Existing Records",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It updates existing records in "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with new adjustment data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert New Records",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If there are new records that do not exist in the system, it inserts them into "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintain Referential Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It updates sequence IDs to ensure referential integrity between "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It performs additional updates, such as setting manual payment overrides and changing account statuses."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved in joins and where clauses are properly indexed to improve query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Consider wrapping the procedure in a transaction to ensure atomicity, especially given the multiple insert and update operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Row Count Checks",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "@@ROWCOUNT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is appropriate for tracking the number of affected rows, but ensure that it is used immediately after the relevant SQL statement to avoid incorrect counts."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues if multiple instances are run simultaneously, potentially leading to race conditions or deadlocks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Without explicit transaction management, partial updates could occur if the procedure fails midway, leading to inconsistent data states."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of data grows, the performance of the procedure may degrade, especially if the tables involved are large and not properly indexed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and unclear failure states."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of hardcoded values, such as "
                },
                {
                  "type": "text",
                  "text": "CurrentInvoiceAccountBillingGroup = 2",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", may reduce flexibility and require changes if business rules evolve."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Name:\r\n--*\r\n--* Description:  Process the NYPA account billing original bills.  The sequential processing steps needed to\r\n--* \r\n--Step 01)Insert the new Cover sheet billing types\r\n--\r\n-- Update the Account billing records with the correct account statuses of the existing accounts and the\r\n-- current cycle exchange actions.  The exchange code will be set to null.\r\n-- \r\n-- Determine the active accounts that the utility company did not send a bill for the cycle and add them to the \r\n-- to the \"UploadNYPAAccountBilling\" table.  At this point, we should have a collection of all of the accounts \r\n-- that were billed and all of the accounts that should have been billed.\r\n--*\r\n--* Exec: usp_ProcessAccountBillingSaveCanceRebillAdjustments\r\n--*\r\n--* Parameter(s):\r\n--*\t\t\t AuthenticatedUserID int Output\r\n--*\t\t\t NumberOfAdjustmentsAdded int Output\r\n--* StatusCode  int output -  Execution Return Status \r\n--*\r\n--* Database:  OEC\r\n--*\r\n--* Return:\t 0 Success\r\n--* 9 Failure\r\n--*\r\n--* AUTHOR: Peter Heller (PAH)\r\n--* Created On:10/26/2005\r\n--**************************************************************************************\r\n--* DateTech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 10/26/2005 PAH  First Version  \r\n--* 03/27/2006 PAH  Revised to \r\n--***************************************************************************************\r\nCREATE PROCEDURE [Gas].[usp_ProcessGasAccountBilling]\r\n(\r\n\t@AuthenticatedUserID AS INT,\r\n\t@StatusCode AS INT  OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tDECLARE @NumberOfAdjustmentsAdded int\r\n\tDECLARE @CurrentBillingPeriod varchar(8)\r\n\tDECLARE @InvoiceAccountBillingGroupSeqid int \r\n\tDECLARE @UtilityCompanySeqid int\r\n\tDECLARE @HasAccountBillingAdjustmentGasBeenProcessed int\r\n\tDECLARE @HasAccountBillingGasBeenProcessed int\r\n\tDECLARE @HasAccountBillingBeenProcessed int\r\n\tDECLARE @BillingAccountBillingGasUpdateTransactionCount int\r\n\tDECLARE @BillingAccountBillingUpdateTransactionCount int\r\n\tDECLARE @BillingAccountBillingGasInsertTransactionCount int\r\n\tDECLARE @BillingAccountBillingInsertTransactionCount INT\r\n \r\n\t-- Get all of the generalized parameters needed to process the account billing from the Gas.UploadAccountBillingAdjustmentGas\r\n\r\n\tSELECT\tTOP (1)\t@CurrentBillingPeriod = BillingPeriod, \r\n\t\t@InvoiceAccountBillingGroupSeqid=InvoiceAccountBillingGroupSeqid, \r\n\t\t@UtilityCompanySeqid=UtilityCompanySeqid\r\n\tFROM Gas.UploadAccountBillingAdjustmentGas\r\n\r\n\tSELECT @HasAccountBillingAdjustmentGasBeenProcessed = count(*) from Billing.AccountBillingAdjustmentGas where BillingPeriod = @CurrentBillingPeriod and @UtilityCompanySeqid=UtilityCompanySeqid AND InvoiceAccountGroupSeqid = @InvoiceAccountBillingGroupSeqid\r\n\r\n\t-- if this occurs \"isnull(@HasAccountBillingAdjustmentGasBeenProcessed,1)\" then set the value to 1 and not process\r\n\r\n\tIF (isnull(@HasAccountBillingAdjustmentGasBeenProcessed,1) = 0)\r\n\tBEGIN\r\n\t\tDECLARE @maxAccountBillingAdjustmentGasSeqid int\r\n\t\tselect @maxAccountBillingAdjustmentGasSeqid = isnull(max(AccountBillingAdjustmentGasSeqid),0) from Billing.AccountBillingAdjustmentGas\r\n\t\t\r\n\t\tINSERT INTO Billing.AccountBillingAdjustmentGas\r\n\t\t\t(UploadAccountBillingAdjustmentGasSeqid, AccountSeqid, AccountBillingSeqid, AccountBillingGasSeqid, \r\n\t\t\tUtilityCompanySeqid, InvoiceAccountGroupSeqid, OriginalAccountNumber, FacilityName, ServiceAddress, BillingPeriod, BillingPeriodRevision, \r\n\t\t\tAccountStatus, AccountpreviousStatus, AccountStatusPeriod, NumberOfTransactions, NumberOfRebillTransactions, NumberOfCancelTransactions, \r\n\t\t\tFirstCanceledBillingPeriod, EstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, \r\n\t\t\tTotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, CanceledBilledAmount, PriorRevisedCCF, RevisedCCF, \r\n\t\t\tCanceledCCF, PriorRevisedTherms, RevisedTherms, CanceledTherms, AverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, \r\n\t\t\tBillingDate, ToDate, FromDate, BillingAction, ProcessedInTheCurrentPeriod, GasRateCode, TotalCCF, TotalTherms, ThermsFactor, CancelFromDate, \r\n\t\t\tCancelToDate, CancelTotalCCF, CancelTotalTherms, CancelThermsFactor, CancelBillingDays, ProcessEffectiveDate, DerivedFromSpannedBill, \r\n\t\t\tSpannedBillingPeriodRevision, SpannedFirstCanceledBillingPeriod, SpannedBilledAmount, SpannedCCF, SpannedThermFactor, SpannedTherm, \r\n\t\t\tSpannedMonthlyPercentage, SpannedTotalPercentage, BillCreationDate, PostMarkDate, DatePaymentDue, DateAcceptanceIntoOEC, \r\n\t\t\tPaidAdjustmentAmount, Notes, AuthenticatedUserID, DateAdded, LastUpdate,\r\n\t\t\tEnergySource,BillingCycle,SalesType,ManualPaymentOverride,ManualDataEntry,IsTimeOfDayAccount,LastPeriodModified,DiscountedAmount,DiscountPercentage\r\n\t\t\t,BalanceDollars,CreditDollars)\r\n\t\tSELECT  \r\n\t\t\tUploadAccountBillingAdjustmentGasSeqid, AccountSeqid, AccountBillingSeqid, AccountBillingGasSeqid, UtilityCompanySeqid, \r\n\t\t\t@InvoiceAccountBillingGroupSeqid, --  InvoiceAccountBillingGroupSeqid Con Edison = 2 and National Grid West is 3 or 4\r\n\t\t\tOriginalAccountNumber, FacilityName, ServiceAddress, BillingPeriod, BillingPeriodRevision, AccountStatus, \r\n\t\t\tAccountpreviousStatus, AccountStatusPeriod, NumberOfTransactions, NumberOfRebillTransactions, NumberOfCancelTransactions, \r\n\t\t\tFirstCanceledBillingPeriod, EstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, \r\n\t\t\tTotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, CanceledBilledAmount, PriorRevisedCCF, RevisedCCF, \r\n\t\t\tCanceledCCF, PriorRevisedTherms, RevisedTherms, CanceledTherms, AverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, \r\n\t\t\tBillingDate, ToDate, FromDate, BillingAction, ProcessedInTheCurrentPeriod, GasRateCode, TotalCCF, TotalTherms, ThermsFactor, CancelFromDate, \r\n\t\t\tCancelToDate, CancelTotalCCF, CancelTotalTherms, CancelThermsFactor, CancelBillingDays, ProcessEffectiveDate, DerivedFromSpannedBill, \r\n\t\t\tSpannedBillingPeriodRevision, SpannedFirstCanceledBillingPeriod, SpannedBilledAmount, SpannedCCF, SpannedThermFactor, SpannedTherm, \r\n\t\t\tSpannedMonthlyPercentage, SpannedTotalPercentage, BillCreationDate, PostMarkDate, DatePaymentDue, DateAcceptanceIntoOEC, \r\n\t\t\tPaidAdjustmentAmount, Notes, AuthenticatedUserID, DateAdded, LastUpdate,\r\n\t\t\tEnergySource,BillingCycle,SalesType,ManualPaymentOverride,ManualDataEntry,IsTimeOfDayAccount,LastPeriodModified,\r\n\t\t\tDiscountedAmount,DiscountPercentage,BalanceDollars,CreditDollars\r\n\t\tFROM Gas.UploadAccountBillingAdjustmentGas\r\n\r\n\t\tset @NumberOfAdjustmentsAdded = @@rowcount\r\n\t\tselect @NumberOfAdjustmentsAdded\r\n\tEND;\r\n\r\n\t-- Update the adjustments first since the Billing.AccountBillingAdjustmentGas for the current period\r\n\t-- has indetified all of the adjustments that exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t-- is not null and the Billing.AccountBillingGas AccountBillingGasSeqid is not null.\r\n\t-- \r\n\t-- The key to this update is the setting of the LastUpdate to a null value so the audit trigger preserves\r\n\t-- the prior state of the row before the Billing.AccountBilling or Billing.AccountBillingGas are updated\r\n\t-- with the adjusted values.\r\n\tSELECT @HasAccountBillingBeenProcessed = COUNT(*)\r\n\tFROM \r\n\t\tBilling.AccountBillingGas INNER JOIN\r\n\t\tBilling.AccountBilling ON Billing.AccountBillingGas.AccountBillingSeqid = Billing.AccountBilling.AccountBillingSeqid AND \r\n\t\tBilling.AccountBillingGas.OriginalAccountNumber = Billing.AccountBilling.OriginalAccountNumber AND \r\n\t\tBilling.AccountBillingGas.BillingPeriod = Billing.AccountBilling.BillingPeriod AND \r\n\t\tBilling.AccountBillingGas.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision\r\n\tWHERE  \r\n\t\t(Billing.AccountBillingGas.BillingPeriod = @CurrentBillingPeriod) AND \r\n\t\t(Billing.AccountBillingGas.UtilityCompanySeqid = @UtilityCompanySeqid) and \r\n\t\t(Billing.AccountBilling.CurrentInvoiceAccountBillingGroup = @InvoiceAccountBillingGroupSeqid)\r\n\t\r\n\t-- if this occurs \"isnull(@HasAccountBillingBeenProcessed,1)= 0\" then set the value to 1 or @HasAccountBillingBeenProcessed > 0 Then do not process\r\n\tIF (isnull(@HasAccountBillingBeenProcessed,1)= 0)\r\n\tBEGIN\r\n\t\t--\tNational Grid West Special Ledger current period discount.\r\n\t\t--\tRevisedBilledAmount =Billing.AccountBillingAdjustmentGas.RevisedBilledAmount+Billing.AccountBillingAdjustmentGas.DiscountedAmount\r\n\t\t--\tNote:\r\n\t\t--\t\t\tBilling.AccountBillingAdjustmentGas.DiscountedAmount is zero for Con Ed and National Grid West CRIS accounts\r\n\t\tUPDATE  Billing.AccountBilling\r\n\t\tSET LastPeriodModified = Billing.AccountBillingAdjustmentGas.BillingPeriod,\r\n\t\t\tFromDate =Billing.AccountBillingAdjustmentGas.FromDate, \r\n\t\t\tToDate =Billing.AccountBillingAdjustmentGas.ToDate, \r\n\t\t\tAccountBillingStatus =Billing.AccountBillingAdjustmentGas.AccountStatus,\r\n\t\t\tPreviousAccountBillingStatus =Billing.AccountBillingAdjustmentGas.AccountpreviousStatus, \r\n\t\t\tAccountBillingStatusCodePeriod =Billing.AccountBillingAdjustmentGas.AccountStatusPeriod, \r\n\t\t\tRevisedBilledAmount =Billing.AccountBillingAdjustmentGas.RevisedBilledAmount+isnull(Billing.AccountBillingAdjustmentGas.DiscountedAmount,0),\r\n\t\t\tAccountEnergyUsage =Billing.AccountBillingAdjustmentGas.RevisedTherms, \r\n\t\t\tNetEnergyUsageChange =Billing.AccountBillingAdjustmentGas.TotalTherms+Billing.AccountBillingAdjustmentGas.CancelTotalTherms,\r\n\t\t\tNetDollarChange = Billing.AccountBillingAdjustmentGas.TotalRebilledAmount +Billing.AccountBillingAdjustmentGas.TotalCanceledAmount,\r\n\t\t\tBillingPeriodDays =Billing.AccountBillingAdjustmentGas.BillingDays,  \r\n\t\t\tBillingAction =Billing.AccountBillingAdjustmentGas.BillingAction,  \r\n\t\t\tUploadFileSeqid =Billing.AccountBillingAdjustmentGas.AccountBillingAdjustmentGasSeqid, \r\n\t\t\tSplitFiscalYear = dbo.[IsFiscalYearSplit] (Billing.AccountBillingAdjustmentGas.FromDate, Billing.AccountBillingAdjustmentGas.ToDate), -- SplitFiscalYear\r\n\t\t\tChargeToFiscalYear = dbo.[CalculateFiscalYearIfSplit] (Billing.AccountBillingAdjustmentGas.FromDate, Billing.AccountBillingAdjustmentGas.ToDate,'T'), --ChargeToFiscalYear \t\r\n\t\t\tChargeToPriorFiscalYear = dbo.[CalculateFiscalYearIfSplit] (Billing.AccountBillingAdjustmentGas.FromDate, Billing.AccountBillingAdjustmentGas.ToDate,'F'), -- ChargeToPriorFiscalYear\r\n\t\t\tLastUpdate = getdate(),\r\n\t\t\tFireAuditTrigger = 'Y'\r\n\t\tFROM \r\n\t\t\tBilling.AccountBillingAdjustmentGas INNER JOIN\r\n\t\t\tBilling.AccountBilling ON Billing.AccountBillingAdjustmentGas.AccountBillingSeqid = Billing.AccountBilling.AccountBillingSeqid AND \r\n\t\t\tBilling.AccountBillingAdjustmentGas.UtilityCompanySeqid = Billing.AccountBilling.UtilityCompanySeqid AND \r\n\t\t\tBilling.AccountBillingAdjustmentGas.OriginalAccountNumber = Billing.AccountBilling.OriginalAccountNumber AND \r\n\t\t\tBilling.AccountBillingAdjustmentGas.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision\r\n\t\tWHERE (Billing.AccountBillingAdjustmentGas.BillingPeriod = @CurrentBillingPeriod)--@CurrentBillingPeriod \r\n\r\n\t\tset @BillingAccountBillingUpdateTransactionCount = @@rowcount\r\n\t\t\r\n\t\t-- Update the adjustments first since the Billing.AccountBillingAdjustmentGas for the current period\r\n\t\t-- has indetified all of the adjustments that exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t\t-- is not null and the Billing.AccountBillingGas AccountBillingGasSeqid is not null.\r\n\t\t-- \r\n\t\t-- The key to this update is the setting of the LastUpdate to a null value so the audit trigger preserves\r\n\t\t-- the prior state of the row before the Billing.AccountBilling or Billing.AccountBillingGas are updated\r\n\t\t-- with the adjusted values.\r\n\t\t--\r\n\t\t--  Note: Legacy BalanceDollars & CreditDollars will never be adjusted.\r\n\t\tUPDATE\tBilling.AccountBillingGas\r\n\t\tSET \r\n\t\t\tLastPeriodModified =Billing.AccountBillingAdjustmentGas.BillingPeriod,\r\n\t\t\tAccountBillingGasRowState = case when IsNull(AccountBillingGasRowState,0)+1 > 1 then 2 else 1 end, \r\n\t\t\tBilledAmount =Billing.AccountBillingAdjustmentGas.RevisedBilledAmount,\r\n\t\t\tDiscountedAmount = isnull(Billing.AccountBillingAdjustmentGas.DiscountedAmount,0),\r\n\t\t\tDiscountPercentage = isnull(Billing.AccountBillingAdjustmentGas.DiscountPercentage,0.0),\r\n\t\t\tTotalCCF =Billing.AccountBillingAdjustmentGas.RevisedCCF, \r\n\t\t\tThermsFactor = Billing.AccountBillingAdjustmentGas.ThermsFactor,\r\n\t\t\tTotalTherms =Billing.AccountBillingAdjustmentGas.RevisedTherms, \r\n\t\t\tNotes =Billing.AccountBillingAdjustmentGas.Notes,\r\n\t\t\tAccountBillingAdjustmentGasSeqid = Billing.AccountBillingAdjustmentGas.AccountBillingAdjustmentGasSeqid, \r\n\t\t\tLastUpdate = getdate(),\r\n\t\t\tFireAuditTrigger = 'Y'\r\n\t\tFROM\r\n\t\t\tBilling.AccountBillingAdjustmentGas INNER JOIN\r\n\t\t\tBilling.AccountBilling ON Billing.AccountBillingAdjustmentGas.AccountBillingSeqid = Billing.AccountBilling.AccountBillingSeqid AND \r\n\t\t\tBilling.AccountBillingAdjustmentGas.OriginalAccountNumber = Billing.AccountBilling.OriginalAccountNumber AND \r\n\t\t\tBilling.AccountBillingAdjustmentGas.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision AND \r\n\t\t\tBilling.AccountBillingAdjustmentGas.BillingPeriodRevision = Billing.AccountBilling.BillingPeriod AND \r\n\t\t\tBilling.AccountBillingAdjustmentGas.AccountBillingSeqid IS NOT NULL INNER JOIN\r\n\t\t\tBilling.AccountBillingGas ON Billing.AccountBilling.AccountBillingSeqid = Billing.AccountBillingGas.AccountBillingSeqid AND \r\n\t\t\tBilling.AccountBilling.BillingPeriod = Billing.AccountBillingGas.BillingPeriod AND \r\n\t\t\tBilling.AccountBilling.BillingPeriodRevision = Billing.AccountBillingGas.BillingPeriodRevision and\r\n\t\t\tBilling.AccountBillingAdjustmentGas.BillingPeriod = @CurrentBillingPeriod --@CurrentBillingPeriod\r\n\t\t\t\t  \r\n\t\tset @BillingAccountBillingGasUpdateTransactionCount = @@rowcount\r\n\tEND;\r\n\r\n\t-- At this point the Billing.AccountBillingAdjustmentGas for the current period has indetified all of the adjustments or \r\n\t-- original bill rows that do not exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t-- is null and the Billing.AccountBillingGas AccountBillingGasSeqid is null.\r\n\tDECLARE @maxAccountBillingSeqid int\r\n\tDECLARE @maxAccountBillingGasSeqid int\r\n\tDECLARE @HasAccountBillingInsertsBeenProcessed int\r\n\r\n\tSELECT @maxAccountBillingSeqid = max(AccountBillingSeqid) from Billing.AccountBilling\t\r\n\tSELECT @maxAccountBillingGasSeqid = max(AccountBillingGasSeqid) from Billing.AccountBillingGas\t\r\n\r\n\tSELECT  @HasAccountBillingInsertsBeenProcessed = count(*) from Billing.AccountBillingAdjustmentGas\r\n\tWHERE \r\n\t\tAccountBillingSeqid is null and \r\n\t\tBillingPeriod = @CurrentBillingPeriod\r\n\r\n\t-- if this occurs in the case of \"isnull(@HasAccountBillingInsertsBeenProcessed,1)\" then set the value to 0 and not process\r\n\t-- also if the count of the AccountBillingSeqid that are null is zero do not process since they have already been processed.\r\n\tIF (isnull(@HasAccountBillingInsertsBeenProcessed, 0) <> 0)\r\n\tBEGIN\r\n\t\t--\tCorrection for 'BA' AccountsFIX this \r\n\t\t--\r\n\t\t--\tcase when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end as OriginalBilledAmount,\r\n\t\t--\tRevisedBilledAmount, --RevisedBilledAmount,\r\n\t\t--\tcase when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end as OriginalBilledAmountPaid,\r\n\t\t--\tPaidAdjustmentAmount,\r\n\t\t--\tIsNull(case when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end,0)+IsNull(PaidAdjustmentAmount,0) as TotalAmountDue,\r\n\t\t--\tIsNull(case when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end,0)+IsNull(PaidAdjustmentAmount,0) as CreditedPaidAmount,\r\n\t\tINSERT INTO Billing.AccountBilling\r\n\t\t\t(OriginalAccountNumber, AccountSeqid, CurrentInvoiceAccountBillingGroup, UtilityCompanySeqid, EnergySource, IsTimeOfDayAccount, \r\n\t\t\tLastPeriodModified, BillingCycle, SalesType, PreviousBillingPeriod, BillingPeriod, BillingPeriodRevision, NextMeterReading,\r\n\t\t\tNextBillingPeriod, FromDate, ToDate, AccountBillingStatus, PreviousAccountBillingStatus, AccountBillingStatusCodePeriod, ManualPaymentOverride, \r\n\t\t\tOriginalBilledAmount,RevisedBilledAmount, OriginalBilledAmountPaid, PaidAdjustmentAmount, TotalAmountDue, CreditedPaidAmount,\r\n\t\t\tCreditedPaidAmountDate, \r\n\t\t\tAccountEnergyUsage, OriginalEnergyUsage,AccountDemandUsage, AccountEnergyUsage1, AccountDemandUsage1, ManualDataEntry, \r\n\t\t\tProductionAndDeliveryTariff, BillingPeriodDays, BillCreationDate, PostMarkDate, DatePaymentDue, DateAcceptanceIntoOEC, BillingAction, \r\n\t\t\tProcessedInTheCurrentPeriod, ManualPaymentOverrideAmount, InitialPostingDate, UploadFileSeqid, SplitFiscalYear, ChargeToFiscalYear, \r\n\t\t\tChargeToPriorFiscalYear, \r\n\t\t\tNotes, AuthenticatedUserID, DateAdded, LastUpdate,NetDollarChange,NetEnergyUsageChange,NetDemandUsageChange)\r\n\t\tSELECT \r\n\t\t\tOriginalAccountNumber,\r\n\t\t\tAccountSeqid,\r\n\t\t\tInvoiceAccountGroupSeqid,\r\n\t\t\tUtilityCompanySeqid,\r\n\t\t\tEnergySource,\r\n\t\t\tIsTimeOfDayAccount,\r\n\t\t\tLastPeriodModified,\r\n\t\t\tBillingCycle,\r\n\t\t\tSalesType,\r\n\t\t\tdbo.CreatePreviousPeriod(Billing.AccountBillingAdjustmentGas.BillingPeriod, BillingCycle), -- PreviousBillingPeriod\r\n\t\t\tBillingPeriodRevision, -- BillingPeriod\r\n\t\t\tBillingPeriodRevision,\r\n\t\t\tToDate,\r\n\t\t\tdbo.CreateNextPeriod(Billing.AccountBillingAdjustmentGas.BillingPeriod, BillingCycle),-- NextBillingPeriod\r\n\t\t\tFromDate, -- NextMeterReading\r\n\t\t\tToDate,\r\n\t\t\tAccountStatus,\r\n\t\t\tAccountpreviousStatus,\r\n\t\t\tAccountStatusPeriod,\r\n\t\t\tManualPaymentOverride,\r\n\t\t\tcase when BillingAction ='O' then IsNull(RevisedBilledAmount,0)+isnull(DiscountedAmount,0) else 0.00 end, -- OriginalBilledAmount,\r\n\t\t\tRevisedBilledAmount+isnull(DiscountedAmount,0), --RevisedBilledAmount+Discount Amount,\r\n\t\t\tRevisedBilledAmount+isnull(DiscountedAmount,0), --OriginalBilledAmountPaid,\r\n\t\t\tPaidAdjustmentAmount,\r\n\t\t\tcase when BillingAction ='O' then IsNull(RevisedBilledAmount+isnull(DiscountedAmount,0),0) else 0.00 end + IsNull(PaidAdjustmentAmount,0), --TotalAmountDue,\r\n\t\t\tcase when BillingAction ='O' then IsNull(RevisedBilledAmount+isnull(DiscountedAmount,0),0) else 0.00 end + IsNull(PaidAdjustmentAmount,0), --CreditedPaidAmount\r\n\t\t\tDatePaymentDue, --CreditedPaidAmountDate\t\r\n\t\t\tRevisedTherms, -- AccountEnergyUsage\r\n\t\t\tRevisedTherms, -- OriginalEnergyUsage\r\n\t\t\tnull, --AccountDemandUsage,\r\n\t\t\tnull, --AccountEnergyUsage1,\r\n\t\t\tnull, --AccountDemandUsage1,\r\n\t\t\tManualDataEntry,\r\n\t\t\t[Common].[CalculateProductionAndDeliveryTariff] (UtilityCompanySeqid,GasRateCode), -- ProductionAndDeliveryTariff,\r\n\t\t\tBillingDays,\r\n\t\t\tBillCreationDate,\r\n\t\t\tPostMarkDate,\r\n\t\t\tDatePaymentDue,\r\n\t\t\tDateAcceptanceIntoOEC,\r\n\t\t\tBillingAction,\r\n\t\t\t'Y', -- ProcessedInTheCurrentPeriod,\r\n\t\t\t0.00, -- ManualPaymentOverrideAmount,\r\n\t\t\tgetDate(), -- InitialPostingDate\r\n\t\t\tUploadAccountBillingAdjustmentGasSeqid,\r\n\t\t\t[dbo].[IsFiscalYearSplit] (Billing.AccountBillingAdjustmentGas.FromDate, Billing.AccountBillingAdjustmentGas.ToDate), -- SplitFiscalYear\r\n\t\t\t[dbo].[CalculateFiscalYearIfSplit] (Billing.AccountBillingAdjustmentGas.FromDate, Billing.AccountBillingAdjustmentGas.ToDate,'T'), --ChargeToFiscalYear\r\n\t\t\t[dbo].[CalculateFiscalYearIfSplit] (Billing.AccountBillingAdjustmentGas.FromDate, Billing.AccountBillingAdjustmentGas.ToDate,'F'), -- ChargeToPriorFiscalYear\r\n\t\t\tNotes,\r\n\t\t\tAuthenticatedUserID,\r\n\t\t\tgetdate(), -- DateAdded,\r\n\t\t\tgetdate(), -- LastUpdate\r\n\t\t\t0.00,  --NetDollarChange\r\n\t\t\t0,--NetEnergyUsageChange\r\n\t\t\t0.0 --NetDemandUsageChange\r\n\t\t\tfrom Billing.AccountBillingAdjustmentGas\r\n\t\tWHERE AccountBillingSeqid is null and \r\n\t\t  BillingPeriod = @CurrentBillingPeriod --@CurrentBillingPeriod\r\n\t\r\n\t\tSET @BillingAccountBillingInsertTransactionCount = @@rowcount\r\n\r\n\t\t-- At this point the Billing.AccountBillingAdjustmentGas for the current period has indetified all of the adjustments or \r\n\t\t-- original bill rows that do not exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t\t-- is null and the Billing.AccountBillingGas AccountBillingGasSeqid is null.\r\n\t\tINSERT INTO Billing.AccountBillingGas\r\n\t\t\t(AccountBillingSeqid, UtilityCompanySeqid, AccountBillingAdjustmentGasSeqid, OriginalAccountNumber, LastPeriodModified, BillingPeriod, \r\n\t\t\tBillingPeriodRevision, AccountBillingGasRowState, CommodityTariffRate, CommodityTariffEffectiveDate, BillCreationDate, PostMarkDate, \r\n\t\t\tDatePaymentDue, DateAcceptanceIntoOEC, BilledAmount, TotalCCF, ThermsFactor, TotalTherms, LevelPaymentPlan, DiscountedAmount, \r\n\t\t\tDiscountPercentage, Notes, AuthenticatedUserID, DateAdded, LastUpdate,BalanceDollars,CreditDollars)\r\n\t\tSELECT\r\n\t\t\tAccountBillingSeqid, UtilityCompanySeqid, AccountBillingAdjustmentGasSeqid, OriginalAccountNumber,BillingPeriod, BillingPeriodRevision, \r\n\t\t\tBillingPeriodRevision, 1, GasRateCode, NULL, BillCreationDate, PostMarkDate, DatePaymentDue, \r\n\t\t\tDateAcceptanceIntoOEC, RevisedBilledAmount, RevisedCCF, ThermsFactor, RevisedTherms, 'N', isnull(DiscountedAmount,0), isnull(DiscountPercentage,0.0), Notes, AuthenticatedUserID, \r\n\t\t\tgetdate(), -- DateAdded,\r\n\t\t\tgetdate(), -- LastUpdate\r\n\t\t\tBalanceDollars,CreditDollars\r\n\t\tFROM Billing.AccountBillingAdjustmentGas\r\n\t\tWHERE AccountBillingSeqid is null and \r\n\t\t  BillingPeriod = @CurrentBillingPeriod --@CurrentBillingPeriod\r\n\r\n\t\tSET @BillingAccountBillingGasInsertTransactionCount = @@rowcount\r\n\t\r\n\t\t-- The Billing.AccountBilling and the Billing.AccountBillingGas rows have been inserted and their sequence ids were created.\r\n\t\t-- The two tables are joined to update the sequence id of the the Billing.AccountBilling in the the Billing.AccountBillingGas table. \r\n\t\t-- It inforces the referential integrity between the two tables.\r\n\t\tUPDATE\tBilling.AccountBillingGas\r\n\t\tSET\t\tAccountBillingSeqid =Billing.AccountBilling.AccountBillingSeqid\r\n\t\tFROM\r\n\t\t\tBilling.AccountBilling INNER JOIN\r\n\t\t\tBilling.AccountBillingGas ON Billing.AccountBilling.UtilityCompanySeqid = Billing.AccountBillingGas.UtilityCompanySeqid AND \r\n\t\t\tBilling.AccountBilling.BillingPeriod = Billing.AccountBillingGas.BillingPeriod AND \r\n\t\t\tBilling.AccountBilling.BillingPeriodRevision = Billing.AccountBillingGas.BillingPeriodRevision AND \r\n\t\t\tBilling.AccountBilling.OriginalAccountNumber = Billing.AccountBillingGas.OriginalAccountNumber INNER JOIN\r\n\t\t\tBilling.AccountBillingAdjustmentGas ON Billing.AccountBilling.UtilityCompanySeqid = Billing.AccountBillingAdjustmentGas.UtilityCompanySeqid AND \r\n\t\t\tBilling.AccountBilling.BillingPeriod = Billing.AccountBillingAdjustmentGas.BillingPeriodRevision AND \r\n\t\t\tBilling.AccountBilling.BillingPeriodRevision = Billing.AccountBillingAdjustmentGas.BillingPeriodRevision AND \r\n\t\t\tBilling.AccountBilling.OriginalAccountNumber = Billing.AccountBillingAdjustmentGas.OriginalAccountNumber\r\n\t\tWHERE  \r\n\t\t\t(Billing.AccountBillingAdjustmentGas.AccountBillingSeqid IS NULL) and \r\n\t\t\t(Billing.AccountBillingAdjustmentGas.UtilityCompanySeqid = @UtilityCompanySeqid) AND \r\n\t\t\t(Billing.AccountBillingAdjustmentGas.InvoiceAccountGroupSeqid = @InvoiceAccountBillingGroupSeqid) and\r\n\t\t\t(Billing.AccountBillingAdjustmentGas.BillingPeriod = @CurrentBillingPeriod)\r\n\t\r\n\t\t-- The Billing.AccountBillingAdjustmentGas and the Billing.AccountBillingGas are joined to update the repective sequence ids of the \r\n\t\t-- Billing.AccountBilling and the Billing.AccountBillingGas in the Billing.AccountBillingAdjustmentGas table. \r\n\t\t-- It inforces the referential integrity between all three tables.\r\n\t\t--\r\n\t\t--\t\t\t\tBilling.AccountBilling\r\n\t\t--\t\t\t\tBilling.AccountBillingGas\r\n\t\t--\t\t\t\tBilling.AccountBillingAdjustmentGas\r\n\t\tUPDATE Billing.AccountBillingAdjustmentGas\r\n\t\tSET \r\n\t\t\tAccountBillingSeqid =Billing.AccountBillingGas.AccountBillingSeqid, \r\n\t\t\tAccountBillingGasSeqid =Billing.AccountBillingGas.AccountBillingGasSeqid\r\n\t\tFROM\r\n\t\t\tBilling.AccountBilling INNER JOIN\r\n\t\t\tBilling.AccountBillingGas ON Billing.AccountBilling.UtilityCompanySeqid = Billing.AccountBillingGas.UtilityCompanySeqid AND \r\n\t\t\tBilling.AccountBilling.BillingPeriod = Billing.AccountBillingGas.BillingPeriod AND \r\n\t\t\tBilling.AccountBilling.BillingPeriodRevision = Billing.AccountBillingGas.BillingPeriodRevision AND \r\n\t\t\tBilling.AccountBilling.OriginalAccountNumber = Billing.AccountBillingGas.OriginalAccountNumber INNER JOIN\r\n\t\t\tBilling.AccountBillingAdjustmentGas ON Billing.AccountBilling.UtilityCompanySeqid = Billing.AccountBillingAdjustmentGas.UtilityCompanySeqid AND \r\n\t\t\tBilling.AccountBilling.BillingPeriod = Billing.AccountBillingAdjustmentGas.BillingPeriodRevision AND \r\n\t\t\tBilling.AccountBilling.BillingPeriodRevision = Billing.AccountBillingAdjustmentGas.BillingPeriodRevision AND \r\n\t\t\tBilling.AccountBilling.OriginalAccountNumber = Billing.AccountBillingAdjustmentGas.OriginalAccountNumber\r\n\t\tWHERE  \r\n\t\t\t(Billing.AccountBillingAdjustmentGas.AccountBillingSeqid IS NULL) and \r\n\t\t\t(Billing.AccountBillingAdjustmentGas.UtilityCompanySeqid = @UtilityCompanySeqid) AND \r\n\t\t\t(Billing.AccountBillingAdjustmentGas.InvoiceAccountGroupSeqid = @InvoiceAccountBillingGroupSeqid) and\r\n\t\t\t(Billing.AccountBillingAdjustmentGas.BillingPeriod = @CurrentBillingPeriod)\r\n\tEND;\r\n\r\n\t-- update manual payment override amount\r\n\tUPDATE billing.AccountBilling\r\n\tSET ManualPaymentOverrideAmount = TotalAmountDue,\r\n\t\tManualPaymentOverride = 'Y'\r\n\tWHERE CurrentInvoiceAccountBillingGroup = 2\r\n\r\n\t-- 2012/04/03 UA is not longer needed. All UA status will be changed to AC\r\n\tUPDATE Billing.Account SET AccountStatus = 'AC' WHERE AccountStatus = 'UA';\r\n\t\t\t\t\r\n\tset @StatusCode = 0\r\nEND;"
        }
      ]
    }
  ]
}