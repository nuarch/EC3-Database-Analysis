{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessAccountBillingRebillAddMissingBills",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessAccountBillingRebillAddMissingBills",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to handle the processing of account billing rebills for the New York Power Authority (NYPA). It identifies and processes missing billing records for accounts that have undergone adjustments but do not have corresponding billing records in the system. The procedure involves several steps, including checking for existing cycle parameters, inserting missing billing records into a temporary table, and updating the main billing tables with these records."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple SQL operations, including "
                },
                {
                  "type": "text",
                  "text": "SELECT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "INSERT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "DELETE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UPDATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "TRUNCATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses several joins across different tables, which increases the complexity of understanding the data flow."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure includes conditional logic and multiple steps that require careful coordination."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It interacts with various tables and requires maintaining data integrity across these tables."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter represents the ID of the user who is authenticated and executing the procedure. It is used for tracking purposes in the database."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This is an output parameter that indicates the execution status of the procedure. It returns "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for success and "
                },
                {
                  "type": "text",
                  "text": "9",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring and initializing several local variables that will be used throughout the process."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cycle Parameters Check",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It checks if the upload cycle parameters exist for a specific utility company and invoice account group. If they exist, it retrieves billing-related dates; otherwise, it assumes default dates based on the billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Table Preparation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure truncates the "
                },
                {
                  "type": "text",
                  "text": "UploadNypaBackAccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table and resets its identity seed. This table is used to temporarily store billing adjustments that need to be processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert Adjustments",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It inserts records into the "
                },
                {
                  "type": "text",
                  "text": "UploadNypaBackAccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table for adjustments that do not have corresponding billing records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Delete Existing Records",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It deletes records from the temporary table that already have corresponding billing records in the main billing table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert Missing Bills",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure inserts missing billing records into the "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table, setting specific fields to indicate that these are back-billed records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Records",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It updates the "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingAdjustmentElectric",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table to mark adjustments as processed and associates them with the newly created billing records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Electric Records Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If there are back-billed records, it inserts corresponding records into the "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingElectric",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table and updates the adjustment records with the new electric billing information."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Truncation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "TRUNCATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " on the "
                },
                {
                  "type": "text",
                  "text": "UploadNypaBackAccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table is efficient for clearing data but requires careful handling to ensure no unintended data loss."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Subqueries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple joins and subqueries, which can be resource-intensive, especially if the tables involved are large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing on the tables involved in joins and where clauses can significantly improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the volume of data is large, consider processing in batches to reduce transaction size and lock contention."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure modifies multiple tables, which could lead to data integrity issues if not handled correctly, especially in the case of failures or partial updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues if multiple instances are executed simultaneously, potentially leading to race conditions or deadlocks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling mechanisms, which could result in unhandled exceptions and inconsistent states."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the data volume grows, the complexity and resource demands of the procedure may increase, potentially impacting performance and scalability."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Description: Process the NYPA account billing rebills bills. The sequential processing steps needed to\r\n--* Exec: usp_ProcessAccountBillingRebills\r\n--* Parameter(s): \r\n--* BillingPeriod varchar(6) - Current billing period\r\n--* StatusCode int output - Execution Return Status \r\n--* Return:\t0 Success\r\n--* 9 Failure\r\n--* AUTHOR: Peter Heller (PAH)\r\n--* Created On: 10/26/2005\r\n--**************************************************************************************\r\n--* Date Tech Description of Change\r\n--* ---------- ---- -------------------------------------------------------------\r\n--* 10/26/2005 PAH First Version \r\n--* 03/27/2006 PAH Revised to \r\n--* 2018-11-21\tZD\tI added a update to target unique account stting \r\n--\t\t\t\t\tThis modification will help process to choose the rigt account\r\n--* 12/3/2018   VY  Modified for UniqueAccountSeqID\r\n--* 12/20/2018  VY  Modified for updating UniqueAccountSeqID\r\n--***************************************************************************************\r\nCREATE PROCEDURE [Nypa].[usp_ProcessAccountBillingRebillAddMissingBills]\r\n(\r\n\t@AuthenticatedUserID AS INT,\r\n\t@StatusCode AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tDECLARE @AccountBillingAdjustmentElectricSeqid AS INT, @AdjustedAccountBill AS INT,\r\n\t\t@InvoiceTrackingSeqid AS INT, @CurrentAccountSeqid AS INT,\r\n\t\t@CurrentAccountBillingSeqid AS INT, @CurrentAccountBillingElectricSeqid AS INT,\r\n\t\t@UtililtyCompanyCycleParametersExist AS INT,@Zero AS INT, @ToDateParm varchar(1),\r\n\t\t@FromDateParm varchar(1), @CurrentBillingPeriod varchar(6), @BillingPeriod varchar(6),\r\n\t\t@RevisedBillingPeriod varchar(6), @BillCreationDate varchar(6), @OriginalBilledAmountSetToZero MONEY,\r\n\t\t@PostMarkDate varchar(8), @DatePaymentDue varchar(8), @DateAcceptanceIntoOEC varchar(8),\r\n\t\t@Yes varchar(1), @NumberOfBackBilledRecords INT, @NumberOfBackBilledElectricRecords INT,\r\n\t\t@NumberOfBackBilledAdjustmentElectricRecords INT;\r\n\r\n\tSELECT @InvoiceTrackingSeqid = null, @ToDateParm = 'T', @FromDateParm = 'F',\r\n\t\t@OriginalBilledAmountSetToZero = 0.00, @Zero = 0.00, @NumberOfBackBilledElectricRecords = 0,\r\n\t\t@NumberOfBackBilledAdjustmentElectricRecords = 0, @Yes = 'Y';\r\n\r\n\t-- Check if the Upload Cycle parameters exist\r\n\tSELECT @UtililtyCompanyCycleParametersExist = COUNT(*)\r\n\tFROM\r\n\t\tCommon.UploadCycleParameters INNER JOIN\r\n\t\tBilling.ApplicationTimeFrame ON Common.UploadCycleParameters.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\tWHERE\r\n\t\t(Common.UploadCycleParameters.UtilityCompanySeqid = 7) AND \r\n\t\t(Common.UploadCycleParameters.InvoiceAccountGroupSeqid = 1) AND \r\n\t\t(Common.UploadCycleParameters.CanProcessData = @Yes) and \r\n\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = @Yes)\r\n\r\n\tIF (@UtililtyCompanyCycleParametersExist = 1)\r\n\tBEGIN\r\n\t\tSELECT DISTINCT @BillCreationDate = BillCreationDate, @PostMarkDate = PostMarkDate, @DatePaymentDue = DatePaymentDue,@DateAcceptanceIntoOEC = DateAcceptanceIntoOEC\r\n\t\tFROM \r\n\t\t\tCommon.UploadCycleParameters\r\n\t\tWHERE \r\n\t\t\t(Common.UploadCycleParameters.UtilityCompanySeqid = 7) AND (Common.UploadCycleParameters.InvoiceAccountGroupSeqid=1) and \r\n\t\t\t(Common.UploadCycleParameters.BillingPeriod =@BillingPeriod) AND (Common.UploadCycleParameters.CanProcessData = @Yes)\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\t-- If the parameters do not exist, assume that the bill was processed mid month.\r\n\t\t-- This should only occur in revisions to accounts prior to the legacy conversion \r\n\t\t-- period\r\n\r\n\t\tset @BillCreationDate = @BillingPeriod+'05'\r\n\t\tset @PostMarkDate = @BillingPeriod+'06'\r\n\t\tset @DatePaymentDue = @BillingPeriod+'15'\r\n\t\tset @DateAcceptanceIntoOEC = @BillingPeriod+'07'\r\n\tEND;\r\n\r\n\t-- Find all adjustments for the period and load them into the UploadNypaBackAccountBilling table\r\n\t-- then find all of the adjustment that have acorresponding accountbilling row and delete them from\r\n\t-- UploadNypaBackAccountBilling table. The remainder are the bills that do not exist in EC3 as previously\r\n\t-- billed.\r\n\r\n\tTRUNCATE table UploadNypaBackAccountBilling\r\n\tDBCC CHECKIDENT ('[Nypa].[UploadNypaBackAccountBilling]', RESEED,0)\r\n\r\n\tINSERT INTO Nypa.UploadNypaBackAccountBilling\r\n\t\t(AccountBillingAdjustmentElectricSeqid, BillingPeriod, BillingPeriodRevision, AccountOriginalAccountNumber, \r\n\t\tAccountSeqid, AccountBillingStatus, UniqueAccountSeqID)\r\n\tSELECT \r\n\t\tBilling.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid,\r\n\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriod, \r\n\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision, \r\n\t\tA.OriginalAccountNumber AS AccountOriginalAccountNumber, \r\n\t\tA.AccountSeqid,'BA' as AccountBillingStatus,\r\n\t\tA.UniqueAccountSeqid /* added on 12/14/2018 */\r\n\tFROM \r\n\t\tBilling.AccountBillingAdjustmentElectric\r\n\t\tINNER JOIN Billing.ApplicationTimeFrame ON Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision <> Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\tINNER JOIN Billing.Account AS A ON Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid = A.UtilityAccountProvider AND \r\n\t\tBilling.AccountBillingAdjustmentElectric.OriginalAccountNumber = A.OriginalAccountNumber\r\n\tWHERE (Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n\r\n\tDELETE from Nypa.UploadNypaBackAccountBilling\r\n\tFROM \r\n\t\tBilling.Account AS A INNER JOIN\r\n\t\tBilling.AccountBilling AS AB ON A.UniqueAccountSeqid = AB.UniqueAccountSeqId AND A.IsCurrentRecord = 'Y' /* added 12/3/2018 for UniqueAccountSeqID */\r\n\t\tINNER JOIN Nypa.UploadNypaBackAccountBilling ON AB.OriginalAccountNumber = Nypa.UploadNypaBackAccountBilling.AccountOriginalAccountNumber AND \r\n\t\tAB.BillingPeriod = Nypa.UploadNypaBackAccountBilling.BillingPeriodRevision AND \r\n\t\tAB.BillingPeriodRevision = Nypa.UploadNypaBackAccountBilling.BillingPeriodRevision AND \r\n\t\tA.AccountSeqid = Nypa.UploadNypaBackAccountBilling.AccountSeqid\r\n\r\n\t-- The status for a missing bill is as follows: BA,NB and the CurrentBillingPeriod that the adjustment\r\n\t-- has occurred.\r\n\tINSERT INTO Billing.AccountBilling\r\n\t\t(OriginalAccountNumber,UploadFileSeqid,AccountSeqid, InvoiceTrackingSeqid, PreviousBillingPeriod, BillingPeriod, BillingPeriodRevision, NextBillingPeriod, CurrentInvoiceAccountBillingGroup, \r\n\t\tManualDataEntry, ManualPaymentOverride, AccountBillingStatus, PreviousAccountBillingStatus, AccountBillingStatusCodePeriod, \r\n\t\tProcessedInTheCurrentPeriod, BillingCycle, SalesType, AccountEnergyUsage, \r\n\t\tAccountDemandUsage, EnergySource, ProductionAndDeliveryTariff, \r\n\t\tBillingPeriodDays, FromDate, ToDate, BillingAction, OriginalBilledAmount, ManualPaymentOverrideAmount, RevisedBilledAmount, TotalAmountDue, \r\n\t\tOriginalBilledAmountPaid, PaidAdjustmentAmount, SplitFiscalYear, ChargeToFiscalYear, ChargeToPriorFiscalYear, AuthenticatedUserID, \r\n\t\tInitialPostingDate, DateAdded, LastUpdate,CurrentAccountBillingInvoiceContractBudgetLine,LastPeriodModified, IsTimeOfDayAccount, UtilityCompanySeqid)\r\n\tSELECT DISTINCT\r\n\t\tA.OriginalAccountNumber,\r\n\t\tnull, -- Need to fix this @AccountBillingAjustmentSeqid,\r\n\t\tA.AccountSeqid, \r\n\t\tnull, -- Insert a null for the InvoiceTracking sequence id \r\n\t\t[dbo].[CreatePreviousPeriodForExchanges] (@BillingPeriod, A.BillingCycle, A.AccountStatus), -- \tAccountBilling.PreviousBillingPeriod\r\n\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision, -- Billing.AccountBillingAdjustmentElectric.BillingPeriod, \r\n\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision, \r\n\t\t[dbo].[CreateNextPeriodForExchanges] (Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision,A.BillingCycle,A.AccountStatus), -- Billing.AccountBillingAdjustmentElectric.NextBillingPeriod\r\n\t\tA.CurrentInvoiceAccountGroup,\r\n\t\t'N',\r\n\t\t'N',\r\n\t\t'BA',\r\n\t\t'NB',\r\n\t\tBilling.ApplicationTimeFrame.BillingPeriod,\r\n\t\t'Y',\r\n\t\tA.BillingCycle, A.SalesType, \r\n\t\tBilling.AccountBillingAdjustmentElectric.AccountEnergyUsage, Billing.AccountBillingAdjustmentElectric.AccountDemandUsage, \r\n\t\tA.EnergySource, \r\n\t\tBilling.AccountBillingAdjustmentElectric.ProductionAndDeliveryTariff, \r\n\t\t[dbo].[CalculateNumberOfBillingDays](Billing.AccountBillingAdjustmentElectric.FromDate,Billing.AccountBillingAdjustmentElectric.ToDate), --Billing.AccountBillingAdjustmentElectric.BillingPeriodDays, \r\n\t\tBilling.AccountBillingAdjustmentElectric.FromDate, \r\n\t\tBilling.AccountBillingAdjustmentElectric.ToDate, \r\n\t\tBilling.AccountBillingAdjustmentElectric.BillingAction,\r\n\t\t@OriginalBilledAmountSetToZero,\r\n\t\t0.00,\r\n\t\tBilling.AccountBillingAdjustmentElectric.TotalReBilledAmount,\r\n\t\t0.00,\r\n\t\t@OriginalBilledAmountSetToZero, --Billing.AccountBillingAdjustmentElectric.BillingAmount since this is a back billing only, zero billed originally\r\n\t\t@OriginalBilledAmountSetToZero, --AccountBilling.PaidAdjustmentAmount, since this is a back billing only, zero billed originally\r\n\t\t[dbo].[IsFiscalYearSplit] (Billing.AccountBillingAdjustmentElectric.FromDate, Billing.AccountBillingAdjustmentElectric.ToDate),\r\n\t\t[dbo].[CalculateFiscalYearIfSplit] (Billing.AccountBillingAdjustmentElectric.FromDate, Billing.AccountBillingAdjustmentElectric.ToDate,@ToDateParm),\r\n\t\t[dbo].[CalculateFiscalYearIfSplit] (Billing.AccountBillingAdjustmentElectric.FromDate, Billing.AccountBillingAdjustmentElectric.ToDate,@FromDateParm),\r\n\t\t@AuthenticatedUserID,\r\n\t\t@BillCreationDate,\r\n\t\tgetdate(), getdate(),\r\n\t\tA.AgencyEnergyBillingBudgetLine,\r\n\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriod, Billing.AccountBillingAdjustmentElectric.IsTimeOfDayAccount, \r\n\t\tBilling.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid\r\n\tFROM \r\n\t\tBilling.Account AS A INNER JOIN\r\n\t\tBilling.AccountBillingAdjustmentElectric INNER JOIN\r\n\t\tBilling.ApplicationTimeFrame ON Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision <> Billing.ApplicationTimeFrame.BillingPeriod ON \r\n\t\tA.UtilityAccountProvider = Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid AND \r\n\t\tA.OriginalAccountNumber = Billing.AccountBillingAdjustmentElectric.OriginalAccountNumber INNER JOIN\r\n\t\tNypa.UploadNypaBackAccountBilling ON /* A.AccountSeqid = Nypa.UploadNypaBackAccountBilling.AccountSeqid */\r\n\t\tA.UniqueAccountSeqid = Nypa.UploadNypaBackAccountBilling.UniqueAccountSeqID AND  A.IsCurrentRecord = 'Y' AND /* Added on 12/13/2018 */\r\n\t\tBilling.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid = Nypa.UploadNypaBackAccountBilling.AccountBillingAdjustmentElectricSeqid\r\n\tWHERE (Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n\r\n\tSET @NumberOfBackBilledRecords = @@rowcount\r\n\r\n\t/* added on 12/20/2018 */\r\n\tUPDATE AB SET UniqueAccountSeqID = A.UniqueAccountSeqid\r\n\tFROM Billing.AccountBilling AS AB INNER JOIN Billing.Account AS A ON AB.AccountSeqID = A.AccountSeqID\r\n\tWHERE AB.UniqueAccountSeqId IS NULL \r\n\r\n\tIF(@NumberOfBackBilledRecords <> @Zero)\r\n\tBEGIN\r\n\t\tINSERT INTO Billing.AccountBillingElectric\r\n\t\t\t(AdjustedAccountElectric,\r\n\t\t\tOriginalAccountNumber, \r\n\t\t\tMonthlyAccountBillingChargesElectric,\r\n\t\t\tAccountBillingRowState, \r\n\t\t\tBillingPeriod, \r\n\t\t\tBillingPeriodRevision,\r\n\t\t\tDeliveryTariffRate, DeliveryTariffEffectiveDate, \r\n\t\t\tCommodityTariffRate, CommodityTariffEffectiveDate, LoadFactor, BillCreationDate, PostMarkDate, DatePaymentDue, DateAcceptanceIntoOEC, \r\n\t\t\tPreviousAccountBalance, FuelAdjustmentAmount, \r\n\t\t\tLatePaymentAmount,\r\n\t\t\tArrearAmount,\r\n\t\t\tCreditedPaidAmount, \r\n\t\t\tCreditedPaymentDate, \r\n\t\t\tDiscountPercentage, \r\n\t\t\tDDDSurchargeAmount, DDDSurchargePercentage, DeliveryConsumption, DeliveryConsumptionOffPeak, \r\n\t\t\tDeliveryConsumptionShoulder, DeliveryDemand, DeliveryDemandOffPeak, DeliveryDemandShoulder, DeliveryStreetLightingFacilityPoints, \r\n\t\t\tCommodityConsumption, CommodityConsumptionOffPeak, CommodityConsumptionShoulder, CommodityDemand, CommodityDemandOffPeak, \r\n\t\t\tCommodityDemandShoulder, CommodityFacilityPoints, GrossReceiptTax, GRTRate,\r\n\t\t\tEnergyCostAdjustment, EnergyCostAdjustmentPercentage, AccountEnergyUsage, AccountDemandUsage, \r\n\t\t\tInitialPostingDate, Notes, AuthenticatedUserID, DateAdded, LastUpdate,\r\n\t\t\tLastPeriodModified, IsTimeOfDayAccount, UtilityCompanySeqid,\r\n\t\t\tCustomerMinimumCharge, IsMinimumBilledCharged, MinimumBilledEnergyDollars, \r\n\t\t\tMinimumBilledDemandDollars, MaxBilledDemandPeriod, MaxBilledDemandUsage, IsSpannedPeriodBill, DeliveryFacilityPointsAmount, \r\n\t\t\tFireAuditTrigger)\r\n\t\tSELECT DISTINCT \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid, --AccountBillingElectric.AdjustedAccountElectric, \r\n\t\t\tA.OriginalAccountNumber,\r\n\t\t\tAB.AccountBillingSeqid, --@CurrentAccountBillingSeqid\r\n\t\t\t2, --AccountBillingElectric.AccountBillingRowState, Assume Update even if it did not exist\r\n\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision, -- @BillingPeriod Billing.AccountBillingAdjustmentElectric.BillingPeriod, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision, --@RevisedBillingPeriod,\r\n\t\t\tA.DeliveryTariffRate, A.DeliveryTariffEffectiveDate, A.CommodityTariffRate, A.CommodityTariffEffectiveDate,\r\n\t\t\t[dbo].[CalculateLoadFactor] (AB.AccountEnergyUsage, AB.AccountDemandUsage, AB.FromDate, AB.ToDate), -- AccountBillingElectric.LoadFactor, \r\n\t\t\t@BillCreationDate, -- BillCreationDate, \r\n\t\t\t@PostMarkDate, --AccountBillingElectric.PostMarkDate\r\n\t\t\t@DatePaymentDue, -- AccountBillingElectric.DatePaymentDue, \r\n\t\t\t@DateAcceptanceIntoOEC, -- AccountBillingElectric.DateAcceptanceIntoOEC, \r\n\t\t\t0.00, --AccountBillingElectric.PreviousAccountBalance, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.FuelAdjustmentAmount,\r\n\t\t\t0.00, --AccountBillingElectric.LatePaymentAmount, \r\n\t\t\t0.00, --AccountBillingElectric.ArrearAmount, \r\n\t\t\t0.00, --AccountBillingElectric.CreditedPaidAmount, -- Updated later from the invoice file\r\n\t\t\t0.00, --AccountBillingElectric.CreditedPaymentDate, -- Updated later from the invoice file\r\n\t\t\t0.00, --AccountBillingElectric.DiscountPercentage, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.DDDSurchargeAmount, Billing.AccountBillingAdjustmentElectric.DDDSurchargePercentage, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryConsumption, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryConsumptionOffPeak, Billing.AccountBillingAdjustmentElectric.DeliveryConsumptionShoulder, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryDemand, Billing.AccountBillingAdjustmentElectric.DeliveryDemandOffPeak, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryDemandShoulder, Billing.AccountBillingAdjustmentElectric.DeliveryStreetLightingFacilityPoints, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityConsumption, Billing.AccountBillingAdjustmentElectric.CommodityConsumptionOffPeak, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityConsumptionShoulder, Billing.AccountBillingAdjustmentElectric.CommodityDemand, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityDemandOffPeak, Billing.AccountBillingAdjustmentElectric.CommodityDemandShoulder, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityFacilityPoints, Billing.AccountBillingAdjustmentElectric.GrossReceiptTax, Billing.AccountBillingAdjustmentElectric.GRTRate, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.EnergyCostAdjustment, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.EnergyCostAdjustmentPercentage, \r\n\t\t\tAB.AccountEnergyUsage, AB.AccountDemandUsage, \r\n\t\t\tAB.InitialPostingDate, \r\n\t\t\tnull, --AccountBillingElectric.Notes, \r\n\t\t\tAB.AuthenticatedUserID, AB.DateAdded, AB.LastUpdate,\r\n\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriod, Billing.AccountBillingAdjustmentElectric.IsTimeOfDayAccount, Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid,\r\n\t\t\tBilling.AccountBillingAdjustmentElectric.CustomerMinimumCharge,\r\n\t\t\tBilling.AccountBillingAdjustmentElectric.IsMinimumBilledCharged, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.MinimumBilledEnergyDollars, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.MinimumBilledDemandDollars, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.MaxBilledDemandPeriod, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.MaxBilledDemandUsage,\r\n\t\t\tBilling.AccountBillingAdjustmentElectric.IsSpannedPeriodBill, \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryFacilityPointsAmount, \r\n\t\t\t'N' -- Do not FireAuditTrigger\r\n\t\tFROM \r\n\t\t\tBilling.AccountBilling AS AB\r\n\t\t\tINNER JOIN Billing.Account AS A ON AB.UniqueAccountSeqId = A.UniqueAccountSeqId AND A.IsCurrentRecord = 'Y' /* added on 12/13/2018 */\r\n\t\t\tINNER JOIN Nypa.UploadNypaBackAccountBilling ON A.UniqueAccountSeqid = Nypa.UploadNypaBackAccountBilling.UniqueAccountSeqid AND A.IsCurrentRecord = 'Y' /* added on 12/13/2018 */ LEFT JOIN\r\n\t\t\tBilling.AccountBillingAdjustmentElectric INNER JOIN\r\n\t\t\tBilling.ApplicationTimeFrame ON Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision <> Billing.ApplicationTimeFrame.BillingPeriod ON \r\n\t\t\tNypa.UploadNypaBackAccountBilling.AccountBillingAdjustmentElectricSeqid = Billing.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid AND \r\n\t\t\tAB.BillingPeriodRevision = Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision AND \r\n\t\t\tAB.BillingPeriod = Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision AND \r\n\t\t\tA.UtilityAccountProvider = Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid AND \r\n\t\t\tA.OriginalAccountNumber = Billing.AccountBillingAdjustmentElectric.OriginalAccountNumber LEFT JOIN\r\n\t\t\tBilling.AccountBillingElectric ON AB.AccountBillingSeqid = Billing.AccountBillingElectric.MonthlyAccountBillingChargesElectric\r\n\t\tWHERE\r\n\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y') AND\r\n\t\t\t(Billing.AccountBillingElectric.AccountBillingElectricSeqid IS NULL) AND\r\n\t\t\t(AB.AccountBillingSeqid IS NOT NULL) AND\r\n\t\t\t(AB.AccountBillingStatus = 'BA')\r\n\r\n\t\tSET @NumberOfBackBilledElectricRecords = @@rowcount;\r\n\r\n\t\tUPDATE Billing.AccountBillingAdjustmentElectric\r\n\t\tSET \r\n\t\t\tProcessedInTheCurrentPeriod ='Y',\r\n\t\t\tAdjustedAccount = A.AccountSeqid, \r\n\t\t\tAdjustedAccountBill = AB.AccountBillingSeqid, \r\n\t\t\tAdjustedAccountBillElectric = Billing.AccountBillingElectric.AccountBillingElectricSeqid,\r\n\t\t\tLastUpdate = getDate(),\r\n\t\t\tAuthenticatedUserID = @AuthenticatedUserID,\r\n\t\t\tUniqueAccountSeqID = A.UniqueAccountSeqid /* added on 12/20/2018 */\r\n\t\tFROM \r\n\t\t\tBilling.AccountBilling AS AB\r\n\t\t\tINNER JOIN Billing.Account AS A ON AB.UniqueAccountSeqId = A.UniqueAccountSeqId and A.IsCurrentRecord = 'Y' /* added on 12/13/2018 */\r\n\t\t\tINNER JOIN NYPA.UploadNypaBackAccountBilling ON A.UniqueAccountSeqid = NYPA.UploadNypaBackAccountBilling.UniqueAccountSeqid  and A.IsCurrentRecord = 'Y' /* added on 12/13/2018 */\r\n\t\t\tLEFT JOIN Billing.AccountBillingAdjustmentElectric\r\n\t\t\tINNER JOIN Billing.ApplicationTimeFrame ON Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision <> Billing.ApplicationTimeFrame.BillingPeriod ON \r\n\t\t\tUploadNypaBackAccountBilling.AccountBillingAdjustmentElectricSeqid = Billing.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid AND \r\n\t\t\tAB.BillingPeriodRevision = Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision AND \r\n\t\t\tAB.BillingPeriod = Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision AND \r\n\t\t\tA.UtilityAccountProvider = Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid AND \r\n\t\t\tA.OriginalAccountNumber = Billing.AccountBillingAdjustmentElectric.OriginalAccountNumber LEFT JOIN\r\n\t\t\tBilling.AccountBillingElectric ON AB.AccountBillingSeqid = AccountBillingElectric.MonthlyAccountBillingChargesElectric\r\n\t\tWHERE\r\n\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y') AND \r\n\t\t\t(Billing.AccountBillingElectric.AccountBillingElectricSeqid IS not NULL) AND \r\n\t\t\t(AB.AccountBillingSeqid IS NOT NULL) AND \r\n\t\t\t(AB.AccountBillingStatus = 'BA')\r\n\t\r\n\t\tSET @NumberOfBackBilledAdjustmentElectricRecords = @@rowcount;\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}