{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_19_helper_UploadAccountDataToEC3",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_19_helper_UploadAccountDataToEC3",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and update billing data related to gas accounts. It interacts with several tables, primarily "
        },
        {
          "type": "text",
          "text": "Billing.AccountBillingAdjustmentGas",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", "
        },
        {
          "type": "text",
          "text": "Billing.AccountBilling",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", and "
        },
        {
          "type": "text",
          "text": "Billing.AccountBillingGas",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ". The procedure performs a series of checks and operations to insert or update billing adjustments and account data for a specified billing period and utility company. It ensures that adjustments are correctly applied and that referential integrity is maintained across related tables."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional checks and operations, including inserts and updates across several tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses transactions and error handling with "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " blocks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It maintains referential integrity between multiple tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes business logic that handles specific cases, such as adjustments for different utility companies and billing actions."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not explicitly take any input parameters. Instead, it initializes and uses several local variables to manage its operations, such as "
        },
        {
          "type": "text",
          "text": "@CurrentBillingPeriod",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", "
        },
        {
          "type": "text",
          "text": "@UtilityCompanySeqid",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", and "
        },
        {
          "type": "text",
          "text": "@InvoiceAccountBillingGroupSeqid",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", which are derived from the "
        },
        {
          "type": "text",
          "text": "Gas.UploadAccountBillingAdjustmentGas",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring several local variables to store counts and identifiers needed for processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves the current billing period, invoice account billing group sequence ID, and utility company sequence ID from the "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadAccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Adjustment Check",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It checks if any account billing adjustments for gas have already been processed for the current billing period and utility company."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses a "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block to manage transactions and handle errors."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If adjustments have not been processed, it inserts new records into "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " from "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadAccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It updates existing records in "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with new adjustment data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert New Records",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If there are new adjustments or original bill rows that do not exist in EC3, it inserts them into "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Referential Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates sequence IDs to maintain referential integrity between "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "Billing.AccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Manual Payment Override",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates the "
                },
                {
                  "type": "text",
                  "text": "ManualPaymentOverrideAmount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for specific billing groups."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved have appropriate indexes on columns used in joins and where clauses to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "XACT_ABORT ON",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " ensures that transactions are rolled back automatically in case of an error, which is crucial for maintaining data integrity."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the data volume is large, consider processing in smaller batches to reduce lock contention and improve performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues if multiple instances are run simultaneously, potentially leading to deadlocks or data inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block captures errors, it raises them without additional context or rollback logic, which could be improved for better error management."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that data in "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadAccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is accurate and complete. Any discrepancies could lead to incorrect billing adjustments."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the data grows, the procedure's performance may degrade if not optimized for large datasets, especially given the multiple joins and updates involved."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure contains hardcoded values (e.g., billing group IDs), which could lead to maintenance challenges if business rules change."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Update History:\r\n--\r\n-- UPDATE   VY  12/20/2018  Modified for  UniqueAccountSeqID and UniqueMeterSeqID\r\n-- =============================================\r\nCREATE  PROCEDURE [ConEd].[usp_Upload_19_helper_UploadAccountDataToEC3]\r\nAS \r\nBEGIN \r\n    DECLARE @NumberOfAdjustmentsAdded INT\r\n    DECLARE @CurrentBillingPeriod VARCHAR(8)\r\n    DECLARE @InvoiceAccountBillingGroupSeqid INT \r\n    DECLARE @UtilityCompanySeqid INT\r\n    DECLARE @HasAccountBillingAdjustmentGasBeenProcessed INT\r\n    DECLARE @HasAccountBillingGasBeenProcessed INT\r\n    DECLARE @HasAccountBillingBeenProcessed INT\r\n    DECLARE @BillingAccountBillingGasUpdateTransactionCount INT\r\n    DECLARE @BillingAccountBillingUpdateTransactionCount INT \r\n    DECLARE @BillingAccountBillingGasInsertTransactionCount INT\r\n    DECLARE @BillingAccountBillingInsertTransactionCount INT \r\n\r\n\t-- Get all of the generalized parameters needed to process the account billing from the Gas.UploadAccountBillingAdjustmentGas\r\n    SELECT TOP (1) @CurrentBillingPeriod = BillingPeriod,\r\n        @InvoiceAccountBillingGroupSeqid = InvoiceAccountBillingGroupSeqid,\r\n        @UtilityCompanySeqid = UtilityCompanySeqid\r\n    FROM Gas.UploadAccountBillingAdjustmentGas\r\n\r\n    SELECT  @HasAccountBillingAdjustmentGasBeenProcessed = COUNT(*)\r\n    FROM Billing.AccountBillingAdjustmentGas\r\n    WHERE   BillingPeriod = @CurrentBillingPeriod AND @UtilityCompanySeqid = UtilityCompanySeqid\r\n            AND InvoiceAccountGroupSeqid = @InvoiceAccountBillingGroupSeqid\r\n\r\n\tDECLARE @T VARCHAR(10) = 'tranProcessAccount' \r\n\tDECLARE @errMessage VARCHAR(max)\r\n\tSET XACT_ABORT ON\r\n\t\r\n\tBEGIN TRY\r\n        IF ( ISNULL(@HasAccountBillingAdjustmentGasBeenProcessed, 1) = 0 ) \r\n        BEGIN\r\n            DECLARE @maxAccountBillingAdjustmentGasSeqid INT\r\n            SELECT  @maxAccountBillingAdjustmentGasSeqid = ISNULL(MAX(AccountBillingAdjustmentGasSeqid), 0)\r\n            FROM Billing.AccountBillingAdjustmentGas\r\n\t\t\r\n\t\t\tINSERT  INTO Billing.AccountBillingAdjustmentGas\r\n\t\t\t\t(UniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\t\tUploadAccountBillingAdjustmentGasSeqid,\r\n\t\t\t\tAccountSeqid,\r\n\t\t\t\tAccountBillingSeqid,\r\n\t\t\t\tAccountBillingGasSeqid,\r\n\t\t\t\tUtilityCompanySeqid,\r\n\t\t\t\tInvoiceAccountGroupSeqid,\r\n\t\t\t\tOriginalAccountNumber,\r\n\t\t\t\tFacilityName,\r\n\t\t\t\tServiceAddress,\r\n\t\t\t\tBillingPeriod,\r\n\t\t\t\tBillingPeriodRevision,\r\n\t\t\t\tAccountStatus,\r\n\t\t\t\tAccountpreviousStatus,\r\n\t\t\t\tAccountStatusPeriod,\r\n\t\t\t\tNumberOfTransactions,\r\n\t\t\t\tNumberOfRebillTransactions,\r\n\t\t\t\tNumberOfCancelTransactions,\r\n\t\t\t\tFirstCanceledBillingPeriod,\r\n\t\t\t\tEstimatedOrActualBilling,\r\n\t\t\t\tInitialCancelFromDate,\r\n\t\t\t\tCurrentBillingToDate,\r\n\t\t\t\tNumberOfBillingPeriods,\r\n\t\t\t\tTotalBillingDaysRebilled,\r\n\t\t\t\tTotalRebilledAmount,\r\n\t\t\t\tTotalCanceledAmount,\r\n\t\t\t\tPriorRevisedBilledAmount,\r\n\t\t\t\tRevisedBilledAmount,\r\n\t\t\t\tCanceledBilledAmount,\r\n\t\t\t\tPriorRevisedCCF,\r\n\t\t\t\tRevisedCCF,\r\n\t\t\t\tCanceledCCF,\r\n\t\t\t\tPriorRevisedTherms,\r\n\t\t\t\tRevisedTherms,\r\n\t\t\t\tCanceledTherms,\r\n\t\t\t\tAverageRebillCostOfGasCharge,\r\n\t\t\t\tAverageRebillThermsFactor,\r\n\t\t\t\tBillingDays,\r\n\t\t\t\tBillingDate,\r\n\t\t\t\tToDate,\r\n\t\t\t\tFromDate,\r\n\t\t\t\tBillingAction,\r\n\t\t\t\tProcessedInTheCurrentPeriod,\r\n\t\t\t\tGasRateCode,\r\n\t\t\t\tTotalCCF,\r\n\t\t\t\tTotalTherms,\r\n\t\t\t\tThermsFactor,\r\n\t\t\t\tCancelFromDate,\r\n\t\t\t\tCancelToDate,\r\n\t\t\t\tCancelTotalCCF,\r\n\t\t\t\tCancelTotalTherms,\r\n\t\t\t\tCancelThermsFactor,\r\n\t\t\t\tCancelBillingDays,\r\n\t\t\t\tProcessEffectiveDate,\r\n\t\t\t\tDerivedFromSpannedBill,\r\n\t\t\t\tSpannedBillingPeriodRevision,\r\n\t\t\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\t\t\tSpannedBilledAmount,\r\n\t\t\t\tSpannedCCF,\r\n\t\t\t\tSpannedThermFactor,\r\n\t\t\t\tSpannedTherm,\r\n\t\t\t\tSpannedMonthlyPercentage,\r\n\t\t\t\tSpannedTotalPercentage,\r\n\t\t\t\tBillCreationDate,\r\n\t\t\t\tPostMarkDate,\r\n\t\t\t\tDatePaymentDue,\r\n\t\t\t\tDateAcceptanceIntoOEC,\r\n\t\t\t\tPaidAdjustmentAmount,\r\n\t\t\t\tNotes,\r\n\t\t\t\tAuthenticatedUserID,\r\n\t\t\t\tDateAdded,\r\n\t\t\t\tLastUpdate,\r\n\t\t\t\tEnergySource,\r\n\t\t\t\tBillingCycle,\r\n\t\t\t\tSalesType,\r\n\t\t\t\tManualPaymentOverride,\r\n\t\t\t\tManualDataEntry,\r\n\t\t\t\tIsTimeOfDayAccount,\r\n\t\t\t\tLastPeriodModified,\r\n\t\t\t\tDiscountedAmount,\r\n\t\t\t\tDiscountPercentage,\r\n\t\t\t\tBalanceDollars,\r\n\t\t\t\tCreditDollars)\r\n\t\t\tSELECT  UniqueAccountSeqID, /* added on 12/20/2018 */ \r\n\t\t\t\tUploadAccountBillingAdjustmentGasSeqid,\r\n\t\t\t\tAccountSeqid,\r\n\t\t\t\tAccountBillingSeqid,\r\n\t\t\t\tAccountBillingGasSeqid,\r\n\t\t\t\tUtilityCompanySeqid,\r\n\t\t\t\t@InvoiceAccountBillingGroupSeqid, --  InvoiceAccountBillingGroupSeqid Con Edison = 2 and National Grid West is 3 or 4\r\n\t\t\t\tOriginalAccountNumber,\r\n\t\t\t\tFacilityName,\r\n\t\t\t\tServiceAddress,\r\n\t\t\t\tBillingPeriod,\r\n\t\t\t\tBillingPeriodRevision,\r\n\t\t\t\tAccountStatus,\r\n\t\t\t\tAccountpreviousStatus,\r\n\t\t\t\tAccountStatusPeriod,\r\n\t\t\t\tNumberOfTransactions,\r\n\t\t\t\tNumberOfRebillTransactions,\r\n\t\t\t\tNumberOfCancelTransactions,\r\n\t\t\t\tFirstCanceledBillingPeriod,\r\n\t\t\t\tEstimatedOrActualBilling,\r\n\t\t\t\tInitialCancelFromDate,\r\n\t\t\t\tCurrentBillingToDate,\r\n\t\t\t\tNumberOfBillingPeriods,\r\n\t\t\t\tTotalBillingDaysRebilled,\r\n\t\t\t\tTotalRebilledAmount,\r\n\t\t\t\tTotalCanceledAmount,\r\n\t\t\t\tPriorRevisedBilledAmount,\r\n\t\t\t\tRevisedBilledAmount,\r\n\t\t\t\tCanceledBilledAmount,\r\n\t\t\t\tPriorRevisedCCF,\r\n\t\t\t\tRevisedCCF,\r\n\t\t\t\tCanceledCCF,\r\n\t\t\t\tPriorRevisedTherms,\r\n\t\t\t\tRevisedTherms,\r\n\t\t\t\tCanceledTherms,\r\n\t\t\t\tAverageRebillCostOfGasCharge,\r\n\t\t\t\tAverageRebillThermsFactor,\r\n\t\t\t\tBillingDays,\r\n\t\t\t\tBillingDate,\r\n\t\t\t\tToDate,\r\n\t\t\t\tFromDate,\r\n\t\t\t\tBillingAction,\r\n\t\t\t\tProcessedInTheCurrentPeriod,\r\n\t\t\t\tGasRateCode,\r\n\t\t\t\tTotalCCF,\r\n\t\t\t\tTotalTherms,\r\n\t\t\t\tThermsFactor,\r\n\t\t\t\tCancelFromDate,\r\n\t\t\t\tCancelToDate,\r\n\t\t\t\tCancelTotalCCF,\r\n\t\t\t\tCancelTotalTherms,\r\n\t\t\t\tCancelThermsFactor,\r\n\t\t\t\tCancelBillingDays,\r\n\t\t\t\tProcessEffectiveDate,\r\n\t\t\t\tDerivedFromSpannedBill,\r\n\t\t\t\tSpannedBillingPeriodRevision,\r\n\t\t\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\t\t\tSpannedBilledAmount,\r\n\t\t\t\tSpannedCCF,\r\n\t\t\t\tSpannedThermFactor,\r\n\t\t\t\tSpannedTherm,\r\n\t\t\t\tSpannedMonthlyPercentage,\r\n\t\t\t\tSpannedTotalPercentage,\r\n\t\t\t\tBillCreationDate,\r\n\t\t\t\tPostMarkDate,\r\n\t\t\t\tDatePaymentDue,\r\n\t\t\t\tDateAcceptanceIntoOEC,\r\n\t\t\t\tPaidAdjustmentAmount,\r\n\t\t\t\tNotes,\r\n\t\t\t\tAuthenticatedUserID,\r\n\t\t\t\tDateAdded,\r\n\t\t\t\tLastUpdate,\r\n\t\t\t\tEnergySource,\r\n\t\t\t\tBillingCycle,\r\n\t\t\t\tSalesType,\r\n\t\t\t\tManualPaymentOverride,\r\n\t\t\t\tManualDataEntry,\r\n\t\t\t\tIsTimeOfDayAccount,\r\n\t\t\t\tLastPeriodModified,\r\n\t\t\t\tDiscountedAmount,\r\n\t\t\t\tDiscountPercentage,\r\n\t\t\t\tBalanceDollars,\r\n\t\t\t\tCreditDollars\r\n\t\t\tFROM Gas.UploadAccountBillingAdjustmentGas\r\n                \r\n\t\t\tSET @NumberOfAdjustmentsAdded = @@rowcount\r\n            SELECT  @NumberOfAdjustmentsAdded\r\n        END;\r\n\t\r\n\t-- Update the adjustments first since the Billing.AccountBillingAdjustmentGas for the current period\r\n\t-- has indetified all of the adjustments that exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t-- is not null and the Billing.AccountBillingGas AccountBillingGasSeqid is not null.\r\n\t-- \r\n\t-- The key to this update is the setting of the LastUpdate to a null value so the audit trigger preserves\r\n\t-- the prior state of the row before the Billing.AccountBilling or Billing.AccountBillingGas are updated\r\n\t-- with the adjusted values.\r\n        SELECT  @HasAccountBillingBeenProcessed = COUNT(*)\r\n        FROM Billing.AccountBillingGas ABG\r\n                INNER JOIN Billing.AccountBilling AB ON ABG.AccountBillingSeqid = AB.AccountBillingSeqid\r\n                                                     AND ABG.UniqueAccountSeqId = AB.UniqueAccountSeqId\r\n                                                     AND ABG.BillingPeriod = AB.BillingPeriod\r\n                                                     AND ABG.BillingPeriodRevision = AB.BillingPeriodRevision\r\n        WHERE   ( ABG.BillingPeriod = @CurrentBillingPeriod )\r\n                AND ( ABG.UtilityCompanySeqid = @UtilityCompanySeqid )\r\n                AND ( AB.CurrentInvoiceAccountBillingGroup = @InvoiceAccountBillingGroupSeqid )\r\n\t--\r\n\t-- if this occurs \"isnull(@HasAccountBillingBeenProcessed,1)= 0\" then set the value to 1 or @HasAccountBillingBeenProcessed > 0 Then do not process\r\n\t--\r\n        IF ( ISNULL(@HasAccountBillingBeenProcessed, 1) = 0 ) \r\n            BEGIN\r\n\t\t--\r\n\t\t--\tNational Grid West Special Ledger current period discount.\r\n\t\t--\tRevisedBilledAmount =Billing.AccountBillingAdjustmentGas.RevisedBilledAmount+Billing.AccountBillingAdjustmentGas.DiscountedAmount\r\n\t\t--\tNote:\r\n\t\t--\t\t\tBilling.AccountBillingAdjustmentGas.DiscountedAmount is zero for Con Ed and National Grid West CRIS accounts\r\n\t\t--\r\n                UPDATE  AB\r\n                SET     LastPeriodModified = ABAG.BillingPeriod,\r\n                        FromDate = ABAG.FromDate,\r\n                        ToDate = ABAG.ToDate,\r\n                        AccountBillingStatus = ABAG.AccountStatus,\r\n                        PreviousAccountBillingStatus = ABAG.AccountpreviousStatus,\r\n                        AccountBillingStatusCodePeriod = ABAG.AccountStatusPeriod,\r\n                        RevisedBilledAmount = ABAG.RevisedBilledAmount\r\n                        + ISNULL(ABAG.DiscountedAmount,\r\n                                 0),\r\n                        AccountEnergyUsage = ABAG.RevisedTherms,\r\n                        NetEnergyUsageChange = ABAG.TotalTherms\r\n                        + ABAG.CancelTotalTherms,\r\n                        NetDollarChange = ABAG.TotalRebilledAmount\r\n                        + ABAG.TotalCanceledAmount,\r\n                        BillingPeriodDays = ABAG.BillingDays,\r\n                        BillingAction = ABAG.BillingAction,\r\n                        UploadFileSeqid = ABAG.AccountBillingAdjustmentGasSeqid,\r\n                        SplitFiscalYear = [dbo].[IsFiscalYearSplit](ABAG.FromDate,\r\n                                                              ABAG.ToDate), -- SplitFiscalYear\r\n                        ChargeToFiscalYear = [dbo].[CalculateFiscalYearIfSplit](ABAG.FromDate,\r\n                                                              ABAG.ToDate,\r\n                                                              'T'), --ChargeToFiscalYear \t\r\n                        ChargeToPriorFiscalYear = [dbo].[CalculateFiscalYearIfSplit](ABAG.FromDate,\r\n                                                              ABAG.ToDate,\r\n                                                              'F'), -- ChargeToPriorFiscalYear\r\n                        LastUpdate = GETDATE(),\r\n                        FireAuditTrigger = 'Y',\r\n\t\t\t\t\t\tActualOrEstimated = ABAG.EstimatedOrActualBilling\r\n                FROM Billing.AccountBillingAdjustmentGas ABAG\r\n                        INNER JOIN Billing.AccountBilling AB ON ABAG.AccountBillingSeqid = AB.AccountBillingSeqid\r\n                                                             AND ABAG.UtilityCompanySeqid = AB.UtilityCompanySeqid\r\n                                                             AND ABAG.UniqueAccountSeqId = AB.UniqueAccountSeqId\r\n                                                             AND ABAG.BillingPeriodRevision = AB.BillingPeriodRevision\r\n                WHERE   ( ABAG.BillingPeriod = @CurrentBillingPeriod )--@CurrentBillingPeriod \r\n\r\n                SET @BillingAccountBillingUpdateTransactionCount = @@rowcount\r\n\t\t--\r\n\t\t--\r\n\t\t-- Update the adjustments first since the Billing.AccountBillingAdjustmentGas for the current period\r\n\t\t-- has indetified all of the adjustments that exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t\t-- is not null and the Billing.AccountBillingGas AccountBillingGasSeqid is not null.\r\n\t\t-- \r\n\t\t-- The key to this update is the setting of the LastUpdate to a null value so the audit trigger preserves\r\n\t\t-- the prior state of the row before the Billing.AccountBilling or Billing.AccountBillingGas are updated\r\n\t\t-- with the adjusted values.\r\n\t\t--\r\n\t\t--  Note: Legacy BalanceDollars & CreditDollars will never be adjusted.  PAH\r\n\t\t--\r\n        UPDATE  ABG\r\n\t\tSET LastPeriodModified = ABAG.BillingPeriod,\r\n            AccountBillingGasRowState = cast( CASE WHEN ISNULL(AccountBillingGasRowState,\r\n                                                    0) + 1 > 1\r\n                                                THEN 2\r\n                                                ELSE 1\r\n                                        END as varchar(1)),\r\n            BilledAmount = ABAG.RevisedBilledAmount,\r\n            DiscountedAmount = ISNULL(ABAG.DiscountedAmount, 0),\r\n            DiscountPercentage = ISNULL(ABAG.DiscountPercentage,0.0),\r\n            TotalCCF = ABAG.RevisedCCF,\r\n            ThermsFactor = ABAG.ThermsFactor,\r\n            TotalTherms = ABAG.RevisedTherms,\r\n            Notes = ABAG.Notes,\r\n            AccountBillingAdjustmentGasSeqid = ABAG.AccountBillingAdjustmentGasSeqid,\r\n            LastUpdate = GETDATE(),\r\n            FireAuditTrigger = 'Y'\r\n        FROM Billing.AccountBillingAdjustmentGas ABAG\r\n            INNER JOIN Billing.AccountBilling AB ON ABAG.AccountBillingSeqid = AB.AccountBillingSeqid\r\n\t\t\t\tAND ABAG.UniqueAccountSeqId = AB.UniqueAccountSeqId\r\n\t\t\t\tAND ABAG.BillingPeriodRevision = AB.BillingPeriodRevision\r\n\t\t\t\tAND ABAG.BillingPeriodRevision = AB.BillingPeriod\r\n\t\t\t\tAND ABAG.AccountBillingSeqid IS NOT NULL\r\n            INNER JOIN Billing.AccountBillingGas ABG ON AB.AccountBillingSeqid = ABG.AccountBillingSeqid\r\n                AND AB.BillingPeriod = ABG.BillingPeriod\r\n                AND AB.BillingPeriodRevision = ABG.BillingPeriodRevision\r\n                AND ABAG.BillingPeriod = @CurrentBillingPeriod --@CurrentBillingPeriod   \r\n\t\t\t\t           \r\n            SET @BillingAccountBillingGasUpdateTransactionCount = @@rowcount\r\n        END;\r\n\t\t--\r\n\t\t--\r\n\t\t-- At this point the Billing.AccountBillingAdjustmentGas for the current period has indetified all of the adjustments or \r\n\t\t-- original bill rows that do not exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t\t-- is null and the Billing.AccountBillingGas AccountBillingGasSeqid is null.\r\n\t\t-- \r\n\t\t--\r\n        DECLARE @maxAccountBillingSeqid INT\r\n        DECLARE @maxAccountBillingGasSeqid INT\r\n        DECLARE @HasAccountBillingInsertsBeenProcessed INT\r\n\r\n        SELECT  @maxAccountBillingSeqid = MAX(AccountBillingSeqid)\r\n        FROM Billing.AccountBilling\t\r\n        SELECT  @maxAccountBillingGasSeqid = MAX(AccountBillingGasSeqid)\r\n        FROM Billing.AccountBillingGas\t\r\n\r\n        SELECT  @HasAccountBillingInsertsBeenProcessed = COUNT(*)\r\n        FROM Billing.AccountBillingAdjustmentGas\r\n        WHERE   AccountBillingSeqid IS NULL\r\n                AND BillingPeriod = @CurrentBillingPeriod\r\n\r\n\t-- if this occurs in the case of \"isnull(@HasAccountBillingInsertsBeenProcessed,1)\" then set the value to 0 and not process\r\n\t-- also if the count of the AccountBillingSeqid that are null is zero do not process since they have already been processed.\r\n    IF (ISNULL(@HasAccountBillingInsertsBeenProcessed, 0) <> 0) \r\n    BEGIN\r\n\t\t--\tCorrection for 'BA' Accounts   FIX this \r\n\t\t--\r\n\t\t--\tcase when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end as OriginalBilledAmount,\r\n\t\t--\tRevisedBilledAmount, --RevisedBilledAmount,\r\n\t\t--\tcase when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end as OriginalBilledAmountPaid,\r\n\t\t--\tPaidAdjustmentAmount,\r\n\t\t--\tIsNull(case when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end,0)+IsNull(PaidAdjustmentAmount,0) as TotalAmountDue,\r\n\t\t--\tIsNull(case when AccountStatus <> 'BA' then RevisedBilledAmount else 0.00 end,0)+IsNull(PaidAdjustmentAmount,0) as CreditedPaidAmount,\r\n        INSERT  INTO Billing.AccountBilling\r\n            (UniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\tOriginalAccountNumber,\r\n            AccountSeqid,\r\n            CurrentInvoiceAccountBillingGroup,\r\n            UtilityCompanySeqid,\r\n            EnergySource,\r\n            IsTimeOfDayAccount,\r\n            LastPeriodModified,\r\n            BillingCycle,\r\n            SalesType,\r\n            PreviousBillingPeriod,\r\n            BillingPeriod,\r\n            BillingPeriodRevision,\r\n            NextMeterReading,\r\n            NextBillingPeriod,\r\n            FromDate,\r\n            ToDate,\r\n            AccountBillingStatus,\r\n            PreviousAccountBillingStatus,\r\n            AccountBillingStatusCodePeriod,\r\n            ManualPaymentOverride,\r\n            OriginalBilledAmount,\r\n            RevisedBilledAmount,\r\n            OriginalBilledAmountPaid,\r\n            PaidAdjustmentAmount,\r\n            TotalAmountDue,\r\n            CreditedPaidAmount,\r\n            CreditedPaidAmountDate,\r\n            AccountEnergyUsage,\r\n            OriginalEnergyUsage,\r\n            AccountDemandUsage,\r\n            AccountEnergyUsage1,\r\n            AccountDemandUsage1,\r\n            ManualDataEntry,\r\n            ProductionAndDeliveryTariff,\r\n            BillingPeriodDays,\r\n            BillCreationDate,\r\n            PostMarkDate,\r\n            DatePaymentDue,\r\n            DateAcceptanceIntoOEC,\r\n            BillingAction,\r\n            ProcessedInTheCurrentPeriod,\r\n            ManualPaymentOverrideAmount,\r\n            InitialPostingDate,\r\n            UploadFileSeqid,\r\n            SplitFiscalYear,\r\n            ChargeToFiscalYear,\r\n            ChargeToPriorFiscalYear,\r\n            Notes,\r\n            AuthenticatedUserID,\r\n            DateAdded,\r\n            LastUpdate,\r\n            NetDollarChange,\r\n            NetEnergyUsageChange,\r\n            NetDemandUsageChange,\r\n\t\t\tActualOrEstimated)\r\n        SELECT  \r\n\t\t\tUniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\tOriginalAccountNumber,\r\n            AccountSeqid,\r\n            InvoiceAccountGroupSeqid,\r\n            UtilityCompanySeqid,\r\n            EnergySource,\r\n            IsTimeOfDayAccount,\r\n            LastPeriodModified,\r\n            BillingCycle,\r\n            SalesType,\r\n            dbo.CreatePreviousPeriod(ABAG.BillingPeriod,\r\n                                        BillingCycle), -- PreviousBillingPeriod\r\n            BillingPeriodRevision, -- BillingPeriod\r\n            BillingPeriodRevision,\r\n            ToDate,\r\n            dbo.CreateNextPeriod(ABAG.BillingPeriod,\r\n                                    BillingCycle),-- NextBillingPeriod\r\n            FromDate, -- NextMeterReading\r\n            ToDate,\r\n            AccountStatus,\r\n            AccountpreviousStatus,\r\n            AccountStatusPeriod,\r\n            ManualPaymentOverride,\r\n            CASE WHEN BillingAction = 'O'\r\n                    THEN ISNULL(RevisedBilledAmount, 0)\r\n                        + ISNULL(DiscountedAmount, 0)\r\n                    ELSE 0.00\r\n            END, -- OriginalBilledAmount,\r\n            RevisedBilledAmount + ISNULL(DiscountedAmount,\r\n                                            0), --RevisedBilledAmount+Discount Amount,\r\n            RevisedBilledAmount + ISNULL(DiscountedAmount,\r\n                                            0), --OriginalBilledAmountPaid,\r\n            PaidAdjustmentAmount,\r\n            CASE WHEN BillingAction = 'O'\r\n                    THEN ISNULL(RevisedBilledAmount\r\n                                + ISNULL(DiscountedAmount, 0),\r\n                                0)\r\n                    ELSE 0.00\r\n            END + ISNULL(PaidAdjustmentAmount, 0), --TotalAmountDue,\r\n            CASE WHEN BillingAction = 'O'\r\n                    THEN ISNULL(RevisedBilledAmount\r\n                                + ISNULL(DiscountedAmount, 0),\r\n                                0)\r\n                    ELSE 0.00\r\n            END + ISNULL(PaidAdjustmentAmount, 0), --CreditedPaidAmount\r\n            DatePaymentDue, --CreditedPaidAmountDate\t\r\n            RevisedTherms, -- AccountEnergyUsage\r\n            RevisedTherms, -- OriginalEnergyUsage\r\n            NULL, --AccountDemandUsage,\r\n            NULL, --AccountEnergyUsage1,\r\n            NULL, --AccountDemandUsage1,\r\n            ManualDataEntry,\r\n            [Common].[CalculateProductionAndDeliveryTariff](UtilityCompanySeqid,\r\n                                            GasRateCode), -- ProductionAndDeliveryTariff,\r\n            BillingDays,\r\n            BillCreationDate,\r\n            PostMarkDate,\r\n            DatePaymentDue,\r\n            DateAcceptanceIntoOEC,\r\n            BillingAction,\r\n            'Y', -- ProcessedInTheCurrentPeriod,\r\n            0.00, -- ManualPaymentOverrideAmount,\r\n            GETDATE(), -- InitialPostingDate\r\n            UploadAccountBillingAdjustmentGasSeqid,\r\n            [dbo].[IsFiscalYearSplit](ABAG.FromDate,\r\n                                        ABAG.ToDate), -- SplitFiscalYear\r\n            [dbo].[CalculateFiscalYearIfSplit](ABAG.FromDate,\r\n                                            ABAG.ToDate,\r\n                                            'T'), --ChargeToFiscalYear\r\n            [dbo].[CalculateFiscalYearIfSplit](ABAG.FromDate,\r\n                                            ABAG.ToDate,\r\n                                            'F'), -- ChargeToPriorFiscalYear\r\n            Notes,\r\n            AuthenticatedUserID,\r\n            GETDATE(), -- DateAdded,\r\n            GETDATE(), -- LastUpdate\r\n            0.00,  --NetDollarChange\r\n            0,--NetEnergyUsageChange\r\n            0.0, --NetDemandUsageChange,\r\n\t\t\tEstimatedOrActualBilling\r\n\t\tFROM Billing.AccountBillingAdjustmentGas ABAG\r\n\t\tWHERE   AccountBillingSeqid IS NULL\r\n            AND BillingPeriod = @CurrentBillingPeriod --@CurrentBillingPeriod\r\n\t\r\n        SET @BillingAccountBillingInsertTransactionCount = @@rowcount\r\n\r\n\t\t-- At this point the Billing.AccountBillingAdjustmentGas for the current period has indetified all of the adjustments or \r\n\t\t-- original bill rows that do not exist in EC3.  The Billing.AccountBilling AccountBillingSeqid\r\n\t\t-- is null and the Billing.AccountBillingGas AccountBillingGasSeqid is null.\r\n        INSERT  INTO Billing.AccountBillingGas\r\n\t\t\t(UniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\tAccountBillingSeqid,\r\n            UtilityCompanySeqid,\r\n            AccountBillingAdjustmentGasSeqid,\r\n            OriginalAccountNumber,\r\n            LastPeriodModified,\r\n            BillingPeriod,\r\n            BillingPeriodRevision,\r\n            AccountBillingGasRowState,\r\n            CommodityTariffRate,\r\n            CommodityTariffEffectiveDate,\r\n            BillCreationDate,\r\n            PostMarkDate,\r\n            DatePaymentDue,\r\n            DateAcceptanceIntoOEC,\r\n            BilledAmount,\r\n            TotalCCF,\r\n            ThermsFactor,\r\n            TotalTherms,\r\n            LevelPaymentPlan,\r\n            DiscountedAmount,\r\n            DiscountPercentage,\r\n            Notes,\r\n            AuthenticatedUserID,\r\n            DateAdded,\r\n            LastUpdate,\r\n            BalanceDollars,\r\n            CreditDollars)\r\n        SELECT  \r\n\t\t\tUniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\tAccountBillingSeqid,\r\n            UtilityCompanySeqid,\r\n            AccountBillingAdjustmentGasSeqid,\r\n            OriginalAccountNumber,\r\n            BillingPeriod,\r\n            BillingPeriodRevision,\r\n            BillingPeriodRevision,\r\n            '1',\r\n            GasRateCode,\r\n            NULL,\r\n            BillCreationDate,\r\n            PostMarkDate,\r\n            DatePaymentDue,\r\n            DateAcceptanceIntoOEC,\r\n            RevisedBilledAmount,\r\n            RevisedCCF,\r\n            ThermsFactor,\r\n            RevisedTherms,\r\n            'N',\r\n            ISNULL(DiscountedAmount, 0),\r\n            ISNULL(DiscountPercentage, 0.0),\r\n            Notes,\r\n            AuthenticatedUserID,\r\n            GETDATE(), -- DateAdded,\r\n            GETDATE(), -- LastUpdate\r\n            BalanceDollars,\r\n            CreditDollars\r\n\t\tFROM Billing.AccountBillingAdjustmentGas\r\n\t\tWHERE AccountBillingSeqid IS NULL\r\n            AND BillingPeriod = @CurrentBillingPeriod --@CurrentBillingPeriod\r\n\r\n        SET @BillingAccountBillingGasInsertTransactionCount = @@rowcount\r\n\t\r\n\t\t\t\t-- The Billing.AccountBilling and the Billing.AccountBillingGas rows have been inserted and their sequence ids were created.\r\n\t\t\t\t-- The two tables are joined to update the sequence id of the the Billing.AccountBilling in the the Billing.AccountBillingGas table. \r\n\t\t\t\t-- It inforces the referential integrity between the two tables.\r\n                UPDATE  Billing.AccountBillingGas\r\n                SET     AccountBillingSeqid = AB.AccountBillingSeqid\r\n                FROM Billing.AccountBilling AB\r\n                        INNER JOIN Billing.AccountBillingGas ABG ON AB.UtilityCompanySeqid = ABG.UtilityCompanySeqid\r\n                                                              AND AB.BillingPeriod = ABG.BillingPeriod\r\n                                                              AND AB.BillingPeriodRevision = ABG.BillingPeriodRevision\r\n                                                              AND AB.UniqueAccountSeqId = ABG.UniqueAccountSeqId\r\n                        INNER JOIN Billing.AccountBillingAdjustmentGas ABAG ON AB.UtilityCompanySeqid = ABAG.UtilityCompanySeqid\r\n                                                              AND AB.BillingPeriod = ABAG.BillingPeriodRevision\r\n                                                              AND AB.BillingPeriodRevision = ABAG.BillingPeriodRevision\r\n                                                              AND AB.UniqueAccountSeqId = ABAG.UniqueAccountSeqId\r\n                WHERE   ( ABAG.AccountBillingSeqid IS NULL )\r\n                        AND ( ABAG.UtilityCompanySeqid = @UtilityCompanySeqid )\r\n                        AND ( ABAG.InvoiceAccountGroupSeqid = @InvoiceAccountBillingGroupSeqid )\r\n                        AND ( ABAG.BillingPeriod = @CurrentBillingPeriod )\r\n\t\t\t--\r\n\t\t\t-- The Billing.AccountBillingAdjustmentGas and the Billing.AccountBillingGas are joined to update the repective sequence ids of the \r\n\t\t\t-- Billing.AccountBilling and the Billing.AccountBillingGas in the Billing.AccountBillingAdjustmentGas table. \r\n\t\t\t-- It inforces the referential integrity between all three tables.\r\n\t\t\t--\r\n\t\t\t--\t\t\t\tBilling.AccountBilling\r\n\t\t\t--\t\t\t\tBilling.AccountBillingGas\r\n\t\t\t--\t\t\t\tBilling.AccountBillingAdjustmentGas\r\n\t\t\tUPDATE ABAG\r\n\t\t\tSET AccountBillingSeqid = ABG.AccountBillingSeqid,\r\n\t\t\t\tAccountBillingGasSeqid = ABG.AccountBillingGasSeqid\r\n\t\t\tFROM Billing.AccountBilling AB\r\n\t\t\t\tINNER JOIN Billing.AccountBillingGas ABG ON AB.UtilityCompanySeqid = ABG.UtilityCompanySeqid\r\n\t\t\t\t\tAND AB.BillingPeriod = ABG.BillingPeriod\r\n\t\t\t\t\tAND AB.BillingPeriodRevision = ABG.BillingPeriodRevision\r\n\t\t\t\t\tAND AB.UniqueAccountSeqId = ABG.UniqueAccountSeqId\r\n\t\t\t\tINNER JOIN Billing.AccountBillingAdjustmentGas ABAG ON AB.UtilityCompanySeqid = ABAG.UtilityCompanySeqid\r\n\t\t\t\t\tAND AB.BillingPeriod = ABAG.BillingPeriodRevision\r\n\t\t\t\t\tAND AB.BillingPeriodRevision = ABAG.BillingPeriodRevision\r\n\t\t\t\t\tAND AB.UniqueAccountSeqId = ABAG.UniqueAccountSeqId\r\n\t\t\tWHERE (ABAG.AccountBillingSeqid IS NULL)\r\n\t\t\t\tAND (ABAG.UtilityCompanySeqid = @UtilityCompanySeqid)\r\n\t\t\t\tAND (ABAG.InvoiceAccountGroupSeqid = @InvoiceAccountBillingGroupSeqid )\r\n\t\t\t\tAND (ABAG.BillingPeriod = @CurrentBillingPeriod)\r\n        END;\t\r\n\r\n\t\t-- update manual payment override amount\r\n        UPDATE  billing.AccountBilling\r\n        SET     ManualPaymentOverrideAmount = TotalAmountDue,\r\n                ManualPaymentOverride = 'Y'\r\n        WHERE   CurrentInvoiceAccountBillingGroup = 2\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\t SELECT @errMessage =  ERROR_MESSAGE()\r\n\t\t RAISERROR(@errMessage, 12, 1)\r\n\tEND CATCH;\r\nEND;"
        }
      ]
    }
  ]
}