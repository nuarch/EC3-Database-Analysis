{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_FinalCheckOfBackBillingAtTheAccountLevel",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_FinalCheckOfBackBillingAtTheAccountLevel",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to perform a series of checks and updates related to back billing at the account level within a billing system. It primarily interacts with tables related to account billing and performs operations to ensure that billing records are correctly matched and updated. The procedure involves selecting, inserting, and updating data across multiple tables, with a focus on identifying discrepancies in billing records and correcting them."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is considered medium due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple SQL operations, including "
                },
                {
                  "type": "text",
                  "text": "SELECT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "INSERT INTO",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "UPDATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses temporary tables and joins across several tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes conditional logic to handle different scenarios of account number matching."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves updating multiple fields across different tables based on complex join conditions."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status varchar(1) output",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This is an output parameter, but it is not utilized within the procedure. It is likely intended to return a status code or message, but the current implementation does not set or use this parameter."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Current Billing Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure starts by retrieving the current billing period from the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table where "
                },
                {
                  "type": "text",
                  "text": "CurrentProcessingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is marked as 'Y'."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Data Selection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It selects records from "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAAccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " where "
                },
                {
                  "type": "text",
                  "text": "AccountBillingSeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is "
                },
                {
                  "type": "text",
                  "text": "NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and the "
                },
                {
                  "type": "text",
                  "text": "RevisedBillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is less than the current billing period. It groups these records by account numbers and billing periods to identify potential back billing issues."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Check for Matching Account Numbers",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It performs a join between "
                        },
                        {
                          "type": "text",
                          "text": "Nypa.UploadNYPAAccountBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "Billing.Account",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to find records where the "
                        },
                        {
                          "type": "text",
                          "text": "CurrentAccountNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " matches both the "
                        },
                        {
                          "type": "text",
                          "text": "OriginalAccountNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "CurrentAccountNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " in the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.Account",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table. It checks for non-zero "
                        },
                        {
                          "type": "text",
                          "text": "CancelBillingAmount",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "CancelAccountEnergyUsage",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", and "
                        },
                        {
                          "type": "text",
                          "text": "CancelAccountDemandUsage",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Check for Non-Matching Account Numbers",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It inserts records into a temporary table "
                        },
                        {
                          "type": "text",
                          "text": "[#AccountX]",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " where the "
                        },
                        {
                          "type": "text",
                          "text": "CurrentAccountNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " matches the "
                        },
                        {
                          "type": "text",
                          "text": "OriginalAccountNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " but not the "
                        },
                        {
                          "type": "text",
                          "text": "CurrentAccountNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " in the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.Account",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table. It checks for non-zero values in the same fields as above."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Billing Records",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It updates "
                        },
                        {
                          "type": "text",
                          "text": "Nypa.UploadNYPAAccountBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " with data from "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " based on the records in "
                        },
                        {
                          "type": "text",
                          "text": "[#AccountX]",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Account Information",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It updates the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.Account",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to correct missing "
                        },
                        {
                          "type": "text",
                          "text": "UtilityTariffRateInformationSeqid",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and sets audit triggers for accounts with a specific "
                        },
                        {
                          "type": "text",
                          "text": "CurrentInvoiceAccountGroup",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Print Statements",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Throughout the procedure, it prints messages indicating the number of rows affected by each operation."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of multiple joins and a temporary table can impact performance, especially if the tables involved are large. Indexes on join columns can help improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Row Count Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "@@ROWCOUNT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " after each major operation helps in debugging and monitoring but does not directly affect performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not include explicit transaction handling, which could lead to concurrency issues if multiple instances run simultaneously."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Unused Output Parameter",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@Status",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " output parameter is not used, which might lead to confusion or errors if the calling application expects a value."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the join conditions will always find matching records. If data integrity is not maintained, updates might not occur as expected."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": There is no error handling mechanism in place. If any operation fails, it could leave the database in an inconsistent state."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the data grows, the performance might degrade due to the complexity of joins and the use of temporary tables without proper indexing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Conditions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on specific conditions (e.g., "
                },
                {
                  "type": "text",
                  "text": "CurrentInvoiceAccountGroup = 1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "), which might not be flexible for future changes in business logic."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE     PROCEDURE [Nypa].[usp_FinalCheckOfBackBillingAtTheAccountLevel] (@Status varchar(1) output)\nas\r\nDECLARE @BillingPeriod VARCHAR(6)\r\n\r\nSELECT @BillingPeriod = BillingPeriod FROM Billing.ApplicationTimeFrame WHERE (CurrentProcessingPeriod = 'Y')\r\n\r\nSELECT CurrentAccountNumber, BillingPeriod, RevisedBillingPeriod, COUNT(*) AS TheCount, MIN(CancelBillingAmount) AS CancelBillingAmount, \r\n                      MIN(NetBillingAmount) AS NetBillingAmount, MIN(BillingAmount) AS BillingAmount\r\nFROM Nypa.UploadNYPAAccountBilling\r\nWHERE (AccountBillingSeqid IS NULL) AND (RevisedBillingPeriod < @BillingPeriod)\r\nGROUP BY CurrentAccountNumber, BillingPeriod, RevisedBillingPeriod\r\n--\r\n--\tCheck for Back bills where both the Nypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.OriginalAccountNumber AND \r\n--\t\t\t\t\t\t\t\t\t     Nypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.CurrentAccountNumber \r\n--\tMatch\r\n--\r\nSELECT \r\n\t\tNypa.UploadNYPAAccountBilling.RevisedBillingPeriod, Nypa.UploadNYPAAccountBilling.CurrentAccountNumber AS ReportedOriginalNumber, \r\n\t\tBilling.Account.CurrentAccountNumber, Billing.Account.OriginalAccountNumber, Nypa.UploadNYPAAccountBilling.AccountSeqid, \r\n\t\tNypa.UploadNYPAAccountBilling.AccountBillingSeqid, Nypa.UploadNYPAAccountBilling.AccountBillingElectricSeqid, \r\n\t\tNypa.UploadNYPAAccountBilling.AccountStatus, Nypa.UploadNYPAAccountBilling.AccountPreviousStatus, \r\n\t\tNypa.UploadNYPAAccountBilling.BillingAmount, Nypa.UploadNYPAAccountBilling.CancelBillingAmount, \r\n\t\tNypa.UploadNYPAAccountBilling.NetBillingAmount, Nypa.UploadNYPAAccountBilling.AccountDemandUsage, \r\n\t\tNypa.UploadNYPAAccountBilling.AccountEnergyUsage, Nypa.UploadNYPAAccountBilling.CancelAccountDemandUsage, \r\n\t\tNypa.UploadNYPAAccountBilling.CancelAccountEnergyUsage\r\nFROM     \r\n\t\tNypa.UploadNYPAAccountBilling INNER JOIN\r\n\t\tBilling.Account ON Nypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.OriginalAccountNumber AND \r\n\t\tNypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.CurrentAccountNumber\r\nWHERE \r\n\t\t(Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod < @BillingPeriod AND \r\n\t\tNypa.UploadNYPAAccountBilling.AccountBillingSeqid IS NULL AND \r\n\t\tNypa.UploadNYPAAccountBilling.CancelBillingAmount <> 0 and \r\n\t\tNypa.UploadNYPAAccountBilling.CancelAccountEnergyUsage <> 0 and \r\n\t\tNypa.UploadNYPAAccountBilling.CancelAccountDemandUsage <> 0)\r\n--\r\n\tPRINT 'The reported original account number matches the current number and back billed incorrectly (Should always be Zero) '+ STR(@@rowcount)\r\n--\r\n--\tCheck for Back bills where both the Nypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.OriginalAccountNumber AND \r\n--\t\t\t\t\t\t\t\t\t     Nypa.UploadNYPAAccountBilling.CurrentAccountNumber <> Billing.Account.CurrentAccountNumber \r\n--\tdo not match\r\n--\r\nSELECT \r\n\t\tNypa.UploadNYPAAccountBilling.RevisedBillingPeriod, Nypa.UploadNYPAAccountBilling.UploadNYPAAccountBillingSeqid, Nypa.UploadNYPAAccountBilling.CurrentAccountNumber AS ReportedOriginalNumber, \r\n\t\tBilling.Account.CurrentAccountNumber, Billing.Account.OriginalAccountNumber, Nypa.UploadNYPAAccountBilling.AccountSeqid, \r\n\t\tNypa.UploadNYPAAccountBilling.AccountBillingSeqid, Nypa.UploadNYPAAccountBilling.AccountBillingElectricSeqid, \r\n\t\tNypa.UploadNYPAAccountBilling.AccountStatus, Nypa.UploadNYPAAccountBilling.AccountPreviousStatus, \r\n\t\tNypa.UploadNYPAAccountBilling.BillingAmount, Nypa.UploadNYPAAccountBilling.CancelBillingAmount,  Nypa.UploadNYPAAccountBilling.CancelAccountDemandUsage, Nypa.UploadNYPAAccountBilling.CancelAccountEnergyUsage,\r\n\t\tNypa.UploadNYPAAccountBilling.NetBillingAmount, Nypa.UploadNYPAAccountBilling.AccountDemandUsage, \r\n\t\tNypa.UploadNYPAAccountBilling.AccountEnergyUsage\r\nINTO\t[#AccountX] \r\nFROM     \r\n\t\tNypa.UploadNYPAAccountBilling INNER JOIN\r\n\t\tBilling.Account ON Nypa.UploadNYPAAccountBilling.CurrentAccountNumber = Billing.Account.OriginalAccountNumber AND \r\n\t\tNypa.UploadNYPAAccountBilling.CurrentAccountNumber <> Billing.Account.CurrentAccountNumber\r\nWHERE    \r\n\t\t(Nypa.UploadNYPAAccountBilling.RevisedBillingPeriod < @BillingPeriod) AND \r\n\t\t(Nypa.UploadNYPAAccountBilling.AccountBillingSeqid IS NULL) AND \r\n\t\t(Nypa.UploadNYPAAccountBilling.CancelBillingAmount <> 0 or Nypa.UploadNYPAAccountBilling.CancelAccountEnergyUsage <> 0 or Nypa.UploadNYPAAccountBilling.CancelAccountDemandUsage <> 0)\r\n--\r\n\tPRINT 'The reported original account number do not matches the current number and back billed incorrectly '+ STR(@@rowcount)\r\n--\r\n\r\nUPDATE    Nypa.UploadNYPAAccountBilling\r\nSET              \r\n\t\tAccountBillingSeqid =Billing.AccountBilling.AccountBillingSeqid,\r\n\t\tAccountBillingElectricSeqid = Billing.AccountBillingElectric.AccountBillingElectricSeqid,\r\n\t\tAccountStatus =Billing.AccountBilling.AccountBillingStatus, \r\n\t\tAccountPreviousStatus =Billing.AccountBilling.PreviousAccountBillingStatus,  \r\n\t\tAccountStatusCodePeriod = @BillingPeriod\r\nFROM     \r\n\t\tBilling.Account INNER JOIN\r\n\t\tBilling.AccountBilling ON Billing.Account.AccountSeqid = Billing.AccountBilling.AccountSeqid INNER JOIN\r\n\t\tBilling.AccountBillingElectric ON \r\n\t\tBilling.AccountBilling.AccountBillingSeqid = Billing.AccountBillingElectric.MonthlyAccountBillingChargesElectric INNER JOIN\r\n\t\t[#AccountX] ON Billing.Account.CurrentAccountNumber = [#AccountX].CurrentAccountNumber AND \r\n\t\tBilling.AccountBilling.BillingPeriodRevision = [#AccountX].RevisedBillingPeriod INNER JOIN\r\n\t\tNypa.UploadNYPAAccountBilling ON Nypa.UploadNYPAAccountBilling.UploadNYPAAccountBillingSeqid = [#AccountX].UploadNYPAAccountBillingSeqid                      \r\n--\r\nupdate  Billing.Account\r\nset     UtilityTariffRateInformationSeqid = Billing.UtilityTariffRateInformation.UtilityTariffRateInformationSeqid ,\r\n        Notes = 'Missing UtilityTariffRateInformationSeqid  was corrected in billing period - '\r\n        + Billing.Account.AccountStatusCodePeriod ,\r\n        FireAuditTrigger = 'Y' ,\r\n        LastUpdate = getdate()\r\nFROM Billing.Account\r\n        inner join Billing.UtilityTariffRateInformation on Billing.Account.UtilityAccountProvider = Billing.UtilityTariffRateInformation.UtilityCompanyTariff\r\n                                                           and Billing.Account.DeliveryTariffRate = Billing.UtilityTariffRateInformation.DeliveryTariffRate\r\n                                                           and Billing.Account.IsTimeOfDayAccount = Billing.UtilityTariffRateInformation.IsTod\r\nwhere   ( Billing.Account.UtilityTariffRateInformationSeqid is null )\r\n        and ( Billing.Account.CurrentInvoiceAccountGroup = 1 )\r\n\r\n--\r\n\tPRINT 'Update the corrections to the reported original account number do not matches the current number and back billed incorrectly '+ STR(@@rowcount)\r\n--"
        }
      ]
    }
  ]
}