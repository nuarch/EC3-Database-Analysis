{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Published",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_AfterPublishingDashboardAndReportTablesRefresh",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_AfterPublishingDashboardAndReportTablesRefresh",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to refresh various reporting tables within a SQL Server database. It performs a series of operations to truncate existing data in specific tables and repopulate them with updated data by executing other stored procedures. The procedure is structured to handle multiple datasets related to energy usage, cost, and other metrics across different agencies and fiscal periods. It also updates a custom reports table and ensures data consistency by updating statistics at the end."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to several factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple operations across various tables and datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses cursors for iterative data processing, which adds complexity."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It executes multiple other stored procedures, each potentially complex in its own right."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves dynamic data retrieval and insertion based on current fiscal periods and agency data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes temporary table operations and updates, which require careful management of resources and data integrity."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters directly. However, it relies on data from other stored procedures and tables, such as "
        },
        {
          "type": "text",
          "text": "Published.MonthlyPublishedSummaryData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " and "
        },
        {
          "type": "text",
          "text": "Billing.AgencyDivision",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", to determine the current billing period and active agencies."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization and Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by printing timestamps and messages to indicate the start of each major operation."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Refresh Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": For each reporting table, the procedure:"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Truncates the existing data."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts new data by executing a corresponding stored procedure."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": For tables requiring agency-specific data, it uses cursors to iterate over active agencies and execute stored procedures for each agency."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Table Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It creates temporary tables to aggregate citywide data, which are then used to update main tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Custom Reports Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It drops and recreates the "
                },
                {
                  "type": "text",
                  "text": "Published.CustomReportsData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table with updated information, ensuring data consistency by removing extra spaces in certain fields."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing and Statistics",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It creates a clustered index on the "
                },
                {
                  "type": "text",
                  "text": "CustomReportsData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table and updates statistics for the database to optimize query performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncate and Insert Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Frequent truncation and insertion can be resource-intensive, especially for large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Cursors can be slow and resource-heavy, particularly when processing large numbers of records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of temporary tables can impact performance if not managed properly, especially if they grow large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Creating a clustered index on the "
                },
                {
                  "type": "text",
                  "text": "CustomReportsData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table helps improve query performance but can be costly during the index creation phase."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Statistics Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Regularly updating statistics is beneficial for query optimization but can be resource-intensive."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency and Locking",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating tables and using cursors can lead to locking issues, affecting concurrent access to the database."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to incomplete operations if an error occurs."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Resource Utilization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": High resource usage due to extensive data processing and cursor operations could impact overall database performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The reliance on external stored procedures for data insertion means that any changes or errors in those procedures could affect data integrity."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the current approach may not scale well, particularly with the use of cursors and temporary tables."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Published].[usp_AfterPublishingDashboardAndReportTablesRefresh]\nAS\r\nBEGIN\t\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_CostPerUnitUsageRetrieveCitywideRolling12Months ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_CostPerUnitUsageRetrieveCitywideRolling12Months;\r\n\r\n\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_CostPerUnitUsageRetrieveCitywideRolling12Months\r\n\t\t(AgencyCodeOEC\r\n\t\t,FiscalYear\r\n\t\t,BillingPeriod\r\n\t\t,[Label]\r\n\t\t,CalendarYear\r\n\t\t,[MonthName]\r\n\t\t,MonthYear\r\n\t\t,EnergyType\r\n\t\t,EnergyUsage\r\n\t\t,DemandUsage\r\n\t\t,BilledAmount\r\n\t\t,CostPerUnitUsage\r\n\t\t,BTU\r\n\t\t,CurrentPeriod)\r\n\tEXEC Report.USP_AgencyDashboard_CostPerUnitUsageRetrieveCitywideRolling12Months @publishedBillingPeriod = DEFAULT;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_EstimatedAccountsPercentageRetrieveCitywideRolling12Months ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_EstimatedAccountsPercentageRetrieveCitywideRolling12Months;\r\n\r\n\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_EstimatedAccountsPercentageRetrieveCitywideRolling12Months\r\n\t\t(AgencyCodeOEC\r\n\t\t,BillingPeriod\r\n\t\t,Category\r\n\t\t,[Label]\r\n\t\t,[Count]\r\n\t\t,TotalCount\r\n\t\t,[Percentage])\r\n\tEXEC Report.USP_AgencyDashboard_EstimatedAccountsPercentageRetrieveCitywideRolling12Months @publishedBillingPeriod = DEFAULT;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_AnnualEnergyUsageRetrieveCitywideCurrentVsPriorFY ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_AnnualEnergyUsageRetrieveCitywideCurrentVsPriorFY;\r\n\r\n\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_AnnualEnergyUsageRetrieveCitywideCurrentVsPriorFY\r\n\t\t(AgencyCodeOEC\r\n\t\t,FiscalYear\r\n\t\t,BillingPeriod\r\n\t\t,CalendarYear\r\n\t\t,[MonthName]\r\n\t\t,MonthYear\r\n\t\t,EnergyUsage\r\n\t\t,DemandUsage\r\n\t\t,BilledAmount\r\n\t\t,BTU\r\n\t\t,CurrentPeriod)\r\n\tEXEC Report.USP_AgencyDashboard_AnnualEnergyUsageRetrieveCitywideCurrentVsPriorFY;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_HeatingCoolingDegreeDaysCounts ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_HeatingCoolingDegreeDaysCounts;\r\n\r\n\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_HeatingCoolingDegreeDaysCounts\r\n\t\t(FiscalYear\r\n\t\t,Category\r\n\t\t,BaseHeatingDegreeDays\r\n\t\t,BaseCoolingDegreeDays\r\n\t\t,NormalCoolingDegreeDays\r\n\t\t,NormalHeatingDegreeDays\r\n\t\t,SortOrder)\r\n\tEXEC Report.USP_AgencyDashboard_HeatingCoolingDegreeDaysCounts;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_EstimatedAccountsPercentageRetrieveAgencyRolling12Months ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_EstimatedAccountsPercentageRetrieveAgencyRolling12Months;\r\n\r\n\tDECLARE @Agency0 AS VARCHAR(6);\r\n\tDECLARE AgencyCursor CURSOR FOR SELECT AgencyCodeOEC FROM Billing.AgencyDivision WHERE Inactive = 'N' AND AgencyCodeOEC IS NOT NULL;\r\n\tOPEN AgencyCursor;\r\n\tFETCH NEXT FROM AgencyCursor INTO @Agency0;\r\n\tWHILE (@@FETCH_STATUS = 0)\r\n\tBEGIN\r\n\t\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_EstimatedAccountsPercentageRetrieveAgencyRolling12Months\r\n\t\t\t(AgencyCodeOEC, BillingPeriod, category, [Label], [Count], TotalCount, [Percentage])\r\n\t\tEXEC Report.USP_AgencyDashboard_EstimatedAccountsPercentageRetrieveAgencyRolling12Months @agencyCode = @Agency0,@publishedBillingPeriod = DEFAULT;\r\n\t\tFETCH NEXT FROM AgencyCursor INTO @Agency0;\r\n\tEND; \r\n\tCLOSE AgencyCursor;\r\n\tDEALLOCATE AgencyCursor;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_AgencyEnergyUsageByFacilityStatistics ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_AgencyEnergyUsageByFacilityStatistics;\r\n\r\n\tDECLARE @Agency1 AS VARCHAR(6);\r\n\tDECLARE AgencyCursor CURSOR FOR SELECT AgencyCodeOEC FROM Billing.AgencyDivision WHERE Inactive = 'N' AND AgencyCodeOEC IS NOT NULL;\r\n\tOPEN AgencyCursor;\r\n\tFETCH NEXT FROM AgencyCursor INTO @Agency1;\r\n\tWHILE (@@FETCH_STATUS = 0)\r\n\tBEGIN\r\n\t\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_AgencyEnergyUsageByFacilityStatistics\r\n\t\t\t(AgencyCodeOEC, BillingPeriod, Category, [Label], [Count], TotalCount, [Percent])\r\n\t\tEXEC Report.USP_AgencyDashboard_AgencyEnergyUsageByFacilityStatistics @agencyCode = @Agency1,@countThreshold = 10, @percentThreshold = 80.0;\r\n\t\tFETCH NEXT FROM AgencyCursor INTO @Agency1;\r\n\tEND; \r\n\tCLOSE AgencyCursor;\r\n\tDEALLOCATE AgencyCursor;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_MonthlyEnergyUsageRetrieveAgencyCurrentFY ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_MonthlyEnergyUsageRetrieveAgencyCurrentFY;\r\n\r\n\tDECLARE @Agency2 AS VARCHAR(6); \r\n\tDECLARE AgencyCursor CURSOR FOR SELECT AgencyCodeOEC FROM Billing.AgencyDivision WHERE Inactive = 'N' AND AgencyCodeOEC IS NOT NULL;\r\n\tOPEN AgencyCursor;\r\n\tFETCH NEXT FROM AgencyCursor INTO @Agency2;\r\n\tWHILE (@@FETCH_STATUS = 0)\r\n\tBEGIN\r\n\t\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_MonthlyEnergyUsageRetrieveAgencyCurrentFY\r\n\t\t\t(AgencyCodeOEC, FiscalYear, BillingPeriod, CalendarYear, [MonthName], MonthYear, EnergyType, EnergyUsage, DemandUsage, BilledAmount, CostPerUnitUsage, BTU, CurrentPeriod)\r\n\t\tEXEC Report.USP_AgencyDashboard_MonthlyEnergyUsageRetrieveAgencyCurrentFY @agencyCode = @Agency2;\r\n\t\tFETCH NEXT FROM AgencyCursor INTO @Agency2;\r\n\tEND; \r\n\tCLOSE AgencyCursor;\r\n\tDEALLOCATE AgencyCursor;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_CostPerUnitUsageRetrieveAgencyRolling12Months ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_CostPerUnitUsageRetrieveAgencyRolling12Months;\r\n\r\n\tDECLARE @Agency3 AS VARCHAR(6);\r\n\tDECLARE AgencyCursor CURSOR FOR SELECT AgencyCodeOEC FROM Billing.AgencyDivision WHERE Inactive = 'N' AND AgencyCodeOEC IS NOT NULL;\r\n\tOPEN AgencyCursor;\r\n\tFETCH NEXT FROM AgencyCursor INTO @Agency3;\r\n\tWHILE (@@FETCH_STATUS = 0)\r\n\tBEGIN\r\n\t\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_CostPerUnitUsageRetrieveAgencyRolling12Months\r\n\t\t(AgencyCodeOEC, FiscalYear, BillingPeriod, [Label], CalendarYear, [MonthName], MonthYear, EnergyType, EnergyUsage, DemandUsage, BilledAmount, CostPerUnitUsage, BTU, CurrentPeriod)\r\n\t\tEXEC Report.USP_AgencyDashboard_CostPerUnitUsageRetrieveAgencyRolling12Months @agencyCode = @Agency3,@publishedBillingPeriod = DEFAULT;\r\n\t\tFETCH NEXT FROM AgencyCursor INTO @Agency3;\r\n\tEND; \r\n\tCLOSE AgencyCursor;\r\n\tDEALLOCATE AgencyCursor;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_AnnualEnergyUsageRetrieveAgencyCurrentVsPriorFY ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_AnnualEnergyUsageRetrieveAgencyCurrentVsPriorFY;\r\n\r\n\tDECLARE @Agency4 AS VARCHAR(6);\r\n\tDECLARE AgencyCursor CURSOR FOR SELECT AgencyCodeOEC FROM Billing.AgencyDivision WHERE Inactive = 'N' AND AgencyCodeOEC IS NOT NULL;\r\n\tOPEN AgencyCursor;\r\n\tFETCH NEXT FROM AgencyCursor INTO @Agency4;\r\n\tWHILE (@@FETCH_STATUS = 0)\r\n\tBEGIN\r\n\t\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_AnnualEnergyUsageRetrieveAgencyCurrentVsPriorFY\r\n\t\t(AgencyCodeOEC, FiscalYear, BillingPeriod, CalendarYear, [MonthName], MonthYear, EnergyUsage, DemandUsage, BilledAmount, BTU, CurrentPeriod)\r\n\t\tEXEC Report.USP_AgencyDashboard_AnnualEnergyUsageRetrieveAgencyCurrentVsPriorFY @agencyCode = @Agency4;\r\n\t\tFETCH NEXT FROM AgencyCursor INTO @Agency4;\r\n\tEND; \r\n\tCLOSE AgencyCursor;\r\n\tDEALLOCATE AgencyCursor;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading eport.EC3Dashboard_AgencyDashboard_UsageDemandDeviationCurrentVsPriorPeriod ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_UsageDemandDeviationCurrentVsPriorPeriod;\r\n\r\n\tDECLARE @Agency5 AS VARCHAR(6);\r\n\tDECLARE AgencyCursor CURSOR FOR SELECT AgencyCodeOEC FROM Billing.AgencyDivision WHERE Inactive = 'N' AND AgencyCodeOEC IS NOT NULL;\r\n\tOPEN AgencyCursor;\r\n\tFETCH NEXT FROM AgencyCursor INTO @Agency5;\r\n\tWHILE (@@FETCH_STATUS = 0)\r\n\tBEGIN\r\n\t\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_UsageDemandDeviationCurrentVsPriorPeriod\r\n\t\t(AgencyCodeOEC, BillingPeriod, Category, [Label], EnergyType, [Count], TotalCount, [Percentage])\r\n\t\tEXEC Report.USP_AgencyDashboard_UsageDemandDeviationCurrentVsPriorPeriod @agencyCode = @Agency5,@usageThreshold = 25.0,@demandThreshold = 25.0;\r\n\t\tFETCH NEXT FROM AgencyCursor INTO @Agency5;\r\n\tEND; \r\n\tCLOSE AgencyCursor;\r\n\tDEALLOCATE AgencyCursor;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_MonthlyEnergyChangesComparedToSameMonth...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_MonthlyEnergyChangesComparedToSameMonth;\r\n\r\n\tDECLARE @Agency6 AS VARCHAR(6);\r\n\tDECLARE AgencyCursor CURSOR FOR SELECT AgencyCodeOEC FROM Billing.AgencyDivision WHERE Inactive = 'N' AND AgencyCodeOEC IS NOT NULL;\r\n\tOPEN AgencyCursor;\r\n\tFETCH NEXT FROM AgencyCursor INTO @Agency6;\r\n\tWHILE (@@FETCH_STATUS = 0)\r\n\tBEGIN\r\n\t\tINSERT INTO  Report.EC3Dashboard_AgencyDashboard_MonthlyEnergyChangesComparedToSameMonth\r\n\t\t(Agency\r\n\t\t,[Month]\r\n\t\t,AgencyChange\r\n\t\t,CityChange)\r\n\t\tEXEC Report.USP_AgencyDashboard_MonthlyEnergyChangesComparedToSameMonth @AgencyOEC = @Agency6;\r\n\t\tFETCH NEXT FROM AgencyCursor INTO @Agency6;\r\n\tEND; \r\n\tCLOSE AgencyCursor;\r\n\tDEALLOCATE AgencyCursor;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_AnnualEnergyUseComparedtoCity ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_AnnualEnergyUseComparedtoCity;\r\n\r\n\tDECLARE @Agency7 AS VARCHAR(6); \r\n\tDECLARE AgencyCursor CURSOR FOR SELECT AgencyCodeOEC FROM Billing.AgencyDivision WHERE Inactive = 'N' AND AgencyCodeOEC IS NOT NULL;\r\n\tOPEN AgencyCursor;\r\n\tFETCH NEXT FROM AgencyCursor INTO @Agency7;\r\n\tWHILE (@@FETCH_STATUS = 0)\r\n\tBEGIN\r\n\t\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_AnnualEnergyUseComparedtoCity (Agency, FiscalYear, AgencyRatio, CitywideRatio)\r\n\t\tEXEC Report.USP_AgencyDashboard_AnnualEnergyUseComparedtoCity @AgencyOEC = @Agency7;\r\n\t\tFETCH NEXT FROM AgencyCursor INTO @Agency7;\r\n\tEND; \r\n\tCLOSE AgencyCursor;\r\n\tDEALLOCATE AgencyCursor;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_FY_UtilityEnergyAgencyVsCW ...................';\r\n\t\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_FY_UtilityEnergyAgencyVsCW;\r\n\r\n\tDECLARE @CurrentPublishedBillingPeriodx AS VARCHAR(6) = (SELECT MAX(PublishedBillingPeriod) FROM Published.MonthlyPublishedSummaryData);\r\n\tDECLARE @currentFiscalYeary AS VARCHAR(4) = (SELECT dbo.CalculateFiscalYear(@CurrentPublishedBillingPeriodx));\r\n\tDECLARE @StartFiscalYearx AS INT = SUBSTRING(dbo.JulyPeriodFiveFiscalYearsAgo(@currentFiscalYeary), 1, 4);\r\n\r\n\tSELECT talsbA.FiscalYear, SUM(talsbA.BTU) AS CWBTU\r\n\tINTO #CityWideBTUs\r\n\tFROM Published.TemporalAccountLevelSummaryByAgency AS talsba\r\n\tWHERE talsbA.EffectiveStartPeriod < =  @CurrentPublishedBillingPeriodx\r\n\t\tAND talsbA.EffectiveEndPeriod > @CurrentPublishedBillingPeriodx\r\n\t\tAND talsbA.FiscalYear> = @StartFiscalYearx AND talsbA.FiscalYear <@currentFiscalYeary\r\n\tGROUP BY talsbA.FiscalYear;\r\n\r\n\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_FY_UtilityEnergyAgencyVsCW\r\n\t\t(AgencyOECID\r\n\t\t,FiscalYear\r\n\t\t,CitywideMMBTUs\r\n\t\t,AgencyMMBTUs)\r\n\tSELECT \r\n\t\ttalsbA.AgencyCodeOEC\r\n\t\t,talsbA.FiscalYear\r\n\t\t,0\r\n\t\t,SUM(talsbA.BTU) \r\n\tFROM Published.TemporalAccountLevelSummaryByAgency AS talsba\r\n\tWHERE talsbA.EffectiveStartPeriod < =  @CurrentPublishedBillingPeriodx\r\n\t\tAND talsbA.EffectiveEndPeriod > @CurrentPublishedBillingPeriodx\r\n\t\tAND talsbA.FiscalYear> = @StartFiscalYearx AND talsbA.FiscalYear <@currentFiscalYeary\r\n\tGROUP BY talsbA.FiscalYear, talsbA.AgencyCodeOEC\r\n\tORDER BY talsbA.FiscalYear;\r\n\r\n\tUPDATE t\r\n\tSET CitywideMMBTUs = cwbu.CWBTU\r\n\tFROM #CityWideBTUs AS cwbu\r\n\t\tINNER JOIN Report.EC3Dashboard_AgencyDashboard_FY_UtilityEnergyAgencyVsCW AS t ON t.Fiscalyear = cwbu.FiscalYear;\r\n\r\n\t-- insert parent agencies\r\n\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_FY_UtilityEnergyAgencyVsCW\r\n\t\t(AgencyOECID\r\n\t\t,FiscalYear\r\n\t\t,CitywideMMBTUs\r\n\t\t,AgencyMMBTUs)\r\n\tSELECT ad2.AgencyCodeOEC ParentAgOEC,t.FiscalYear, MAX(t.CitywideMMBTUs), SUM(t.AgencyMMBTUs)\r\n\tFROM Billing.AgencyDivision AS adp\r\n\t\tINNER JOIN Report.EC3Dashboard_AgencyDashboard_FY_UtilityEnergyAgencyVsCW t ON adp.AgencyCodeOEC = t.AgencyOECID\r\n\t\tINNER JOIN Billing.AgencyDivision AS ad2 ON ad2.AgencyDivisionSeqid = adp.ParentAgencyDivisionSeqid\r\n\tGROUP BY ad2.AgencyCodeOEC, t.FiscalYear;\r\n\r\n\t-----------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Report.EC3Dashboard_AgencyDashboard_FY_CO2EmissionsAgencyVsCW ...................';\r\n\r\n\tTRUNCATE TABLE Report.EC3Dashboard_AgencyDashboard_FY_CO2EmissionsAgencyVsCW;\r\n\r\n\tDECLARE @CurrentPublishedBillingPeriody AS VARCHAR(6) = (SELECT MAX(PublishedBillingPeriod) FROM Published.MonthlyPublishedSummaryData)\r\n\tDECLARE @currentFiscalYearx AS VARCHAR(4) = (SELECT dbo.CalculateFiscalYear(@CurrentPublishedBillingPeriody));\r\n\tDECLARE @StartFiscalYeary AS INT = SUBSTRING(dbo.JulyPeriodFiveFiscalYearsAgo(@currentFiscalYearx), 1, 4);\r\n\r\n\tSELECT talsbA.FiscalYear, SUM(talsbA.CO2) CWC2\r\n\tINTO #CityWideCO2\r\n\tFROM Published.TemporalAccountLevelSummaryByAgency AS talsba\r\n\tWHERE talsbA.EffectiveStartPeriod < =  @CurrentPublishedBillingPeriody\r\n\t\tAND talsbA.EffectiveEndPeriod > @CurrentPublishedBillingPeriody\r\n\t\tAND talsbA.FiscalYear> = @StartFiscalYeary AND talsbA.FiscalYear <@currentFiscalYearx\r\n\tGROUP BY talsbA.FiscalYear;\r\n\r\n\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_FY_CO2EmissionsAgencyVsCW\r\n\t\t(AgencyOECID\r\n\t\t,FiscalYear\r\n\t\t,CitywideCO2Emissions\r\n\t\t,AgencyCO2Emissions)\r\n\tSELECT \r\n\t\ttalsbA.AgencyCodeOEC\r\n\t\t,talsbA.FiscalYear\r\n\t\t,0\r\n\t\t,SUM(talsbA.CO2) \r\n\tFROM Published.TemporalAccountLevelSummaryByAgency AS talsba\r\n\tWHERE talsbA.EffectiveStartPeriod < =  @CurrentPublishedBillingPeriody\r\n\t\tAND talsbA.EffectiveEndPeriod > @CurrentPublishedBillingPeriody\r\n\t\tAND talsbA.FiscalYear> = @StartFiscalYeary AND talsbA.FiscalYear < @currentFiscalYearx\r\n\tGROUP BY talsbA.FiscalYear, talsbA.AgencyCodeOEC\r\n\tORDER BY talsbA.FiscalYear;\r\n\r\n\tUPDATE t\r\n\tSET t.CitywideCO2Emissions = cwco.CWC2\r\n\tFROM Report.EC3Dashboard_AgencyDashboard_FY_CO2EmissionsAgencyVsCW AS t\r\n\tINNER JOIN #CityWideCO2 AS cwco ON t.Fiscalyear = cwco.FiscalYear;\r\n\r\n\tINSERT INTO Report.EC3Dashboard_AgencyDashboard_FY_CO2EmissionsAgencyVsCW\r\n\t\t(AgencyOECID\r\n\t\t,FiscalYear\r\n\t\t,CitywideCO2Emissions\r\n\t\t,AgencyCO2Emissions)\r\n\tSELECT ad2.AgencyCodeOEC AS ParentAgOEC, t.FiscalYear, MAX(t.CitywideCO2Emissions), SUM(t.AgencyCO2Emissions)\r\n\tFROM Billing.AgencyDivision AS adp\r\n\t\tINNER JOIN Report.EC3Dashboard_AgencyDashboard_FY_CO2EmissionsAgencyVsCW AS t ON adp.AgencyCodeOEC = t.AgencyOECID\r\n\t\tINNER JOIN Billing.AgencyDivision AS ad2 ON ad2.AgencyDivisionSeqid = adp.ParentAgencyDivisionSeqid\r\n\tGROUP BY ad2.AgencyCodeOEC, t.FiscalYear;\r\n\r\n\t-------------------------------------------\r\n\tDECLARE @PBP AS VARCHAR(6) = (SELECT MAX(PublishedBillingPeriod) FROM Published.MonthlyPublishedSummaryData);\r\n\tEXEC Billing.usp_Load_EstimatedActualCounts @PublishedBillingPeriod = @PBP, @EmailAddress = 'zdurmaz@dcas.nyc.gov';\r\n\r\n\t-------------------------------------------------------------\r\n\tPRINT 'Started at: ' + CAST(GETDATE() AS VARCHAR(23));\r\n\tPRINT 'Loading Published.CustomReportsData ...................';\r\n\r\n\tDROP TABLE Published.CustomReportsData;\r\n\r\n\tSELECT DISTINCT AA.AgencyDivisionSeqid AS AgencyDivisionSeqId\r\n\t\t,AA.AgencyCodeOEC\r\n\t\t,AA.AgencyName + ' (' + AD.AgencyShortDesc + ') ' AS AgencyName\r\n\t\t,AA.FacilitySeqid AS FacilitySeqId\r\n\t\t,AA.OecFacilityNumber\r\n\t\t,AA.FacilityName\r\n\t\t,AA.UtilityCompanySeqid AS UtilityCompanySeqId\r\n\t\t,AA.UtilityCompany\r\n\t\t,AA.EnergyType\r\n\t\t,AA.InvoiceAccountBillingGroupDesc AS InvoiceBillingGroup\r\n\t\t,AA.CurrentInvoiceAccountBillingGroup AS InvoiceBillingGroupSeqId\r\n\t\t,AA.UniqueAccountSeqID AS UniqueAccountSeqId\r\n\t\t,AA.CurrentAccountNumber\r\n\t\t,A.UtilityServiceAccountName\r\n\t\t,AM.UniqueMeterSeqid AS UniqueMeterSeqId\r\n\t\t,AM.CurrentMeterNumber\r\n\t\t,UTC.Id AS TariffClassSeqId\r\n\t\t,UTC.[Name] AS TariffClassDescription\r\n\t\t,A.Tension\r\n\t\t,AD.IsSelfFunded AS FundedType\r\n\t\t,CASE WHEN IAG.BillingType = 'E' THEN 'Electrical' ELSE 'Manual' END AS BillingType\r\n\t\tINTO Published.CustomReportsData\r\n\tFROM Published.AccountLevelRawDataForCurrentPeriod AS AA\r\n\t\tINNER JOIN Billing.AgencyDivision AS AD ON AD.AgencyCodeOEC = AA.AgencyCodeOEC\r\n\t\tINNER JOIN Billing.Account AS A ON A.AccountSeqid = AA.AccountSeqid\r\n\t\tINNER JOIN Billing.UtilityTariffRateInformation AS utri ON utri.UtilityTariffRateInformationSeqid = AA.UtilityTariffRateInformationSeqid\r\n\t\tINNER JOIN Billing.UtilityTariffClass AS UTC ON UTC.[Name] = utri.ShortDesc\r\n\t\tINNER JOIN Billing.InvoiceAccountGroup AS IAG ON IAG.InvoiceAccountGroupSeqid = A.CurrentInvoiceAccountGroup\r\n\t\tLEFT JOIN Published.AccountMeterLevelRawDataForCurrentPeriod AS AM ON AM.AccountSeqid = AA.AccountSeqid\r\n\tWHERE AA.BillingPeriod = (SELECT MAX(PublishedBillingPeriod) FROM Published.AccountLevelRawDataForCurrentPeriod);\r\n\r\n\tUPDATE Published.CustomReportsData SET UtilityServiceAccountName = REPLACE(UtilityServiceAccountName,'  ',' ') WHERE CHARINDEX('  ', UtilityServiceAccountName) > 0;\r\n\tUPDATE Published.CustomReportsData SET FacilityName = REPLACE(FacilityName,'  ',' ') WHERE CHARINDEX('  ', FacilityName) > 0;\r\n\r\n\tCREATE CLUSTERED INDEX PK_CustomReportsData\tON Published.CustomReportsData (UniqueAccountSeqId, UniqueMeterSeqId);\r\n\r\n\tEXEC sp_updatestats;\r\nEND;"
        }
      ]
    }
  ]
}