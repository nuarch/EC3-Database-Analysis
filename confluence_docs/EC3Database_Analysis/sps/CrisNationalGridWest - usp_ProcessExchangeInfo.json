{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CrisNationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessExchangeInfo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessExchangeInfo",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process exchange records for a utility company. It retrieves unprocessed exchange records from the "
        },
        {
          "type": "text",
          "text": "CrisNationalGridWest.UploadExchangeDetail",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table, validates them, and dispatches them to specific stored procedures based on the "
        },
        {
          "type": "text",
          "text": "ExchangeCode",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ". The procedure handles different types of exchange codes, performs validation checks, and logs errors if any issues arise during processing."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level is medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure involves multiple conditional checks and validations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a cursor to iterate over records, which can be complex to manage and optimize."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes error handling with detailed logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It calls multiple other stored procedures based on conditions."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@UtilityCompanySeqid int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The sequence ID of the utility company to be processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The sequence ID of the user executing the stored procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status int OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that indicates the execution status (0 for success, 1 for failure)."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Sets the initial status to 0 and declares various local variables for processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Period Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Queries the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table to find the current active billing period. If no active period is found, it returns an error code "
                },
                {
                  "type": "text",
                  "text": "-100",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Declaration",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Declares a cursor to select unprocessed exchange records from "
                },
                {
                  "type": "text",
                  "text": "CrisNationalGridWest.UploadExchangeDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", ordered by "
                },
                {
                  "type": "text",
                  "text": "ActivityDateTime",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and a calculated "
                },
                {
                  "type": "text",
                  "text": "Priority",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Main Processing Loop",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Opens the cursor and fetches the first record."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each record, it performs the following:"
                        }
                      ]
                    },
                    {
                      "type": "bulletList",
                      "content": [
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Retrieves detailed information about the exchange record."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Validates the "
                                },
                                {
                                  "type": "text",
                                  "text": "UtilityCompanyID",
                                  "marks": [
                                    {
                                      "type": "code"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": " and "
                                },
                                {
                                  "type": "text",
                                  "text": "AccountBillingGroup",
                                  "marks": [
                                    {
                                      "type": "code"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": "."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Based on the "
                                },
                                {
                                  "type": "text",
                                  "text": "ExchangeCode",
                                  "marks": [
                                    {
                                      "type": "code"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": ", it performs specific validations and calls the corresponding stored procedure if validations pass."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "If validations fail, it raises an error and logs a message."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Uses a "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block to handle errors, log detailed error messages, and set the status to 1 if an error occurs."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Closes and deallocates the cursor after processing all records."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance issues, especially with large datasets. Consider replacing it with set-based operations if possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the "
                },
                {
                  "type": "text",
                  "text": "CrisNationalGridWest.UploadExchangeDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table is properly indexed on columns used in the "
                },
                {
                  "type": "text",
                  "text": "WHERE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " clause and "
                },
                {
                  "type": "text",
                  "text": "ORDER BY",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " clause to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The detailed error logging can be resource-intensive. Ensure that logging is necessary and optimized."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not explicitly handle concurrency. If multiple instances run simultaneously, it could lead to data inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While errors are logged, the procedure does not attempt to recover or retry failed operations, which might be necessary for transient errors."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses hardcoded values for validation (e.g., "
                },
                {
                  "type": "text",
                  "text": "UtilityCompanyID <> 2",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "). Changes in business rules would require code changes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the dataset grows, the cursor-based approach may not scale well, leading to longer execution times."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The validation logic is tightly coupled with the exchange codes, making it less flexible to accommodate new codes or changes in validation rules."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [CrisNationalGridWest].[usp_ProcessExchangeInfo] @UtilityCompanySeqid int , @AuthenticatedUserID int , @Status int  OUTPUT\n   \r\nAS \r\n \r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:\tThis stored procedure dipstches the appropriate sotred sprocedure for each exchange record\r\n--*               \r\n--* Parameter(s):        \r\n--*\t\t\t\t\t@AuthenticatedUserID int\t\t- the seqid of the user that runs the stored procedure\t\r\n--*                 @UtilityCompanySeqid int\t\t- The sequence id of the Utility Companyto be processed\r\n--*                 @Status  int output\t\t\t\t- Execution Return Status \r\n--*\r\n--*\r\n--* Return:\t        0 Success\r\n--*                 1 Failure\r\n--*\r\n--* AUTHOR:       MOHAMMED BELARREM\r\n--* Created On:   04/26/2010\r\n--**************************************************************************************\r\n--* Date       Tech Description of Change\r\n--* ---------- ---\t-------------------------------------------------------------\r\n--* 04/26/2010 MOH  First Version\r\n--* 05/11/2010 MOH Update: revised the entire procedure  \r\n--* 05/20/2010 MOH Update: Added exclude\r\n--**************************************************************************************\r\n\r\n\r\nBegin \r\n\t\t--************************************************************************************** \r\n\t\t--Declare Variables                                            \r\n\t\t--**************************************************************************************\r\n\t\t--\r\n\t\tset @status = 0 \r\n\t\t--\r\n\t\tdeclare @BillingPeriod varchar(6)\r\n\t\tDeclare @Yes varchar(1)\r\n\t\tdeclare @StatusCode int\r\n\t\t--\r\n\t\t\r\n\t\tDeclare @ExchangeRecordSeqid int\r\n\t\tDECLARE @UtilityCompanyID int \r\n\t\tDECLARE @AccountBillingGroup int  \r\n\t\tDECLARE @RecordBillingPeriod dbo.yyyymm  \r\n\t\tDECLARE @RecordBillingPeriodRevision dbo.yyyymm  \r\n\t\tDECLARE @AccountNumber dbo.acctnum  \r\n\t\tDECLARE @MeterReadWorkDay dbo.TripNumber  \r\n\t\tDECLARE @UtilityServiceAccountName dbo.UtilityServiceAccountName  \r\n\t\tDECLARE @UtilityServiceAddress dbo.addr  \r\n\t\tDECLARE @Borough dbo.Borough  \r\n\t\tDECLARE @Zipcode dbo.zipcode  \r\n\t\tDECLARE @State dbo.[State]  \r\n\t\tDECLARE @ActivityCode dbo.ActivityCodeNGW  \r\n\t\tDECLARE @ActivityDate dbo.yyyymmdd  \r\n\t\tDECLARE @ActivityTime dbo.ActivityTimeNGW  \r\n\t\tDECLARE @ActivityDateTime datetime  \r\n\t\tDECLARE @TransactionCode dbo.AccountStatus  \r\n\t\tDECLARE @SpecialLedgerAccountNUmber dbo.acctnum  \r\n\t\tDECLARE @SpecialLedgerWorkDay dbo.TripNumber  \r\n\t\tDECLARE @ExchangeCode dbo.AccountStatus  \r\n\t\tDECLARE @MeterNumber dbo.MeterNumber  \r\n\t\tDECLARE @MeterConstant dbo.MeterConstant  \r\n\t\tDECLARE @NumberOfDials dbo.MeterDials  \r\n\t\tDECLARE @MeterType dbo.MeterType  \r\n\t\tDECLARE @GasRateCode dbo.ServiceClassification  \r\n\t\tDECLARE @RateCodeChangeDate dbo.yyyymmdd  \r\n\t\tDECLARE @MeterStatus dbo.MeterStatusNGW  \r\n\t\tDECLARE @OldMeterStatus dbo.MeterStatusNGW  \r\n\t\tDECLARE @MeterEffectiveActionDate dbo.yyyymmdd  \r\n\t\tDECLARE @MeterStatusChangeReason dbo.ChangeReasonNGW  \r\n\t\tDECLARE @AccountTerminationDate dbo.yyyymmdd  \r\n\t\tDECLARE @AccountStatus dbo.AccountStatusNGW  \r\n\t\tDECLARE @OldAccountStatus dbo.AccountStatusNGW  \r\n\t\tDECLARE @OldMeterNumber dbo.MeterNumber  \r\n\t\tDECLARE @AccountStartDate dbo.yyyymmdd  \r\n\t\tDECLARE @OldGasRateCode dbo.ServiceClassification  \r\n\t\tDECLARE @OldMeterReadWorkDay dbo.TripNumber  \r\n\t\r\n\t\tSet @Yes = 'Y'\r\n\t\tdeclare @crlf varchar(2)\r\n\t\tset @crlf = CHAR(13) + CHAR(10) \r\n\t\t--\r\n\t\t--\r\n\t\t--  Find the current active billing period\r\n\t\t--\r\n\t\tSELECT    @BillingPeriod = IsNull(BillingPeriod,'187601')  FROM Billing.ApplicationTimeFrame  WHERE CurrentProcessingPeriod = @Yes\r\n\t\t--***\r\n\t\t-- There must be only one active period for processing\r\n\t\t--***\r\n\t\tif ( @BillingPeriod = '187601' )    return -100\r\n\r\n\t\t--************************************************************************************** \r\n\t\t--\tDeclare Cursor\r\n\t\t--**************************************************************************************\r\n\t\t--\r\n\t\tDeclare read_exchange_record cursor for \r\n\t\t\tSELECT\tUploadExchangeDetailSeqid, ExchangeCode\r\n\t\t\tFROM\t\r\n\t\t\t\t(\tSELECT * , \tCASE \r\n\t\t\t\t\t\t\t\t\tWHEN ExchangeCode = '47' THEN 1 \r\n\t\t\t\t\t\t\t\t\tWHEN ExchangeCode = '46' THEN 2\r\n\t\t\t\t\t\t\t\t\tWHEN ExchangeCode = '45' THEN 3\r\n\t\t\t\t\t\t\t\t\tWHEN ExchangeCode = '27' THEN 4\r\n\t\t\t\t\t\t\t\t\tWHEN ExchangeCode = '28' THEN 5 \r\n\t\t\t\t\t\t\t\t\tELSE 6 \r\n\t\t\t\t\t\t\t\tEND AS Priority\r\n\t\t\t\t\r\n\t\t\t\t\tFROM CrisNationalGridWest.UploadExchangeDetail\r\n\t\t\t\t\twhere IsProcessed = 'N' AND Exclude = 'N'\r\n\t\t\t\t) AS OrderedTable\r\n\t\t\torder by ActivityDateTime, Priority\r\n\r\n\t\t--************************************************************************************** \r\n\t\t--\tMain Processing\r\n\t\t--**************************************************************************************\r\n\t\t--\r\n\t\topen read_exchange_record\r\n\r\n\t\t-- Read first row\r\n\t\tfetch read_exchange_record into @ExchangeRecordSeqid, @ExchangeCode\r\n\r\n\t\twhile @@fetch_status = 0\r\n\t\tbegin\r\n\r\n\t\t\tSET XACT_ABORT ON\r\n\t\t\tbegin try\r\n\t\t\t\t\tset @status = 0\r\n\t\t\t\t\t--\r\n\t\t\t\t\tSELECT \r\n\t\t\t\t\t\t   @UtilityCompanyID\t\t\t= UtilityCompanyID \r\n\t\t\t\t\t\t  ,@AccountBillingGroup         = AccountBillingGroup \r\n\t\t\t\t\t\t  ,@RecordBillingPeriod         = BillingPeriod \r\n\t\t\t\t\t\t  ,@RecordBillingPeriodRevision = BillingPeriodRevision \r\n\t\t\t\t\t\t  ,@AccountNumber               = AccountNumber \r\n\t\t\t\t\t\t  ,@MeterReadWorkDay            = MeterReadWorkDay \r\n\t\t\t\t\t\t  ,@UtilityServiceAccountName   = UtilityServiceAccountName \r\n\t\t\t\t\t\t  ,@UtilityServiceAddress       = UtilityServiceAddress \r\n\t\t\t\t\t\t  ,@Borough                     = Borough \r\n\t\t\t\t\t\t  ,@Zipcode                     = Zipcode \r\n\t\t\t\t\t\t  ,@State                       = [State] \r\n\t\t\t\t\t\t  ,@ActivityCode                = ActivityCode \r\n\t\t\t\t\t\t  ,@ActivityDate                = ActivityDate \r\n\t\t\t\t\t\t  ,@ActivityTime                = ActivityTime \r\n\t\t\t\t\t\t  ,@ActivityDateTime            = ActivityDateTime \r\n\t\t\t\t\t\t  ,@TransactionCode             = TransactionCode \r\n\t\t\t\t\t\t  ,@SpecialLedgerAccountNUmber  = SpecialLedgerAccountNUmber \r\n\t\t\t\t\t\t  ,@SpecialLedgerWorkDay        = SpecialLedgerWorkDay \r\n\t\t\t\t\t\t  ,@ExchangeCode                = ExchangeCode \r\n\t\t\t\t\t\t  ,@MeterNumber                 = MeterNumber \r\n\t\t\t\t\t\t  ,@MeterConstant               = MeterConstant \r\n\t\t\t\t\t\t  ,@NumberOfDials               = NumberOfDials \r\n\t\t\t\t\t\t  ,@MeterType                   = MeterType \r\n\t\t\t\t\t\t  ,@GasRateCode                 = GasRateCode \r\n\t\t\t\t\t\t  ,@RateCodeChangeDate          = RateCodeChangeDate \r\n\t\t\t\t\t\t  ,@MeterStatus                 = MeterStatus \r\n\t\t\t\t\t\t  ,@OldMeterStatus              = OldMeterStatus \r\n\t\t\t\t\t\t  ,@MeterEffectiveActionDate    = MeterEffectiveActionDate \r\n\t\t\t\t\t\t  ,@MeterStatusChangeReason     = MeterStatusChangeReason \r\n\t\t\t\t\t\t  ,@AccountTerminationDate      = AccountTerminationDate \r\n\t\t\t\t\t\t  ,@AccountStatus               = AccountStatus \r\n\t\t\t\t\t\t  ,@OldAccountStatus            = OldAccountStatus \r\n\t\t\t\t\t\t  ,@OldMeterNumber              = OldMeterNumber \r\n\t\t\t\t\t\t  ,@AccountStartDate            = AccountStartDate \r\n\t\t\t\t\t\t  ,@OldGasRateCode              = OldGasRateCode \r\n\t\t\t\t\t\t  ,@OldMeterReadWorkDay         = OldMeterReadWorkDay \r\n\t\t\t\t\tFROM CrisNationalGridWest.UploadExchangeDetail\t\t\t\t\t\t\r\n\t\t\t\t\tWHERE  (UploadExchangeDetailSeqid = @ExchangeRecordSeqid)\r\n\t\t\t\t\t--\r\n\t\t\t\t\t\t-- transactions are handled internally within the stored procedures\r\n\t\t\t\t\t\t-- begin transaction ExchangeRow\r\n\t\t\t\t\t\t--\r\n\t   \t\t\t\t\t\r\n\t   \t\t\t\t-- check the obvious\r\n\t   \t\t\t\tIF (@UtilityCompanyID <> 2) OR ( @AccountBillingGroup <> 3 )\r\n\t   \t\t\t\tBEGIN\r\n\t   \t\t\t\t\tRAISERROR ('The utility company or invoice billing group on this record is wrong. Please verfiy: exchange record %i ', 12, 1, @ExchangeRecordSeqid ) \r\n\t\t\t\t\t\treturn\r\n\t   \t\t\t\tEND\r\n\t   \t\t\t\t\t\r\n\t   \t\t\t\tif @ExchangeCode = 'AX'\r\n\t   \t\t\t\tBEGIN\t\r\n\t   \t\t\t\t\tRAISERROR ('There is an AX exchange record. Please verfiy: exchange record %i ', 12, 1, @ExchangeRecordSeqid ) \r\n\t\t\t\t\t\treturn\r\n\t   \t\t\t\tend\r\n\t   \t\t\t\tif @ExchangeCode = '47'\r\n\t   \t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t-- some simple validation before calling the stored procedure\r\n\t\t\t\t\t\t\t\tIF (\r\n\t\t\t\t\t\t\t\t\t\t\t@AccountNumber IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@AccountNumber) = 11\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterReadWorkDay IS NOT NULL \r\n\t\t\t\t\t\t\t\t\t\tAND @Borough IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @Zipcode IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterNumber IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@MeterNumber) = 9\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterConstant IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @NumberOfDials IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterType IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @GasRateCode IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @RateCodeChangeDate IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterEffectiveActionDate IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @AccountStartDate IS NOT NULL \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\texec CrisNationalGridWest.usp_ProcessExchangeCode_47 @AuthenticatedUserID,@ExchangeRecordSeqid, @ExchangeCode, @BillingPeriod, @UtilityCompanySeqid ,@StatusCode OUTPUT   \r\n\t   \t\t\t\t\t\t\tEND\r\n\t   \t\t\t\t\t\t\tELSE\t\r\n\t   \t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\tRAISERROR ('The exchange record %i was not processed, some data in the record is not valid . Please verfiy: exchange type %s ', 10, 1, @ExchangeRecordSeqid, @ExchangeCode ) \r\n\t   \t\t\t\t\t\t\t\tPRINT 'The exchange record ' +  CAST( @ExchangeRecordSeqid as varchar(10) ) +  ' was not processed, some data in the record is not valid . Please verfiy: exchange type ' + CAST(@ExchangeCode as varchar(2)) \r\n\t   \t\t\t\t\t\t\tEND\r\n\t   \t\t\t\tend\t\t\t\r\n\t\t\t\t\telse if (@ExchangeCode = '46')\r\n\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t-- some simple validation before calling the stored procedure\r\n\t   \t\t\t\t\t\t\tIF (\r\n\t\t\t\t\t\t\t\t\t\t\t@AccountNumber IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@AccountNumber) = 11\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterNumber IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@MeterNumber) = 9 \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterConstant IS NOT NULL \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @NumberOfDials IS NOT NULL \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterType IS NOT NULL \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterEffectiveActionDate IS NOT NULL \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\texec CrisNationalGridWest.usp_ProcessExchangeCode_46 @AuthenticatedUserID,@ExchangeRecordSeqid, @ExchangeCode, @BillingPeriod, @UtilityCompanySeqid, @StatusCode OUTPUT   \r\n\t   \t\t\t\t\t\t\tEND\r\n\t   \t\t\t\t\t\t\tELSE\t\r\n\t   \t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\tRAISERROR ('The exchange record %i was not processed, some data in the record is not valid . Please verfiy: exchange type %s ', 10, 1, @ExchangeRecordSeqid, @ExchangeCode ) \r\n\t   \t\t\t\t\t\t\t\tPRINT 'The exchange record ' +  CAST( @ExchangeRecordSeqid as varchar(10) ) +  ' was not processed, some data in the record is not valid . Please verfiy: exchange type ' + CAST(@ExchangeCode as varchar(2)) \r\n\t   \t\t\t\t\t\t\tEND\r\n\r\n\t   \t\t\t\t\r\n\t   \t\t\t\tEND\r\n\t\t\t\t\telse if (@ExchangeCode = '45')\r\n\t   \t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t-- some simple validation before calling the stored procedure\r\n\t   \t\t\t\t\t\t\tIF (\r\n\t\t\t\t\t\t\t\t\t\t\t@AccountNumber IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@AccountNumber) = 11\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterNumber IS NOT NULL \r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@MeterNumber) = 9\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterConstant IS NOT NULL \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @NumberOfDials IS NOT NULL \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterType IS NOT NULL \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterEffectiveActionDate IS NOT NULL \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND @OldMeterNumber IS NOT NULL \r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@OldMeterNumber) = 9\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t)\r\n\t   \t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\texec CrisNationalGridWest.usp_ProcessExchangeCode_45 @AuthenticatedUserID,@ExchangeRecordSeqid, @ExchangeCode, @BillingPeriod, @UtilityCompanySeqid, @StatusCode OUTPUT   \r\n\t   \t\t\t\t\t\t\tEND\r\n\t   \t\t\t\t\t\t\tELSE\t\r\n\t   \t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\tRAISERROR ('The exchange record %i was not processed, some data in the record is not valid . Please verfiy: exchange type %s ', 10, 1, @ExchangeRecordSeqid, @ExchangeCode ) \r\n\t   \t\t\t\t\t\t\t\tPRINT 'The exchange record ' +  CAST( @ExchangeRecordSeqid as varchar(10) ) +  ' was not processed, some data in the record is not valid . Please verfiy: exchange type ' + CAST(@ExchangeCode as varchar(2)) \r\n\t   \t\t\t\t\t\t\tEND\r\n\r\n\t\t\t\t\tEND\r\n\t\t\t\t\telse if (@ExchangeCode = '28')\r\n\t   \t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t-- some simple validation before calling the stored procedure\r\n\t   \t\t\t\t\t\t\tIF (\r\n\t\t\t\t\t\t\t\t\t\t\t@AccountNumber IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@AccountNumber) = 11\t\r\n\t\t\t\t\t\t\t\t\t\tAND @AccountTerminationDate IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\texec CrisNationalGridWest.usp_ProcessExchangeCode_28 @AuthenticatedUserID,@ExchangeRecordSeqid, @ExchangeCode, @BillingPeriod, @UtilityCompanySeqid, @StatusCode OUTPUT   \r\n\t   \t\t\t\t\t\t\tEND\r\n\t   \t\t\t\t\t\t\tELSE\t\r\n\t   \t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\tRAISERROR ('The exchange record %i was not processed, some data in the record is not valid . Please verfiy: exchange type %s ', 10, 1, @ExchangeRecordSeqid, @ExchangeCode ) \r\n\t   \t\t\t\t\t\t\t\tPRINT 'The exchange record ' +  CAST( @ExchangeRecordSeqid as varchar(10) ) +  ' was not processed, some data in the record is not valid . Please verfiy: exchange type ' + CAST(@ExchangeCode as varchar(2)) \r\n\t   \t\t\t\t\t\t\tEND\r\n\r\n\t\t\t\t\tEND\r\n\t\t\t\t\telse if (@ExchangeCode = '27')\r\n\t   \t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t-- some simple validation before calling the stored procedure\r\n\t   \t\t\t\t\t\t\tIF (\r\n\t\t\t\t\t\t\t\t\t\t\t@AccountNumber IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@AccountNumber) = 11\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterNumber IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@MeterNumber) = 9\r\n\t\t\t\t\t\t\t\t\t\tAND @MeterEffectiveActionDate IS NOT NULL \t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\texec CrisNationalGridWest.usp_ProcessExchangeCode_27 @AuthenticatedUserID,@ExchangeRecordSeqid, @ExchangeCode, @BillingPeriod, @UtilityCompanySeqid, @StatusCode OUTPUT   \r\n\t   \t\t\t\t\t\t\tEND\r\n\t   \t\t\t\t\t\t\tELSE\t\r\n\t   \t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\tRAISERROR ('The exchange record %i was not processed, some data in the record is not valid . Please verfiy: exchange type %s ', 10, 1, @ExchangeRecordSeqid, @ExchangeCode ) \r\n\t   \t\t\t\t\t\t\t\tPRINT 'The exchange record ' +  CAST( @ExchangeRecordSeqid as varchar(10) ) +  ' was not processed, some data in the record is not valid . Please verfiy: exchange type ' + CAST(@ExchangeCode as varchar(2)) \r\n\t   \t\t\t\t\t\t\tEND\r\n\r\n\t\t\t\t\tEND\r\n\t\t\t\t\telse if (@ExchangeCode = 'DC' )\r\n\t   \t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t-- some simple validation before calling the stored procedure\r\n\t   \t\t\t\t\t\t\tIF (\r\n\t\t\t\t\t\t\t\t\t\t\t@AccountNumber IS NOT NULL\r\n\t\t\t\t\t\t\t\t\t\tAND LEN(@AccountNumber) = 11\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\texec CrisNationalGridWest.usp_ProcessExchangeCode_MISC @AuthenticatedUserID,@ExchangeRecordSeqid, @ExchangeCode, @BillingPeriod, @UtilityCompanySeqid, @StatusCode OUTPUT   \r\n\t   \t\t\t\t\t\t\tEND\r\n\t   \t\t\t\t\t\t\tELSE\t\r\n\t   \t\t\t\t\t\t\tBEGIN\r\n\t   \t\t\t\t\t\t\t\tRAISERROR ('The exchange record %i was not processed, some data in the record is not valid . Please verfiy: exchange type %s ', 10, 1, @ExchangeRecordSeqid, @ExchangeCode ) \r\n\t   \t\t\t\t\t\t\t\tPRINT 'The exchange record ' +  CAST( @ExchangeRecordSeqid as varchar(10) ) +  ' was not processed, some data in the record is not valid . Please verfiy: exchange type ' + CAST(@ExchangeCode as varchar(2)) \r\n\t   \t\t\t\t\t\t\tEND\r\n\r\n\t\t\t\t\tEND\r\n\r\n\t   \t\t\t\t\t\r\n\t   \t\t\t\t\t   \r\n\t   \t\t\t\t\t   \r\n\t\t\tEND TRY\r\n\t\t\tBEGIN catch \r\n\t\t\r\n\t\t\t\t\tDECLARE @ExchangeErrorMessage NVARCHAR(4000);\r\n\t\t\t\t\tDECLARE @ErrorMessage NVARCHAR(4000);\r\n\t\t\t\t\tDECLARE @ErrorSeverity INT;\r\n\t\t\t\t\tDECLARE @ErrorState INT;\r\n \t\t\t\t\tDECLARE @ErrorNumber INT;\r\n\t\t\t\t\tDECLARE @ErrorLine INT;\r\n \t\t\t\t\tDECLARE @ErrorProcedure NVARCHAR(126);\r\n\t\t\t\t\t--\r\n\t\t\t\t\tSELECT \r\n\t\t\t\t\t\t@ExchangeErrorMessage ='Error in StoredProcedure %s at line number %d'+@crlf+'Billing Period: %s'+@crlf+'Exchange Sequence Id:%d'+@crlf+'Account:Meter (%s : %s)  '+@crlf,\r\n\t\t\t\t\t\t@ErrorMessage = ERROR_MESSAGE(),\r\n\t\t\t\t\t\t@ErrorSeverity = ERROR_SEVERITY(),\r\n\t\t\t\t\t\t@ErrorState = ERROR_STATE(),\r\n\t\t\t\t\t\t@ErrorNumber = ERROR_NUMBER(),\r\n\t\t\t\t\t\t@ErrorProcedure = ERROR_PROCEDURE(),\r\n\t\t\t\t\t\t@ErrorLine = ERROR_LINE();\t\t\t\r\n\t\t\t\t\t--\r\n\t\t\t\t\tset\t@ErrorMessage = @ExchangeErrorMessage + @ErrorMessage+@crlf+'@ErrorNumber: '+cast(@ErrorNumber as varchar(10))+@crlf\r\n\t\t\t\t\t--\r\n\t\t\t\t\tRAISERROR (@ErrorMessage, -- Message text.\r\n\t\t\t\t\t\t\t   @ErrorSeverity, -- Severity.\r\n\t\t\t\t\t\t\t   @ErrorState, -- State.\r\n\t\t\t\t\t\t\t   @ErrorProcedure,\r\n\t\t\t\t\t\t\t   @ErrorLine,\r\n\t\t\t\t\t\t\t   @BillingPeriod,\r\n\t\t\t\t\t\t\t   @ExchangeRecordSeqid,\r\n\t\t\t\t\t\t\t   @AccountNumber,\r\n\t\t\t\t\t\t\t   @SpecialLedgerAccountNUmber\r\n\t\t\t\t\t\t\t   ) with log;\r\n\t\t\t\t\t\r\n\t\t\t\t\tset @status  = 1\r\n\t\t\t\t\t\r\n\t\t\t\t\tIF ( CURSOR_STATUS('local','read_exchange_record') = 1)\r\n\t\t\t\t\tBEGIN\r\n\t\t\t\t\t\tclose read_exchange_record\r\n\t\t\t\t\t\tDeallocate read_exchange_record\r\n\r\n\t\t\t\t\tEND\r\n\r\n\t\t\t\t\t\r\n\t\t\tEND CATCH;\r\n\t   \t\t\t\t   \r\n\t\t\tfetch read_exchange_record into @ExchangeRecordSeqid, @ExchangeCode\r\n\t\tend \r\n\t\t\r\n\t\t--\r\n\t\tclose read_exchange_record\r\n\t\tDeallocate read_exchange_record\r\n\r\n--\r\nend"
        }
      ]
    }
  ]
}