{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CrisNationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Usp_CRIS_PreProcessXcheckingCurrentAccountBill",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "Usp_CRIS_PreProcessXcheckingCurrentAccountBill",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to preprocess and cross-check billing data for current accounts within the "
        },
        {
          "type": "text",
          "text": "CrisNationalGridWest",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema. It involves creating temporary tables, performing data aggregation, updating records, and generating reports on billing details. The procedure integrates data from current billing details, payment details, and archived billing details to ensure the accuracy and completeness of billing information."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple steps, including data selection, aggregation, conditional updates, and joins across several tables. The use of temporary tables and complex update logic contributes to its medium complexity. The procedure handles various scenarios for updating billing information, which requires a good understanding of the underlying data structure."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure does not take any input parameters. It operates on predefined tables within the "
        },
        {
          "type": "text",
          "text": "CrisNationalGridWest",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Table Creation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by dropping and recreating a temporary table "
                },
                {
                  "type": "text",
                  "text": "#NgridCurrentPeriodBill",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to store intermediate billing data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Selection and Aggregation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It selects data from "
                },
                {
                  "type": "text",
                  "text": "UploadAccountBillingDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "UploadPaymentDetail",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", performing left joins to aggregate payment amounts and other billing details."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Report",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A count of total billed accounts is generated from the temporary table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates are made to "
                        },
                        {
                          "type": "text",
                          "text": "#NgridCurrentPeriodBill",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " using data from "
                        },
                        {
                          "type": "text",
                          "text": "ARCHIVEUploadAccountBillingDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to fill in missing "
                        },
                        {
                          "type": "text",
                          "text": "OldCurrentAccountBalance",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and other fields."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Further updates are made using data from "
                        },
                        {
                          "type": "text",
                          "text": "Common.ExchangeData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " for accounts with missing "
                        },
                        {
                          "type": "text",
                          "text": "OldCurrentAccountBalance",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Handling No Current Transactions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Another temporary table "
                },
                {
                  "type": "text",
                  "text": "#NoCurrentTransaction",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is created to handle cases where no current period transactions are reported."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Gas Charge Adjustments",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates are made to adjust "
                },
                {
                  "type": "text",
                  "text": "GasChargeAmount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "CancelGasChargeAmount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " based on specific conditions and transaction codes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Revised Gas Charge Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure calculates revised gas charges and updates the temporary table accordingly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Reports",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It generates reports on accounts with null "
                },
                {
                  "type": "text",
                  "text": "OldCurrentAccountBalance",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and a detailed report of account billing information, including calculated fields for validation."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of temporary tables can impact performance, especially if the data volume is large. Indexing these tables could improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Aggregations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Multiple joins and aggregations can be resource-intensive. Ensuring that the joined columns are indexed in the source tables can help optimize performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure contains several conditional updates, which may slow down execution if not optimized properly."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on accurate and complete data in the source tables. Any discrepancies in the data could lead to incorrect billing calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If multiple instances of this procedure run simultaneously, it could lead to contention on the temporary tables or source data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete processing in case of errors."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of the procedure may degrade, especially due to the use of temporary tables and complex joins."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [CrisNationalGridWest].[Usp_CRIS_PreProcessXcheckingCurrentAccountBill]\nAS\r\nBEGIN\r\n\tDROP TABLE IF EXISTS #NgridCurrentPeriodBill;\r\n\r\n\tSELECT B.AccountNumber\r\n        ,B.BillingPeriod\r\n        ,B.UtilityServiceAccountName\r\n        ,B.UtilityServiceAddress\r\n        ,CAST(P.OldCurrentAccountBalance AS MONEY) AS OldCurrentAccountBalance\r\n        ,CAST(ISNULL(P.PaymentAmount,0) AS MONEY) AS PaymentAmount\r\n        ,B.GasChargeAmount\r\n        ,CAST(0.00 AS MONEY) AS RevisedGasChargeAmount\r\n        ,CAST(0.00 AS MONEY) AS CancelGasChargeAmount\r\n        ,B.AccountArrears\r\n        ,B.TerminationBalance\r\n        ,B.MiscellaneousChargeAmount\r\n        ,P.MiscellaneousCreditAmount\r\n        ,B.CurrentAccountBalance\r\n        ,B.ActivityDateTime\r\n        ,B.MiscellaneousChargeType\r\n        ,P.NumberOfPaymentTransactions\r\n\tINTO #NgridCurrentPeriodBill        \r\n\tFROM (SELECT AccountNumber\r\n\t\t\t,BillingPeriod\r\n\t\t\t,UtilityServiceAccountName\r\n\t\t\t,UtilityServiceAddress\r\n\t\t\t,GasChargeAmount\r\n\t\t\t,CurrentAccountBalance\r\n\t\t\t,AccountArrears\r\n\t\t\t,TerminationBalance\r\n\t\t\t,MiscellaneousChargeAmount\r\n\t\t\t,MiscellaneousChargeType\r\n\t\t\t,ActivityDateTime\r\n        FROM CrisNationalGridWest.UploadAccountBillingDetail\r\n        WHERE ActivityDateTime IS NOT NULL) AS B\r\n        LEFT JOIN (SELECT BillingPeriod\r\n\t\t\t\t,AccountNumber\r\n\t\t\t\t,SUM(CASE WHEN PaymentDate = SPACE(8) THEN 0 ELSE PaymentAmount END) AS PaymentAmount\r\n\t\t\t\t,NULL AS OldCurrentAccountBalance\r\n\t\t\t\t,SUM(ISNULL(MiscellaneousCreditAmount,0)) AS MiscellaneousCreditAmount\r\n\t\t\t\t,COUNT(*) AS NumberOfPaymentTransactions\r\n            FROM CrisNationalGridWest.UploadPaymentDetail\r\n            GROUP BY BillingPeriod, AccountNumber) AS P ON B.AccountNumber = P.AccountNumber\r\n            AND B.BillingPeriod = P.BillingPeriod;\r\n\r\n\tSELECT  'Total Billed Accounts' AS QueryBilled, COUNT(*) FROM #NgridCurrentPeriodBill;\r\n\r\n\tUPDATE #NgridCurrentPeriodBill\r\n\tSET OldCurrentAccountBalance = archive.CurrentAccountBalance\r\n\t\t,AccountArrears = ISNULL(t.AccountArrears, 0)\r\n        ,TerminationBalance = ISNULL(t.TerminationBalance, 0)\r\n        ,MiscellaneousChargeAmount = ISNULL(t.MiscellaneousChargeAmount, 0)\r\n        ,MiscellaneousCreditAmount = ISNULL(t.MiscellaneousCreditAmount, 0)\r\n        ,ActivityDateTime = archive.ActivityDateTime\r\n        ,NumberOfPaymentTransactions = 1\r\n\tFROM #NgridCurrentPeriodBill AS t\r\n        INNER JOIN (SELECT AccountNumber\r\n\t\t\t\t,MAX(BillingPeriod) AS maxLastBillingPeriod\r\n\t\t\t\t,MAX(ActivityDateTime) AS maxLastActivityDateTime\r\n\t\t\tFROM CrisNationalGridWest.ARCHIVEUploadAccountBillingDetail\r\n\t\t\tGROUP BY AccountNumber) AS MaxLastBilled ON t.AccountNumber = MaxLastBilled.AccountNumber\r\n        INNER JOIN CrisNationalGridWest.ARCHIVEUploadAccountBillingDetail AS archive ON MaxLastBilled.AccountNumber = archive.AccountNumber\r\n\t\t\tAND MaxLastBilled.maxLastBillingPeriod = archive.BillingPeriod\r\n\t\t\tAND MaxLastBilled.maxLastActivityDateTime = archive.ActivityDateTime\r\n\tWHERE t.OldCurrentAccountBalance IS NULL;\r\n\r\n\tUPDATE #NgridCurrentPeriodBill\r\n\tSET OldCurrentAccountBalance = 0\r\n\t\t,PaymentAmount = 0\r\n        ,AccountArrears = 0\r\n        ,TerminationBalance = 0\r\n        ,MiscellaneousChargeAmount = ISNULL(t.MiscellaneousChargeAmount, 0)\r\n        ,MiscellaneousCreditAmount = ISNULL(t.MiscellaneousCreditAmount, 0)\r\n        ,ActivityDateTime = GETDATE()\r\n        ,NumberOfPaymentTransactions = 1\r\n\tFROM #NgridCurrentPeriodBill AS t\r\n        INNER JOIN (SELECT CurrentAccountNumber AS AccountNumber15,\r\n\t\t\t\tSUBSTRING(CurrentAccountNumber, 1, 11) AS AccountNumber11\r\n\t\t\tFROM Common.ExchangeData) AS ExchangeAccount ON SUBSTRING(t.AccountNumber, 1, 11) = ExchangeAccount.AccountNumber11\r\n\tWHERE t.OldCurrentAccountBalance IS NULL;\r\n\r\n\tDROP TABLE IF EXISTS #NoCurrentTransaction;\r\n\r\n\tSELECT NoCurrent.UploadAccountBillingDetailSeqid\r\n        ,NoCurrent.AccountNumber\r\n        ,cg.GasChargeAmount\r\n        INTO #NoCurrentTransaction\r\n\tFROM (SELECT UploadAccountBillingDetailSeqid\r\n\t\t\t,Notes\r\n\t\t\t,BillingPeriod\r\n\t\t\t,BillingPeriodRevision\r\n\t\t\t,AccountNumber\r\n\t\t\t,ActivityCode\r\n\t\t\t,ActivityDate\r\n\t\t\t,ActivityTime\r\n\t\t\t,ActivityDateTime\r\n\t\t\t,TransactionCode\r\n\t\t\t,GasChargeAmount\r\n\t\tFROM CrisNationalGridWest.UploadAccountBillingDetail\r\n        WHERE Notes LIKE 'National Grid did not report a current period transaction%') AS NoCurrent\r\n        INNER JOIN (SELECT UploadAccountBillingDetailSeqid\r\n\t\t\t\t,Notes\r\n\t\t\t\t,BillingPeriod\r\n\t\t\t\t,BillingPeriodRevision\r\n\t\t\t\t,AccountNumber\r\n\t\t\t\t,ActivityCode\r\n\t\t\t\t,ActivityDate\r\n\t\t\t\t,ActivityTime\r\n\t\t\t\t,ActivityDateTime\r\n\t\t\t\t,TransactionCode\r\n\t\t\t\t,GasChargeAmount\r\n            FROM CrisNationalGridWest.UploadAccountBillingDetail\r\n            WHERE ActivityDateTime IS NULL AND TransactionCode = 'BI') AS cg ON NoCurrent.AccountNumber = cg.AccountNumber\r\n\t\t\t\tAND NoCurrent.ActivityDate = cg.ActivityDate AND NoCurrent.ActivityTime = cg.ActivityTime;\r\n\r\n\tUPDATE #NgridCurrentPeriodBill\r\n\tSET GasChargeAmount = n.GasChargeAmount\r\n\tFROM #NoCurrentTransaction AS n\r\n\t\tINNER JOIN #NgridCurrentPeriodBill AS c ON n.AccountNumber = c.AccountNumber;\r\n\r\n\tUPDATE #NgridCurrentPeriodBill\r\n\tSET CancelGasChargeAmount = CancelGasCharge.CancelGasChargeAmount\r\n\tFROM (SELECT  AccountNumber\r\n\t\t\t,SUM(GasChargeAmount) AS CancelGasChargeAmount\r\n\t\tFROM CrisNationalGridWest.UploadAccountBillingDetail\r\n\t\tWHERE ActivityDateTime IS NULL AND TransactionCode = 'BC'\r\n\t\tGROUP BY AccountNumber) AS CancelGasCharge\r\n        INNER JOIN #NgridCurrentPeriodBill AS c ON CancelGasCharge.AccountNumber = c.AccountNumber;\r\n\r\n\tUPDATE #NgridCurrentPeriodBill\r\n\tSET GasChargeAmount = OBDGasCharge.GasChargeAmount\r\n\tFROM (SELECT summed.AccountNumber\r\n            ,summed.GasChargeAmount\r\n            ,summed.OBDBillTypeCount\r\n\t\tFROM (SELECT UploadAccountBillingDetailSeqid\r\n\t\t\t\t,BillingPeriod\r\n\t\t\t\t,BillingPeriodRevision\r\n\t\t\t\t,AccountNumber\r\n\t\t\t\t,ActivityCode\r\n\t\t\t\t,ActivityDate\r\n\t\t\t\t,ActivityTime\r\n\t\t\t\t,ActivityDateTime\r\n\t\t\t\t,TransactionCode\r\n\t\t\t\t,GasChargeAmount\r\n            FROM CrisNationalGridWest.UploadAccountBillingDetail\r\n\t\t\tWHERE AccountNumber ='070580990010000') AS obd -- OBD Account\r\n            INNER JOIN (SELECT AccountNumber\r\n\t\t\t\t\t,SUM(GasChargeAmount) AS GasChargeAmount\r\n\t\t\t\t\t,COUNT(*) AS OBDBillTypeCount\r\n\t\t\t\tFROM CrisNationalGridWest.UploadAccountBillingDetail\r\n\t\t\t\tWHERE TransactionCode = 'BI' AND ActivityDateTime IS NULL\r\n                GROUP BY AccountNumber) AS summed ON obd.AccountNumber = summed.AccountNumber) AS OBDGasCharge\r\n        INNER JOIN #NgridCurrentPeriodBill AS c ON OBDGasCharge.AccountNumber = c.AccountNumber;\r\n\r\n\tUPDATE #NgridCurrentPeriodBill\r\n\tSET RevisedGasChargeAmount = RevisedGasCharge.RevisedBilledAmount\r\n\tFROM (SELECT AccountNumber\r\n            ,SUM(CASE WHEN TransactionCode = 'BI' THEN GasChargeAmount ELSE 0 END) AS RevisedBilledAmount\r\n            ,SUM(CASE WHEN TransactionCode = 'BC' THEN GasChargeAmount ELSE 0 END) AS CanceledBilledAmount\r\n            ,SUM(CASE WHEN ActivityDateTime IS NOT NULL THEN CurrentAccountBalance ELSE 0 END) AS CurrentAccountBalance\r\n            ,COUNT(*) AS AllTransactionCount\r\n\t\tFROM CrisNationalGridWest.UploadAccountBillingDetail\r\n\t\tGROUP BY AccountNumber) AS RevisedGasCharge\r\n        INNER JOIN #NgridCurrentPeriodBill AS c ON RevisedGasCharge.AccountNumber = c.AccountNumber;\r\n\r\n\tSELECT 'Total Billed Accounts with NULL OldCurrentAccountBalance' AS QueryBilled\r\n\t\t,COUNT(*) FROM #NgridCurrentPeriodBill\r\n\tWHERE OldCurrentAccountBalance IS NULL;\r\n\r\n\tSELECT AccountNumber\r\n\t\t,BillingPeriod\r\n\t\t,UtilityServiceAccountName\r\n\t\t,UtilityServiceAddress\r\n\t\t,OldCurrentAccountBalance\r\n\t\t,PaymentAmount\r\n\t\t,GasChargeAmount\r\n\t\t,GasChargeAmount - RevisedGasChargeAmount AS CalcGasChargeAmount\r\n\t\t,RevisedGasChargeAmount\r\n\t\t,CancelGasChargeAmount\r\n\t\t,AccountArrears\r\n\t\t,TerminationBalance\r\n\t\t,MiscellaneousChargeAmount\r\n\t\t,MiscellaneousCreditAmount\r\n\t\t,OldCurrentAccountBalance - PaymentAmount + GasChargeAmount\r\n\t\t\t+ CancelGasChargeAmount  + MiscellaneousChargeAmount\r\n\t\t\t- MiscellaneousCreditAmount AS CalcCurrentAccountBalance\r\n\t\t,CurrentAccountBalance\r\n\t\t,CurrentAccountBalance - (GasChargeAmount + MiscellaneousChargeAmount\r\n\t\t\t- MiscellaneousCreditAmount) AS NetPaidAdjustment\r\n\tFROM #NgridCurrentPeriodBill;\r\nEND;"
        }
      ]
    }
  ]
}