{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Archive_usp_ParseSplitBillingAndMeterResetsUploadConEdisonMeterInfo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "Archive_usp_ParseSplitBillingAndMeterResetsUploadConEdisonMeterInfo",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and merge billing and meter reset information for Con Edison accounts. It updates billing period revisions, handles split transactions, and merges them with reset rows. The procedure involves updating records, inserting data into a temporary table, and using a cursor to iterate through records for further processing. The ultimate goal is to ensure that billing information is accurately reflected by merging split transactions with their corresponding reset data."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple SQL operations, including updates, inserts, and deletes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a cursor to iterate over records, which can be complex to manage and optimize."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves joining multiple tables and views, which requires a good understanding of the database schema."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The logic includes conditional operations and error handling, adding to the complexity."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status int output",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This is an output parameter intended to return the execution status of the procedure. It is expected to return "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for success and "
                },
                {
                  "type": "text",
                  "text": "9",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization and Setup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Declare local variables to store temporary IDs and notes."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Set default values and prepare for processing."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Billing Period Revisions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Update the "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonMeterSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to set the "
                        },
                        {
                          "type": "text",
                          "text": "BillingPeriodRevision",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " based on criteria involving dates from related tables."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Handle Split Transactions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Truncate the "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.TempSplitTransactions",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to remove any existing data."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Insert records into "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.TempSplitTransactions",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " from "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonMeterSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " where certain conditions are met (e.g., "
                        },
                        {
                          "type": "text",
                          "text": "MeterFromReading = 0",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "BillingDays < 30",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ")."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Declare and open a cursor to iterate over records in "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.TempSplitTransactions",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each record, update the "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonMeterSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table by merging data from a view ("
                        },
                        {
                          "type": "text",
                          "text": "ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ")."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If the update is successful, delete the processed reset meter row from "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonMeterSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Log a message if the update fails."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Post-Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Update records in "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonMeterSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to ensure that any records with zero billing periods are set to one, indicating they should be processed as a whole period."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance bottlenecks, especially with large datasets. Consider replacing it with set-based operations if possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Truncation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating "
                },
                {
                  "type": "text",
                  "text": "ConEd.TempSplitTransactions",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is efficient but should be used with caution in a high-concurrency environment."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved in joins and updates are properly indexed to improve query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the dataset is large, consider processing in batches to reduce transaction size and lock contention."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves updates and deletes, which can lead to locking issues in a high-concurrency environment."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in related tables and views is consistent and accurate. Any discrepancies could lead to incorrect updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks comprehensive error handling. Consider adding try-catch blocks to handle exceptions gracefully."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the dataset grows, the performance of the cursor-based approach may degrade. Consider optimizing or refactoring for scalability."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure prints error messages but does not log them to a persistent store, which could be useful for auditing and troubleshooting."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [ConEd].[Archive_usp_ParseSplitBillingAndMeterResetsUploadConEdisonMeterInfo] (@Status int output)\nAS\r\n--\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Parse Spanned Con Edison Bills Account Upload Information\r\n--*               \r\n--*               \r\n--* Exec:\t\t    [ConEd].[usp_ParseSpannedBilledUploadConEdisonAccountInfo]\r\n--*\r\n--* Parameter(s):         \r\n--*\t\t\t\t\tStatusCode  int output       -  Execution Return Status \r\n--*\r\n--*\r\n--* Database:\t\tEC3database\r\n--*\r\n--* Return:\t\t\t0 Success\r\n--*                 9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   06/18/2008\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 06/18/2008 PAH  First Version  \r\n--* 03/27/2006 PAH  Revised to \r\n--***************************************************************************************\r\n--\r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\ndeclare @TempSplitTransactionsSeqid int\r\ndeclare @UploadConEdisonMeterSummarySeqid int\r\ndeclare @Notes dbo.notes\r\ndeclare @Success int\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n-- Find UploadConEdAccountSummary reset rows that would override UploadConEdMeterSummary\r\n-- billing revision period.  The criteria is the UploadConEdMeterSummary.ToDate is greater\r\n-- than the UploadConEdAccountSummary.FromDate and is less than and equal to the UploadConEdAccountSummary.ToDate\r\n--\r\n--\r\nupdate\tConEd.UploadConEdisonMeterSummary\r\nSET             \r\n\t\tBillingPeriodRevision = ConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod.AccountBillingPeriodRevision\r\nFROM \r\n\t\tConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod INNER JOIN\r\n\t\tConEd.UploadConEdisonMeterSummary ON \r\n\t\tConEd.uvw_UploadConEdAccountSummaryOverrideMeterSummaryBillingRevisionPeriod.UploadConEdisonMeterSummarySeqid = ConEd.UploadConEdisonMeterSummary.UploadConEdisonMeterSummarySeqid                      \r\n-- \r\n-- Once the override is completed.  Find all of the split transactions that need to be merged with the reset\r\n-- row.  Assume that the number of billing days are less than 30.\r\n--\r\ntruncate table ConEd.TempSplitTransactions\r\n\r\nINSERT INTO ConEd.TempSplitTransactions\r\n\t\t(UploadConEdisonMeterSummarySeqid,AccountUtilityCompanySeqid, AccountBilled, MeterBilled, AccountExchangeMeterTrackSeqid, \r\n\t\tAdjustedMeterBilling, AdjustedMeterBillingElectric, OriginalAccountNumber, OriginalMeterNumber, BillingPeriod, BillingPeriodRevision, \r\n\t\tFirstCancelPeriod, NumberOfTransactions, NumberOfRebillTransactions, NumberOfCancelTransactions, BillingAction, PriorRevisedBilledCCF, \r\n\t\tRevisedBilledCCF, CanceledBilledCCF, PriorRevisedBilledTherms, RevisedBilledTherms, CanceledBilledTherms, InitialCancelFromDate, \r\n\t\tCurrentBillingToDate, GasRateCode, FromDate, ToDate, MeterFromReading, MeterToReading, Ccf, Therms, ThermsFactor, MeterConstant, \r\n\t\tTotalBillingDaysRebilled, NumberOfBillingPeriods, AverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, BillingDate, \r\n\t\tReadingCode, NumberOfDials, MeterType, ProcessedInTheCurrentPeriod, ProcessEffectiveDate, CancelReadingCode, CancelFromDate, CancelToDate, \r\n\t\tCancelMeterFromReading, CancelMeterToReading, CancelCcf, CancelTherms, CancelThermsFactor, CancelMeterConstant, InitialPostingDate, \r\n\t\tDerivedFromSpannedBill, SpannedBillingPeriodRevision, SpannedFirstCanceledBillingPeriod, SpannedCCF, SpannedThermFactor, SpannedTherm, \r\n\t\tSpannedMonthlyPercentage, SpannedTotalPercentage, EstimatedOrActualBilling, FacilityName, ServiceAddress, AuthenticatedUserID, Notes, \r\n\t\tDateAdded, LastUpdate)\r\nSELECT \r\n\t\tUploadConEdisonMeterSummarySeqid,AccountUtilityCompanySeqid, AccountBilled, MeterBilled, AccountExchangeMeterTrackSeqid, AdjustedMeterBilling, AdjustedMeterBillingElectric, \r\n\t\tOriginalAccountNumber, OriginalMeterNumber, BillingPeriod, BillingPeriodRevision, FirstCancelPeriod, NumberOfTransactions, \r\n\t\tNumberOfRebillTransactions, NumberOfCancelTransactions, BillingAction, PriorRevisedBilledCCF, RevisedBilledCCF, CanceledBilledCCF, \r\n\t\tPriorRevisedBilledTherms, RevisedBilledTherms, CanceledBilledTherms, InitialCancelFromDate, CurrentBillingToDate, GasRateCode, FromDate, \r\n\t\tToDate, MeterFromReading, MeterToReading, Ccf, Therms, ThermsFactor, MeterConstant, TotalBillingDaysRebilled, NumberOfBillingPeriods, \r\n\t\tAverageRebillCostOfGasCharge, AverageRebillThermsFactor, BillingDays, BillingDate, ReadingCode, NumberOfDials, MeterType, \r\n\t\tProcessedInTheCurrentPeriod, ProcessEffectiveDate, CancelReadingCode, CancelFromDate, CancelToDate, CancelMeterFromReading, \r\n\t\tCancelMeterToReading, CancelCcf, CancelTherms, CancelThermsFactor, CancelMeterConstant, InitialPostingDate, DerivedFromSpannedBill, \r\n\t\tSpannedBillingPeriodRevision, SpannedFirstCanceledBillingPeriod, SpannedCCF, SpannedThermFactor, SpannedTherm, SpannedMonthlyPercentage, \r\n\t\tSpannedTotalPercentage, EstimatedOrActualBilling, FacilityName, ServiceAddress, AuthenticatedUserID, Notes, DateAdded, LastUpdate\r\nFROM ConEd.UploadConEdisonMeterSummary\r\nWHERE (MeterFromReading = 0) AND (MeterToReading <> 0) and BillingDays < 30\r\nORDER BY NumberOfBillingPeriods\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\n--\r\nDECLARE SplitBillingAndMeterResetsCursor CURSOR FOR\r\nSELECT TempSplitTransactionsSeqid,UploadConEdisonMeterSummarySeqid FROM ConEd.TempSplitTransactions \r\n--\r\nOPEN SplitBillingAndMeterResetsCursor;\r\n--\r\n-- @UploadConEdisonMeterSummarySeqid holds the id of the reset meter records which will be deleted once the data is merged\r\n-- and the notes are created\r\n--\r\nFETCH NEXT FROM SplitBillingAndMeterResetsCursor INTO @TempSplitTransactionsSeqid,@UploadConEdisonMeterSummarySeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n\r\nWHILE @@FETCH_STATUS = 0\r\n   begin\r\n\t--\r\n\t--\tFetch a split row to process \r\n\t--\r\n\t--\tFind the split row to conterpart by joining the view and split table.\r\n\t--\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo \r\n\t--\t\t\tConEd.TempSplitTransactions \t\r\n\t--\tWHERE (ConEd.UploadConEdisonMeterSummary.MeterFromReading <> '0') updates the \r\n\t--\tthe merged data record with the complete summary totals for the period.\r\n\t--\r\n\tUPDATE    ConEd.UploadConEdisonMeterSummary\r\n\tSET\t\t\r\n\t\t\tFromDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationFromDate,\r\n\t\t\tToDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate,\r\n\t\t\tCurrentBillingToDate = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate,\r\n\t\t\tMeterFromReading =isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterFromReading,0),\r\n\t\t\tMeterToReading =isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterToReading,0), \r\n\t\t\tCcf = isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TotalCCF,0),\r\n\t\t\tTherms =isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TotalTherms,0),\r\n\t\t\tThermsFactor =isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.ThermsFactor,1.03),\r\n\t\t\tMeterConstant = isnull(ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterConstant,1),\r\n\t\t\tNotes = Common.MeterResetNotes('M',\r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationFromDate, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterFromReading, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationToDate,\r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterToReading, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationCCF, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationThermsFactor, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationTherms, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterMergeInformationMeterConstant)+'--'+\r\n\t\t\t\t\tCommon.MeterResetNotes('R',\r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationFromDate, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterFromReading, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationToDate,\r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterToReading, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationCCF, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationThermsFactor, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationTherms, \r\n\t\t\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.MeterResetInformationMeterConstant)\r\n\tFROM     \r\n\t\t\tConEd.UploadConEdisonMeterSummary INNER JOIN\r\n\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo ON \r\n\t\t\tConEd.UploadConEdisonMeterSummary.BillingPeriod = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.BillingPeriod AND \r\n\t\t\tConEd.UploadConEdisonMeterSummary.BillingPeriodRevision = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.BillingPeriodRevision\r\n\t\t\tAND \r\n\t\t\tConEd.UploadConEdisonMeterSummary.OriginalAccountNumber = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.OriginalAccountNumber\r\n\t\t\tAND \r\n\t\t\tConEd.UploadConEdisonMeterSummary.OriginalMeterNumber = ConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.OriginalMeterNumber\r\n\tWHERE \r\n\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.TempSplitTransactionsSeqid = @TempSplitTransactionsSeqid and\r\n\t\t\tConEd.uvw_MergeSplitBillingAndMeterResetsUploadConEdisonMeterInfo.UploadConEdisonMeterSummarySeqid = @UploadConEdisonMeterSummarySeqid\r\n\t--\r\n\tset @Success = @@rowcount\r\n\t--\r\n\t-- Complete the processing by deleteing the reset meter row from the ConEd.UploadConEdisonMeterSummary table since it was already merged.\r\n\t--\r\n\tif (@Success > 0) \r\n\t\tDELETE FROM ConEd.UploadConEdisonMeterSummary WHERE (UploadConEdisonMeterSummarySeqid = @UploadConEdisonMeterSummarySeqid)\r\n\telse\r\n\t\tprint 'Update failed for UploadConEdisonMeterSummarySeqid Seqid'+ cast(@UploadConEdisonMeterSummarySeqid as varchar(10))+' - TempSplitTransactionsSeqid'+ cast(@TempSplitTransactionsSeqid as varchar(10))\r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\nFETCH NEXT FROM SplitBillingAndMeterResetsCursor INTO @TempSplitTransactionsSeqid,@UploadConEdisonMeterSummarySeqid\r\n   END\r\n\r\nCLOSE SplitBillingAndMeterResetsCursor;\r\nDEALLOCATE SplitBillingAndMeterResetsCursor;\r\n--\r\n-- Remove the splits from the ConEd.UploadConEdisonMeterSummary after the merge\r\n--\r\nUPDATE  ConEd.UploadConEdisonMeterSummary\r\nSET              \r\n\t\tNumberOfBillingPeriods = 1,\r\n\t\tNotes = 'Zero number of billing periods set to one to process as a whole period not a merged split'\r\nWHERE \r\n\t\t(NumberOfBillingPeriods = 0) AND (Ccf <> 0)"
        }
      ]
    }
  ]
}