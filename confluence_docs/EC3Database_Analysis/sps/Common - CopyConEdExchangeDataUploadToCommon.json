{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Common",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CopyConEdExchangeDataUploadToCommon",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "CopyConEdExchangeDataUploadToCommon",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to transfer data from a staging table, "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonExchangeDataPreload",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", into a target table, "
        },
        {
          "type": "text",
          "text": "Common.ExchangeData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", using a SQL Server "
        },
        {
          "type": "text",
          "text": "MERGE",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " statement. The procedure performs an insert operation for records that do not already exist in the target table based on specific matching criteria. The procedure is part of a data integration process, likely used to handle data uploads from Con Edison, a utility company."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this stored procedure is medium. It involves a "
        },
        {
          "type": "text",
          "text": "MERGE",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " statement with a "
        },
        {
          "type": "text",
          "text": "WHEN NOT MATCHED",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " clause for inserts, which requires understanding of both the source and target data structures. The procedure also includes data transformation logic, such as conditional logic for the "
        },
        {
          "type": "text",
          "text": "ExchangeCode",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " and formatting of date fields."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates on predefined tables within the database schema, specifically "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonExchangeDataPreload",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " as the source and "
        },
        {
          "type": "text",
          "text": "Common.ExchangeData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " as the target."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Source and Target",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure reads from "
                },
                {
                  "type": "text",
                  "text": "ConEd.UploadConEdisonExchangeDataPreload",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and writes to "
                },
                {
                  "type": "text",
                  "text": "Common.ExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Transformation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The "
                        },
                        {
                          "type": "text",
                          "text": "ExchangeCode",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is determined using a "
                        },
                        {
                          "type": "text",
                          "text": "CASE",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " statement based on the "
                        },
                        {
                          "type": "text",
                          "text": "REC-TYP",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " field."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Dates are formatted to 'yyyyMMdd'."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Static values are assigned to certain fields, such as "
                        },
                        {
                          "type": "text",
                          "text": "UtilityCompanyId",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "AccountBillingGroup",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", and "
                        },
                        {
                          "type": "text",
                          "text": "SalesType",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Merge Operation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The "
                        },
                        {
                          "type": "text",
                          "text": "MERGE",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " statement matches records based on "
                        },
                        {
                          "type": "text",
                          "text": "UtilityCompanyId",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "AccountBillingGroup",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "BillingPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "CurrentAccountNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "ExchangeCode",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", and "
                        },
                        {
                          "type": "text",
                          "text": "AccountEffectiveTurnOn",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If no match is found, a new record is inserted into "
                        },
                        {
                          "type": "text",
                          "text": "Common.ExchangeData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Static and Derived Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Several fields are populated with static values or derived using functions, such as "
                },
                {
                  "type": "text",
                  "text": "Common.GetDefaultEnergySubType(5)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the columns used in the "
                },
                {
                  "type": "text",
                  "text": "ON",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " clause of the "
                },
                {
                  "type": "text",
                  "text": "MERGE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " statement are indexed to improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Size",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the source table contains a large number of records, consider processing in batches to avoid locking and resource contention."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "NOCOUNT",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "SET NOCOUNT ON",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " statement is used to reduce network traffic by preventing the sending of DONE_IN_PROC messages."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the source data is clean and correctly formatted. Any discrepancies in data types or unexpected values could lead to errors or incorrect data being inserted."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": There is no explicit error handling within the procedure. Consider adding TRY...CATCH blocks to handle exceptions gracefully."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Several fields are populated with hardcoded values, which may need to be updated if business rules change."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may not scale well with very large datasets due to the potential for long-running transactions and locking issues."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": There is no validation logic for fields like "
                },
                {
                  "type": "text",
                  "text": "MeterTension",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " or "
                },
                {
                  "type": "text",
                  "text": "ExcessDistributionAccount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", which are set to "
                },
                {
                  "type": "text",
                  "text": "NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". Ensure that these fields can accept "
                },
                {
                  "type": "text",
                  "text": "NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " values without causing downstream issues."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Common].[CopyConEdExchangeDataUploadToCommon]\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n MERGE Common.ExchangeData AS Target\r\n    USING \r\n\t(\r\n\t\tSELECT DISTINCT \r\n\t\t9 as UtilityCompanyId,\r\n\t\t2 as AccountBillingGroup,\r\n\t\tUCEEDP.BillingPeriod as BillingPeriod,\r\n\t\t'Y' as ApprovedForCreation,\r\n\t\tUCEEDP.[ACT#] CurrentAccountNumber,\r\n\t\tUCEEDP.[O-ACT#] AS OriginalAccountNumber, \r\n\t\tUCEEDP.[N-MTR#] CurrentMeterNumber,\r\n\t\tUCEEDP.[O-MTR#] AS OriginalMeterNumber,\r\n\t\tNULL  AssociatedDemandMeter, -- not used in CONED process\r\n\t\tCASE WHEN UCEEDP.[REC-TYP] ='AEX'  THEN 'AX'\r\n\t\t\t WHEN UCEEDP.[REC-TYP] ='AIN'  THEN '28'\r\n\t\t\t WHEN UCEEDP.[REC-TYP] ='MEX'  THEN '45'\r\n\t\t\t WHEN UCEEDP.[REC-TYP] ='MIN'  THEN '27'\r\n\t\t\t WHEN UCEEDP.[REC-TYP] ='NAA'  THEN '47'\r\n\t\t\t WHEN UCEEDP.[REC-TYP] ='NMA'  THEN '46'\r\n\t\t\t ELSE 'ERROR - not a valid exchange code'\r\n\t\t\tEND AS ExchangeCode,\r\n\t\tFORMAT(CAST(UCEEDP.[RE-DATE] AS DATE), 'yyyyMMdd') AS AccountEffectiveTurnOn,\r\n\t\t'99991231' as AccountEffectiveTurnOff,\r\n\t\t'BT' as SalesType,\r\n\t\tUCEEDP.[TRAF-CODE] AS  DeliveryServiceClass,\t\t\r\n\t\tFORMAT(CAST(UCEEDP.EFFDT AS DATE), 'yyyyMMdd') AS DeliveryServiceClassEffectiveDate,\r\n\t\t'M' as BillingCycle,\r\n\t\tnull as ExcessDistributionAccount, --confirm\r\n\t\t'N' as TODAccount,\r\n\t\tNULL as MunicipalCode, -- not used in CONED process\r\n\t\tNULL AS TensionCode, -- not used in CONED process\r\n\t\t'18' AS TripNumber,\r\n\t\tUCEEDP.[SRV-ADD] as AccountName,\r\n\t\tUCEEDP.[SRV-ADD] AccountAddress,\r\n\t\t1 AS Borough,\r\n\t\t'AC' AS MeterStatus,\r\n\t\tFORMAT(CAST(UCEEDP.EFFDT AS DATE), 'yyyyMMdd') AS MeterEffectiveTurnOnDate,\r\n\t\t'99991231' as MeterEffectiveTurnOffDate,\r\n\t\t'G' as MeterType,\r\n\t\tUCEEDP.DIALS AS MeterNumberofDials,\r\n\t\tUCEEDP.[MTR-CONST] AS MeterConstant,\r\n\t\tnull as MeterTension, -- confirm if null is valid\r\n\t\t'N' as ManualDataEntry,\r\n\t\t5 as EnergyDeliveryType,\r\n\t\tCommon.GetDefaultEnergySubType(5) EnergySubType,\r\n\t\tNULL AccountServiceCode,\r\n\t\tNULL TransactionEffectiveDate,\r\n\t\tNULL ContractNumber,\r\n\t\tNULL AMRIndicator,\r\n\t\t1 as authenticatedUserID,\r\n\t\tGETDATE() as  DateAdded,\r\n\t\tGETDATE() LastUpdate,\r\n\t\tNULL  ActivityTime,\r\n\t\tNULL PreviousServiceCassification\r\n\t\tFROM ConEd.UploadConEdisonExchangeDataPreload AS UCEEDP\r\n\r\n\t) AS Source\r\n    ON   Source.UtilityCompanyId = Target.UtilityCompanySeqid\r\n\tAND  Source.AccountBillingGroup = Target.AccountBillingGroupSeqid\r\n\tAND  Source.BillingPeriod = Target.BillingPeriod\r\n\tAND  Source.CurrentAccountNumber = Target.CurrentAccountNumber\r\n\tAND  Source.ExchangeCode = Target.ExchangeCode\r\n\tAND  Source.AccountEffectiveTurnOn = Target.AccountEffectiveTurnOn\r\n    \r\n    -- For Inserts\r\n    WHEN NOT MATCHED BY Target THEN\r\n        INSERT (\r\n\t\tUtilityCompanySeqid,\r\n\t\tAccountBillingGroupSeqid,\r\n\t\tBillingPeriod,\r\n\t\tApprovedForCreation,\r\n\t\tCurrentAccountNumber,\r\n\t\tOriginalAccountNumber,\r\n\t\tCurrentMeterNumber,\r\n\t\tOriginalMeterNumber,\r\n\t\tAssociatedDemandMeter,\r\n\t\tExchangeCode,\r\n\t\tAccountEffectiveTurnOn,\r\n\t\tAccountEffectiveTurnOff,\r\n\t\tSalesType,\r\n\t\tDeliveryServiceClass,\r\n\t\tDeliveryServiceClassEffectiveDate,\r\n\t\tBillingCycle,\r\n\t\tExcessDistributionAccount,\r\n\t\tTODAccount,\r\n\t\tMunicipalCode,\r\n\t\tTensionCode,\r\n\t\tTripNumber,\r\n\t\tAccountName,\r\n\t\tAccountAddress,\r\n\t\tBorough,\r\n\t\tMeterStatus,\r\n\t\tMeterEffectiveTurnOnDate,\r\n\t\tMeterEffectiveTurnOffDate,\r\n\t\tMeterType,\r\n\t\tMeterNumberofDials,\r\n\t\tMeterConstant,\r\n\t\tMeterTension,\r\n\t\tManualDataEntry,\r\n\t\tEnergyDeliveryType,\r\n\t\tEnergyDeliverySubTypeId,\r\n\t\tAccountServiceCode,\r\n\t\tTransactionEffectiveDate,\r\n\t\tContractNumber,\r\n\t\tAMRIndicator,\r\n\t\tauthenticatedUserID,\r\n\t\tDateAdded,\r\n\t\tLastUpdate,\r\n\t\tActivityTime,\r\n\t\tPreviousServiceCassification\r\n\t\t) \r\n        VALUES ( \r\n\t\t\t\tSource.UtilityCompanyId,\r\n                Source.AccountBillingGroup,\r\n                Source.BillingPeriod,\r\n                Source.ApprovedForCreation,\r\n                Source.CurrentAccountNumber,\r\n                Source.OriginalAccountNumber,\r\n                Source.CurrentMeterNumber,\r\n                Source.OriginalMeterNumber,\r\n                Source.AssociatedDemandMeter,\r\n                Source.ExchangeCode,\r\n                Source.AccountEffectiveTurnOn,\r\n                Source.AccountEffectiveTurnOff,\r\n                Source.SalesType,\r\n                Source.DeliveryServiceClass,\r\n                Source.DeliveryServiceClassEffectiveDate,\r\n                Source.BillingCycle,\r\n                Source.ExcessDistributionAccount,\r\n                Source.TODAccount,\r\n                Source.MunicipalCode,\r\n                Source.TensionCode,\r\n                Source.TripNumber,\r\n                Source.AccountName,\r\n                Source.AccountAddress,\r\n                Source.Borough,\r\n                Source.MeterStatus,\r\n                Source.MeterEffectiveTurnOnDate,\r\n                Source.MeterEffectiveTurnOffDate,\r\n                Source.MeterType,\r\n                Source.MeterNumberofDials,\r\n                Source.MeterConstant,\r\n                Source.MeterTension,\r\n                Source.ManualDataEntry,\r\n                Source.EnergyDeliveryType,\r\n                Source.EnergySubType,\r\n                Source.AccountServiceCode,\r\n                Source.TransactionEffectiveDate,\r\n                Source.ContractNumber,\r\n                Source.AMRIndicator,\r\n                Source.authenticatedUserID,\r\n                Source.DateAdded,\r\n                Source.LastUpdate,\r\n                Source.ActivityTime,\r\n                Source.PreviousServiceCassification\r\n\t\t\t\t);\r\n    \r\n    ---- For Updates\r\n    --WHEN MATCHED THEN UPDATE SET\r\n    --    Target.ProductName\t= Source.ProductName,\r\n\r\nEND;"
        }
      ]
    }
  ]
}