{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Published_GetMeterExtentedBillingInformation_Updated",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Published_GetMeterExtentedBillingInformation_Updated",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve extended billing information for meters based on specific criteria. It processes data from various billing tables and returns a comprehensive dataset that includes meter and account details, energy usage, and billing period information. The procedure supports both agency and facility-level queries and logs the usage of the report for auditing purposes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional logic paths based on user type (agency or facility)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses Common Table Expressions (CTEs) and temporary tables to manage intermediate data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It performs multiple joins across several tables, including union operations to consolidate data from different sources."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes dynamic logic to determine the billing period based on the user type."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The email address of the user requesting the report, used for logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The billing period for which data is requested. This can be dynamically set based on user type."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AgencyCode AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The code representing the agency, used to filter data when the user is an agency user."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@OECFacilityNumber AS VARCHAR(7)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The facility number, used to filter data when the user is a facility user."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsAgencyUser BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether the user is an agency user (1) or not (0)."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure sets the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to allow dirty reads, which can improve performance but may lead to reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Billing Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If the user is an agency user, the billing period is set to the current processing period."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Otherwise, it is set to the maximum published billing period."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure logs the report usage by calling another stored procedure, "
                },
                {
                  "type": "text",
                  "text": "usp_AddReportUsageLog",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", with relevant parameters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Preparation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It determines whether to query by agency or facility based on the presence of a facility sequence ID."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If querying by agency, it populates a temporary table with agency and descendant IDs."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "A CTE ("
                        },
                        {
                          "type": "text",
                          "text": "RankedData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ") is used to rank meter records by version, allowing the selection of current and prior meter numbers."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Data is inserted into a temporary table for previous meter numbers."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Selection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure performs multiple "
                        },
                        {
                          "type": "text",
                          "text": "SELECT",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " statements with "
                        },
                        {
                          "type": "text",
                          "text": "UNION ALL",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to gather data from different billing adjustment tables (electric, gas, steam)."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Each "
                        },
                        {
                          "type": "text",
                          "text": "SELECT",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " statement joins the necessary tables and filters data based on the billing period, agency, or facility criteria."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can improve performance by reducing locking but risks reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Joins and Unions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The extensive use of joins and unions across large tables can be resource-intensive and may lead to slower performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of temporary tables can increase I/O operations, especially if the data volume is large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensuring that the joined columns are indexed can significantly improve query performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " may lead to reading inconsistent data, which could affect the accuracy of the report."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The complexity and number of joins may not scale well with large datasets, potentially leading to performance bottlenecks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete transactions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not include any checks for SQL injection or parameter validation, which could be a security risk if inputs are not properly sanitized."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_Published_GetMeterExtentedBillingInformation_Updated]\n(\r\n\t@EmailAddress AS VARCHAR(75)\r\n\t,@PublishedBillingPeriod AS VARCHAR(6)\r\n\t,@AgencyCode AS VARCHAR(6)\r\n\t,@OECFacilityNumber AS VARCHAR(7)\r\n\t,@IsAgencyUser BIT = 0\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tIF (@IsAgencyUser = 1)\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = PublishedBillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = MAX(PublishedBillingPeriod) FROM Published.MonthlyPublishedSummaryData;\r\n\tEND;\r\n\r\n\tDECLARE @spname VARCHAR(100) = OBJECT_NAME(@@PROCID);\r\n\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t\t@ReportName = @spname,\r\n\t\t@StoredProcName = @spname,\r\n\t\t@RequestedBy = @EmailAddress,\r\n\t\t@prmPublishedBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmBillingPeriod = NULL,\r\n\t\t@prmAgency_ies = @AgencyCode,\r\n\t\t@prmFacilityNumber_s = @OECFacilityNumber,\r\n\t\t@prmStartingBillingPeriod = NULL,\r\n\t\t@prmEndingBillingPeriod = NULL;\r\n\r\n\tDECLARE @FacilitySeqid AS INT, @ResultByAgency AS CHAR(1);\r\n--\tDECLARE @PreviousMeterNumbersTempTable TABLE (UniqueMeterSeqid INT NOT NULL, CurrentMeterSeqid INT NULL);\r\n\tDECLARE @PreviousMeterNumbersTempTable TABLE (UniqueMeterSeqid INT, CurrentMeterNumber VARCHAR(9), PriorMeterNumber VARCHAR(9))\r\n\r\n\tDECLARE @AgencyAndItsDecendants TABLE(AgencyDivisionSeqID INT NOT NULL);\r\n\r\n\tSELECT @FacilitySeqid = FacilitySeqid FROM Billing.Facility WHERE OecFacilityNumber = @OECFacilityNumber;\r\n\tSELECT @ResultByAgency = CASE WHEN @FacilitySeqid IS NULL THEN 'Y' ELSE 'N' END;\r\n\t\r\n\tIF(@ResultByAgency = 'Y')\r\n\tBEGIN\r\n\t\tINSERT INTO @AgencyAndItsDecendants (AgencyDivisionSeqID)\r\n\t\tSELECT AgencyDivisionSeqID FROM Billing.uftn_TableGetAllAgencyChildrenByAgencyCodeOEC(@AgencyCode, @EmailAddress);\r\n\tEND;\r\n\r\n\t;WITH RankedData AS (SELECT M.UniqueMeterSeqid\r\n\t\t\t,M.OriginalMeterNumber\r\n\t\t\t,ROW_NUMBER() OVER (PARTITION BY M.UniqueMeterSeqid ORDER BY M.RecordVersion DESC) AS rownum\r\n\t\tFROM Billing.Account AS A \r\n\t\t\tINNER JOIN Billing.Meter AS M ON M.UniqueAccountSeqID = A.UniqueAccountSeqid \r\n\t\t\t\tAND (@ResultByAgency <> 'Y' OR A.AgencyAccount IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\t\t\t\tAND (@ResultByAgency <> 'N' OR A.FacilityAccount = @FacilitySeqid))\r\n\tINSERT INTO @PreviousMeterNumbersTempTable(UniqueMeterSeqid\r\n\t\t,CurrentMeterNumber\r\n\t\t,PriorMeterNumber)\r\n\tSELECT R1.UniqueMeterSeqid, \r\n\t\tR1.OriginalMeterNumber AS CurrentMeterNumber, \r\n\t\tR2.OriginalMeterNumber AS PreviousMEterNumber\r\n\tFROM RankedData R1\r\n\t\tINNER JOIN RankedData R2\r\n\tON R2.UniqueMeterSeqid = R1.UniqueMeterSeqid AND R1.rownum = 1 AND R2.rownum = 2;\r\n\r\n\tSELECT A.UniqueAccountSeqid AS AccountSeqid\r\n\t\t,M.UtilityServiceAddress\r\n\t\t,A.UtilityAccountProvider AS UtilityCompanySeqid\r\n\t\t,M.MeterConstant\r\n\t\t,M.MeterEffectiveOnDate\r\n\t\t,M.MeterStatus\r\n\t\t,A.EnergySource\r\n\t\t,M.MeterSeqid AS MeterSeqid\r\n\t\t,E.OriginalAccountNumber\r\n\t\t,E.OriginalMeterNumber\r\n\t\t,M.CurrentMeterNumber\r\n\t\t,M.MeterType\r\n\t\t,E.RecordTypeConsumption\r\n\t\t,E.RecordTypeDemand\r\n\t\t,E.BillingPeriod\r\n\t\t,E.BillingPeriodRevision\r\n\t\t,E.FromDate\r\n\t\t,E.ToDate\r\n\t\t,E.ConsumptionFromReading\r\n\t\t,E.ConsumptionToReading\r\n\t\t,E.ESTOrACT\r\n\t\t,E.Consumption AS RevisedEnergyUsage\r\n\t\t,E.CancelConsumptionFromReading\r\n\t\t,E.CancelConsumptionToReading\r\n\t\t,E.CancelConsumption AS CancelEnergyUsage\r\n\t\t,NULL AS CancelESTOrACT\r\n\t\t,E.DemandFromReadingDate\r\n\t\t,E.DemandToReadingDate\r\n\t\t,E.DemandFromReading\r\n\t\t,E.DemandToReading\r\n\t\t,E.ESTOrACT AS DemandRevisedESTOrACT\r\n\t\t,E.Demand AS RevisedDemand\r\n\t\t,E.CancelDemandFromReading\r\n\t\t,E.CancelDemandToReading\r\n\t\t,(-1) * E.CancelDemand AS OriginalDemand\r\n\t\t,NULL AS CancelDemandESTOrACT\r\n\t\t,NULL AS PriorMeterNumber\r\n\t\t,DT.EnergyUnit\r\n\tFROM Billing.MeterBillingAdjustmentElectric AS E\r\n\t\tINNER JOIN Billing.Meter AS M ON E.UniqueMeterSeqId = M.UniqueMeterSeqid AND E.UniqueAccountSeqId = M.UniqueAccountSeqID AND M.IsCurrentRecord ='Y'\r\n\t\tINNER JOIN Billing.Account AS A ON  A.UniqueAccountSeqid = M.UniqueAccountSeqID AND A.IsCurrentRecord = 'Y'\r\n\t\tINNER JOIN Billing.EnergyDeliveryType AS DT ON DT.EnergyDeliveryType = A.EnergyAccountDescription\r\n\t\tINNER JOIN @PreviousMeterNumbersTempTable AS T ON T.UniqueMeterSeqid = m.UniqueMeterSeqid AND m.IsCurrentRecord='Y'\r\n\tWHERE (@ResultByAgency <> 'Y' OR A.AgencyAccount IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\t\tAND (@ResultByAgency <> 'N' OR A.FacilityAccount = @FacilitySeqid)\r\n\t\tAND E.BillingPeriodRevision = @PublishedBillingPeriod\r\n\tUNION ALL\r\n\tSELECT A.UniqueAccountSeqid AccountSeqid\r\n\t\t,M.UtilityServiceAddress\r\n\t\t,A.UtilityAccountProvider AS UtilityCompanySeqid\r\n\t\t,M.MeterConstant\r\n\t\t,M.MeterEffectiveOnDate\r\n\t\t,M.MeterStatus\r\n\t\t,A.EnergySource\r\n\t\t,M.MeterSeqid AS MeterSeqid\r\n\t\t,MBAG.OriginalAccountNumber\r\n\t\t,MBAG.OriginalMeterNumber\r\n\t\t,M.CurrentMeterNumber\r\n\t\t,M.MeterType\r\n\t\t,NULL AS RecordTypeConsumption\r\n\t\t,NULL AS RecordTypeDemand\r\n\t\t,MBAG.BillingPeriod\r\n\t\t,MBAG.BillingPeriodRevision\r\n\t\t,MBAG.FromDate\r\n\t\t,MBAG.ToDate\r\n\t\t,MBAG.MeterFromReading AS ConsumptionFromReading\r\n\t\t,MBAG.MeterToReading AS ConsumptionToReading\r\n\t\t,MBAG.EstimatedOrActualBilling AS ESTOrACT\r\n\t\t,MBAG.Therms AS RevisedEnergyUsage\r\n\t\t,MBAG.CancelMeterFromReading AS CancelConsumptionFromReading\r\n\t\t,MBAG.CancelMeterToReading AS CancelConsumptionToReading\r\n\t\t,MBAG.CancelTherms AS CancelEnergyUsage\r\n\t\t,NULL AS CancelESTOrACT\r\n\t\t,NULL AS DemandFromReadingDate\r\n\t\t,NULL AS DemandToReadingDate\r\n\t\t,NULL AS DemandFromReading\r\n\t\t,NULL AS DemandToReading\r\n\t\t,NULL AS DemandRevisedESTOrACT\r\n\t\t,NULL AS RevisedDemand\r\n\t\t,NULL AS CancelDemandFromReading\r\n\t\t,NULL AS CancelDemandToReading\r\n\t\t,NULL AS CancelDemand\r\n\t\t,NULL AS CancelDemandESTOrACT\r\n\t\t,NULL AS PriorMeterNumber\r\n\t\t,DT.EnergyUnit\r\n\tFROM Billing.MeterBillingAdjustmentGas AS MBAG\r\n\t\tINNER JOIN Billing.Meter AS M ON MBAG.UniqueMeterSeqId = M.UniqueMeterSeqid AND MBAG.UniqueAccountSeqId = M.UniqueAccountSeqID AND M.IsCurrentRecord ='Y'\r\n\t\tINNER JOIN Billing.Account AS A ON A.UniqueAccountSeqid = M.UniqueAccountSeqID AND A.IsCurrentRecord = 'Y'\r\n\t\tINNER JOIN Billing.EnergyDeliveryType AS DT ON DT.EnergyDeliveryType = A.EnergyAccountDescription\r\n\t\tINNER JOIN @PreviousMeterNumbersTempTable AS T ON T.UniqueMeterSeqid = m.UniqueMeterSeqid AND M.IsCurrentRecord ='Y'\r\n\tWHERE (@ResultByAgency <> 'Y' OR A.AgencyAccount IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\t\tAND (@ResultByAgency <> 'N' OR A.FacilityAccount = @FacilitySeqid)\r\n\t\tAND MBAG.BillingPeriodRevision = @PublishedBillingPeriod\r\n\t\tAND A.EnergySource IN (5) -- coned gas stuff\r\n\tUNION ALL\r\n\tSELECT A.UniqueAccountSeqid AccountSeqid\r\n\t\t,M.UtilityServiceAddress\r\n\t\t,A.UtilityAccountProvider AS UtilityCompanySeqid\r\n\t\t,M.MeterConstant\r\n\t\t,M.MeterEffectiveOnDate\r\n\t\t,M.MeterStatus\r\n\t\t,A.EnergySource\r\n\t\t,M.MeterSeqid AS MeterSeqid\r\n\t\t,MBACG.OriginalAccountNumber\r\n\t\t,MBACG.MeterNumber AS OriginalMeterNumber\r\n\t\t,M.CurrentMeterNumber\r\n\t\t,M.MeterType\r\n\t\t,NULL AS RecordTypeConsumption\r\n\t\t,NULL AS RecordTypeDemand\r\n\t\t,MBACG.BillingPeriod\r\n\t\t,MBACG.BillingPeriodRevision\r\n\t\t,MBACG.FromDate\r\n\t\t,MBACG.ToDate\r\n\t\t,MBACG.MeterFromReading AS ConsumptionFromReading\r\n\t\t,MBACG.MeterToReading AS ConsumptionToReading\r\n\t\t,MBACG.EstimatedOrActual AS ESTOrACT\r\n\t\t,MBACG.Therms AS RevisedEnergyUsage\r\n\t\t,MBACG.CancelMeterFromReading AS CancelConsumptionFromReading\r\n\t\t,MBACG.CancelMeterToReading AS CancelConsumptionToReading\r\n\t\t,MBACG.CancelTherms AS CancelEnergyUsage\r\n\t\t,MBACG.CancelEstimatedOrActual AS CancelESTOrACT\r\n\t\t,NULL AS DemandFromReadingDate\r\n\t\t,NULL AS DemandToReadingDate\r\n\t\t,NULL AS DemandFromReading\r\n\t\t,NULL AS DemandToReading\r\n\t\t,NULL AS DemandRevisedESTOrACT\r\n\t\t,NULL AS RevisedDemand\r\n\t\t,NULL AS CancelDemandFromReading\r\n\t\t,NULL AS CancelDemandToReading\r\n\t\t,NULL AS CancelDemand\r\n\t\t,NULL AS CancelDemandESTOrACT\r\n\t\t,NULL AS PriorMeterNumber\r\n\t\t,DT.EnergyUnit\r\n\tFROM Billing.MeterBillingAdjustmentCrisGas AS MBACG\r\n\t\tINNER JOIN Billing.Meter AS M ON MBACG.UniqueMeterSeqId = M.UniqueMeterSeqid AND MBACG.UniqueAccountSeqId = M.UniqueAccountSeqID AND M.IsCurrentRecord ='Y'\r\n\t\tINNER JOIN Billing.Account AS A ON A.UniqueAccountSeqid = M.UniqueAccountSeqID AND A.IsCurrentRecord = 'Y'\r\n\t\tINNER JOIN Billing.EnergyDeliveryType AS DT ON DT.EnergyDeliveryType = A.EnergyAccountDescription\r\n\t\tINNER JOIN @PreviousMeterNumbersTempTable AS T ON T.UniqueMeterSeqid = m.UniqueMeterSeqid AND M.IsCurrentRecord ='Y'\r\n\tWHERE (@ResultByAgency <> 'Y' OR A.AgencyAccount IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\t\tAND (@ResultByAgency <> 'N' OR A.FacilityAccount = @FacilitySeqid)\r\n\t\tAND MBACG.BillingPeriodRevision = @PublishedBillingPeriod\r\n\t\tAND A.EnergySource IN (5)\r\n\tUNION ALL\r\n\tSELECT A.UniqueAccountSeqid AccountSeqid\r\n\t\t,M.UtilityServiceAddress\r\n\t\t,A.UtilityAccountProvider AS UtilityCompanySeqid\r\n\t\t,M.MeterConstant\r\n\t\t,M.MeterEffectiveOnDate\r\n\t\t,M.MeterStatus\r\n\t\t,A.EnergySource\r\n\t\t,M.MeterSeqid AS MeterSeqid\r\n\t\t,mbaces.AccountNumber AS OriginalAccountNumber\r\n\t\t,mbaces.MeterNumber AS OriginalMeterNumber\r\n\t\t,M.CurrentMeterNumber\r\n\t\t,M.MeterType\r\n\t\t,NULL AS RecordTypeConsumption\r\n\t\t,NULL AS RecordTypeDemand\r\n\t\t,mbaces.BillingPeriod\r\n\t\t,mbaces.BillingPeriodRevision\r\n\t\t,mbaces.FromDate\r\n\t\t,mbaces.ToDate\r\n\t\t,mbaces.FromMeterReading AS ConsumptionFromReading\r\n\t\t,mbaces.ToMeterReading AS ConsumptionToReading\r\n\t\t,mbaces.EstimatedOrActualBilling AS ESTOrACT\r\n\t\t,mbaces.Consumption AS RevisedEnergyUsage\r\n\t\t,mbaces.CancelMeterFromReading AS CancelConsumptionFromReading\r\n\t\t,mbaces.CancelMeterToReading AS CancelConsumptionToReading\r\n\t\t,mbaces.CancelTherms AS CancelEnergyUsage\r\n\t\t,NULL AS CancelESTOrACT\r\n\t\t,NULL AS DemandFromReadingDate\r\n\t\t,NULL AS DemandToReadingDate\r\n\t\t,NULL AS DemandFromReading\r\n\t\t,NULL AS DemandToReading\r\n\t\t,NULL AS DemandRevisedESTOrACT\r\n\t\t,NULL AS RevisedDemand\r\n\t\t,NULL AS CancelDemandFromReading\r\n\t\t,NULL AS CancelDemandToReading\r\n\t\t,NULL AS CancelDemand\r\n\t\t,NULL AS CancelDemandESTOrACT\r\n\t\t,NULL AS PriorMeterNumber\r\n\t\t,DT.EnergyUnit\r\n\tFROM (SELECT bi.AccountNumber\r\n\t\t\t,bi.MeterNumber\r\n\t\t\t,bi.BillingPeriod\r\n\t\t\t,bi.BillingPeriodRevision\r\n\t\t\t,bi.FromDate\r\n\t\t\t,bi.Consumption\r\n\t\t\t,bi.EstimatedOrActualBilling\r\n\t\t\t,bi.ToDate\r\n\t\t\t,bi.FromMeterReading\r\n\t\t\t,bi.ToMeterReading\r\n\t\t\t,bc.FromMeterReading AS CancelMeterFromReading\r\n\t\t\t,bc.ToMeterReading AS CancelMeterToReading\r\n\t\t\t,bc.Consumption AS CancelTherms\r\n\t\t\t,bi.MeterSeqid\r\n\t\t FROM (SELECT DISTINCT M.AccountNumber, M.MeterNumber, M.BillingPeriodRevision, M.BillingPeriod, M.ToDate, M.FromDate, M.Consumption\r\n\t\t\t\t\t,A.EstimatedOrActualBilling, M.FromMeterReading, M.ToMeterReading, M.MeterSeqid\r\n\t\t\t\tFROM Billing.MeterBillingAdjustmentConEdSteam AS M\r\n\t\t\t\t\tINNER JOIN Billing.AccountBillingAdjustmentConEdSteam AS A ON A.AccountSeqid = M.AccountSeqid\r\n\t\t\t\tWHERE M.TransactionType = 'BI' AND M.BillingPeriod = @PublishedBillingPeriod\r\n\t\t\t\t\tAND M.MeterSeqid IN (SELECT MeterSeqid FROM Billing.Meter AS M2 INNER JOIN @PreviousMeterNumbersTempTable pnt ON pnt.UniqueMeterSeqid = M2.UniqueMeterSeqid AND M2.IsCurrentRecord ='Y')) AS bi\r\n\t\t\tLEFT JOIN (SELECT DISTINCT MeterNumber, BillingPeriodRevision, FromMeterReading, ToMeterReading, Consumption\r\n\t\t\t\tFROM Billing.MeterBillingAdjustmentConEdSteam\r\n\t\t\t\tWHERE TransactionType = 'BC' AND BillingPeriod = @PublishedBillingPeriod\r\n\t\t\t\t\tAND MeterSeqid IN (SELECT MeterSeqid FROM Billing.Meter AS M2 INNER JOIN @PreviousMeterNumbersTempTable pnt ON pnt.UniqueMeterSeqid = M2.UniqueMeterSeqid AND M2.IsCurrentRecord ='Y')) AS bc\r\n\t\t\tON bc.MeterNumber = bi.MeterNumber AND bc.BillingPeriodRevision = bi.BillingPeriodRevision\r\n\t\t) AS mbaces\r\n\t\tINNER JOIN Billing.Meter AS M ON M.MeterSeqid = mbaces.MeterSeqid\r\n\t\tINNER JOIN Billing.Account AS A ON A.UniqueAccountSeqid = M.UniqueAccountSeqID AND A.IsCurrentRecord = 'Y'\r\n\t\tINNER JOIN Billing.EnergyDeliveryType AS DT ON DT.EnergyDeliveryType = A.EnergyAccountDescription\r\n\t\tINNER JOIN @PreviousMeterNumbersTempTable AS T ON T.UniqueMeterSeqid = M.UniqueMeterSeqid AND M.IsCurrentRecord ='Y'\r\n\tWHERE (@ResultByAgency <> 'Y' OR A.AgencyAccount IN (SELECT AgencyDivisionSeqID FROM @AgencyAndItsDecendants))\r\n\t\tAND (@ResultByAgency <> 'N' OR A.FacilityAccount = @FacilitySeqid)\r\n\t\tAND mbaces.BillingPeriodRevision = @PublishedBillingPeriod\r\n\t\tAND A.FacilityAccount = @FacilitySeqid\r\n\t\tAND A.EnergyAccountDescription IN (6, 7);\r\nEND;"
        }
      ]
    }
  ]
}