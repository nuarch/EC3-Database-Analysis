{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessAccountBillingOriginals",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessAccountBillingOriginals",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process original billing records for accounts associated with the New York Power Authority (NYPA). It involves multiple steps to insert and update billing records, ensuring that the billing data is correctly processed for the current billing period. The procedure handles the insertion of original bills and their details, updates billing records, and manages error handling and transaction control."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple steps and operations, including data insertion, updates, and complex conditional logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It manages transactions and error handling, which adds to the complexity."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure interacts with multiple tables and requires careful synchronization of data across these tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes detailed business logic for handling billing periods, adjustments, and account statuses."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter represents the ID of the user who is authenticated to execute this procedure. It is used for auditing purposes to track who made changes to the billing records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This is an output parameter that indicates the execution status of the procedure. It returns "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for success and "
                },
                {
                  "type": "text",
                  "text": "9",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring and initializing various local variables used throughout the process."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Check Current Billing Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It checks if there are any original bills for the current billing period that have not yet been processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses a TRY-CATCH block to manage transactions, ensuring that all operations are atomic and can be rolled back in case of errors."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves billing parameters such as "
                },
                {
                  "type": "text",
                  "text": "BillCreationDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "PostMarkDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "DatePaymentDue",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "DateAcceptanceIntoOEC",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " from the "
                },
                {
                  "type": "text",
                  "text": "UploadCycleParameters",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts records into "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " tables using data from "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingAdjustmentElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Ensures that the billing period and revised billing period are correctly handled."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " with the adjusted account electric sequence ID."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates "
                        },
                        {
                          "type": "text",
                          "text": "Billing.AccountBillingAdjustmentElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to mark records as processed and link them to the corresponding billing records."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If any errors occur during the process, the transaction is rolled back, and an error message is logged."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Row Count Checks",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure performs multiple "
                },
                {
                  "type": "text",
                  "text": "@@ROWCOUNT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " checks, which can be resource-intensive if the underlying queries are not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of multiple joins across large tables can lead to performance bottlenecks if indexes are not properly utilized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The transaction scope is large, which can lead to locking and blocking issues in a high-concurrency environment."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The extensive use of conditional logic and case statements can impact performance, especially if the conditions are complex."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the transaction fails and is not properly rolled back, it could lead to data inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues due to the large transaction scope, potentially leading to deadlocks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure includes error handling, the complexity of the logic may result in unhandled exceptions if not thoroughly tested."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of data grows, the performance of the procedure may degrade if not optimized for larger datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of hardcoded values (e.g., "
                },
                {
                  "type": "text",
                  "text": "UtilityCompanySeqid = 7",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") can reduce flexibility and require changes in the code for different environments or configurations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "--**************************************************************************************\n--* Name:         \r\n--* Description:  Process the NYPA account billing original bills.  The sequential processing steps needed to\r\n--     Step 01)      Insert the new Cover sheet billing types\r\n--     Step 02)      Get the original bills minimum Delivery From Date and  the maximum Delivery To Date for the billing period.\r\n--     Step 03)      Insert the new Cover sheet billing items\r\n--     Step 04)      Get the total amount to be vouchered and the seqid of the row off of the coversheet\r\n--     Step 05)      Get the original bills minimum Delivery From Date and  the maximum Delivery To Date for the billing period.\r\n--     Step 06)      Get the  InvoiceTracking sequence id after it is inserted\r\n--     Step 07)      Insert the orginal bills where the UploadNYPAAccountBilling.BillingPeriod is equal to the UploadNYPAAccountBilling.RevisedBillingPeriod\r\n--     Step 08)      Insert the orginal bills detail where the UploadNYPAAccountBilling.BillingPeriod is equal to the UploadNYPAAccountBilling.RevisedBillingPeriod\r\n--     Step 09)      Set the PostMarkDate, DatePaymentDue and DateAcceptanceIntoOEC in each of the  AccountBillingElectric (Detail table)\r\n--     Step 10)      Encore monthly Billing, the amortization schedule for the billing period\r\n--\r\n-- Update the Account billing records with the correct account statuses of the existing accounts and the\r\n-- current cycle exchange actions.  The exchange code will be set to null.\r\n-- \r\n-- Determine the active accounts that the utility company did not send a bill for the cycle and add them to the \r\n-- to the \"UploadNYPAAccountBilling\" table.  At this point, we should have a collection of all of the accounts \r\n-- that were billed and all of the accounts that should have been billed.\r\n--*               \r\n--* Exec:        usp_ProcessABOriginalBillsNYPA\r\n--*\r\n--* Parameter(s):         \r\n--*                            BillingPeriod varchar(6)       - Current billing period\r\n--*                            PostMarkDate varchar(8), \r\n--*                            DatePaymentDue varchar(8), \r\n--*                            DateAcceptanceIntoOEC varchar(8),\r\n--*                            DateOECApproved varchar(8),\r\n--*                            StatusCode  int output       -  Execution Return Status \r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n-- Notes\r\n-- CurrentAccountBillingInvoiceContractBudgetLine= AgencyDivision.AgencyMeteredInvoiceContractBudgetLine is a future\r\n-- enhancement for invoicing (10/2/2007)\r\n--\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   10/26/2005\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 10/26/2005 PAH  First Version  \r\n--* 08/26/2011 PAH  Equated TotalAmountDue to ManualPaymentOverrideAmount\r\n--* 03/26/2015 PAH  Added Standby columns to AccountBillingElectric\r\n--* 8/23/2018\tZD\tAdded Netmetering colums \r\n--* 2/6/2019  ZD-VY\tintegrated unique account seqid\r\n--***************************************************************************************\r\nCREATE Procedure [Nypa].[usp_ProcessAccountBillingOriginals]\r\n(\r\n\t@AuthenticatedUserID AS INT,\r\n\t@StatusCode AS INT  OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tdeclare @RC int\r\n\tdeclare @InvoiceTrackingSeqid int\r\n\tdeclare @InvoiceUtilityCompanyCoverSheetSeqid int\r\n\tdeclare @UtililtyCompanyCycleParametersExist int\r\n\tdeclare @BillingCycle varchar(1)\r\n\tdeclare @ExhangeCodeNull varchar(2)\r\n\tdeclare @FromDateParm varchar(1) \r\n\tdeclare @ToDateParm varchar(1) \r\n\tdeclare @Yes varchar(1) \r\n\tdeclare @VoucherAmount money\r\n\tdeclare @PostMarkDate varchar(8)\r\n\tdeclare @DatePaymentDue varchar(8)\r\n\tdeclare @DateAcceptanceIntoOEC varchar(8)\r\n\tdeclare @BillCreationDate varchar(8)\r\n\tdeclare @BillingPeriod varchar(6)\r\n\tdeclare @IsCurrentBillingPeriod  int\r\n\tdeclare @HasCurrentBillingPeriodBeenProcessed  int\r\n\tdeclare @BillingPeriodMismatch  int\r\n\tdeclare @StopCurrentBillingPeriodProcess  int\r\n\tdeclare @NumberOfOriginalBills  int\r\n\tdeclare @NumberOfOriginalBillsProcessed  int\r\n\tdeclare @UtilityCompanySeqid int\r\n\tdeclare @InvoiceAccountGroupSeqid int\r\n\tdeclare @AccountBilling int\r\n\tdeclare @AccountBillingElectric int\r\n\tdeclare @AccountBillingAdjustmentElectric int\r\n\tdeclare @AccountBillingElectricUpdate INT\r\n    \r\n\tSET @InvoiceTrackingSeqid = null\r\n\tset @BillingCycle = 'M'\r\n\tset @FromDateParm = 'F'\r\n\tset @ToDateParm = 'T'\r\n\tset @Yes = 'Y'\r\n\t--\r\n\tset @BillingPeriodMismatch = 0\r\n\tset @StopCurrentBillingPeriodProcess = 0\r\n\tset @UtilityCompanySeqid = 7\r\n\tset @InvoiceAccountGroupSeqid = 1\r\n\r\n\tdeclare @errCurrentAccountNumber nvarchar(15)\r\n\tdeclare @errOriginalAccountNumber nvarchar(15)\r\n\tdeclare @errCurrentMeterNumber nvarchar(12)\r\n\tdeclare @errOriginalMeterNumber nvarchar(12)\r\n\tdeclare @ExchangeErrorMessage nvarchar(4000);\r\n\tdeclare @ErrorMessage nvarchar(4000);\r\n\tdeclare @ErrorSeverity int;\r\n\tdeclare @ErrorState int;\r\n\tdeclare @ErrorNumber int;\r\n\tdeclare @ErrorLine int;\r\n\tdeclare @ErrorProcedure nvarchar(126);\r\n\tdeclare @CommitTransaction varchar(1)  \r\n\t\r\n\t--\tCheck Whether it is the current billing and that it has not been already processed\r\n\tSELECT  @NumberOfOriginalBills = count(*)\r\n\tFROM \r\n\t\t\tBilling.AccountBillingAdjustmentElectric inner join\r\n\t\t\tBilling.ApplicationTimeFrame on Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod and \r\n\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision = Billing.ApplicationTimeFrame.BillingPeriod\r\n\tgroup by \r\n\t\t\tBilling.ApplicationTimeFrame.CurrentProcessingPeriod\r\n\tHAVING \r\n\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n\t\r\n\tselect\t@NumberOfOriginalBillsProcessed  = count(*)\r\n\tFROM     \r\n\t\t\tBilling.AccountBilling inner join\r\n\t\t\tBilling.ApplicationTimeFrame on Billing.AccountBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod and \r\n\t\t\tBilling.AccountBilling.BillingPeriodRevision = Billing.ApplicationTimeFrame.BillingPeriod\r\n\tWHERE  \r\n\t\t\t(Billing.AccountBilling.UtilityCompanySeqid = 7) and \r\n\t\t\t(Billing.AccountBilling.CurrentInvoiceAccountBillingGroup = 1) and \r\n\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n\r\n\tIF (@NumberOfOriginalBills > 0 AND @NumberOfOriginalBillsProcessed = 0)\r\n\tBEGIN\r\n\t\t-- Insert the orginal bills detail where the UploadNYPAAccountBilling.BillingPeriod is equal to the UploadNYPAAccountBilling.RevisedBillingPeriod\r\n\t\t-- Set the PostMarkDate, DatePaymentDue and DateAcceptanceIntoOEC in each of the  AccountBillingElectric (Detail table)\r\n\t\t-- Check if the parameters exist\r\n\t\tBEGIN TRY\r\n\t\t\t-- begin transaction ProcessAccountBillingOriginals;\r\n\t\t\tSET @CommitTransaction = 'Y'\r\n\t\t\tSELECT \r\n\t\t\t\t@BillCreationDate = BillCreationDate,  @PostMarkDate = PostMarkDate, @DatePaymentDue = DatePaymentDue,@DateAcceptanceIntoOEC = DateAcceptanceIntoOEC\r\n\t\t\tFROM\r\n\t\t\t\tCommon.UploadCycleParameters inner join\r\n\t\t\t\tBilling.ApplicationTimeFrame on Common.UploadCycleParameters.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\t\tWHERE\r\n\t\t\t\t(Common.UploadCycleParameters.UtilityCompanySeqid = @UtilityCompanySeqid) and \r\n\t\t\t\t(Common.UploadCycleParameters.InvoiceAccountGroupSeqid = @InvoiceAccountGroupSeqid) and \r\n\t\t\t\t(Common.UploadCycleParameters.CanProcessData = @Yes) and \r\n\t\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n\t\t\t\t\r\n\t\t\tif (@@ROWCOUNT = 0)\r\n\t\t\tBEGIN\r\n\t\t\t\t--  If the parameters do not exist, assume that the bill was processed mid month.\r\n\t\t\t\t-- This should only occur in revisions to accounts prior to the legacy conversion \r\n\t\t\t\t-- period\r\n\t\t\t\tSELECT @BillingPeriod = BillingPeriod from Billing.ApplicationTimeFrame where (CurrentProcessingPeriod = 'Y')\r\n\t\t\t\tset @BillCreationDate = @BillingPeriod +'05'\r\n\t\t\t\tset @PostMarkDate = @BillingPeriod+'15'\r\n\t\t\t\tset @DatePaymentDue = @BillingPeriod+'15'\r\n\t\t\t\tset @DateAcceptanceIntoOEC = @BillingPeriod+'15'\r\n\t\t\tEND;\r\n\r\n\t\t\t-- Insert the orginal and back bills where the UploadNYPAAccountBilling.RevisedBillingPeriod is used for all inserts.\r\n\t\t\t-- The inclusion of the back bills forces the use of the RevisedBillingPeriod for the BillingPeriod.  \r\n\t\t\tinsert into Billing.AccountBilling\r\n\t\t\t\t(UploadFileSeqid,OriginalAccountNumber,AccountSeqid, InvoiceTrackingSeqid, PreviousBillingPeriod, BillingPeriod, BillingPeriodRevision, NextBillingPeriod, CurrentInvoiceAccountBillingGroup,  \r\n\t\t\t\tManualDataEntry, ManualPaymentOverride, AccountBillingStatus, PreviousAccountBillingStatus, AccountBillingStatusCodePeriod, \r\n\t\t\t\tProcessedInTheCurrentPeriod, BillingCycle, SalesType, AccountEnergyUsage, AccountDemandUsage,OriginalEnergyUsage,OriginalDemandUsage,\r\n\t\t\t\tEnergySource, ProductionAndDeliveryTariff, \r\n\t\t\t\tBillingPeriodDays, FromDate, ToDate, BillingAction, OriginalBilledAmount, ManualPaymentOverrideAmount, RevisedBilledAmount, TotalAmountDue, \r\n\t\t\t\tOriginalBilledAmountPaid, PaidAdjustmentAmount, SplitFiscalYear, ChargeToFiscalYear, ChargeToPriorFiscalYear,CurrentAccountBillingInvoiceContractBudgetLine, UtilityCompanySeqid,AuthenticatedUserID, \r\n\t\t\t\tInitialPostingDate, DateAdded, LastUpdate,LastPeriodModified,IsTimeOfDayAccount,NetDollarChange,NetEnergyUsageChange,NetDemandUsageChange,\r\n\t\t\t\tAccountReactivePowerEnergy ,OriginalAccountReactivePowerEnergy ,NetChangeAccountReactivePowerEnergy\r\n\t\t\t\t,UniqueAccountSeqId) -- added on 2/6/2019\r\n\t\t\tSELECT Billing.AccountBillingAdjustmentElectric.UploadFileSeqid, -- Billing.AccountBilling.UploadFileSeqid\r\n\t\t\t\tBilling.Account.OriginalAccountNumber,\r\n\t\t\t\tBilling.Account.AccountSeqid, \r\n\t\t\t\tnull, --@InvoiceTrackingSeqid,     -- Insert  the  InvoiceTracking sequence id \r\n\t\t\t\t[dbo].[CreatePreviousPeriodForExchanges] (Billing.AccountBillingAdjustmentElectric.BillingPeriod,Billing.Account.BillingCycle,Billing.Account.AccountStatus) , -- \tBilling.AccountBilling.PreviousBillingPeriod\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision, --Billing.AccountBillingAdjustmentElectric.BillingPeriod, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision, \r\n\t\t\t\t[dbo].[CreateNextPeriodForExchanges] (Billing.AccountBillingAdjustmentElectric.BillingPeriod,Billing.Account.BillingCycle,Billing.Account.AccountStatus) , -- Billing.AccountBillingAdjustmentElectric.NextBillingPeriod\r\n\t\t\t\tBilling.Account.CurrentInvoiceAccountGroup, \r\n\t\t\t\t'N', -- Add to Billing.AccountBillingAdjustmentElectric        Billing.AccountBilling.ManualDataEntry,\r\n\t\t\t\t'N', --  Add to Billing.AccountBillingAdjustmentElectric       Billing.AccountBilling.ManualPaymentOverride, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.AccountStatus, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.AccountPreviousStatus, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.AccountStatusCodePeriod, \r\n\t\t\t\t'Y', -- Always yes if it is added at this point !     Billing.AccountBilling.ProcessedInTheCurrentPeriod, \r\n\t\t\t\tBilling.Account.BillingCycle, Billing.Account.SalesType, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.AccountEnergyUsage, Billing.AccountBillingAdjustmentElectric.AccountDemandUsage, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.AccountEnergyUsage, Billing.AccountBillingAdjustmentElectric.AccountDemandUsage, \r\n\t\t\t\tBilling.Account.EnergySource, Billing.AccountBillingAdjustmentElectric.ProductionAndDeliveryTariff, \r\n\t\t\t\tdbo.CalculateNumberOfBillingDays(Billing.AccountBillingAdjustmentElectric.FromDate,Billing.AccountBillingAdjustmentElectric.ToDate),\t--Billing.AccountBillingAdjustmentElectric.BillingPeriodDays, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.FromDate, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.ToDate, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingAction,\r\n\t\t\t\tcase when Billing.AccountBillingAdjustmentElectric.BillingPeriod=Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision \r\n\t\t\t\t\t\t\tthen\tBilling.AccountBillingAdjustmentElectric.TotalReBilledAmount + Billing.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount + Billing.AccountBillingAdjustmentElectric.OriginalReactivePowerDollars +\r\n\t\t\t\t\t\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityAllocationCharge + Billing.AccountBillingAdjustmentElectric.DeliveryAllocationCharge\r\n\t\t\t\t\t\t\telse 0 \r\n\t\t\t\tend,-- OriginalBilledAmount  Billing.AccountBillingAdjustmentElectric.TotalReBilledAmount, \r\n\t\t\t\tcase when Billing.AccountBillingAdjustmentElectric.BillingPeriod=Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision \r\n\t\t\t\tthen Billing.AccountBillingAdjustmentElectric.TotalReBilledAmount + Billing.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount + Billing.AccountBillingAdjustmentElectric.OriginalReactivePowerDollars+\r\n\t\t\t\t\t\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityAllocationCharge + Billing.AccountBillingAdjustmentElectric.DeliveryAllocationCharge \r\n\t\t\t\telse 0 end,\t --  Manually overridden  Billing.AccountBilling.ManualPaymentOverrideAmount, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.TotalReBilledAmount + Billing.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount + Billing.AccountBillingAdjustmentElectric.OriginalReactivePowerDollars+\r\n\t\t\t\t\t\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityAllocationCharge + Billing.AccountBillingAdjustmentElectric.DeliveryAllocationCharge,\r\n\t\t\t\tcase when Billing.AccountBillingAdjustmentElectric.BillingPeriod=Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision \r\n\t\t\t\t\t\t\tthen\tBilling.AccountBillingAdjustmentElectric.TotalReBilledAmount + Billing.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount + Billing.AccountBillingAdjustmentElectric.OriginalReactivePowerDollars +\r\n\t\t\t\t\t\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityAllocationCharge + Billing.AccountBillingAdjustmentElectric.DeliveryAllocationCharge\r\n\t\t\t\t\t\t\telse 0 \r\n\t\t\t\tend,\t-- TotalAmountDue  Billing.AccountBillingAdjustmentElectric.TotalReBilledAmount, \r\n\t\t\t\t\t\t-- Billing.AccountBilling.TotalAmountDue will be adjusted if there are non-zero net paid adjustments in Nypa.usp_ProcessAccountBillingRebills.\r\n\t\t\t\t\t\t-- The total amount due is for the current billing period only.  Back billed accounts with must have an original amount of $0.00.\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.TotalReBilledAmount, \r\n\t\t\t\t0.00, -- Billing.AccountBilling.PaidAdjustmentAmount, \r\n\t\t\t\t[dbo].[IsFiscalYearSplit] (Billing.AccountBillingAdjustmentElectric.FromDate, Billing.AccountBillingAdjustmentElectric.ToDate),\r\n\t\t\t\t[dbo].[CalculateFiscalYearIfSplit] (Billing.AccountBillingAdjustmentElectric.FromDate, Billing.AccountBillingAdjustmentElectric.ToDate,@ToDateParm),\r\n\t\t\t\t[dbo].[CalculateFiscalYearIfSplit] (Billing.AccountBillingAdjustmentElectric.FromDate, Billing.AccountBillingAdjustmentElectric.ToDate,@FromDateParm),\r\n\t\t\t\tnull, --CurrentAccountBillingInvoiceContractBudgetLine, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid,\r\n\t\t\t\t@AuthenticatedUserID,  -- Billing.AccountBilling.AuthenticatedUserID\r\n\t\t\t\t@BillCreationDate, --Billing.AccountBillingAdjustmentElectric.BillCreationDate, \r\n\t\t\t\tgetdate(), getdate(),\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriod,Billing.AccountBillingAdjustmentElectric.IsTimeOfDayAccount,\r\n\t\t\t\t/*\r\n\t\t\t\t--\tAll original period net changes will be zero  PAH\r\n\t\t\t\t*/\r\n\t\t\t\t0.00,  --Billing.AccountBillingAdjustmentElectric.TotalNetAdjustedAmount+isnull(Billing.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount,0), --NetDollarChange\r\n\t\t\t\t0,     --Billing.AccountBillingAdjustmentElectric.AccountEnergyUsage+Billing.AccountBillingAdjustmentElectric.CancelAccountEnergyUsage, --NetEnergyUsageChange \r\n\t\t\t\t0.0,    --Billing.AccountBillingAdjustmentElectric.AccountDemandUsage+Billing.AccountBillingAdjustmentElectric.CancelAccountDemandUsage -- NetDemandUsageChange\r\n\t\t\t\tAccountReactivePowerEnergy ,OriginalAccountReactivePowerEnergy ,NetChangeAccountReactivePowerEnergy\r\n\t\t\t\t, Account.UniqueAccountSeqid -- added on 2/6/2019\r\n\t\t\tFROM \r\n\t\t\t\tBilling.Account INNER JOIN Billing.AccountBillingAdjustmentElectric \r\n\t\t\t\tON (Billing.Account.UniqueAccountSeqid = Billing.AccountBillingAdjustmentElectric.UniqueAccountSeqId AND IsCurrentRecord = 'Y')\r\n\t\t\t\tAND Billing.Account.UtilityAccountProvider = Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid \r\n\t\t\t\tINNER JOIN\r\n\t\t\t\tBilling.ApplicationTimeFrame on Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\t\tWHERE \r\n\t\t\t\t(Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid = 7) and \r\n\t\t\t\t(Billing.AccountBillingAdjustmentElectric.AdjustedAccountBill is null) and \r\n\t\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n\t\t\t\r\n\t\t\tSELECT @AccountBilling = @@rowcount\r\n\t\t\tprint 'Number of Account billing inserts: ' + cast(@AccountBilling as varchar(10))\r\n\t\t\t-- Insert the orginal and back bills where the UploadNYPAAccountBilling.RevisedBillingPeriod is used for all inserts.\r\n\t\t\t-- The inclusion of the back bills forces the use of the RevisedBillingPeriod for the BillingPeriod.  \r\n\t\t\tinsert  into Billing.AccountBillingElectric\r\n\t\t\t\t(AdjustedAccountElectric ,\r\n\t\t\t\tOriginalAccountNumber ,\r\n\t\t\t\tMonthlyAccountBillingChargesElectric ,\r\n\t\t\t\tAccountBillingRowState ,\r\n\t\t\t\tBillingPeriod ,\r\n\t\t\t\tBillingPeriodRevision ,\r\n\t\t\t\tDeliveryTariffRate ,\r\n\t\t\t\tDeliveryTariffEffectiveDate ,\r\n\t\t\t\tCommodityTariffRate ,\r\n\t\t\t\tCommodityTariffEffectiveDate ,\r\n\t\t\t\tLoadFactor ,\r\n\t\t\t\tBillCreationDate ,\r\n\t\t\t\tPostMarkDate ,\r\n\t\t\t\tDatePaymentDue ,\r\n\t\t\t\tDateAcceptanceIntoOEC ,\r\n\t\t\t\tPreviousAccountBalance ,\r\n\t\t\t\tFuelAdjustmentAmount ,\r\n\t\t\t\tLatePaymentAmount ,\r\n\t\t\t\tArrearAmount ,\r\n\t\t\t\tCreditedPaidAmount ,\r\n\t\t\t\tCreditedPaymentDate ,\r\n\t\t\t\tDiscountPercentage ,\r\n\t\t\t\tDDDSurchargeAmount ,\r\n\t\t\t\tDDDSurchargePercentage ,\r\n\t\t\t\tDeliveryConsumption ,\r\n\t\t\t\tDeliveryConsumptionOffPeak ,\r\n\t\t\t\tDeliveryConsumptionShoulder ,\r\n\t\t\t\tDeliveryDemand ,\r\n\t\t\t\tDeliveryDemandOffPeak ,\r\n\t\t\t\tDeliveryDemandShoulder ,\r\n\t\t\t\tDeliveryStreetLightingFacilityPoints ,\r\n\t\t\t\tCommodityConsumption ,\r\n\t\t\t\tCommodityConsumptionOffPeak ,\r\n\t\t\t\tCommodityConsumptionShoulder ,\r\n\t\t\t\tCommodityDemand ,\r\n\t\t\t\tCommodityDemandOffPeak ,\r\n\t\t\t\tCommodityDemandShoulder ,\r\n\t\t\t\tCommodityFacilityPoints ,\r\n\t\t\t\tGrossReceiptTax ,\r\n\t\t\t\tGRTRate ,\r\n\t\t\t\tEnergyCostAdjustment ,\r\n\t\t\t\tEnergyCostAdjustmentPercentage ,\r\n\t\t\t\tAccountEnergyUsage ,\r\n\t\t\t\tAccountDemandUsage ,\r\n\t\t\t\tInitialPostingDate ,\r\n\t\t\t\tNotes ,\r\n\t\t\t\tAuthenticatedUserID ,\r\n\t\t\t\tDateAdded ,\r\n\t\t\t\tLastUpdate ,\r\n\t\t\t\tUtilityCompanySeqid ,\r\n\t\t\t\tLastPeriodModified ,\r\n\t\t\t\tIsTimeOfDayAccount ,\r\n\t\t\t\tIsMinimumBilledCharged ,\r\n\t\t\t\tMinimumBilledEnergyDollars ,\r\n\t\t\t\tMinimumBilledDemandDollars ,\r\n\t\t\t\tMaxBilledDemandPeriod ,\r\n\t\t\t\tMaxBilledDemandUsage ,\r\n\t\t\t\tIsSpannedPeriodBill ,\r\n\t\t\t\tDeliveryFacilityPointsAmount ,\r\n\t\t\t\tCustomerLevelAdjustmentAmount ,\r\n\t\t\t\tBilledAmount ,\r\n\t\t\t\tOriginalReactivePowerDollars ,\r\n\t\t\t\tRevisedReactivePowerDollars ,\r\n\t\t\t\tNetchangeReactivePowerDollars ,\r\n\t\t\t\tCommodityAllocationCharge ,\r\n\t\t\t\tDeliveryAllocationCharge ,\r\n\t\t\t\tMinimumBilledDemandUsage ,\r\n\t\t\t\tIsDeliveryMinimumBilledFlag ,\r\n\t\t\t\tDeliveryMinimumBilledAmount ,\r\n\t\t\t\tDeliveryMinimumBilledDemand ,\r\n\t\t\t\tProductionMisc1 ,\r\n\t\t\t\tProductionMisc2 ,\r\n\t\t\t\tDeliveryMisc1 ,\r\n\t\t\t\tDeliveryMisc2 ,\r\n\t\t\t\tMinimumBilledEnergyUsage ,\r\n\t\t\t\tDeliveryMaximumBilledDemand ,\r\n\t\t\t\tDeliveryMaximumBilledDemandPeriod,\r\n\t\t\t\tContractNumber,\r\n\t\t\t\tStandbyContractDemand,\r\n\t\t\t\tStandbyContractDemandCharges,\r\n\t\t\t\tStandbyAsUsedDailyDemand,\r\n\t\t\t\tStandbyAsUsedDailyDemandCharges\r\n\t\t\t\t,CreditCurrentPeriod\r\n\t\t\t\t,CancelCreditCurrentPeriod\r\n\t\t\t\t,CreditPrecedingPeriod\r\n\t\t\t\t,CancelCreditPrecedingPeriod\r\n\t\t\t\t,CreditToApplySatellites\r\n\t\t\t\t,CancelCreditToApplySatellites\r\n\t\t\t\t,CreditFromHost\r\n\t\t\t\t,CancelCreditFromHost\r\n\t\t\t\t,CreditsToCarryForward\r\n\t\t\t\t,CancelCreditsToCarryForward\r\n\t\t\t\t,CurrentPeriodOffPeakCredit\r\n\t\t\t\t,CancelCurrentPeriodOffPeakCredit\r\n\t\t\t\t,CurrentPeriodOnPeakCredit\r\n\t\t\t\t,CancelCurrentPeriodOnPeakCredit\r\n\t\t\t\t,NetMeteredAccountFlag\r\n\t\t\t\t,CancelNetMeteredAccountFlag\r\n\t\t\t\t,HostNetMeteredAccountNumber\r\n\t\t\t\t,CancelHostNetMeteredAccountNumber\r\n\t\t\t\t,PEXCESS\r\n\t\t\t\t,CancelPEXCESS\r\n\t\t\t\t, UniqueAccountSeqId) -- added on 2/6/2019\r\n\t\t\tSELECT distinct\r\n\t\t\t\tnull , --AccountBillingElectric.AdjustedAccountElectric, \r\n\t\t\t\tBilling.Account.OriginalAccountNumber ,\r\n\t\t\t\tBilling.AccountBilling.AccountBillingSeqid ,\r\n\t\t\t\t1 , --AccountBillingElectric.AccountBillingRowState, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision , --Billing.AccountBillingAdjustmentElectric.BillingPeriod, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision ,\r\n\t\t\t\tBilling.Account.DeliveryTariffRate ,\r\n\t\t\t\tBilling.Account.DeliveryTariffEffectiveDate ,\r\n\t\t\t\tBilling.Account.CommodityTariffRate ,\r\n\t\t\t\tBilling.Account.CommodityTariffEffectiveDate ,\r\n\t\t\t\tdbo.CalculateLoadFactor(Billing.AccountBilling.AccountEnergyUsage,\r\n\t\t\t\t\t\t\t\t\t\tBilling.AccountBilling.AccountDemandUsage,\r\n\t\t\t\t\t\t\t\t\t\tBilling.AccountBilling.FromDate,\r\n\t\t\t\t\t\t\t\t\t\tBilling.AccountBilling.ToDate) ,  -- AccountBillingElectric.LoadFactor,  \r\n\t\t\t\t@BillCreationDate , -- Billing.AccountBillingAdjustmentElectric. BillCreationDate, \r\n\t\t\t\t@PostMarkDate , --AccountBillingElectric.PostMarkDate\r\n\t\t\t\t@DatePaymentDue , -- AccountBillingElectric.DatePaymentDue, \r\n\t\t\t\t@DateAcceptanceIntoOEC , -- AccountBillingElectric.DateAcceptanceIntoOEC, \r\n\t\t\t\t0.00 , --AccountBillingElectric.PreviousAccountBalance, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.FuelAdjustmentAmount ,\r\n\t\t\t\t0.00 , --AccountBillingElectric.LatePaymentAmount, \r\n\t\t\t\t0.00 , --AccountBillingElectric.ArrearAmount, \r\n\t\t\t\t0.00 , --AccountBillingElectric.CreditedPaidAmount,   -- Updated later from the invoice file\r\n\t\t\t\t0.00 , --AccountBillingElectric.CreditedPaymentDate,   -- Updated later from the invoice file\r\n\t\t\t\t0 , --  AccountBillingElectric.DiscountPercentage, \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DDDSurchargeAmount ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DDDSurchargePercentage ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryConsumption ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryConsumptionOffPeak ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryConsumptionShoulder ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryDemand ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryDemandOffPeak ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryDemandShoulder ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryStreetLightingFacilityPoints ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityConsumption ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityConsumptionOffPeak ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityConsumptionShoulder ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityDemand ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityDemandOffPeak ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityDemandShoulder ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityFacilityPoints ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.GrossReceiptTax ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.GRTRate ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.EnergyCostAdjustment ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.EnergyCostAdjustmentPercentage ,\r\n\t\t\t\tBilling.AccountBilling.AccountEnergyUsage ,\r\n\t\t\t\tBilling.AccountBilling.AccountDemandUsage ,\r\n\t\t\t\tBilling.AccountBilling.InitialPostingDate ,\r\n\t\t\t\tnull , --AccountBillingElectric.Notes, \r\n\t\t\t\tBilling.AccountBilling.AuthenticatedUserID ,\r\n\t\t\t\tBilling.AccountBilling.DateAdded ,\r\n\t\t\t\tgetdate() , --Billing.AccountBilling.LastUpdate\r\n\t\t\t\t@UtilityCompanySeqid ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriod ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.IsTimeOfDayAccount ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.IsMinimumBilledCharged ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.MinimumBilledEnergyDollars ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.MinimumBilledDemandDollars ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.MaxBilledDemandPeriod ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.MaxBilledDemandUsage ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.IsSpannedPeriodBill ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryFacilityPointsAmount ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CustomerLevelAdjustmentAmount ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.TotalReBilledAmount ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.OriginalReactivePowerDollars ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.RevisedReactivePowerDollars ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.NetchangeReactivePowerDollars ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.CommodityAllocationCharge ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryAllocationCharge ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.MinimumBilledDemandUsage ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.IsDeliveryMinimumBilledFlag ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryMinimumBilledAmount ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryMinimumBilledDemand ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.ProductionMisc1 ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.ProductionMisc2 ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryMisc1 ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryMisc2 ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.MinimumBilledEnergyUsage ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryMaximumBilledDemand ,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.DeliveryMaximumBilledDemandPeriod,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.ContractNumber,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.StandbyContractDemand,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.StandbyContractDemandCharges,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.StandbyAsUsedDailyDemand,\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.StandbyAsUsedDailyDemandCharges\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CreditCurrentPeriod\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CancelCreditCurrentPeriod\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CreditPrecedingPeriod\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CancelCreditPrecedingPeriod\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CreditToApplySatellites\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CancelCreditToApplySatellites\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CreditFromHost\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CancelCreditFromHost\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CreditsToCarryForward\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CancelCreditsToCarryForward\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CurrentPeriodOffPeakCredit\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CancelCurrentPeriodOffPeakCredit\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CurrentPeriodOnPeakCredit\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CancelCurrentPeriodOnPeakCredit\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.NetMeteredAccountFlag\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CancelNetMeteredAccountFlag\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.HostNetMeteredAccountNumber\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CancelHostNetMeteredAccountNumber\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.PEXCESS\r\n\t\t\t\t,Billing.AccountBillingAdjustmentElectric.CancelPEXCESS\r\n\t\t\t\t, Account.UniqueAccountSeqid\r\n\t\t\tfrom Billing.Account\r\n\t\t\t\tinner join Billing.AccountBillingAdjustmentElectric \r\n\t\t\t\tON (Billing.Account.UniqueAccountSeqid = Billing.AccountBillingAdjustmentElectric.UniqueAccountSeqId AND IsCurrentRecord = 'Y')\r\n\t\t\t\tand Billing.Account.UtilityAccountProvider = Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid\r\n\t\t\t\tinner join Billing.ApplicationTimeFrame on Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod\r\n\t\t\t\tinner join Billing.AccountBilling\r\n\t\t\t\tON (Billing.Account.UniqueAccountSeqid = Billing.AccountBilling.UniqueAccountSeqId AND IsCurrentRecord = 'Y')\r\n\t\t\t\tAND Billing.AccountBillingAdjustmentElectric.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision\r\n\t\t\t\tAND Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid = Billing.AccountBilling.UtilityCompanySeqid\r\n\t\t\twhere (Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid = 7 )\r\n\t\t\t\tand ( Billing.AccountBillingAdjustmentElectric.AdjustedAccountBill is null )\r\n\t\t\t\tand ( Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y' )\r\n\t\t\t\r\n\t\t\tSELECT @AccountBillingElectric = @@rowcount\r\n\t\t\tprint 'Number of Account billing electric inserts: ' + cast(@AccountBillingElectric as varchar(10))\r\n\t\t\t\r\n\t\t\tif (@AccountBilling <> @AccountBillingElectric)\r\n\t\t\tbegin\r\n\t\t\t\tset @CommitTransaction = 'N'\r\n\t\t\t\traiserror ('Account billing Rebills (%7d) does not match the Account billing Eelctric Rebills (%7d)', --\r\n\t\t\t\t\t\t   16, -- Severity.\r\n\t\t\t\t\t\t   1, -- State.\r\n\t\t\t\t\t\t   @AccountBilling,\r\n\t\t\t\t\t\t   @AccountBillingElectric\r\n\t\t\t\t) with log;\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tupdate Billing.AccountBillingElectric\r\n\t\t\tset AdjustedAccountElectric = Billing.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid, \r\n\t\t\t\tAuthenticatedUserID = @AuthenticatedUserID,\r\n\t\t\t\tLastUpdate =getdate()\r\n\t\t\tFROM \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric inner join\r\n\t\t\t\tBilling.ApplicationTimeFrame on Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod inner join\r\n\t\t\t\tBilling.AccountBillingElectric  \r\n\t\t\t\tON (Billing.AccountBillingAdjustmentElectric.UniqueAccountSeqid = Billing.AccountBillingElectric.UniqueAccountSeqId ) AND  -- added on 2019-02-21 zd\r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.BillingPeriodRevision = Billing.AccountBillingElectric.BillingPeriodRevision and \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid = Billing.AccountBillingElectric.UtilityCompanySeqid\r\n\t\t\tWHERE \r\n\t\t\t\t(Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid = 7) and \r\n\t\t\t\t(Billing.AccountBillingAdjustmentElectric.AdjustedAccountBill is null) \r\n\t\t\t\tand (Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')                      \t\t\r\n\r\n\t\t\tSELECT @AccountBillingElectricUpdate = @@rowcount\r\n\t\t\tprint 'Number of Account billing electric Updated: ' + cast(@AccountBillingElectricUpdate as varchar(10))\r\n\t\t\t\r\n\t\t\tupdate Billing.AccountBillingAdjustmentElectric\r\n\t\t\tset  \r\n\t\t\t\tProcessedInTheCurrentPeriod ='Y',\r\n\t\t\t\tAdjustedAccount = Billing.AccountBilling.AccountSeqid, \r\n\t\t\t\tAdjustedAccountBill = Billing.AccountBilling.AccountBillingSeqid, \r\n\t\t\t\tAdjustedAccountBillElectric = Billing.AccountBillingElectric.AccountBillingElectricSeqid,\r\n\t\t\t\tLastUpdate = getdate(),\r\n\t\t\t\tAuthenticatedUserID = 1 --@AuthenticatedUserID\r\n\t\t\tFROM \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric inner join\r\n\t\t\t\tBilling.ApplicationTimeFrame on Billing.AccountBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod inner join\r\n\t\t\t\tBilling.AccountBillingElectric on \r\n\t\t\t\tBilling.AccountBillingAdjustmentElectric.AccountBillingAdjustmentElectricSeqid = Billing.AccountBillingElectric.AdjustedAccountElectric and \r\n\t\t\t\t(Billing.AccountBillingAdjustmentElectric.UniqueAccountSeqid = Billing.AccountBillingElectric.UniqueAccountSeqId )   -- added on 2019-02-21 zd\r\n\t\t\t\tINNER join\r\n\t\t\t\tBilling.AccountBilling on Billing.AccountBillingElectric.MonthlyAccountBillingChargesElectric = Billing.AccountBilling.AccountBillingSeqid and \r\n\t\t\t\t(Billing.AccountBillingElectric.UniqueAccountSeqid = Billing.AccountBilling.UniqueAccountSeqId )   -- added on 2019-02-21 zd\r\n\t\t\t\tAND Billing.AccountBillingElectric.BillingPeriodRevision = Billing.AccountBilling.BillingPeriodRevision\r\n\t\t\tWHERE \r\n\t\t\t\t(Billing.AccountBillingAdjustmentElectric.AccountUtilityCompanySeqid = 7) and \r\n\t\t\t\t(Billing.AccountBillingAdjustmentElectric.AdjustedAccountBill is null) and \r\n\t\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n\r\n\t\t\tSELECT @AccountBillingAdjustmentElectric = @@rowcount\r\n\t\t\tprint 'Number of Account billing adjustment electric updates: ' + cast(@AccountBillingAdjustmentElectric as varchar(10))\r\n\t\t\t\r\n\t\t\tif (@AccountBilling <> @AccountBillingAdjustmentElectric)\r\n\t\t\tbegin\r\n\t\t\t\tset @CommitTransaction = 'N'\r\n\t\t\t\traiserror ('Account billing Rebills (%7d) and the Account billing Eelctric Rebills (%7d) match by Account Billing Adjustment Electric (%7d) does not match', --\r\n\t\t\t\t\t\t   16, -- Severity.\r\n\t\t\t\t\t\t   1, -- State.\r\n\t\t\t\t\t\t   @AccountBilling,\r\n\t\t\t\t\t\t   @AccountBillingElectric,\r\n\t\t\t\t\t\t   @AccountBillingAdjustmentElectric\r\n\t\t\t\t\t\t   ) with log;\r\n\t\t\tend\r\n\t\t\t\r\n\t\t\tPRINT '@CommitTransaction = '+@CommitTransaction\r\n\t\tend try\r\n\t\tbegin catch\r\n\t\t\tSELECT \r\n\t\t\t\t@ExchangeErrorMessage ='Error in StoredProcedure %125s at line number %8.0d ',\r\n\t\t\t\t@ErrorMessage = error_message(),\r\n\t\t\t\t@ErrorSeverity = error_severity(),\r\n\t\t\t\t@ErrorState = error_state(),\r\n\t\t\t\t@ErrorNumber = error_number(),\r\n\t\t\t\t@ErrorProcedure = error_procedure(),\r\n\t\t\t\t@ErrorLine = error_line()\t\t\r\n\t\t\t\t\r\n\t\t\tset\t@ErrorMessage = @ExchangeErrorMessage + @ErrorMessage\r\n\t\t\t\t\r\n\t\t\traiserror (@ErrorMessage, -- Message text.\r\n\t\t\t\t\t\t@ErrorSeverity, -- Severity.\r\n\t\t\t\t\t\t@ErrorState, -- State.\r\n\t\t\t\t\t\t@ErrorProcedure,\r\n\t\t\t\t\t\t@ErrorLine\r\n\t\t\t\t\t\t) with log;\r\n\r\n\t\t\tset @CommitTransaction = 'N'\r\n\t\t\trollback transaction ProcessAccountBillingOriginals;\r\n\t\tend catch;\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}