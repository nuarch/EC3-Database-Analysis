{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Temporal",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_InsertNewPeriodFromPublishedToTemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_InsertNewPeriodFromPublishedToTemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to insert a new billing period's data from a source table ("
        },
        {
          "type": "text",
          "text": "Published.FiscalYearPivotByAgencyAndFacilityDollarsAndUsage",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ") into a destination table ("
        },
        {
          "type": "text",
          "text": "Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": "). It ensures that only the next sequential period is inserted and that all necessary hash codes are present before proceeding. The procedure also updates existing records in the destination table to reflect changes in the billing period."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity is considered medium due to the multiple checks and updates involved, as well as the need to ensure data integrity across two tables. The procedure involves conditional logic, multiple joins, and updates, which require careful handling to maintain data consistency."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter specifies the billing period that is intended to be inserted into the temporal table. It is a six-character string representing the period in a format like 'YYYYMM'."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine the Next Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure retrieves the maximum "
                        },
                        {
                          "type": "text",
                          "text": "EffectiveStartPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " from the destination table and calculates the next period using a function "
                        },
                        {
                          "type": "text",
                          "text": "CreateNextPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It checks if the "
                        },
                        {
                          "type": "text",
                          "text": "@PublishedBillingPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " matches the calculated next period. If not, an error is raised, and the procedure exits."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hash Code Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It checks both the source and destination tables for any records with null hash values ("
                        },
                        {
                          "type": "text",
                          "text": "HashValue1",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " or "
                        },
                        {
                          "type": "text",
                          "text": "HashValue2",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "). If any are found, an error is raised, and the procedure exits."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts data from the source table into the destination table for the specified "
                        },
                        {
                          "type": "text",
                          "text": "@PublishedBillingPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", ensuring no duplicate records based on hash values."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the "
                        },
                        {
                          "type": "text",
                          "text": "EffectiveEndPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " for records in the destination table to the current "
                        },
                        {
                          "type": "text",
                          "text": "@PublishedBillingPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " for:"
                        }
                      ]
                    },
                    {
                      "type": "bulletList",
                      "content": [
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Records that exist in previous periods but not in the current period."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Records that exist in the destination but not in the source for the current period."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Completion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Prints a message indicating the process has finished."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the columns used in joins and where clauses, especially "
                },
                {
                  "type": "text",
                  "text": "HashValue1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "HashValue2",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "EffectiveStartPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", are indexed to improve query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may lock tables during execution, potentially impacting other operations. Consider using transaction isolation levels or locking hints if necessary."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the tables are large, consider processing data in batches to reduce the impact on system resources."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the function "
                },
                {
                  "type": "text",
                  "text": "CreateNextPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " correctly calculates the next period. Any errors in this function could lead to incorrect data insertion."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses "
                },
                {
                  "type": "text",
                  "text": "RAISERROR",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for error handling, which stops execution but does not roll back any changes made before the error. Consider wrapping the procedure in a transaction with rollback capabilities."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Null Hash Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure checks for null hash values but does not provide a mechanism to handle or correct them, which could lead to repeated errors."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of the procedure may degrade, especially if indexes are not properly maintained or if the procedure is run frequently."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Temporal].[usp_InsertNewPeriodFromPublishedToTemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage]\n(\r\n\t@PublishedBillingPeriod AS VARCHAR(6)\r\n)\r\nAS\r\nBEGIN\r\n\tDECLARE @MaxPeriod VARCHAR(6) = (SELECT MAX(EffectiveStartPeriod) FROM Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage);\r\n\tDECLARE @NextPeriod VARCHAR(6) = [dbo].[CreateNextPeriod](@MaxPeriod, 'M');\r\n\t\t\r\n\t-- Make sure only next period after the max is being inserted\r\n\tIF (@NextPeriod <> @PublishedBillingPeriod)\r\n\tBEGIN\r\n\t\tRAISERROR ('ERROR: You can only insert this period: %s', 12, 1, @NextPeriod);\r\n\t\tRETURN;\r\n\tEND;\r\n\t\t\t\t\r\n\t-- make sure the hashcode is populated before starting\r\n\tDECLARE @CountNullHashCodeSource INT = (SELECT COUNT(*) FROM [Published].[FiscalYearPivotByAgencyAndFacilityDollarsAndUsage] WHERE HashValue1 IS NULL OR HashValue2 IS NULL);\r\n\tDECLARE @CountNullHashCodeDestination INT =  (SELECT COUNT(*) FROM [Published].[TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage] WHERE HashValue1 IS NULL OR HashValue2 IS NULL);\r\n\r\n\tIF (@CountNullHashCodeSource > 0 OR @CountNullHashCodeDestination > 0)\r\n\tBEGIN\r\n\t\tRAISERROR ('ERROR: HashCode is missing from either [Published].[TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage] or [Published].[FiscalYearPivotByAgencyAndFacilityDollarsAndUsage].', 12, 1);\r\n\t\tRETURN;\r\n\tEND;\r\n\r\n\t---Process start---------------------------------------\r\n\tPRINT 'Inserting initial data from Published.FiscalYearPivotByAgencyAndFacilityDollarsAndUsage to Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage'\r\n\r\n\tINSERT INTO Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage\r\n\t\t( BillToAgencyCode\r\n\t\t,AgencyCodeOEC\r\n\t\t,AgencyName\r\n\t\t,OecFacilityNumber\r\n\t\t,Address1\r\n\t\t,Borough\r\n\t\t,[Block]\r\n\t\t,LotNumber\r\n\t\t,CityPlanningBIN\r\n\t\t,CurrentInvoiceAccountBillingGroup\r\n\t\t,InvoiceAccountBillingGroupDesc\r\n\t\t,FiscalYear\r\n\t\t,UtilityCompany\r\n\t\t,EnergyType\r\n\t\t,JulyOriginalBilledDollars\r\n\t\t,AugustOriginalBilledDollars\r\n\t\t,SeptemberOriginalBilledDollars\r\n\t\t,OctoberOriginalBilledDollars\r\n\t\t,NovemberOriginalBilledDollars\r\n\t\t,DecemberOriginalBilledDollars\r\n\t\t,JanuaryOriginalBilledDollars\r\n\t\t,FebruaryOriginalBilledDollars\r\n\t\t,MarchOriginalBilledDollars\r\n\t\t,AprilOriginalBilledDollars\r\n\t\t,MayOriginalBilledDollars\r\n\t\t,JuneOriginalBilledDollars\r\n\t\t,FiscalYearToDateOriginalBilledDollars\r\n\t\t,JulyOriginalPaidAdjustmentDollars\r\n\t\t,AugustOriginalPaidAdjustmentDollars\r\n\t\t,SeptemberOriginalPaidAdjustmentDollars\r\n\t\t,OctoberOriginalPaidAdjustmentDollars\r\n\t\t,NovemberOriginalPaidAdjustmentDollars\r\n\t\t,DecemberOriginalPaidAdjustmentDollars\r\n\t\t,JanuaryOriginalPaidAdjustmentDollars\r\n\t\t,FebruaryOriginalPaidAdjustmentDollars\r\n\t\t,MarchOriginalPaidAdjustmentDollars\r\n\t\t,AprilOriginalPaidAdjustmentDollars\r\n\t\t,MayOriginalPaidAdjustmentDollars\r\n\t\t,JuneOriginalPaidAdjustmentDollars\r\n\t\t,FiscalYearToDateOriginalPaidAdjustmentDollars\r\n\t\t,JulyOriginalTotalDueDollars\r\n\t\t,AugustOriginalTotalDueDollars\r\n\t\t,SeptemberOriginalTotalDueDollars\r\n\t\t,OctoberOriginalTotalDueDollars\r\n\t\t,NovemberOriginalTotalDueDollars\r\n\t\t,DecemberOriginalTotalDueDollars\r\n\t\t,JanuaryOriginalTotalDueDollars\r\n\t\t,FebruaryOriginalTotalDueDollars\r\n\t\t,MarchOriginalTotalDueDollars\r\n\t\t,AprilOriginalTotalDueDollars\r\n\t\t,MayOriginalTotalDueDollars\r\n\t\t,JuneOriginalTotalDueDollars\r\n\t\t,FiscalYearToDateOriginalTotalDueDollars\r\n\t\t,FiscalYearToDateOriginalEnergyUsage\r\n\t\t,JulyOriginalEnergy\r\n\t\t,AugustOriginalEnergy\r\n\t\t,SeptemberOriginalEnergy\r\n\t\t,OctoberOriginalEnergy\r\n\t\t,NovemberOriginalEnergy\r\n\t\t,DecemberOriginalEnergy\r\n\t\t,JanuaryOriginalEnergy\r\n\t\t,FebruaryOriginalEnergy\r\n\t\t,MarchOriginalEnergy\r\n\t\t,AprilOriginalEnergy\r\n\t\t,MayOriginalEnergy\r\n\t\t,JuneOriginalEnergy\r\n\t\t,JulyOriginalDemand\r\n\t\t,AugustOriginalDemand\r\n\t\t,SeptemberOriginalDemand\r\n\t\t,OctoberOriginalDemand\r\n\t\t,NovemberOriginalDemand\r\n\t\t,DecemberOriginalDemand\r\n\t\t,JanuaryOriginalDemand\r\n\t\t,FebruaryOriginalDemand\r\n\t\t,MarchOriginalDemand\r\n\t\t,AprilOriginalDemand\r\n\t\t,MayOriginalDemand\r\n\t\t,JuneOriginalDemand\r\n\t\t,FiscalYearToDateOriginalDemand\r\n\t\t,JulyRevisedBilledDollars\r\n\t\t,AugustRevisedBilledDollars\r\n\t\t,SeptemberRevisedBilledDollars\r\n\t\t,OctoberRevisedBilledDollars\r\n\t\t,NovemberRevisedBilledDollars\r\n\t\t,DecemberRevisedBilledDollars\r\n\t\t,JanuaryRevisedBilledDollars\r\n\t\t,FebruaryRevisedBilledDollars\r\n\t\t,MarchRevisedBilledDollars\r\n\t\t,AprilRevisedBilledDollars\r\n\t\t,MayRevisedBilledDollars\r\n\t\t,JuneRevisedBilledDollars\r\n\t\t,FiscalYearToDateRevisedBilledDollars\r\n\t\t,FiscalYearToDateRevisedEnergy\r\n\t\t,JulyRevisedEnergy\r\n\t\t,AugustRevisedEnergy\r\n\t\t,SeptemberRevisedEnergy\r\n\t\t,OctoberRevisedEnergy\r\n\t\t,NovemberRevisedEnergy\r\n\t\t,DecemberRevisedEnergy\r\n\t\t,JanuaryRevisedEnergy\r\n\t\t,FebruaryRevisedEnergy\r\n\t\t,MarchRevisedEnergy\r\n\t\t,AprilRevisedEnergy\r\n\t\t,MayRevisedEnergy\r\n\t\t,JuneRevisedEnergy\r\n\t\t,JulyRevisedDemand\r\n\t\t,AugustRevisedDemand\r\n\t\t,SeptemberRevisedDemand\r\n\t\t,OctoberRevisedDemand\r\n\t\t,NovemberRevisedDemand\r\n\t\t,DecemberRevisedDemand\r\n\t\t,JanuaryRevisedDemand\r\n\t\t,FebruaryRevisedDemand\r\n\t\t,MarchRevisedDemand\r\n\t\t,AprilRevisedDemand\r\n\t\t,MayRevisedDemand\r\n\t\t,JuneRevisedDemand\r\n\t\t,FiscalYearToDateRevisedDemand\r\n\t\t,JulyNetDollarChange\r\n\t\t,AugustNetDollarChange\r\n\t\t,SeptemberNetDollarChange\r\n\t\t,OctoberNetDollarChange\r\n\t\t,NovemberNetDollarChange\r\n\t\t,DecemberNetDollarChange\r\n\t\t,JanuaryNetDollarChange\r\n\t\t,FebruaryNetDollarChange\r\n\t\t,MarchNetDollarChange\r\n\t\t,AprilNetDollarChange\r\n\t\t,MayNetDollarChange\r\n\t\t,JuneNetDollarChange\r\n\t\t,FiscalYearToDateNetDollarChange\r\n\t\t,FiscalYearToDateNetEnergyUsageChange\r\n\t\t,JulyEnergyUsageChange\r\n\t\t,AugustEnergyUsageChange\r\n\t\t,SeptemberEnergyUsageChange\r\n\t\t,OctoberEnergyUsageChange\r\n\t\t,NovemberEnergyUsageChange\r\n\t\t,DecemberEnergyUsageChange\r\n\t\t,JanuaryEnergyUsageChange\r\n\t\t,FebruaryEnergyUsageChange\r\n\t\t,MarchEnergyUsageChange\r\n\t\t,AprilEnergyUsageChange\r\n\t\t,MayEnergyUsageChange\r\n\t\t,JuneEnergyUsageChange\r\n\t\t,JulyNetDemandUsageChange\r\n\t\t,AugustNetDemandUsageChange\r\n\t\t,SeptemberNetDemandUsageChange\r\n\t\t,OctoberNetDemandUsageChange\r\n\t\t,NovemberNetDemandUsageChange\r\n\t\t,DecemberNetDemandUsageChange\r\n\t\t,JanuaryNetDemandUsageChange\r\n\t\t,FebruaryNetDemandUsageChange\r\n\t\t,MarchNetDemandUsageChange\r\n\t\t,AprilNetDemandUsageChange\r\n\t\t,MayNetDemandUsageChange\r\n\t\t,JuneNetDemandUsageChange\r\n\t\t,FiscalYearToDateNetDemandUsageChange\r\n\t\t,FacilityName\r\n\t\t,EffectiveStartPeriod\r\n\t\t,EffectiveEndPeriod\r\n\t\t,HashValue1\r\n\t\t,HashValue2)\r\n\tSELECT \r\n\t\talsbf.BillToAgencyCode\r\n\t\t,alsbf.AgencyCodeOEC\r\n\t\t,alsbf.AgencyName\r\n\t\t,alsbf.OecFacilityNumber\r\n\t\t,alsbf.Address1\r\n\t\t,alsbf.Borough\r\n\t\t,alsbf.[Block]\r\n\t\t,alsbf.LotNumber\r\n\t\t,alsbf.CityPlanningBIN\r\n\t\t,alsbf.CurrentInvoiceAccountBillingGroup\r\n\t\t,alsbf.InvoiceAccountBillingGroupDesc\r\n\t\t,alsbf.FiscalYear\r\n\t\t,alsbf.UtilityCompany\r\n\t\t,alsbf.EnergyType\r\n\t\t,alsbf.JulyOriginalBilledDollars\r\n\t\t,alsbf.AugustOriginalBilledDollars\r\n\t\t,alsbf.SeptemberOriginalBilledDollars\r\n\t\t,alsbf.OctoberOriginalBilledDollars\r\n\t\t,alsbf.NovemberOriginalBilledDollars\r\n\t\t,alsbf.DecemberOriginalBilledDollars\r\n\t\t,alsbf.JanuaryOriginalBilledDollars\r\n\t\t,alsbf.FebruaryOriginalBilledDollars\r\n\t\t,alsbf.MarchOriginalBilledDollars\r\n\t\t,alsbf.AprilOriginalBilledDollars\r\n\t\t,alsbf.MayOriginalBilledDollars\r\n\t\t,alsbf.JuneOriginalBilledDollars\r\n\t\t,alsbf.FiscalYearToDateOriginalBilledDollars\r\n\t\t,alsbf.JulyOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.AugustOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.SeptemberOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.OctoberOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.NovemberOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.DecemberOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.JanuaryOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.FebruaryOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.MarchOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.AprilOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.MayOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.JuneOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.FiscalYearToDateOriginalPaidAdjustmentDollars\r\n\t\t,alsbf.JulyOriginalTotalDueDollars\r\n\t\t,alsbf.AugustOriginalTotalDueDollars\r\n\t\t,alsbf.SeptemberOriginalTotalDueDollars\r\n\t\t,alsbf.OctoberOriginalTotalDueDollars\r\n\t\t,alsbf.NovemberOriginalTotalDueDollars\r\n\t\t,alsbf.DecemberOriginalTotalDueDollars\r\n\t\t,alsbf.JanuaryOriginalTotalDueDollars\r\n\t\t,alsbf.FebruaryOriginalTotalDueDollars\r\n\t\t,alsbf.MarchOriginalTotalDueDollars\r\n\t\t,alsbf.AprilOriginalTotalDueDollars\r\n\t\t,alsbf.MayOriginalTotalDueDollars\r\n\t\t,alsbf.JuneOriginalTotalDueDollars\r\n\t\t,alsbf.FiscalYearToDateOriginalTotalDueDollars\r\n\t\t,alsbf.FiscalYearToDateOriginalEnergyUsage\r\n\t\t,alsbf.JulyOriginalEnergy\r\n\t\t,alsbf.AugustOriginalEnergy\r\n\t\t,alsbf.SeptemberOriginalEnergy\r\n\t\t,alsbf.OctoberOriginalEnergy\r\n\t\t,alsbf.NovemberOriginalEnergy\r\n\t\t,alsbf.DecemberOriginalEnergy\r\n\t\t,alsbf.JanuaryOriginalEnergy\r\n\t\t,alsbf.FebruaryOriginalEnergy\r\n\t\t,alsbf.MarchOriginalEnergy\r\n\t\t,alsbf.AprilOriginalEnergy\r\n\t\t,alsbf.MayOriginalEnergy\r\n\t\t,alsbf.JuneOriginalEnergy\r\n\t\t,alsbf.JulyOriginalDemand\r\n\t\t,alsbf.AugustOriginalDemand\r\n\t\t,alsbf.SeptemberOriginalDemand\r\n\t\t,alsbf.OctoberOriginalDemand\r\n\t\t,alsbf.NovemberOriginalDemand\r\n\t\t,alsbf.DecemberOriginalDemand\r\n\t\t,alsbf.JanuaryOriginalDemand\r\n\t\t,alsbf.FebruaryOriginalDemand\r\n\t\t,alsbf.MarchOriginalDemand\r\n\t\t,alsbf.AprilOriginalDemand\r\n\t\t,alsbf.MayOriginalDemand\r\n\t\t,alsbf.JuneOriginalDemand\r\n\t\t,alsbf.FiscalYearToDateOriginalDemand\r\n\t\t,alsbf.JulyRevisedBilledDollars\r\n\t\t,alsbf.AugustRevisedBilledDollars\r\n\t\t,alsbf.SeptemberRevisedBilledDollars\r\n\t\t,alsbf.OctoberRevisedBilledDollars\r\n\t\t,alsbf.NovemberRevisedBilledDollars\r\n\t\t,alsbf.DecemberRevisedBilledDollars\r\n\t\t,alsbf.JanuaryRevisedBilledDollars\r\n\t\t,alsbf.FebruaryRevisedBilledDollars\r\n\t\t,alsbf.MarchRevisedBilledDollars\r\n\t\t,alsbf.AprilRevisedBilledDollars\r\n\t\t,alsbf.MayRevisedBilledDollars\r\n\t\t,alsbf.JuneRevisedBilledDollars\r\n\t\t,alsbf.FiscalYearToDateRevisedBilledDollars\r\n\t\t,alsbf.FiscalYearToDateRevisedEnergy\r\n\t\t,alsbf.JulyRevisedEnergy\r\n\t\t,alsbf.AugustRevisedEnergy\r\n\t\t,alsbf.SeptemberRevisedEnergy\r\n\t\t,alsbf.OctoberRevisedEnergy\r\n\t\t,alsbf.NovemberRevisedEnergy\r\n\t\t,alsbf.DecemberRevisedEnergy\r\n\t\t,alsbf.JanuaryRevisedEnergy\r\n\t\t,alsbf.FebruaryRevisedEnergy\r\n\t\t,alsbf.MarchRevisedEnergy\r\n\t\t,alsbf.AprilRevisedEnergy\r\n\t\t,alsbf.MayRevisedEnergy\r\n\t\t,alsbf.JuneRevisedEnergy\r\n\t\t,alsbf.JulyRevisedDemand\r\n\t\t,alsbf.AugustRevisedDemand\r\n\t\t,alsbf.SeptemberRevisedDemand\r\n\t\t,alsbf.OctoberRevisedDemand\r\n\t\t,alsbf.NovemberRevisedDemand\r\n\t\t,alsbf.DecemberRevisedDemand\r\n\t\t,alsbf.JanuaryRevisedDemand\r\n\t\t,alsbf.FebruaryRevisedDemand\r\n\t\t,alsbf.MarchRevisedDemand\r\n\t\t,alsbf.AprilRevisedDemand\r\n\t\t,alsbf.MayRevisedDemand\r\n\t\t,alsbf.JuneRevisedDemand\r\n\t\t,alsbf.FiscalYearToDateRevisedDemand\r\n\t\t,alsbf.JulyNetDollarChange\r\n\t\t,alsbf.AugustNetDollarChange\r\n\t\t,alsbf.SeptemberNetDollarChange\r\n\t\t,alsbf.OctoberNetDollarChange\r\n\t\t,alsbf.NovemberNetDollarChange\r\n\t\t,alsbf.DecemberNetDollarChange\r\n\t\t,alsbf.JanuaryNetDollarChange\r\n\t\t,alsbf.FebruaryNetDollarChange\r\n\t\t,alsbf.MarchNetDollarChange\r\n\t\t,alsbf.AprilNetDollarChange\r\n\t\t,alsbf.MayNetDollarChange\r\n\t\t,alsbf.JuneNetDollarChange\r\n\t\t,alsbf.FiscalYearToDateNetDollarChange\r\n\t\t,alsbf.FiscalYearToDateNetEnergyUsageChange\r\n\t\t,alsbf.JulyEnergyUsageChange\r\n\t\t,alsbf.AugustEnergyUsageChange\r\n\t\t,alsbf.SeptemberEnergyUsageChange\r\n\t\t,alsbf.OctoberEnergyUsageChange\r\n\t\t,alsbf.NovemberEnergyUsageChange\r\n\t\t,alsbf.DecemberEnergyUsageChange\r\n\t\t,alsbf.JanuaryEnergyUsageChange\r\n\t\t,alsbf.FebruaryEnergyUsageChange\r\n\t\t,alsbf.MarchEnergyUsageChange\r\n\t\t,alsbf.AprilEnergyUsageChange\r\n\t\t,alsbf.MayEnergyUsageChange\r\n\t\t,alsbf.JuneEnergyUsageChange\r\n\t\t,alsbf.JulyNetDemandUsageChange\r\n\t\t,alsbf.AugustNetDemandUsageChange\r\n\t\t,alsbf.SeptemberNetDemandUsageChange\r\n\t\t,alsbf.OctoberNetDemandUsageChange\r\n\t\t,alsbf.NovemberNetDemandUsageChange\r\n\t\t,alsbf.DecemberNetDemandUsageChange\r\n\t\t,alsbf.JanuaryNetDemandUsageChange\r\n\t\t,alsbf.FebruaryNetDemandUsageChange\r\n\t\t,alsbf.MarchNetDemandUsageChange\r\n\t\t,alsbf.AprilNetDemandUsageChange\r\n\t\t,alsbf.MayNetDemandUsageChange\r\n\t\t,alsbf.JuneNetDemandUsageChange\r\n\t\t,alsbf.FiscalYearToDateNetDemandUsageChange\r\n\t\t,alsbf.FacilityName\r\n\t\t,alsbf.PublishedBillingPeriod\r\n\t\t,'999912' \r\n\t\t,alsbf.HashValue1\r\n\t\t,alsbf.HashValue2\t\t\r\n\tFROM Published.FiscalYearPivotByAgencyAndFacilityDollarsAndUsage AS alsbf\r\n\t\tLEFT JOIN (SELECT t.HashValue1,t.HashValue2,t.EffectiveStartPeriod FROM Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage t WHERE EffectiveEndPeriod='999912') AS talsbf \r\n\t\t\tON talsbf.HashValue1 = alsbf.HashValue1 AND talsbf.HashValue2 = alsbf.HashValue2\r\n\tWHERE alsbf.PublishedBillingPeriod = @PublishedBillingPeriod AND talsbf.EffectiveStartPeriod IS NULL;\r\n\t\t\t\r\n\t-- this is data change, just set datato publishedbillingperiod\r\n\tUPDATE Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage\r\n\tSET EffectiveEndPeriod = @PublishedBillingPeriod\r\n\tWHERE Seqid IN (\r\n\t\tSELECT previousPeriods.Seqid\r\n\t\tFROM \r\n\t\t(SELECT talrdfcp.Seqid,talrdfcp.AgencyCodeOEC,talrdfcp.OecFacilityNumber,talrdfcp.CurrentInvoiceAccountBillingGroup,talrdfcp.FiscalYear,talrdfcp.EnergyType,talrdfcp.InvoiceAccountBillingGroupDesc,talrdfcp.EffectiveEndPeriod FROM Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage AS talrdfcp WHERE talrdfcp.EffectiveStartPeriod=@PublishedBillingPeriod) AS processingPeriod\r\n\t\tINNER JOIN \r\n\t\t(SELECT talrdfcp.Seqid,talrdfcp.AgencyCodeOEC,talrdfcp.OecFacilityNumber,talrdfcp.CurrentInvoiceAccountBillingGroup,talrdfcp.FiscalYear,talrdfcp.EnergyType,talrdfcp.InvoiceAccountBillingGroupDesc,talrdfcp.EffectiveEndPeriod FROM Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage AS talrdfcp WHERE talrdfcp.EffectiveStartPeriod<@PublishedBillingPeriod) AS previousPeriods\r\n\t\tON previousPeriods.AgencyCodeOEC= processingPeriod.AgencyCodeOEC\r\n\t\tAND previousPeriods.OecFacilityNumber = processingPeriod.OecFacilityNumber\r\n\t\tAND previousPeriods.CurrentInvoiceAccountBillingGroup = processingPeriod.CurrentInvoiceAccountBillingGroup\r\n\t\tAND previousPeriods.FiscalYear = processingPeriod.FiscalYear\r\n\t\tAND previousPeriods.EnergyType = processingPeriod.EnergyType\r\n\t\tAND previousPeriods.InvoiceAccountBillingGroupDesc = processingPeriod.InvoiceAccountBillingGroupDesc\r\n\t\tWHERE previousPeriods.EffectiveEndPeriod='999912');\r\n\r\n\t-- this is existing accountbilling seqid but does not exist in current period, set datato publishedbillingperiod\r\n\tUPDATE Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage\r\n\tSET EffectiveEndPeriod = @PublishedBillingPeriod\r\n\tWHERE Seqid IN (\r\n\t\tSELECT talrdfcp.Seqid FROM \r\n\t\tPublished.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage AS talrdfcp\r\n\t\tLEFT JOIN \r\n\t\tPublished.FiscalYearPivotByAgencyAndFacilityDollarsAndUsage AS alrdfcp\r\n\t\tON alrdfcp.HashValue1 = talrdfcp.HashValue1 AND  alrdfcp.HashValue2 = talrdfcp.HashValue2\r\n\t\tWHERE alrdfcp.PublishedBillingPeriod=@PublishedBillingPeriod\r\n\t\tAND  talrdfcp.EffectiveEndPeriod='999912'\r\n\t\tAND alrdfcp.FiscalYear IS NULL);\r\n\r\n\t-- this is setting datato to publishedbillingperiod for data that exists in destination but not exist in source\r\n\tUPDATE Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage\r\n\tSET EffectiveEndPeriod = @PublishedBillingPeriod\r\n\tWHERE Seqid IN (\r\n\t\tSELECT t.Seqid\r\n\t\tFROM \r\n\t\t(\r\n\t\t\tSELECT Seqid,HashValue1,HashValue2 FROM Published.TemporalFiscalYearPivotByAgencyAndFacilityDollarsAndUsage\r\n\t\t\tWHERE EffectiveStartPeriod <= @PublishedBillingPeriod AND EffectiveEndPeriod > @PublishedBillingPeriod\r\n\t\t) t\r\n\t\tLEFT JOIN\r\n\t\t(\r\n\t\t\tSELECT ammlrdfcp.HashValue1,ammlrdfcp.HashValue2,ammlrdfcp.PublishedBillingPeriod FROM Published.FiscalYearPivotByAgencyAndFacilityDollarsAndUsage AS ammlrdfcp\r\n\t\t\tWHERE ammlrdfcp.PublishedBillingPeriod = @PublishedBillingPeriod\r\n\t\t) p \r\n\t\tON p.HashValue1 = t.HashValue1 AND p.HashValue2 = t.HashValue2\r\n\t\tWHERE p.PublishedBillingPeriod IS NULL);\r\n\t--PROCESS ENDS-------------------------\t\t          \r\n         \t\t\t\r\n\tPRINT 'process finished';\r\nEND;"
        }
      ]
    }
  ]
}