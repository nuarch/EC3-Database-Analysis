{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_19_helper_UploadMeterDataToEC3",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_19_helper_UploadMeterDataToEC3",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to manage and process gas billing adjustments within a SQL Server database. It performs several key operations: checking if adjustments have been processed, inserting new adjustments, updating existing billing records, and handling errors. The procedure interacts with multiple tables, primarily "
        },
        {
          "type": "text",
          "text": "Billing.MeterBillingAdjustmentGas",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", "
        },
        {
          "type": "text",
          "text": "Billing.MeterBilling",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", and "
        },
        {
          "type": "text",
          "text": "Billing.MeterBillingGas",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", to ensure that gas billing data is accurately recorded and updated."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional checks and operations, including inserts, updates, and joins across several tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses transaction management and error handling with "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " blocks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure includes logic for both inserting new records and updating existing ones, which requires careful handling of data integrity and consistency."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves complex business logic related to billing periods and adjustments."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not explicitly take any input parameters. Instead, it relies on data retrieved from the database tables to perform its operations. Key variables are initialized and used within the procedure to manage the workflow."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring several variables to store counts, billing period information, and other necessary data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves the current billing period and related identifiers from the "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadAccountBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Adjustment Check",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It checks if meter billing adjustments for gas have already been processed for the current billing period and utility company."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If adjustments have not been processed, it inserts new records into "
                },
                {
                  "type": "text",
                  "text": "Billing.MeterBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " from "
                },
                {
                  "type": "text",
                  "text": "Gas.UploadMeterBillingAdjustmentGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If existing adjustments are found, it updates records in "
                },
                {
                  "type": "text",
                  "text": "Billing.MeterBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Billing.MeterBillingGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with new adjustment data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert New Billing Records",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If no existing billing records are found, it inserts new records into "
                },
                {
                  "type": "text",
                  "text": "Billing.MeterBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Billing.MeterBillingGas",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure includes a "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block to handle errors, rolling back transactions and raising an error message if an exception occurs."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved in joins and where clauses are properly indexed to improve query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of transactions can lock resources, potentially leading to contention. Ensure that transactions are kept as short as possible."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Row Count Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "COUNT(*)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "@@rowcount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can be resource-intensive, especially on large datasets. Consider optimizing these operations if performance issues arise."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the data volume is large, consider processing data in batches to reduce the load on the database."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves complex updates and inserts, which could lead to data integrity issues if not handled correctly. Ensure that all business rules are correctly implemented."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues if multiple instances are run simultaneously, especially given the use of transactions and updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure includes error handling, ensure that all potential exceptions are covered and that the system can recover gracefully."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the data volume grows, the performance of this procedure may degrade. Regular monitoring and optimization may be necessary."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The complexity of the procedure makes it challenging to maintain. Ensure that documentation is kept up-to-date and that changes are thoroughly tested."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [ConEd].[usp_Upload_19_helper_UploadMeterDataToEC3]\nAS \r\nBEGIN \r\n\t-- =============================================\r\n\t-- Update History:\r\n\t--\r\n\t-- UPDATE   VY  11/27/2018  Modified for UniqueAccountSeqID\r\n\t-- UPDATE   VY  12/20/2018  Modified for UniqueMeterSeqID\r\n\t-- UPDATE   VY  01/17/2018  Modified by removing OriginalAccountNumber from the join\r\n\t-- =============================================\r\n\t--Declare Variables                                            \r\n\t--**************************************************************************************\r\n\t--\r\n    DECLARE @RC INT\r\n--\r\n    DECLARE @NumberOfAdjustmentsAdded INT\r\n    DECLARE @CurrentBillingPeriod VARCHAR(8)\r\n    DECLARE @InvoiceAccountBillingGroupSeqid INT \r\n    DECLARE @UtilityCompanySeqid INT\r\n--\r\n    DECLARE @HasMeterBillingAdjustmentGasBeenProcessed INT\r\n    DECLARE @HasMeterBillingGasBeenProcessed INT\r\n    DECLARE @HasMeterBillingBeenProcessed INT\r\n    DECLARE @HasMeterBillingInsertsBeenProcessed INT\r\n--\r\n    DECLARE @BillingMeterBillingGasUpdateTransactionCount INT\r\n    DECLARE @BillingMeterBillingUpdateTransactionCount INT \r\n--\r\n    DECLARE @BillingMeterBillingGasInsertTransactionCount INT\r\n    DECLARE @BillingMeterBillingInsertTransactionCount INT \r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n--************************************************************************************** \r\n--\tMain Processing\r\n--**************************************************************************************\r\n--\r\n--\r\n    SELECT TOP ( 1 )\r\n            @CurrentBillingPeriod = BillingPeriod ,\r\n            @InvoiceAccountBillingGroupSeqid = InvoiceAccountBillingGroupSeqid ,\r\n            @UtilityCompanySeqid = UtilityCompanySeqid\r\n    FROM Gas.UploadAccountBillingAdjustmentGas\r\n--\r\n    SELECT  @HasMeterBillingAdjustmentGasBeenProcessed = COUNT(*)\r\n    FROM Billing.MeterBillingAdjustmentGas MBAG\r\n            INNER JOIN Billing.Account A ON MBAG.UniqueAccountSeqId = A.UniqueAccountSeqid \r\n\t\t\tAND A.IsCurrentRecord = 'Y' \r\n\t\t\tAND MBAG.UtilityCompanySeqid = A.UtilityAccountProvider\r\n            --AND MBAG.OriginalAccountNumber = Billing.Account.OriginalAccountNumber\r\n    WHERE   MBAG.LastPeriodModified = @CurrentBillingPeriod\r\n            AND MBAG.UtilityCompanySeqid = @UtilityCompanySeqid\r\n            AND A.CurrentInvoiceAccountGroup = @InvoiceAccountBillingGroupSeqid\r\n--\r\n\tDECLARE @errMessage VARCHAR(max)\r\n\tSET XACT_ABORT ON\r\n\tBEGIN TRY\r\n\r\n\r\n    IF ( @HasMeterBillingAdjustmentGasBeenProcessed = 0 ) \r\n        BEGIN\r\n\t--\r\n            INSERT  INTO Billing.MeterBillingAdjustmentGas\r\n                    ( UploadMeterBillingAdjustmentGasSeqid ,\r\n                        FacilityName ,\r\n                        ServiceAddress ,\r\n                        UtilityCompanySeqid ,\r\n                        AccountSeqid ,\r\n\t\t\t\t\t\tUniqueAccountSeqId, /* added on 12/20/2018 */\r\n                        MeterSeqid ,\r\n\t\t\t\t\t\tUniqueMeterSeqId, /* added on 12/20/2018 */\r\n                        AccountExchangeMeterTrackSeqid ,\r\n                        MeterBillingSeqid ,\r\n                        MeterBillingGasSeqid ,\r\n                        OriginalAccountNumber ,\r\n                        OriginalMeterNumber ,\r\n                        LastPeriodModified ,\r\n                        BillingPeriod ,\r\n                        BillingPeriodRevision ,\r\n                        FirstCancelPeriod ,\r\n                        NumberOfTransactions ,\r\n                        NumberOfRebillTransactions ,\r\n                        NumberOfCancelTransactions ,\r\n                        BillingAction ,\r\n                        MeterBillingStatus ,\r\n                        MeterBillingPreviousStatus ,\r\n                        MeterBillingStatusPeriod ,\r\n                        PriorRevisedBilledCCF ,\r\n                        RevisedBilledCCF ,\r\n                        CanceledBilledCCF ,\r\n                        PriorRevisedBilledTherms ,\r\n                        RevisedBilledTherms ,\r\n                        CanceledBilledTherms ,\r\n                        InitialCancelFromDate ,\r\n                        CurrentBillingToDate ,\r\n                        GasRateCode ,\r\n                        FromDate ,\r\n                        ToDate ,\r\n                        FromReadingDate ,\r\n                        ToReadingDate ,\r\n                        MeterFromReading ,\r\n                        MeterToReading ,\r\n                        Ccf ,\r\n                        Therms ,\r\n                        ThermsFactor ,\r\n                        MeterConstant ,\r\n                        TotalBillingDaysRebilled ,\r\n                        NumberOfBillingPeriods ,\r\n                        BillingDays ,\r\n                        BillingDate ,\r\n                        ReadingCode ,\r\n                        NumberOfDials ,\r\n                        MeterType ,\r\n                        ProcessedInTheCurrentPeriod ,\r\n                        ProcessEffectiveDate ,\r\n                        CancelReadingCode ,\r\n                        CancelFromDate ,\r\n                        CancelToDate ,\r\n                        CancelMeterFromReading ,\r\n                        CancelMeterToReading ,\r\n                        CancelCcf ,\r\n                        CancelTherms ,\r\n                        CancelThermsFactor ,\r\n                        CancelMeterConstant ,\r\n                        InitialPostingDate ,\r\n                        DerivedFromSpannedBill ,\r\n                        SpannedBillingPeriodRevision ,\r\n                        SpannedFirstCanceledBillingPeriod ,\r\n                        SpannedCCF ,\r\n                        SpannedThermFactor ,\r\n                        SpannedTherm ,\r\n                        SpannedMonthlyPercentage ,\r\n                        SpannedTotalPercentage ,\r\n                        EstimatedOrActualBilling ,\r\n                        MeterReset ,\r\n                        AuthenticatedUserID ,\r\n                        Notes ,\r\n                        DateAdded ,\r\n                        LastUpdate ,\r\n                        BillCreationDate ,\r\n                        EnergySource ,\r\n                        BillingCycle ,\r\n                        SalesType ,\r\n                        IsTimeOfDayAccount ,\r\n                        MeterDials ,\r\n                        GasCorrectionFactor\r\n                    )\r\n                    SELECT  UploadMeterBillingAdjustmentGasSeqid ,\r\n                            FacilityName ,\r\n                            ServiceAddress ,\r\n                            UtilityCompanySeqid ,\r\n                            AccountSeqid ,\r\n\t\t\t\t\t\t\tUniqueAccountSeqid, /* added on 12/20/2018 */\r\n                            MeterSeqid ,\r\n\t\t\t\t\t\t\tUniqueMeterSeqId, /* added on 12/20/2018 */\r\n                            AccountExchangeMeterTrackSeqid ,\r\n                            MeterBillingSeqid ,\r\n                            MeterBillingGasSeqid ,\r\n                            OriginalAccountNumber ,\r\n                            OriginalMeterNumber ,\r\n                            BillingPeriod , --LastPeriodModified, \r\n                            BillingPeriod ,\r\n                            BillingPeriodRevision ,\r\n                            FirstCancelPeriod ,\r\n                            NumberOfTransactions ,\r\n                            NumberOfRebillTransactions ,\r\n                            NumberOfCancelTransactions ,\r\n                            BillingAction ,\r\n                            MeterBillingStatus ,\r\n                            MeterBillingPreviousStatus ,\r\n                            MeterBillingStatusPeriod ,\r\n                            PriorRevisedBilledCCF ,\r\n                            RevisedBilledCCF ,\r\n                            CanceledBilledCCF ,\r\n                            PriorRevisedBilledTherms ,\r\n                            RevisedBilledTherms ,\r\n                            CanceledBilledTherms ,\r\n                            InitialCancelFromDate ,\r\n                            CurrentBillingToDate ,\r\n                            GasRateCode ,\r\n                            FromDate ,\r\n                            ToDate ,\r\n                            FromReadingDate ,\r\n                            ToReadingDate ,\r\n                            MeterFromReading ,\r\n                            MeterToReading ,\r\n                            Ccf ,\r\n                            Therms ,\r\n                            ThermsFactor ,\r\n                            MeterConstant ,\r\n                            TotalBillingDaysRebilled ,\r\n                            NumberOfBillingPeriods ,\r\n                            BillingDays ,\r\n                            BillingDate ,\r\n                            ReadingCode ,\r\n                            NumberOfDials ,\r\n                            MeterType ,\r\n                            ProcessedInTheCurrentPeriod ,\r\n                            ProcessEffectiveDate ,\r\n                            CancelReadingCode ,\r\n                            CancelFromDate ,\r\n                            CancelToDate ,\r\n                            CancelMeterFromReading ,\r\n                            CancelMeterToReading ,\r\n                            CancelCcf ,\r\n                            CancelTherms ,\r\n                            CancelThermsFactor ,\r\n                            CancelMeterConstant ,\r\n                            InitialPostingDate ,\r\n                            DerivedFromSpannedBill ,\r\n                            SpannedBillingPeriodRevision ,\r\n                            SpannedFirstCanceledBillingPeriod ,\r\n                            SpannedCCF ,\r\n                            SpannedThermFactor ,\r\n                            SpannedTherm ,\r\n                            SpannedMonthlyPercentage ,\r\n                            SpannedTotalPercentage ,\r\n                            EstimatedOrActualBilling ,\r\n                            MeterReset ,\r\n                            AuthenticatedUserID ,\r\n                            Notes ,\r\n                            DateAdded ,\r\n                            LastUpdate ,\r\n                            BillCreationDate ,\r\n                            EnergySource ,\r\n                            BillingCycle ,\r\n                            SalesType ,\r\n                            IsTimeOfDayAccount ,\r\n                            MeterDials ,\r\n                            GasCorrectionFactor\r\n                    FROM Gas.UploadMeterBillingAdjustmentGas\r\n        END\r\n--\r\n--\r\n-- Update the adjustments first since the Billing.AccountBillingAdjustmentGas for the current period\r\n-- has indetified all of the adjustments that exist in EC3.  The Billing.MeterBilling MeterBillingSeqid\r\n-- is not null and the Billing.MeterBillingGas MeterBillingGasSeqid is not null.\r\n-- \r\n-- The key to this update is the setting of the LastUpdate to a null value so the audit trigger preserves\r\n-- the prior state of the row before the Billing.AccountBilling or Billing.AccountBillingGas are updated\r\n-- with the adjusted values.\r\n--\r\n--\tselect @HasMeterBillingGasBeenProcessed = count(*) from Billing.MeterBillingGas  where BillingPeriod = @CurrentBillingPeriod and @UtilityCompanySeqid=UtilityCompanySeqid\r\n--\tselect @HasMeterBillingBeenProcessed = count(*) from Billing.MeterBilling  \r\n--\twhere BillingPeriod = @CurrentBillingPeriod and @UtilityCompanySeqid=AccountUtilityCompanySeqid\r\n--\r\n    DECLARE @HasMeterBillingUpdatedBeenProcessed INT\r\n--\r\n    SELECT  @HasMeterBillingUpdatedBeenProcessed = COUNT(*)\r\n\tSELECT COUNT(*)\r\n    FROM Billing.MeterBillingAdjustmentGas MBAG\r\n            INNER JOIN Billing.Account A \r\n\t\t\t\tON MBAG.UniqueAccountSeqId = A.UniqueAccountSeqid \r\n\t\t\t\tAND A.IscurrentRecord = 'Y' \r\n\t\t\t\tAND MBAG.UtilityCompanySeqid = A.UtilityAccountProvider\r\n\t\t\tLEFT JOIN Billing.MeterBilling MB \r\n\t\t\t\tON MBAG.MeterBillingSeqid = MB.MeterBillingSeqid\r\n\t\t\t\tAND MBAG.UniqueAccountSeqId = MB.UniqueAccountSeqId\r\n\t\t\t\tAND MBAG.UniqueMeterSeqId = MB.UniqueMeterSeqId\r\n\t\t\t\tAND MBAG.LastPeriodModified = MB.LastPeriodModified\r\n    WHERE   ( MBAG.MeterBillingSeqid IS NOT NULL )\r\n            AND MBAG.LastPeriodModified = @CurrentBillingPeriod\r\n            AND MBAG.UtilityCompanySeqid = @UtilityCompanySeqid\r\n            AND A.CurrentInvoiceAccountGroup = @InvoiceAccountBillingGroupSeqid\r\n\r\n--\r\n-- if this occurs \"isnull(@HasMeterBillingInsertsBeenProcessed,1)\"  then set the value to 1 and do not process\r\n--\r\n    IF ( ISNULL(@HasMeterBillingUpdatedBeenProcessed, 0) <> 0 ) \r\n        BEGIN\r\n\t--\r\n\t--\tUpdate the existing Billing.MeterBilling adjustments prior to inserting the adjustments\r\n\t--\r\n            UPDATE  Billing.MeterBilling\r\n            SET     IsDerived = MBAG.DerivedFromSpannedBill ,\r\n                    UploadFileSeqid = MBAG.UploadMeterBillingAdjustmentGasSeqid ,\r\n                    LastPeriodModified = MBAG.LastPeriodModified ,\r\n                    MeterBillingStatus = MBAG.MeterBillingStatus ,\r\n                    PreviousMeterBillingStatus = MBAG.MeterBillingPreviousStatus ,\r\n                    MeterBillingStatusCodePeriod = MBAG.MeterBillingStatusPeriod ,\r\n                    EstimatedReading = MBAG.EstimatedOrActualBilling ,\r\n                    ConsecutivePeriodsEstimatedReading = [Common].[CalculateConsecutiveNumberOfEstimatedReadings](MB.OriginalAccountNumber,\r\n                                                            MB.OriginalMeterNumber,\r\n                                                            MB.AccountUtilityCompanySeqid,\r\n                                                            MB.BillingPeriodRevision,\r\n                                                            MBAG.BillingCycle,\r\n                                                            MBAG.EstimatedOrActualBilling) ,\r\n                    BillingPeriodDays = MBAG.BillingDays ,\r\n                    FromDate = MBAG.FromDate ,\r\n                    ToDate = MBAG.ToDate ,\r\n                    ToReadingDate = MBAG.ToReadingDate ,\r\n                    FromReadingDate = MBAG.FromReadingDate ,\r\n                    Consumption = MBAG.RevisedBilledTherms ,\r\n                    AdjustmentRecordSeqid = MBAG.MeterBillingAdjustmentGasSeqid ,\r\n                    AuthenticatedUserID = MBAG.AuthenticatedUserID ,\r\n                    Notes = MBAG.Notes ,\r\n                    LastUpdate = GETDATE() ,\r\n                    FireAuditTrigger = 'Y'\r\n            FROM Billing.MeterBillingAdjustmentGas MBAG\r\n                    INNER JOIN Billing.MeterBilling MB ON MBAG.UniqueAccountSeqId = MB.UniqueAccountSeqId\r\n                                                        AND MBAG.UniqueMeterSeqId = MB.UniqueMeterSeqId\r\n                                                        AND MBAG.UtilityCompanySeqid = MB.AccountUtilityCompanySeqid\r\n                                                        AND MBAG.BillingPeriodRevision = MB.BillingPeriod\r\n                                                        AND MBAG.BillingPeriodRevision = MB.BillingPeriodRevision\r\n            WHERE   ( MBAG.MeterBillingSeqid IS NOT NULL )\r\n                    AND ( MBAG.BillingPeriod = @CurrentBillingPeriod )\r\n\t--\r\n            SET @BillingMeterBillingUpdateTransactionCount = @@rowcount\r\n\t--\r\n\t--\tUpdate the existing Billing.MeterBillingGas adjustments prior to inserting the adjustments\r\n\t--\r\n\t--\tNote:  The legacy GasCorrectionFactor will never be adjusted.\r\n\t--\r\n            UPDATE  Billing.MeterBillingGas\r\n            SET     MeterBillingAdjustmentGasSeqid = MBAG.MeterBillingAdjustmentGasSeqid ,\r\n                    MeterBillingRowState = '2' ,\r\n                    FromDate = MBAG.FromDate ,\r\n                    ToDate = MBAG.ToDate ,\r\n                    FromReadingDate = MBAG.FromReadingDate ,\r\n                    ToReadingDate = MBAG.ToReadingDate ,\r\n                    ReadingCode = MBAG.ReadingCode ,\r\n                    MeterReset = MBAG.MeterReset ,\r\n                    MeterFromReading = MBAG.MeterFromReading ,\r\n                    MeterToReading = MBAG.MeterToReading ,\r\n                    MeterConstant = MBAG.MeterConstant ,\r\n                    Ccf = MBAG.RevisedBilledCCF ,\r\n                    ThermsFactor = MBAG.ThermsFactor ,\r\n                    Therms = MBAG.RevisedBilledTherms ,\r\n                    AuthenticatedUserID = MBAG.AuthenticatedUserID ,\r\n                    Notes = MBAG.Notes ,\r\n                    LastPeriodModified = MBAG.LastPeriodModified ,\r\n                    LastUpdate = GETDATE() ,\r\n                    FireAuditTrigger = 'Y'\r\n            FROM Billing.MeterBillingAdjustmentGas MBAG\r\n                    INNER JOIN Billing.MeterBillingGas MBG ON MBAG.UniqueAccountSeqId = MBG.UniqueAccountSeqId\r\n                                                            AND MBAG.UniqueMeterSeqId = MBG.UniqueMeterSeqId\r\n                                                            AND MBAG.UtilityCompanySeqid = MBG.UtilityCompanySeqid\r\n                                                            AND MBAG.BillingPeriodRevision = MBG.BillingPeriod\r\n                                                            AND MBAG.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n            WHERE   ( MBAG.MeterBillingSeqid IS NOT NULL )\r\n                    AND ( MBAG.BillingPeriod = @CurrentBillingPeriod )\r\n            SET @BillingMeterBillingGasUpdateTransactionCount = @@rowcount\r\n        END\r\n--\r\n    DECLARE @HasMeterBillingInsertedBeenProcessed INT\r\n--\r\n--\tselect @HasMeterBillingInsertedBeenProcessed = count(*) from Billing.MeterBilling  \r\n--\twhere BillingPeriod = @CurrentBillingPeriod and @UtilityCompanySeqid=AccountUtilityCompanySeqid\r\n--\r\n    SELECT  @HasMeterBillingInsertedBeenProcessed = COUNT(*)\r\n    FROM Billing.MeterBillingAdjustmentGas MBAG\r\n            INNER JOIN Billing.Account A \r\n\t\t\t\tON MBAG.UniqueAccountSeqId = A.UniqueAccountSeqid \r\n\t\t\t\tAND A.IsCurrentRecord = 'Y' \r\n\t\t\t\tAND MBAG.UtilityCompanySeqid = A.UtilityAccountProvider\r\n\t\t\tLEFT JOIN Billing.MeterBilling MB \r\n\t\t\t\tON MBAG.MeterBillingSeqid = MB.MeterBillingSeqid\r\n\t\t\t\tAND MBAG.UniqueAccountSeqId = MB.UniqueAccountSeqId\r\n\t\t\t\tAND MBAG.UniqueMeterSeqId = MB.UniqueMeterSeqId\r\n                AND MBAG.LastPeriodModified = MB.LastPeriodModified\r\n    WHERE   ( MB.MeterBillingSeqid IS NULL )\r\n            AND ( MBAG.MeterBillingSeqid IS NULL )\r\n            AND MBAG.LastPeriodModified = @CurrentBillingPeriod\r\n            AND MBAG.UtilityCompanySeqid = @UtilityCompanySeqid\r\n            AND A.CurrentInvoiceAccountGroup = @InvoiceAccountBillingGroupSeqid\r\n--\r\n-- if this occurs in either case \"isnull(@HasMeterBillingGasBeenProcessed,1)\" or \"isnull(@HasMeterBillingBeenProcessed\" then set the value to 1 and not process\r\n--\r\n    IF ( ISNULL(@HasMeterBillingInsertedBeenProcessed, 0) <> 0 ) \r\n        BEGIN\r\n            DECLARE @maxMeterBillingSeqid INT\r\n            DECLARE @maxMeterBillingGasSeqid INT\r\n\t--\r\n            SELECT  @maxMeterBillingSeqid = MAX(MeterBillingSeqid)\r\n            FROM Billing.MeterBilling\t\r\n            SELECT  @maxMeterBillingGasSeqid = MAX(MeterBillingGasSeqid)\r\n            FROM Billing.MeterBillingGas\t\r\n\t--\r\n            INSERT  INTO Billing.MeterBilling\r\n                    ( UniqueAccountSeqID, /* added on 12/20/2018 */\r\n\t\t\t\t\t\tUniqueMeterSeqID, /* added on 12/20/2018 */\r\n\t\t\t\t\t\tAccountExchangeMeterTrackSeqid ,\r\n                        IsTimeOfDayAccount ,\r\n                        IsDerived ,\r\n                        OriginalAccountNumber ,\r\n                        OriginalMeterNumber ,\r\n                        AccountUtilityCompanySeqid ,\r\n                        UploadFileSeqid ,\r\n                        LastPeriodModified ,\r\n                        BillingPeriod ,\r\n                        BillingPeriodRevision ,\r\n                        NextBillingPeriod ,\r\n                        PreviousBillingPeriod ,\r\n                        BillCreationDate ,\r\n                        BillingAction ,\r\n                        MeterBillingStatus ,\r\n                        PreviousMeterBillingStatus ,\r\n                        MeterBillingStatusCodePeriod ,\r\n                        EnergySource ,\r\n                        ProcessedInTheCurrentPeriod ,\r\n                        SalesType ,\r\n                        MeterType ,\r\n                        UtilityServiceAddress ,\r\n                        MeterDials ,\r\n                        MeterConstant ,\r\n                        Tension ,\r\n                        EstimatedReading ,\r\n                        ConsecutivePeriodsEstimatedReading ,\r\n                        ProductionAndDeliveryTariff ,\r\n                        BillingPeriodDays ,\r\n                        FromDate ,\r\n                        ToDate ,\r\n                        ToReadingDate ,\r\n                        FromReadingDate ,\r\n                        Consumption ,\r\n                        Demand ,\r\n                        InitialPostingDate ,\r\n                        AdjustmentRecordSeqid ,\r\n                        AuthenticatedUserID ,\r\n                        Notes ,\r\n                        DateAdded ,\r\n                        LastUpdate\r\n\t\t            )\r\n                    SELECT  UniqueAccountSeqID, /* added on 12/20/2018 */\r\n\t\t\t\t\t\t    UniqueMeterSeqID, /* added on 12/20/2018 */ \r\n\t\t\t\t\t\t    AccountExchangeMeterTrackSeqid ,\r\n                            IsTimeOfDayAccount ,\r\n                            [DerivedFromSpannedBill] ,\r\n                            [OriginalAccountNumber] ,\r\n                            [OriginalMeterNumber] ,\r\n                            [UtilityCompanySeqid] ,\r\n                            [UploadMeterBillingAdjustmentGasSeqid] ,\r\n                            [LastPeriodModified] ,\r\n                            [BillingPeriodRevision] ,\r\n                            [BillingPeriodRevision] ,\r\n                            dbo.CreateNextPeriod(MBAG.BillingPeriod,\r\n                                                    BillingCycle) , -- [NextBillingPeriod] \r\n                            dbo.CreatePreviousPeriod(MBAG.BillingPeriod,\r\n                                                        BillingCycle) , -- PreviousBillingPeriod\r\n                            [BillCreationDate] ,\r\n                            [BillingAction] ,\r\n                            [MeterBillingStatus] ,\r\n                            [MeterBillingPreviousStatus] ,\r\n                            [MeterBillingStatusPeriod] ,\r\n                            EnergySource ,\r\n                            [ProcessedInTheCurrentPeriod] ,\r\n                            SalesType ,\r\n                            MeterType ,\r\n                            ServiceAddress ,\r\n                            MeterDials ,\r\n                            [MeterConstant] ,\r\n                            NULL , -- Demand currently only Electric\r\n                            [EstimatedOrActualBilling] ,\r\n                            [Common].[CalculateConsecutiveNumberOfEstimatedReadings](OriginalAccountNumber,\r\n                                                            OriginalMeterNumber,\r\n                                                            UtilityCompanySeqid,\r\n                                                            BillingPeriodRevision,\r\n                                                            BillingCycle,\r\n                                                            EstimatedOrActualBilling) , -- correct function Gas\r\n                            Common.CalculateProductionAndDeliveryTariff(UtilityCompanySeqid,\r\n                                                            GasRateCode) ,\r\n                            BillingDays ,\r\n                            [FromDate] ,\r\n                            [ToDate] ,\r\n                            [FromReadingDate] ,\r\n                            [ToReadingDate] ,\r\n                            [RevisedBilledTherms] ,\r\n                            NULL , --[Demand]\r\n                            [InitialPostingDate] ,\r\n                            [MeterBillingAdjustmentGasSeqid] ,\r\n                            [AuthenticatedUserID] ,\r\n                            [Notes] ,\r\n                            [DateAdded] ,\r\n                            [LastUpdate]\r\n                    FROM [Billing].[MeterBillingAdjustmentGas] MBAG\r\n                    WHERE   MeterBillingSeqid IS NULL\r\n                            AND BillingPeriod = @CurrentBillingPeriod\r\n\t--\r\n            SET @BillingMeterBillingInsertTransactionCount = @@rowcount\r\n\t--\r\n\t--\r\n            INSERT  INTO Billing.MeterBillingGas\r\n                    ( UniqueAccountSeqid, /* added on 12/20/2018 */\r\n\t\t\t\t\t\tUniqueMeterSeqid, /* added on 12/20/2018 */ \r\n\t\t\t\t\t\tMeterBillingSeqid ,\r\n                        MeterBillingAdjustmentGasSeqid ,\r\n                        UtilityCompanySeqid ,\r\n                        OriginalAccountNumber ,\r\n                        OriginalMeterNumber ,\r\n                        LastPeriodModified ,\r\n                        BillingPeriod ,\r\n                        BillingPeriodRevision ,\r\n                        MeterBillingRowState ,\r\n                        FromDate ,\r\n                        ToDate ,\r\n                        FromReadingDate ,\r\n                        ToReadingDate ,\r\n                        ReadingCode ,\r\n                        MeterReset ,\r\n                        MeterFromReading ,\r\n                        MeterToReading ,\r\n                        MeterConstant ,\r\n                        Ccf ,\r\n                        ThermsFactor ,\r\n                        Therms ,\r\n                        AuthenticatedUserID ,\r\n                        Notes ,\r\n                        DateAdded ,\r\n                        LastUpdate ,\r\n                        GasCorrectionFactor\r\n\t\t\t\t    )\r\n                    SELECT  UniqueAccountSeqid, /* added on 12/20/2018 */\r\n\t\t\t\t\t\t    UniqueMeterSeqid, /* added on 12/20/2018 */\r\n\t\t\t\t\t\t    MeterBillingSeqid ,\r\n                            MeterBillingAdjustmentGasSeqid ,\r\n                            UtilityCompanySeqid ,\r\n                            OriginalAccountNumber ,\r\n                            OriginalMeterNumber ,\r\n                            LastPeriodModified ,\r\n                            BillingPeriodRevision ,\r\n                            BillingPeriodRevision ,\r\n                            '1' AS MeterBillingRowState ,\r\n                            FromDate ,\r\n                            ToDate ,\r\n                            FromReadingDate ,\r\n                            ToReadingDate ,\r\n                            ReadingCode ,\r\n                            MeterReset ,\r\n                            MeterFromReading ,\r\n                            MeterToReading ,\r\n                            MeterConstant ,\r\n                            RevisedBilledCCF ,\r\n                            ThermsFactor ,\r\n                            RevisedBilledTherms ,\r\n                            AuthenticatedUserID ,\r\n                            Notes ,\r\n                            DateAdded ,\r\n                            LastUpdate ,\r\n                            GasCorrectionFactor\r\n                    FROM Billing.MeterBillingAdjustmentGas\r\n                    WHERE   MeterBillingSeqid IS NULL\r\n                            AND BillingPeriod = @CurrentBillingPeriod\r\n\t--\r\n            SET @BillingMeterBillingGasInsertTransactionCount = @@rowcount\r\n\t--\r\n            UPDATE  Billing.MeterBillingGas \r\n            SET     MeterBillingSeqid = MB.MeterBillingSeqid\r\n            FROM Billing.MeterBilling MB\r\n                    INNER JOIN Billing.MeterBillingGas MBG \r\n\t\t\t\t\t\tON MB.LastPeriodModified = MBG.LastPeriodModified\r\n                        AND MB.UniqueAccountSeqId = MBG.UniqueAccountSeqId\r\n                        AND MB.UniqueMeterSeqId = MBG.UniqueMeterSeqId\r\n                        AND MB.AccountUtilityCompanySeqid = MBG.UtilityCompanySeqid\r\n                        AND MB.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n                        AND MB.BillingPeriod = MBG.BillingPeriod\r\n\t\t\t\t\t\tAND MBG.OriginalMeterNumber = MB.OriginalMeterNumber\r\n                    INNER JOIN Billing.Account A \r\n\t\t\t\t\t\tON MBG.UniqueAccountSeqId= A.UniqueAccountSeqid\r\n                        AND A.IsCurrentRecord ='Y'\r\n\t\t\t\t\t\tAND MBG.UtilityCompanySeqid = A.UtilityAccountProvider\r\n            WHERE   ( MB.LastPeriodModified = @CurrentBillingPeriod )\r\n                    AND ( A.CurrentInvoiceAccountGroup = @InvoiceAccountBillingGroupSeqid )\r\n                    AND ( A.UtilityAccountProvider = @UtilityCompanySeqid )\r\n\t\t\t\t\t\r\n\t\t\t\t\r\n            UPDATE  Billing.MeterBillingAdjustmentGas\r\n            SET     MeterBillingSeqid = MBG.MeterBillingSeqid ,\r\n                    MeterBillingGasSeqid = MBG.MeterBillingGasSeqid\r\n            FROM Billing.MeterBilling MB\r\n                    INNER JOIN Billing.MeterBillingGas MBG ON MB.LastPeriodModified = MBG.LastPeriodModified\r\n                    AND MB.UniqueAccountSeqId = MBG.UniqueAccountSeqId\r\n                    AND MB.UniqueMeterSeqId = MBG.UniqueMeterSeqId\r\n                    AND MB.AccountUtilityCompanySeqid = MBG.UtilityCompanySeqid\r\n                    AND MB.BillingPeriodRevision = MBG.BillingPeriodRevision\r\n                    AND MB.BillingPeriod = MBG.BillingPeriod\r\n                    INNER JOIN Billing.Account A ON MBG.UniqueAccountSeqId= A.UniqueAccountSeqid\r\n                                                    AND MBG.UtilityCompanySeqid = A.UtilityAccountProvider\r\n                    INNER JOIN Billing.MeterBillingAdjustmentGas MBAG ON MB.UniqueAccountSeqId= MBAG.UniqueAccountSeqId\r\n                    AND MB.UniqueMeterSeqId= MBAG.UniqueMeterSeqId\r\n                    AND MB.BillingPeriod = MBAG.BillingPeriodRevision\r\n                    AND MB.BillingPeriodRevision = MBAG.BillingPeriodRevision\r\n                    AND MB.LastPeriodModified = MBAG.BillingPeriod\r\n            WHERE   ( MB.LastPeriodModified = @CurrentBillingPeriod )\r\n                    AND ( A.CurrentInvoiceAccountGroup = @InvoiceAccountBillingGroupSeqid )\r\n                    AND ( A.UtilityAccountProvider = @UtilityCompanySeqid )\t\t\r\n\t--\r\n        END\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @errMessage =  ERROR_MESSAGE()\r\n\t\t\t\t\r\n\t\tIF XACT_STATE() <> 0\r\n\t\tROLLBACK TRANSACTION\r\n\t\tRAISERROR(@errMessage, 12, 1)\r\n\tEND CATCH;          \r\nEND;"
        }
      ]
    }
  ]
}