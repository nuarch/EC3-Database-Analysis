{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CrisNationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CRIS_ProcessMeterCompileTransactions",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CRIS_ProcessMeterCompileTransactions",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to compile meter transaction data into a specific format, referred to as \"EC3 transaction records.\" It processes data from various tables related to meter readings and billing adjustments, updates records, and handles transactions within the "
        },
        {
          "type": "text",
          "text": "CrisNationalGridWest",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema. The procedure includes error handling to manage exceptions and ensure data integrity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to several factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple SQL operations, including "
                },
                {
                  "type": "text",
                  "text": "INSERT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UPDATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "SELECT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with complex joins and subqueries."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It manages transactions with "
                },
                {
                  "type": "text",
                  "text": "BEGIN TRANSACTION",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "COMMIT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "ROLLBACK",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to ensure atomicity."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes error handling with detailed logging and error raising."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure interacts with multiple tables and requires understanding of the underlying data model."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod varchar(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period for which transactions are being processed. It is used in conditional logic to determine billing status updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@authenticatedID int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An identifier for the authenticated user or process executing the procedure. It is not directly used within the procedure's logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode int OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter used to indicate the success or failure of the procedure. It is set to "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for success and "
                },
                {
                  "type": "text",
                  "text": "1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Declares local variables and sets up a carriage return/line feed string for error messages."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Begins a transaction named "
                },
                {
                  "type": "text",
                  "text": "CompileTransactions",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to ensure all operations are atomic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Preparation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Truncates the "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterBillingAdjustment",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to remove existing data."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts new records into "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterBillingAdjustment",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " by joining data from "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterReadDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterBillingCRISTransaction",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ". This involves complex logic to select the latest meter details and aggregate transaction data."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterBillingAdjustment",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " with account and meter sequence IDs from related tables."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates unique sequence IDs for accounts and meters."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates billing adjustment records with data from "
                        },
                        {
                          "type": "text",
                          "text": "MeterBillingCrisGas",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Billing Status Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates the billing status fields based on conditions involving the billing period and existing data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Implements a "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block to handle exceptions. If an error occurs, it logs detailed information and rolls back the transaction."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Commit",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Commits the transaction if no errors occur."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Truncation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating the "
                },
                {
                  "type": "text",
                  "text": "UploadMeterBillingAdjustment",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table can be efficient but may cause issues if the table is large or frequently accessed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins and Subqueries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of complex joins and subqueries can impact performance, especially if the tables involved are large or lack proper indexing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The transaction encompasses multiple operations, which can lock resources and affect concurrency. Consider optimizing the transaction scope to minimize locking."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling Overhead",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The detailed error handling logic adds overhead but is necessary for robust error management."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating tables and performing bulk inserts/updates can lead to data integrity issues if not carefully managed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's transaction management may lead to locking and blocking issues, affecting other processes accessing the same tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While comprehensive, the error handling logic may not cover all edge cases, potentially leading to unhandled exceptions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of complex joins and subqueries may degrade, necessitating optimization or refactoring."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dependency on External Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on several external tables and their structures, which may change over time, leading to potential maintenance challenges."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [CrisNationalGridWest].[usp_CRIS_ProcessMeterCompileTransactions]\n\t@BillingPeriod varchar(6),\r\n\t@authenticatedID int,\r\n\t@StatusCode int  OUTPUT      \r\n   \r\n AS \r\n BEGIN\r\n\t\t--********************************************************************************\r\n\t\t--\tAuthor: MOHAMMED BELARREM\r\n\t\t--\tDescription: Compile transactions into ec3 format \r\n\t\t--\r\n\t\t--\tLog: \r\n\t\t--\t06/03/2010\tMOH Creation:\r\n\t\t--\t06/15/2010\tMOH\tupdate:\tAdded therms, thermsfactor and GasRateCode\r\n\t\t--\t07/09/2010\tMOH\tUpdate:\tAdded CurrentMeterNumber\r\n\t\t--\t07/12/2010\tMOH\tUpdate:\tAdded logic to handle the roll over meters \r\n\t\t--\t07/21/2010\tMOH\tUpdate:\tChanged the way I calculate the LatestMeterDetails table to go by CurrentMeterNumber\r\n\t\t--\t07/23/2010\tMOH\tUpdate:\tCorrected the update to the adjustment table that puts in the Account and meter seqids \r\n\t\t--\t07/29/2010\tMOH\tUpdate:\tCorrected the query that figures out which meters are adjustments and which are inserts\r\n\t\t--  09/23/2010  MOH Update: Corrected the query to create the adjustment records to go by BillingTransactionCode and ActivityDateTime \r\n\t\t--\t\t\t\t\t\t\tsince ActivityDateTime was not unique \r\n\t\t--  01/11/2010  MOH Update: Added the condition to test and pickup only non excluded transaction \r\n\t\t--  12/11/2018  VY  update: for UniqueAccountSeqID and for UniqueMeterSeqID\r\n\t\t--  12/28/2018  VY  update: modified to use UniqueSeqIDs \r\n\t\t--********************************************************************************\r\n\t \r\n\t\t--********************************************************************************\r\n\t\tDECLARE @AccountNumber acctnum\r\n\t\tDECLARE @MeterNumber MeterNumber\r\n\r\n\t\tdeclare @crlf varchar(2)\r\n\t\tset @crlf = CHAR(13) + CHAR(10) \r\n\r\n\t\r\n\t\t\t\r\n\t\tbegin try\t\r\n\t\t\r\n\t\t\t\tbegin TRANSACTION CompileTransactions \r\n\t\t\t\tset @StatusCode  = 0\r\n\t\t\t\t--\r\n\t\t\t\ttruncate table [CrisNationalGridWest].[UploadMeterBillingAdjustment]\r\n\t\t\t\t--\r\n\t\t\t\t\r\n\t\t\t\t-- combine information from the transaction table and the uploadMeterDetail to construct EC3 transaction records\r\n\t\t\t\t-- the join grabs only the latest meter read detail, since it should have the latest and greatest \r\n\t\t\t\t\r\n\t\t\t\tINSERT INTO [CrisNationalGridWest].[UploadMeterBillingAdjustment]\r\n\t\t\t\t\t\t   ([UtilityCompanySeqid]\r\n\t\t\t\t\t\t   ,[AccountInvoiceBillingGroup]\r\n\t\t\t\t\t\t   ,AccountSeqid\r\n\t\t\t\t\t\t   ,UniqueAccountSeqid /* added 12/11/2018 */\r\n\t\t\t\t\t\t   ,MeterSeqid\r\n\t\t\t\t\t\t   ,UniqueMeterSeqid /* added 12/11/2018 */\r\n\t\t\t\t\t\t   ,AccountExchangeMeterTrackSeqid\r\n\t\t\t\t\t\t   ,NumberOfTransactions\r\n\t\t\t\t\t\t   ,NumberOfRebillTransactions\r\n\t\t\t\t\t\t   ,NumberOfCancelTransactions\r\n\t\t\t\t\t\t   ,[BillingPeriod]\r\n\t\t\t\t\t\t   ,[BillingPeriodRevision]\r\n\t\t\t\t\t\t   ,[OriginalAccountNumber]\r\n\t\t\t\t\t\t   ,[MeterReadWorkDay]\r\n\t\t\t\t\t\t   ,[UtilityServiceAccountName]\r\n\t\t\t\t\t\t   ,[UtilityServiceAddress]\r\n\t\t\t\t\t\t   ,[Borough]\r\n\t\t\t\t\t\t   ,[Zipcode]\r\n\t\t\t\t\t\t   ,[State]\r\n\t\t\t\t\t\t   ,[SpecialLedgerAccountNumber]\r\n\t\t\t\t\t\t   ,[MeterNumber]\r\n\t\t\t\t\t\t   ,[CurrentMeterNumber]\r\n\t\t\t\t\t\t   ,[MeterConstant]\r\n\t\t\t\t\t\t   ,[NumberOfDials]\r\n\t\t\t\t\t\t   ,[EstimatedOrActual]\r\n\t\t\t\t\t\t   ,[MeterType]\r\n\t\t\t\t\t\t   ,[FromDate]\r\n\t\t\t\t\t\t   ,[ToDate]\r\n\t\t\t\t\t\t   ,BillingPeriodDays\r\n\t\t\t\t\t\t   ,[MeterFromReading]\r\n\t\t\t\t\t\t   ,[MeterToReading]\r\n\t\t\t\t\t\t   ,[MeterCCF]\r\n\t\t\t\t\t\t   ,Therms\r\n\t\t\t\t\t\t   ,ThermsFactor\r\n\t\t\t\t\t\t   ,GasRateCode\r\n\t\t\t\t\t\t   ,HasMeterRolledOver\r\n\t\t\t\t\t\t   ,[FixFactor]\r\n\t\t\t\t\t\t   ,[PartSupplied]\r\n\t\t\t\t\t\t   ,[MeterBillingStatus]\r\n\t\t\t\t\t\t   ,[PreviousMeterBillingStatus]\r\n\t\t\t\t\t\t   ,[MeterBillingStatusCodePeriod]\r\n\t\t\t\t\t\t   ,DerivedFromSpannedBill\r\n\t\t\t\t\t\t   ,[SpannedMeterCCF]\r\n\t\t\t\t\t\t   ,SpannedTherms\r\n\t\t\t\t\t\t   ,SpannedThermsFactor\r\n\t\t\t\t\t\t   ,[SpannedFromDate]\r\n\t\t\t\t\t\t   ,[SpannedToDate]\r\n\t\t\t\t\t\t   ,[SpannedMeterReadingFrom]\r\n\t\t\t\t\t\t   ,[SpannedMeterReadingTo]\r\n\t\t\t\t\t\t   ,[SpannedMonthlyPercentage]\r\n\t\t\t\t\t\t   ,[SpannedTotalPercentage]\r\n\t\t\t\t\t\t   ,[HasReportedCancel]\r\n\t\t\t\t\t\t   ,[CancelSpecialLedgerAccountNumber]\r\n\t\t\t\t\t\t   ,[CancelMeterNumber]\r\n\t\t\t\t\t\t   ,[CancelMeterConstant]\r\n\t\t\t\t\t\t   ,[CancelNumberOfDials]\r\n\t\t\t\t\t\t   ,[CancelEstimatedOrActual]\r\n\t\t\t\t\t\t   ,[CancelMeterType]\r\n\t\t\t\t\t\t   ,[CancelFromDate]\r\n\t\t\t\t\t\t   ,[CancelToDate]\r\n\t\t\t\t\t\t   ,[CancelMeterFromReading]\r\n\t\t\t\t\t\t   ,[CancelMeterToReading]\r\n\t\t\t\t\t\t   ,[CancelMeterCCF]\r\n\t\t\t\t\t\t   ,[CancelTherms]\r\n\t\t\t\t\t\t   ,[CancelThermsFactor]\r\n\t\t\t\t\t\t   ,[CancelFixFactor]\r\n\t\t\t\t\t\t   ,[CancelPartSupplied]\r\n\t\t\t\t\t\t   ,EnergySource\r\n\t\t\t\t\t\t   ,MeterReset\r\n\t\t\t\t\t\t   ,[Notes])\r\n\t\t\t\t\t \r\n\t\t\t\tSELECT\r\n\t\t\t\t\t\t    UtilityCompanySeqid\t\t\t\t\t\t\t\t\t\t\t--- [UtilityCompanySeqid]\r\n\t\t\t\t\t\t   ,AccountInvoiceBillingGroup\t\t\t\t\t\t\t\t\t--- [AccountInvoiceBillingGroup]\r\n\t\t\t\t\t\t   ,NULL\t\t\t\t\t\t\t\t\t\t\t\t\t\t--- AccountSeqid\r\n\t\t\t\t\t\t   ,NULL                                                        --- UniqueAccountSeqid /* added 12/11/2018 */\r\n\t\t\t\t\t\t   ,NULL\t\t\t\t\t\t\t\t\t\t\t\t\t\t--- MeterSeqid\r\n\t\t\t\t\t\t   ,NULL                                                        --- UniqueMeterSeqid /* added 12/11/2018 */\r\n\t\t\t\t\t\t   ,NULL\t\t\t\t\t\t\t\t\t\t\t\t\t\t--- AccountExchangeMeterTrackSeqid\r\n\t\t\t\t\t\t   ,NumberOfRebillTransactions + NumberOfCancelTransactions\t\t--- NumberOfTransactions\r\n\t\t\t\t\t\t   ,NumberOfRebillTransactions\t\t\t\t\t\t\t\t\t--- NumberOfRebillTransactions\r\n\t\t\t\t\t\t   ,NumberOfCancelTransactions\t\t\t\t\t\t\t\t\t--- NumberOfCancelTransactions\r\n\t\t\t\t\t\t   ,BillingPeriod\t\t\t\t\t\t\t\t\t\t\t\t--- [BillingPeriod]\r\n\t\t\t\t\t\t   ,GroupedTransactions.BillingPeriodRevision\t\t\t\t\t--- [BillingPeriodRevision]\r\n\t\t\t\t\t\t   ,AccountNumber\t\t\t\t\t\t\t\t\t\t\t\t--- [OriginalAccountNumber]\r\n\t\t\t\t\t\t   ,MeterReadWorkDay\t\t\t\t\t\t\t\t\t\t\t--- [MeterReadWorkDay]\r\n\t\t\t\t\t\t   ,UtilityServiceAccountName                   \t\t\t\t--- [UtilityServiceAccountName]\r\n\t\t\t\t\t\t   ,UtilityServiceAddress                       \t\t\t\t--- [UtilityServiceAddress]\r\n\t\t\t\t\t\t   ,Borough                                     \t\t\t\t--- [Borough]\r\n\t\t\t\t\t\t   ,Zipcode                                     \t\t\t\t--- [Zipcode]\r\n\t\t\t\t\t\t   ,State\t\t\t\t\t\t\t\t\t\t\t\t\t\t--- [State]\r\n\t\t\t\t\t\t   ,SpecialLedgerAccountNumber\t\t\t\t\t\t\t\t\t--- [SpecialLedgerAccountNumber]\r\n\t\t\t\t\t\t   ,LatestMeterDetails.MeterNumber              \t\t\t\t--- [MeterNumber]   -- since we are grabbing the latest transaction, this might be the CurrentAccountNumber all the time\r\n\t\t\t\t\t\t   ,LatestMeterDetails.CurrentMeterNumber          \t\t\t\t--- [CurrentMeterNumber]\r\n\t\t\t\t\t\t   ,MeterConstant                               \t\t\t\t--- [MeterConstant]\r\n\t\t\t\t\t\t   ,NumberOfDials                               \t\t\t\t--- [NumberOfDials]\r\n\t\t\t\t\t\t   ,GroupedTransactions.EstimatedOrActual\t\t\t\t\t\t--- [EstimatedOrActual]\r\n\t\t\t\t\t\t   ,MeterType                                   \t\t\t\t--- [MeterType]\r\n\t\t\t\t\t\t   ,FromDate                                    \t\t\t\t--- [FromDate]\r\n\t\t\t\t\t\t   ,ToDate                                      \t\t\t\t--- [ToDate]\r\n\t\t\t\t\t\t   ,dbo.CalculateNumberOfBillingDays(FromDate, ToDate)\t\t\t--- BillingPeriodDays\r\n\t\t\t\t\t\t   ,GroupedTransactions.MeterFromReading\t\t\t\t\t\t--- [MeterFromReading]\r\n\t\t\t\t\t\t   ,GroupedTransactions.MeterToReading\t\t\t\t\t\t\t--- [MeterToReading]\r\n\t\t\t\t\t\t   ,GroupedTransactions.MeterCCF\t\t\t\t\t\t\t\t--- [MeterCCF]\r\n\t\t\t\t\t\t   ,GroupedTransactions.Therms\t\t\t\t\t\t\t\t\t--- Therms\r\n\t\t\t\t\t\t   ,GroupedTransactions.ThermsFactor\t\t\t\t\t\t\t--- ThermsFactor\r\n\t\t\t\t\t\t   ,LatestMeterDetails.GasRateCode\t\t\t\t\t\t\t\t--- GasRateCode\t\r\n\t\t\t\t\t\t   ,GroupedTransactions.HasMeterRolledOver\t\t\t\t\t\t--- HasMeterRolledOver\t\t \r\n\t\t\t\t\t\t   ,FixFactor                                   \t\t\t\t--- [FixFactor]\r\n\t\t\t\t\t\t   ,PartSupplied                                \t\t\t\t--- [PartSupplied]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [MeterBillingStatus]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [PreviousMeterBillingStatus]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [MeterBillingStatusCodePeriod]\r\n\t\t\t\t\t\t   ,CASE WHEN CalculatedBillingPeriodRevision <> FirstBillingPeriodCanceled THEN 'Y'\t\t\t\t\t\t\t\t ELSE 'N'  END   --- DerivedFromSpannedBill\r\n\t\t\t\t\t\t   ,CASE WHEN CalculatedBillingPeriodRevision <> FirstBillingPeriodCanceled THEN LatestMeterDetails.MeterCCF\t\t ELSE NULL END   --- [SpannedMeterCCF]\r\n\t\t\t\t\t\t   ,CASE WHEN CalculatedBillingPeriodRevision <> FirstBillingPeriodCanceled THEN LatestMeterDetails.Therms\t\t\t ELSE NULL END   --- [Spannedtherms]\r\n\t\t\t\t\t\t   ,CASE WHEN CalculatedBillingPeriodRevision <> FirstBillingPeriodCanceled THEN LatestMeterDetails.ThermsFactor\t ELSE NULL END   --- [SpannedThermsFactor]\r\n\t\t\t\t\t\t   ,CASE WHEN CalculatedBillingPeriodRevision <> FirstBillingPeriodCanceled THEN MeterReadingFromDate\t\t\t\t ELSE NULL END   --- [SpannedFromDate]\r\n\t\t\t\t\t\t   ,CASE WHEN CalculatedBillingPeriodRevision <> FirstBillingPeriodCanceled THEN MeterReadingToDate\t\t\t\t\t ELSE NULL END   --- [SpannedToDate]\r\n\t\t\t\t\t\t   ,CASE WHEN CalculatedBillingPeriodRevision <> FirstBillingPeriodCanceled THEN LatestMeterDetails.MeterFromReading ELSE NULL END   --- [SpannedMeterReadingFrom]\r\n\t\t\t\t\t\t   ,CASE WHEN CalculatedBillingPeriodRevision <> FirstBillingPeriodCanceled THEN LatestMeterDetails.MeterToReading\t ELSE NULL END   --- [SpannedMeterReadingTo]\r\n\t\t\t\t\t\t   ,CASE WHEN CalculatedBillingPeriodRevision <> FirstBillingPeriodCanceled THEN SpannedMonthlyPercentage\t\t\t ELSE NULL END   --- [SpannedMonthlyPercentage]\r\n\t\t\t\t\t\t   ,CASE WHEN CalculatedBillingPeriodRevision <> FirstBillingPeriodCanceled THEN SpannedTotalPercentage\t\t\t\t ELSE NULL END   --- [SpannedTotalPercentage]\r\n\t\t\t\t\t\t   ,GroupedTransactions.HasReportedCancel\t\t\t\t\t\t--- HasReportedCancel\r\n\t\t\t\t\t\t   ,NULL \t\t\t\t\t\t\t\t\t\t\t\t\t\t--- [CancelSpecialLedgerAccountNumber]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelMeterNumber]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelMeterConstant]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelNumberOfDials]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelEstimatedOrActual]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelMeterType]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelFromDate]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelToDate]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelMeterFromReading]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelMeterToReading]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelMeterCCF]\r\n\t\t\t\t\t\t   ,null\t\t\t\t\t\t\t\t\t\t\t\t\t\t--- [CancelTherms]\r\n\t\t\t\t\t\t   ,null\t\t\t\t\t\t\t\t\t\t\t\t\t\t--- [CancelThermsFactor]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelFixFactor]\r\n\t\t\t\t\t\t   ,NULL                                        \t\t\t\t--- [CancelPartSupplied]\r\n\t\t\t\t\t\t   ,5     \t\t\t\t\t\t\t\t\t\t\t\t\t\t--- EnergySource\r\n\t\t\t\t\t\t   ,LatestMeterDetails.HasMeterRolledOver\t\t\t\t\t\t--- MeterReset\r\n\t\t\t\t\t\t   ,NULL\t\t\t\t\t\t\t\t\t\t\t\t\t\t--- [Notes]\r\n\t\t\t\t\t\t   \r\n\t\t\t\tFROM (\r\n\t\t\t\t\t\t\t-- corrected MOH 20100923 to go by BillingTransactionCode and ActivityDateTime since ActivityDateTime was not unique \r\n\t\t\t\t\t\t\tSELECT * FROM CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\t\t\t\tWHERE UploadMeterReadDetailSeqid = (  SELECT TOP 1 UploadMeterReadDetailSeqid FROM CrisNationalGridWest.UploadMeterReadDetail AS MeterReadDetail\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  WHERE MeterReadDetail.AccountNumber = UploadMeterReadDetail.AccountNumber AND MeterReadDetail.CurrentMeterNumber = UploadMeterReadDetail.CurrentMeterNumber AND MeterReadDetail.ExcludeTest = 'N' AND MeterReadDetail.IsProcessed ='N' AND MeterReadDetail.BillingTransactionCode = 'BI'\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ORDER BY BillingTransactionCode DESC, ActivityDateTime DESC)\r\n\t\t\t\t\t\t) AS LatestMeterDetails\r\n\t\t\t\t\t\tINNER JOIN \r\n\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\tSELECT \r\n\t\t\t\t\t\t\t\t   [BillingPeriodRevision]\r\n\t\t\t\t\t\t\t\t  ,[OriginalAccountNumber]\r\n\t\t\t\t\t\t\t\t  ,[CurrentMeterNumber]\r\n\t\t\t\t\t\t\t\t  ,SUM(CAST((CASE WHEN isCancel = 'Y' THEN 0 ELSE 1 END) AS int)) AS NumberOfCancelTransactions\r\n\t\t\t\t\t\t\t\t  ,SUM(CAST((CASE WHEN isCancel = 'N' THEN 0 ELSE 1 END) AS int)) AS NumberOfRebillTransactions\r\n\t\t\t\t\t\t\t\t  ,MIN([EstimatedOrActual]) AS EstimatedOrActual\r\n\t\t\t\t\t\t\t\t  ,MIN([FromDate]) AS FromDate\r\n\t\t\t\t\t\t\t\t  ,MAX([ToDate]) AS ToDate\r\n\t\t\t\t\t\t\t\t  ,MIN([MeterFromReading]) AS MeterFromReading\r\n\t\t\t\t\t\t\t\t  ,CASE WHEN (MAX(HasMeterRolledOver) = 'Y' ) THEN MIN([MeterToReading])  ELSE  MAX([MeterToReading]) END AS MeterToReading\r\n\t\t\t\t\t\t\t\t  ,SUM([MeterCCF]) AS MeterCCF\r\n\t\t\t\t\t\t\t\t  ,SUM([Therms]) AS Therms\r\n\t\t\t\t\t\t\t\t  ,MAX([ThermsFactor]) AS ThermsFactor\r\n\t\t\t\t\t\t\t\t  ,MAX([SpannedMonthlyPercentage]) AS SpannedMonthlyPercentage\r\n\t\t\t\t\t\t\t\t  ,MAX([SpannedTotalPercentage]) AS SpannedTotalPercentage\r\n\t\t\t\t\t\t\t\t  ,MAX(HasMeterRolledOver) AS HasMeterRolledOver\r\n\t\t\t\t\t\t\t\t  ,MAX(IsCancel) AS HasReportedCancel\r\n\t\t\t\t\t\t\tFROM CrisNationalGridWest.UploadMeterBillingCRISTransaction \r\n\t\t\t\t\t\t\tWHERE CurrentMeterNumber IS NOT NULL\r\n\t\t\t\t\t\t\tGROUP BY OriginalAccountNumber, CurrentMeterNumber, BillingPeriodRevision\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t) AS GroupedTransactions\r\n\t\t\t\t\t\tON LatestMeterDetails.CurrentMeterNumber = GroupedTransactions.CurrentMeterNumber\r\n\t\t\t\t\t\tAND LatestMeterDetails.AccountNumber = GroupedTransactions.OriginalAccountNumber \r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\n\t\t\t\tUPDATE\tCrisNationalGridWest.UploadMeterBillingAdjustment\r\n\t\t\t\tSET\t\t AccountSeqid\t\t\t\t\t= OriginalAccountSeqid\r\n\t\t\t\t\t\t,MeterSeqid\t\t\t\t\t\t= OriginalMeterSeqid\r\n\t\t\t\t\t\t,AccountExchangeMeterTrackSeqid = Billing.AccountExchangeMeterTrack.AccountExchangeMeterTrackSeqid\r\n\t\t\t\tFROM CrisNationalGridWest.UploadMeterBillingAdjustment\r\n\t\t\t\tINNER JOIN Billing.AccountExchangeMeterTrack \r\n\t\t\t\tON CrisNationalGridWest.UploadMeterBillingAdjustment.OriginalAccountNumber = Billing.AccountExchangeMeterTrack.OriginalAccountNumber\r\n\t\t\t\tAND CrisNationalGridWest.UploadMeterBillingAdjustment.CurrentMeterNumber = Billing.AccountExchangeMeterTrack.OriginalMeterNumber\r\n\r\n\t\t\t\t-- added 12/12/2018 update unique account seqid information\r\n\t\t\t\tUPDATE\tCrisNationalGridWest.UploadMeterBillingAdjustment\r\n\t\t\t\tSET CrisNationalGridWest.UploadMeterBillingAdjustment.UniqueAccountSeqID = Billing.Account.UniqueAccountSeqid\r\n\t\t\t\tFROM CrisNationalGridWest.UploadMeterBillingAdjustment INNER JOIN Billing.Account ON CrisNationalGridWest.UploadMeterBillingAdjustment.AccountSeqid = Billing.Account.AccountSeqID\r\n\t\t\t\tWHERE CrisNationalGridWest.UploadMeterBillingAdjustment.UniqueAccountSeqID is null\r\n\r\n\t\t\t\t-- added 12/12/2018 update unique meter seqid information\r\n\t\t\t\tUPDATE\tCrisNationalGridWest.UploadMeterBillingAdjustment\r\n\t\t\t\tSET CrisNationalGridWest.UploadMeterBillingAdjustment.UniqueMeterSeqID = Billing.Meter.UniqueMeterSeqid\r\n\t\t\t\tFROM CrisNationalGridWest.UploadMeterBillingAdjustment INNER JOIN Billing.Meter ON CrisNationalGridWest.UploadMeterBillingAdjustment.MeterSeqID = Billing.Meter.MeterSeqID\r\n\t\t\t\tWHERE CrisNationalGridWest.UploadMeterBillingAdjustment.UniqueMeterSeqID is null\r\n\t\t\t\t\r\n\t\t\t\t-- update with information form EC3\r\n\t\t\t\t\r\n\t\t\t\t-- update from the MeterBillingCrisGas\r\n\t\t\t\tUPDATE CrisNationalGridWest.UploadMeterBillingAdjustment\r\n\t\t\t\tSET\t   \tMeterBillingSeqid\t\t\t\t\t= MeterBillingCrisGas.MeterBillingSeqid\r\n\t\t\t\t\t   ,MeterBillingCrisGasSeqid\t\t\t= MeterBillingCrisGas.MeterBillingCrisGasSeqid\r\n\t\t\t\t\t   ,[CancelSpecialLedgerAccountNumber]\t= MeterBillingCrisGas.SpecialLedgerAccountNumber\r\n\t\t\t\t\t   ,[CancelMeterNumber]\t\t\t\t\t= MeterBillingCrisGas.MeterNumber \r\n\t\t\t\t\t   ,[CancelMeterConstant]\t\t\t\t= MeterBillingCrisGas.MeterConstant\t\t\r\n\t\t\t\t\t   ,[CancelNumberOfDials]\t\t\t\t= MeterBillingCrisGas.NumberOfDials\r\n\t\t\t\t\t   ,[CancelEstimatedOrActual]\t\t\t= MeterBillingCrisGas.EstimatedOrActual\r\n\t\t\t\t\t   ,[CancelMeterType]\t\t\t\t\t= MeterBillingCrisGas.MeterType\r\n\t\t\t\t\t   ,[CancelFromDate]\t\t\t\t\t= MeterBillingCrisGas.FromDate\r\n\t\t\t\t\t   ,[CancelToDate]\t\t\t\t\t\t= MeterBillingCrisGas.ToDate\r\n\t\t\t\t\t   ,[CancelMeterFromReading]\t\t\t= MeterBillingCrisGas.MeterFromReading\r\n\t\t\t\t\t   ,[CancelMeterToReading]\t\t\t\t= MeterBillingCrisGas.MeterToReading\r\n\t\t\t\t\t   ,[CancelMeterCCF]\t\t\t\t\t= MeterBillingCrisGas.MeterCCF\r\n\t\t\t\t\t   ,[CancelTherms]\t\t\t\t\t\t= MeterBillingCrisGas.Therms\r\n\t\t\t\t\t   ,[CancelThermsFactor]\t\t\t\t= MeterBillingCrisGas.ThermsFactor\r\n\t\t\t\t\t   ,[CancelFixFactor]\t\t\t\t\t= MeterBillingCrisGas.FixFactor\r\n\t\t\t\t\t   ,[CancelPartSupplied]\t\t\t\t= MeterBillingCrisGas.PartSupplied\r\n\t\t\t\t\r\n\t\t\t\tFROM\tBilling.MeterBillingCrisGas INNER JOIN Billing.Meter \r\n\t\t\t\t\t\tON\tBilling.MeterBillingCrisGas.MeterSeqid = Billing.Meter.MeterSeqid \r\n\t\t\t\t\t\tAND Billing.MeterBillingCrisGas.UniqueMeterSeqId = Billing.Meter.UniqueMeterSeqid /* added 12/12/2018 */\r\n\t\t\t\t\t\tINNER JOIN CrisNationalGridWest.UploadMeterBillingAdjustment \r\n\t\t\t\t\t\tON\tBilling.Meter.CurrentMeterNumber = CrisNationalGridWest.UploadMeterBillingAdjustment.CurrentMeterNumber AND \r\n\t\t\t\t\t\t\tBilling.Meter.OriginalAccountNumber = CrisNationalGridWest.UploadMeterBillingAdjustment.OriginalAccountNumber AND \r\n\t\t\t\t\t\t\tBilling.MeterBillingCrisGas.BillingPeriodRevision = CrisNationalGridWest.UploadMeterBillingAdjustment.BillingPeriodRevision\r\n\r\n\t\t\t\t\r\n\t\t\t\t-- update billing status\r\n\t\t\t\tUPDATE CrisNationalGridWest.UploadMeterBillingAdjustment                                                               \r\n\t\t\t\tSET\t   \t[MeterBillingStatus]\t\t\t\t= CASE WHEN MeterBillingCrisGasSeqid IS NULL AND BillingPeriodRevision < @BillingPeriod THEN 'BA' ELSE MeterStatus end\r\n\t\t\t\t\t   ,[PreviousMeterBillingStatus]\t\t= MeterPreviousStatus\r\n\t\t\t\t\t   ,[MeterBillingStatusCodePeriod]\t\t= MeterStatusCodePeriod\r\n\t\t\t\t\r\n\t\t\t\tFROM\tBilling.Meter \r\n\t\t\t\t\t\tINNER JOIN CrisNationalGridWest.UploadMeterBillingAdjustment \r\n\t\t\t\t\t\tON\tCrisNationalGridWest.UploadMeterBillingAdjustment.MeterSeqid = Billing.Meter.MeterSeqid \r\n\t\t\t\t\t\tAND CrisNationalGridWest.UploadMeterBillingAdjustment.UniqueMeterSeqid = Billing.Meter.UniqueMeterSeqid /* added 12/12/2018 */\r\n\t\t\t\t\t\t\t\t\r\n\r\n\r\n\r\n\r\n\t\t\t\tcommit TRANSACTION CompileTransactions\r\n\r\n\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\t\t\r\n\t\t\t\tDECLARE @CustomErrorMessage NVARCHAR(4000);\r\n\t\t\t\tDECLARE @ErrorMessage NVARCHAR(4000);\r\n\t\t\t\tDECLARE @ErrorSeverity INT;\r\n\t\t\t\tDECLARE @ErrorState INT;\r\n\t\t\t\tDECLARE @ErrorNumber INT;\r\n\t\t\t\tDECLARE @ErrorLine INT;\r\n\t\t\t\tDECLARE @ErrorProcedure NVARCHAR(126);\r\n\t\t\t\t--\r\n\t\t\t\tSELECT \r\n\t\t\t\t\t@CustomErrorMessage ='Error in StoredProcedure %s at line number %d' + @crlf + 'Billing Period: %s' + @crlf + 'Account:Meter (%s : %s)  ' + @crlf,\r\n\t\t\t\t\t@ErrorMessage\t= ERROR_MESSAGE(),\r\n\t\t\t\t\t@ErrorSeverity\t= ERROR_SEVERITY(),\r\n\t\t\t\t\t@ErrorState\t\t= ERROR_STATE(),\r\n\t\t\t\t\t@ErrorNumber\t= ERROR_NUMBER(),\r\n\t\t\t\t\t@ErrorProcedure = ERROR_PROCEDURE(),\r\n\t\t\t\t\t@ErrorLine\t\t= ERROR_LINE();\t\t\t\r\n\t\t\t\t--\r\n\t\t\t\tset\t@ErrorMessage = @CustomErrorMessage + @ErrorMessage + @crlf + 'ErrorNumber: ' + cast(@ErrorNumber as varchar(10)) + @crlf\r\n\t\t\t\t--\r\n\t\t\t\tRAISERROR (@ErrorMessage, -- Message text.\r\n\t\t\t\t\t\t   @ErrorSeverity, -- Severity.\r\n\t\t\t\t\t\t   @ErrorState, -- State.\r\n\t\t\t\t\t\t   @ErrorProcedure,\r\n\t\t\t\t\t\t   @ErrorLine,\r\n\t\t\t\t\t\t   @BillingPeriod,\r\n\t\t\t\t\t\t   @AccountNumber,\r\n\t\t\t\t\t\t   @MeterNumber\r\n\t\t\t\t\t\t   ) with log; \r\n\t\t\t\t\r\n\t\t\t\tset @StatusCode  = 1\r\n\t\t\t\t\t\t   \r\n\t\t\t\tROLLBACK TRANSACTION CompileTransactions\t\r\n\t\t\t\t\t\t   \r\n\t\tEND CATCH\r\n\r\n\r\n\r\n\r\n\t\r\n end"
        }
      ]
    }
  ]
}