{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Archive_usp_ParseSpannedBilledUploadConEdisonAccountInfo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "[ConEd].[Archive_usp_ParseSpannedBilledUploadConEdisonAccountInfo]",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and parse spanned billing information for Con Edison accounts. It handles cases where billing spans multiple periods, calculates prorated amounts for each period, and inserts the parsed data into a summary table. The procedure uses a cursor to iterate over records that span more than one billing period, calculates prorated values for each period, and inserts these values into the "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonAccountSummary",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple calculations and transformations of billing data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a cursor to iterate over potentially large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves several nested function calls for calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It handles complex business logic related to billing periods and prorating amounts."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status int output",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This is an output parameter intended to return the execution status of the procedure. It is not explicitly set within the procedure, which might be an oversight."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Variable Declarations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring numerous variables to hold data related to billing periods, amounts, and other account-specific information."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Set Defaults",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It sets default values for some variables, such as "
                },
                {
                  "type": "text",
                  "text": "@BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "@BillingCycle",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Declaration and Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "A cursor "
                        },
                        {
                          "type": "text",
                          "text": "SpannedGasBillCursor",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is declared to select records from "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonAccountTempSummarySpanned",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " where the billing spans more than one period."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The cursor iterates over each record, fetching data into local variables."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each spanned billing record, it calculates the total gas spanned billed percentage using a user-defined function."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It calculates the number of periods minus one for prorating purposes."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It initializes counters and accumulators for prorating calculations."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "A loop processes each period, calculating prorated amounts for billed amounts, therms, and CCF (hundred cubic feet of gas)."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It inserts the calculated data into "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonAccountSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Period Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "After processing the initial periods, it calculates the remaining amounts for the last period to avoid rounding errors."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It inserts the final period's data into the summary table."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Cleanup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The cursor is closed and deallocated after processing all records."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance issues, especially with large datasets, as it processes rows one at a time."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Multiple calls to user-defined functions within loops can be computationally expensive and may impact performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not explicitly manage transactions, which could lead to partial updates in case of failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Lack of Transaction Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Without explicit transaction management, there is a risk of data inconsistency if the procedure fails partway through execution."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output Parameter Not Set",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "@Status",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " output parameter is not set within the procedure, which could lead to confusion about the execution status."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": There is no error handling mechanism in place, which means any runtime errors could cause the procedure to fail without logging or notifying the user."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor and multiple function calls may not scale well with large datasets, potentially leading to long execution times."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that all necessary data is present and valid, but there are no checks or validations to ensure data integrity before processing."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [ConEd].[Archive_usp_ParseSpannedBilledUploadConEdisonAccountInfo] (@Status int output)\nAS\r\n--\r\n--**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Parse Spanned Con Edison Bills Account Upload Information\r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--*               \r\n--* Exec:\t\t    [ConEd].[usp_ParseSpannedBilledUploadConEdisonAccountInfo]\r\n--*\r\n--* Parameter(s):         \r\n--*\t\t\t\t\tStatusCode  int output       -  Execution Return Status \r\n--*\r\n--*\r\n--* Database:\t\tEC3database\r\n--*\r\n--* Return:\t\t\t0 Success\r\n--*                 9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   06/18/2008\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 06/18/2008 PAH  First Version  \r\n--* 03/27/2006 PAH  Revised to \r\n--***************************************************************************************\r\n--\r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\ndeclare @UploadConEdisonAccountTempSummarySpannedSeqid dbo.seqid\r\n--\r\ndeclare @Notes dbo.notes\r\ndeclare @AccountNumber dbo.acctnum\r\ndeclare @FacilityName dbo.UtilityServiceAccountName\r\ndeclare @ServiceAddress dbo.addr\r\ndeclare @TariffCode dbo.tariff\r\ndeclare @PostingDate dbo.PostingDate\r\n--\r\ndeclare @NumberOfPeriodsMinusOne dbo.Accumulator\r\ndeclare @DeltaNumberOfPeriods dbo.Accumulator\r\ndeclare @BillingPeriod dbo.yyyymm \r\ndeclare @FirstPeriodCanceled dbo.yyyymm \r\ndeclare @ThermFactor dbo.ThermsFactor \r\ndeclare @FudgedThermFactor dbo.ThermsFactor \r\ndeclare @BillingPeriodRevision dbo.yyyymm \r\ndeclare @FromDate dbo.yyyymmdd \r\ndeclare @ToDate dbo.yyyymmdd \r\ndeclare @CalculatedBillingPeriodRevision dbo.yyyymm \r\ndeclare @CalculatedFromDate dbo.yyyymmdd \r\ndeclare @CalculatedToDate dbo.yyyymmdd \r\ndeclare @BilledAmount dbo.BillingAmt \r\ndeclare @BilledAmountMonthly dbo.BillingAmt \r\ndeclare @BilledAmountMonthlySum dbo.BillingAmt \r\ndeclare @BilledAmountAverage dbo.BillingAmt \r\ndeclare @BilledAmountRemainder dbo.BillingAmt \r\ndeclare @BillingPeriodDays dbo.Accumulator \r\ndeclare @BillingPeriodDaysAverage dbo.Accumulator \r\ndeclare @BillingPeriodDaysRemainder dbo.Accumulator \r\ndeclare @Therms dbo.EnergyUnit \r\ndeclare @LastPeriodTherms dbo.EnergyUnit \r\ndeclare @ThermsAverage dbo.EnergyUnit \r\ndeclare @ThermsRemainder dbo.EnergyUnit \r\ndeclare @CCF dbo.EnergyUnit \r\ndeclare @CCFAverage dbo.EnergyUnit \r\ndeclare @CCFRemainder dbo.EnergyUnit \r\ndeclare @SumAverageCCF dbo.EnergyUnit \r\ndeclare @idx int\r\ndeclare @StartingBillingPeriodDaysIncrement int\r\ndeclare @StartingBillingPeriodCCFIncrement int\r\ndeclare @StartingBillingPeriodThermsIncrement int\r\ndeclare @IncrementBillingPeriodDays int\r\ndeclare @IncrementBillingPeriodCCF int\r\ndeclare @IncrementBillingPeriodTherms int\r\n-- \r\ndeclare @BilledAmountMonthlyLastPeriod dbo.BillingAmt\r\ndeclare @ThermsMonthlyLastPeriod dbo.EnergyUnit \r\ndeclare @CCFMonthlyLastPeriod dbo.EnergyUnit \r\n\r\ndeclare @ConEdUtilityCode dbo.seqid\r\ndeclare @ApplyMonthlyPercentage  dbo.DiscountPercentage\r\ndeclare @ThermsMonthlySum  dbo.EnergyUnit \r\ndeclare @ThermsMonthly  dbo.EnergyUnit \r\ndeclare @CCFMonthly  dbo.EnergyUnit \r\ndeclare @CCFMonthlySum  dbo.EnergyUnit \r\ndeclare @TotalGasSpannedBilledPercentage dbo.DiscountPercentage\r\ndeclare @BillingCycle dbo.MonthlyBillingCycle\r\n--\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n--SELECT @BillingPeriod = BillingPeriod FROM ApplicationTimeFrame WHERE (CurrentProcessingPeriod = 'Y')\r\n--\r\n--Set @BillingPeriod = '200607'\r\n--\r\nSELECT TOP 1 @BillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonAccount\r\n--\r\nSet @BillingCycle = 'M'\r\nset @ConEdUtilityCode = 9\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\n--\r\nDECLARE SpannedGasBillCursor CURSOR FOR\r\nSELECT UploadConEdisonAccountTempSummarySpannedSeqid FROM ConEd.UploadConEdisonAccountTempSummarySpanned \r\nwhere (DeltaNumberOfPeriods > 1) --and @BillingPeriod=@BillingPeriod\r\n--\r\nOPEN SpannedGasBillCursor;\r\n--\r\nFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonAccountTempSummarySpannedSeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n--\r\nWHILE @@FETCH_STATUS = 0\r\n   BEGIN\r\n\t--\r\n\t--\tBuffer all of the columns from the spanned row for parsing purposes\r\n\t--\r\n\tSELECT  @DeltaNumberOfPeriods=DeltaNumberOfPeriods,  @BillingPeriodRevision=BillingPeriodRevision, @FirstPeriodCanceled=FirstPeriodCanceled, \r\n\t\t\t@FromDate=FromDate,@ToDate=ToDate,@BilledAmount=BilledAmount, @CCF=CCF, @Therms=Therms, @ThermFactor=ThermFactor,@BillingPeriodDays=BillingPeriodDays,\r\n\t\t\t@BillingPeriod = BillingPeriod,@AccountNumber=AccountNumber,@FacilityName=FacilityName,@ServiceAddress =ServiceAddress,@TariffCode=TariffCode,\r\n\t\t\t@PostingDate=PostingDate\r\n\tFROM ConEd.UploadConEdisonAccountTempSummarySpanned\r\n\tWHERE   (UploadConEdisonAccountTempSummarySpannedSeqid = @UploadConEdisonAccountTempSummarySpannedSeqid) \r\n\t--\r\n\t--\tAggregate the average City wide monthly gas usage percentage for the spanned row billing periods \r\n\t--\r\n\tselect @TotalGasSpannedBilledPercentage= dbo.[CalculateTotalGasSpannedBilledPercentage] (@BillingCycle,@DeltaNumberOfPeriods,@FirstPeriodCanceled,@BillingPeriodRevision)\r\n\t--\r\n\t--\tDetermine the number of periods minus 1 to pro-rate the money and usage.  The last period will derive the money and usage\r\n\t--\tby row totals - (the n-1 aggregates of money and usage)\r\n\t--\r\n\tset @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods-1\r\n\t--\r\n\t--\tInitialize the counters for the n-1 parses\r\n\t--\r\n\tset @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n\tset @CalculatedFromDate = @FromDate\r\n\tset @CalculatedToDate = @ToDate\r\n\tset @idx = 0\r\n\tset @BilledAmountMonthlySum = 0.00\r\n\tset @ThermsMonthlySum = 0\r\n\tset @CCFMonthlySum = 0\r\n\t--\r\n\twhile (@NumberOfPeriodsMinusOne > @idx)\r\n\t\tBegin\r\n\t\t\t--\r\n\t\t\t-- The @ApplyMonthlyPercentage holds the weigthed average for the particular month\r\n\t\t\t--\r\n\t\t\tselect @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t\t\t--\r\n\t\t\t-- Apply the Monthly Percentage to the CCF,Therms and Billed Amount and accumulate the weigthed average units.\r\n\t\t\t--\r\n\t\t\tset @BilledAmountMonthly = ROUND(@BilledAmount * @ApplyMonthlyPercentage,2)\r\n\t\t\tset @BilledAmountMonthlySum = @BilledAmountMonthlySum + @BilledAmountMonthly\r\n\t\t\tset @ThermsMonthly = ROUND(@Therms * @ApplyMonthlyPercentage,0)\r\n\t\t\tset @ThermsMonthlySum = @ThermsMonthlySum + @ThermsMonthly\r\n\t\t\tset @CCFMonthly = ROUND(@CCF * @ApplyMonthlyPercentage,0)\r\n\t\t\tset @CCFMonthlySum = @CCFMonthlySum + @CCFMonthly\r\n\t\t\t--\r\n\t\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" as the derived \"Todate\" for the account.\r\n\t\t\t--\r\n\t\t\tselect @CalculatedToDate = [dbo].[DetermineConEdisonBillingPeriodProjectedToDate](@CalculatedBillingPeriodRevision,@TariffCode,@ConEdUtilityCode)\r\n\t\t\t--\r\n\t\t\tprint @AccountNumber+' '+@BillingPeriodRevision+' '+@FromDate+' '+@ToDate\r\n\t\t\t--\r\n\t\t\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t\t\t--\tIt will note in EC3 that the transaction was derived.\r\n\t\t\t--\r\n\t\t\tselect @Notes = 'Therm factor '+cast(@ThermFactor as varchar(6))+\r\n\t\t\t' for '+cast(@DeltaNumberOfPeriods as varchar(6))+' First: '+@FirstPeriodCanceled +' ( '+@FromDate+') Last: '+ \r\n\t\t\t@BillingPeriodRevision +' ( '+@FromDate+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+cast(@ApplyMonthlyPercentage as varchar(10))+\r\n\t\t\t' - Total %: '+cast(@TotalGasSpannedBilledPercentage as varchar(10))\r\n\t\t\t--\r\n\t\t\t--\tINSERT the data into the table \"ConEd.UploadConEdisonAccountSummary\"\r\n\t\t\t--\r\n\t\t\tINSERT INTO ConEd.UploadConEdisonAccountSummary\r\n\t\t\t\t\t(AccountUtilityCompanySeqid, OriginalAccountNumber, NumberOfRebillTransactions, NumberOfTransactions, DerivedFromSpannedBill,BillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, \r\n\t\t\t\t\tEstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, \r\n\t\t\t\t\tTotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, \r\n\t\t\t\t\tCanceledBilledAmount, AverageRebillCostOfGasCharge,AverageRebillThermsFactor, BillingDays, BillingDate, FromDate, ToDate, BillingAction, ProcessedInTheCurrentPeriod, \r\n\t\t\t\t\tGasRateCode, DeliveryChargeAmount,TotalCCF, TotalTherms, ThermsFactor, \r\n\t\t\t\t\tCancelFromDate, CancelToDate, CancelDeliveryChargeAmount,CancelTotalCCF, CancelTotalTherms, CancelThermsFactor, ProcessEffectiveDate, Notes,\r\n\t\t\t\t    SpannedBillingPeriodRevision,SpannedFirstCanceledBillingPeriod,SpannedBilledAmount,SpannedCCF,SpannedThermFactor,SpannedTherm,SpannedMonthlyPercentage,SpannedTotalPercentage,\r\n\t\t\t\t\tFacilityName,ServiceAddress,AuthenticatedUserID)\r\n\t\t\tSELECT \r\n\t\t\t\t@ConEdUtilityCode, \r\n\t\t\t\t@AccountNumber,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,   \r\n\t\t\t\t1, --  NumberOfRebillTransactions\r\n\t\t\t\t1, --  NumberOfTransactions\r\n\t\t\t\t'Y',  -- DerivedFromSpannedBill = 'Y'\r\n\t\t\t\tUploadConEdisonAccountTempSummarySPanned.BillingPeriod, \r\n\t\t\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n\t\t\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n\t\t\t\t'ACT',  -- EstimatedOrActualBilling needs to be updated\r\n\t\t\t\t@FromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n\t\t\t\t@ToDate, --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n\t\t\t\t1, --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n\t\t\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n\t\t\t\t@BilledAmountMonthly, --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n\t\t\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n\t\t\t\t0 AS PriorRevisedBilledAmount,\r\n\t\t\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n\t\t\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n\t\t\t\t0 AS AverageRebillCostOfGasCharge, \r\n\t\t\t\t1.00 AS AverageRebillThermsFactor, \r\n\t\t\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t\t\t[dbo].ConvertDateToYYYYMMDD (@PostingDate), -- BillingDate\r\n\t\t\t\t@CalculatedFromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n\t\t\t\t@CalculatedToDate, -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n\t\t\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END, -- 'O' as BillingAction, --@BillingPeriod\r\n\t\t\t\t'N' AS ProcessedInTheCurrentPeriod, \r\n\t\t\t\tUploadConEdisonAccountTempSummarySPanned.TariffCode, \r\n\t\t\t\t@BilledAmountMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n\t\t\t\t@CCFMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n\t\t\t\t@ThermsMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n\t\t\t\tCASE @CCFMonthly WHEN 0 THEN 1.0000 ELSE round(@ThermsMonthly*1.0 / @CCFMonthly,4) END,--  IsNull(UploadConEdisonAccountTempSummarySPanned.ThermFactor,1.0) AS ThermsFactor,\r\n\t\t\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n\t\t\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n\t\t\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n\t\t\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n\t\t\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n\t\t\t\t1.0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n\t\t\t\t[dbo].ConvertDateToYYYYMMDD (GETDATE()), -- ProcessEffectiveDate\r\n\t\t\t\t@Notes,\r\n\t\t\t    @BillingPeriodRevision,@FirstPeriodCanceled,@BilledAmount,@CCF,@ThermFactor,@Therms,@ApplyMonthlyPercentage,@TotalGasSpannedBilledPercentage,\r\n\t\t\t\t@FacilityName,@ServiceAddress,\r\n\t\t\t\t1 -- AuthenticatedUserID\r\n\t\t\tFROM ConEd.UploadConEdisonAccountTempSummarySpanned\r\n\t\t\tWHERE   (UploadConEdisonAccountTempSummarySpannedSeqid = @UploadConEdisonAccountTempSummarySpannedSeqid) \r\n\t\t\t--\r\n\t\t\t--\tSet up for the next the Revised Billing Period row.\r\n\t\t\t--\r\n\t\t\tset @SumAverageCCF = @SumAverageCCF + @CCFAverage \t  \r\n\t\t\tset @idx = @idx + 1\r\n\t\t\t--\r\n\t\t\t--\tCalculate the next the Revised Billing Period row.\r\n\t\t\tselect @CalculatedBillingPeriodRevision = [dbo].[CalculateNextBillingPeriod]  (@CalculatedBillingPeriodRevision,@BillingCycle)\r\n\t\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n\t\t\tselect @CalculatedFromDate = [dbo].[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision,@TariffCode,@ConEdUtilityCode)\r\n\t\t\t--\r\n\t\t\t--\tProcess the next Revised Billing Period row\r\n\t\t\t--\r\n\t\tEnd\r\n\t--\r\n\t--\tFinish up the last period's processing\r\n\t--\r\n\t--\tUse the (Nth -1) periods @CalculatedToDate as the \"FromDate\" and the acutal \"ToDate\" from the spanned record as the \"ToDate\"\r\n\t--\r\n\tselect @CalculatedFromDate = @CalculatedToDate\r\n\tselect @CalculatedToDate = @ToDate\r\n\t--\r\n\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\t--\r\n\tselect @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t--\r\n\t--\tDerive the net changes to avoid rounding errors\r\n\t--\r\n\tset @BilledAmountMonthlyLastPeriod = @BilledAmount - @BilledAmountMonthlySum\r\n\tset @ThermsMonthlyLastPeriod = @Therms - @ThermsMonthlySum\r\n\tset @CCFMonthlyLastPeriod = @CCF  - @CCFMonthlySum\r\n\t--\r\n\t--\tprint @AccountNumber+' '+@BillingPeriodRevision+' '+@FromDate+' '+@ToDate\r\n\t--\r\n\t--\r\n\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t--\tIt will note in EC3 that the transaction was derived.\r\n\t--\r\n\tselect @Notes = 'Therm factor '+cast(@ThermFactor as varchar(6))+\r\n\t' for '+cast(@DeltaNumberOfPeriods as varchar(6))+' First: '+@FirstPeriodCanceled +' ( '+@FromDate+') Last: '+ \r\n\t@BillingPeriodRevision +' ( '+@FromDate+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+cast(@ApplyMonthlyPercentage as varchar(10))+\r\n\t' - Total %: '+cast(@TotalGasSpannedBilledPercentage as varchar(10))\r\n\t--\r\n\t--\tINSERT the data into the table \"ConEd.UploadConEdisonAccountSummary\"\r\n\t--\r\n\tINSERT INTO ConEd.UploadConEdisonAccountSummary\r\n\t\t\t(AccountUtilityCompanySeqid, OriginalAccountNumber, NumberOfRebillTransactions, NumberOfTransactions, DerivedFromSpannedBill,BillingPeriod, BillingPeriodRevision, FirstCanceledBillingPeriod, \r\n\t\t\tEstimatedOrActualBilling, InitialCancelFromDate, CurrentBillingToDate, NumberOfBillingPeriods, TotalBillingDaysRebilled, \r\n\t\t\tTotalRebilledAmount, TotalCanceledAmount, PriorRevisedBilledAmount, RevisedBilledAmount, \r\n\t\t\tCanceledBilledAmount, AverageRebillCostOfGasCharge,AverageRebillThermsFactor, BillingDays, BillingDate, FromDate, ToDate, BillingAction, ProcessedInTheCurrentPeriod, \r\n\t\t\tGasRateCode, DeliveryChargeAmount,TotalCCF, TotalTherms, ThermsFactor, \r\n\t\t\tCancelFromDate, CancelToDate, CancelDeliveryChargeAmount,CancelTotalCCF, CancelTotalTherms, CancelThermsFactor, ProcessEffectiveDate, Notes,\r\n\t\t    SpannedBillingPeriodRevision,SpannedFirstCanceledBillingPeriod,SpannedBilledAmount,SpannedCCF,SpannedThermFactor,SpannedTherm,SpannedMonthlyPercentage,SpannedTotalPercentage,\r\n\t\t\tFacilityName,ServiceAddress,AuthenticatedUserID)\r\n\tSELECT \r\n\t\t@ConEdUtilityCode,\r\n\t\t@AccountNumber,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,\r\n\t\t1, --  NumberOfRebillTransactions\r\n\t\t1, --  NumberOfTransactions\r\n\t\t'Y',  -- DerivedFromSpannedBill = 'Y'\r\n\t\tUploadConEdisonAccountTempSummarySPanned.BillingPeriod, \r\n\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n\t\t'ACT',  -- EstimatedOrActualBilling needs to be upodated\r\n\t\t@FromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n\t\t@ToDate, --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n\t\t[dbo].[CalculateDeltaBillingPeriods] (\r\n\t\t\t\t\t\t\t\t\t\t\t  [dbo].[CalculateNextBillingPeriod](\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[dbo].DetermineConEdisonBillingPeriodProjected(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@CalculatedFromDate,@TariffCode,@ConEdUtilityCode),@BillingCycle)\r\n\t\t\t\t\t\t\t\t\t\t\t,[dbo].DetermineConEdisonBillingPeriodProjected(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t@CalculatedToDate,@TariffCode,@ConEdUtilityCode),\r\n\t\t\t\t\t\t\t\t\t\t\t@BillingCycle), --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n\t\t@BilledAmountMonthlyLastPeriod, --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n\t\t0 AS PriorRevisedBilledAmount,\r\n\t\t@BilledAmountMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n\t\t0 AS AverageRebillCostOfGasCharge, \r\n\t\t1.00 AS AverageRebillThermsFactor, \r\n\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), --IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t[dbo].ConvertDateToYYYYMMDD (@PostingDate), -- BillingDate\r\n\t\t@CalculatedFromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n\t\t@CalculatedToDate, -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END, -- 'O' as BillingAction, \r\n\t\t'N' AS ProcessedInTheCurrentPeriod, \r\n\t\tUploadConEdisonAccountTempSummarySPanned.TariffCode, \r\n\t\t@BilledAmountMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n\t\t@CCFMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n\t\t@ThermsMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n\t\tCASE @CCFMonthlyLastPeriod WHEN 0 THEN 0 ELSE round(@ThermsMonthlyLastPeriod*1.0 / @CCFMonthlyLastPeriod,4) END,--  IsNull(UploadConEdisonAccountTempSummarySPanned.ThermFactor,1.0) AS ThermsFactor,\r\n\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n\t\t1.0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n\t\t[dbo].ConvertDateToYYYYMMDD (GETDATE()), -- ProcessEffectiveDate\r\n\t\t@Notes,\r\n\t    @BillingPeriodRevision,@FirstPeriodCanceled,@BilledAmount,@CCF,@ThermFactor,@Therms,@ApplyMonthlyPercentage,@TotalGasSpannedBilledPercentage,\r\n\t\tFacilityName,ServiceAddress,\r\n\t\t1 -- AuthenticatedUserID\r\n\tFROM ConEd.UploadConEdisonAccountTempSummarySpanned\r\n\tWHERE   (UploadConEdisonAccountTempSummarySpannedSeqid = @UploadConEdisonAccountTempSummarySpannedSeqid) \r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\n\tFETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonAccountTempSummarySpannedSeqid\r\n   END\r\n\r\nCLOSE SpannedGasBillCursor;\r\nDEALLOCATE SpannedGasBillCursor;"
        }
      ]
    }
  ]
}