{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Upload_12_ProcessSpannedMeterBilling",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Upload_12_ProcessSpannedMeterBilling",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process spanned meter billing data for ConEdison. It performs two main tasks: first, it inputs spanned data into a temporary table, and second, it processes these records to generate final billing records, which are then inserted into a summary table. The procedure handles complex calculations related to gas usage over multiple billing periods, including adjustments for meter rollovers and prorating usage and billing amounts across periods."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to several factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple steps and complex calculations for prorating billing data across multiple periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a cursor to iterate over records, which adds to the complexity and potential performance issues."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes numerous variable declarations and calculations, including calls to user-defined functions for business logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure handles intricate business rules related to meter readings, billing periods, and adjustments for meter rollovers."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates on data already present in the "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonMeter",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table and processes it into the "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonMeterTempSummarySpanned",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " and "
        },
        {
          "type": "text",
          "text": "ConEd.UploadConEdisonMeterSummary",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " tables."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Step 1: Input Spanned Data",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure begins by truncating the "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonMeterTempSummarySpanned",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to remove any existing data."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It resets the identity column of the table using "
                        },
                        {
                          "type": "text",
                          "text": "DBCC CHECKIDENT",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It inserts records from "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonMeter",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " where "
                        },
                        {
                          "type": "text",
                          "text": "DeltaNumberOfPeriods",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " is greater than 1, indicating spanned billing periods."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Step 2: Process Spanned Records",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "A cursor is declared to iterate over records in the temporary spanned summary table."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each record, it buffers column values into local variables for processing."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It calculates the total gas spanned billed percentage and initializes counters for prorating usage and billing amounts."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It performs calculations to determine meter rollovers and prorates the usage and billing amounts across periods."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It inserts the processed data into the "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonMeterSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table, including detailed notes on the calculations performed."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance bottlenecks, especially with large datasets, as it processes records row-by-row."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Calculations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure performs numerous calculations and calls to user-defined functions, which can be resource-intensive."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Truncation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating the temporary table and reseeding the identity column can be costly operations if performed frequently."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure truncates a table and reseeds its identity, which could lead to concurrency issues if multiple instances of the procedure are run simultaneously."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": There is no explicit error handling in the procedure, which could lead to unhandled exceptions and data inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor and complex calculations may not scale well with large volumes of data, potentially leading to long execution times."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in the source table is accurate and complete. Any anomalies in the source data could lead to incorrect billing calculations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Overall, this stored procedure is a critical component of the billing process, handling complex business logic and calculations to ensure accurate billing for spanned meter periods. However, its complexity and potential performance issues warrant careful monitoring and optimization."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- UPDATE by zd\t2019-03-12\testimate or actual calculation is updated\t\r\n-- =============================================\r\nCREATE PROCEDURE [ConEd].[usp_Upload_12_ProcessSpannedMeterBilling]\r\nAS \r\nBEGIN\r\n\t/*\r\n\tSteps:\r\n\t1) Input spanned data into UploadConEdisonMeterTempSummarySpanned\r\n\t2) Process spanned records, put final records into UploadConEdisonMeterSummary\r\n\t*/\r\n\r\n\t/*\r\n\t1) Input spanned data into \r\n\t*/\r\n        BEGIN\r\n            TRUNCATE TABLE ConEd.UploadConEdisonMeterTempSummarySpanned\r\n            DBCC CHECKIDENT ('ConEd.[UploadConEdisonMeterTempSummarySpanned]', RESEED,1)\r\n\r\n            INSERT  INTO ConEd.UploadConEdisonMeterTempSummarySpanned\r\n                    ( title ,\r\n                      AccountNumber ,\r\n                      MeterNumber ,\r\n                      BillingPeriod ,\r\n                      BillingPeriodRevision ,\r\n                      FirstPeriodCanceled ,\r\n                      FromDate ,\r\n                      ToDate ,\r\n                      ThermFactor ,\r\n                      CCF ,\r\n                      DeltaNumberOfPeriods ,\r\n                      ReadingCode ,\r\n                      FromReading ,\r\n                      ToReading ,\r\n                      MeterConstant ,\r\n                      TripNumber ,\r\n                      Dials ,\r\n                      FacilityName ,\r\n                      ServiceAddress\r\n                    )\r\n                    SELECT  'SpannedMeterbilling' AS title ,\r\n                            AccountNumber ,\r\n                            MeterNumber ,\r\n                            BillingPeriod ,\r\n                            BillingPeriodRevision ,\r\n                            FirstPeriodCanceled ,\r\n                            FromDate ,\r\n                            ToDate ,\r\n                            ThermFactor ,\r\n                            CCF ,\r\n                            DeltaNumberOfPeriods ,\r\n                            ReadingCode ,\r\n                            FromReading ,\r\n                            ToReading ,\r\n                            MeterConstant ,\r\n                            CASE WHEN CycleBillingDays > 99 THEN 99 ELSE CycleBillingDays END ,  -- Trip Number\r\n                            Dials ,\r\n                            FacilityName ,\r\n                            ServiceAddress\r\n                    FROM ConEd.UploadConEdisonMeter\r\n                    WHERE   ( DeltaNumberOfPeriods > 1 )\r\n  \r\n  \r\n\r\n        END -- end 1  \r\n\r\n\t/*\r\n\t2) Process spanned records, put final records into UploadConEdisonMeterSummary\r\n\t*/\r\n        BEGIN\r\n\t\t\r\n            DECLARE @UploadConEdisonMeterTempSummarySpannedSeqid dbo.seqid\r\n--\r\n            DECLARE @Notes dbo.notes\r\n            DECLARE @AccountNumber dbo.acctnum\r\n            DECLARE @FacilityName dbo.UtilityServiceAccountName\r\n            DECLARE @ServiceAddress dbo.addr\r\n            DECLARE @TariffCode dbo.tariff\r\n            DECLARE @PostingDate dbo.PostingDate\r\n--\r\n            DECLARE @OriginalMeterNumber meternumber \r\n            DECLARE @GasRateCode GasRateCode \r\n            DECLARE @MeterFromReading MeterReadingNumber7 \r\n            DECLARE @MeterToReading MeterReadingNumber7 \r\n            DECLARE @MeterConstant MeterConstantMultiplier \r\n            DECLARE @ReadingCode ReadingCode \r\n            DECLARE @NumberOfDials MeterDials \r\n--\r\n            DECLARE @NumberOfPeriodsMinusOne dbo.Accumulator\r\n            DECLARE @DeltaNumberOfPeriods dbo.Accumulator\r\n            DECLARE @BillingPeriod dbo.yyyymm \r\n            DECLARE @FirstPeriodCanceled dbo.yyyymm \r\n            DECLARE @ThermFactor dbo.ThermsFactor \r\n            DECLARE @FudgedThermFactor dbo.ThermsFactor \r\n            DECLARE @BillingPeriodRevision dbo.yyyymm \r\n            DECLARE @FromDate dbo.yyyymmdd \r\n            DECLARE @ToDate dbo.yyyymmdd \r\n            DECLARE @CalculatedBillingPeriodRevision dbo.yyyymm \r\n            DECLARE @CalculatedFromDate dbo.yyyymmdd \r\n            DECLARE @CalculatedToDate dbo.yyyymmdd \r\n            DECLARE @BilledAmount dbo.BillingAmt \r\n            DECLARE @BilledAmountMonthly dbo.BillingAmt \r\n            DECLARE @BilledAmountAverage dbo.BillingAmt \r\n            DECLARE @BilledAmountRemainder dbo.BillingAmt \r\n            DECLARE @BillingPeriodDays dbo.Accumulator \r\n            DECLARE @BillingPeriodDaysAverage dbo.Accumulator \r\n            DECLARE @BillingPeriodDaysRemainder dbo.Accumulator \r\n            DECLARE @Therms dbo.EnergyUnit \r\n            DECLARE @LastPeriodTherms dbo.EnergyUnit \r\n            DECLARE @ThermsAverage dbo.EnergyUnit \r\n            DECLARE @ThermsRemainder dbo.EnergyUnit \r\n            DECLARE @CCF dbo.EnergyUnit \r\n            DECLARE @CCFAverage dbo.EnergyUnit \r\n            DECLARE @CCFRemainder dbo.EnergyUnit \r\n            DECLARE @SumAverageCCF dbo.EnergyUnit \r\n            DECLARE @idx INT\r\n            DECLARE @StartingBillingPeriodDaysIncrement INT\r\n            DECLARE @StartingBillingPeriodCCFIncrement INT\r\n            DECLARE @StartingBillingPeriodThermsIncrement INT\r\n            DECLARE @IncrementBillingPeriodDays INT\r\n            DECLARE @IncrementBillingPeriodCCF INT\r\n            DECLARE @IncrementBillingPeriodTherms INT\r\n--\r\n            DECLARE @MeterRolloverAdjustmentFactor INT\r\n            DECLARE @NumberOfDialsAdjustmentFactor INT\r\n            DECLARE @MeterHasRolledOver BIT\r\n\r\n--\r\n            DECLARE @ThermsMonthlyLastPeriod dbo.EnergyUnit \r\n            DECLARE @CCFMonthlyLastPeriod dbo.EnergyUnit \r\n\r\n            DECLARE @CalculatedMeterFromReading INT \r\n            DECLARE @CalculatedMeterToReading INT\r\n            DECLARE @CalculatedMeterConstant DECIMAL(7, 1)\r\n--\r\n            DECLARE @ConEdUtilityCode dbo.seqid\r\n            DECLARE @ApplyMonthlyPercentage dbo.DiscountPercentage\r\n            DECLARE @ThermsMonthlySum dbo.EnergyUnit \r\n            DECLARE @ThermsMonthly dbo.EnergyUnit \r\n            DECLARE @CCFMonthly dbo.EnergyUnit \r\n            DECLARE @CCFMonthlySum dbo.EnergyUnit \r\n            DECLARE @TotalGasSpannedBilledPercentage dbo.DiscountPercentage\r\n            DECLARE @BillingCycle dbo.MonthlyBillingCycle\r\n            DECLARE @BillingDate dbo.yyyymmdd\r\n--\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n--\r\n--SELECT @BillingPeriod = BillingPeriod FROM ApplicationTimeFrame WHERE (CurrentProcessingPeriod = 'Y')\r\n--\r\n--Set @BillingPeriod = '200607'\r\n            SELECT TOP 1\r\n                    @BillingPeriod = BillingPeriod\r\n            FROM ConEd.UploadConEdisonMeter\r\n--\r\n            SET @BillingCycle = 'M'\r\n            SET @ConEdUtilityCode = 9\r\n--\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n--\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\n--\r\n            DECLARE SpannedGasBillCursor CURSOR\r\n            FOR\r\n                SELECT  UploadConEdisonMeterTempSummarySpannedSeqid\r\n                FROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n                WHERE   ( DeltaNumberOfPeriods > 1 ) --and @BillingPeriod=@BillingPeriod\r\n--\r\n            OPEN SpannedGasBillCursor;\r\n--\r\n            FETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonMeterTempSummarySpannedSeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n--\r\n            WHILE @@FETCH_STATUS = 0 \r\n                BEGIN\r\n\t--\r\n\t--\tBuffer all of the columns from the spanned row for parsing purposes\r\n\t--\r\n\t--\r\n                    SELECT  @AccountNumber = AccountNumber ,\r\n                            @OriginalMeterNumber = MeterNumber ,\r\n                            @MeterFromReading = ISNULL(FromReading, 0) ,\r\n                            @MeterToReading = ISNULL(ToReading, 0) ,\r\n                            @MeterConstant = ISNULL(CASE WHEN MeterConstant = 0 THEN 1 ELSE MeterConstant END, 1) ,\r\n                            @ReadingCode = ReadingCode ,\r\n                            @NumberOfDials = Dials ,\r\n                            @DeltaNumberOfPeriods = DeltaNumberOfPeriods ,\r\n                            @BillingPeriodRevision = BillingPeriodRevision ,\r\n                            @FirstPeriodCanceled = FirstPeriodCanceled ,\r\n                            @FromDate = FromDate ,\r\n                            @ToDate = ToDate ,\r\n                            @CCF = CCF ,\r\n                            @ThermFactor = ThermFactor ,\r\n                            @BillingPeriod = BillingPeriod ,\r\n                            @FacilityName = FacilityName ,\r\n                            @ServiceAddress = ServiceAddress\r\n                    FROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n                    WHERE   ( UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid ) \r\n\t--\r\n\t--\tAggregate the average City wide monthly gas usage percentage for the spanned row billing periods \r\n\t--\r\n                    SELECT  @TotalGasSpannedBilledPercentage = [dbo].[CalculateTotalGasSpannedBilledPercentage](@BillingCycle,\r\n                                                              @DeltaNumberOfPeriods,\r\n                                                              @FirstPeriodCanceled,\r\n                                                              @BillingPeriodRevision)\r\n\t--\r\n\t--\tDetermine the number of periods minus 1 to pro-rate the money and usage.  The last period will derive the money and usage\r\n\t--\tby row totals - (the n-1 aggregates of money and usage)\r\n\t--\r\n                    SET @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods - 1\r\n\t--\r\n\t--\tInitialize the counters for the n-1 parses\r\n\t--\r\n                    SET @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n                    SET @CalculatedFromDate = @FromDate\r\n                    SET @CalculatedToDate = @ToDate\r\n                    SET @idx = 0\r\n                    SET @ThermsMonthlySum = 0\r\n                    SET @CCFMonthlySum = 0\r\n                    SET @CalculatedMeterFromReading = CAST(@MeterFromReading AS INT)\r\n                    SET @CalculatedMeterToReading = CAST(@MeterToReading AS INT)\r\n                    SET @CalculatedMeterConstant = CAST(@MeterConstant AS DECIMAL(7,\r\n                                                              1))\r\n\r\n\t--\r\n                    SELECT  @ThermFactor = dbo.DetermineConEdisonGetThermFactorFromAccountTable(@AccountNumber,\r\n                                                              @BillingPeriodRevision)\r\n                    SELECT  @GasRateCode = dbo.DetermineConEdisonGetGasTariffRateFromAccountTable(@AccountNumber,\r\n                                                              @BillingPeriodRevision)\r\n                    SELECT  @BillingDate = dbo.ConvertDatetimeToYYYYMMDD(dbo.[DetermineConEdisonGetPostingDateFromAccountTable](@AccountNumber,\r\n                                                              @BillingPeriodRevision))\r\n\t--\r\n                    SET @Therms = ROUND(@CCF * @ThermFactor, 0)\r\n\t--\r\n                    SET @NumberOfDialsAdjustmentFactor = CASE \r\n\t\t\t\t\t\t\t\t\t\t\t-- Standard Gas meter has from 3 to 6 dials.  \r\n                                                              WHEN 2 < @NumberOfDials\r\n                                                              AND @NumberOfDials < 7\r\n                                                              THEN CAST(@NumberOfDials AS INT)\r\n\t\t\t\t\t\t\t\t\t\t\t-- If there are no dials reported or the number of dials is outside the \r\n\t\t\t\t\t\t\t\t\t\t\t-- range of the standard number of dials (3 to 6 dials).  The sum of the \r\n\t\t\t\t\t\t\t\t\t\t\t-- MeterFromReading + total CCF will derive a number that is equal to the \r\n\t\t\t\t\t\t\t\t\t\t\t-- number of dials - 1 raised to the power of 10 plus the MeterToReading.\r\n                                                              ELSE LEN(CAST(@CCF\r\n                                                              + @CalculatedMeterFromReading AS VARCHAR(7)))\r\n                                                              - 1\r\n                                                         END\r\n                    SET @MeterHasRolledOver = 0\r\n                    SET @MeterRolloverAdjustmentFactor = POWER(10,\r\n                                                              @NumberOfDialsAdjustmentFactor)\r\n                    IF ( @CalculatedMeterToReading < @CalculatedMeterFromReading\r\n                         OR POWER(10, @NumberOfDialsAdjustmentFactor) <= @CCF\r\n                       ) \r\n                        BEGIN\r\n                            SET @MeterHasRolledOver = 1\r\n                        END\r\n\t--\r\n\t--\r\n                    WHILE ( @NumberOfPeriodsMinusOne > @idx ) \r\n                        BEGIN\r\n\t\t\t--\r\n\t\t\t-- The @ApplyMonthlyPercentage holds the weigthed average for the particular month\r\n\t\t\t--\r\n                            SELECT  @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled](@CalculatedBillingPeriodRevision,\r\n                                                              @TotalGasSpannedBilledPercentage)\r\n\t\t\t--\r\n\t\t\t-- Apply the Monthly Percentage to the meter reading and derive the CCF, Therms  and accumulate the weigthed average units.\r\n\t\t\t--\r\n                            SET @CCFMonthly = ROUND(@CCF\r\n                                                    * @ApplyMonthlyPercentage,\r\n                                                    0)\r\n                            SET @CCFMonthlySum = @CCFMonthlySum + @CCFMonthly\r\n                            SET @ThermsMonthly = ROUND(@Therms\r\n                                                       * @ApplyMonthlyPercentage,\r\n                                                       0)\r\n                            SET @ThermsMonthlySum = @ThermsMonthlySum\r\n                                + @ThermsMonthly\r\n\t\t\t--\r\n\t\t\t--\tThe CCF, Therms and Meter To Reading are derived.  The CCF\r\n\t\t\t--\r\n                            SET @CalculatedMeterToReading = @CalculatedMeterFromReading\r\n                                + ROUND(@CCFMonthly / @CalculatedMeterConstant,\r\n                                        0)\r\n                            SET @CalculatedMeterToReading = CASE\r\n                                                              WHEN @MeterHasRolledOver = 0\r\n                                                              THEN @CalculatedMeterToReading\r\n                                                              ELSE \r\n\t\t\t\t\t\t\t\t\t\t\t\t -- \r\n\t\t\t\t\t\t\t\t\t\t\t\t -- The spanned meter reading has rolled over.  If the MeterToReading is less than @NumberOfDialsAdjustmentFactor then \r\n\t\t\t\t\t\t\t\t\t\t\t\t -- the derived MeterToReading remains unadjusted. When the sum of the @CalculatedMeterFromReading + @CCFMonthly is greater\r\n\t\t\t\t\t\t\t\t\t\t\t\t -- than the @NumberOfDialsAdjustmentFactor is subtracted to make the adjustment for the rollover meter reset.\r\n\t\t\t\t\t\t\t\t\t\t\t\t -- \r\n                                                              CASE\r\n                                                              WHEN @CalculatedMeterToReading < @MeterRolloverAdjustmentFactor\r\n                                                              THEN @CalculatedMeterToReading\r\n                                                              ELSE @CalculatedMeterToReading\r\n                                                              - @MeterRolloverAdjustmentFactor\r\n                                                              END\r\n                                                            END\r\n\t\t\t--\r\n\t\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" as the derived \"Todate\" for the account.\r\n\t\t\t--\r\n                            SELECT  @CalculatedToDate = [dbo].[DetermineConEdisonBillingPeriodProjectedToDate](@CalculatedBillingPeriodRevision,\r\n                                                              @TariffCode,\r\n                                                              @ConEdUtilityCode)\r\n\t\t\t--\r\n                            PRINT @AccountNumber + ' '\r\n                                + @BillingPeriodRevision + ' ' + @FromDate\r\n                                + ' ' + @ToDate\r\n\t\t\t--\r\n\t\t\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t\t\t--\tIt will note in EC3 that the transaction was derived.\r\n\t\t\t--\r\n                            SELECT  @Notes = 'CalcTherm '\r\n                                    + CAST(@Therms AS VARCHAR(10)) + ' = '\r\n                                    + CAST(@ThermFactor AS VARCHAR(6)) + ' * '\r\n                                    + CAST(@CCF AS VARCHAR(10)) + ' for '\r\n                                    + CAST(@DeltaNumberOfPeriods AS VARCHAR(6))\r\n                                    + ' periods, First: '\r\n                                    + @FirstPeriodCanceled + ' ( '\r\n                                    + @MeterFromReading + ') Last: '\r\n                                    + @BillingPeriodRevision + ' ( '\r\n                                    + @MeterToReading + '). ' + ' period: '\r\n                                    + @CalculatedBillingPeriodRevision\r\n                                    + ' Month %: '\r\n                                    + CAST(@ApplyMonthlyPercentage AS VARCHAR(10))\r\n                                    + ' - Total %: '\r\n                                    + CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t\t\t--\r\n\t\t\t--\tINSERT the data into the table \"ConEd.UploadConEdisonAccountSummary\"\r\n\t\t\t--\r\n                            INSERT  INTO ConEd.UploadConEdisonMeterSummary\r\n                                    ( AccountUtilityCompanySeqid ,\r\n                                      OriginalAccountNumber ,\r\n                                      OriginalMeterNumber ,\r\n                                      NumberOfTransactions ,\r\n                                      NumberOfRebillTransactions ,\r\n                                      NumberOfCancelTransactions ,\r\n                                      BillingPeriod ,\r\n                                      BillingPeriodRevision ,\r\n                                      FirstCancelPeriod ,\r\n                                      BillingAction ,\r\n                                      InitialCancelFromDate ,\r\n                                      CurrentBillingToDate ,\r\n                                      GasRateCode ,\r\n                                      FromDate ,\r\n                                      ToDate ,\r\n                                      MeterFromReading ,\r\n                                      MeterToReading ,\r\n                                      Ccf ,\r\n                                      Therms ,\r\n                                      ThermsFactor ,\r\n                                      MeterConstant ,\r\n                                      TotalBillingDaysRebilled ,\r\n                                      NumberOfBillingPeriods ,\r\n                                      BillingDays ,\r\n                                      BillingDate ,\r\n                                      ReadingCode ,\r\n                                      NumberOfDials ,\r\n                                      MeterType ,\r\n                                      ProcessedInTheCurrentPeriod ,\r\n                                      ProcessEffectiveDate ,\r\n                                      InitialPostingDate ,\r\n                                      AuthenticatedUserID ,\r\n                                      Notes ,\r\n                                      DerivedFromSpannedBill ,\r\n                                      SpannedBillingPeriodRevision ,\r\n                                      SpannedFirstCanceledBillingPeriod ,\r\n                                      SpannedCCF ,\r\n                                      SpannedThermFactor ,\r\n                                      SpannedTherm ,\r\n                                      SpannedMonthlyPercentage ,\r\n                                      SpannedTotalPercentage ,\r\n                                      EstimatedOrActualBilling ,\r\n                                      FacilityName ,\r\n                                      ServiceAddress\r\n\t\t\t\t                    )\r\n                                    SELECT  @ConEdUtilityCode ,\r\n                                            @AccountNumber ,\r\n                                            @OriginalMeterNumber ,\r\n                                            1 ,-- NumberOfTransactions, \r\n                                            1 ,-- NumberOfRebillTransactions,\r\n                                            0 ,-- NumberOfCancelTransactions,\r\n                                            @BillingPeriod ,\r\n                                            @CalculatedBillingPeriodRevision ,\r\n                                            @CalculatedBillingPeriodRevision ,\r\n                                            CASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision\r\n                                                 THEN 'O'\r\n                                                 ELSE 'A'\r\n                                            END ,-- BillingAction, \r\n                                            @CalculatedFromDate ,\r\n                                            @CalculatedToDate ,\r\n                                            @GasRateCode ,\r\n                                            @CalculatedFromDate ,\r\n                                            @CalculatedToDate ,\r\n                                            CAST(@CalculatedMeterFromReading AS VARCHAR(7)) ,  --dbo.MeterReadingNumber\r\n                                            CAST(@CalculatedMeterToReading AS VARCHAR(7)) ,  --dbo.MeterReadingNumber\r\n                                            @CCFMonthly ,\r\n                                            @ThermsMonthly ,\r\n                                            @ThermFactor ,\r\n                                            @MeterConstant ,\r\n                                            [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) ,\r\n                                            1 ,\r\n                                            [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) ,\r\n                                            @BillingDate ,\r\n                                            @ReadingCode ,\r\n                                            @NumberOfDials ,\r\n                                            'G' , -- MeterType,\r\n                                            'N' , --ProcessedInTheCurrentPeriod\r\n                                            [dbo].ConvertDateToYYYYMMDD(GETDATE()) , -- ProcessEffectiveDate\r\n                                            GETDATE() , -- InitialPostingDate\r\n                                            1 , --\tAuthenticatedUserID,\r\n                                            @Notes ,\r\n                                            'Y' , -- DerivedFromSpannedBill\r\n                                            @BillingPeriodRevision ,  -- SpannedBillingPeriodRevision\r\n                                            @FirstPeriodCanceled ,  -- SpannedFirstPeriodCanceled\r\n                                            @CCF ,  -- SpannedCCF\r\n                                            @ThermFactor ,  -- SpannedThermFactor\r\n                                            @Therms ,  -- SpannedTherms\r\n                                            @ApplyMonthlyPercentage ,  -- SpannedApplyMonthlyPercentage\r\n                                            @TotalGasSpannedBilledPercentage ,  -- SpannedTotalGasSpannedBilledPercentage\r\n                                            --CASE WHEN @ReadingCode < 15 THEN 'EST' ELSE 'ACT' END , -- EstimatedOrActualBilling\r\n                                            dbo.CalculateEstimatedOrActual(@ReadingCode,9)\r\n\t\t\t\t\t\t\t\t\t\t\t,FacilityName ,\r\n                                            ServiceAddress\r\n                                    FROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n                                    WHERE   ( UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid ) \r\n\t\t\t--\r\n\t\t\t--\tSet up for the next the Revised Billing Period row.\r\n\t\t\t--\r\n                            SET @SumAverageCCF = @SumAverageCCF + @CCFAverage \t  \r\n                            SET @idx = @idx + 1\r\n\t\t\t--\r\n\t\t\t--\tCalculate the next the Revised Billing Period row.\r\n                            SELECT  @CalculatedBillingPeriodRevision = [dbo].[CalculateNextBillingPeriod](@CalculatedBillingPeriodRevision,\r\n                                                              @BillingCycle)\r\n\t\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n                            SELECT  @CalculatedFromDate = [dbo].[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision,\r\n                                                              @TariffCode,\r\n                                                              @ConEdUtilityCode)\r\n\t\t\t--\r\n                            SELECT  @CalculatedMeterFromReading = @CalculatedMeterToReading \r\n\t\t\t-- Cast(@CalculatedMeterFromReading as dbo.MeterReadingNumber)\r\n\t\t\t--\tProcess the next Revised Billing Period row\r\n\t\t\t--\r\n                        END\r\n\t--\r\n\t--\tFinish up the last period's processing\r\n\t--\r\n\t--\tUse the (Nth -1) periods @CalculatedToDate as the \"FromDate\" and the acutal \"ToDate\" from the spanned record as the \"ToDate\"\r\n\t--\r\n                    SELECT  @CalculatedFromDate = @CalculatedToDate\r\n                    SELECT  @CalculatedToDate = @ToDate\r\n\t--\r\n\t--\tUse the (Nth -1) periods Calculated Meter From Reading as the \"MeterFromReading\" and the acutal \"MeterToReading\" from the spanned record as the \"MeterToReading\"\r\n\t--\r\n                    SELECT  @CalculatedMeterFromReading = @CalculatedMeterToReading \r\n                    SELECT  @CalculatedMeterToReading = CAST(@MeterToReading AS INT)\r\n\t--\r\n\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\t--\r\n                    SELECT  @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled](@CalculatedBillingPeriodRevision,\r\n                                                              @TotalGasSpannedBilledPercentage)\r\n\t--\r\n\t--\tDerive the net changes to avoid rounding errors\r\n\t--\r\n--\tset @BilledAmountMonthlyLastPeriod = @BilledAmount - @BilledAmountMonthlySum\r\n                    SET @ThermsMonthlyLastPeriod = @Therms - @ThermsMonthlySum\r\n                    SET @CCFMonthlyLastPeriod = @CCF - @CCFMonthlySum\r\n\t--\r\n\t--\tprint @AccountNumber+' '+@BillingPeriodRevision+' '+@FromDate+' '+@ToDate\r\n\t--\r\n\t--\r\n\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t--\tIt will note in EC3 that the transaction was derived.\r\n\t--\r\n                    SELECT  @Notes = 'CalcTherm '\r\n                            + CAST(@Therms AS VARCHAR(10)) + ' = '\r\n                            + CAST(@ThermFactor AS VARCHAR(6)) + ' * '\r\n                            + CAST(@CCF AS VARCHAR(10)) + ' for '\r\n                            + CAST(@DeltaNumberOfPeriods AS VARCHAR(6))\r\n                            + ' periods, First: ' + @FirstPeriodCanceled\r\n                            + ' ( ' + @MeterFromReading + ') Last: '\r\n                            + @BillingPeriodRevision + ' ( ' + @MeterToReading\r\n                            + '). ' + ' period: '\r\n                            + @CalculatedBillingPeriodRevision + ' Month %: '\r\n                            + CAST(@ApplyMonthlyPercentage AS VARCHAR(10))\r\n                            + ' - Total %: '\r\n                            + CAST(@TotalGasSpannedBilledPercentage AS VARCHAR(10))\r\n\t--\r\n\t--\tINSERT the data into the table \"ConEd.UploadConEdisonMeterSummary\"\r\n\t--\r\n                    INSERT  INTO ConEd.UploadConEdisonMeterSummary\r\n                            ( AccountUtilityCompanySeqid ,\r\n                              OriginalAccountNumber ,\r\n                              OriginalMeterNumber ,\r\n                              NumberOfTransactions ,\r\n                              NumberOfRebillTransactions ,\r\n                              NumberOfCancelTransactions ,\r\n                              BillingPeriod ,\r\n                              BillingPeriodRevision ,\r\n                              FirstCancelPeriod ,\r\n                              BillingAction ,\r\n                              InitialCancelFromDate ,\r\n                              CurrentBillingToDate ,\r\n                              GasRateCode ,\r\n                              FromDate ,\r\n                              ToDate ,\r\n                              MeterFromReading ,\r\n                              MeterToReading ,\r\n                              Ccf ,\r\n                              Therms ,\r\n                              ThermsFactor ,\r\n                              MeterConstant ,\r\n                              TotalBillingDaysRebilled ,\r\n                              NumberOfBillingPeriods ,\r\n                              BillingDays ,\r\n                              BillingDate ,\r\n                              ReadingCode ,\r\n                              NumberOfDials ,\r\n                              MeterType ,\r\n                              ProcessedInTheCurrentPeriod ,\r\n                              ProcessEffectiveDate ,\r\n                              InitialPostingDate ,\r\n                              AuthenticatedUserID ,\r\n                              Notes ,\r\n                              DerivedFromSpannedBill ,\r\n                              SpannedBillingPeriodRevision ,\r\n                              SpannedFirstCanceledBillingPeriod ,\r\n                              SpannedCCF ,\r\n                              SpannedThermFactor ,\r\n                              SpannedTherm ,\r\n                              SpannedMonthlyPercentage ,\r\n                              SpannedTotalPercentage ,\r\n                              EstimatedOrActualBilling ,\r\n                              FacilityName ,\r\n                              ServiceAddress\r\n\t\t                    )\r\n                            SELECT  @ConEdUtilityCode ,\r\n                                    @AccountNumber ,\r\n                                    @OriginalMeterNumber ,\r\n                                    1 ,-- NumberOfTransactions, \r\n                                    1 ,-- NumberOfRebillTransactions,\r\n                                    0 ,-- NumberOfCancelTransactions,\r\n                                    @BillingPeriod ,\r\n                                    @CalculatedBillingPeriodRevision ,\r\n                                    @CalculatedBillingPeriodRevision ,\r\n                                    CASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision\r\n                                         THEN 'O'\r\n                                         ELSE 'A'\r\n                                    END ,-- BillingAction, \r\n                                    @CalculatedFromDate ,\r\n                                    @CalculatedToDate ,\r\n                                    @GasRateCode ,\r\n                                    @CalculatedFromDate ,\r\n                                    @CalculatedToDate ,\r\n                                    CAST(@CalculatedMeterFromReading AS VARCHAR(7)) ,  --dbo.MeterReadingNumber\r\n                                    CAST(@CalculatedMeterToReading AS VARCHAR(7)) ,  --dbo.MeterReadingNumber\r\n                                    @CCFMonthlyLastPeriod ,\r\n                                    @ThermsMonthlyLastPeriod ,\r\n                                    @ThermFactor ,\r\n                                    @MeterConstant ,\r\n                                    [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) ,\r\n                                    1 ,\r\n                                    [dbo].[CalculateNumberOfBillingDays](@CalculatedFromDate,\r\n                                                              @CalculatedToDate) ,\r\n                                    @BillingDate ,\r\n                                    @ReadingCode ,\r\n                                    @NumberOfDials ,\r\n                                    'G' , -- MeterType,\r\n                                    'N' , --ProcessedInTheCurrentPeriod\r\n                                    [dbo].ConvertDateToYYYYMMDD(GETDATE()) , -- ProcessEffectiveDate\r\n                                    GETDATE() , -- InitialPostingDate\r\n                                    1 , --\tAuthenticatedUserID,\r\n                                    @Notes ,\r\n                                    'Y' , -- DerivedFromSpannedBill\r\n                                    @BillingPeriodRevision ,  -- SpannedBillingPeriodRevision\r\n                                    @FirstPeriodCanceled ,  -- SpannedFirstPeriodCanceled\r\n                                    @CCF ,  -- SpannedCCF\r\n                                    @ThermFactor ,  -- SpannedThermFactor\r\n                                    @Therms ,  -- SpannedTherms\r\n                                    @ApplyMonthlyPercentage ,  -- SpannedApplyMonthlyPercentage\r\n                                    @TotalGasSpannedBilledPercentage ,  -- SpannedTotalGasSpannedBilledPercentage\r\n                                    --CASE WHEN @ReadingCode < 15 THEN 'EST' ELSE 'ACT' END  -- EstimatedOrActualBilling\r\n\t\t\t\t\t\t\t\t\tdbo.CalculateEstimatedOrActual(@ReadingCode,9)\r\n                                    ,FacilityName ,\r\n                                    ServiceAddress\r\n                            FROM ConEd.UploadConEdisonMeterTempSummarySpanned\r\n                            WHERE   ( UploadConEdisonMeterTempSummarySpannedSeqid = @UploadConEdisonMeterTempSummarySpannedSeqid ) \r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\n                    FETCH NEXT FROM SpannedGasBillCursor INTO @UploadConEdisonMeterTempSummarySpannedSeqid\r\n                END\r\n\r\n            CLOSE SpannedGasBillCursor;\r\n            DEALLOCATE SpannedGasBillCursor;\r\n\r\n\r\n\r\n        END -- 2 ends\r\nEND;"
        }
      ]
    }
  ]
}