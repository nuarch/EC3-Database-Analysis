{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "DEMDashboard_UsageByBillingPeriod",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "DEMDashboard_UsageByBillingPeriod",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to generate a report on energy usage and related metrics by billing period. It retrieves data from several tables, performs calculations to determine changes in energy usage and CO2 emissions compared to the previous year, and includes degree day data for heating and cooling. The procedure is structured to provide insights into energy consumption patterns, billing amounts, and environmental impact over time."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is considered medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple table joins, including both inner and left joins."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It performs several calculations and transformations on the data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses subqueries and cross apply operations to enrich the dataset with additional metrics."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It handles potential null values and performs conditional logic for calculations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates based on the data available in the referenced tables and the latest billing period determined within the procedure."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Set Transaction Isolation Level:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The procedure sets the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", allowing it to read uncommitted changes from other transactions, which can improve performance but may lead to dirty reads."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Latest Billing Period:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " It calculates the latest billing period by selecting the maximum "
                },
                {
                  "type": "text",
                  "text": "BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " from the "
                },
                {
                  "type": "text",
                  "text": "Published.TemporalAccountLevelSummaryByCityWide",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Main Query Execution:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Data Selection and Calculation:",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " The main query selects various fields related to fiscal year, billing period, energy usage, CO2 emissions, and billing amounts. It calculates changes in energy usage and CO2 emissions compared to the previous year."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Join Operations:",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "bulletList",
                      "content": [
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Left Join with Previous Year Data:",
                                  "marks": [
                                    {
                                      "type": "strong"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": " It joins with a subquery that aggregates CO2 emissions for the previous year to calculate changes."
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": "listItem",
                          "content": [
                            {
                              "type": "paragraph",
                              "content": [
                                {
                                  "type": "text",
                                  "text": "Inner Join with Current Period Data:",
                                  "marks": [
                                    {
                                      "type": "strong"
                                    }
                                  ]
                                },
                                {
                                  "type": "text",
                                  "text": " It joins with another subquery that aggregates revised commodity and delivery dollars for the current period."
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Cross Apply for Degree Days:",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " It uses a cross apply operation to include heating and cooling degree day data, comparing current and previous year values."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Ordering:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The final result set is ordered by fiscal year and billing period."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Use of `READ UNCOMMITTED`:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " While this can improve performance by reducing locking overhead, it may result in reading uncommitted data, which can lead to inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins and Subqueries:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The use of multiple joins and subqueries can impact performance, especially if the underlying tables are large or not properly indexed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Type Conversions:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " Frequent casting of data types, such as converting strings to dates and decimals, can add overhead."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Aggregation Operations:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The procedure performs several aggregation operations, which can be resource-intensive depending on the size of the data."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dirty Reads:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can lead to dirty reads, where the procedure might read data that is not yet committed, potentially leading to inaccurate results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Null Handling:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " While the procedure uses "
                },
                {
                  "type": "text",
                  "text": "ISNULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to handle null values, there is a risk of division by zero or incorrect calculations if not all scenarios are covered."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Date Conversion:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " The conversion of "
                },
                {
                  "type": "text",
                  "text": "BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to a date by appending '01' assumes a specific format and may fail if the format changes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability:",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " As data volume grows, the complexity of joins and aggregations may lead to performance degradation if not optimized with appropriate indexing and query tuning."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[DEMDashboard_UsageByBillingPeriod]\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @LatestBillingPeriod AS VARCHAR(6);\r\n\t\r\n\tSELECT @LatestBillingPeriod = MAX(BillingPeriod) FROM Published.TemporalAccountLevelSummaryByCityWide;\r\n\r\n\tSELECT * FROM (\r\n\tSELECT\r\n\t\tM.FiscalYear,\r\n\t\tM.BillingPeriod,\r\n\t\tCAST((M.BillingPeriod + '01') AS DATETIME) AS BillingPeriodDate,\r\n\t\tCAST(M.BTU AS DECIMAL) AS EnergyUsage,\r\n\t\tISNULL(CASE WHEN CAST(M.BTU AS DECIMAL) IS NULL OR CAST(M.BTULastYear AS DECIMAL) = 0 THEN 0 ELSE CAST(M.BTU AS DECIMAL)/CAST(M.BTULastYear AS DECIMAL)-1 END, 0) AS EnergyUsageChange,\r\n\t\tCAST(M.BTULastYear AS DECIMAL) AS EnergyUsageLastYear,\r\n\t\tM.BilledAmount,\r\n\t\tM.BilledAmountLastYear,\r\n\t\tM.CO2,\r\n\t\tCASE WHEN PY.CO2 IS NULL OR PY.CO2 = 0 THEN 0 ELSE M.CO2/PY.CO2 - 1 END AS CO2eChange,\r\n\t\tM.DemandUsage,\r\n\t\tM.DemandUsageLastYear,\r\n\t\tISNULL(PY.CO2, 0.0) AS CO2LastYear,\r\n\t\tM.EnergyType,\r\n\t\tD.RevisedCommodityDollars,\r\n\t\tD.RevisedDeliveryDollars,\t\t\r\n\t\tCAST(M.BilledAmount AS DECIMAL)/CAST(M.EnergyUsage AS DECIMAL) AS Rate\r\n\tFROM\r\n\t\tPublished.TemporalAccountLevelSummaryByCityWide AS M\r\n\t\tLEFT JOIN (SELECT\r\n\t\t\t\tSUM(I.CO2) AS CO2,\r\n\t\t\t\tI.FiscalYear,\r\n\t\t\t\tI.BillingPeriod,\r\n\t\t\t\tI.EnergyType\r\n\t\t\tFROM\r\n\t\t\t\tPublished.TemporalAccountLevelSummaryByCityWide AS I\r\n\t\t\tWHERE\r\n\t\t\t\tI.EffectiveStartPeriod <= @LatestBillingPeriod AND I.EffectiveEndPeriod > @LatestBillingPeriod\r\n\t\t\tGROUP BY\r\n\t\t\t\tI.FiscalYear,\r\n\t\t\t\tI.BillingPeriod,\r\n\t\t\t\tI.EnergyType) AS PY\r\n\t\t\tON PY.EnergyType = M.EnergyType AND PY.BillingPeriod = M.BillingPeriod - 100\r\n\t\tINNER JOIN (SELECT\r\n\t\t\t\tBillingPeriod,\r\n\t\t\t\tFiscalYear,\r\n\t\t\t\tEnergyType,\r\n\t\t\t\tSUM(RevisedCommodityDollars) AS RevisedCommodityDollars,\r\n\t\t\t\tSUM(RevisedDeliveryDollars) AS RevisedDeliveryDollars\r\n\t\t\tFROM\r\n\t\t\t\tPublished.TemporalAccountLevelRawDataForCurrentPeriod\r\n\t\t\tWHERE\r\n\t\t\t\tEffectiveStartPeriod <= @LatestBillingPeriod\r\n\t\t\t\tAND EffectiveEndPeriod > @LatestBillingPeriod\r\n\t\t\tGROUP BY\r\n\t\t\t\tBillingPeriod,\r\n\t\t\t\tFiscalYear,\r\n\t\t\t\tEnergyType) AS D\r\n\t\t\tON M.FiscalYear = D.FiscalYear AND M.BillingPeriod = D.BillingPeriod AND M.EnergyType = D.EnergyType\r\n\tWHERE\r\n\t\tM.EffectiveStartPeriod <= @LatestBillingPeriod\r\n\t\tAND M.EffectiveEndPeriod > @LatestBillingPeriod) AS L\r\n\tCROSS APPLY ( \r\n\tSELECT\r\n\t\tIR.HDD,\r\n\t\tIR.HDDLastYear,\r\n\t\tIR.CDD,\r\n\t\tIR.CDDLastYear\r\n\tFROM (SELECT\r\n\t\t\tD.BillingPeriod,\r\n\t\t\tSUM(D.BaseHeatingDegreeDays) AS HDD,\r\n\t\t\tISNULL((SELECT\r\n\t\t\t\t\tSUM(ID.BaseHeatingDegreeDays)\r\n\t\t\t\tFROM\r\n\t\t\t\t\tFactors.DegreeDayBase AS ID\r\n\t\t\t\t\tINNER JOIN Factors.DegreeDayNormalized30YearAverage AS IDN\r\n\t\t\t\t\t\tON ID.MM = IDN.MM\r\n\t\t\t\tWHERE\r\n\t\t\t\tID.BillingPeriod = D.BillingPeriod - 100), 0) AS HDDLastYear,\r\n\t\t\tSUM(D.BaseCoolingDegreeDays) AS CDD,\r\n\t\t\tISNULL((SELECT\r\n\t\t\t\t\tSUM(ID.BaseCoolingDegreeDays)\r\n\t\t\t\tFROM\r\n\t\t\t\t\tFactors.DegreeDayBase AS ID\r\n\t\t\t\t\tINNER JOIN Factors.DegreeDayNormalized30YearAverage AS IDN\r\n\t\t\t\t\t\tON ID.MM = IDN.MM\r\n\t\t\t\tWHERE\r\n\t\t\t\t\tID.BillingPeriod = D.BillingPeriod - 100), 0) AS CDDLastYear\r\n\t\tFROM\r\n\t\t\tFactors.DegreeDayBase AS D\r\n\t\t\tINNER JOIN Factors.DegreeDayNormalized30YearAverage AS N\r\n\t\t\t\tON D.MM = N.MM\r\n\t\tGROUP BY\r\n\t\t\tD.BillingPeriod) AS IR\r\n\tWHERE\r\n\t\tL.BillingPeriod = IR.BillingPeriod) AS A\r\n\tORDER BY\r\n\t\tL.FiscalYear,\r\n\t\tL.BillingPeriod;\r\nEND;"
        }
      ]
    }
  ]
}