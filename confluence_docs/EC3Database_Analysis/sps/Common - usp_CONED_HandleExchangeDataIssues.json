{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Common",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CONED_HandleExchangeDataIssues",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CONED_HandleExchangeDataIssues",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to handle data discrepancies between billing files and billing tables, specifically for Con Edison (CONED) data. It aims to identify and insert missing accounts and meters into a common exchange data table. The procedure includes commented-out sections that suggest additional operations, such as copying data and updating records, which are not currently active. The procedure involves selecting the current billing period, inserting new records into the "
        },
        {
          "type": "text",
          "text": "Common.ExchangeData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table, and updating or deleting specific records based on certain conditions."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level is considered medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure involves multiple SQL operations, including "
                },
                {
                  "type": "text",
                  "text": "SELECT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "INSERT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "UPDATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "DELETE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses conditional logic and joins to manage data from different tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The presence of commented-out code suggests that the procedure is part of a larger workflow, which may add complexity when fully integrated."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure does not take any input parameters. It operates based on hardcoded values and data retrieved from the database tables."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring a variable "
                },
                {
                  "type": "text",
                  "text": "@CurrentBillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to store the current billing period. It retrieves this value from the "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table where "
                },
                {
                  "type": "text",
                  "text": "CurrentProcessingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is 'Y'."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure contains commented-out code for copying exchange data and updating specific records, indicating that these actions are part of the intended workflow but are currently inactive."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It includes an "
                        },
                        {
                          "type": "text",
                          "text": "INSERT",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " operation to add new records to the "
                        },
                        {
                          "type": "text",
                          "text": "Common.ExchangeData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table. This operation is performed twice: once for accounts and once for meters. The data is sourced from "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonAccount",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "ConEd.UploadConEdisonMeter",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " tables, respectively."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The "
                        },
                        {
                          "type": "text",
                          "text": "INSERT",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " operations use "
                        },
                        {
                          "type": "text",
                          "text": "MIN",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " functions to aggregate data and ensure unique entries, with hardcoded values for certain fields."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "A "
                        },
                        {
                          "type": "text",
                          "text": "DELETE",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " operation removes a specific record from the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.Account",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table based on the "
                        },
                        {
                          "type": "text",
                          "text": "CurrentAccountNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "An "
                        },
                        {
                          "type": "text",
                          "text": "UPDATE",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " operation modifies records in the "
                        },
                        {
                          "type": "text",
                          "text": "Common.ExchangeData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table, setting the "
                        },
                        {
                          "type": "text",
                          "text": "OriginalAccountNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "ExchangeCode",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", and "
                        },
                        {
                          "type": "text",
                          "text": "IsProcessed",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " fields for a specific account."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses "
                },
                {
                  "type": "text",
                  "text": "WHERE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " clauses to filter data based on specific account numbers and conditions, ensuring that only relevant records are processed."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Index Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's performance can be significantly affected by the presence or absence of indexes on the tables involved, especially for the "
                },
                {
                  "type": "text",
                  "text": "JOIN",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "WHERE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Volume",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "MIN",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " functions and "
                },
                {
                  "type": "text",
                  "text": "GROUP BY",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " clauses suggests that the procedure may process large datasets, which could impact performance if not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not include transaction handling, which could lead to concurrency issues if multiple instances are executed simultaneously."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of hardcoded account numbers and other values limits the procedure's flexibility and may require frequent updates to accommodate changes in business requirements."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Commented-Out Code",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The presence of commented-out sections indicates incomplete functionality, which could lead to confusion or errors if not properly documented and maintained."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure performs "
                },
                {
                  "type": "text",
                  "text": "DELETE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "UPDATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " operations without transaction management, posing a risk to data integrity in case of failures or interruptions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Null Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Several fields are set to "
                },
                {
                  "type": "text",
                  "text": "NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " without validation, which could lead to issues if these fields are required or used in subsequent processes."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Overall, the procedure is a critical component of data management for CONED billing processes, but it requires careful optimization and maintenance to ensure reliability and performance."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Common].[usp_CONED_HandleExchangeDataIssues]\nAS\r\nBEGIN\r\n\tDECLARE @CurrentBillingPeriod AS VARCHAR(6);\r\n\r\n\tSELECT @CurrentBillingPeriod = BillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\r\n\t-- This process compare billing file and billing table and adds missing accounts and meters as exchange data record.\r\n\t-- execute this after reviewing the missing accounts and meters.\r\n\t--EXECUTE [Common].CopyConEdExchangeDataToCommon;\r\n\r\n\t--UPDATE Common.ExchangeData SET Exclude ='Y' WHERE CurrentAccountNumber ='641587984840000' AND BillingPeriod ='202402' AND BillingPeriod = @CurrentBillingPeriod;\r\n\t\r\n\t/*\r\n\tUPDATE ed \r\n\tSET ED.CurrentMeterNumber = ED.OriginalMeterNumber\r\n\tFROM Common.ExchangeData AS ED WHERE ED.CurrentMeterNumber ='       ' AND ED.ExchangeCode = 27\r\n\tAND ED.BillingPeriod='202401'\r\n\r\n\tINSERT INTO Common.ExchangeData\r\n\t\t(UtilityCompanySeqid,\r\n\t\tAccountBillingGroupSeqid,\r\n\t\tBillingPeriod,\r\n\t\tApprovedForCreation,\r\n\t\tCurrentAccountNumber,\r\n\t\tOriginalAccountNumber,\r\n\t\tCurrentMeterNumber,\r\n\t\tOriginalMeterNumber,\r\n\t\tAssociatedDemandMeter,\r\n\t\tExchangeCode,\r\n\t\tAccountEffectiveTurnOn,\r\n\t\tAccountEffectiveTurnOff,\r\n\t\tSalesType,\r\n\t\tDeliveryServiceClass,\r\n\t\tDeliveryServiceClassEffectiveDate,\r\n\t\tBillingCycle,\r\n\t\tExcessDistributionAccount,\r\n\t\tTODAccount,\r\n\t\tMunicipalCode,\r\n\t\tTensionCode,\r\n\t\tTripNumber,\r\n\t\tAccountName,\r\n\t\tAccountAddress,\r\n\t\tBorough,\r\n\t\tMeterStatus,\r\n\t\tMeterEffectiveTurnOnDate,\r\n\t\tMeterEffectiveTurnOffDate,\r\n\t\tMeterType,\r\n\t\tMeterNumberofDials,\r\n\t\tMeterConstant,\r\n\t\tMeterTension,\r\n\t\tManualDataEntry,\r\n\t\tEnergyDeliveryType,\r\n\t\tEnergyDeliverySubTypeId,\r\n\t\tAccountServiceCode,\r\n\t\tTransactionEffectiveDate,\r\n\t\tContractNumber,\r\n\t\tAMRIndicator,\r\n\t\tauthenticatedUserID,\r\n\t\tDateAdded,\r\n\t\tLastUpdate,\r\n\t\tActivityTime,\r\n\t\tPreviousServiceCassification)\r\n\tSELECT DISTINCT MIN(9) AS UtilityCompanyId,\r\n\t\tMIN(2) AS AccountBillingGroup,\r\n\t\tMIN(ua.BillingPeriod) AS BillingPeriod,\r\n\t\tMIN('Y') AS ApprovedForCreation,\r\n\t\tua.AccountNumber,\r\n\t\tNULL AS OriginalAccountNumber,\r\n\t\tNULL AS meternumber,\r\n\t\tNULL AS OriginalMeterNumber,\r\n\t\tNULL AS AssociatedDemandMeter, -- not used in CONED process\r\n\t\t'47' AS ExchangeCode, -- this is to insert for account\r\n\t\tMIN(ua.FromDate) AS AccountEffectiveTurnOn,\r\n\t\tMIN('99991231') AS AccountEffectiveTurnOff,\r\n\t\tMIN('BT') AS SalesType,\r\n\t\tMIN(ua.TariffCode) AS DeliveryServiceClass,\r\n\t\tMIN(ua.FromDate) AS DeliveryServiceClassEffectiveDate,\r\n\t\tMIN('M') AS BillingCycle,\r\n\t\tNULL AS ExcessDistributionAccount, --confirm\r\n\t\tMIN('N') AS TODAccount,\r\n\t\tNULL AS MunicipalCode, -- not used in CONED process\r\n\t\tNULL AS TensionCode, -- not used in CONED process\r\n\t\tMIN('18') AS TripNumber,\r\n\t\tMIN(CASE WHEN ua.FacilityName IS NULL THEN 'Missing Facility Name' ELSE ua.FacilityName END) AS AccountName,\r\n\t\tMIN(CASE WHEN ua.ServiceAddress IS NULL THEN 'Missing Service Address' ELSE ua.ServiceAddress END) AS AccountAddress,\r\n\t\tMIN(1) AS Borough,\r\n\t\t'AC' AS MeterStatus,\r\n\t\tMIN(ua.FromDate) AS MeterEffectiveTurnOnDate,\r\n\t\tMIN('99991231') AS MeterEffectiveTurnOffDate,\r\n\t\tMIN('G') AS MeterType,\r\n\t\tMIN(um.Dials) AS MeterNumberofDials,\r\n\t\tMIN(um.MeterConstant) AS MeterConstant,\r\n\t\tNULL AS MeterTension, -- confirm if NULL is valid\r\n\t\tMIN('N') AS ManualDataEntry,\r\n\t\tMIN(5) AS EnergyDeliveryType,\r\n\t\tCommon.GetDefaultEnergySubType(5),\r\n\t\tNULL AS AccountServiceCode,\r\n\t\tNULL AS TransactionEffectiveDate,\r\n\t\tNULL AS ContractNumber,\r\n\t\tNULL AS AMRIndicator,\r\n\t\t1 AS authenticatedUserID,\r\n\t\tGETDATE() AS DateAdded,\r\n\t\tGETDATE() AS LastUpdate,\r\n\t\tNULL AS ActivityTime,\r\n\t\tNULL AS PreviousServiceCassification\r\n\tFROM ConEd.UploadConEdisonAccount AS ua\r\n\t\tINNER JOIN ConEd.UploadConEdisonMeter AS um ON um.AccountNumber = ua.AccountNumber\r\n\t--\tFULL JOIN Billing.Account AS a ON a.CurrentAccountNumber = ua.AccountNumber \r\n\t--WHERE \ta.AccountSeqid IS NULL\tAND \r\n\tWHERE ua.AccountNumber ='641587984840000'\r\n\tGROUP BY ua.AccountNumber, um.MeterNumber;\r\n\r\n\tDELETE FROM Billing.Account WHERE CurrentAccountNumber ='067610300030000'\r\n\tUPDATE ED SET ED.OriginalAccountNumber ='490008089227003', ED.ExchangeCode ='AX', ED.IsProcessed ='N' FROM Common.ExchangeData AS ED WHERE ED.CurrentAccountNumber ='067610300030000'\r\n\r\n\t-- inserting meter exchanges\r\n\tINSERT INTO Common.ExchangeData\r\n\t\t(UtilityCompanySeqid,\r\n\t\tAccountBillingGroupSeqid,\r\n\t\tBillingPeriod,\r\n\t\tApprovedForCreation,\r\n\t\tCurrentAccountNumber,\r\n\t\tOriginalAccountNumber,\r\n\t\tCurrentMeterNumber,\r\n\t\tOriginalMeterNumber,\r\n\t\tAssociatedDemandMeter,\r\n\t\tExchangeCode,\r\n\t\tAccountEffectiveTurnOn,\r\n\t\tAccountEffectiveTurnOff,\r\n\t\tSalesType,\r\n\t\tDeliveryServiceClass,\r\n\t\tDeliveryServiceClassEffectiveDate,\r\n\t\tBillingCycle,\r\n\t\tExcessDistributionAccount,\r\n\t\tTODAccount,\r\n\t\tMunicipalCode,\r\n\t\tTensionCode,\r\n\t\tTripNumber,\r\n\t\tAccountName,\r\n\t\tAccountAddress,\r\n\t\tBorough,\r\n\t\tMeterStatus,\r\n\t\tMeterEffectiveTurnOnDate,\r\n\t\tMeterEffectiveTurnOffDate,\r\n\t\tMeterType,\r\n\t\tMeterNumberofDials,\r\n\t\tMeterConstant,\r\n\t\tMeterTension,\r\n\t\tManualDataEntry,\r\n\t\tEnergyDeliveryType,\r\n\t\tEnergyDeliverySubTypeId,\r\n\t\tAccountServiceCode,\r\n\t\tTransactionEffectiveDate,\r\n\t\tContractNumber,\r\n\t\tAMRIndicator,\r\n\t\tauthenticatedUserID,\r\n\t\tDateAdded,\r\n\t\tLastUpdate,\r\n\t\tActivityTime,\r\n\t\tPreviousServiceCassification)\r\n\tSELECT DISTINCT MIN(9) AS UtilityCompanyId,\r\n\t\tMIN(2) AS AccountBillingGroup,\r\n\t\tMIN(um.BillingPeriod) AS BillingPeriod,\r\n\t\tMIN('Y') AS ApprovedForCreation,\r\n\t\tum.AccountNumber,\r\n\t\tNULL AS OriginalAccountNumber,\r\n\t\tum.MeterNumber,\r\n\t\tNULL AS OriginalMeterNumber,\r\n\t\tNULL AS AssociatedDemandMeter, -- not used in CONED process\r\n\t\t'46' AS ExchangeCode, -- this is the insert for meter\r\n\t\tMIN(um.FromDate) AS AccountEffectiveTurnOn,\r\n\t\tMIN('99991231') AS AccountEffectiveTurnOff,\r\n\t\tMIN('BT') AS SalesType,\r\n\t\tMIN(ua.TariffCode) AS DeliveryServiceClass,\r\n\t\tMIN(ua.FromDate) AS DeliveryServiceClassEffectiveDate,\r\n\t\tMIN('M') AS BillingCycle,\r\n\t\tNULL AS ExcessDistributionAccount, --confirm\r\n\t\tMIN('N') AS TODAccount,\r\n\t\tNULL AS MunicipalCode, -- not used in CONED process\r\n\t\tNULL AS TensionCode, -- not used in CONED process\r\n\t\tMIN('18') AS TripNumber,\r\n\t\tMIN(CASE WHEN um.FacilityName IS NULL THEN 'Missing Facility Name' ELSE um.FacilityName END) AS AccountName,\r\n\t\tMIN(CASE WHEN um.ServiceAddress IS NULL THEN 'Missing Service Address' ELSE um.ServiceAddress END) AS AccountAddress,\r\n\t\tMIN(1) AS Borough,\r\n\t\t'AC' AS MeterStatus,\r\n\t\tMIN(um.FromDate) AS MeterEffectiveTurnOnDate,\r\n\t\tMIN('99991231') AS MeterEffectiveTurnOffDate,\r\n\t\tMIN('G') AS MeterType,\r\n\t\tMIN(um.Dials) AS MeterNumberofDials,\r\n\t\tMIN(um.MeterConstant) AS MeterConstant,\r\n\t\tNULL AS MeterTension, -- confirm if NULL is valid\r\n\t\tMIN('N') AS ManualDataEntry,\r\n\t\tMIN(5) AS EnergyDeliveryType,\r\n\t\tCommon.GetDefaultEnergySubType(5),\r\n\t\tNULL AS AccountServiceCode,\r\n\t\tNULL AS TransactionEffectiveDate,\r\n\t\tNULL AS ContractNumber,\r\n\t\tNULL AS AMRIndicator,\r\n\t\t1 AS authenticatedUserID,\r\n\t\tGETDATE() AS DateAdded,\r\n\t\tGETDATE() AS LastUpdate,\r\n\t\tNULL AS ActivityTime,\r\n\t\tNULL AS PreviousServiceCassification\r\n\tFROM ConEd.UploadConEdisonMeter AS um\r\n\t\tINNER JOIN ConEd.UploadConEdisonAccount AS ua ON ua.AccountNumber = um.AccountNumber\r\n\t\tLEFT JOIN (SELECT mx.MeterSeqid, mx.CurrentMeterNumber, ax.CurrentAccountNumber\r\n\t\t\tFROM Billing.Meter AS mx\r\n\t\t\t\tINNER JOIN Billing.AccountExchangeMeterTrack AS aemt ON aemt.OriginalMeterSeqid = mx.MeterSeqid\r\n\t\t\t\tINNER JOIN Billing.Account AS ax ON ax.AccountSeqid = aemt.OriginalAccountSeqid\r\n\t\t\tWHERE ax.IsCurrentRecord = 'Y' ) AS met\r\n\t\tON met.CurrentMeterNumber = um.MeterNumber AND met.CurrentAccountNumber = um.AccountNumber\r\n\tWHERE \r\n\t--met.MeterSeqid IS NULL AND \r\n\tum.MeterNumber IN ('6908411', '4501139')\r\n\tGROUP BY um.AccountNumber, um.MeterNumber;\r\n\t*/\r\nEND;"
        }
      ]
    }
  ]
}