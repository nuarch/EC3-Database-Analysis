{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Common",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CopyNYPAExchangeDataToCommon",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "CopyNYPAExchangeDataToCommon",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to transfer data from a staging table ("
        },
        {
          "type": "text",
          "text": "Nypa.UploadNYPAExchangeDataPreload",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ") to a main table ("
        },
        {
          "type": "text",
          "text": "Common.ExchangeData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ") within a SQL Server database. It performs data cleansing and transformation during the insertion process and includes a subsequent update operation to adjust specific records based on certain conditions. The procedure is part of a data integration process, likely used for handling utility exchange data."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level is considered medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure involves both data insertion and update operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes data transformation and cleansing using functions like "
                },
                {
                  "type": "text",
                  "text": "NULLIF",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "LTRIM",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "RTRIM",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "CAST",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses subqueries and joins to perform conditional updates, which adds to the complexity."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This stored procedure does not take any input parameters. It operates on predefined tables and conditions within the database."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by inserting data from "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAExchangeDataPreload",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " into "
                },
                {
                  "type": "text",
                  "text": "Common.ExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". It selects distinct records and performs data cleansing by trimming spaces and replacing empty strings with "
                },
                {
                  "type": "text",
                  "text": "NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". It also sets default values for certain fields, such as "
                },
                {
                  "type": "text",
                  "text": "'Y'",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for "
                },
                {
                  "type": "text",
                  "text": "ApprovedForCreation",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "'N'",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for "
                },
                {
                  "type": "text",
                  "text": "ManualDataEntry",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for "
                },
                {
                  "type": "text",
                  "text": "EnergyDeliveryType",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Transformation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses "
                },
                {
                  "type": "text",
                  "text": "NULLIF",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to handle empty strings and "
                },
                {
                  "type": "text",
                  "text": "CAST",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to convert "
                },
                {
                  "type": "text",
                  "text": "MeterNumberofDials",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to an integer. It also calls a function "
                },
                {
                  "type": "text",
                  "text": "Common.GetDefaultEnergySubType(1)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to set the "
                },
                {
                  "type": "text",
                  "text": "EnergyDeliverySubTypeId",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After insertion, the procedure updates the "
                },
                {
                  "type": "text",
                  "text": "AssociatedDemandMeter",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " field in "
                },
                {
                  "type": "text",
                  "text": "Common.ExchangeData",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for records where "
                },
                {
                  "type": "text",
                  "text": "CurrentMeterNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " starts with '8'. It matches these records with others where "
                },
                {
                  "type": "text",
                  "text": "CurrentMeterNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " starts with '1', based on "
                },
                {
                  "type": "text",
                  "text": "CurrentAccountNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and the last six digits of "
                },
                {
                  "type": "text",
                  "text": "CurrentMeterNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". The update is conditional on the "
                },
                {
                  "type": "text",
                  "text": "UtilityCompanySeqid",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " being 7 and the "
                },
                {
                  "type": "text",
                  "text": "BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " matching the current processing period."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the columns used in joins and where clauses, such as "
                },
                {
                  "type": "text",
                  "text": "CurrentAccountNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "CurrentMeterNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "BillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", are indexed to improve query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the source table contains a large volume of data, consider processing the data in batches to avoid locking and reduce transaction log growth."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "Common.GetDefaultEnergySubType(1)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " within the select statement could impact performance if the function is complex or not optimized."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in "
                },
                {
                  "type": "text",
                  "text": "Nypa.UploadNYPAExchangeDataPreload",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is clean and consistent. Any discrepancies could lead to incorrect data being inserted or updated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The update operation could lead to concurrency issues if multiple instances of the procedure are run simultaneously, especially if they affect the same records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks error handling mechanisms, which could result in unhandled exceptions and incomplete transactions in case of errors."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses hardcoded values, such as "
                },
                {
                  "type": "text",
                  "text": "UtilityCompanySeqid = 7",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", which reduces flexibility and could lead to maintenance challenges if business rules change."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Common].[CopyNYPAExchangeDataToCommon]\nAS\r\nBEGIN\r\n\tINSERT INTO Common.ExchangeData\r\n\t\t(UtilityCompanySeqid,\r\n\t\tAccountBillingGroupSeqid,\r\n\t\tBillingPeriod,\r\n\t\tApprovedForCreation,\r\n\t\tCurrentAccountNumber,\r\n\t\tOriginalAccountNumber,\r\n\t\tCurrentMeterNumber,\r\n\t\tOriginalMeterNumber,\r\n\t\tAssociatedDemandMeter,\r\n\t\tExchangeCode,\r\n\t\tAccountEffectiveTurnOn,\r\n\t\tAccountEffectiveTurnOff,\r\n\t\tSalesType,\r\n\t\tDeliveryServiceClass,\r\n\t\tDeliveryServiceClassEffectiveDate,\r\n\t\tBillingCycle,\r\n\t\tExcessDistributionAccount,\r\n\t\tTODAccount,\r\n\t\tMunicipalCode,\r\n\t\tTensionCode,\r\n\t\tTripNumber,\r\n\t\tAccountName,\r\n\t\tAccountAddress,\r\n\t\tBorough,\r\n\t\tMeterStatus,\r\n\t\tMeterEffectiveTurnOnDate,\r\n\t\tMeterEffectiveTurnOffDate,\r\n\t\tMeterType,\r\n\t\tMeterNumberofDials,\r\n\t\tMeterConstant,\r\n\t\tMeterTension,\r\n\t\tManualDataEntry,\r\n\t\tEnergyDeliveryType,\r\n\t\tEnergyDeliverySubTypeId,\r\n\t\tAccountServiceCode,\r\n\t\tTransactionEffectiveDate,\r\n\t\tContractNumber,\r\n\t\tAMRIndicator,\r\n\t\tauthenticatedUserID,\r\n\t\tDateAdded,\r\n\t\tLastUpdate,\r\n\t\tActivityTime,\r\n\t\tPreviousServiceCassification)\r\n\tSELECT DISTINCT UtilityCompanyId\r\n\t\t,AccountBillingGroup\r\n\t\t,BillingPeriod\r\n\t\t,'Y'\r\n\t\t,CurrentAccountNumber\r\n\t\t,OriginalAccountNumber\r\n\t\t,NULLIF(LTRIM(RTRIM(CurrentMeterNumber)), '')\r\n\t\t,OriginalMeterNumber\r\n\t\t,NULLIF(LTRIM(RTRIM(AssociatedDemandMeter)), '')\r\n\t\t,ExchangeCode\r\n\t\t,NULLIF(LTRIM(RTRIM(AccountEffectiveTurnOn)), '')\r\n\t\t,NULLIF(LTRIM(RTRIM(AccountEffectiveTurnOff)), '')\r\n\t\t,SalesType\r\n\t\t,DeliveryServiceClass\r\n\t\t,DeliveryServiceClassEffectiveDate\r\n\t\t,BillingCycle\r\n\t\t,NULLIF(LTRIM(RTRIM(ExcessDistributionAccount)), '')\r\n\t\t,TODAccount\r\n\t\t,MunicipalCode\r\n\t\t,NULLIF(LTRIM(RTRIM(TensionCode)), '')\r\n\t\t,TripNumber\r\n\t\t,NULLIF(LTRIM(RTRIM(AccountName)), '')\r\n\t\t,NULLIF(LTRIM(RTRIM(AccountAddress)), '')\r\n\t\t,Borough\r\n\t\t,MeterStatus\r\n\t\t,NULLIF(LTRIM(RTRIM(MeterEffectiveTurnOnDate)), '')\r\n\t\t,NULLIF(LTRIM(RTRIM(MeterEffectiveTurnOffDate)), '')\r\n\t\t,NULLIF(LTRIM(RTRIM(MeterType)), '')\r\n\t\t,CAST(MeterNumberofDials AS INT)\r\n\t\t,NULLIF(LTRIM(RTRIM(MeterConstant)), '')\r\n\t\t,NULLIF(LTRIM(RTRIM(MeterTension)), '')\r\n\t\t,'N'\r\n\t\t,1\r\n\t\t,Common.GetDefaultEnergySubType(1)\r\n\t\t,AccountServiceCode\r\n\t\t,NULLIF(LTRIM(RTRIM(TransactionEffectiveDate)), '')\r\n\t\t,ContractNumber\r\n\t\t,NULLIF(LTRIM(RTRIM(AMRIndicator)), '')\r\n\t\t,1\r\n\t\t,GETDATE()\r\n\t\t,GETDATE()\r\n\t\t,'00:00:00'\r\n\t\t,NULL\r\n\tFROM Nypa.UploadNYPAExchangeDataPreload;\r\n\t\r\n\t-- this section is added to remove a stop from Legacy processing ([Nypa].[usp_PreProcessValidateExchangeData])\r\n\tUPDATE PhysicalMeter\r\n    SET AssociatedDemandMeter = AssociatedDemandMeter.CurrentMeterNumber\r\n    FROM (SELECT ExchangeDataSeqid\r\n\t\t\t,BillingPeriod\r\n            ,CurrentAccountNumber\r\n            ,OriginalAccountNumber\r\n            ,CurrentMeterNumber\r\n            ,SUBSTRING(CurrentMeterNumber, 1, 1) AS FirstDiget\r\n            ,SUBSTRING(CurrentMeterNumber, 2, 7) AS LastSixDigets\r\n            ,OriginalMeterNumber\r\n            ,ExchangeCode\r\n            ,AccountEffectiveTurnOn\r\n            ,AccountEffectiveTurnOff\r\n            ,DeliveryServiceClassEffectiveDate\r\n            ,MeterEffectiveTurnOnDate\r\n            ,MeterEffectiveTurnOffDate\r\n            ,TransactionEffectiveDate\r\n            ,AssociatedDemandMeter\r\n\t\tFROM Common.ExchangeData\r\n        WHERE SUBSTRING(CurrentMeterNumber, 1, 1) = '8' AND CurrentMeterNumber <> 'TRNSM' AND UtilityCompanySeqid = 7\r\n\t\t\tAND BillingPeriod = (SELECT TOP (1) BillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y' ORDER BY BillingPeriod)\r\n        ) AS PhysicalMeter\r\n\t\tINNER JOIN (SELECT ExchangeDataSeqid\r\n            ,BillingPeriod\r\n            ,CurrentAccountNumber\r\n            ,OriginalAccountNumber\r\n            ,CurrentMeterNumber\r\n            ,SUBSTRING(CurrentMeterNumber, 1, 1) AS FirstDiget\r\n            ,SUBSTRING(CurrentMeterNumber, 2, 7) AS LastSixDigets\r\n            ,OriginalMeterNumber\r\n            ,ExchangeCode\r\n            ,AccountEffectiveTurnOn\r\n            ,AccountEffectiveTurnOff\r\n            ,DeliveryServiceClassEffectiveDate\r\n            ,MeterEffectiveTurnOnDate\r\n            ,MeterEffectiveTurnOffDate\r\n            ,TransactionEffectiveDate\r\n            ,AssociatedDemandMeter\r\n        FROM Common.ExchangeData\r\n        WHERE SUBSTRING(CurrentMeterNumber, 1, 1) = '1' AND CurrentMeterNumber <> 'TRNSM' AND UtilityCompanySeqid = 7\r\n\t\t\tAND BillingPeriod = (SELECT TOP (1) BillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y' ORDER BY BillingPeriod)\r\n        ) AS AssociatedDemandMeter ON PhysicalMeter.CurrentAccountNumber = AssociatedDemandMeter.CurrentAccountNumber\r\n            AND PhysicalMeter.LastSixDigets = AssociatedDemandMeter.LastSixDigets;\r\nEND;"
        }
      ]
    }
  ]
}