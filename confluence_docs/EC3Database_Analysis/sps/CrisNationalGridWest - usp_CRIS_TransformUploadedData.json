{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CrisNationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CRIS_TransformUploadedData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CRIS_TransformUploadedData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and transform data related to utility billing and meter reading for the "
        },
        {
          "type": "text",
          "text": "CrisNationalGridWest",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema. It performs a series of operations to update, insert, and truncate data across multiple tables, effectively transforming uploaded data into a structured format suitable for further processing or reporting. The procedure handles data related to account billing details, billing summaries, exchange details, meter read details, and payment details."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple operations across several tables, including updates, inserts, and truncations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses conditional logic and function calls to determine values for certain fields."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It processes a significant amount of data, which can impact performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves data type casting and transformation, which adds to the complexity."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is intended to capture the ID of the user who is authenticated and executing the procedure. It is used in some insert operations to track who added or updated the data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This output parameter is used to indicate the status of the procedure execution. It is set to "
                },
                {
                  "type": "text",
                  "text": "0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " at the end of the procedure to signify successful execution."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure begins by updating the "
                        },
                        {
                          "type": "text",
                          "text": "BillingPeriodRevision",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " in the "
                        },
                        {
                          "type": "text",
                          "text": "UploadAccountBillingDetailPreload",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to ensure it does not exceed the "
                        },
                        {
                          "type": "text",
                          "text": "BillingPeriod",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncate and Insert Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure truncates the "
                        },
                        {
                          "type": "text",
                          "text": "UploadAccountBillingDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table and inserts transformed data from "
                        },
                        {
                          "type": "text",
                          "text": "UploadAccountBillingDetailPreload",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ". This includes casting data types and calculating fields like "
                        },
                        {
                          "type": "text",
                          "text": "CalculatedBillingPeriodRevision",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "FirstBillingPeriodCanceled",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " using custom functions."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Similar truncate and insert operations are performed for "
                        },
                        {
                          "type": "text",
                          "text": "UploadBillingSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "UploadExchangeDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterReadDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", and "
                        },
                        {
                          "type": "text",
                          "text": "UploadPaymentDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " tables, each time transforming and inserting data from their respective preload tables."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure uses conditional logic to determine values for fields such as "
                        },
                        {
                          "type": "text",
                          "text": "IsSpannedBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "BillingTransactionCode",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", and "
                        },
                        {
                          "type": "text",
                          "text": "MeterCorrectorID",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It calls custom functions like "
                        },
                        {
                          "type": "text",
                          "text": "DetermineBillingPeriodRevisionByToDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "DetermineFirstPeriodCanceledByAccountElseFromDate",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to compute specific values."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output and Status",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure prints the row count of affected rows after each major operation."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It sets the "
                        },
                        {
                          "type": "text",
                          "text": "@StatusCode",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to "
                        },
                        {
                          "type": "text",
                          "text": "0",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to indicate successful completion."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncation and Bulk Inserts",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating tables and performing bulk inserts can be efficient but may lock tables and impact concurrent access."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Type Casting",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Frequent casting of data types can be computationally expensive, especially with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Custom function calls within the SELECT statements can slow down performance if these functions are not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "TRUNCATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can lead to locking issues, affecting other processes that might need to access the same tables."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Loss",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating tables before inserting new data can lead to data loss if the procedure fails after truncation and before the insert operation completes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency and Locking",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "TRUNCATE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and bulk operations can cause locking issues, potentially impacting other processes accessing the same tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks error handling mechanisms, which means any failure during execution could leave the database in an inconsistent state."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of this procedure may degrade due to the complexity and volume of operations performed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses an authenticated user ID, but it does not include any checks or validations to ensure the user has the necessary permissions to execute these operations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [CrisNationalGridWest].[usp_CRIS_TransformUploadedData]\n(\r\n\t@AuthenticatedUserID AS INT\r\n\t,@StatusCode AS INT  OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\t--**************************************************************************************\r\n\t--* AUTHOR:       Peter Heller (PAH)\r\n\t--* Created On:   10/17/2006\r\n\t--**************************************************************************************\r\n\t--* Date         Tech Description of Change\r\n\t--* ---------- ----  -------------------------------------------------------------\r\n\t--* 11/24/2009 PAH  First Version\r\n\t--* 11/29/2010 MOH\tUpdate: added the MeterCorrectorID\r\n\t--* 11/30/2010 MOH\tUpdate: added logic to null MeterCorrectorID if it is blank string\r\n\t--* 01/06/2011 PAH\tUpdate: OBD Bill Type Converted to current period bill with no spans\r\n\t--*\t\t\t\t\tand the from and to dates are equal to the bill render date\r\n\t--***************************************************************************************\r\n\r\n\t-- WE SHOULD NOT BE GETTING BILLINGPERIOD REVISION IN FUTURE BILLINGPERIOD\r\n\tUPDATE CrisNationalGridWest.UploadAccountBillingDetailPreload\r\n\tSET BillingPeriodRevision = BillingPeriod\r\n\tWHERE BillingPeriodRevision > BillingPeriod;\r\n\r\n\tTRUNCATE TABLE CrisNationalGridWest.UploadAccountBillingDetail;\r\n\r\n\tINSERT INTO CrisNationalGridWest.UploadAccountBillingDetail\r\n\t\t(UtilityCompanySeqid, AccountInvoiceBillingGroup, BillingPeriod, BillingPeriodRevision, AccountNumber, MeterReadWorkDay, \r\n\t\tUtilityServiceAccountName, UtilityServiceAddress, Borough, Zipcode, State, ActivityCode, ActivityDate, ActivityTime, ActivityDateTime,TransactionCode, \r\n\t\tSpecialLedgerAccountNUmber, GasRateCode, BillFrequency, EstimatedOrActualBillingCode, GasChargeAmount, BillingFromDate, BillingToDate, \r\n\t\tBillRenderDate, BillingDays, BilledCCF, ThermFactor, BilledTherms, NumberOfMeters, BillType, CommodityChargeAmount, DeliveryChargeAmount, \r\n\t\tMTACommodityTax, MTADeliveryTax, SalesTax, SystemBenefitsCharge, RetailDecouplingMechanismCharge, DeliveryRateSurcharge, \r\n\t\tRealTimeNormalizationCharge, LatePaymentCharge, PaperBillCharge, CommodityCostFactor, MTACommodityFactor, MTADeliveryFactor, \r\n\t\tSalesTaxFactor, SystemBenefitChargeFactor, RetailDecouplingMechanismFactor, DeliveryRateSurchargeFactor, RealTimeNormalizationFactor, \r\n\t\tLatePaymentFactor, CurrentAccountBalance, AccountArrears, TerminationBalance, TotalPaymentsPosted, DateLastPayment, \r\n\t\tMiscellaneousChargeAmount, MiscellaneousChargeType, Notes, AuthenticatedUserID, DateAdded, LastUpdate, FireAuditTrigger,\r\n\t\tCalculatedBillingPeriodRevision, FirstBillingPeriodCanceled, IsSpannedBilling, NumberOfBillingPeriod, IsCurrentPeriodExchange\r\n\t\t,ExcludeAndReview, SpecialLedgerWorkDay)\r\n\tSELECT CAST(UtilityCompanyID AS int), CAST(AccountBillingGroup AS int), BillingPeriod, BillingPeriodRevision, AccountNumber+'0000', MeterReadWorkDay, \r\n\t\tUtilityServiceAccountName, UtilityServiceAddress, Borough, Zipcode, State, CAST(ActivityCode AS int), ActivityDate, ActivityTime ,cast([ActivityDate]+' '+[ActivityTime] as datetime),TransactionCode, \r\n\t\tSpecialLedgerAccountNUmber, GasRateCode, BillFrequency, EstimatedOrActualBillingCode, CAST(GasChargeAmount AS money), BillingFromDate, \r\n\t\tBillingToDate, BillRenderDate, CAST(BillingDays AS int), CAST(BilledCCF AS int), CAST(ThermFactor AS numeric(6, 4)), CAST(BilledTherms AS int), \r\n\t\tCAST(NumberOfMeters AS int), BillType, CAST(CommodityChargeAmount AS money), CAST(DeliveryChargeAmount AS money), \r\n\t\tCAST(MTACommodityTax AS money), CAST(MTADeliveryTax AS money), CAST(SalesTax AS money), CAST(SystemBenefitsCharge AS money), \r\n\t\tCAST(RetailDecouplingMechanismCharge AS money), CAST(DeliveryRateSurcharge AS money), CAST(RealTimeNormalizationCharge AS money), \r\n\t\tCAST(LatePaymentCharge AS money), CAST(PaperBillCharge AS money), CAST(CommodityCostFactor AS numeric(7, 5)), \r\n\t\tCAST(MTACommodityFactor AS numeric(7, 5)), CAST(MTADeliveryFactor AS numeric(7, 5)), CAST(SalesTaxFactor AS numeric(7, 5)), \r\n\t\tCAST(SystemBenefitChargeFactor AS numeric(7, 5)), CAST(RetailDecouplingMechanismFactor AS numeric(7, 5)), \r\n\t\tCAST(DeliveryRateSurchargeFactor AS numeric(7, 5)), CAST(RealTimeNormalizationFactor AS numeric(7, 5)), CAST(LatePaymentFactor AS numeric(7, \r\n\t\t5)), CAST(CurrentAccountBalance AS money), CAST(AccountArrears AS money), CAST(TerminationBalance AS money), \r\n\t\tCAST(TotalPaymentsPosted AS money), DateLastPayment, CAST(MiscellaneousChargeAmount AS money), MiscellaneousChargeType,NULL,1,--@AuthenticatedUserID,\r\n\t\tGETDATE(),GETDATE(),'N',\r\n\t\tcase \r\n\t\t\twhen CrisNationalGridWest.DetermineBillingPeriodRevisionByToDate(BillingToDate) > BillingPeriod \r\n\t\t\tthen BillingPeriod \r\n\t\t\telse CrisNationalGridWest.DetermineBillingPeriodRevisionByToDate(BillingToDate)\r\n\t\tend as CalculatedBillingPeriodRevision,\r\n\t\tCASE when CrisNationalGridWest.DetermineFirstPeriodCanceledByAccountElseFromDate(AccountNumber+'0000',3,BillingFromDate) > BillingPeriodRevision \r\n\t\t\t\tthen BillingPeriodRevision \r\n\t\t\t\telse CrisNationalGridWest.DetermineFirstPeriodCanceledByAccountElseFromDate(AccountNumber+'0000',3,BillingFromDate)\r\n\t\tEND AS FirstBillingPeriodCanceled,\r\n\t\t'N' AS IsSpannedBilling, \r\n\t\tNULL AS NumberOfBillingPeriod, \r\n\t\t'N' AS IsCurrentPeriodExchange\r\n\t\t,'N' AS ExcludeAndReview,SpecialLedgerWorkDay\r\n\tFROM CrisNationalGridWest.UploadAccountBillingDetailPreload;\r\n\t\r\n\tPRINT 'CrisNationalGridWest.UploadAccountBillingDetail row count: '+str(@@rowcount);\r\n\r\n\t-- update number of billing period \r\n\tUPDATE CrisNationalGridWest.UploadAccountBillingDetail\r\n\tSET NumberOfBillingPeriod = dbo.CalculateDeltaBillingPeriods(FirstBillingPeriodCanceled, BillingPeriodRevision, 'M'),\r\n\t\tIsSpannedBilling = CASE WHEN FirstBillingPeriodCanceled <> BillingPeriodRevision then 'Y' ELSE 'N' END;\r\n\r\n\t-- update IsSpannedBilling\r\n\tUPDATE CrisNationalGridWest.UploadAccountBillingDetail\r\n\tSET ActivityDateTime = null\r\n\tWHERE ActivityDateTime <> (SELECT MAX(ActivityDateTime) AS maxActivityDateTime\r\n\t\tFROM CrisNationalGridWest.UploadAccountBillingDetail AS b\r\n\t\tWHERE      (CrisNationalGridWest.UploadAccountBillingDetail.AccountNumber = b.AccountNumber));\r\n\r\n\tTRUNCATE TABLE CrisNationalGridWest.UploadBillingSummary;\r\n\r\n\tINSERT INTO CrisNationalGridWest.UploadBillingSummary\r\n\t\t(UtilityCompanySeqid, InvoiceBillingGroup, BillingPeriod, OriginalAdjustment, GasRateCode, TotalBilledAmount, TotalCanceledAmount, \r\n\t\tTotalNetAmount, TotalBilledCCF, TotalCanceledCCF, TotalNetCCF, TotalBilledTherms, TotalCanceledTherms, TotalNetTherms, \r\n\t\tTotalBilledMTACommodityTax, TotalBilledMTADeliveryTax, TotalBilledDeliveryChargeAmount, TotalBilledCommodityChargeAmount, \r\n\t\tTotalBilledSalesTax, TotalBilledSystemBenefitsCharge, TotalBilledRetailDecouplingMechanismCharge, TotalBilledPaperBillCharge, \r\n\t\tTotalCanceledMTACommodityTax, TotalCanceledMTADeliveryTax, TotalCanceledDeliveryChargeAmount, TotalCanceledCommodityChargeAmount, \r\n\t\tTotalCanceledSalesTax, TotalCanceledSystemBenefitsCharge, TotalCanceledRetailDecouplingMechanismCharge, TotalCanceledPaperBillCharge, \r\n\t\tTotalNetMTACommodityTax, TotalNetMTADeliveryTax, TotalNetDeliveryChargeAmount, TotalNetCommodityChargeAmount, TotalNetSalesTax, \r\n\t\tTotalNetSystemBenefitsCharge, TotalNetRetailDecouplingMechanismCharge, TotalNetPaperBillCharge, TotalPaymentsPosted, TotalNetCredits, \r\n\t\tTotalNetCreditsFinalledAccounts, FireAuditTrigger, Notes, AuthenticatedUserID, DateAdded, LastUpdate, TotalDeliveryRateSurcharge, \r\n\t\tTotalRealTimeNormalizationCharge, TotalCanceledDeliveryRateSurcharge, TotalCanceledRealTimeNormalizationCharge, \r\n\t\tTotalNetDeliveryRateSurcharge, TotalNetRealTimeNormalizationCharge)\r\n\tSELECT CAST(UtilityCompanySeqid AS int), CAST(InvoiceBillingGroup AS int), BillingPeriod, OriginalAdjustment, GasRateCode, CAST(TotalBilledAmount AS money), \r\n\t\tCAST(TotalCanceledAmount AS money), CAST(TotalNetAmount AS money), CAST(TotalBilledCCF AS int), CAST(TotalCanceledCCF AS int), \r\n\t\tCAST(TotalNetCCF AS int), CAST(TotalBilledTherms AS int), CAST(TotalCanceledTherms AS int), CAST(TotalNetTherms AS int), \r\n\t\tCAST(TotalBilledMTACommodityTax AS money), CAST(TotalBilledMTADeliveryTax AS money), CAST(TotalBilledDeliveryChargeAmount AS money), \r\n\t\tCAST(TotalBilledCommodityChargeAmount AS money), CAST(TotalBilledSalesTax AS money), CAST(TotalBilledSystemBenefitsCharge AS money), \r\n\t\tCAST(TotalBilledRetailDecouplingMechanismCharge AS money), CAST(TotalBilledPaperBillCharge AS money), \r\n\t\tCAST(TotalCanceledMTACommodityTax AS money), CAST(TotalCanceledMTADeliveryTax AS money), \r\n\t\tCAST(TotalCanceledDeliveryChargeAmount AS money), CAST(TotalCanceledCommodityChargeAmount AS money), \r\n\t\tCAST(TotalCanceledSalesTax AS money), CAST(TotalCanceledSystemBenefitsCharge AS money), \r\n\t\tCAST(TotalCanceledRetailDecouplingMechanismCharge AS money), CAST(TotalCanceledPaperBillCharge AS money), \r\n\t\tCAST(TotalNetMTACommodityTax AS money), CAST(TotalNetMTADeliveryTax AS money), CAST(TotalNetDeliveryChargeAmount AS money), \r\n\t\tCAST(TotalNetCommodityChargeAmount AS money), CAST(TotalNetSalesTax AS money), CAST(TotalNetSystemBenefitsCharge AS money), \r\n\t\tCAST(TotalNetRetailDecouplingMechanismCharge AS money), CAST(TotalNetPaperBillCharge AS money), CAST(TotalPaymentsPosted AS money), \r\n\t\tCAST(TotalNetCredits AS money), CAST(TotalNetCreditsFinalledAccounts AS money),'N',NULL,1, --@AuthenticatedUserID,\r\n\t\tGETDATE(),GETDATE(),\r\n\t\tCAST(TotalDeliveryRateSurcharge AS money), CAST(TotalRealTimeNormalizationCharge AS money), \r\n\t\tCAST(TotalCanceledDeliveryRateSurcharge AS money), CAST(TotalCanceledRealTimeNormalizationCharge AS money), \r\n\t\tCAST(TotalNetDeliveryRateSurcharge AS money), CAST(TotalNetRealTimeNormalizationCharge AS money)\r\n\tFROM CrisNationalGridWest.UploadBillingSummaryPreload;\r\n\r\n\tPRINT 'CrisNationalGridWest.UploadBillingSummaryPreload row count: '+str(@@rowcount);\r\n\r\n\tTRUNCATE TABLE CrisNationalGridWest.UploadExchangeDetail;\r\n\r\n\tINSERT INTO CrisNationalGridWest.UploadExchangeDetail\r\n\t\t(UtilityCompanyID, AccountBillingGroup, BillingPeriod, BillingPeriodRevision, AccountNumber, MeterReadWorkDay, UtilityServiceAccountName, \r\n\t\tUtilityServiceAddress, Borough, Zipcode, State, ActivityCode, ActivityDate, ActivityTime, ActivityDateTime,TransactionCode, SpecialLedgerAccountNUmber, \r\n\t\tSpecialLedgerWorkDay, ExchangeCode, MeterNumber, MeterConstant, NumberOfDials, MeterType, GasRateCode, RateCodeChangeDate, MeterStatus, \r\n\t\tOldMeterStatus, MeterEffectiveActionDate, MeterStatusChangeReason, AccountTerminationDate, AccountStatus, OldAccountStatus, OldMeterNumber, \r\n\t\tAccountStartDate, OldGasRateCode, OldMeterReadWorkDay,AuthenticatedUserID)\r\n\tSELECT cast(UtilityCompanyID as int), cast(AccountBillingGroup as int), BillingPeriod, BillingPeriodRevision, AccountNumber, MeterReadWorkDay, UtilityServiceAccountName, \r\n\t\t\tUtilityServiceAddress, Borough, Zipcode, State, ActivityCode, ActivityDate, ActivityTime,cast([ActivityDate]+' '+[ActivityTime] as datetime), TransactionCode, SpecialLedgerAccountNUmber, \r\n\t\t\tSpecialLedgerWorkDay, ExchangeCode, MeterNumber, MeterConstant, NumberOfDials, cast(MeterType as varchar(1)), GasRateCode, RateCodeChangeDate, MeterStatus, \r\n\t\t\tOldMeterStatus, MeterEffectiveActionDate, MeterStatusChangeReason, AccountTerminationDate, AccountStatus, OldAccountStatus, OldMeterNumber, \r\n\t\t\tAccountStartDate, OldGasRateCode, OldMeterReadWorkDay,@AuthenticatedUserID\r\n\tFROM CrisNationalGridWest.UploadExchangeDetailPreload;\r\n\t\r\n\tPRINT 'CrisNationalGridWest.UploadExchangeDetailPreload row count: '+str(@@rowcount);\r\n\r\n\tTRUNCATE TABLE CrisNationalGridWest.UploadMeterReadDetail;\r\n\r\n\tINSERT INTO [CrisNationalGridWest].[UploadMeterReadDetail]\r\n        ([UtilityCompanySeqid]\r\n        ,[AccountInvoiceBillingGroup]\r\n        ,[BillingPeriod]\r\n        ,[BillingPeriodRevision]\r\n        ,[CalculatedBillingPeriodRevision]\r\n        ,[FirstBillingPeriodCanceled]\r\n        ,[AccountNumber]\r\n        ,[MeterReadWorkDay]\r\n        ,[UtilityServiceAccountName]\r\n        ,[UtilityServiceAddress]\r\n        ,[Borough]\r\n        ,[Zipcode]\r\n        ,[State]\r\n        ,[ActivityCode]\r\n        ,[ActivityDate]\r\n        ,[ActivityTime]\r\n        ,[ActivityDateTime]\r\n        ,[TransactionCode]\r\n        ,[SpecialLedgerAccountNumber]\r\n        ,[SpecialLedgerWorkDay]\r\n        ,[MeterNumber]\r\n        ,[MeterConstant]\r\n        ,[NumberOfDials]\r\n        ,[MeterReadType]\r\n        ,[EstimatedOrActual]\r\n        ,[BillingTransactionCode]\r\n        ,[MeterReadStatus]\r\n        ,[MeterReadSource]\r\n        ,[MeterReadReason]\r\n        ,[MeterType]\r\n        ,[MeterReadingFromDate]\r\n        ,[MeterReadingToDate]\r\n        ,[MeterFromReading]\r\n        ,[MeterToReading]\r\n        ,[MeterReadTime]\r\n        ,[MeterCCF]\r\n        ,[Therms]\r\n        ,[ThermsFactor]\r\n        ,[GasRateCode]\r\n        ,[FixFactor]\r\n        ,[PartSupplied]\r\n        ,[HasMeterRolledOver]\r\n        ,MeterCorrectorID\r\n        ,[IsCancel]\r\n        ,[IsProcessed]\r\n        ,[ExcludeAndReview]\r\n        ,[FireAuditTrigger]\r\n        ,[Notes]\r\n        ,[AuthenticatedUserID]\r\n        ,[DateAdded]\r\n        ,[LastUpdate])\r\n\tSELECT CAST(UtilityCompanyId AS INT)\r\n        ,CAST(AccountBillingGroup AS INT)\r\n        ,BillingPeriod\r\n        ,BillingPeriodRevision\r\n        ,NULL\r\n        ,NULL\r\n        ,AccountNumber+'0000'\r\n        ,MeterReadWorkDay\r\n        ,UtilityServiceAccountName\r\n        ,UtilityServiceAddress\r\n        ,Borough\r\n        ,Zipcode\r\n        ,[State]\r\n        ,ActivityCode\r\n        ,ActivityDate\r\n        ,ActivityTime\r\n        ,CAST(ActivityDate+' '+ActivityTime AS DATETIME)\r\n        ,TransactionCode\r\n        ,SpecialLedgerAccountNumber\r\n        ,SpecialLedgerWorkDay\r\n        ,MeterNumber\r\n        ,MeterConstant\r\n        ,NumberOfDials\r\n        ,MeterReadType\r\n        ,EstimatedOrActual\r\n\t    ,CASE WHEN ActivityCode ='0827' AND MeterReadStatus ='X' THEN 'BC' ELSE 'BI' END\r\n\t\t,MeterReadStatus\r\n        ,MeterReadSource\r\n        ,MeterReadReason\r\n        ,MeterType\r\n        ,MeterReadingFromDate\r\n        ,MeterReadingToDate\r\n        ,CAST(MeterFromReading AS int)\r\n        ,CAST(MeterToReading AS int)\r\n        ,MeterReadTime\r\n        ,CAST(MeterCCF AS int)\r\n        ,NULL\r\n        ,NULL\r\n        ,NULL\r\n        ,CAST(FixFactor AS DECIMAL(6,4))\r\n        ,PartSupplied\r\n        ,case when HasMeterRolledOver = 0 then 'N' else 'Y' end\r\n        ,CASE WHEN LTRIM(RTRIM(MeterCorrectorID)) = '' THEN NULL ELSE LTRIM(RTRIM(MeterCorrectorID)) END\r\n        ,'N'\r\n        ,'N'\r\n        ,'N'\r\n        ,'N'\r\n        ,NULL\r\n        ,1\r\n        ,GETDATE()\r\n        ,GETDATE()\r\n\tFROM CrisNationalGridWest.UploadMeterReadDetailPreload;\r\n\t\t\r\n\tPRINT 'CrisNationalGridWest.UploadMeterReadDetailPreload row count: '+str(@@rowcount);\r\n\r\n\tTRUNCATE TABLE CrisNationalGridWest.UploadPaymentDetail;\r\n\r\n\tDECLARE @PaymentBillingPeriod AS VARCHAR(6);\r\n\r\n\tSELECT @PaymentBillingPeriod = PreviousBillingPeriodOneMonth FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\r\n\tINSERT INTO CrisNationalGridWest.UploadPaymentDetail\r\n\t\t(UtilityCompanySeqid, AccountInvoiceBillingGroup, BillingPeriod, BillingPeriodRevision, AccountNumber, MeterReadWorkDay, \r\n\t\tUtilityServiceAccountName, UtilityServiceAddress, Borough, ZipCode, State, ActivityCode, ActivityDate, ActivityTime,ActivityDateTime, TransactionCode, \r\n\t\tSLAccountNUmber, AccountStatus, PaymentAmount, PaymentDate, CurrentAccountBalance, AcountArrears, TerminationBalance, \r\n\t\tOldCurrentAccountBalance, OldAcountArrears, OldTerminationBalance, MiscellaneousCreditAmount, MiscellaneousCreditType,  Notes, \r\n\t\tAuthenticatedUserID, DateAdded, LastUpdate,GasRateCode,PaymentBillingPeriod)\r\n\tSELECT CAST(UtilityCompanyID AS int), CAST(AccountBillingGroup AS int), BillingPeriod, BillingPeriodRevision, AccountNumber+'0000', MeterReadWorkDay, \r\n\t\tUtilityServiceAccountName, UtilityServiceAddress, Borough, Zipcode, State, ActivityCode, ActivityDate, ActivityTime, cast([ActivityDate]+' '+[ActivityTime] as datetime),TransactionCode, \r\n\t\tSLAccountNUmber+SLWorkDay+'00', -- Convert to old EC3 format\r\n\t\tAccountStatus, CAST(PaymentAmount AS money), PaymentDate, CAST(CurrentAccountBalance AS money), \r\n\t\tCAST(AcountArrears AS money), CAST(TerminationBalance AS money), CAST(OldCurrentAccountBalance AS money), CAST(OldAcountArrears AS money), \r\n\t\tCAST(OldTerminationBalance AS money), CAST(MiscellaneousCreditAmount AS money), MiscellaneousCreditType,NULL,@AuthenticatedUserID,\r\n\t\tGETDATE(),GETDATE(),GasRateCode,@PaymentBillingPeriod\r\n\tFROM CrisNationalGridWest.UploadPaymentDetailPreload;\r\n\r\n\tPRINT 'CrisNationalGridWest.UploadMeterReadDetailPreload row count: '+str(@@rowcount);\r\n\r\n\tSET @StatusCode = 0;\r\nEND;"
        }
      ]
    }
  ]
}