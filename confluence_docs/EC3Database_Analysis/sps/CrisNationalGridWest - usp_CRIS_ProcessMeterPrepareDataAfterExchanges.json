{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "CrisNationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_CRIS_ProcessMeterPrepareDataAfterExchanges",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_CRIS_ProcessMeterPrepareDataAfterExchanges",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to prepare and verify meter data after exchanges in a billing system. It updates key fields in the "
        },
        {
          "type": "text",
          "text": "UploadMeterReadDetail",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table, performs data validation checks, and cleans up intermediate tables. The procedure also updates the "
        },
        {
          "type": "text",
          "text": "Meter",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table with corrector IDs where necessary. It includes error handling to manage exceptions during execution."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple update operations, data validation checks, and error handling, which adds to its complexity. It interacts with several tables and uses conditional logic to ensure data integrity, making it moderately complex."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod varchar(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period for which the data preparation is being executed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@authenticatedID int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An identifier for the authenticated user or process executing the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode int OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter used to indicate the success or failure of the procedure execution."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure initializes several local variables for tracking purposes and sets the "
                },
                {
                  "type": "text",
                  "text": "@StatusCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to 0, indicating a successful start."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Update Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the "
                        },
                        {
                          "type": "text",
                          "text": "CurrentMeterNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " in "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterReadDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " using data from related tables."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates "
                        },
                        {
                          "type": "text",
                          "text": "ThermsFactor",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "Therms",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", "
                        },
                        {
                          "type": "text",
                          "text": "GasRateCode",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", and "
                        },
                        {
                          "type": "text",
                          "text": "Notes",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " in "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterReadDetail",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " based on calculations and conditions."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Validation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Checks for records with null or zero "
                        },
                        {
                          "type": "text",
                          "text": "ThermsFactor",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and raises an error if any are found."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Checks for records with no "
                        },
                        {
                          "type": "text",
                          "text": "CurrentMeterNumber",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and raises an error if any are found."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Checks for records missing "
                        },
                        {
                          "type": "text",
                          "text": "CalculatedBillingPeriodRevision",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " or "
                        },
                        {
                          "type": "text",
                          "text": "FirstBillingPeriodCanceled",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and raises an error if any are found."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cleanup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Truncates intermediate tables "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterBillingCRISTransaction",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "UploadMeterBillingAdjustment",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to remove temporary data."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Corrector ID Update",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the "
                        },
                        {
                          "type": "text",
                          "text": "NgridCorrectorMeterId",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " in the "
                        },
                        {
                          "type": "text",
                          "text": "Meter",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table if it is null or different from the "
                        },
                        {
                          "type": "text",
                          "text": "MeterCorrectorID",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Uses a TRY-CATCH block to handle exceptions, setting "
                        },
                        {
                          "type": "text",
                          "text": "@StatusCode",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to 1 and re-raising the error with details."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved in joins and updates have appropriate indexes to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the dataset is large, consider processing in batches to reduce transaction size and lock contention."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "CrisNationalGridWest.DetermineThermFactorByAccountAndPeriods",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " function in updates could be a performance bottleneck if not optimized."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that related data in joined tables is consistent and accurate. Any discrepancies could lead to incorrect updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While errors are caught and re-raised, the procedure does not implement any rollback mechanism, which could leave the database in an inconsistent state if an error occurs mid-execution."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Simultaneous execution of this procedure by multiple users could lead to race conditions or deadlocks, especially during update operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of data grows, the performance of this procedure may degrade if not optimized for larger datasets."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE\tPROCEDURE [CrisNationalGridWest].[usp_CRIS_ProcessMeterPrepareDataAfterExchanges]\n\t@BillingPeriod varchar(6),\r\n\t@authenticatedID int,\r\n\t@StatusCode int  OUTPUT      \r\n   \r\n AS \r\n BEGIN\r\n\t\t--********************************************************************************\r\n\t\t--\tAuthor: MOHAMMED BELARREM\r\n\t\t--\tDescription: populates some key fields before the processing and do last verifications\r\n\t\t--\r\n\t\t--\tLog: \r\n\t\t--\t\t08/03/2010\tMOH\tCreation\r\n\t\t--\t\t08/04/2010\tMOH\tUpdate:\tAdded clean intermediate tables section \r\n\t\t--\t\t08/17/2010\tMOH\tUpdate:\tAdded ExcludeAndReview to the queries\r\n\t\t--\t\t11/05/2010\tMOH Update: Added logic to update the meter table with the corrector ID\r\n\t\t--\t\t11/30/2010\tMOH Update: Added ThermsFactor block\r\n        --      12/27/2018  VY  Update: Modified to use Unique Seq IDs by removing AccountMeterExchangeTrack table in join\r\n\t\t--********************************************************************************\r\n\t \r\n\t\t--********************************************************************************\r\n\t\tDECLARE @AccountNumber acctnum\r\n\t\tDECLARE @MeterNumber MeterNumber\r\n\t\tDECLARE @NumberOfMetersWithNoCurrentMeterNumber INT\r\n\t\tDECLARE @NumberOfMetersWithMissingBPRAndFBPC INT\r\n\t\tDECLARE @ZeroOrNullThermFactor int\r\n\t\t\r\n\r\n\t\tdeclare @crlf varchar(2)\r\n\t\tset @crlf = CHAR(13) + CHAR(10) \r\n\r\n\t\r\n\t\t\t\r\n\t\tbegin try\t\r\n\t\t\r\n\t\t\t\t\r\n\t\t\t\tset @StatusCode  = 0\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t-- update the CurrentMeterNumber in the record\r\n\t\t\t\tUPDATE CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tSET CurrentMeterNumber = Billing.Meter.CurrentMeterNumber \r\n\t\t\t\tFROM Billing.Account\r\n\t\t\t\tINNER JOIN Billing.AccountExchangeMeterTrack ON Billing.Account.AccountSeqid = Billing.AccountExchangeMeterTrack.OriginalAccountSeqid \r\n\t\t\t\tINNER JOIN Billing.Meter ON Billing.AccountExchangeMeterTrack.OriginalMeterSeqid = Billing.Meter.MeterSeqid \r\n\t\t\t\tINNER JOIN CrisNationalGridWest.UploadMeterReadDetail \r\n\t\t\t\t\t\t\tON Billing.Account.OriginalAccountNumber = CrisNationalGridWest.UploadMeterReadDetail.AccountNumber\r\n\t\t\t\t\t\t\tAND Billing.Meter.OriginalMeterNumber = CrisNationalGridWest.UploadMeterReadDetail.MeterNumber\r\n\t\t\t\tWHERE CurrentInvoiceAccountGroup = 3 AND AccountStatus IN  ( 'AC' , '46', '28' ) AND MeterStatus IN ('AC', '46', '45', '27')\r\n\t\t\t\t-- MOH changed the ablove condition to include turned off accoutns and meters \r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t--- MOH 20101130 This block was moved from meterpreparedata since it needed the eschanges to be run first to grab the correct accountnumber\r\n\t\t\t\t\r\n\t\t\t\t-- update the Therms, ThermFactors and GasRateCode\r\n\t\t\t\tUPDATE CrisNationalGridWest.UploadMeterReadDetail  \r\n\t\t\t\tset\t\tThermsFactor\t= CrisNationalGridWest.DetermineThermFactorByAccountAndPeriods(Meter.AccountNumber, Meter.BillingPeriodRevision, Meter.FirstBillingPeriodCanceled, Meter.BillingTransactionCode)\r\n\t\t\t\t\t\t,Therms\t\t\t= CAST ( ROUND( CrisNationalGridWest.DetermineThermFactorByAccountAndPeriods(Meter.AccountNumber, Meter.BillingPeriodRevision, Meter.FirstBillingPeriodCanceled, Meter.BillingTransactionCode) * Meter.MeterCCF, 0 ) AS INT )\r\n\t\t\t\t\t\t,GasRateCode\t= Account.GasRateCode\r\n\t\t\t\t\t\t,Notes\t\t\t= case when ThermFactor = 1.0297 then 'This record might be fudged thermfactor, please review (1.0297)' else null end\r\n\r\n\t\t\t\tFROM CrisNationalGridWest.UploadAccountBillingDetail Account INNER JOIN CrisNationalGridWest.UploadMeterReadDetail Meter\r\n\t\t\t\tON Account.AccountNumber = Meter.AccountNumber\t\t\r\n\t\t\t\tWHERE Meter.IsProcessed = 'N' AND Meter.ExcludeAndReview = 'N' AND Account.ExcludeAndReview = 'N'\r\n\r\n\r\n\r\n\t\t\t\t-- verify that all the therm factors are provided\r\n\t\t\t\tSELECT @ZeroOrNullThermFactor = COUNT(*) \r\n\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tWHERE ( ThermsFactor is NULL OR ThermsFactor = 0 ) and ExcludeAndReview = 'N'\r\n\r\n\t\t\t\tIF ( @ZeroOrNullThermFactor > 0 )\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tRAISERROR ('The is(are) %d meter record(s) with null or zero ThermsFactor.' , -- Message text.\r\n\t\t\t\t\t\t\t16, -- Severity.\r\n\t\t\t\t\t\t\t1, -- State.\r\n\t\t\t\t\t\t\t@ZeroOrNullThermFactor\t-- value to report in %d\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\tEND\r\n\r\n\t\t\t\t\r\n\t\t\t\t\r\n\t\t\t\t-- clean intermediate tables\r\n\t\t\t\tTRUNCATE TABLE CrisNationalGridWest.UploadMeterBillingCRISTransaction\r\n\t\t\t\tTRUNCATE TABLE CrisNationalGridWest.UploadMeterBillingAdjustment\r\n\r\n\r\n\t\t\t\t-- evaluate how many meters have no CurrentMeterNumber\r\n\t\t\t\tSELECT @NumberOfMetersWithNoCurrentMeterNumber = COUNT(*) \r\n\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tWHERE CurrentMeterNumber IS NULL AND ExcludeAndReview = 'N'\r\n\t\t\t\t\r\n\t\t\t\tIF ( @NumberOfMetersWithNoCurrentMeterNumber > 0 )\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tRAISERROR ('The is(are) %d meter(s) with no current meter number.' , -- Message text.\r\n\t\t\t\t\t\t\t16, -- Severity.\r\n\t\t\t\t\t\t\t1, -- State.\r\n\t\t\t\t\t\t\t@NumberOfMetersWithNoCurrentMeterNumber\t-- value to report in %d\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\tEND\r\n\t\t\t\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t-- evaluate how many meters have no BPR or FBPC\r\n\t\t\t\tSELECT @NumberOfMetersWithMissingBPRAndFBPC = COUNT(*) \r\n\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\tWHERE CalculatedBillingPeriodRevision IS NULL OR FirstBillingPeriodCanceled IS NULL AND ExcludeAndReview = 'N'\r\n\t\t\t\t\r\n\t\t\t\tIF ( @NumberOfMetersWithMissingBPRAndFBPC > 0 )\r\n\t\t\t\tBEGIN\r\n\t\t\t\t\tRAISERROR ('The is(are) %d meter(s) with no FirstBillingPeriodCancelled or BillingPeriodRevision.' , -- Message text.\r\n\t\t\t\t\t\t\t16, -- Severity.\r\n\t\t\t\t\t\t\t1, -- State.\r\n\t\t\t\t\t\t\t@NumberOfMetersWithMissingBPRAndFBPC\t-- value to report in %d\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\tEND\r\n\t\t\t\t\r\n\t\t\t\t-- update the Corrector ID in the meter table when the corrector is null or different\t\t\t\t\r\n\t\t\t\tUPDATE    Billing.Meter\r\n\t\t\t\tSET         NgridCorrectorMeterId = MeterCorrectorID\r\n\t\t\t\t\t\t  , FireAuditTrigger = 'Y'\r\n\t\t\t\t\t\t  , LastUpdate = GETDATE()\r\n\t\t\t\t\t\t  \r\n\t\t\t\tFROM\t(\r\n\t\t\t\t\t\t\tSELECT DISTINCT AccountNumber, MeterNumber, CurrentMeterNumber, MeterCorrectorID\r\n\t\t\t\t\t\t\tFROM CrisNationalGridWest.UploadMeterReadDetail\r\n\t\t\t\t\t\t\tWHERE    (MeterCorrectorID IS NOT NULL)\r\n\t\t\t\t\t\t) AS MeterInfo INNER JOIN\r\n\t\t\t\t\t\t  Billing.Meter \r\n\t\t\t\t\t\t  ON MeterInfo.MeterNumber = Billing.Meter.OriginalMeterNumber \r\n\t\t\t\t\t\t  AND MeterInfo.AccountNumber = Billing.Meter.OriginalAccountNumber\r\n\t\t\t\tWHERE   (MeterInfo.MeterCorrectorID <> Billing.Meter.NgridCorrectorMeterId) OR\r\n\t\t\t\t\t\t(Billing.Meter.NgridCorrectorMeterId IS NULL)\r\n\t\t\t\t        \r\n\t\t\t\t        \r\n\r\n\r\n\r\n\t\tEND TRY\r\n\t\tBEGIN CATCH\r\n\r\n\t\t\t\tset @StatusCode  = 1\r\n\r\n\r\n\t\t\t\t-- re-raise the error that caused the catch block to execute\r\n\t\t\t\tDECLARE @ErrorMessage NVARCHAR(4000);\r\n\t\t\t\tDECLARE @ErrorSeverity INT;\r\n\t\t\t\tDECLARE @ErrorState INT;\r\n\r\n\t\t\t\tSELECT \r\n\t\t\t\t\t@ErrorMessage\t= ERROR_MESSAGE(),\r\n\t\t\t\t\t@ErrorSeverity\t= ERROR_SEVERITY(),\r\n\t\t\t\t\t@ErrorState\t\t= ERROR_STATE();\r\n\r\n\t\t\t\tRAISERROR (@ErrorMessage, \r\n\t\t\t\t\t\t   @ErrorSeverity, \r\n\t\t\t\t\t\t   @ErrorState \r\n\t\t\t\t\t\t   );\r\n\r\n\r\n\t\t\t\t\t\t   \r\n\t\tEND CATCH\r\n\r\n\r\n\r\n\r\n\t\r\n end"
        }
      ]
    }
  ]
}