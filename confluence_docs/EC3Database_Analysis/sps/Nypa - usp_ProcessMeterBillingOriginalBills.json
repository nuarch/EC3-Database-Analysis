{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Nypa",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_ProcessMeterBillingOriginalBills",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_ProcessMeterBillingOriginalBills",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process original meter bills for a utility company. It involves inserting and updating records in the "
        },
        {
          "type": "text",
          "text": "Billing.MeterBilling",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " and "
        },
        {
          "type": "text",
          "text": "Billing.MeterBillingElectric",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " tables based on data from the "
        },
        {
          "type": "text",
          "text": "Billing.MeterBillingAdjustmentElectric",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table. The procedure checks if the current billing period has been processed and, if not, performs a series of insertions and updates to reflect the original and adjusted billing data. It also updates the status of processed records to prevent reprocessing."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple table joins and conditional logic."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It performs several insert and update operations across different tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses dynamic data retrieval and manipulation based on the current billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes error handling and transaction management, although not explicitly shown in the provided code."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AuthenticatedUserID int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is intended to capture the ID of the user executing the procedure, although it is not actively used in the current implementation."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StatusCode int OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This output parameter is meant to return the execution status of the procedure, indicating success or failure."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Variable Declaration and Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by declaring and initializing several variables that will be used throughout the process, including counters and flags for billing periods and transaction control."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Number of Original Bills",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It calculates the number of original bills that need processing by querying the "
                },
                {
                  "type": "text",
                  "text": "Billing.MeterBillingAdjustmentElectric",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table, filtered by the current processing period and utility company ID."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Check Processed Bills",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It checks how many original bills have already been processed by querying the "
                },
                {
                  "type": "text",
                  "text": "Billing.MeterBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If no original bills have been processed for the current period, it proceeds with the following steps:"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Retrieves the current billing period."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts records into "
                        },
                        {
                          "type": "text",
                          "text": "Billing.MeterBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " using data from "
                        },
                        {
                          "type": "text",
                          "text": "Billing.MeterBillingAdjustmentElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", ensuring that only unprocessed records are considered."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts corresponding records into "
                        },
                        {
                          "type": "text",
                          "text": "Billing.MeterBillingElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates the "
                        },
                        {
                          "type": "text",
                          "text": "Billing.MeterBillingAdjustmentElectric",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table to mark records as processed and link them to the newly inserted records."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses a variable "
                },
                {
                  "type": "text",
                  "text": "@CommitTransaction",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to control whether the transaction should be committed, although explicit transaction control statements (BEGIN TRANSACTION, COMMIT, ROLLBACK) are not shown."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Output Status",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure is designed to set the "
                },
                {
                  "type": "text",
                  "text": "@StatusCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " output parameter to indicate the success or failure of the operation, although this logic is not explicitly detailed in the provided code."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the tables involved in joins and where clauses are properly indexed to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Batch Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the number of records is large, consider processing in batches to avoid locking and performance degradation."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Implement explicit transaction control to ensure data integrity and manage potential rollbacks in case of errors."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Without explicit transaction management, there is a risk of data inconsistency if multiple instances of the procedure run concurrently."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling mechanisms, which could lead to unhandled exceptions and partial data processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the volume of data grows, the performance of the procedure may degrade if not optimized with appropriate indexing and query tuning."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses hardcoded values (e.g., "
                },
                {
                  "type": "text",
                  "text": "@UtilityCompanySeqid = 7",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "), which reduces flexibility and requires code changes for different utility companies."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "/*****************************************************************************************************************************************************************************************************/\n/*                                                                                                                                                                                                   */\r\n/*****************************************************************************************************************************************************************************************************/\r\n-- Stored Procedure\r\n\r\nCREATE PROCEDURE [Nypa].[usp_ProcessMeterBillingOriginalBills] @AuthenticatedUserID int , @StatusCode int  OUTPUT   \r\n\r\n AS --**************************************************************************************\r\n--* Name:         \r\n--*\r\n--* Description:  Process Original Meter bills.\r\n--*               \r\n--* Exec:         usp_ProcessMeterBillingOriginalBills\r\n--*\r\n--* Parameter(s):         \r\n--*\t\t\t\t\t\t\t\tAuthenticatedUserID int, \r\n--*\t\t\t\t\t\t\t\tCurrentBillingPeriod varchar(6),\r\n--*\t\t\t\t\t\t\t\tUtilityCompanySeqid int      - The sequence id of the Utility Companyto be processed\r\n--*\t\t\t\t\t\t\t\tStatusCode  int output       -  Execution Return Status \r\n--*\r\n--*\r\n--* Database:     OEC\r\n--*\r\n--* Return:\t    0 Success\r\n--*                   9 Failure\r\n--*\r\n--* AUTHOR:       Peter Heller (PAH)\r\n--* Created On:   10/26/2005\r\n--**************************************************************************************\r\n--* Date         Tech Description of Change\r\n--* ---------- ----  -------------------------------------------------------------\r\n--* 03/16/2015 PAH  Added AMRindicator to MeterBillingElectric\r\n--* 11/20/2006 PAH  Revised to \r\n--* 03/27/2006 PAH  Revised to \r\n--* 10/26/2005 PAH  First Version  \r\n--* 12/20/2018 VY   Modified for UniqueAccountSeqID and UniqueMeterSeqID\r\n--***************************************************************************************\r\nBegin \r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\ndeclare @IsCurrentBillingPeriod  int\r\ndeclare @BillingPeriodMismatch  int\r\ndeclare @HasCurrentBillingPeriodBeenProcessed  int\r\ndeclare @OrginalBillsZeroProcessed  int\r\ndeclare @NumberOfOrginalBills  int\r\ndeclare @NumberOfOrginalBillsProcessed  int\r\ndeclare @ProcessingCurrentBillingPeriod  int\r\ndeclare @MeterBillingCount  int\r\ndeclare @MeterBillingElectricCount  int\r\ndeclare @UploadNYPAMeterBillingTemporary  int\r\ndeclare @UtilityCompanySeqid int\r\n--\r\ndeclare @No  varchar(1)\r\ndeclare @Yes  varchar(1)\r\ndeclare @CurrentBillingPeriod varchar(6)\r\n--\r\n--\r\nDECLARE @errCurrentAccountNumber NVARCHAR(15)\r\nDECLARE @errOriginalAccountNumber NVARCHAR(15)\r\nDECLARE @errCurrentMeterNumber NVARCHAR(12)\r\nDECLARE @errOriginalMeterNumber NVARCHAR(12)\r\n--\r\nDECLARE @ExchangeErrorMessage NVARCHAR(4000);\r\nDECLARE @ErrorMessage NVARCHAR(4000);\r\nDECLARE @ErrorSeverity INT;\r\nDECLARE @ErrorState INT;\r\nDECLARE @ErrorNumber INT;\r\nDECLARE @ErrorLine INT;\r\nDECLARE @ErrorProcedure NVARCHAR(126);\r\n--\r\ndeclare @CommitTransaction varchar(1)  \r\n--\r\ndeclare @MeterBillingInsertCount int\r\ndeclare @MeterBillingElectricInsertCount int\r\ndeclare @MeterBillingAdjustmentElectricUpdateCount int\r\n--\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\nset @BillingPeriodMismatch = 0\r\nset @OrginalBillsZeroProcessed = 0\r\nset @ProcessingCurrentBillingPeriod = 0\r\nset @No = 'N'\r\nset @Yes = 'Y'\r\nset @UtilityCompanySeqid = 7\r\n--\r\n--************************************************************************************** \r\n--\tMain Processing\r\n--**************************************************************************************\r\n--\r\n--\tCheck Whether it is the current billing and that the adjustments have not been already processed\r\n--\r\n--\tremove AND Billing.MeterBillingAdjustmentElectric.BillingPeriodRevision = Billing.ApplicationTimeFrame.BillingPeriod\r\n--  add and (Billing.MeterBillingAdjustmentElectric.AdjustedMeterBilling IS null)  pah 4/29/2009\r\n--\r\nselect\t@NumberOfOrginalBills = COUNT(*)\r\nFROM \r\n\t\tBilling.MeterBillingAdjustmentElectric INNER JOIN\r\n\t\tBilling.ApplicationTimeFrame ON Billing.MeterBillingAdjustmentElectric.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\tBilling.MeterBillingAdjustmentElectric.BillingPeriodRevision = Billing.ApplicationTimeFrame.BillingPeriod\r\nWHERE \r\n\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y') AND \r\n\t\t(Billing.MeterBillingAdjustmentElectric.AccountUtilityCompanySeqid = 7)\r\n--\r\nprint '@NumberOfOrginalBills: '+str(@NumberOfOrginalBills)\r\n--\r\nselect\t@NumberOfOrginalBillsProcessed  = COUNT(*) \r\nFROM \r\n\t\tBilling.MeterBilling INNER JOIN\r\n\t\tBilling.ApplicationTimeFrame ON Billing.MeterBilling.BillingPeriod = Billing.ApplicationTimeFrame.BillingPeriod AND \r\n\t\tBilling.MeterBilling.BillingPeriodRevision = Billing.ApplicationTimeFrame.BillingPeriod\r\nWHERE    \r\n\t\t(Billing.MeterBilling.BillingPeriod = Billing.MeterBilling.BillingPeriodRevision) and\r\n\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y') AND \r\n\t\t(Billing.MeterBilling.AccountUtilityCompanySeqid = 7)\r\n--\r\nprint '@NumberOfOrginalBillsProcessed: '+str(@NumberOfOrginalBillsProcessed)\r\n--\r\n--  Determine that you have not processed the current billing period original bills\r\n--\r\n\r\nIf (@NumberOfOrginalBillsProcessed = @OrginalBillsZeroProcessed)\r\n   Begin\r\n\r\n\t\tset @CommitTransaction = 'Y'\r\n\t\t--\r\n\t\tSELECT @CurrentBillingPeriod = BillingPeriod FROM Billing.ApplicationTimeFrame WHERE (Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y')\r\n\t\t--\r\n\t\t--     Make sure that current billing period has not been processed and the count is less\r\n\t\t--     than one (1).   AccountName,AccountAddress,MeterLocation\r\n\t\t--\r\n\t\t--\r\n\t\t-- Insert the orginal and back bills where the UploadNYPAAccountBilling.RevisedBillingPeriod is used for all inserts.\r\n\t\t-- The inclusion of the back bills forces the use of the RevisedBillingPeriod for the BillingPeriod.  \r\n\t\t--\r\n\t\tINSERT INTO Billing.MeterBilling\r\n\t            (UniqueAccountSeqID, UniqueMeterSeqID, /* added on 12/20/2018 */\r\n\t\t\t\tAccountExchangeMeterTrackSeqid, UploadFileSeqid, OriginalAccountNumber, OriginalMeterNumber, BillingPeriod, BillingPeriodRevision, \r\n\t\t\t\tNextBillingPeriod, PreviousBillingPeriod, BillCreationDate, BillingAction, MeterBillingStatus, PreviousMeterBillingStatus, \r\n\t\t\t\tMeterBillingStatusCodePeriod, EnergySource, ProcessedInTheCurrentPeriod, SalesType, UtilityServiceAddress, MeterType, MeterDials, \r\n\t\t\t\tMeterConstant, Tension, EstimatedReading, ConsecutivePeriodsEstimatedReading,  ProductionAndDeliveryTariff, \r\n\t\t\t\tBillingPeriodDays, FromDate, \r\n\t\t\t\tToDate, ToReadingDate, FromReadingDate, Consumption, Demand, InitialPostingDate, AdjustmentRecordSeqid,\r\n\t\t\t\tAuthenticatedUserID, DateAdded, LastUpdate,AccountUtilityCompanySeqid,IsTimeOfDayAccount,LastPeriodModified,\r\n\t\t\t\tBilledDemand,MeterLocation,IsSpannedPeriodBill,MeterReactivePowerEnergy,AMRIndicator)\r\n\t\tSELECT \t\t\r\n\t\t        Billing.MeterBillingAdjustmentElectric.UniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.UniqueMeterSeqId,  /* added on 12/20/2018 */\r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.AccountExchangeMeterTrackSeqid, Billing.MeterBillingAdjustmentElectric.UploadFileSeqidUniquelyGrouped, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.OriginalAccountNumber, Billing.MeterBillingAdjustmentElectric.OriginalMeterNumber, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.BillingPeriodRevision, --Billing.MeterBillingAdjustmentElectric.BillingPeriod, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.BillingPeriodRevision, \r\n\t\t\t\tdbo.CreateNextPeriod(Billing.MeterBillingAdjustmentElectric.BillingPeriod, 'M'), \r\n\t\t\t\tdbo.CreatePreviousPeriod(Billing.MeterBillingAdjustmentElectric.BillingPeriod, 'M'), \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.MeterBillingAdjustmentElectricSeqid,   --null, --BillCreationDate,\r\n\t\t\t\t'O', Billing.Meter.MeterStatus, Billing.Meter.MeterPreviousStatus, Billing.Meter.MeterStatusCodePeriod, 1, 'Y', Billing.Account.SalesType, \r\n\t\t\t\tBilling.Account.UtilityServiceAddress, Billing.MeterBillingAdjustmentElectric.MeterType, Billing.MeterBillingAdjustmentElectric.NumberOfDials, Billing.Meter.MeterConstant, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.MeterTensionCode, Billing.MeterBillingAdjustmentElectric.ESTOrACT, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.ConsecutivePeriodsEstimatedReading, Billing.MeterBillingAdjustmentElectric.ProductionAndDeliveryTariff, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.BillingPeriodDays, Billing.MeterBillingAdjustmentElectric.FromDate, Billing.MeterBillingAdjustmentElectric.ToDate, \r\n\t\t\t\tdbo.DetermineMeterReadingDate(Billing.MeterBillingAdjustmentElectric.ConsumptionToReadingDate, Billing.MeterBillingAdjustmentElectric.DemandToReadingDate),\r\n\t\t\t\tdbo.DetermineMeterReadingDate(Billing.MeterBillingAdjustmentElectric.ConsumptionFromReadingDate, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.DemandFromReadingDate), dbo.SumConsumption(Billing.MeterBillingAdjustmentElectric.Consumption, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.ConsumptionHoursOffPeak, Billing.MeterBillingAdjustmentElectric.ConsumptionHoursShoulder), \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.Demand, GETDATE(), \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.MeterBillingAdjustmentElectricSeqid, -- AdjustmentRecordSeqid\r\n\t\t\t\t1, --@AuthenticatedUserID, \r\n\t\t\t\tGETDATE(), GETDATE(), \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.AccountUtilityCompanySeqid, Billing.MeterBillingAdjustmentElectric.IsTimeOfDayAccount, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.BillingPeriod,\r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.BilledDemand,\r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.MeterLocation,Billing.MeterBillingAdjustmentElectric.IsSpannedPeriodBill,\r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.MeterReactivePowerEnergy,\r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.AMRIndicator\r\n\t\tFROM\r\n\t\t\t\t\tBilling.MeterBillingAdjustmentElectric INNER JOIN\r\n\t\t\t\t\tBilling.AccountExchangeMeterTrack ON \r\n\t\t\t\t\tBilling.MeterBillingAdjustmentElectric.AccountExchangeMeterTrackSeqid = Billing.AccountExchangeMeterTrack.AccountExchangeMeterTrackSeqid INNER JOIN\r\n\t\t\t\t\tBilling.Account ON Billing.AccountExchangeMeterTrack.OriginalAccountSeqid = Billing.Account.AccountSeqid INNER JOIN\r\n\t\t\t\t\tBilling.Meter ON Billing.AccountExchangeMeterTrack.OriginalMeterSeqid = Billing.Meter.MeterSeqid\r\n\t\tWHERE \r\n\t\t\t\t\t(Billing.MeterBillingAdjustmentElectric.AdjustedMeterBilling IS NULL) AND \r\n\t\t\t\t\t(Billing.MeterBillingAdjustmentElectric.BillingPeriod = @CurrentBillingPeriod) AND \r\n\t\t\t\t\t(Billing.MeterBillingAdjustmentElectric.ProcessedInTheCurrentPeriod = 'N')\r\n\t\t--\r\n\r\n\t\tselect @MeterBillingInsertCount =@@rowcount\r\n\t\tprint '@MeterBillingInsertCount: '+str(@MeterBillingInsertCount)\r\n\t\t--\r\n\t\t-- Insert the orginal and back bills where the UploadNYPAAccountBilling.RevisedBillingPeriod is used for all inserts.\r\n\t\t-- The inclusion of the back bills forces the use of the RevisedBillingPeriod for the BillingPeriod.  \r\n\t\t--\r\n\t\tINSERT INTO Billing.MeterBillingElectric\r\n\t\t        (UniqueAccountSeqID, UniqueMeterSeqID, /* added on 12/20/2018 */\r\n\t\t\t\tMeterBillingAdjustmentElectricRowId, MeterBillingRowId, OriginalAccountNumber, \r\n\t\t\t\tOriginalMeterNumber, BillingPeriod, BillingPeriodRevision, \r\n\t\t\t\tMeterBillingRowState, \r\n\t\t\t\tDemandReadingCode,\r\n\t\t\t\tConsumptionReadingCode, ProductionAndDeliveryTariff, ReadingTypes, \r\n\t\t\t\tMeterBillingTypeElectric, RecordTypeConsumption, RecordTypeDemand, \r\n\t\t\t\tBillingPeriodDays, FromDate, ToDate, \r\n\t\t\t\tConstantMeterMultiplier, StreetLightingFacilityPoints, \r\n\t\t\t\tConsumption, ConsumptionToReadingDate, ConsumptionFromReadingDate, ConsumptionToReading, \r\n\t\t\t\tConsumptionFromReading, ConsumptionHoursOffPeak, ConsumptionHoursShoulder, \r\n\t\t\t\tDemand, DemandToReadingDate, DemandFromReadingDate,\r\n\t\t\t\tDemandToReading, DemandFromReading, DemandOffPeak, DemandShoulder, \r\n\t\t\t\tRatchetDemand, RatchetDemandOffPeak, RatchetDemandShoulder, \r\n\t\t\t\tAuthenticatedUserID, DateAdded, LastUpdate,UtilityCompanySeqid, IsTimeOfDayAccount, LastPeriodModified,\r\n\t\t\t\tMeterReactivePowerEnergy ,MeterReactivePowerFactor,ContractNumber,AMRIndicator)\r\n\t\tSELECT    \r\n\t\t\t    Billing.MeterBillingAdjustmentElectric.UniqueAccountSeqId, /* added on 12/20/2018 */\r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.UniqueMeterSeqId,  /* added on 12/20/2018 */    \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.MeterBillingAdjustmentElectricSeqid, Billing.MeterBilling.MeterBillingSeqid, Billing.MeterBilling.OriginalAccountNumber, \r\n\t\t\t\tBilling.MeterBilling.OriginalMeterNumber, Billing.MeterBilling.BillingPeriodRevision, Billing.MeterBilling.BillingPeriodRevision AS Expr1, 1 AS Expr2, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.ReadingCodeDemand, Billing.MeterBillingAdjustmentElectric.ReadingCodeConsumption, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.ProductionAndDeliveryTariff, Billing.MeterBillingAdjustmentElectric.ReadingTypes, \r\n\t\t\t\tdbo.DetermineMeterBillingAdjustmentType(Billing.MeterBillingAdjustmentElectric.RecordTypeConsumption, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.RecordTypeDemand) AS Expr3, Billing.MeterBillingAdjustmentElectric.RecordTypeConsumption, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.RecordTypeDemand, Billing.MeterBillingAdjustmentElectric.BillingPeriodDays, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.FromDate, Billing.MeterBillingAdjustmentElectric.ToDate, Billing.MeterBillingAdjustmentElectric.ConstantMeterMultiplier, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.StreetLightingFacilityPoints, Billing.MeterBillingAdjustmentElectric.Consumption, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.ConsumptionToReadingDate, Billing.MeterBillingAdjustmentElectric.ConsumptionFromReadingDate, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.ConsumptionToReading, Billing.MeterBillingAdjustmentElectric.ConsumptionFromReading, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.ConsumptionHoursOffPeak, Billing.MeterBillingAdjustmentElectric.ConsumptionHoursShoulder, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.Demand, Billing.MeterBillingAdjustmentElectric.DemandToReadingDate, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.DemandFromReadingDate, Billing.MeterBillingAdjustmentElectric.DemandToReading, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.DemandFromReading, Billing.MeterBillingAdjustmentElectric.DemandOffPeak, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.DemandShoulder, NULL AS Expr4, NULL AS Expr5, NULL AS Expr6, 1 AS Expr7, GETDATE() AS Expr8, GETDATE() AS Expr9, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.AccountUtilityCompanySeqid, Billing.MeterBillingAdjustmentElectric.IsTimeOfDayAccount, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.BillingPeriod, Billing.MeterBillingAdjustmentElectric.MeterReactivePowerEnergy, \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.MeterReactivePowerFactor,\r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.ContractNumber,Billing.MeterBillingAdjustmentElectric.AMRIndicator\r\n\t\tFROM \r\n\t\t\t\tBilling.MeterBilling INNER JOIN\r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric ON Billing.MeterBilling.LastPeriodModified = Billing.MeterBillingAdjustmentElectric.BillingPeriod AND \r\n\t\t\t\tBilling.MeterBilling.BillingPeriodRevision = Billing.MeterBillingAdjustmentElectric.BillingPeriodRevision AND \r\n\t\t\t\tBilling.MeterBilling.AccountUtilityCompanySeqid = Billing.MeterBillingAdjustmentElectric.AccountUtilityCompanySeqid AND \r\n\t\t\t\tBilling.MeterBilling.OriginalAccountNumber = Billing.MeterBillingAdjustmentElectric.OriginalAccountNumber AND \r\n\t\t\t\tBilling.MeterBilling.OriginalMeterNumber = Billing.MeterBillingAdjustmentElectric.OriginalMeterNumber AND \r\n\t\t\t\tBilling.MeterBilling.AdjustmentRecordSeqid = Billing.MeterBillingAdjustmentElectric.MeterBillingAdjustmentElectricSeqid\r\n\t\tWHERE    \r\n\t\t\t\t(Billing.MeterBillingAdjustmentElectric.AdjustedMeterBillingElectric IS NULL) AND \r\n\t\t\t\t(Billing.MeterBillingAdjustmentElectric.BillingPeriod = @CurrentBillingPeriod) AND \r\n\t\t\t\t(Billing.MeterBillingAdjustmentElectric.ProcessedInTheCurrentPeriod = 'N')\t\t\r\n\t\t--\r\n\t\tselect @MeterBillingElectricInsertCount =@@rowcount\r\n\t\tprint '@MeterBillingElectricInsertCount: '+str(@MeterBillingElectricInsertCount)\r\n\t\t--\r\n\t\tUPDATE  Billing.MeterBillingAdjustmentElectric\r\n\t\tSET              \r\n\t\t\t\tProcessedInTheCurrentPeriod = 'Y', \r\n\t\t\t\tAdjustedMeterBilling = Billing.MeterBilling.MeterBillingSeqid, \r\n\t\t\t\tAdjustedMeterBillingElectric = Billing.MeterBillingElectric.MeterBillingElectricSeqid\r\n\t\tFROM \r\n\t\t\t\tBilling.ApplicationTimeFrame INNER JOIN\r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric ON Billing.ApplicationTimeFrame.BillingPeriod = Billing.MeterBillingAdjustmentElectric.BillingPeriod INNER JOIN\r\n\t\t\t\tBilling.MeterBilling INNER JOIN\r\n\t\t\t\tBilling.MeterBillingElectric ON Billing.MeterBilling.MeterBillingSeqid = Billing.MeterBillingElectric.MeterBillingRowId ON \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.MeterBillingAdjustmentElectricSeqid = Billing.MeterBillingElectric.MeterBillingAdjustmentElectricRowId AND \r\n\t\t\t\tBilling.MeterBillingAdjustmentElectric.MeterBillingAdjustmentElectricSeqid = Billing.MeterBilling.AdjustmentRecordSeqid\r\n\t\tWHERE   \r\n\t\t\t\t(Billing.ApplicationTimeFrame.CurrentProcessingPeriod = 'Y') AND \r\n\t\t\t\t(Billing.MeterBillingAdjustmentElectric.AdjustedMeterBilling IS NULL) AND \r\n\t\t\t\t(Billing.MeterBillingAdjustmentElectric.AdjustedMeterBillingElectric IS NULL)\r\n\t\t--\r\n\t\t--\r\n\t\tselect @MeterBillingAdjustmentElectricUpdateCount =@@rowcount\r\n\t\tprint '@MeterBillingAdjustmentElectricUpdateCount: '+str(@MeterBillingAdjustmentElectricUpdateCount)\r\n   --\r\n   End\r\n--\r\nEnd"
        }
      ]
    }
  ]
}