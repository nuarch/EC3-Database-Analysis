{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "ConEd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Archive_usp_ProcessConEdTransformMeterBillingData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "Archive_usp_ProcessConEdTransformMeterBillingData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and transform billing data for ConEdison meters. It performs several operations, including truncating and reseeding tables, inserting transformed data into summary tables, handling spanned billing periods, merging rebills, and identifying discrepancies between account and meter-reported billing. The procedure is part of a larger system that manages utility billing data, specifically focusing on gas usage and billing adjustments."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This procedure is complex due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple steps and operations, including data truncation, insertion, updating, and executing other stored procedures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses several user-defined functions and other stored procedures, indicating dependencies and interconnections within the database system."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It handles intricate business logic related to billing periods, rebills, and discrepancies, requiring a deep understanding of the billing process."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The procedure manipulates large datasets, which can impact performance and requires careful management of resources."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Status AS INT OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is used to return the status of the procedure execution. It is an output parameter, indicating that it will be set within the procedure to communicate the result or status back to the caller."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": "
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure begins by declaring variables for the Unicode end-of-file marker and billing period."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It retrieves the top billing period from the "
                        },
                        {
                          "type": "text",
                          "text": "UploadConEdisonMeter",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Preparation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The "
                        },
                        {
                          "type": "text",
                          "text": "UploadConEdisonMeterSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table is truncated and reseeded to prepare for new data."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Data is inserted into this table with transformations and calculations applied, such as determining gas rate codes and therm factors using user-defined functions."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Handling Spanned Bills",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure identifies and processes spanned billing periods, inserting relevant data into "
                        },
                        {
                          "type": "text",
                          "text": "UploadConEdisonMeterTempSummarySpanned",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It executes another stored procedure to parse spanned billed data."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Merging Rebills",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure updates the "
                        },
                        {
                          "type": "text",
                          "text": "UploadConEdisonMeterSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to ensure billing period revisions are valid."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It inserts merged rebill data into "
                        },
                        {
                          "type": "text",
                          "text": "UploadConEdisonMeterBillingAdjustmentGas",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ", aggregating and summarizing data."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Discrepancy Identification",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The procedure updates records to adjust for discrepancies between account and meter-reported billing."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It identifies and logs discrepancies, updating notes with detailed information."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Truncation and Reseeding",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Frequent truncation and reseeding of tables can be resource-intensive and may lock tables, affecting concurrent access."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Large Data Volume",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure processes potentially large datasets, which can lead to performance bottlenecks if not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Use of Functions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The reliance on user-defined functions for calculations may impact performance, especially if these functions are not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensuring proper indexing on tables involved in joins and updates can significantly improve performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Truncating tables without proper backup or transaction management can lead to data loss."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues due to table locks during truncation and updates."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete transactions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dependencies",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Changes in user-defined functions or other stored procedures it calls could affect its functionality."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the procedure may require optimization to handle increased load efficiently."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [ConEd].[Archive_usp_ProcessConEdTransformMeterBillingData]\n(\r\n\t@Status AS INT OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\t--**************************************************************************************\r\n\t--* Date         Tech Description of Change\r\n\t--* ---------- ----  -------------------------------------------------------------\r\n\t--* 10/26/2005 PAH  First Version \r\n\t--* 2019-03-12\tzd\testimate or actual calculation is updated\t\r\n\t--**************************************************************************************\r\n\t\r\n\tDECLARE @UnicodeEndOfFileMarker AS INT, @BillingPeriod AS VARCHAR(6);\r\n\r\n\tSELECT TOP 1 @BillingPeriod = BillingPeriod FROM ConEd.UploadConEdisonMeter;\r\n\tSET @UnicodeEndOfFileMarker = 27;\r\n\t\r\n\t--**************************************************************************************\r\n\t--Main Process\r\n\t--**************************************************************************************\r\n\r\n\tTRUNCATE TABLE ConEd.UploadConEdisonMeterSummary;\r\n\tDBCC CHECKIDENT ('ConEd.[UploadConEdisonMeterSummary]', RESEED, 1);\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonMeterSummary\r\n\t\t(AccountUtilityCompanySeqid,\r\n\t\tOriginalAccountNumber,\r\n\t\tOriginalMeterNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCancelPeriod,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tBillingAction,\r\n\t\tGasRateCode,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tFromDate,\r\n\t\tToDate,\r\n\t\tMeterFromReading,\r\n\t\tMeterToReading,\r\n\t\tCcf,\r\n\t\tTherms,\r\n\t\tThermsFactor,\r\n\t\tMeterConstant,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tReadingCode,\r\n\t\tNumberOfDials,\r\n\t\tMeterType,\r\n\t\tProcessEffectiveDate,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tAuthenticatedUserID,\r\n\t\tNotes,\r\n\t\tDateAdded,\r\n\t\tLastUpdate,\r\n\t\tInitialPostingDate,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tAverageRebillThermsFactor,\r\n\t\tPriorRevisedBilledCCF,\r\n\t\tRevisedBilledCCF,\r\n\t\tCanceledBilledCCF,\r\n\t\tPriorRevisedBilledTherms,\r\n\t\tRevisedBilledTherms,\r\n\t\tCanceledBilledTherms,\r\n\t\tFacilityName,\r\n\t\tServiceAddress)\r\n\tSELECT 9 AS AccountUtilityCompanySeqid,\r\n\t\tAccountNumber,\r\n\t\tMeterNumber, \r\n\t\tBillingPeriod, \r\n\t\tcase when BillingPeriod < BillingPeriodRevision then BillingPeriod else BillingPeriodRevision end AS BillingPeriodRevision, \r\n\t\tcase when BillingPeriod < BillingPeriodRevision then BillingPeriod else BillingPeriodRevision end AS FirstPeriodCanceled, \r\n\t\t1 AS NumberOfTransactions, \r\n\t\t1 AS NumberOfRebillTransactions,\r\n\t\t0 AS NumberOfCancelTransactions,\r\n\t\tcase when BillingPeriod = BillingPeriodRevision then 'O' else 'A' end AS BillingAction,\r\n\t\tdbo.[DetermineConEdisonGetGasTariffRateFromAccountTable] (AccountNumber,BillingPeriodRevision) AS GasRateCode,\r\n\t\tFromDate, ToDate,FromDate, ToDate, FromReading AS FromMeterReading, ToReading AS ToMeterReading,\r\n\t\tCCF,\r\n\t\tcast(ccf*dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber,BillingPeriodRevision)+.501 AS int) AS Therms,\r\n\t\tdbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber,BillingPeriodRevision) AS ThermFactor, \r\n\t\tMeterConstant,\r\n\t\tdbo.[CalculateNumberOfBillingDays](FromDate, ToDate) AS TotalBillingDaysRebilled,\r\n\t\tDeltaNumberOfPeriods AS NumberOfBillingPeriods,\r\n\t\tdbo.[CalculateNumberOfBillingDays](FromDate, ToDate) AS BillingDays, \r\n\t\tdbo.[ConvertDatetimeToYYYYMMDD] (PostingDate) AS BillingDate, \r\n\t\tReadingCode,\r\n\t\tDials AS NumberOfDials, \r\n\t\t'G' AS MeterType, \r\n\t\tnull AS ProcessEffectiveDate,\r\n\t\tcase when BillingPeriod < BillingPeriodRevision then BillingPeriod else BillingPeriodRevision end AS SpannedBillingPeriodRevision,\r\n\t\tcase when BillingPeriod < BillingPeriodRevision then BillingPeriod else BillingPeriodRevision end AS SpannedFirstCanceledBillingPeriod,\r\n\t\tCCF AS SpannedCCF,\r\n\t\tdbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber,BillingPeriodRevision) AS SpannedThermFactor,\r\n\t\tcast(ccf*dbo.DetermineConEdisonGetThermFactorFromAccountTable(AccountNumber,BillingPeriodRevision)+.501 AS int) AS SpannedTherm,\r\n\t\t1.0 AS SpannedMonthlyPercentage,\r\n\t\t1.0 AS SpannedTotalPercentage,\r\n\t\t1 AS AuthenticatedUserID,\r\n\t\tnull AS Notes,\r\n\t\tGETDATE() AS DateAdded,\r\n\t\tGETDATE() AS LastUpdate,\r\n\t\tGETDATE() AS InitialPostingDate,\r\n\t\t--case when ReadingCode < 15 then 'EST' else 'ACT' end AS EstimatedOrActualBilling,\r\n\t\tdbo.CalculateEstimatedOrActual(ReadingCode,9) AS EstimatedOrActualBilling,\r\n\t\t1.00 AS AverageRebillThermsFactor,\r\n\t\t0 AS PriorRevisedBilledCCF,\r\n\t\t0 AS RevisedBilledCCF,\r\n\t\t0 AS CanceledBilledCCF,\r\n\t\t0 AS PriorRevisedBilledTherms,\r\n\t\t0 AS RevisedBilledTherms,\r\n\t\t0 AS CanceledBilledTherms,\r\n\t\tFacilityName,\r\n\t\tServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeter \r\n\tWHERE DeltaNumberOfPeriods < 2;\r\n\r\n\t-- Merges the reset rows that prior to the actual group by merge and removes the zero billing period rows \r\n\t-- after the merge.\r\n\r\n\tEXEC ConEd.Archive_usp_ParseSplitBillingAndMeterResetsUploadConEdisonMeterInfo 1\r\n\r\n\t---Loading >1 Period Bills (Spanned Bills) (Temporarily here)\t\t\r\n\r\n\tTRUNCATE TABLE ConEd.UploadConEdisonMeterTempSummarySpanned;\r\n\tDBCC CHECKIDENT ('ConEd.[UploadConEdisonMeterTempSummarySpanned]', RESEED, 1);\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonMeterTempSummarySpanned\r\n\t\t(title,\r\n\t\tAccountNumber,\r\n\t\tMeterNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstPeriodCanceled,\r\n\t\tFromDate,\r\n\t\tToDate,\r\n\t\tThermFactor,\r\n\t\tCCF,\r\n\t\tDeltaNumberOfPeriods,\r\n\t\tReadingCode,\r\n\t\tFromReading,\r\n\t\tToReading,\r\n\t\tMeterConstant,\r\n\t\tTripNumber,\r\n\t\tDials,\r\n\t\tFacilityName,\r\n\t\tServiceAddress)\r\n\tSELECT 'SpannedMeterbilling' AS title, \r\n\t\tAccountNumber,\r\n\t\tMeterNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstPeriodCanceled,\r\n\t\tFromDate,\r\n\t\tToDate,\r\n\t\tThermFactor,\r\n\t\tCCF,\r\n\t\tDeltaNumberOfPeriods,\r\n\t\tReadingCode,\r\n\t\tFromReading,\r\n\t\tToReading,\r\n\t\tMeterConstant,\r\n\t\tCycleBillingDays,  -- Trip Number\r\n\t\tDials,\r\n\t\tFacilityName,\r\n\t\tServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeter\r\n\tWHERE DeltaNumberOfPeriods > 1;\r\n\r\n\t-----Parsing >1 Period Bills (Spanned Bills) (Temporarily here)\r\n\r\n\tEXECUTE ConEd.Archive_usp_ParseSpannedBilledUploadConEdisonMeterInfo 1\r\n\r\n\t----- Merging Rebills (Temporarily here)\r\n\r\n\tTRUNCATE TABLE ConEd.UploadConEdisonMeterBillingAdjustmentGas;\r\n\r\n\t--\tMake sure that the max BillingPeriodRevision is less than or equal to the current BillingPeriod\r\n\tUPDATE ConEd.UploadConEdisonMeterSummary\r\n\tSET BillingPeriodRevision = CASE WHEN BillingPeriodRevision > BillingPeriod THEN BillingPeriod\r\n\t\tELSE BillingPeriodRevision END\r\n\tWHERE BillingPeriod < BillingPeriodRevision;\r\n\r\n\tINSERT INTO ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\t\t(AccountUtilityCompanySeqid,\r\n\t\tOriginalAccountNumber,\r\n\t\tOriginalMeterNumber,\r\n\t\tBillingPeriod,\r\n\t\tBillingPeriodRevision,\r\n\t\tFirstCancelPeriod,\r\n\t\tNumberOfTransactions,\r\n\t\tNumberOfRebillTransactions,\r\n\t\tNumberOfCancelTransactions,\r\n\t\tBillingAction,\r\n\t\tInitialCancelFromDate,\r\n\t\tCurrentBillingToDate,\r\n\t\tGasRateCode,\r\n\t\tFromDate,\r\n\t\tToDate,\r\n\t\tFromReadingDate,\r\n\t\tToReadingDate,\r\n\t\tMeterFromReading,\r\n\t\tMeterToReading,\r\n\t\tCcf,\r\n\t\tTherms,\r\n\t\tThermsFactor,\r\n\t\tMeterConstant,\r\n\t\tTotalBillingDaysRebilled,\r\n\t\tNumberOfBillingPeriods,\r\n\t\tBillingDays,\r\n\t\tBillingDate,\r\n\t\tReadingCode,\r\n\t\tNumberOfDials,\r\n\t\tMeterType,\r\n\t\tProcessedInTheCurrentPeriod,\r\n\t\tProcessEffectiveDate,\r\n\t\tDerivedFromSpannedBill,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tEstimatedOrActualBilling,\r\n\t\tAuthenticatedUserID,\r\n\t\tNotes,\r\n\t\tInitialPostingDate,\r\n\t\tFacilityName,\r\n\t\tServiceAddress)\r\n\tSELECT MIN(AccountUtilityCompanySeqid) AS AccountUtilityCompanySeqid, OriginalAccountNumber, OriginalMeterNumber, MIN(BillingPeriod) AS BillingPeriod, \r\n\t\tBillingPeriodRevision, MIN(FirstCancelPeriod) AS FirstCancelPeriod, COUNT(NumberOfTransactions) AS NumberOfTransactions, \r\n\t\tCOUNT(NumberOfRebillTransactions) AS NumberOfRebillTransactions, min(0) AS NumberOfCancelTransactions,MIN(BillingAction) AS BillingAction, MIN(InitialCancelFromDate) \r\n\t\tAS InitialCancelFromDate, MAX(CurrentBillingToDate) AS CurrentBillingToDate, MIN(GasRateCode) AS GasRateCode, MIN(FromDate) AS FromDate, \r\n\t\tMAX(ToDate) AS ToDate, MIN(FromDate) AS FromReadingDate, MAX(ToDate) AS ToReadingDate, MAX(MeterFromReading) AS MeterFromReading, MAX(MeterToReading) AS MeterToReading, SUM(Ccf) AS Ccf, SUM(Therms) \r\n\t\tAS Therms, MIN(ThermsFactor) AS ThermsFactor, MIN(MeterConstant) AS MeterConstant, SUM(TotalBillingDaysRebilled) AS TotalBillingDaysRebilled, \r\n\t\tSUM(NumberOfBillingPeriods) AS NumberOfBillingPeriods, SUM(BillingDays) AS BillingDays, MIN(BillingDate) AS BillingDate, MIN(ReadingCode) \r\n\t\tAS ReadingCode, MIN(NumberOfDials) AS NumberOfDials, MIN(MeterType) AS MeterType, MIN(ProcessedInTheCurrentPeriod) \r\n\t\tAS ProcessedInTheCurrentPeriod, MIN(ProcessEffectiveDate) AS ProcessEffectiveDate, MIN(DerivedFromSpannedBill) AS DerivedFromSpannedBill, \r\n\t\tMIN(SpannedBillingPeriodRevision) AS SpannedBillingPeriodRevision, MIN(SpannedFirstCanceledBillingPeriod) \r\n\t\tAS SpannedFirstCanceledBillingPeriod, MIN(SpannedCCF) AS SpannedCCF, MIN(SpannedThermFactor) AS SpannedThermFactor, MIN(SpannedTherm) \r\n\t\tAS SpannedTherm, MIN(SpannedMonthlyPercentage) AS SpannedMonthlyPercentage, MIN(SpannedTotalPercentage) AS SpannedTotalPercentage, \r\n\t\tMAX(EstimatedOrActualBilling) AS EstimatedOrActualBilling, MIN(AuthenticatedUserID) AS AuthenticatedUserID, MIN(Notes) AS Notes, \r\n\t\tMIN(InitialPostingDate) AS InitialPostingDate,min(FacilityName) AS FacilityName,min(ServiceAddress) AS ServiceAddress\r\n\tFROM ConEd.UploadConEdisonMeterSummary\r\n\tGROUP BY OriginalAccountNumber, OriginalMeterNumber, BillingPeriodRevision;\r\n\r\n\t--\tThe rebilled CCF will adjusted for the net zero adjustments on the account billing.  The meter billing will use the account billing ccf and re derive the \r\n\t--\tToMeterReading = FromMeterReading + account billing ccf.\r\n\r\n\t-- (U.NumberOfRebillTransactions > 1) is the critical way to determine if there were multiple re-bills\r\n\r\n\tUPDATE U\r\n\tSET RevisedBilledCCF = V.MeterCcf+V.netCCF, \r\n\t\tMeterToReading = U.MeterFromReading+V.MeterCcf+V.netCCF,\r\n\t\tCcf =V.MeterCcf+V.netCCF\r\n\tFROM ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS V\r\n\t\tINNER JOIN ConEd.UploadConEdisonMeterBillingAdjustmentGas AS U ON V.UniqueAccountSeqID = U.UniqueAccountSeqID\r\n            AND V.BillingPeriodRevision = U.BillingPeriodRevision\r\n\tWHERE V.netCCF <> 0 AND U.NumberOfRebillTransactions > 1;\r\n\r\n\t--\tIdentify all Gas Usage Discrepancies\r\n\r\n\tSELECT * FROM ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling\r\n\r\n\t--\tUpdate the notes of all meters that have a discrepancy with the account billing and\r\n\t--\tpreserve the incorrect amount AS part of what was actual reported by the utility company.\r\n\r\n\tUPDATE ConEd.UploadConEdisonMeterBillingAdjustmentGas\r\n\tSET Notes = 'Account and Meter Billing Discrepancies  ' +\r\n\t\tCASE WHEN V.netTherms <> 0 THEN 'Net Therms('+ CAST(V.netTherms AS VARCHAR(10))+') ' +\r\n\t\tCASE WHEN V.netCCF <> 0 THEN ')  CCF('+ CAST(V.netCCF AS VARCHAR(10))+')  '  ELSE '' END + \r\n\t\t\t':           Reported: Therms('+ CAST(V.AccountTotalTherms AS VARCHAR(10)) +')           CCF('+ CAST(V.AccountTotalCcf AS VARCHAR(10)) +')           ThermsFactor('+ CAST(V.AccountTotalThermsFactor AS VARCHAR(10)) +')  ' ELSE '' END\r\n\tFROM ConEd.UploadConEdisonMeterBillingAdjustmentGas AS U\r\n\t\tINNER JOIN ConEd.uvw_GasUsageDiscrepanciesBetweenAccountAndMeterReportedBilling AS V ON U.BillingPeriod = V.BillingPeriod\r\n            AND U.BillingPeriodRevision = V.BillingPeriodRevision\r\n            AND U.UniqueAccountSeqID = V.UniqueAccountSeqID;\r\nEND;"
        }
      ]
    }
  ]
}