{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "NationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_LegacyData_ParseSpannedAccountInfo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_LegacyData_ParseSpannedAccountInfo",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to process and parse billing data for accounts that have billing periods spanning multiple periods. It operates within the "
        },
        {
          "type": "text",
          "text": "NationalGridWest",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema and focuses on distributing billing amounts, therms, and CCF (hundred cubic feet of gas) across these spanned periods. The procedure uses a cursor to iterate over records in the "
        },
        {
          "type": "text",
          "text": "UploadLegacyKeyspanWestAccountTempSummarySpanned",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table where the "
        },
        {
          "type": "text",
          "text": "DeltaNumberOfPeriods",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is greater than one, indicating that the billing spans multiple periods. It calculates and distributes the billing amounts and usage metrics proportionally across these periods and inserts the parsed data into the "
        },
        {
          "type": "text",
          "text": "UploadLegacyKeyspanWestAccountSummary",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " table."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to several factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple calculations and transformations of data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses a cursor to iterate over potentially large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves complex business logic for distributing billing amounts and usage metrics."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It interacts with multiple user-defined functions and tables, which adds layers of complexity."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingPeriod varchar(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing period in "
                },
                {
                  "type": "text",
                  "text": "YYYYMM",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " format."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@authenticatedID int",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the authenticated user executing the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BillingCycle varchar(1)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Represents the billing cycle, which is used in calculations and determining billing periods."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Variable Declaration",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure declares numerous variables to hold data from the current record and intermediate calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Declaration and Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A cursor named "
                },
                {
                  "type": "text",
                  "text": "SpannedGasBillCursor",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is declared to fetch records from "
                },
                {
                  "type": "text",
                  "text": "UploadLegacyKeyspanWestAccountTempSummarySpanned",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " where "
                },
                {
                  "type": "text",
                  "text": "DeltaNumberOfPeriods",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is greater than one."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Main Processing Loop",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "The cursor iterates over each record, fetching data into local variables."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It calculates the total gas spanned billed percentage using a user-defined function."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It initializes counters and sums for distributing the billing amounts and usage metrics."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "A loop distributes the billing amounts and usage metrics across the periods, calculating monthly percentages and applying them to the amounts."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For each period, it inserts a record into "
                        },
                        {
                          "type": "text",
                          "text": "UploadLegacyKeyspanWestAccountSummary",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " with the calculated values."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "It updates the billing period revision and dates for the next iteration."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Period Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After the loop, it processes the last period separately to account for any remaining amounts due to rounding."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Cleanup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The cursor is closed and deallocated after processing all records."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Cursor Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a cursor can lead to performance bottlenecks, especially if the dataset is large. Cursors are generally slower than set-based operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Calculations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves multiple calculations and function calls, which can be computationally expensive."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Scans",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Depending on the size of the "
                },
                {
                  "type": "text",
                  "text": "UploadLegacyKeyspanWestAccountTempSummarySpanned",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table and the presence of indexes, the initial SELECT statement for the cursor might result in a table scan."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Rounding Errors",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves rounding operations, which might lead to small discrepancies in the distributed amounts."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If multiple instances of this procedure are run simultaneously, there could be issues with data consistency or locking."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions and incomplete data processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dependency on External Functions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on several user-defined functions, which could introduce additional points of failure or performance issues if not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the data in the source table is accurate and complete. Any discrepancies in the source data could lead to incorrect calculations and results."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\t<Description,,>\r\n-- =============================================\r\nCREATE PROCEDURE [NationalGridWest].[usp_LegacyData_ParseSpannedAccountInfo] \r\n\t@BillingPeriod varchar(6),\r\n\t@authenticatedID int,\r\n\t@BillingCycle varchar(1)\r\nAS\r\nBEGIN\r\n\t/*\r\n2. Parse Spanned Billed uploaded\r\n*/\r\n\r\n--************************************************************************************** \r\n--Declare Variables                                            \r\n--**************************************************************************************\r\n--\r\ndeclare @UploadAccountTempSummarySpannedSeqid dbo.seqid\r\n--\r\ndeclare @Notes dbo.notes\r\ndeclare @AccountNumber dbo.acctnum\r\ndeclare @FacilityName dbo.UtilityServiceAccountName\r\ndeclare @ServiceAddress dbo.addr\r\ndeclare @TariffCode dbo.tariff\r\ndeclare @PostingDate dbo.PostingDate\r\n--\r\ndeclare @NumberOfPeriodsMinusOne dbo.Accumulator\r\ndeclare @DeltaNumberOfPeriods dbo.Accumulator\r\n\r\ndeclare @FirstPeriodCanceled dbo.yyyymm \r\ndeclare @ThermFactor dbo.ThermsFactor \r\ndeclare @FudgedThermFactor dbo.ThermsFactor \r\ndeclare @BillingPeriodRevision dbo.yyyymm \r\ndeclare @FromDate dbo.yyyymmdd \r\ndeclare @ToDate dbo.yyyymmdd \r\ndeclare @CalculatedBillingPeriodRevision dbo.yyyymm \r\ndeclare @CalculatedFromDate dbo.yyyymmdd \r\ndeclare @CalculatedToDate dbo.yyyymmdd \r\ndeclare @BilledAmount dbo.BillingAmt \r\ndeclare @BilledAmountMonthly dbo.BillingAmt \r\ndeclare @BilledAmountMonthlySum dbo.BillingAmt \r\ndeclare @BilledAmountAverage dbo.BillingAmt \r\ndeclare @BilledAmountRemainder dbo.BillingAmt \r\ndeclare @BillingPeriodDays dbo.Accumulator \r\ndeclare @BillingPeriodDaysAverage dbo.Accumulator \r\ndeclare @BillingPeriodDaysRemainder dbo.Accumulator \r\ndeclare @Therms dbo.EnergyUnit \r\ndeclare @LastPeriodTherms dbo.EnergyUnit \r\ndeclare @ThermsAverage dbo.EnergyUnit \r\ndeclare @ThermsRemainder dbo.EnergyUnit \r\ndeclare @CCF dbo.EnergyUnit \r\ndeclare @CCFAverage dbo.EnergyUnit \r\ndeclare @CCFRemainder dbo.EnergyUnit \r\ndeclare @SumAverageCCF dbo.EnergyUnit \r\ndeclare @idx int\r\ndeclare @StartingBillingPeriodDaysIncrement int\r\ndeclare @StartingBillingPeriodCCFIncrement int\r\ndeclare @StartingBillingPeriodThermsIncrement int\r\ndeclare @IncrementBillingPeriodDays int\r\ndeclare @IncrementBillingPeriodCCF int\r\ndeclare @IncrementBillingPeriodTherms int\r\n-- \r\ndeclare @BilledAmountMonthlyLastPeriod dbo.BillingAmt\r\ndeclare @ThermsMonthlyLastPeriod dbo.EnergyUnit \r\ndeclare @CCFMonthlyLastPeriod dbo.EnergyUnit \r\n\r\ndeclare @UtilityCode dbo.seqid\r\ndeclare @ApplyMonthlyPercentage  dbo.DiscountPercentage\r\ndeclare @ThermsMonthlySum  dbo.EnergyUnit \r\ndeclare @ThermsMonthly  dbo.EnergyUnit \r\ndeclare @CCFMonthly  dbo.EnergyUnit \r\ndeclare @CCFMonthlySum  dbo.EnergyUnit \r\ndeclare @TotalGasSpannedBilledPercentage dbo.DiscountPercentage\r\n\r\n\r\n--**************************************************************************************  \r\n--SET DEFAULTS                                                  \r\n--**************************************************************************************\r\n\r\n\r\nset @UtilityCode = 2\r\n\r\n\r\n--**************************************************************************************  \r\n--Main Process                                      \r\n--**************************************************************************************\r\n\r\n--\tDECLARE a cursor to find all account bills that span more than one period.\r\nDECLARE SpannedGasBillCursor CURSOR FOR\r\nSELECT UploadLegacyKeyspanWestAccountTempSummarySpannedSeqid FROM NationalGridWest.UploadLegacyKeyspanWestAccountTempSummarySpanned\r\nwhere (DeltaNumberOfPeriods > 1)\r\n\r\nOPEN SpannedGasBillCursor; -- open curser\r\n\r\nFETCH NEXT FROM SpannedGasBillCursor INTO @UploadAccountTempSummarySpannedSeqid\r\n--\r\n-- Check @@FETCH_STATUS to see if there are any more rows to fetch.\r\n--\r\nWHILE @@FETCH_STATUS = 0\r\nBEGIN -- begin processing for fetched record\r\n\t\r\n\t/*\r\n\t\t1. set value for variables for parsing purposes\r\n\t*/\t\r\n\tSELECT  \r\n\t\t@DeltaNumberOfPeriods=DeltaNumberOfPeriods,  \r\n\t\t@BillingPeriodRevision=BillingPeriodRevision, \r\n\t\t@FirstPeriodCanceled=FirstPeriodCanceled, \r\n\t\t@FromDate=FromDate,\r\n\t\t@ToDate=ToDate,\r\n\t\t@BilledAmount=BilledAmount, \r\n\t\t@CCF=CCF, \r\n\t\t@Therms=Therms, \r\n\t\t@ThermFactor=ThermFactor,\r\n\t\t@BillingPeriodDays=BillingPeriodDays,\r\n\t\t@BillingPeriod = BillingPeriod,\r\n\t\t@AccountNumber=AccountNumber,\r\n\t\t@FacilityName=FacilityName,\r\n\t\t@ServiceAddress =ServiceAddress,\r\n\t\t@TariffCode=TariffCode,\r\n\t\t@PostingDate=PostingDate\r\n\tFROM NationalGridWest.UploadLegacyKeyspanWestAccountTempSummarySpanned\r\n\tWHERE   (UploadLegacyKeyspanWestAccountTempSummarySpannedSeqid = @UploadAccountTempSummarySpannedSeqid) \r\n\r\n\t/*\r\n\t\t2. Distribute over spanned based on given percentage\r\n\t*/\r\n\r\n\t-- 2.1 periodAggregate the average City wide monthly gas usage percentage for the spanned row billing periods \r\n\tselect @TotalGasSpannedBilledPercentage= dbo.[CalculateTotalGasSpannedBilledPercentage] (@BillingCycle,@DeltaNumberOfPeriods,@FirstPeriodCanceled,@BillingPeriodRevision)\r\n\t\t\r\n\t-- 2.2 Determine the number of periods minus 1 to pro-rate the money and usage.  The last period will derive the money and usage\r\n\t--\tby row totals - (the n-1 aggregates of money and usage)\r\n\tset @NumberOfPeriodsMinusOne = @DeltaNumberOfPeriods-1\r\n\r\n\r\n\t--\r\n\t--\t2.3 Initialize the counters for the n-1 parses\r\n\t--\r\n\tset @CalculatedBillingPeriodRevision = @FirstPeriodCanceled\r\n\tset @CalculatedFromDate = @FromDate\r\n\tset @CalculatedToDate = @ToDate\r\n\tset @idx = 0\r\n\tset @BilledAmountMonthlySum = 0.00\r\n\tset @ThermsMonthlySum = 0\r\n\tset @CCFMonthlySum = 0\r\n\t--\r\n\t\r\n\t--- 2.4 distribute / parse\r\n\twhile (@NumberOfPeriodsMinusOne > @idx)\r\n\tBegin \r\n\r\n\t\t-- 2.4.1 set value for required variables\r\n\r\n\t\t-- The @ApplyMonthlyPercentage holds the weigthed average for the particular month\r\n\t\tselect @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\r\n\t\t--\r\n\t\t-- Apply the Monthly Percentage to the CCF,Therms and Billed Amount and accumulate the weigthed average units.\r\n\t\t--\r\n\t\tset @BilledAmountMonthly = ROUND(@BilledAmount * @ApplyMonthlyPercentage,2)\r\n\t\tset @BilledAmountMonthlySum = @BilledAmountMonthlySum + @BilledAmountMonthly\r\n\t\tset @ThermsMonthly = ROUND(@Therms * @ApplyMonthlyPercentage,0)\r\n\t\tset @ThermsMonthlySum = @ThermsMonthlySum + @ThermsMonthly\r\n\t\tset @CCFMonthly = ROUND(@CCF * @ApplyMonthlyPercentage,0)\r\n\t\tset @CCFMonthlySum = @CCFMonthlySum + @CCFMonthly\r\n\t\t--\r\n\t\t--\tThe Billing Period Projected \"ToDate\" is derived from the table \"dbo.BillingPeriodProjected\" using the utility company seqid and the\r\n\t\t--\tRevisedBillingPeriod and using the \"EndofPeriodTodate\" as the derived \"Todate\" for the account.\r\n\t\t--\r\n\t\tselect @CalculatedToDate=\r\n\t\t\tNationalGridWest.DeterminActualDate(@AccountNumber, 'T', @CalculatedBillingPeriodRevision, @BillingCycle)\r\n\r\n\t\tif(@CalculatedToDate is null)\r\n\t\t\tselect @CalculatedToDate = NationalGridWest.DetermineProjectedDate(@BillingCycle, @CalculatedBillingPeriodRevision, 'T', substring(@AccountNumber,12,2)) \r\n\t\t\r\n\r\n\t\t-- 2.4.2\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t\t--\tIt will note in EC3 that the transaction was derived.\r\n\t\tselect @Notes = SUBSTRING('Therm factor '+cast(@ThermFactor as varchar(6))+\r\n\t\t' for '+cast(@DeltaNumberOfPeriods as varchar(6))+' First: '+@FirstPeriodCanceled +' ( '+@FromDate+') Last: '+ \r\n\t\t@BillingPeriodRevision +' ( '+@FromDate+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+cast(@ApplyMonthlyPercentage as varchar(10))+\r\n\t\t' - Total %: '+cast(@TotalGasSpannedBilledPercentage as varchar(10)), 1, 300)\r\n\r\n\t\t--\r\n\t\t-- 2.4.3  INSERT the data into the summary table\r\n\t\t--\t\t\r\n\t\tINSERT INTO NationalGridWest.UploadLegacyKeyspanWestAccountSummary\r\n\t\t\t(\r\n\t\t\t\tAccountUtilityCompanySeqid, \r\n\t\t\t\tOriginalAccountNumber, \r\n\t\t\t\tNumberOfRebillTransactions, \r\n\t\t\t\tNumberOfTransactions, \r\n\t\t\t\tDerivedFromSpannedBill,\r\n\t\t\t\tBillingPeriod, \r\n\t\t\t\tBillingPeriodRevision, \r\n\t\t\t\tFirstCanceledBillingPeriod, \r\n\t\t\t\tEstimatedOrActualBilling, \r\n\t\t\t\tInitialCancelFromDate, \r\n\t\t\t\tCurrentBillingToDate, \r\n\t\t\t\tNumberOfBillingPeriods, \r\n\t\t\t\tTotalBillingDaysRebilled, \r\n\t\t\t\tTotalRebilledAmount, \r\n\t\t\t\tTotalCanceledAmount, \r\n\t\t\t\tPriorRevisedBilledAmount, \r\n\t\t\t\tRevisedBilledAmount, \r\n\t\t\t\tCanceledBilledAmount, \r\n\t\t\t\tAverageRebillCostOfGasCharge,\r\n\t\t\t\tAverageRebillThermsFactor, \r\n\t\t\t\tBillingDays, \r\n\t\t\t\tBillingDate, \r\n\t\t\t\tFromDate, \r\n\t\t\t\tToDate, \r\n\t\t\t\tBillingAction, \r\n\t\t\t\tProcessedInTheCurrentPeriod, \t\t\t\t\r\n\t\t\t\tGasRateCode, \r\n\t\t\t\tDeliveryChargeAmount,\r\n\t\t\t\tTotalCCF, \r\n\t\t\t\tTotalTherms, \r\n\t\t\t\tThermsFactor, \t\t\t\t\r\n\t\t\t\tCancelFromDate, \r\n\t\t\t\tCancelToDate, \r\n\t\t\t\tCancelDeliveryChargeAmount,\r\n\t\t\t\tCancelTotalCCF, \r\n\t\t\t\tCancelTotalTherms, \r\n\t\t\t\tCancelThermsFactor, \r\n\t\t\t\tProcessEffectiveDate, \r\n\t\t\t\tNotes,\t\t\t    \r\n\t\t\t\tSpannedBillingPeriodRevision,\r\n\t\t\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\t\t\tSpannedBilledAmount,\r\n\t\t\t\tSpannedCCF,\r\n\t\t\t\tSpannedThermFactor,\r\n\t\t\t\tSpannedTherm,\r\n\t\t\t\tSpannedMonthlyPercentage,\r\n\t\t\t\tSpannedTotalPercentage,\r\n\t\t\t\tAuthenticatedUserID,\r\n\t\t\t\tDateAdded,\r\n\t\t\t\tLastUpdate,\r\n\t\t\t\tFacilityName,\r\n\t\t\t\tServiceAddress\r\n\t\t\t)\r\n\t\t\tSELECT \r\n\t\t\t\t@UtilityCode, \r\n\t\t\t\t@AccountNumber,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,   \r\n\t\t\t\t1, --  NumberOfRebillTransactions\r\n\t\t\t\t1, --  NumberOfTransactions\r\n\t\t\t\t'Y',  -- DerivedFromSpannedBill = 'Y'\r\n\t\t\t\tBillingPeriod, \r\n\t\t\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n\t\t\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n\t\t\t\tEstimatedOrActual,  -- EstimatedOrActualBilling needs to be updated\r\n\t\t\t\t@FromDate,  -- FromDate AS InitialCancelFromDate, \r\n\t\t\t\t@ToDate, --  ToDate AS CurrentBillingToDate,\r\n\t\t\t\t1, --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n\t\t\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n\t\t\t\t@BilledAmountMonthly, --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n\t\t\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n\t\t\t\t0 AS PriorRevisedBilledAmount,\r\n\t\t\t\t0, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n\t\t\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n\t\t\t\t0 AS AverageRebillCostOfGasCharge, \r\n\t\t\t\t1.00 AS AverageRebillThermsFactor, \r\n\t\t\t\t[dbo].[CalculateNumberOfBillingDays] (@CalculatedFromDate,@CalculatedToDate), -- IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t\t\t[dbo].ConvertDateToYYYYMMDD (@PostingDate), -- BillingDate\r\n\t\t\t\t@CalculatedFromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n\t\t\t\t@CalculatedToDate, -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n\t\t\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END, -- 'O' as BillingAction, --@BillingPeriod\r\n\t\t\t\t'N' AS ProcessedInTheCurrentPeriod, \r\n\t\t\t\tTariffCode, \r\n\t\t\t\t@BilledAmountMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n\t\t\t\t@CCFMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n\t\t\t\t@ThermsMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n\t\t\t\tCASE @CCFMonthly WHEN 0 THEN 1.0000 ELSE round(@ThermsMonthly*1.0 / @CCFMonthly,4) END,--  IsNull(UploadConEdisonAccountTempSummarySPanned.ThermFactor,1.0) AS ThermsFactor,\r\n\t\t\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n\t\t\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n\t\t\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n\t\t\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n\t\t\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n\t\t\t\t1.0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n\t\t\t\t[dbo].ConvertDateToYYYYMMDD (GETDATE()), -- ProcessEffectiveDate\r\n\t\t\t\t@Notes,\r\n\t\t\t    @BillingPeriodRevision,\r\n\t\t\t    @FirstPeriodCanceled,\r\n\t\t\t    @BilledAmount,\r\n\t\t\t    @CCF,\r\n\t\t\t    @ThermFactor,\r\n\t\t\t    @Therms,\r\n\t\t\t    @ApplyMonthlyPercentage,\r\n\t\t\t    @TotalGasSpannedBilledPercentage,\r\n\t\t\t    @authenticatedID,\r\n\t\t\t    GETDATE(),\r\n\t\t\t    GETDATE(),\r\n\t\t\t    FacilityName,\r\n\t\t\t    ServiceAddress\r\n\t\t\tFROM     NationalGridWest.UploadLegacyKeyspanWestAccountTempSummarySpanned\r\n\t\t\tWHERE   (UploadLegacyKeyspanWestAccountTempSummarySpannedSeqid = @UploadAccountTempSummarySpannedSeqid) \r\n\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t--\r\n\t\t\t--\tSet up for the next the Revised Billing Period row.\r\n\t\t\t--\r\n\t\t\tset @SumAverageCCF = @SumAverageCCF + @CCFAverage \r\n\t\t\t--\r\n\t\t\t--\tCalculate the next the Revised Billing Period row.\r\n\t\t\tselect @CalculatedBillingPeriodRevision = [dbo].[CalculateNextBillingPeriod]  (@CalculatedBillingPeriodRevision,@BillingCycle)\r\n\t\t\t--\tThis will derive the new Revised Billing Period row's \"FromDate\"\r\n\t\t\t-- select @CalculatedFromDate = [dbo].[DetermineConEdisonBillingPeriodProjectedFromDate](@CalculatedBillingPeriodRevision,@TariffCode,@UtilityCode)\r\n\t\t\t\t\r\n\t\t\tselect @CalculatedFromDate=\r\n\t\t\tNationalGridWest.DeterminActualDate(@AccountNumber, 'F', @CalculatedBillingPeriodRevision, @BillingCycle)\r\n\r\n\t\t\tif(@CalculatedFromDate is null)\r\n\t\t\t\tselect @CalculatedFromDate = NationalGridWest.DetermineProjectedDate(@BillingCycle, @CalculatedBillingPeriodRevision, 'F', substring(@AccountNumber,12,2)) \r\n\t\t\t\r\n\t\tset @idx = @idx + 1\r\n\tend -- end distribute/parse\r\n\r\n\r\n\t--\r\n\t--\t2.4.4 Finish up the last period's processing\r\n\t--\r\n\t--\tUse the (Nth -1) periods @CalculatedToDate as the \"FromDate\" and the acutal \"ToDate\" from the spanned record as the \"ToDate\"\r\n\t--\r\n\tselect @CalculatedFromDate = @CalculatedToDate\r\n\tselect @CalculatedToDate = @ToDate\r\n\t--\r\n\t--\t@ApplyMonthlyPercentage is used for the notes purposes only\r\n\t--\r\n\tselect @ApplyMonthlyPercentage = [dbo].[CalculateApplyMonthlyPercentageGasSpannedBilled] (@CalculatedBillingPeriodRevision,@TotalGasSpannedBilledPercentage)\r\n\t--\r\n\t--\tDerive the net changes to avoid rounding errors\r\n\t--\r\n\tset @BilledAmountMonthlyLastPeriod = @BilledAmount - @BilledAmountMonthlySum\r\n\tset @ThermsMonthlyLastPeriod = @Therms - @ThermsMonthlySum\r\n\tset @CCFMonthlyLastPeriod = @CCF  - @CCFMonthlySum\r\n\r\n\t--\r\n\t--\tCreate a custom note that explains how the information was parsed and what was the original information of the spanned row.\r\n\t--\tIt will note in EC3 that the transaction was derived.\r\n\t--\r\n\tselect @Notes = SUBSTRING('Therm factor '+cast(@ThermFactor as varchar(6))+\r\n\t' for '+cast(@DeltaNumberOfPeriods as varchar(6))+' First: '+@FirstPeriodCanceled +' ( '+@FromDate+') Last: '+ \r\n\t@BillingPeriodRevision +' ( '+@FromDate+'). '+' period: '+@CalculatedBillingPeriodRevision+ ' Month %: '+cast(@ApplyMonthlyPercentage as varchar(10))+\r\n\t' - Total %: '+cast(@TotalGasSpannedBilledPercentage as varchar(10)), 1, 300)\t\r\n\r\n\t--\r\n\t--\tINSERT the data into the table \"NationalGridWest.UploadLegacyKeyspanWestAccountSummary\"\r\n\t--\r\n\tINSERT INTO NationalGridWest.UploadLegacyKeyspanWestAccountSummary\r\n\t\t(AccountUtilityCompanySeqid, \r\n\t\tOriginalAccountNumber, \r\n\t\tNumberOfRebillTransactions, \r\n\t\tNumberOfTransactions, \r\n\t\tDerivedFromSpannedBill,\r\n\t\tBillingPeriod, \r\n\t\tBillingPeriodRevision, \r\n\t\tFirstCanceledBillingPeriod, \r\n\t\tEstimatedOrActualBilling, \r\n\t\tInitialCancelFromDate, \r\n\t\tCurrentBillingToDate, \r\n\t\tNumberOfBillingPeriods, \r\n\t\tTotalBillingDaysRebilled, \r\n\t\tTotalRebilledAmount, \r\n\t\tTotalCanceledAmount, \r\n\t\tPriorRevisedBilledAmount, \r\n\t\tRevisedBilledAmount, \r\n\t\tCanceledBilledAmount, \r\n\t\tAverageRebillCostOfGasCharge,\r\n\t\tAverageRebillThermsFactor, \r\n\t\tBillingDays, \r\n\t\tBillingDate, \r\n\t\tFromDate, \r\n\t\tToDate, \r\n\t\tBillingAction, \r\n\t\tProcessedInTheCurrentPeriod, \r\n\t\tGasRateCode, \r\n\t\tDeliveryChargeAmount,\r\n\t\tTotalCCF, \r\n\t\tTotalTherms, \r\n\t\tThermsFactor, \r\n\t\tCancelFromDate, \r\n\t\tCancelToDate, \r\n\t\tCancelDeliveryChargeAmount,\r\n\t\tCancelTotalCCF, \r\n\t\tCancelTotalTherms, \r\n\t\tCancelThermsFactor, \r\n\t\tProcessEffectiveDate, \r\n\t\tNotes,\r\n\t\tSpannedBillingPeriodRevision,\r\n\t\tSpannedFirstCanceledBillingPeriod,\r\n\t\tSpannedBilledAmount,\r\n\t\tSpannedCCF,\r\n\t\tSpannedThermFactor,\r\n\t\tSpannedTherm,\r\n\t\tSpannedMonthlyPercentage,\r\n\t\tSpannedTotalPercentage,\r\n\t\tAuthenticatedUserID,\r\n\t\tDateAdded,\r\n\t\tLastUpdate,\r\n\t\tFacilityName,\r\n\t\tServiceAddress\r\n\t\t)\r\n\tSELECT \r\n\t\t@UtilityCode,\r\n\t\t@AccountNumber,  --  UploadConEdisonAccountTempSummarySPanned.AccountNumber,\r\n\t\t1, --  NumberOfRebillTransactions\r\n\t\t1, --  NumberOfTransactions\r\n\t\t'Y',  -- DerivedFromSpannedBill = 'Y'\r\n\t\tBillingPeriod, \r\n\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodRevision, \r\n\t\t@CalculatedBillingPeriodRevision, -- UploadConEdisonAccountTempSummarySPanned.FirstPeriodCanceled, \r\n\t\tEstimatedOrActual,  -- EstimatedOrActualBilling needs to be upodated\r\n\t\t@FromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate AS InitialCancelFromDate, \r\n\t\t@ToDate, --  UploadConEdisonAccountTempSummarySPanned.ToDate AS CurrentBillingToDate,\r\n\t\t[dbo].[CalculateDeltaBillingPeriods] (\r\n\t\t\tNationalGridWest.DetermineBillingPeriod(@BillingCycle, @CalculatedFromDate, 'F', substring(@AccountNumber,12,2)),\r\n\t\t\tNationalGridWest.DetermineBillingPeriod(@BillingCycle, @CalculatedToDate, 'T', substring(@AccountNumber,12,2)),\r\n\t\t\t@BillingCycle\r\n\t\t), --UploadConEdisonAccountTempSummarySPanned.DeltaNumberOfPeriods, \r\n\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), -- UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays AS TotalBillingDaysRebilled, \r\n\t\t@BilledAmountMonthlyLastPeriod, --  UploadConEdisonAccountTempSummarySPanned.BilledAmount AS TotalRebilledAmount, \r\n\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS TotalCanceledAmount,\r\n\t\t0 AS PriorRevisedBilledAmount,\r\n\t\t@BilledAmountMonthly, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount, 0), \r\n\t\t0, -- IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0), \r\n\t\t0 AS AverageRebillCostOfGasCharge, \r\n\t\t1.00 AS AverageRebillThermsFactor, \r\n\t\t[dbo].[CalculateNumberOfBillingDays]  (@CalculatedFromDate,@CalculatedToDate), --IsNull(UploadConEdisonAccountTempSummarySPanned.BillingPeriodDays,0), \r\n\t\t[dbo].ConvertDateToYYYYMMDD (@PostingDate), -- BillingDate\r\n\t\t@CalculatedFromDate,  -- UploadConEdisonAccountTempSummarySPanned.FromDate ,\r\n\t\t@CalculatedToDate, -- UploadConEdisonAccountTempSummarySPanned.ToDate, \r\n\t\tCASE WHEN @BillingPeriod = @CalculatedBillingPeriodRevision THEN 'O' ELSE 'A' END, -- 'O' as BillingAction, \r\n\t\t'N' AS ProcessedInTheCurrentPeriod, \r\n\t\tTariffCode, \r\n\t\t@BilledAmountMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.BilledAmount,0) AS DeliveryChargeAmount, \r\n\t\t@CCFMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.CCF,0) AS TotalCCF, \r\n\t\t@ThermsMonthlyLastPeriod, --  IsNull(UploadConEdisonAccountTempSummarySPanned.Therms,0) AS TotalTherms, \r\n\t\tCASE @CCFMonthlyLastPeriod WHEN 0 THEN 0 ELSE round(@ThermsMonthlyLastPeriod*1.0 / @CCFMonthlyLastPeriod,4) END,--  IsNull(UploadConEdisonAccountTempSummarySPanned.ThermFactor,1.0) AS ThermsFactor,\r\n\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelFromDate, \r\n\t\tnull, --  UploadConEdisonCancellationTempSummary.CancelToDate, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelBilledAmount,0) AS CancelDeliveryChargeAmount, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelCCF,0) AS CancelTotalCCF, \r\n\t\t0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelTherms,0) AS CancelTotalTherms, \r\n\t\t1.0, --  IsNull(UploadConEdisonCancellationTempSummary.CancelThermFactor,1.0) AS CancelThermsFactor\r\n\t\t[dbo].ConvertDateToYYYYMMDD (GETDATE()), -- ProcessEffectiveDate\r\n\t\t@Notes,\r\n\t    @BillingPeriodRevision,\r\n\t    @FirstPeriodCanceled,\r\n\t    @BilledAmount,\r\n\t    @CCF,\r\n\t    @ThermFactor,\r\n\t    @Therms,\r\n\t    @ApplyMonthlyPercentage,\r\n\t    @TotalGasSpannedBilledPercentage,\r\n\t\t@authenticatedID,\r\n\t\tGETDATE(),\r\n\t\tGETDATE(),\r\n\t\tFacilityName,\r\n\t\tServiceAddress\r\n\tFROM NationalGridWest.UploadLegacyKeyspanWestAccountTempSummarySpanned\r\n\tWHERE   (UploadLegacyKeyspanWestAccountTempSummarySpannedSeqid = @UploadAccountTempSummarySpannedSeqid) \r\n\r\n\t--\r\n\t--\tProcess the next row\r\n\t--\r\n\tFETCH NEXT FROM SpannedGasBillCursor INTO @UploadAccountTempSummarySpannedSeqid\r\nEnd -- end processing for fetched record\r\n\r\nCLOSE SpannedGasBillCursor; -- close cursor\r\nDEALLOCATE SpannedGasBillCursor;\r\n\r\nEND"
        }
      ]
    }
  ]
}