{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_Published_LookupTotalDollarsBtusAndRunningTotalCO2ByEnergyType",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_Published_LookupTotalDollarsBtusAndRunningTotalCO2ByEnergyType",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve and report energy usage data, including total dollars, BTUs, and CO2 emissions, categorized by energy type. It uses input parameters to filter data based on user roles and organizational hierarchy, such as citywide, agency, or facility levels. The procedure logs its usage and dynamically constructs queries to fetch data from a user-defined function, "
        },
        {
          "type": "text",
          "text": "uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", based on the specified parameters."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level is medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional logic based on user roles and organizational hierarchy."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic query construction using a user-defined function."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Integration with logging mechanisms."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Handling of fiscal year calculations and filtering."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EmailAddress AS VARCHAR(75)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The email address of the user requesting the report, used for logging and possibly filtering data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@CitywideAgencyOrFacility AS CHAR(2)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A code indicating the level of data aggregation (e.g., citywide, agency, facility)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@PublishedBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The billing period for which data is requested. If the user is an agency user, this is dynamically set to the current processing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AgencyCode AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The code of the agency for filtering data, applicable when the level is agency or facility."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@FacilityNumber AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The facility number for filtering data, applicable when the level is facility."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsAgencyUser AS BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating if the user is an agency user, affecting how the billing period is determined."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Setup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting "
                },
                {
                  "type": "text",
                  "text": "NOCOUNT ON",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to prevent extra result sets and sets the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to allow dirty reads, which can improve performance but risks reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Billing Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the user is an agency user ("
                },
                {
                  "type": "text",
                  "text": "@IsAgencyUser = 1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "), the procedure retrieves the current processing period from "
                },
                {
                  "type": "text",
                  "text": "Billing.ApplicationTimeFrame",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure logs its execution using "
                },
                {
                  "type": "text",
                  "text": "usp_AddReportUsageLog",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", capturing details like the report name, stored procedure name, and requested billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Fiscal Year Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It calculates the prior fiscal year using a function "
                },
                {
                  "type": "text",
                  "text": "dbo.CreateFiscalYear",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Based on the "
                },
                {
                  "type": "text",
                  "text": "@CitywideAgencyOrFacility",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " parameter, the procedure constructs and executes queries to retrieve data from "
                },
                {
                  "type": "text",
                  "text": "uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ". The queries are tailored to the specified level (citywide, agency, or facility) and include joins with "
                },
                {
                  "type": "text",
                  "text": "Billing.AgencyDivision",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for agency and facility levels."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Result Ordering",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The results are ordered by fiscal year, billing period, and energy type."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can improve performance by reducing locking overhead but risks reading uncommitted data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dynamic Queries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of a user-defined function with dynamic parameters can be efficient but may lead to complex execution plans."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Union Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "UNION ALL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can be resource-intensive if the datasets are large, as it combines results from multiple queries."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing on the tables involved, especially those used in joins and where clauses, can significantly improve performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dirty Reads",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " isolation level can lead to reading uncommitted or inconsistent data, which might not be suitable for all reporting needs."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter Lengths",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for "
                },
                {
                  "type": "text",
                  "text": "@AgencyCode",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "@FacilityNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " might be excessive if these values have a known maximum length, potentially leading to inefficient memory usage."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complexity in Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The conditional logic and dynamic query construction can make the procedure harder to maintain and debug."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the dataset grows, the performance of "
                },
                {
                  "type": "text",
                  "text": "UNION ALL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and the user-defined function might degrade, necessitating optimization or refactoring."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Report].[usp_Published_LookupTotalDollarsBtusAndRunningTotalCO2ByEnergyType]\n(\r\n\t@EmailAddress AS VARCHAR(75)\r\n\t,@CitywideAgencyOrFacility AS CHAR(2)\r\n\t,@PublishedBillingPeriod AS VARCHAR(6)\r\n\t,@AgencyCode AS VARCHAR(MAX)\r\n\t,@FacilityNumber AS VARCHAR(MAX)\r\n\t,@IsAgencyUser AS BIT = 0\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @spname AS VARCHAR(100) = OBJECT_NAME(@@PROCID);\r\n\r\n\tIF (@IsAgencyUser = 1)\r\n\tBEGIN\r\n\t\tSELECT @PublishedBillingPeriod = PublishedBillingPeriod FROM Billing.ApplicationTimeFrame WHERE CurrentProcessingPeriod = 'Y';\r\n\tEND;\r\n\r\n\tEXEC [Audit].usp_AddReportUsageLog\r\n\t\t@ReportName = @spname,\r\n\t\t@StoredProcName = @spname,\r\n\t\t@RequestedBy = @EmailAddress,\r\n\t\t@prmPublishedBillingPeriod = @PublishedBillingPeriod,\r\n\t\t@prmBillingPeriod = NULL,\r\n\t\t@prmAgency_ies = NULL,\r\n\t\t@prmFacilityNumber_s = NULL,\r\n\t\t@prmStartingBillingPeriod = NULL,\r\n\t\t@prmEndingBillingPeriod = NULL;\r\n\r\n\tDECLARE @PriorFY AS VARCHAR(4);\r\n\tSELECT @PriorFY = dbo.CreateFiscalYear(@PublishedBillingPeriod, 'P');\r\n\t\r\n\tIF (@CitywideAgencyOrFacility in ('CW','CE'))\r\n\tBEGIN\r\n\t\tSELECT R.CitywideAgencyOrFacility,\r\n            R.PublishedBillingPeriod,\r\n            R.FiscalYear,\r\n            R.BillingPeriod,\r\n            R.EnergyType,\r\n            R.AgencyCodeOEC,\r\n            R.FacilityNumber,\r\n            R.TotalBilledAmount,\r\n            R.TotalCO2,\r\n            R.TotalBTU,\r\n            R.PublishedBillingPeriodRunningTotalCO2,\r\n            R.YtdRunningTotalCO2,\r\n            R.[month],\r\n            R.CurrentFiscalYear,\r\n            R.PriorFiscalYear,\r\n            R.EnergyUsage,\r\n            R.DemandUsage,\r\n            R.PublishedPeriodCurrentFiscalYear,\r\n            R.PublishedPeriodPriorFiscalYear,\r\n            R.AgencyName AS AgencyName,\r\n            R.FacilityName,\r\n            R.Address1,\r\n            R.Borough,\r\n            R.[Block],\r\n            R.LotNumber,\r\n            R.CityPlanningBIN,\r\n            R.SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'CW', @PublishedBillingPeriod, NULL, NULL, NULL) AS R\r\n\t\tWHERE R.FiscalYear >= @PriorFY\r\n\t\tUNION ALL \r\n\t\tSELECT R.CitywideAgencyOrFacility,\r\n            R.PublishedBillingPeriod,\r\n            R.FiscalYear,\r\n            R.BillingPeriod,\r\n            R.EnergyType,\r\n            R.AgencyCodeOEC,\r\n            R.FacilityNumber,\r\n            R.TotalBilledAmount,\r\n            R.TotalCO2,\r\n            R.TotalBTU,\r\n            R.PublishedBillingPeriodRunningTotalCO2,\r\n            R.YtdRunningTotalCO2,\r\n            R.[month],\r\n            R.CurrentFiscalYear,\r\n            R.PriorFiscalYear,\r\n            R.EnergyUsage,\r\n            R.DemandUsage,\r\n            R.PublishedPeriodCurrentFiscalYear,\r\n            R.PublishedPeriodPriorFiscalYear,\r\n            R.AgencyName AS AgencyName,\r\n            R.FacilityName,\r\n            R.Address1,\r\n            R.Borough,\r\n            R.[Block],\r\n            R.LotNumber,\r\n            R.CityPlanningBIN,\r\n            R.SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'CE', @PublishedBillingPeriod, NULL, NULL, NULL) AS R\r\n\t\tWHERE R.FiscalYear >= @PriorFY\r\n\t\tORDER BY FiscalYear DESC, BillingPeriod, EnergyType;\r\n\tEND;\r\n\tELSE IF (@CitywideAgencyOrFacility in ('AG','AE'))\r\n\tBEGIN\r\n\t\tSELECT R.CitywideAgencyOrFacility,\r\n            R.PublishedBillingPeriod,\r\n            R.FiscalYear,\r\n            R.BillingPeriod,\r\n            R.EnergyType,\r\n            R.AgencyCodeOEC,\r\n            R.FacilityNumber,\r\n            R.TotalBilledAmount,\r\n            R.TotalCO2,\r\n            R.TotalBTU,\r\n            R.PublishedBillingPeriodRunningTotalCO2,\r\n            R.YtdRunningTotalCO2,\r\n            R.[month],\r\n            R.CurrentFiscalYear,\r\n            R.PriorFiscalYear,\r\n            R.EnergyUsage,\r\n            R.DemandUsage,\r\n            R.PublishedPeriodCurrentFiscalYear,\r\n            R.PublishedPeriodPriorFiscalYear,\r\n            R.AgencyName + ' (' + AD.AgencyShortDesc + ')' AS AgencyName,\r\n            R.FacilityName,\r\n            R.Address1,\r\n            R.Borough,\r\n            R.[Block],\r\n            R.LotNumber,\r\n            R.CityPlanningBIN,\r\n            R.SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'AG', @PublishedBillingPeriod, @AgencyCode, NULL, NULL) AS R\r\n\t\t\tINNER JOIN Billing.AgencyDivision AS AD ON AD.AgencyCodeOEC = R.AgencyCodeOEC\r\n\t\tWHERE R.FiscalYear >= @PriorFY\r\n\t\tUNION ALL \r\n\t\tSELECT R.CitywideAgencyOrFacility,\r\n            R.PublishedBillingPeriod,\r\n            R.FiscalYear,\r\n            R.BillingPeriod,\r\n            R.EnergyType,\r\n            R.AgencyCodeOEC,\r\n            R.FacilityNumber,\r\n            R.TotalBilledAmount,\r\n            R.TotalCO2,\r\n            R.TotalBTU,\r\n            R.PublishedBillingPeriodRunningTotalCO2,\r\n            R.YtdRunningTotalCO2,\r\n            R.[month],\r\n            R.CurrentFiscalYear,\r\n            R.PriorFiscalYear,\r\n            R.EnergyUsage,\r\n            R.DemandUsage,\r\n            R.PublishedPeriodCurrentFiscalYear,\r\n            R.PublishedPeriodPriorFiscalYear,\r\n            R.AgencyName + ' (' + AD.AgencyShortDesc + ')' AS AgencyName,\r\n            R.FacilityName,\r\n            R.Address1,\r\n            R.Borough,\r\n            R.[Block],\r\n            R.LotNumber,\r\n            R.CityPlanningBIN,\r\n            R.SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'AE', @PublishedBillingPeriod, @AgencyCode, NULL, NULL) AS R\r\n\t\t\tINNER JOIN Billing.AgencyDivision AS AD ON AD.AgencyCodeOEC = R.AgencyCodeOEC\r\n\t\tWHERE R.FiscalYear >= @PriorFY\r\n\t\tORDER BY FiscalYear DESC, BillingPeriod, EnergyType;\r\n\tEND;\r\n\tELSE IF (@CitywideAgencyOrFacility in ('FA','FE'))\r\n\tBEGIN\r\n\t\tSELECT R.CitywideAgencyOrFacility,\r\n            R.PublishedBillingPeriod,\r\n            R.FiscalYear,\r\n            R.BillingPeriod,\r\n            R.EnergyType,\r\n            R.AgencyCodeOEC,\r\n            R.FacilityNumber,\r\n            R.TotalBilledAmount,\r\n            R.TotalCO2,\r\n            R.TotalBTU,\r\n            R.PublishedBillingPeriodRunningTotalCO2,\r\n            R.YtdRunningTotalCO2,\r\n            R.[month],\r\n            R.CurrentFiscalYear,\r\n            R.PriorFiscalYear,\r\n            R.EnergyUsage,\r\n            R.DemandUsage,\r\n            R.PublishedPeriodCurrentFiscalYear,\r\n            R.PublishedPeriodPriorFiscalYear,\r\n            R.AgencyName + ' (' + AD.AgencyShortDesc + ')' AS AgencyName,\r\n            R.FacilityName,\r\n            R.Address1,\r\n            R.Borough,\r\n            R.[Block],\r\n            R.LotNumber,\r\n            R.CityPlanningBIN,\r\n            R.SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'FA', @PublishedBillingPeriod, @AgencyCode, @FacilityNumber, NULL) AS R\r\n\t\t\tINNER JOIN Billing.AgencyDivision AS AD ON AD.AgencyCodeOEC = R.AgencyCodeOEC\r\n\t\tWHERE R.FiscalYear >= @PriorFY \r\n\t\tUNION ALL \r\n\t\tSELECT R.CitywideAgencyOrFacility,\r\n            R.PublishedBillingPeriod,\r\n            R.FiscalYear,\r\n            R.BillingPeriod,\r\n            R.EnergyType,\r\n            R.AgencyCodeOEC,\r\n            R.FacilityNumber,\r\n            R.TotalBilledAmount,\r\n            R.TotalCO2,\r\n            R.TotalBTU,\r\n            R.PublishedBillingPeriodRunningTotalCO2,\r\n            R.YtdRunningTotalCO2,\r\n            R.[month],\r\n            R.CurrentFiscalYear,\r\n            R.PriorFiscalYear,\r\n            R.EnergyUsage,\r\n            R.DemandUsage,\r\n            R.PublishedPeriodCurrentFiscalYear,\r\n            R.PublishedPeriodPriorFiscalYear,\r\n            R.AgencyName + ' (' + AD.AgencyShortDesc + ')' AS AgencyName,\r\n            R.FacilityName,\r\n            R.Address1,\r\n            R.Borough,\r\n            R.[Block],\r\n            R.LotNumber,\r\n            R.CityPlanningBIN,\r\n            R.SummaryORDetail\r\n\t\tFROM Factors.uftn_TableTotalDollarsBtusAndRunningTotalCO2ByAgencyHierarchy(@EmailAddress, 'FE', @PublishedBillingPeriod, @AgencyCode, @FacilityNumber, NULL) AS R\r\n\t\t\tINNER JOIN Billing.AgencyDivision AS AD ON AD.AgencyCodeOEC = R.AgencyCodeOEC\r\n\t\tWHERE R.FiscalYear >= @PriorFY \r\n\t\tORDER BY FiscalYear DESC, BillingPeriod, EnergyType;\r\n\tEND;\r\nEND;"
        }
      ]
    }
  ]
}