{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "NationalGridWest",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "usp_LegacyData_ValidateProcessedData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "usp_LegacyData_ValidateProcessedData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to validate processed data against raw data for a legacy system. It checks for discrepancies in financial and consumption data (such as billed amounts, therms, and CCF) between processed records and raw data files. The procedure is part of the "
        },
        {
          "type": "text",
          "text": "NationalGridWest",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " schema and is used to ensure data integrity by comparing sums of various metrics across different tables. It outputs a validation result and a message indicating success or detailing errors encountered during validation."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is considered medium due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional checks and comparisons across several tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses dynamic SQL to construct error messages and lists of accounts with discrepancies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes logic for handling different types of data validations (account, account cancellation, meter, and meter cancellation)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple nested queries and conditional logic to determine validation results."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@targetOfValidation varchar(50)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Specifies the type of data to validate. Acceptable values are 'account', 'account_cancellation', 'meter', and 'meter_cancellation'."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@validationResult bit output",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that indicates the result of the validation. A value of 1 indicates success, while 0 indicates failure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@validationMessage varchar(2000) output",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter that contains a message detailing the validation results or errors encountered."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure initializes "
                },
                {
                  "type": "text",
                  "text": "@validationResult",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to 1 (success) and ensures "
                },
                {
                  "type": "text",
                  "text": "@validationMessage",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is not null."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validation Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Account Validation",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Checks if the sum of billed amounts, therms, and CCF in the processed data matches the raw data. If discrepancies are found, it sets "
                        },
                        {
                          "type": "text",
                          "text": "@validationResult",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " to 0 and appends an error message."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Account Cancellation Validation",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Similar checks are performed for cancelled billed amounts, therms, and CCF."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Meter Validation",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Includes checks for discrepancies in therms and CCF at the meter level. It also checks for consistency in billing period cancellations across meters within the same account."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Meter Cancellation Validation",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": Validates cancelled therms and CCF at the meter level."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If any validation fails, the procedure constructs detailed error messages, including lists of accounts with discrepancies."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Query Efficiency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses aggregate functions and subqueries, which can be resource-intensive, especially on large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing on columns used in joins and where clauses (e.g., "
                },
                {
                  "type": "text",
                  "text": "AccountNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "OriginalAccountNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ") can improve performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure does not include transaction handling, which could lead to inconsistent results if data changes during execution."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of aggregate queries may degrade, leading to longer execution times."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Message Length",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure constructs error messages dynamically, which could exceed the "
                },
                {
                  "type": "text",
                  "text": "varchar(2000)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " limit if many discrepancies are found."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Type Conversions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of functions like "
                },
                {
                  "type": "text",
                  "text": "ConvertOverpunch",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "ConvertOverpunch9ToMoney",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " for data conversion could introduce errors if not handled correctly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure relies on specific table structures and column names, making it less adaptable to schema changes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Lack of Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Without explicit transaction handling, the procedure may produce inconsistent results if data is modified concurrently."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "-- =============================================\n-- Author:\t\t<Author,,Name>\r\n-- Create date: <Create Date,,>\r\n-- Description:\tValidate data that has been processed\r\n-- =============================================\r\nCREATE PROCEDURE [NationalGridWest].[usp_LegacyData_ValidateProcessedData]\r\n\t@targetOfValidation varchar(50),  -- account || account_cancellation\r\n\t@validationResult bit output, -- 1: success; 0: fail\r\n\t@validationMessage varchar(2000) output --  message return  \t\r\nAS\r\nBEGIN -- begin procedure\r\n\r\nset @validationResult = 1\r\n\r\nIF(@validationMessage IS NULL)\r\n\tSET @validationMessage = ''\r\n/*************************************************************\r\nValidate Account\r\n*************************************************************/\r\nif(lower(@targetOfValidation) = 'account')\r\nbegin -- begin validate account\r\n\r\n\t-- billed amount\r\n\tselect \r\n\t\t@validationResult = 0, \r\n\t\t@validationMessage = @validationMessage + 'There is an error processing acount level information. Sum of Billed Amount does not match the sum of billed amount in the raw data file. Process is stopped at account level processing.' \r\n\twhere\r\n\t(select SUM(TotalRebilledAmount) FROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas) \r\n\t<> \r\n\t(select sum(dbo.ConvertOverpunch9ToMoney(BilledAmount)) from\r\nNationalGridWest.UploadLegacyNationalGridWestDataPreload\r\nwhere cast(dbo.ConvertOverpunch(BilledAmount) as money) > 0)\r\n\t\r\n\t-- therm\r\n\tselect \r\n\t\t@validationResult = 0, \r\n\t\t@validationMessage = @validationMessage + 'There is an error processing acount level information. Sum of therms does not match the sum of therm in the raw data file. Process is stopped at account level processing.' \r\n\twhere\r\n\t(select SUM(TotalTherms) FROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas) \r\n\t<> \r\n\t(select sum(cast(dbo.ConvertOverpunch(Therms) as int)) from\r\nNationalGridWest.UploadLegacyNationalGridWestDataPreload\r\nwhere cast(dbo.ConvertOverpunch(BilledAmount) as money) > 0)\r\n\r\n\r\n\t-- ccf\r\n\tselect \r\n\t\t@validationResult = 0, \r\n\t\t@validationMessage = @validationMessage + 'There is an error processing acount level information. Sum of ccf does not match the sum of ccf in the raw data file. Process is stopped at account level processing.' \r\n\twhere\r\n\t(select SUM(TotalCCF) FROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas) \r\n\t<>\r\n\t(select sum(cast(dbo.ConvertOverpunch(CCF) as int)) from\r\nNationalGridWest.UploadLegacyNationalGridWestDataPreload\r\nwhere cast(dbo.ConvertOverpunch(BilledAmount) as money) > 0)\r\n \t\r\nend -- end account level validation\r\n\r\n\r\n\r\n\r\n\r\n\r\n/***********************************************************\r\nValidate Account Cancellation\r\n***********************************************************/\r\n\r\nif(lower(@targetOfValidation) = 'account_cancellation')\r\nbegin -- begin validate account cancellation\r\n\r\n\t-- cancelled billed amount\r\n\tselect \r\n\t\t@validationResult = 0, \r\n\t\t@validationMessage = @validationMessage + 'There is an error processing acount level cancellation information. Sum of Cancel Billed Amount does not match the sum of cancelled billed amount in the raw data file. Process is stopped at account level cancellation processing.' \r\n\twhere\r\n\t(select SUM(TotalCanceledAmount) FROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas) \r\n\t<> \r\n\t(select sum(dbo.ConvertOverpunch9ToMoney(BilledAmount)) from\r\nNationalGridWest.UploadLegacyNationalGridWestDataPreload\r\nwhere cast(dbo.ConvertOverpunch(BilledAmount) as money) < 0)\r\n\t\r\n\t-- cancelled therm\r\n\tselect \r\n\t\t@validationResult = 0, \r\n\t\t@validationMessage = @validationMessage + 'There is an error processing acount level cancellation information. Sum of cancelled therms does not match the sum of cancelled therm in the raw data file.  Process is stopped at account level cancellation processing.' \r\n\twhere\r\n\t(select SUM(ISNULL(CancelTotalTherms, 0)) FROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas) \r\n\t<> \r\n\t(select sum(cast(dbo.ConvertOverpunch(Therms) as INT)) from\r\nNationalGridWest.UploadLegacyNationalGridWestDataPreload\r\nwhere cast(dbo.ConvertOverpunch(BilledAmount) as money) < 0)\r\n\r\n\t-- cancelled ccf\r\n\tselect \r\n\t\t@validationResult = 0, \r\n\t\t@validationMessage = @validationMessage + 'There is an error processing acount level cancellation information. Sum of cancelled ccf does not match the sum of cancelled ccf in the raw data file.  Process is stopped at account level cancellation processing.' \r\n\twhere\r\n\t(select SUM(ISNULL(CancelTotalCCF, 0)) FROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas) \r\n\t<> \r\n\t(select sum(cast(dbo.ConvertOverpunch(CCF) as INT)) \r\n\tfrom NationalGridWest.UploadLegacyNationalGridWestDataPreload\r\n\twhere cast(dbo.ConvertOverpunch(BilledAmount) as money) < 0)\r\n\r\nend -- end account cancellation validation\r\n\r\n\r\n/*************************************************************\r\n\tValidate meter\r\n*************************************************************/\r\nif(lower(@targetOfValidation) = 'meter')\r\nbegin -- begin validate account\r\n\r\n\r\n\t/* =============  begin checking meter in multi meter account have different billingPeriodCancellation ========*/\r\n\tIF exists (\r\n\t\tSELECT m.meterNumber\r\n\t\tFROM NationalGridWest.UploadLegacyKeyspanWestMeter AS m\r\n\t\tINNER JOIN NationalGridWest.UploadLegacyKeyspanWestMeter AS m2\r\n\t\ton m.AccountNumber = m2.AccountNumber AND m.BillingPeriodRevision = m2.BillingPeriodRevision\r\n\t\tAND m.FirstPeriodCanceled <> m2.FirstPeriodCanceled\r\n\t) \r\n\tbegin\r\n\t\tSET @validationResult = 0 \r\n\t\tSET @validationMessage = @validationMessage + 'IN multi meter account of the same billing period revision, there are meter that has different first period canceled.' \r\n\tend\r\n\r\n\t/* =============  end checking meter in multi meter account have different billingPeriodCancellation ========*/\r\n\r\n\r\n\t/* =============  begin meter level therm validation  ======================*/\r\n\t\r\n\tIF (select SUM(Therms) FROM NationalGridWest.UploadLegacyKeyspanWestMeterBillingAdjustmentGas) \r\n\t\t<> \r\n\t\t(select sum(cast(dbo.ConvertOverpunch(Therms) as INT)) \r\n\t\tfrom NationalGridWest.UploadLegacyNationalGridWestDataPreload\r\n\t\twhere cast(dbo.ConvertOverpunch(CCF) as int) > 0)\r\n\t\r\n\tBEGIN\r\n\t\tSET @validationResult = 0 \r\n\t\tSET @validationMessage = @validationMessage + 'There is an error processing meter level information. Sum of therms does not match the sum of therm in the raw data file. ' \r\n\t\t\r\n\t\t-- get list of account\r\n\t\tDECLARE @invThermAccList VARCHAR(1000)\r\n\t\t\r\n\t\tselect @invThermAccList = '''' + REPLACE\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\tSELECT  DISTINCT acc.OriginalAccountNumber AS 'data()'\r\n\t\t\t\t\t\t\t\tFROM ( SELECT    SUM(therms) AS totalTherms,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tOriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t  FROM   NationalGridWest.UploadLegacyKeyspanWestMeterBillingAdjustmentGas\r\n\t\t\t\t\t\t\t\t\t\t  GROUP BY  OriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t) AS met\r\n\t\t\t\t\t\t\t\t\t\tINNER JOIN \r\n\t\t\t\t\t\t\t\t\t\t( SELECT SUM(totalTherms) AS totalTherms,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tOriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t FROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas\r\n\t\t\t\t\t\t\t\t\t\t\t GROUP BY OriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t   ) AS acc \r\n\t\t\t\t\t\t\t\t\t\tON met.OriginalAccountNumber = acc.OriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t   AND met.totalTherms <> acc.totalTherms \r\n\t\t\t\t\t\t\t\tFOR XML PATH('')\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t, ' ', ''', '''\r\n\t\t\t\t\t\t\t) + ''''\r\n\t\t SET @validationMessage = @validationMessage + ' Account WITH incorrect total therms: ' + @invThermAccList\r\n\t\t \r\n\tEND -- end if meter level them does not match\r\n\t\r\n\t/* =============  end meter level therm validation  ======================*/\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t\r\n\t/* =============  begin meter level ccf validation  ======================*/\r\n\t \r\n\tDECLARE @ccfIncorrect VARCHAR(1)\r\n\tSET @ccfIncorrect = 'f'\r\n\t\r\n\t-- if the total ccf doesn't match'\r\n\tIF (\r\n\t\t(select SUM(CCF) FROM NationalGridWest.UploadLegacyKeyspanWestMeterBillingAdjustmentGas) \r\n\t\t<> \r\n\t\t(select sum(cast(dbo.ConvertOverpunch(CCF) as INT)) \r\n\t\tfrom NationalGridWest.UploadLegacyNationalGridWestDataPreload\r\n\t\twhere cast(dbo.ConvertOverpunch(CCF) as int) > 0)\r\n\t)\r\n\tbegin\r\n\t\tSET @validationResult = 0\r\n\t\tSET @ccfIncorrect = 't' \r\n\t\tSET @validationMessage = @validationMessage + 'There is an error processing meter level information. Sum of ccf does not match the sum of ccf in the raw data file.  ' \r\n\tEND\r\n\t\r\n\t-- if total ccf is incorrect, get list account with incorrect total ccf\r\n\tIF(@ccfIncorrect = 't')\r\n\tBEGIN\r\n\t\tDECLARE @accountList VARCHAR(1000)\r\n\t\tselect @accountList = '''' + REPLACE\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\tSELECT  DISTINCT acc.OriginalAccountNumber AS 'data()'\r\n\t\t\t\t\t\t\t\tFROM ( SELECT    SUM(ccf) AS totalCCF,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tOriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t  FROM   NationalGridWest.UploadLegacyKeyspanWestMeterBillingAdjustmentGas\r\n\t\t\t\t\t\t\t\t\t\t  GROUP BY  OriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t) AS met\r\n\t\t\t\t\t\t\t\t\t\tINNER JOIN \r\n\t\t\t\t\t\t\t\t\t\t( SELECT SUM(totalCCF) AS totalCCF,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tOriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t FROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas\r\n\t\t\t\t\t\t\t\t\t\t\t GROUP BY OriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t   ) AS acc \r\n\t\t\t\t\t\t\t\t\t\tON met.OriginalAccountNumber = acc.OriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t   AND met.totalCCF <> acc.totalCCF \r\n\t\t\t\t\t\t\t\tFOR XML PATH('')\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t, ' ', ''', '''\r\n\t\t\t\t\t\t\t) + ''''\r\n\t\t\t\t\t\t\t\r\n\t\tSET @validationMessage = @validationMessage + ' Account WITH incorrect total CCF: ' + @accountList\t\r\n\tEND\r\n\t\r\n\t/* =============  end ccf validation  ======================*/\r\n\t\r\n\t\r\nend -- end meter level validation\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/***********************************************************\r\nValidate meter Cancellation\r\n***********************************************************/\r\n\r\nif(lower(@targetOfValidation) = 'meter_cancellation')\r\nbegin -- begin validate account cancellation\r\n\r\n\t/* =============  begin therm cancellation validation  ======================*/\r\n\t\r\n\r\n\tIF((select SUM(CancelTherms) FROM NationalGridWest.UploadLegacyKeyspanWestMeterBillingAdjustmentGas) \r\n\t<> \r\n\t(select sum(cast(dbo.ConvertOverpunch(Therms) as INT)) \r\n\tfrom NationalGridWest.UploadLegacyNationalGridWestDataPreload\r\n\twhere cast(dbo.ConvertOverpunch(CCF) as int) < 0))\r\n\tbegin\r\n\r\n\t\tSET @validationResult = 0 \r\n\t\tSET @validationMessage = @validationMessage + 'There is an error processing meter level cancellation information. Sum of therms does not match the sum of therm in the raw data file. ' \r\n\t\t\r\n\t\t-- get list of account\r\n\t\tDECLARE @invThermCancelAccList VARCHAR(1000)\r\n\t\t\r\n\t\tselect @invThermCancelAccList = REPLACE\r\n\t\t\t(\r\n\t\t\t\t(\r\n\t\t\t\tSELECT  DISTINCT acc.OriginalAccountNumber AS 'data()'\r\n\t\t\t\tFROM ( SELECT    SUM(cancelTherms) AS totalTherms,\r\n\t\t\t\t\t\t\t\t\tOriginalAccountNumber\r\n\t\t\t\t\t\t  FROM   NationalGridWest.UploadLegacyKeyspanWestMeterBillingAdjustmentGas\r\n\t\t\t\t\t\t  GROUP BY  OriginalAccountNumber\r\n\t\t\t\t\t\t) AS met\r\n\t\t\t\t\t\tINNER JOIN \r\n\t\t\t\t\t\t( SELECT SUM(canceltotalTherms) AS totalTherms,\r\n\t\t\t\t\t\t\t\t\tOriginalAccountNumber\r\n\t\t\t\t\t\t\t FROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas\r\n\t\t\t\t\t\t\t GROUP BY OriginalAccountNumber\r\n\t\t\t\t\t\t   ) AS acc \r\n\t\t\t\t\t\tON met.OriginalAccountNumber = acc.OriginalAccountNumber\r\n\t\t\t\t\t\t\t   AND met.totalTherms <> acc.totalTherms \r\n\t\t\t\tFOR XML PATH('')\r\n\t\t\t\t)\r\n\t\t\t\t, ' ', ', '\r\n\t\t\t)\r\n\t\t SET @validationMessage = @validationMessage + ' Account WITH incorrect total therms: ' + @invThermCancelAccList\r\n\t\t \r\n\tend\r\n\t/* =============  end therm cancellation validation  ======================*/\r\n\r\n\t/* =============  begin ccf cancellation validation  ======================*/\r\n\t\r\n\tIF(\r\n\t\t(select SUM(CancelCCF) FROM NationalGridWest.UploadLegacyKeyspanWestMeterBillingAdjustmentGas) \r\n\t\t<> \r\n\t\t(select sum(cast(dbo.ConvertOverpunch(CCF) as INT)) \r\n\t\tfrom NationalGridWest.UploadLegacyNationalGridWestDataPreload\r\n\t\twhere cast(dbo.ConvertOverpunch(CCF) as int) < 0)\r\n\t)\r\n\tBEGIN\r\n\t\tSET @validationResult = 0\r\n\t\tSET @validationMessage = @validationMessage + 'There is an error processing meter level information. Sum of cancel ccf does not match the sum of cancel ccf in the raw data file. ' \r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tDECLARE @accountListCanCCF VARCHAR(1000)\r\n\t\tselect @accountListCanCCF = '''' + REPLACE\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\tSELECT  DISTINCT acc.OriginalAccountNumber AS 'data()'\r\n\t\t\t\t\t\t\t\tFROM ( SELECT    SUM(CancelCCF) AS totalCCF,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tOriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t  FROM   NationalGridWest.UploadLegacyKeyspanWestMeterBillingAdjustmentGas\r\n\t\t\t\t\t\t\t\t\t\t  GROUP BY  OriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t) AS met\r\n\t\t\t\t\t\t\t\t\t\tINNER JOIN \r\n\t\t\t\t\t\t\t\t\t\t( SELECT SUM(CancelTotalCCF) AS totalCCF,\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tOriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t FROM NationalGridWest.UploadLegacyKeyspanWestAccountBillingAdjustmentGas\r\n\t\t\t\t\t\t\t\t\t\t\t GROUP BY OriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t   ) AS acc \r\n\t\t\t\t\t\t\t\t\t\tON met.OriginalAccountNumber = acc.OriginalAccountNumber\r\n\t\t\t\t\t\t\t\t\t\t\t   AND met.totalCCF <> acc.totalCCF \r\n\t\t\t\t\t\t\t\tFOR XML PATH('')\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t, ' ', ''', '''\r\n\t\t\t\t\t\t\t) + ''''\r\n\t\t\t\t\t\t\t\r\n\t\tSET @validationMessage = @validationMessage + ' Account WITH incorrect total Cancel CCF: ' + @accountListCanCCF\t\r\n\tEND\r\n\r\n\t\t\r\n\t\r\n\t/* =============  end ccf cancellation validation  ======================*/\r\n\r\nend -- end meter cancellation validation\r\n\r\n\r\n\r\n\r\nEND -- end procedure"
        }
      ]
    }
  ]
}