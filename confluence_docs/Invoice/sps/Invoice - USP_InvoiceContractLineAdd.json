{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Invoice",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "USP_InvoiceContractLineAdd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "USP_InvoiceContractLineAdd",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to manage the addition or update of contract lines associated with an invoice in a Microsoft SQL Server database. It handles both the creation of new contract lines and the updating of existing ones, along with their associated allocations. The procedure also logs actions and errors, and it includes mechanisms for auditing and error handling."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure involves multiple operations, including conditional logic, transaction management, error handling, and logging. It interacts with several tables and uses a user-defined table type for input, which adds to its complexity. However, the logic is straightforward and well-structured, making it manageable for experienced developers."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@invoiceId INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the invoice to which the contract line is related."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@contractLineId INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the contract line to be added or updated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@amount DECIMAL(18, 2)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The amount to be associated with the contract line."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@allocations [Invoice].[UDT_InvoiceContractLineAllocation] READONLY",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A table-valued parameter containing allocation details."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@correlationId VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An optional identifier for correlating logs."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@machineName VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The name of the machine executing the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@processName VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The name of the process executing the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@domain VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The domain of the user executing the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@username VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The username of the person executing the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@userId INT = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the user executing the procedure."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@exceptionDetails VARCHAR(MAX) = NULL OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter for capturing exception details."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting default values for certain parameters and initializing variables for logging and transaction management."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A transaction is started to ensure atomicity of the operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Update Existing Contract Line",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": If a contract line already exists for the given invoice and contract line ID, it updates the "
                        },
                        {
                          "type": "text",
                          "text": "AmountPaid",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and associated allocations."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Add New Contract Line",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": ": If no existing contract line is found, it inserts a new record into the "
                        },
                        {
                          "type": "text",
                          "text": "InvoiceContractLine",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " table and adds default allocations."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Audit Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": After either updating or adding a contract line, an audit note is created in the "
                },
                {
                  "type": "text",
                  "text": "Common.Note",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure includes a "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block to handle exceptions, rolling back the transaction if an error occurs and capturing error details."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure logs the operation details using the "
                },
                {
                  "type": "text",
                  "text": "USP_AppLogCreate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " procedure, including any exceptions encountered."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of transactions ensures data integrity but can lead to locking and blocking if not managed carefully, especially in high-concurrency environments."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table-Valued Parameters",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using a table-valued parameter for allocations is efficient for passing multiple rows of data but requires careful indexing and optimization of the underlying tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging Overhead",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The logging and auditing operations add overhead, which could impact performance if the procedure is executed frequently."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure could face concurrency issues if multiple processes attempt to update the same invoice or contract line simultaneously."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While the procedure includes error handling, it relies on the "
                },
                {
                  "type": "text",
                  "text": "XACT_STATE()",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " function, which may not capture all types of errors, such as those occurring outside the transaction scope."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that the input data is valid and does not include validation checks, which could lead to data integrity issues if invalid data is provided."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the procedure involves multiple table operations and logging, it may not scale well with a significant increase in data volume or user load without optimization."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Invoice].[USP_InvoiceContractLineAdd]\n\t@invoiceId\t\t\t\tINT\r\n\t,@contractLineId\t\tINT\r\n\t,@amount\t\t\t\tDECIMAL(18, 2)\r\n\t,@allocations\t\t\t[Invoice].[UDT_InvoiceContractLineAllocation] READONLY\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSET @invoiceId\t\t\t= NULLIF(@invoiceId, 0);\r\n\tSET @contractLineId\t\t= NULLIF(@contractLineId, 0);\r\n\tSET @amount\t\t\t\t= NULLIF(@amount, 0);\r\n\r\n\tDECLARE @action VARCHAR(25), @severity VARCHAR(25), @message VARCHAR(255), @messageDetails VARCHAR(MAX)\r\n\t\t, @startTime DATETIME, @elapsedTime INT, @sendEmail BIT;\r\n\tSET @startTime\t\t\t= GETDATE();\r\n\t\r\n\tSET @correlationId\t\t= ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()));\r\n\tSET @machineName\t\t= COALESCE(@machineName, @@SERVERNAME, 'NA');\r\n\tSET @processName\t\t= COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\tSET @action\t\t\t\t= 'CREATE';\r\n\tSET @severity\t\t\t= 'INFO';\r\n\tSET @message\t\t\t= 'Added invoice contract line';\r\n\tSET @messageDetails\t\t= CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @contractLineId AS CLINEID, @amount AS AMT FOR XML PATH('INPUTS')));\r\n\tSET @sendEmail\t\t\t= 0;\r\n\tSET @userId\t\t\t\t= ISNULL(@userId, 0);\r\n\r\n\tDECLARE @tranName VARCHAR(128);\r\n\tSET @tranName = CONVERT(VARCHAR(128), NEWID());\r\n\r\n\tDECLARE @noteFiller VARCHAR(500);\r\n\tSELECT @noteFiller = (CL.ContractNumber + ',' + CONVERT(VARCHAR(10), CL.CommodityLine) + ',' + CONVERT(VARCHAR(10), CL.AccountingLine))\r\n\tFROM [Billing].[vwContractLines] CL\r\n\tWHERE CL.ContractLineID = @contractLineId;\r\n\tSET @noteFiller = ISNULL(@noteFiller, CONVERT(VARCHAR(10), @contractLineId) + ',NA,NA');\r\n\r\n\tDECLARE @invoiceIsSplitFY BIT;\r\n\tSELECT\t@invoiceIsSplitFY = [Billing].[UDF_IsSplitFYInvoice](@invoiceId);\r\n\r\n\tDECLARE @invoiceContractLineTable TABLE (InvoiceContractLineID INT, FiscalYear VARCHAR(4), Amount DECIMAL(18, 2));\r\n\r\n\tBEGIN TRY\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\tIF EXISTS (SELECT 1 FROM Invoice.InvoiceContractLine WHERE InvoiceID = @invoiceId AND ContractLineID = @contractLineId)\r\n\t\tBEGIN\r\n\t\t\t-- Update contract line(s)\r\n\t\t\tUPDATE [Invoice].[InvoiceContractLine]\r\n\t\t\tSET\tAmountPaid = AmountPaid + @amount, ModifiedBy = @userId, ModifiedDate = GETDATE()\r\n\t\t\tOUTPUT INSERTED.InvoiceContractLineID, INSERTED.FiscalYear, INSERTED.AmountPaid INTO @invoiceContractLineTable\r\n\t\t\tWHERE InvoiceID = @invoiceId AND ContractLineID = @contractLineId;\r\n\t\t\t\r\n\r\n\t\t\t-- Update default contract line allocation(s)\r\n\t\t\tIF @invoiceIsSplitFY =1\r\n\t\t\t\tUPDATE [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\t\tSET\tAllocationAmount = AllocationAmount + b.Amount, ModifiedBy = @userId, ModifiedDate = GETDATE()\r\n\t\t\t\tFROM [Invoice].[InvoiceContractLineAllocation] a JOIN @allocations b ON a.AllocationFiscalYear=b.FiscalYear\r\n\t\t\t\tWHERE a.InvoiceContractLineID = (SELECT InvoiceContractLineID FROM @invoiceContractLineTable);\r\n\r\n\t\t\tELSE\r\n\t\t\t\tUPDATE [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\t\tSET\tAllocationAmount = AllocationAmount + @amount, ModifiedBy = @userId, ModifiedDate = GETDATE()\r\n\t\t\t\tWHERE InvoiceContractLineID = (SELECT InvoiceContractLineID FROM @invoiceContractLineTable) \r\n\t\t\t\tAND AllocationFiscalYear = (SELECT FiscalYear FROM @invoiceContractLineTable);\r\n\t\t\t\r\n\t\t\t-- Create audit note\r\n\t\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\t\t\tVALUES ('INVOICE', @invoiceId, 'UPDATE CONTRACT LINE', 'Via Inserting New Payment, Contract line (' + @noteFiller + ') updated', @userId);\r\n\t\tEND;\r\n        ELSE\r\n        BEGIN\r\n\t\t\t-- Add contract line(s)\r\n\t\t\tINSERT INTO [Invoice].[InvoiceContractLine] (InvoiceID, ContractLineID, ContractID, FiscalYear, CommodityLine, AccountingLine, BudgetCode, ObjectCode, UoA, AmountPaid, CreatedBy)\r\n\t\t\t\tOUTPUT INSERTED.InvoiceContractLineID, INSERTED.FiscalYear, INSERTED.AmountPaid INTO @invoiceContractLineTable\r\n\t\t\t\t\tSELECT @invoiceId, CL.ContractLineId, CL.ContractID, CL.FiscalYear, CL.CommodityLine, CL.AccountingLine, CL.BudgetCode, CL.ObjectCode, CL.UoA, @amount, @userId\r\n\t\t\t\t\tFROM [Billing].[ContractLine] CL\r\n\t\t\t\t\tWHERE CL.ContractLineID = @contractLineId;\r\n\r\n\t\t\t-- Add default contract line allocation(s)\r\n\t\t\tIF @invoiceIsSplitFY =1\r\n\t\t\t\tINSERT INTO [Invoice].[InvoiceContractLineAllocation] (InvoiceContractLineID, AllocationFiscalYear, AllocationAmount, Comments, CreatedBy)\r\n\t\t\t\t\tSELECT (SELECT ICL.InvoiceContractLineID FROM @invoiceContractLineTable ICL) AS InvoiceContractLineID\r\n\t\t\t\t\t\t, FiscalYear, Amount, Comments, @userId\r\n\t\t\t\t\tFROM @allocations;\r\n\r\n\t\t\tELSE\r\n\t\t\t\tINSERT INTO [Invoice].[InvoiceContractLineAllocation] (InvoiceContractLineID, AllocationFiscalYear, AllocationAmount, CreatedBy)\r\n\t\t\t\t\tSELECT ICL.InvoiceContractLineID, ICL.FiscalYear, ICL.Amount, @userId\t\t\t\t\r\n\t\t\t\t\tFROM @invoiceContractLineTable ICL;\r\n\r\n\t\t\t-- Create audit note\r\n\t\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\t\t\tVALUES ('INVOICE', @invoiceId, 'ADD CONTRACT LINE', 'Contract line (' + @noteFiller + ') added', @userId);\r\n\r\n\t\tEND;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF XACT_STATE() <> 0 ROLLBACK TRAN @tranName;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to add invoice contract line';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r"
        }
      ]
    }
  ]
}