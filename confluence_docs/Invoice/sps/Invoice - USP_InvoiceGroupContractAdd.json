{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Invoice",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "USP_InvoiceGroupContractAdd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "USP_InvoiceGroupContractAdd",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to add a billing group and contract to an invoice within a Microsoft SQL Server database. It handles the insertion of records into the "
        },
        {
          "type": "text",
          "text": "Invoice.InvoiceGroupContract",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " and "
        },
        {
          "type": "text",
          "text": "Invoice.InvoiceAccountBilling",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " tables, particularly when dealing with electronic summary billing. The procedure also manages transaction control, error handling, and logging of operations."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to its extensive use of conditional logic, multiple table operations, transaction management, error handling, and logging. It involves several database operations, including inserts, updates, and conditional checks, which contribute to its high complexity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@invoiceId AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The identifier for the invoice to which the group and contract will be added."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@fiscalYear AS VARCHAR(4)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The fiscal year associated with the contract."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@groupId AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The identifier for the billing group."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@contractId AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The identifier for the contract."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@correlationId AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional correlation ID for logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@machineName AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional machine name for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@processName AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional process name for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@domain AS VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional domain for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@username AS VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional username for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@userId AS INT = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional user ID for tracking who performed the operation."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Output parameter to capture exception details if an error occurs."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization and Defaults",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure initializes parameters, setting defaults for optional inputs and ensuring non-zero or non-empty values for critical parameters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves existing billing group contract IDs and constructs a note filler string for logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Electronic Billing Check",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Determines if the billing group is electronic and sets a flag accordingly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Begins a transaction to ensure atomicity of operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Insert Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Inserts a new record into "
                        },
                        {
                          "type": "text",
                          "text": "Invoice.InvoiceGroupContract",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": "."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If electronic summary billing is applicable, inserts records into "
                        },
                        {
                          "type": "text",
                          "text": "Invoice.InvoiceAccountBilling",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " with detailed calculations for fiscal year splits."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates billing days and usage metrics for split fiscal years."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Locks parent records in the electronic billing system to prevent edits."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Updates invoice numbers if a summary account number is present."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Audit Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Inserts a note into the "
                },
                {
                  "type": "text",
                  "text": "Common.Note",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table to log the addition of the billing group."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Uses a "
                },
                {
                  "type": "text",
                  "text": "TRY...CATCH",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " block to handle errors, rolling back the transaction if necessary and capturing error details."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Calls a logging procedure to record the operation's outcome, including any exceptions."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses explicit transactions, which can lock resources and impact performance if held open for extended periods."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The extensive use of conditional logic and multiple queries can increase execution time, especially with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure may face concurrency issues due to locks on tables during transaction execution, potentially affecting other operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Index Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Performance can be improved by ensuring that the queried columns are indexed, particularly those involved in "
                },
                {
                  "type": "text",
                  "text": "WHERE",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " clauses and joins."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While errors are caught and logged, the procedure does not attempt to retry or handle specific error types, which could lead to incomplete operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the transaction fails and rolls back, related operations might be left incomplete, requiring manual intervention."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The complexity and number of operations may not scale well with increased data volume or concurrent usage."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Hardcoded Values",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses hardcoded values for certain operations (e.g., fiscal year end date), which may need updates if business rules change."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that input parameters are sanitized and does not include explicit checks for SQL injection or other security vulnerabilities."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Invoice].[USP_InvoiceGroupContractAdd]\n(\r\n\t@invoiceId AS INT\r\n\t,@fiscalYear AS VARCHAR(4)\r\n\t,@groupId AS INT\r\n\t,@contractId AS INT\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @fiscalYear = NULLIF(@fiscalYear, ''), @groupId = NULLIF(@groupId, 0), @contractId = NULLIF(@contractId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA'), @userId = ISNULL(@userId, 0);\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'CREATE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Added invoice billing group and contract'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @tranName VARCHAR(128) = CONVERT(VARCHAR(128), NEWID())\r\n\t\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID, @fiscalYear AS FY, @groupId AS GRPID, @contractId AS CTRCTID FOR XML PATH('INPUTS')));\r\n\r\n\tDECLARE @billingGroupContractId INT, @noteFiller VARCHAR(500), @isElectronicSummaryBilling BIT, @billingPeriod VARCHAR(6), @invoiceGroupId INT\r\n\t\t, @summaryAcctNumber VARCHAR(15), @invoiceNumAction VARCHAR(30);\r\n\r\n\tSELECT @billingGroupContractId = BillingGroupContractID\r\n\tFROM Billing.BillingGroupContract\r\n\tWHERE ContractID = @contractId AND GroupID = @groupId AND FiscalYear = @fiscalYear;\r\n\r\n\tSELECT @noteFiller = (GroupName + ',' + FiscalYear + ',' + ContractNumber)\r\n\tFROM Billing.vwBillingGroupContracts\r\n\tWHERE ContractID = @contractId AND GroupID = @groupId AND FiscalYear = @fiscalYear;\r\n\tSET @noteFiller = ISNULL(@noteFiller, CONVERT(VARCHAR(10), @groupId) + ',' + @fiscalYear + ',NA');\r\n\r\n\tSET @isElectronicSummaryBilling = 0;\r\n\t\r\n\tIF EXISTS (SELECT 1 FROM Billing.vwBillingGroups WHERE GroupID = @groupId AND BillingType = 'E')\r\n\tBEGIN\r\n\t    SET @isElectronicSummaryBilling = 1;\r\n\tEND;\r\n\r\n\tSET @invoiceNumAction = '';\r\n\tSELECT @summaryAcctNumber = SummaryAccountNumber FROM Billing.vwBillingGroups WHERE GroupID = @groupId;\r\n\r\n\tSELECT @billingPeriod = InvoiceBillingPeriod FROM [Invoice].[vwInvoices] WHERE InvoiceID = @invoiceId;\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @invoiceGroupTable TABLE(InvoiceGroupID INT);\r\n\t\tDECLARE @billingTable TABLE(InvoiceBillingID INT);\r\n\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Add invoice group\r\n\t\tINSERT INTO Invoice.InvoiceGroupContract(InvoiceID, BillingGroupContractID, CreatedBy)\r\n\t\tOUTPUT INSERTED.InvoiceGroupContractID INTO @invoiceGroupTable\r\n\t\tVALUES (@invoiceId, @billingGroupContractId, @userId);\r\n\r\n\t\t-- Determine inserted invoice group identifier\r\n\t\tSELECT @invoiceGroupId = CONVERT(INT, InvoiceGroupID) FROM @invoiceGroupTable;\r\n\r\n\t\t-- Add associated accounts / billings if electronic billing and summary billing type\r\n\t\tIF (@isElectronicSummaryBilling = 1)\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO Invoice.InvoiceAccountBilling(InvoiceGroupContractID, InvoiceID, GroupID, ContractID, BillingID\r\n\t\t\t\t,AccountID, AccountNumber, BillingPeriod\r\n\t\t\t\t,BillingPeriodDays, FromDate, ToDate\r\n\t\t\t\t,SplitFY\r\n\t\t\t\t,BillingPeriodDaysPriorFY\r\n\t\t\t\t,BillingPeriodDaysCurrentFY\r\n\t\t\t\t,IsManualEntry, IsEstimated, DateBilled, DateDue\r\n\t\t\t\t,EnergyUnit\r\n\t\t\t\t,EnergyUsage\r\n\t\t\t\t,EnergyUsagePriorFY\r\n\t\t\t\t,EnergyUsageCurrentFY\r\n\t\t\t\t,DemandUsage\r\n\t\t\t\t,DemandUsagePriorFY\r\n\t\t\t\t,DemandUsageCurrentFY\r\n\t\t\t\t,AmountBilled\r\n\t\t\t\t,AmountPaid\r\n\t\t\t\t,AmountPaidPriorFY\r\n\t\t\t\t,AmountPaidCurrentFY\r\n\t\t\t\t,CreatedBy)\r\n\t\t\tOUTPUT INSERTED.InvoiceBillingID INTO @billingTable\r\n\t\t\tSELECT @invoiceGroupId, @invoiceId, @groupId, @contractId, B.BillingID\r\n\t\t\t\t,B.AccountID, B.AccountNumber, B.BillingPeriod, B.BillingPeriodDays, B.FromDate, B.ToDate\r\n\t\t\t\t,Billing.UDF_IsSplitFYBilling(@invoiceId, B.FromDate, B.ToDate)\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN B.BillingPeriodDays ELSE 0 END BillingPeriodDaysPriorFY\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN 0 ELSE B.BillingPeriodDays END BillingPeriodDaysCurrrentFY\r\n\t\t\t\t,B.IsManualEntry, B.IsEstimated, B.DateBilled, B.DateDue\r\n\t\t\t\t,B.EnergyUnit\r\n\t\t\t\t,B.AccountEnergyUsage\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN B.AccountEnergyUsage ELSE 0 END EnergyUsagePriorFY\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN 0 ELSE B.AccountEnergyUsage END  EnergyUsageCurrentFY\r\n\t\t\t\t,B.AccountDemandUsage\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN B.AccountDemandUsage ELSE 0 END DemandUsagePriorFY\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN 0 ELSE B.AccountDemandUsage END  DemandUsageCurrentFY\r\n\t\t\t\t,CONVERT(DECIMAL(18, 2), B.AmountBilled)\r\n\t\t\t\t,CONVERT(DECIMAL(18, 2), B.AmountPaid)\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN CONVERT(DECIMAL(18, 2), B.AmountPaid) ELSE 0 END AmountPaidPriorFY\r\n\t\t\t\t,CASE WHEN Billing.UDF_IsBillingInPreviousFY(@invoiceId, B.FromDate, B.ToDate) = 1  THEN 0 ELSE CONVERT(DECIMAL(18, 2), B.AmountPaid) END  AmountPaidCurrentFY\r\n\t\t\t\t,@userId\r\n\t\t\tFROM Billing.vwAccountBillings AS B\r\n\t\t\tWHERE B.GroupID = @groupId AND B.BillingPeriod = @billingPeriod AND B.IsLockedForEdit='N'\r\n\t\t\t\tAND B.BillingID NOT IN (SELECT DISTINCT BillingID FROM Invoice.InvoiceAccountBilling WHERE GroupID = @groupId);\r\n\r\n\t\t\t-- Update number of billing days in prior FY if there is a difference in FY between from and to dates\r\n\t\t\tUPDATE BILL\r\n\t\t\tSET BILL.BillingPeriodDaysPriorFY = BILL.BillingPeriodDays - DATEDIFF(d, CONVERT(DATETIME, CONVERT(VARCHAR(4), YEAR(ToDate)) + '0630', 112), ToDate)\r\n\t\t\t\t,BILL.BillingPeriodDaysCurrentFY = DATEDIFF(d, CONVERT(DATETIME, CONVERT(VARCHAR(4), YEAR(ToDate)) + '0630', 112), ToDate)\r\n\t\t\tFROM Invoice.InvoiceAccountBilling AS BILL\r\n\t\t\t\tINNER JOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID\r\n\t\t\tWHERE BILL.SplitFY = 1;\r\n\r\n\t\t\tIF EXISTS (SELECT 1 FROM [Invoice].[InvoiceAccountBilling] BILL JOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID WHERE BILL.SplitFY = 1)\r\n\t\t\tBEGIN\r\n\t\t\t\t-- Update current FY data if there is a difference in FY between from and to dates\r\n\t\t\t\tUPDATE BILL\r\n\t\t\t\tSET BILL.AmountPaidCurrentFY = (BILL.BillingPeriodDaysCurrentFY * BILL.AmountPaid) / BILL.BillingPeriodDays\r\n\t\t\t\t\t,BILL.EnergyUsageCurrentFY = (BILL.BillingPeriodDaysCurrentFY * BILL.EnergyUsage) / BILL.BillingPeriodDays\r\n\t\t\t\t\t,BILL.DemandUsageCurrentFY = (BILL.BillingPeriodDaysCurrentFY * BILL.DemandUsage) / BILL.BillingPeriodDays\r\n\t\t\t\tFROM Invoice.InvoiceAccountBilling AS BILL\r\n\t\t\t\t\tINNER JOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID\r\n\t\t\t\tWHERE BILL.SplitFY = 1;\r\n\r\n\t\t\t\t-- Update current FY data if there is a difference in FY between from and to dates\r\n\t\t\t\tUPDATE BILL\r\n\t\t\t\tSET BILL.AmountPaidPriorFY = BILL.AmountPaid - BILL.AmountPaidCurrentFY\r\n\t\t\t\t\t,BILL.EnergyUsagePriorFY = BILL.EnergyUsage - BILL.EnergyUsageCurrentFY\r\n\t\t\t\t\t,BILL.DemandUsagePriorFY = BILL.DemandUsage - BILL.DemandUsageCurrentFY\r\n\t\t\t\tFROM Invoice.InvoiceAccountBilling AS BILL\r\n\t\t\t\t\tINNER JOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID\r\n\t\t\t\tWHERE BILL.SplitFY = 1;\r\n\t\t\tEND;\r\n\r\n\t\t\t-- Lock the parent records in EC3 (for electronic billing only), to prevent edits\r\n\t\t\tIF (@isElectronicSummaryBilling = 1) AND EXISTS (SELECT 1 FROM @billingTable)\r\n\t\t\tBEGIN\r\n\t\t\t\tUPDATE EB\r\n\t\t\t\tSET EB.InvoiceTrackingSeqid\t= @invoiceId\r\n\t\t\t\t\t,EB.VoucherBillingStatus = 'VC'\r\n\t\t\t\t\t,EB.VoucherBillingStatusPeriod = @billingPeriod\r\n\t\t\t\t\t,EB.IsLockedForEdit = 'Y'\r\n\t\t\t\t\t,EB.LastUpdate = GETDATE()\r\n\t\t\t\t\t,EB.AuthenticatedUserID = @userId\r\n\t\t\t\tFROM Billing.EC3_ManualBill_AccountManualBillingHeader_ElectronicBilling AS EB\r\n\t\t\t\t\tINNER JOIN Invoice.InvoiceAccountBilling AS ACCT ON ACCT.BillingID = EB.AccountManualBillingHeaderSeqid\r\n\t\t\t\t\tINNER JOIN @billingTable AS BILL ON BILL.InvoiceBillingID = ACCT.InvoiceBillingID\r\n\t\t\tEND;\r\n\t\tEND;\r\n\r\n\t\t--added on 11/28/2018 by XL for updating invoiceNum\r\n\t\tIF ISNULL(@summaryAcctNumber, '')<>''\r\n\t\tBEGIN\r\n\t\t\tUPDATE Invoice.Invoice\r\n\t\t\tSET\tInvoiceNumber = @summaryAcctNumber + '_' + RIGHT(InvoiceNumber, 9), ModifiedDate = GETDATE(), ModifiedBy = @userId\r\n\t\t\tWHERE InvoiceID = @invoiceId;\t\t\r\n\r\n\t\t\tSET @invoiceNumAction = ' - Invoice Number Updated';\r\n\t\tEND;\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO [Common].[Note](ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tVALUES ('INVOICE', @invoiceId, 'ADD GROUP', 'Billing group (' + @noteFiller + ') added' + @invoiceNumAction, @userId);\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF (XACT_STATE() <> 0)\r\n\t\tBEGIN\r\n\t\t\tROLLBACK TRAN @tranName;\r\n\t\tEND;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to add invoice billing group and contract', @sendEmail = 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r"
        }
      ]
    }
  ]
}