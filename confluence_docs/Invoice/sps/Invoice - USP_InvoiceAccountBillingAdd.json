{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Invoice",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "USP_InvoiceAccountBillingAdd",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "USP_InvoiceAccountBillingAdd",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to add billing accounts to an invoice group within a SQL Server database. It handles both single fiscal year and split fiscal year scenarios, updating relevant tables and creating audit logs. The procedure also manages transaction control to ensure data integrity and logs any errors encountered during execution."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to its extensive use of conditional logic, multiple table operations, transaction management, and error handling. It also involves dynamic data manipulation and updates across several related tables, which increases its complexity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@invoiceGroupId AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Identifies the invoice group to which billing accounts will be added."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@accountIds AS VARCHAR(4000)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A comma-separated list of account IDs to be processed."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@correlationId AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An optional identifier for correlating logs and operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@machineName AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The name of the machine executing the procedure, used for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@processName AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The name of the process executing the procedure, used for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@domain AS VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The domain of the user executing the procedure, used for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@username AS VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The username of the person executing the procedure, used for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@userId AS INT = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The ID of the user executing the procedure, used for audit and creation records."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter to capture any exception details encountered during execution."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Sets up initial variables, including action type, severity, and message details. It also initializes transaction control variables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter Validation and Defaults",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Validates and sets default values for input parameters, ensuring they are not null or invalid."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Fetches invoice and contract details from "
                },
                {
                  "type": "text",
                  "text": "vwInvoiceGroupContracts",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Invoice",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Fiscal Year Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Determines if the invoice spans multiple fiscal years and calculates the current and prior fiscal years."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Management",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Begins a transaction to ensure atomicity of operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Insertions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Depending on whether the invoice is split across fiscal years, inserts records into "
                },
                {
                  "type": "text",
                  "text": "InvoiceAccountBilling",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " with appropriate fiscal year calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Adjusts billing days and financial figures for split fiscal year scenarios."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Audit Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Inserts a note into the "
                },
                {
                  "type": "text",
                  "text": "Common.Note",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table to record the addition of billing accounts."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Budget Code Updates",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Updates budget codes and deletes related contract line allocations and records if necessary."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Commit/Rollback",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Commits the transaction if successful or rolls back in case of an error."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Catches exceptions, logs error details, and sets flags for error severity and email notifications."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Calls a logging procedure to record the operation's outcome, including any exceptions."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Scope",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure uses explicit transactions, which can lock resources and impact performance if not managed carefully."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Table Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Multiple joins and subqueries, especially with large datasets, can lead to performance bottlenecks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Function Calls",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": User-defined functions like "
                },
                {
                  "type": "text",
                  "text": "UDF_IsSplitFYInvoice",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "UDF_GetFiscalYear",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " are used, which can add overhead if not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "String Operations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "UDF_SplitToTable",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to parse account IDs can be resource-intensive if the input string is large."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of transactions and potential locking of tables can lead to concurrency issues if multiple instances of the procedure run simultaneously."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While exceptions are caught, the procedure relies on a single output parameter for error details, which may not capture all relevant information."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's complexity and reliance on multiple table operations may not scale well with increasing data volumes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the procedure fails after partial execution, it relies on transaction rollback to maintain data integrity, which assumes all operations are correctly encapsulated within the transaction."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Security",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that input parameters are sanitized and does not explicitly handle SQL injection risks, especially with dynamic SQL or user-defined functions."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Invoice].[USP_InvoiceAccountBillingAdd]\n(\r\n\t@invoiceGroupId AS INT\r\n\t,@accountIds AS VARCHAR(4000)\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'CREATE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Added invoice billing account(s)', @messageDetails AS VARCHAR(MAX)\r\n\t\t,@startTime AS DATETIME = GETDATE(), @elapsedTime INT, @sendEmail AS BIT = 0, @tranName AS VARCHAR(128) = CONVERT(VARCHAR(128), NEWID());\r\n\t\r\n\tSELECT @invoiceGroupId = NULLIF(@invoiceGroupId, 0), @accountIds = NULLIF(@accountIds, ''), @userId = ISNULL(@userId, 0)\r\n\t\t,@correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID())), @machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceGroupId AS INVID, @accountIds AS FY FOR XML PATH('INPUTS')));\r\n\r\n\tDECLARE @invoiceId AS INT, @groupId AS INT, @contractId AS INT, @fiscalYear AS VARCHAR(4), @invoiceIsSplitFY AS BIT, @priorFY AS INT, @currentFY AS INT;\r\n\r\n\tSELECT @invoiceId = InvoiceID\r\n\t\t,@groupId = GroupID\r\n\t\t,@contractId = ContractID\r\n\t\t,@fiscalYear = FiscalYear\r\n\tFROM Invoice.vwInvoiceGroupContracts\r\n\tWHERE InvoiceGroupContractID = @invoiceGroupId;\r\n\r\n\tSELECT @invoiceIsSplitFY = Billing.UDF_IsSplitFYInvoice(InvoiceID), @currentFY = Billing.UDF_GetFiscalYear(CreatedDate)\r\n\tFROM Invoice.Invoice\r\n\tWHERE InvoiceID = @invoiceId;\r\n\r\n\tSET @priorFY = @currentFY-1;\r\n\r\n\tDECLARE @updatedBudgetCodeTable TABLE (BudgetCode VARCHAR(4));\r\n\r\n\tBEGIN TRY\r\n\t\tDECLARE @billingTable TABLE(InvoiceBillingID INT);\r\n\r\n\t\tBEGIN TRAN @tranName;\r\n\r\n\t\t-- Add invoice account billings\r\n\t\tIF @invoiceIsSplitFY = 0\r\n\t\t\tINSERT INTO Invoice.InvoiceAccountBilling(InvoiceGroupContractID, InvoiceID, GroupID, ContractID, BillingID\r\n\t\t\t\t,AccountID, AccountNumber, FormattedAccountNumber, BillingPeriod, BillingPeriodDays, FromDate, ToDate\r\n\t\t\t\t,SplitFY, BillingPeriodDaysPriorFY, BillingPeriodDaysCurrentFY\r\n\t\t\t\t,IsManualEntry, IsEstimated, DateBilled, DateDue\r\n\t\t\t\t,EnergyUnit\r\n\t\t\t\t,EnergyUsage, EnergyUsagePriorFY, EnergyUsageCurrentFY\r\n\t\t\t\t,DemandUsage, DemandUsagePriorFY, DemandUsageCurrentFY\r\n\t\t\t\t,AmountBilled, AmountPaid, AmountPaidPriorFY, AmountPaidCurrentFY\r\n\t\t\t\t,CreatedBy)\r\n\t\t\tOUTPUT INSERTED.InvoiceBillingID INTO @billingTable\r\n\t\t\tSELECT @invoiceGroupId, @invoiceId, @groupId, @contractId, T.ID\r\n\t\t\t\t,B.AccountID, B.AccountNumber, B.FormattedAccountNumber, B.BillingPeriod, B.BillingPeriodDays, B.FromDate, B.ToDate\r\n\t\t\t\t,[Billing].[UDF_IsSplitFYBilling](@invoiceId, B.FromDate, B.ToDate) --switched by Xin on 09/04/2019\r\n\t\t\t\t,0, Billing.UDF_GetBillingPeriodDaysInCurrentFY(@invoiceId, B.FromDate, B.ToDate, B.BillingPeriodDays)\r\n\t\t\t\t,B.IsManualEntry, B.IsEstimated, B.DateBilled, B.DateDue\r\n\t\t\t\t,B.EnergyUnit\r\n\t\t\t\t,B.AccountEnergyUsage, 0, B.AccountEnergyUsage\r\n\t\t\t\t,B.AccountDemandUsage, 0, B.AccountDemandUsage\r\n\t\t\t\t,CONVERT(DECIMAL(18, 2), B.AmountBilled), CONVERT(DECIMAL(18, 2), B.AmountPaid), 0, CONVERT(DECIMAL(18, 2), B.AmountPaid)\r\n\t\t\t\t,@userId\r\n\t\t\tFROM [dbo].[UDF_SplitToTable](@accountIds, ',') T\r\n\t\t\t\tINNER JOIN [Billing].[vwAccountBillings] B ON B.BillingID = T.ID\r\n\t\t\tWHERE B.GroupID = @groupId;\r\n\t    ELSE\r\n\t\t\tINSERT INTO [Invoice].[InvoiceAccountBilling] (InvoiceGroupContractID, InvoiceID, GroupID, ContractID, BillingID\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, AccountID, AccountNumber, FormattedAccountNumber, BillingPeriod, BillingPeriodDays, FromDate, ToDate\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, SplitFY, BillingPeriodDaysPriorFY, BillingPeriodDaysCurrentFY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, IsManualEntry, IsEstimated, DateBilled, DateDue\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, EnergyUnit\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, EnergyUsage, EnergyUsagePriorFY, EnergyUsageCurrentFY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, DemandUsage, DemandUsagePriorFY, DemandUsageCurrentFY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, AmountBilled, AmountPaid, AmountPaidPriorFY, AmountPaidCurrentFY\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t, CreatedBy)\r\n\t\t\t\tOUTPUT INSERTED.InvoiceBillingID INTO @billingTable\r\n\t\t\t\t\tSELECT IG.InvoiceGroupContractID, @invoiceId, @groupId, IG.ContractID, T.ID\r\n\t\t\t\t\t\t, B.AccountID, B.AccountNumber, B.FormattedAccountNumber, B.BillingPeriod, B.BillingPeriodDays, B.FromDate, B.ToDate\r\n\t\t\t\t\t\t, [Billing].[UDF_IsSplitFYBilling](@invoiceId, B.FromDate, B.ToDate) --switched by Xin on 09/04/2019\r\n\t\t\t\t\t\t, 0, Billing.UDF_GetBillingPeriodDaysInCurrentFY(@invoiceId, B.FromDate, B.ToDate, B.BillingPeriodDays)\r\n\t\t\t\t\t\t, B.IsManualEntry, B.IsEstimated, B.DateBilled, B.DateDue\r\n\t\t\t\t\t\t, B.EnergyUnit\r\n\t\t\t\t\t\t, B.AccountEnergyUsage, 0, B.AccountEnergyUsage\r\n\t\t\t\t\t\t, B.AccountDemandUsage, 0, B.AccountDemandUsage\r\n\t\t\t\t\t\t, CONVERT(DECIMAL(18, 2), B.AmountBilled), CONVERT(DECIMAL(18, 2), B.AmountPaid), 0, CONVERT(DECIMAL(18, 2), B.AmountPaid)\r\n\t\t\t\t\t\t, @userId\r\n\t\t\t\t\tFROM [dbo].[UDF_SplitToTable](@accountIds, ',') T\r\n\t\t\t\t\tJOIN [Billing].[vwAccountBillings] B ON B.BillingID = T.ID\r\n\t\t\t\t\tJOIN Invoice.vwInvoiceGroupContracts IG ON B.GroupID=IG.GroupID AND \r\n\t\t\t\t\t(\t(Billing.UDF_GetBillingPeriodDaysInCurrentFY(@invoiceId, B.FromDate, B.ToDate, B.BillingPeriodDays)=0 AND IG.FiscalYear=@priorFY) \r\n\t\t\t\t\t\tOR \r\n\t\t\t\t\t\t(Billing.UDF_GetBillingPeriodDaysInCurrentFY(@invoiceId, B.FromDate, B.ToDate, B.BillingPeriodDays)>0 AND IG.FiscalYear=@currentFY)\r\n\t\t\t\t\t)\r\n\t\t\t\t\tWHERE IG.invoiceID=@invoiceId AND B.GroupID = @groupId; --07/26/2019 added by Xin for ConEd Steam change\r\n\t\t\t\t\t        \r\n\r\n\t\t-- Update number of billing days in prior FY if there is a difference in FY between from and to dates\r\n\t\tUPDATE BILL\r\n\t\tSET BILL.BillingPeriodDaysPriorFY\t\t= BILL.BillingPeriodDays - BILL.BillingPeriodDaysCurrentFY\r\n\t\tFROM [Invoice].[InvoiceAccountBilling] BILL\r\n\t\tJOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID;\r\n\r\n\t\t-- Update current FY data if there is a difference in FY between from and to dates\r\n\t\tUPDATE BILL\r\n\t\tSET BILL.AmountPaidCurrentFY\t\t\t= (BILL.BillingPeriodDaysCurrentFY * BILL.AmountPaid) / BILL.BillingPeriodDays\r\n\t\t\t, BILL.EnergyUsageCurrentFY\t\t\t= (BILL.BillingPeriodDaysCurrentFY * BILL.EnergyUsage) / BILL.BillingPeriodDays\r\n\t\t\t, BILL.DemandUsageCurrentFY\t\t\t= (BILL.BillingPeriodDaysCurrentFY * BILL.DemandUsage) / BILL.BillingPeriodDays\r\n\t\tFROM [Invoice].[InvoiceAccountBilling] BILL\r\n\t\tJOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID;\r\n\r\n\t\t-- Update prior FY data if there is a difference in FY between from and to dates\r\n\t\tUPDATE BILL\r\n\t\tSET BILL.AmountPaidPriorFY\t\t= BILL.AmountPaid - BILL.AmountPaidCurrentFY\r\n\t\t\t, BILL.EnergyUsagePriorFY\t= BILL.EnergyUsage - BILL.EnergyUsageCurrentFY\r\n\t\t\t, BILL.DemandUsagePriorFY\t= BILL.DemandUsage - BILL.DemandUsageCurrentFY\r\n\t\tFROM [Invoice].[InvoiceAccountBilling] BILL\r\n\t\tJOIN @billingTable T ON T.InvoiceBillingID = BILL.InvoiceBillingID;\r\n\r\n\t\t-- Create audit note\r\n\t\tINSERT INTO [Common].[Note] (ParentType, ParentID, [Action], Note, CreatedBy)\r\n\t\tVALUES ('INVOICE', @invoiceId, 'ADD ACCOUNTS', 'Billing account(s) added', @userId);\r\n\r\n\t\t-- Update Payment Allocations if there is any. Added on 4/16/2018\t\t\r\n\t\tINSERT INTO @updatedBudgetCodeTable (BudgetCode)\r\n\t\tSELECT DISTINCT d.BudgetCode\r\n\t\tFROM    Invoice.InvoiceAccountBilling a\r\n\t\t\t\tLEFT JOIN Billing.EC3_Billing_Account AS b ON a.AccountID = b.AccountSeqid\r\n\t\t\t\tLEFT JOIN Billing.EC3_Billing_AgencyFundingAssignments AS c ON b.AgencyAccount = c.AgencyDivisionSeqid\r\n\t\t\t\tLEFT JOIN Billing.EC3_Billing_AgencyFunding AS d ON c.AgencyFundingSeqid = d.AgencyFundingSeqid\r\n\t\tWHERE a.InvoiceBillingID IN (SELECT InvoiceBillingID FROM @billingTable);\r\n\r\n\t\tIF @invoiceIsSplitFY = 0\r\n\t\tBEGIN\r\n\t\t\tDELETE FROM [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\tWHERE InvoiceContractLineID IN (\r\n\t\t\t\tSELECT InvoiceContractLineID \r\n\t\t\t\tFROM invoice.InvoiceContractLine \r\n\t\t\t\tWHERE InvoiceID=@invoiceId AND FiscalYear = @fiscalYear AND ContractID=@contractId AND BudgetCode IN \r\n\t\t\t\t(\r\n\t\t\t\t\tSELECT BudgetCode FROM @updatedBudgetCodeTable\r\n\t\t\t\t\tINTERSECT\r\n\t\t\t\t\tSELECT BudgetCode FROM invoice.InvoiceContractLine WHERE InvoiceID = @invoiceId AND FiscalYear = @fiscalYear AND ContractID = @contractId\r\n\t\t\t\t)\r\n\t\t\t);\r\n\r\n\t\t\tDELETE FROM invoice.InvoiceContractLine \r\n\t\t\tWHERE InvoiceID=@invoiceId AND FiscalYear = @fiscalYear AND ContractID=@contractId AND BudgetCode IN \r\n\t\t\t(\r\n\t\t\t\tSELECT BudgetCode FROM @updatedBudgetCodeTable\r\n\t\t\t\tINTERSECT\r\n\t\t\t\tSELECT BudgetCode FROM invoice.InvoiceContractLine WHERE InvoiceID = @invoiceId AND FiscalYear = @fiscalYear AND ContractID = @contractId\r\n\t\t\t);\r\n\t\tEND;\r\n\t\tELSE\t\t\t\t\r\n\t\tBEGIN\r\n\t\t\tDELETE FROM [Invoice].[InvoiceContractLineAllocation]\r\n\t\t\tWHERE InvoiceContractLineID IN (\r\n\t\t\t\tSELECT InvoiceContractLineID \r\n\t\t\t\tFROM invoice.InvoiceContractLine \r\n\t\t\t\tWHERE InvoiceID=@invoiceId \r\n\t\t\t\t\tAND FiscalYear IN (@priorFY, @currentFY)\r\n\t\t\t\t\tAND ContractID=@contractId \r\n\t\t\t\t\tAND BudgetCode IN (SELECT BudgetCode FROM @updatedBudgetCodeTable)\r\n\t\t\t);\r\n\r\n\t\t\tDELETE FROM invoice.InvoiceContractLine \r\n\t\t\tWHERE InvoiceID=@invoiceId \r\n\t\t\t\tAND FiscalYear IN (@priorFY, @currentFY)\r\n\t\t\t\tAND ContractID=@contractId \r\n\t\t\t\tAND BudgetCode IN (SELECT BudgetCode FROM @updatedBudgetCodeTable);\r\n\t\tEND;\r\n\r\n\t\tCOMMIT TRAN @tranName;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tIF XACT_STATE() <> 0 ROLLBACK TRAN @tranName;\r\n\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE();\r\n\t\tSET @severity\t= 'ERROR';\r\n\t\tSET @message\t= 'Failed to add invoice billing account(s)';\r\n\t\tSET @sendEmail\t= 1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r"
        }
      ]
    }
  ]
}