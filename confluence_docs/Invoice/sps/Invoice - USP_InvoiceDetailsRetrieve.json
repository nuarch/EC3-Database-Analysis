{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Invoice",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "USP_InvoiceDetailsRetrieve",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "USP_InvoiceDetailsRetrieve",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve detailed information about invoices from a SQL Server database. It gathers data from various invoice-related tables and views, including invoice headers, groups, accounts, contract lines, allocations, payments, and notes. The procedure allows filtering by invoice ID or invoice number and returns comprehensive details about the specified invoice."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this stored procedure is high due to the following reasons:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple SELECT statements querying different tables and views."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses conditional logic to handle different scenarios based on input parameters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes subqueries and user-defined functions to derive additional data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It performs aggregations and window functions to calculate sums and rankings."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It handles potential null values and default parameter settings."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@invoiceId AS INT = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional. Specifies the ID of the invoice to retrieve."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@invoiceNumber AS VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional. Specifies the number of the invoice to retrieve."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@correlationId AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional. Used for tracking or logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@machineName AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional. Used for tracking or logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@processName AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional. Used for tracking or logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@domain AS VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional. Used for tracking or logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@username AS VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional. Used for tracking or logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@userId AS INT = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Optional. Used for tracking or logging purposes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Output parameter for capturing any exception details."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting "
                },
                {
                  "type": "text",
                  "text": "NOCOUNT ON",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to prevent extra result sets and sets the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to allow dirty reads."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It initializes "
                },
                {
                  "type": "text",
                  "text": "@invoiceId",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "@invoiceNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to null if they are zero or empty, respectively."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Invoice ID Resolution",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If "
                },
                {
                  "type": "text",
                  "text": "@invoiceId",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is null and "
                },
                {
                  "type": "text",
                  "text": "@invoiceNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " is provided, it retrieves the "
                },
                {
                  "type": "text",
                  "text": "InvoiceID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " using the "
                },
                {
                  "type": "text",
                  "text": "InvoiceNumber",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Invoice Header Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Queries the "
                },
                {
                  "type": "text",
                  "text": "vwInvoices",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " view to get invoice header details, including user names for created and modified by fields using subqueries."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Invoice Group Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Retrieves invoice group details, including amounts and fiscal year data, using joins and aggregations. It uses user-defined functions to calculate amounts based on approval status."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Invoice Account Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Fetches account billing details related to the invoice."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Invoice Contract Line Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Retrieves contract line details, including fiscal year allocations using window functions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Invoice Contract Line Allocation Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Fetches allocation details and calculates previous fiscal year amounts using subqueries."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Invoice Payment Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Retrieves payment details associated with the invoice."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Invoice Note Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Fetches notes related to the invoice, ordered by creation date."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While it improves performance by allowing dirty reads, it may lead to inconsistent data reads."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Multiple Joins and Subqueries",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure involves complex joins and subqueries, which can be resource-intensive and slow down performance, especially on large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Use of User-Defined Functions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Functions like "
                },
                {
                  "type": "text",
                  "text": "UDF_GetOriginalAmt",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "UDF_GetFiscalYear",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can impact performance if not optimized, as they are called multiple times."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Aggregations and Window Functions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": These operations can be computationally expensive, particularly if the underlying tables are large."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dirty Reads",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can lead to reading uncommitted data, which might not be suitable for all business scenarios."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Null Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that "
                },
                {
                  "type": "text",
                  "text": "NULLIF",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " will handle zero or empty values correctly, but any changes in input data types or logic might affect this."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": High concurrency scenarios might lead to performance bottlenecks due to the complexity of queries."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling mechanisms, which could lead to unhandled exceptions being propagated to the calling application."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the data grows, the performance of this procedure might degrade due to its complexity and the volume of data processed."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Invoice].[USP_InvoiceDetailsRetrieve]\n(\r\n\t@invoiceId AS INT = NULL\r\n\t,@invoiceNumber AS VARCHAR(25) = NULL\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\tSET ARITHABORT ON;\r\n\t  \r\n\tSELECT @invoiceId = NULLIF(@invoiceId, 0), @invoiceNumber = NULLIF(@invoiceNumber, '');\r\n\tDECLARE @approved AS INT = 0;\r\n\r\n\t-- Fill @invoiceId if it's null\r\n\tIF (@invoiceId IS NULL AND @invoiceNumber IS NOT NULL)\r\n\tBEGIN\r\n\t\tSELECT @invoiceId = InvoiceID FROM Invoice.Invoice WHERE InvoiceNumber = @invoiceNumber;\r\n\tEND;\r\n\r\n\t-- Invoice header\r\n\tSELECT InvoiceID, InvoiceBillingPeriod, InvoiceNumber, InvoiceGroupCount, AmountBilled, AmountPaid, ProviderID, StatusID\r\n\t\t,InvoiceDate, CreatedDate, CreatedBy, ModifiedDate, ModifiedBy, Active\r\n\t\t,IIF(ModifiedBy=0, 'System', (SELECT UserFirstName + ' ' + UserLastName FROM Billing.EC3_Membership_EC3Membership WHERE AuthenticatedUserID = ModifiedBy)) AS modifiedByName\r\n\t\t,(SELECT UserFirstName + ' ' + UserLastName FROM Billing.EC3_Membership_EC3Membership WHERE AuthenticatedUserID = CreatedBy) AS createdByName\r\n\t\t,Billing.UDF_IsSplitFYInvoice(InvoiceID) AS InvoiceIsSplitFY, Billing.UDF_GetFiscalYear(CreatedDate) AS CurrentFY\r\n\tFROM Invoice.vwInvoices\r\n\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber);\r\n\r\n\t-- Invoice groups\r\n\tSELECT @approved = statusId FROM Invoice.Invoice WHERE InvoiceID = @invoiceId;\r\n\r\n\tSELECT a1.InvoiceGroupContractID, a1.InvoiceID, a1.GroupID, a1.IsSummaryBilling, a1.BillingType, ISNULL(b.AmountBilled, 0) AS AmountBilled\r\n\t\t,a1.AmountPaid, a1.FiscalYear, a1.ContractNumber, a1.BudgetCode, a1.FundingSourceDescription, a1.ActualAmount, a1.CloseAmount\r\n\t\t,a1.OpenAmount, a1.AvailableAmount, a1.CreatedDate, a1.CreatedBy, a1.ModifiedDate, a1.ModifiedBy, a1.Ranking, a1.ContractLineNum\r\n\tFROM (SELECT a.InvoiceGroupContractID, a.InvoiceID, a.GroupID, a.IsSummaryBilling, a.BillingType, SUM(ISNULL(c.AmountPaid, 0)) AS AmountPaid\r\n\t\t\t,a.FiscalYear, a.ContractID, a.ContractNumber, a.BudgetCode, SUM(a.CloseAmount) AS CloseAmount, ISNULL(a.FundingSourceDescription, '') AS FundingSourceDescription\r\n\t\t\t,SUM(IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(NULL, a.contractLineID, a.FiscalYear, @invoiceId), a.ActualAmount)) AS ActualAmount\r\n\t\t\t,SUM(IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(NULL, a.contractLineID, a.FiscalYear, @invoiceId), a.ActualAmount)) - SUM(a.CloseAmount) AS OpenAmount\r\n\t\t\t,SUM(IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(NULL, a.contractLineID, a.FiscalYear, @invoiceId), a.ActualAmount)) - SUM(a.CloseAmount) AS AvailableAmount\r\n\t\t\t,a.CreatedDate, a.CreatedBy, a.ModifiedDate, a.ModifiedBy, DENSE_RANK() OVER (PARTITION BY a.InvoiceGroupContractID ORDER BY a.BudgetCode) AS Ranking\r\n\t\t\t,COUNT(1) OVER (PARTITION BY a.InvoiceGroupContractID) AS ContractLineNum\r\n\t\tFROM Invoice.vwinvoicegroupcontractlines AS a\r\n\t\t\tLEFT JOIN invoice.InvoiceContractLine AS c ON a.InvoiceID = c.InvoiceID AND a.ContractID = c.ContractID AND a.BudgetCode = c.BudgetCode\r\n\t\t\t\tAND a.FiscalYear = c.FiscalYear AND a.CommodityLine = c.CommodityLine AND a.AccountingLine = c.AccountingLine\r\n\t\tWHERE a.InvoiceID = ISNULL(@invoiceId, a.InvoiceID) AND a.InvoiceNumber = ISNULL(@invoiceNumber, a.InvoiceNumber)\r\n\t\tGROUP BY a.InvoiceGroupContractID, a.InvoiceID, a.GroupID, a.IsSummaryBilling, a.BillingType, a.FiscalYear, a.ContractID, a.ContractNumber\r\n\t\t\t,a.BudgetCode, ISNULL(a.FundingSourceDescription, ''), a.CreatedDate, a.CreatedBy, a.ModifiedDate, a.ModifiedBy) AS a1\r\n\t\tLEFT JOIN (SELECT InvoiceID, GroupID, BudgetCode, FiscalYear, AmountBilled\r\n\t\tFROM Invoice.vwInvoiceGroupContractLineAmountsFromBilling \r\n\t\tWHERE InvoiceID = @invoiceId) AS b ON a1.InvoiceID = b.InvoiceID AND a1.GroupID = b.GroupID AND a1.BudgetCode = b.BudgetCode AND a1.FiscalYear = b.FiscalYear\r\n\tUNION\r\n\tSELECT DISTINCT a.InvoiceGroupContractID, a.invoiceid, a.GroupID, a .IsSummaryBilling, a.BillingType, b.AmountBilled, b.AmountPaid, a.FiscalYear\r\n\t\t,a.ContractNumber, '' BudgetCode, '' AS FundingSourceDescription\r\n\t\t,IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(a.ContractID, NULL, a.FiscalYear, @invoiceId), SUM(a.ActualAmount) OVER (PARTITION BY a.InvoiceGroupContractID)) AS ActualAmount\r\n\t\t,SUM(a.CloseAmount) OVER (PARTITION BY a.InvoiceGroupContractID) AS CloseAmount\r\n\t\t,IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(a.ContractID, NULL, a.FiscalYear, @invoiceId) - (SUM(a.CloseAmount) OVER (PARTITION BY a.InvoiceGroupContractID)), SUM(a.OpenAmount) OVER (PARTITION BY a.InvoiceGroupContractID)) AS OpenAmount\r\n\t\t,IIF(@approved >= 4, Invoice.UDF_GetOriginalAmt(a.ContractID, NULL, a.FiscalYear, @invoiceId) - (SUM(a.CloseAmount) OVER (PARTITION BY a.InvoiceGroupContractID)), SUM(a.OpenAmount) OVER (PARTITION BY a.InvoiceGroupContractID)) AS AvailableAmount\r\n\t\t,a.CreatedDate, a.CreatedBy, a.ModifiedDate, a.ModifiedBy, 0 AS Ranking, 0 AS ContractLineNum\r\n\tFROM Invoice.vwinvoicegroupcontractlines AS a\r\n\t\tINNER JOIN Invoice.vwInvoiceGroupContracts AS b ON a.invoiceid = b.invoiceid AND a.contractid = b.contractid AND a.groupid = b.groupid\r\n\t\t\tAND a.InvoiceGroupContractID = b.InvoiceGroupContractID\r\n\tWHERE a.invoiceid = ISNULL(@invoiceId, a.InvoiceID)\r\n\tORDER BY GroupID, FiscalYear, InvoiceGroupContractID, Ranking;\r\n\r\n\t-- Invoice accounts\r\n\tSELECT InvoiceBillingID, InvoiceGroupContractID, InvoiceID, InvoiceNumber, GroupID, GroupName, ContractID, ContractNumber, FiscalYear\r\n\t\t,AccountID, AccountNumber, FormattedAccountNumber, BillingID, BillingPeriod, BillingPeriodDays, BillingPeriodDaysPriorFY, BillingPeriodDaysCurrentFY\r\n\t\t,IsEstimated, IsManualEntry, AmountBilled, AmountPaid, AmountPaidPriorFY, AmountPaidCurrentFY, EnergyUsage, EnergyUsagePriorFY, EnergyUsageCurrentFY\r\n\t\t,DemandUsage, DemandUsagePriorFY, DemandUsageCurrentFY, DateBilled, DateDue, FromDate, ToDate, SplitFY, CreatedDate, CreatedBy, ModifiedDate, ModifiedBy, Active\r\n\tFROM Invoice.vwInvoiceAccountBillings\r\n\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber);\r\n\r\n\t-- Invoice contract lines\r\n\tSELECT DISTINCT ICL.InvoiceContractLineID, ICL.InvoiceID, ICL.InvoiceNumber, ICL.ContractID, ICL.ContractNumber, ICL.ContractLineID\r\n\t\t,ICL.FiscalYear, ICL.CommodityLine, ICL.AccountingLine, ICL.BudgetCode, ICL.ObjectCode, ICL.UoA, ICL.AmountPaid, ICL.CreatedDate\r\n\t\t,ICL.CreatedBy, ICL.ModifiedDate, ICL.ModifiedBy, ICL.Active\r\n\t\t,SUM(IIF(ICLA.AllocationFiscalYear < Billing.UDF_GetFiscalYear(ICL.CreatedDate), ICLA.AllocationAmount, 0)) OVER (PARTITION BY ICL.InvoiceContractLineID) AS PriorFYAmountPaid\r\n\t\t,SUM(IIF(ICLA.AllocationFiscalYear = Billing.UDF_GetFiscalYear(ICL.CreatedDate), ICLA.AllocationAmount, 0)) OVER (PARTITION BY ICL.InvoiceContractLineID) AS CurrentFYAmountPaid\r\n\t\t,ICL.OpenAmount\r\n\tFROM Invoice.vwInvoiceContractLines AS ICL \r\n\t\tINNER JOIN Invoice.InvoiceContractLineAllocation AS ICLA ON ICL.InvoiceContractLineID = ICLA.InvoiceContractLineID\r\n\t\tINNER JOIN Invoice.Invoice AS I ON ICL.InvoiceID = I.InvoiceID\r\n\tWHERE ICL.InvoiceID = ISNULL(@invoiceId, ICL.InvoiceID)\r\n\t\tAND ICL.InvoiceNumber = ISNULL(@invoiceNumber, ICL.InvoiceNumber)\r\n\tORDER BY ICL.ContractID, ICL.FiscalYear, ICL.CommodityLine, ICL.AccountingLine, ICL.BudgetCode;\r\n\r\n\t-- Invoice contract line allocations\r\n\tSELECT ICLA.InvoiceContractLineAllocationID, ICLA.AllocationFiscalYear, ICLA.AllocationAmount, ICLA.InvoiceContractLineID, ICLA.InvoiceID\r\n\t\t,ICLA.InvoiceNumber, ICLA.ContractID, ICLA.ContractNumber, ICLA.FiscalYear, ICLA.CommodityLine, ICLA.AccountingLine, ICLA.BudgetCode\r\n\t\t,ICLA.ObjectCode, ICLA.UoA, ICLA.AmountPaid, ICLA.Comments, ICLA.CreatedBy, ICLA.CreatedDate, ICLA.ModifiedBy, ICLA.ModifiedDate, ICLA.Active\r\n\t\t,ISNULL((SELECT SUM(a.AllocationAmount)\r\n\t\t\tFROM invoice.InvoiceContractLineAllocation AS a\r\n\t\t\t\tINNER JOIN invoice.InvoiceContractLine AS b ON a.InvoiceContractLineID = b.InvoiceContractLineID\r\n\t\t\t\tINNER JOIN invoice.Invoice AS c ON b.InvoiceID = c.InvoiceID\r\n\t\t\tGROUP BY c.InvoiceID, a.AllocationAmount, a.AllocationFiscalYear, b.InvoiceContractLineID, b.FiscalYear\r\n\t\t\tHAVING b.InvoiceContractLineID = ICLA.InvoiceContractLineID\r\n\t\t\t\tAND a.AllocationFiscalYear = Billing.UDF_GetFiscalYear(DATEADD(year, -1, ICLA.AllocationFiscalYear))),0) AS PrevFiscalYearAmt\r\n\tFROM [Invoice].[vwInvoiceContractLineAllocations] ICLA\r\n\tWHERE ICLA.InvoiceID = ISNULL(@invoiceId, ICLA.InvoiceID)\r\n\t\tAND ICLA.InvoiceNumber = ISNULL(@invoiceNumber, ICLA.InvoiceNumber)\r\n\tORDER BY ICLA.InvoiceNumber ASC, ICLA.CommodityLine ASC, ICLA.AccountingLine ASC;\r\n\r\n\t-- Invoice payments\r\n\tSELECT InvoicePaymentID, InvoiceGroupContractID, InvoiceID, InvoiceNumber, InvoiceDate, GroupID, GroupName\r\n\t\t,ContractID, ContractNumber, PaymentType, PaymentNumber, PaymentAmount, DateIssued, DateCleared, DateAccepted\r\n\t\t,CreatedDate, CreatedBy, ModifiedDate, ModifiedBy, Active\r\n\tFROM Invoice.vwInvoicePayments\r\n\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber);\r\n\r\n\t-- Invoice notes\r\n\tSELECT NoteID, [Action], Note, CreatedDate, CreatedBy, Username\r\n\tFROM Invoice.vwInvoiceNotes\r\n\tWHERE InvoiceID = ISNULL(@invoiceId, InvoiceID)\r\n\t\tAND InvoiceNumber = ISNULL(@invoiceNumber, InvoiceNumber)\r\n\tORDER BY CreatedDate DESC;\r\nEND;\r"
        }
      ]
    }
  ]
}