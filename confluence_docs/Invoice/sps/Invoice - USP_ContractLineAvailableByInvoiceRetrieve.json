{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Invoice",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "USP_ContractLineAvailableByInvoiceRetrieve",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "USP_ContractLineAvailableByInvoiceRetrieve",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve available contract lines associated with a specific invoice. It determines whether the invoice is split across fiscal years and retrieves contract line details accordingly. The procedure logs its execution details and handles exceptions by capturing error messages."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity is considered medium due to the following factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Use of conditional logic to handle split fiscal year invoices."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Utilization of common table expressions (CTEs) and window functions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Integration with user-defined functions and logging mechanisms."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Exception handling and dynamic parameter management."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@invoiceId AS INT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The primary identifier for the invoice whose contract lines are to be retrieved."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@correlationId AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An optional identifier for correlating logs or transactions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@machineName AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The name of the machine executing the procedure, used for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@processName AS VARCHAR(128) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The name of the process executing the procedure, used for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@domain AS VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The domain of the user executing the procedure, used for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@username AS VARCHAR(25) = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The username of the person executing the procedure, used for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@userId AS INT = NULL",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The user ID of the person executing the procedure, used for logging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An output parameter to capture exception details if an error occurs."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Sets default values for parameters and initializes variables for logging and execution tracking."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Determine Fiscal Year",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Calls user-defined functions to check if the invoice is split across fiscal years and to get the current fiscal year."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If the invoice is not split across fiscal years, it retrieves contract line details using a CTE that joins multiple views and calculates amounts."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "If the invoice is split, it retrieves contract line details with additional fiscal year-specific calculations."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Uses window functions like "
                },
                {
                  "type": "text",
                  "text": "DENSE_RANK()",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "ROW_NUMBER()",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to organize and rank data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Exception Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Catches any errors during execution, logs the error message, and sets a flag to send an email notification."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Calls a logging procedure to record the execution details, including any exceptions and the elapsed time."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the columns used in joins and where clauses are indexed to optimize query performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "User-Defined Functions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of scalar functions like "
                },
                {
                  "type": "text",
                  "text": "Billing.UDF_IsSplitFYInvoice",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "text",
                  "text": "Billing.UDF_GetFiscalYear",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can impact performance if not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Window Functions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": While powerful, window functions can be resource-intensive, especially on large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Logging Overhead",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Frequent logging can introduce overhead, particularly if the procedure is executed often."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure captures error messages but does not implement a retry mechanism or detailed error resolution steps."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the use of CTEs and window functions may lead to performance bottlenecks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If multiple instances of this procedure run simultaneously, there could be contention on shared resources, especially if logging or user-defined functions are not thread-safe."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Assumes that the data in the views and user-defined functions is accurate and up-to-date, which may not always be the case if there are delays in data refresh or synchronization."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [Invoice].[USP_ContractLineAvailableByInvoiceRetrieve]\n(\r\n\t@invoiceId AS INT\r\n\t,@correlationId AS VARCHAR(128) = NULL\r\n\t,@machineName AS VARCHAR(128) = NULL\r\n\t,@processName AS VARCHAR(128) = NULL\r\n\t,@domain AS VARCHAR(25) = NULL\r\n\t,@username AS VARCHAR(25) = NULL\r\n\t,@userId AS INT = NULL\r\n\t,@exceptionDetails AS VARCHAR(MAX) = NULL OUTPUT\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDECLARE @action AS VARCHAR(25) = 'RETRIEVE', @severity AS VARCHAR(25) = 'INFO', @message AS VARCHAR(255) = 'Retrieved available contract line(s) by invoice'\r\n\t\t,@messageDetails AS VARCHAR(MAX), @startTime AS DATETIME = GETDATE(), @elapsedTime AS INT, @sendEmail AS BIT = 0, @invoiceIsSplitFY AS BIT\r\n\t\t,@priorFY AS INT, @currentFY AS INT;\r\n\r\n\tSELECT @userId = ISNULL(@userId, 0), @invoiceId = NULLIF(@invoiceId, 0), @correlationId = ISNULL(@correlationId, CONVERT(VARCHAR(128), NEWID()))\r\n\t\t,@machineName = COALESCE(@machineName, @@SERVERNAME, 'NA')\r\n\t\t,@processName = COALESCE(@processName, QUOTENAME(OBJECT_SCHEMA_NAME(@@PROCID)) + '.' + QUOTENAME(OBJECT_NAME(@@PROCID)), 'NA');\r\n\r\n\tSELECT @messageDetails = CONVERT(VARCHAR(MAX), (SELECT @invoiceId AS INVID FOR XML PATH('INPUTS')))\r\n\t\t, @invoiceIsSplitFY = Billing.UDF_IsSplitFYInvoice(@invoiceId);\r\n\r\n\tSELECT @currentFY = Billing.UDF_GetFiscalYear(CreatedDate) \r\n\tFROM Invoice.Invoice\r\n\tWHERE InvoiceID = @invoiceId;\r\n\r\n\tSET @priorFY = @currentFY-1;\r\n\r\n\tBEGIN TRY\r\n\t\tIF (@invoiceIsSplitFY = 0)\r\n\t\tBEGIN\r\n\t\t\tWITH T AS (SELECT R.ContractID, R.GroupID, R.GroupName, R.FiscalYear, R.CommodityLine, R.AccountingLine, R.BudgetCode\r\n\t\t\t\t\t, IIF(R.rowid = 1, R.AmountPaid, 0) AS AmountPaid, R.ActualAmountPaid\r\n\t\t\t\tFROM (SELECT DISTINCT a.ContractID, a.GroupID, a.GroupName, a.FiscalYear, a.BudgetCode, a.CommodityLine, a.AccountingLine\r\n\t\t\t\t\t\t,DENSE_RANK() OVER (PARTITION BY a.GroupID, a.BudgetCode ORDER BY a.CommodityLine, a.AccountingLine) AS rowid\r\n\t\t\t\t\t\t,ISNULL(b.AmountPaid, 0) AS AmountPaid\r\n\t\t\t\t\t\t,ISNULL(c.AmountPaid, 0) AS ActualAmountPaid\r\n\t\t\t\t\tFROM Invoice.vwinvoicegroupcontractlines AS a\r\n\t\t\t\t\t\tLEFT JOIN (SELECT InvoiceID, GroupID, BudgetCode, FiscalYear, AmountPaid\r\n\t\t\t\t\t\tFROM Invoice.vwInvoiceGroupContractLineAmountsFromBilling \r\n\t\t\t\t\t\tWHERE InvoiceID = @invoiceId) AS b ON a.InvoiceID = b.InvoiceID\r\n\t\t\t\t\t\t\tAND a.GroupID = b.GroupID\r\n\t\t\t\t\t\t\tAND a.budgetcode = b.budgetcode\r\n\t\t\t\t\t\t\tAND a.FiscalYear = b.FiscalYear\r\n\t\t\t\t\t\tLEFT JOIN Invoice.vwInvoiceContractLines AS c ON a.invoiceid = c.InvoiceID AND a.ContractID = c.ContractID\r\n\t\t\t\t\t\t\tAND a.CommodityLine = c.CommodityLine AND a.AccountingLine = c.AccountingLine AND a.BudgetCode = c.BudgetCode\r\n\t\t\t\t\tWHERE a.InvoiceID = @invoiceId) AS R\r\n\t\t\t)\r\n\t\t\tSELECT CL.ContractLineID, T.GroupID, T.GroupName, CL.FiscalYear, CL.CommodityLine, CL.AccountingLine, CL.BudgetCode, CL.ObjectCode, CL.UoA\r\n\t\t\t\t,CL.ActualAmount, Billing.UDF_GetContractLineAmountPaid(CL.ContractLineID, GETDATE()) AS CloseAmount\r\n\t\t\t\t,CL.ActualAmount - Billing.UDF_GetContractLineAmountPaid(CL.ContractLineID, GETDATE()) - T.ActualAmountPaid AS OpenAmount\r\n\t\t\t\t,CL.AvailableAmount, CL.ContractID, CL.ContractNumber, CL.CreatedDate, CL.CreatedBy, CL.ModifiedDate, CL.ModifiedBy\r\n\t\t\t\t,CL.Active, T.AmountPaid, 0.00 AS PriorFYAmountPaid, T.AmountPaid AS CurrentFYAmountPaid, T.ActualAmountPaid\r\n\t\t\t\t,0.00 AS PriorFYActualAmountPaid, T.ActualAmountPaid AS CurrentFYActualAmountPaid, @invoiceIsSplitFY AS InvoiceIsSplitFY\r\n\t\t\t\t,@currentFY AS CurrentFY, COUNT(1) OVER (PARTITION BY CL.ContractID, CL.BudgetCode) AS CountPerYear\r\n\t\t\t\t,CAST(ROW_NUMBER() OVER (PARTITION BY CL.ContractID, CL.BudgetCode ORDER BY CL.CommodityLine, CL.AccountingLine) AS INT) AS IndexPerYear\r\n\t\t\t\t,CAST(ROW_NUMBER() OVER (PARTITION BY CL.ContractID, CL.BudgetCode ORDER BY CL.CommodityLine, CL.AccountingLine) AS INT) AS IndexAll\r\n\t\t\tFROM Billing.vwContractLines AS CL\r\n\t\t\t\tINNER JOIN T ON T.ContractID = CL.ContractID AND T.FiscalYear = CL.FiscalYear AND T.budgetCode = CL.BudgetCode\r\n\t\t\t\t\tAND T.CommodityLine = CL.CommodityLine AND T.AccountingLine = CL.AccountingLine\r\n\t\t\tORDER BY T.GroupID ASC, CL.FiscalYear, CL.CommodityLine ASC, CL.AccountingLine ASC, CL.BudgetCode;\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tWITH T AS (SELECT R.ContractID, R.GroupID, R.GroupName, R.FiscalYear, R.CommodityLine, R.AccountingLine, R.BudgetCode, IIF(R.rowid = 1, R.AmountPaid, 0) AS AmountPaid\r\n\t\t\t\t\t,IIF(R.FiscalYear = @priorFY, IIF(R.rowid = 1, R.AmountPaid, 0), 0) AS PriorFYAmountPaid\r\n\t\t\t\t\t,IIF(R.FiscalYear = @currentFY, IIF(R.rowid = 1, R.AmountPaid, 0), 0) AS CurrentFYAmountPaid\r\n\t\t\t\t\t,R.ActualAmountPaid, R.PriorFYActualAmountPaid, R.CurrentFYActualAmountPaid\r\n\t\t\t\tFROM (SELECT DISTINCT a.ContractID, a.FiscalYear, a.BudgetCode, a.CommodityLine, a.AccountingLine, a.GroupID, a.GroupName\r\n\t\t\t\t\t\t,DENSE_RANK() OVER (PARTITION BY a.FiscalYear, a.GroupID, a.BudgetCode ORDER BY a.CommodityLine, a.AccountingLine) AS rowid\r\n\t\t\t\t\t\t,ISNULL(b.AmountPaid, 0) AS AmountPaid\r\n\t\t\t\t\t\t,ISNULL(c.AmountPaid, 0) AS ActualAmountPaid\r\n\t\t\t\t\t\t,ISNULL(c.PriorFYAmountPaid, 0) AS PriorFYActualAmountPaid\r\n\t\t\t\t\t\t,ISNULL(c.CurrentFYAmountPaid, 0) AS CurrentFYActualAmountPaid\r\n\t\t\t\t\tFROM Invoice.vwinvoicegroupcontractlines AS a\r\n\t\t\t\t\t\tLEFT JOIN (SELECT InvoiceID, GroupID, BudgetCode, FiscalYear, AmountPaid\r\n\t\t\t\t\t\tFROM Invoice.vwInvoiceGroupContractLineAmountsFromBilling \r\n\t\t\t\t\t\tWHERE InvoiceID = @invoiceId) AS b ON a.InvoiceID = b.InvoiceID\r\n\t\t\t\t\t\t\tAND a.GroupID = b.GroupID\r\n\t\t\t\t\t\t\tAND a.BudgetCode = b.BudgetCode\r\n\t\t\t\t\t\t\tAND a.FiscalYear = b.FiscalYear\r\n\t\t\t\t\t\tLEFT JOIN [Invoice].[vwInvoiceContractLinesSplitFY] c ON a.invoiceid = c.InvoiceID AND a.ContractID = c.ContractID \r\n\t\t\t\t\t\t\tAND a.FiscalYear = c.FiscalYear AND a.CommodityLine = c.CommodityLine AND a.AccountingLine = c.AccountingLine AND a.BudgetCode = c.BudgetCode\r\n\t\t\t\t\tWHERE a.InvoiceID = @invoiceId) AS R\r\n\t\t\t)\r\n\t\t\tSELECT CL.ContractLineID ,T.GroupID, T.GroupName, CL.FiscalYear, CL.CommodityLine, CL.AccountingLine, CL.BudgetCode, CL.ObjectCode, CL.UoA\r\n\t\t\t\t,CL.ActualAmount, Billing.UDF_GetContractLineAmountPaid(CL.ContractLineID, GETDATE()) AS CloseAmount\r\n\t\t\t\t,CL.ActualAmount - Billing.UDF_GetContractLineAmountPaid(CL.ContractLineID, GETDATE()) - T.ActualAmountPaid AS OpenAmount\r\n\t\t\t\t,CL.AvailableAmount, CL.ContractID, CL.ContractNumber, CL.CreatedDate, CL.CreatedBy, CL.ModifiedDate, CL.ModifiedBy\r\n\t\t\t\t,CL.Active, T.AmountPaid, T.PriorFYAmountPaid, T.CurrentFYAmountPaid, T.ActualAmountPaid, T.PriorFYActualAmountPaid\r\n\t\t\t\t,T.CurrentFYActualAmountPaid, @invoiceIsSplitFY AS InvoiceIsSplitFY, @currentFY AS CurrentFY\r\n\t\t\t\t,COUNT(1) OVER (PARTITION BY T.GroupID, CL.FiscalYear, CL.BudgetCode) AS CountPerYear\r\n\t\t\t\t,CAST(ROW_NUMBER() OVER (PARTITION BY T.GroupID, CL.FiscalYear, CL.BudgetCode ORDER BY CL.CommodityLine, CL.AccountingLine) AS INT) AS IndexPerYear\r\n\t\t\t\t,CAST(ROW_NUMBER() OVER (PARTITION BY T.GroupID, CL.BudgetCode ORDER BY CL.FiscalYear, CL.CommodityLine, CL.AccountingLine) AS INT) AS IndexAll\r\n\t\t\tFROM Billing.vwContractLines AS CL\r\n\t\t\t\tINNER JOIN T ON T.ContractID = CL.ContractID AND T.FiscalYear = CL.FiscalYear AND T.budgetCode = CL.BudgetCode\r\n\t\t\t\t\tAND T.CommodityLine = CL.CommodityLine AND T.AccountingLine = CL.AccountingLine\r\n\t\t\tORDER BY T.GroupID ASC, CL.FiscalYear, CL.CommodityLine ASC, CL.AccountingLine ASC, CL.BudgetCode;\r\n\t\tEND;\r\n\tEND TRY\r\n\tBEGIN CATCH\r\n\t\tSELECT @exceptionDetails = ERROR_MESSAGE(), @severity = 'ERROR', @message = 'Failed to retrieve available contract line(s) by invoice', @sendEmail =  1;\r\n\tEND CATCH;\r\n\r\n\tSET @elapsedTime = DATEDIFF(MILLISECOND, GETDATE(), @startTime);\r\n\r\n\tEXEC dbo.USP_AppLogCreate @correlationId = @correlationId\r\n\t\t,@machineName = @machineName\r\n\t\t,@processName = @processName\r\n\t\t,@action = @action\r\n\t\t,@severity = @severity\r\n\t\t,@message = @message\r\n\t\t,@messageDetails = @messageDetails\r\n\t\t,@exceptionDetails = @exceptionDetails\r\n\t\t,@domain = @domain\r\n\t\t,@username = @username\r\n\t\t,@userId = @userId\r\n\t\t,@sendEmail = @sendEmail\r\n\t\t,@elapsedTime = @elapsedTime;\r\nEND;\r"
        }
      ]
    }
  ]
}