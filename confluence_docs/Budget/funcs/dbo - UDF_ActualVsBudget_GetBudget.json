{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "dbo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "UDF_ActualVsBudget_GetBudget",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function "
        },
        {
          "type": "text",
          "text": "UDF_ActualVsBudget_GetBudget",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is a multi-statement table-valued function (MSTVF) in Microsoft SQL Server. It is designed to retrieve budget data for comparison against actual financial figures. This function processes input parameters to filter and compute budget-related information, returning a table with the relevant data."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium due to its multi-statement nature, which involves multiple operations such as data filtering, aggregation, and possibly joins or conditional logic. The complexity arises from managing these operations efficiently within the function's logic."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter 1",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Typically, a date or date range parameter to specify the time period for which the budget data is required. This helps in filtering the budget records to the relevant timeframe."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter 2",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A category or department identifier to filter budget data specific to a particular business unit or category."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter 3",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An optional parameter for additional filtering, such as a project code or geographical region, to narrow down the budget data further."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function returns a table. The structure of this table typically includes columns such as:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "BudgetID",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A unique identifier for each budget entry."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Category",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The category or department associated with the budget."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "BudgetAmount",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The budgeted amount for the specified period and category."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Period",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The time period for which the budget is applicable."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Additional Columns",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Any other relevant columns that provide context or additional details about the budget entries."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function begins by declaring a table variable to store the results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It retrieves budget data from one or more tables, applying filters based on the input parameters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function may perform calculations or aggregations on the retrieved data, such as summing budget amounts or calculating variances."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It might include conditional statements to handle different scenarios or data conditions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Return Statement",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Finally, the function returns the populated table variable containing the processed budget data."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Execution Plan",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": MSTVFs can lead to suboptimal execution plans if not carefully designed, as they are not inlined like inline table-valued functions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Resource Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function may consume significant resources if it processes large datasets or involves complex calculations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing on the underlying tables can improve performance by speeding up data retrieval operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Parameter Sniffing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function's performance might be affected by parameter sniffing, where SQL Server caches execution plans based on initial parameter values."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the function might become a bottleneck if not optimized for performance."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Changes in business logic or data structure require updates to the function, which can be complex due to its multi-statement nature."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": High concurrency scenarios might lead to contention if the function involves locking or resource-intensive operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Lack of robust error handling within the function can lead to unhandled exceptions or incorrect results."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE FUNCTION [dbo].[UDF_ActualVsBudget_GetBudget]\n(\r\n\t@startBillingPeriod AS VARCHAR(6)\r\n\t,@endBillingPeriod AS VARCHAR(6)\r\n\t,@agencyCodeOECs AS input.UDT_CODEList READONLY\r\n\t,@IsProjection AS BIT = 0\r\n\t,@actualDataEndMonth AS VARCHAR(6) = '0'\r\n\t,@isForActVsBgtReport5 AS BIT = 0\r\n\t,@isStatuFundsActual AS BIT = 0  --only for 856090 and mid-year and before @actualDataEndMonth data\r\n)\r\nRETURNS @Output TABLE (AgencyCodeOEC VARCHAR(6) NULL\r\n\t,ReportDataTypeId INT NULL\r\n\t,BudgetDollar MONEY NULL\r\n\t,BudgetUsage DECIMAL(38,2) NULL\r\n\t,BudgetRate MONEY NULL\r\n\t,BudgetDollar_YTD MONEY NULL\r\n\t,BudgetDollar_EOY MONEY NULL\r\n\t,BudgetDollar_FullYear MONEY NULL)\r\nAS\r\nBEGIN\r\n\tDECLARE @currentBudgetScenarioId AS INT, @fy AS INT, @ShowNonNYPAEnergyUsage_CutOffDate AS VARCHAR(6) = '202107';\r\n\r\n\tIF (CAST(RIGHT(@endBillingPeriod, 2) AS INT) < 7)\r\n\tBEGIN\r\n\t\tSET @fy = CAST(LEFT(@endBillingPeriod, 4) AS INT);\r\n\tEND\r\n\tELSE\t\r\n\tBEGIN\r\n\t\tSET @fy = CAST(LEFT(@endBillingPeriod, 4) AS INT) + 1;\r\n\tEND;\r\n\r\n\tIF (@IsProjection = 1 AND EXISTS (SELECT * FROM budget.Scenario WHERE FY = @fy AND IsCurrentProjection = 1))\r\n\tBEGIN\r\n\t\tSELECT @currentBudgetScenarioId = MAX(ID)\r\n\t\tFROM budget.Scenario\r\n\t\tWHERE FY = @fy AND IsCurrentProjection = 1;\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tSELECT @currentBudgetScenarioId = MAX(ID)\r\n\t\tFROM budget.Scenario\r\n\t\tWHERE FY = @fy AND IsCurrentBudget = 1;\r\n\tEND;\r\n\r\n\tIF  @isStatuFundsActual = 1 --only for 856090 and mid-year and before @actualDataEndMonth data\r\n\tBEGIN\r\n\t\tWITH ec3_budget_data AS --nypa buildings, tod buildings, street lighting\r\n\t\t\t(SELECT agencycodeoec\r\n\t\t\t\t,CASE WHEN BudgetGroupID IN (1,3,5,56) THEN 'NYPA Buildings Electricity'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (2,4,6,53,55) THEN 'NYPA Time Of Day Electricity'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (7) THEN 'NYPA Street Lighting'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (21) THEN 'LIPA Street Lighting'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (71) THEN 'Solar Energy'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (77) THEN 'RECs'\r\n\t\t\t\t\tELSE CASE WHEN energyType = 'ELE' OR (@isForActVsBgtReport5 = 1 AND BudgetGroupID IN (62)) THEN 'Non-NYPA Electricity' ELSE energyType END \r\n\t\t\t\t\tEND AS EnergyType\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN EnergyDollars ELSE 0 END +\r\n\t\t\t\t\t\tCASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN CustomerChargeDollars ELSE 0 END) AS energy_dollar\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN DemandDollars ELSE 0 END) AS demand_dollar\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN FacilityPointDollars ELSE 0 END) AS facility_point_dollar\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN ReactivePowerUsageDollars ELSE 0 END) AS reactive_power_dollar\r\n\t\t\t\t,0 AS paid_adjustment\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN TotalDollars ELSE 0 END) AS TotalDollars\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN EnergyUsage ELSE 0 END) AS EnergyUsage\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN DemandUsage ELSE 0 END) AS DemandUsage\r\n\t\t\t\t,0 AS reactivePowerEnergy\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN StreetLightingFacilityPoints ELSE 0 END) AS facility_point_usage\r\n\t\t\t\t\r\n\t\t\t\t,SUM(CASE WHEN LEN(@actualDataEndMonth) = 6 AND @actualDataEndMonth<BudgetBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod THEN TotalDollars \r\n\t\t\t\t\t\t\tWHEN LEN(@actualDataEndMonth)<>6 AND BudgetBillingPeriod< = @endBillingPeriod THEN TotalDollars \r\n\t\t\t\t\t\t\tELSE 0 \r\n\t\t\t\t\t\tEND) AS TotalDollars_YTD\r\n\t\t\t\t,SUM(CASE WHEN BudgetBillingPeriod>@endBillingPeriod THEN TotalDollars ELSE 0 END) AS TotalDollars_EOY\r\n\t\t\t\t,SUM(TotalDollars) AS TotalDollars_FullYear\r\n\t\t\tFROM (SELECT a.AgencyCodeOEC,\r\n\t\t\t\t\ta.BudgetGroupID,\r\n\t\t\t\t\td.EnergyType,\r\n\t\t\t\t\ta.BudgetBillingPeriod,\r\n\t\t\t\t\tSUM(ISNULL(NumberOfDistinctAccounts, 0)) AS NumberOfDistinctAccounts\r\n\t\t\t\t\t,SUM(ISNULL(StreetLightingFacilityPoints, 0)) AS StreetLightingFacilityPoints\r\n\t\t\t\t\t,SUM(CASE WHEN a.BudgetStageID = 2 THEN ISNULL(BaseBilledDollars, 0) ELSE 0 END) AS BaseBilledDollars\r\n\t\t\t\t\t,SUM(ISNULL(ExcessDistributionDollars, 0)) AS ExcessDistributionDollars\r\n\t\t\t\t\t,SUM(ISNULL(CustomerChargeDollars, 0)) AS CustomerChargeDollars\r\n\t\t\t\t\t,SUM(ISNULL(FacilityPointDollars, 0)) AS FacilityPointDollars\r\n\t\t\t\t\t,SUM(ISNULL(AgencyTenantChargeDollars, 0)) AS AgencyTenantChargeDollars\r\n\t\t\t\t\t,SUM(ISNULL(DemandCommodityDollars, 0)) AS DemandCommodityDollars\r\n\t\t\t\t\t,SUM(ISNULL(DemandDeliveryDollars, 0)) AS DemandDeliveryDollars\r\n\t\t\t\t\t,SUM(ISNULL(EnergyCommodityDollars, 0)) AS EnergyCommodityDollars\r\n\t\t\t\t\t,SUM(ISNULL(OnPeakEnergyCommodityDollars, 0)) AS OnPeakEnergyCommodityDollars\r\n\t\t\t\t\t,SUM(ISNULL(OffPeakEnergyCommodityDollars, 0)) AS OffPeakEnergyCommodityDollars\r\n\t\t\t\t\t,SUM(ISNULL(EnergyDeliveryDollars, 0)) AS EnergyDeliveryDollars\r\n\t\t\t\t\t,SUM(ISNULL(MinimumBilledEnergyUsageDollars, 0)) AS MinimumBilledEnergyUsageDollars\r\n\t\t\t\t\t,SUM(ISNULL(MinimumBilledProductionDemandUsageDollars, 0)) AS MinimumBilledProductionDemandUsageDollars\r\n\t\t\t\t\t,SUM(ISNULL(MinimumBilledDeliveryDemandUsageDollars, 0)) AS MinimumBilledDeliveryDemandUsageDollars\r\n\t\t\t\t\t,SUM(ISNULL(ReactivePowerUsageDollars, 0)) AS ReactivePowerUsageDollars\r\n\t\t\t\t\t,SUM(ISNULL(EnergyDollars, 0)) AS EnergyDollars\r\n\t\t\t\t\t,SUM(ISNULL(DemandDollars, 0)) AS DemandDollars\r\n\t\t\t\t\t,SUM(ISNULL(DeliveryDollars, 0)) AS DeliveryDollars\r\n\t\t\t\t\t,SUM(ISNULL(CommodityDollars, 0)) AS CommodityDollars\r\n\t\t\t\t\t,SUM(ISNULL(BudgetedUsageTotalDollars, 0)) AS BudgetedUsageTotalDollars\r\n\t\t\t\t\t,SUM(ISNULL(MinimBilledTotalDollars, 0)) AS MinimBilledTotalDollars\r\n\t\t\t\t\t,SUM(ISNULL(TotalDollars, 0)) AS TotalDollars\r\n\t\t\t\t\t,SUM(ISNULL(EnergyUsage, 0)) AS EnergyUsage\r\n\t\t\t\t\t,SUM(ISNULL(DemandUsage, 0)) AS DemandUsage\r\n\t\t\t\t\t,SUM(CASE WHEN a.BudgetStageID = 10 THEN 0 ELSE ISNULL(TotalDollars, 0) END) AS TotalDollarsBeforeTNC\r\n\t\t\t\tFROM budget.StagingBudget AS a\r\n\t\t\t\t\tINNER JOIN Preload.Agency AS c ON a.AgencyCodeOEC = c.AgencyCodeOEC\r\n\t\t\t\t\tINNER JOIN Preload.BudgetGroup AS d ON a.BudgetGroupID = d.BudgetGroupID\r\n\t\t\t\tWHERE a.ScenarioId = @currentBudgetScenarioId AND a.BudgetStageID IN (2, 3, 4, 5, 6, 7, 8, 10) AND a.AgencyCodeOEC = '856090'\r\n\t\t\t\tGROUP BY a.BudgetBillingPeriod,\r\n\t\t\t\t\ta.AgencyCodeOEC,\r\n\t\t\t\t\ta.BudgetGroupID,\r\n\t\t\t\t\td.EnergyType) AS a\r\n\t\t\tWHERE (@isForActVsBgtReport5 = 1 OR (@isForActVsBgtReport5 = 0 AND BudgetGroupID<>62))\r\n\t\t\tGROUP BY AgencyCodeOEC\r\n\t\t\t\t,CASE WHEN BudgetGroupID IN (1,3,5,56) THEN 'NYPA Buildings Electricity'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (2,4,6,53,55) THEN 'NYPA Time Of Day Electricity'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (7) THEN 'NYPA Street Lighting'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (21) THEN 'LIPA Street Lighting'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (71) THEN 'Solar Energy'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (77) THEN 'RECs'\r\n\t\t\t\t\tELSE CASE WHEN energyType = 'ELE' OR (@isForActVsBgtReport5 = 1 AND BudgetGroupID IN (62)) THEN 'Non-NYPA Electricity' ELSE energyType END \r\n\t\t\t\tEND)\r\n\t\tINSERT INTO @Output (AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear)\r\n\t\tSELECT a.AgencyCodeOEC,\r\n\t\t\tb.ReportDataTypeId,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN a.energy_dollar\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN a.demand_dollar\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN a.facility_point_dollar\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN a.reactive_power_dollar\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN a.paid_adjustment\r\n\t\t\t\tELSE a.TotalDollars\r\n\t\t\tEND AS BudgetDollar,\r\n\t\t\tCASE WHEN (CHARINDEX('energy', b.TypeLevel3) > 0\r\n\t\t\t\t\tOR b.EnergyType IN ('GAS','STM','CHW') \r\n\t\t\t\t\tOR b.TypeLevel2 = 'LIPA Street Lighting' \r\n\t\t\t\t\tOR (b.TypeLevel2 = 'Solar Energy' and @startBillingPeriod> = @ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\tOR (b.TypeLevel2 = 'Non-NYPA Electricity' and @startBillingPeriod> = @ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\t) THEN a.EnergyUsage\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN a.DemandUsage\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN a.facility_point_usage\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN a.reactivePowerEnergy\r\n\t\t\t\tELSE 0\r\n\t\t\tEND AS BudgetUsage,\r\n\t\t\tCASE WHEN (CHARINDEX('energy', b.TypeLevel3) > 0 \r\n\t\t\t\t\tOR b.EnergyType IN ('GAS','STM','CHW') \r\n\t\t\t\t\tOR b.TypeLevel2 = 'LIPA Street Lighting' \r\n\t\t\t\t\tOR (b.TypeLevel2 = 'Solar Energy' and @startBillingPeriod> = @ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\tOR (b.TypeLevel2 = 'Non-NYPA Electricity' and @startBillingPeriod> = @ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\t) AND a.EnergyUsage <> 0 \r\n\t\t\t\t\tTHEN CAST(a.energy_dollar / a.EnergyUsage AS MONEY)\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 AND a.DemandUsage <> 0 THEN CAST(a.demand_dollar / a.DemandUsage AS MONEY)\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 AND a.facility_point_usage <> 0 THEN CAST(a.facility_point_dollar / a.facility_point_usage AS MONEY)\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 AND a.reactivePowerEnergy <> 0 THEN CAST(a.reactive_power_dollar / a.reactivePowerEnergy AS MONEY)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND AS BudgetRate,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN TotalDollars_YTD\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tELSE a.TotalDollars_YTD\r\n\t\t\tEND AS TotalDollars_YTD,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN TotalDollars_EOY\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tELSE a.TotalDollars_EOY\r\n\t\t\tEND AS TotalDollars_EOY,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN TotalDollars_FullYear\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tELSE a.TotalDollars_FullYear\r\n\t\t\tEND AS TotalDollars_FullYear\r\n\t\tFROM ec3_budget_data AS a\r\n\t\t\tINNER JOIN [report].ReportDataType AS b ON a.energytype = b.TypeLevel2 OR a.energytype = b.energytype;\r\n\tEND;\r\n\tELSE\t\r\n\tBEGIN\r\n\t\tWITH ec3_budget_data AS --nypa buildings, tod buildings, street lighting\r\n\t\t\t(SELECT agencycodeoec\r\n\t\t\t\t,CASE WHEN BudgetGroupID IN (1,3,5,56) THEN 'NYPA Buildings Electricity'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (2,4,6,53,55) THEN 'NYPA Time Of Day Electricity'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (7) THEN 'NYPA Street Lighting'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (21) THEN 'LIPA Street Lighting'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (71) THEN 'Solar Energy'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (77) THEN 'RECs'\r\n\t\t\t\t\tELSE CASE WHEN energyType = 'ELE' OR (@isForActVsBgtReport5 = 1 AND BudgetGroupID IN (62)) THEN 'Non-NYPA Electricity' ELSE energyType END \r\n\t\t\t\t\tEND AS EnergyType\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN EnergyDollars ELSE 0 END +\r\n\t\t\t\t\t\tCASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN CustomerChargeDollars ELSE 0 END) AS energy_dollar\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN DemandDollars ELSE 0 END) AS demand_dollar\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN FacilityPointDollars ELSE 0 END) AS facility_point_dollar\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN ReactivePowerUsageDollars ELSE 0 END) AS reactive_power_dollar\r\n\t\t\t\t,0 AS paid_adjustment\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN TotalDollars ELSE 0 END) AS TotalDollars\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN EnergyUsage ELSE 0 END) AS EnergyUsage\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN DemandUsage ELSE 0 END) AS DemandUsage\r\n\t\t\t\t,0 AS reactivePowerEnergy\r\n\t\t\t\t,SUM(CASE WHEN (@startBillingPeriod = @endBillingPeriod AND BudgetBillingPeriod = @endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod AND @startBillingPeriod< = BudgetBillingPeriod) THEN StreetLightingFacilityPoints ELSE 0 END) AS facility_point_usage\t\t\t\t\r\n\t\t\t\t,SUM(CASE WHEN LEN(@actualDataEndMonth) = 6 AND @actualDataEndMonth<BudgetBillingPeriod AND BudgetBillingPeriod< = @endBillingPeriod THEN TotalDollars \r\n\t\t\t\t\t\t\tWHEN LEN(@actualDataEndMonth)<>6 AND BudgetBillingPeriod< = @endBillingPeriod THEN TotalDollars \r\n\t\t\t\t\t\t\tELSE 0 \r\n\t\t\t\t\t\tEND) AS TotalDollars_YTD\r\n\t\t\t\t,SUM(CASE WHEN BudgetBillingPeriod>@endBillingPeriod THEN TotalDollars ELSE 0 END) AS TotalDollars_EOY\r\n\t\t\t\t,SUM(TotalDollars) AS TotalDollars_FullYear\r\n\t\t\tFROM budget.vwTotalBudget\r\n\t\t\tWHERE ScenarioId = @currentBudgetScenarioId AND AgencyCodeOEC IN (SELECT CODE FROM @agencyCodeOECs) AND\r\n\t\t\t\t(@isForActVsBgtReport5 = 1 OR (@isForActVsBgtReport5 = 0 AND BudgetGroupID<>62))\r\n\t\t\tGROUP BY AgencyCodeOEC\r\n\t\t\t\t,CASE WHEN BudgetGroupID IN (1,3,5,56) THEN 'NYPA Buildings Electricity'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (2,4,6,53,55) THEN 'NYPA Time Of Day Electricity'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (7) THEN 'NYPA Street Lighting'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (21) THEN 'LIPA Street Lighting'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (71) THEN 'Solar Energy'\r\n\t\t\t\t\tWHEN BudgetGroupID IN (77) THEN 'RECs'\r\n\t\t\t\t\tELSE CASE WHEN energyType = 'ELE' OR (@isForActVsBgtReport5 = 1 AND BudgetGroupID IN (62)) THEN 'Non-NYPA Electricity' ELSE energyType END \r\n\t\t\t\tEND)\r\n\t\tINSERT INTO @Output (AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear)\r\n\t\tSELECT a.AgencyCodeOEC,\r\n\t\t\tb.ReportDataTypeId,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN a.energy_dollar\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN a.demand_dollar\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN a.facility_point_dollar\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN a.reactive_power_dollar\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN a.paid_adjustment\r\n\t\t\t\tELSE a.TotalDollars\r\n\t\t\tEND AS BudgetDollar,\r\n\t\t\tCASE WHEN (CHARINDEX('energy', b.TypeLevel3) > 0 \r\n\t\t\t\t\tOR b.EnergyType IN ('GAS','STM','CHW') \r\n\t\t\t\t\tOR b.TypeLevel2 = 'LIPA Street Lighting' \r\n\t\t\t\t\tOR (b.TypeLevel2 = 'Solar Energy' and @startBillingPeriod> = @ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\tOR (b.TypeLevel2 = 'Non-NYPA Electricity' and @startBillingPeriod> = @ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\t) THEN a.EnergyUsage\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN a.DemandUsage\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN a.facility_point_usage\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN a.reactivePowerEnergy\r\n\t\t\t\tELSE 0\r\n\t\t\tEND AS BudgetUsage,\r\n\t\t\tCASE WHEN (CHARINDEX('energy', b.TypeLevel3) > 0\r\n\t\t\t\t\tOR b.EnergyType IN ('GAS','STM','CHW')\r\n\t\t\t\t\tOR b.TypeLevel2 = 'LIPA Street Lighting'\r\n\t\t\t\t\tOR (b.TypeLevel2 = 'Solar Energy' and @startBillingPeriod> = @ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\tOR (b.TypeLevel2 = 'Non-NYPA Electricity' and @startBillingPeriod> = @ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\t) AND a.EnergyUsage <> 0 \r\n\t\t\t\t\tTHEN CAST(a.energy_dollar / a.EnergyUsage AS MONEY)\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 AND a.DemandUsage <> 0 THEN CAST(a.demand_dollar / a.DemandUsage AS MONEY)\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 AND a.facility_point_usage <> 0 THEN CAST(a.facility_point_dollar / a.facility_point_usage AS MONEY)\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 AND a.reactivePowerEnergy <> 0 THEN CAST(a.reactive_power_dollar / a.reactivePowerEnergy AS MONEY)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND AS BudgetRate,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN TotalDollars_YTD\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tELSE a.TotalDollars_YTD\r\n\t\t\tEND AS TotalDollars_YTD,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN TotalDollars_EOY\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tELSE a.TotalDollars_EOY\r\n\t\t\tEND AS TotalDollars_EOY,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN TotalDollars_FullYear\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tELSE a.TotalDollars_FullYear\r\n\t\t\tEND AS TotalDollars_FullYear\r\n\t\tFROM ec3_budget_data AS a\r\n\t\t\tINNER JOIN [report].ReportDataType AS b ON a.EnergyType = b.TypeLevel2 OR a.EnergyType = b.EnergyType;\r\n\tEND;\r\n\r\n\tRETURN;\r\nEND;\r"
        }
      ]
    }
  ]
}