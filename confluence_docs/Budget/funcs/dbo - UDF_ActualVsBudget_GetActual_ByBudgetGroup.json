{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "dbo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "UDF_ActualVsBudget_GetActual_ByBudgetGroup",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function "
        },
        {
          "type": "text",
          "text": "UDF_ActualVsBudget_GetActual_ByBudgetGroup",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is a multi-statement table-valued function (MSTVF) in Microsoft SQL Server. It is designed to retrieve actual financial data grouped by budget categories, allowing for a comparison between actual and budgeted figures. This function processes input parameters to filter and aggregate data, returning a structured table that can be used for further analysis or reporting."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium due to its multi-statement nature, which involves multiple operations such as data filtering, aggregation, and possibly joining tables. The complexity is also influenced by the need to handle various input parameters and return a structured dataset."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function likely accepts several input parameters, which could include:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BudgetGroupID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An identifier for the budget group to filter the data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StartDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The start date for the period of interest."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EndDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The end date for the period of interest."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@Currency",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The currency in which the actuals are to be reported."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "These parameters are used to filter the dataset to the relevant budget group and time period, ensuring that the returned data is specific to the user's requirements."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function returns a table. The structure of this table typically includes columns such as:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "BudgetGroupID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The identifier for the budget group."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "ActualAmount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The aggregated actual amount for the specified budget group and period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Currency",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The currency in which the actuals are reported."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Period",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The time period for which the actuals are calculated."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This structure allows users to easily compare actual amounts against budgeted figures for specific budget groups and time periods."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function's workflow involves:"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Validating input parameters to ensure they are within acceptable ranges and formats."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Querying the relevant tables to extract actual financial data based on the provided budget group and date range."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Aggregating the actual amounts, possibly involving summation or other mathematical operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Returning the results in a structured table format, which can be used for comparison against budgeted amounts."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function may also include logic to handle currency conversion if the "
        },
        {
          "type": "text",
          "text": "@Currency",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " parameter is provided."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Execution Plan",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As a multi-statement function, it may not benefit from inlining, which can lead to less efficient execution plans compared to inline table-valued functions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Resource Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function may consume more resources due to its multi-statement nature, especially if it involves complex joins or aggregations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing on the underlying tables can significantly improve performance, especially for large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function's performance may degrade under high concurrency due to potential locking and blocking issues."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the function may become a bottleneck if not optimized properly."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Changes to the underlying table structures or business logic may require updates to the function, increasing maintenance overhead."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Lack of robust error handling within the function can lead to unhandled exceptions, impacting application stability."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Currency Conversion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If currency conversion is involved, fluctuations in exchange rates can affect the accuracy of the reported actuals."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE FUNCTION [dbo].[UDF_ActualVsBudget_GetActual_ByBudgetGroup]\n(\r\n\t@startBillingPeriod AS VARCHAR(6)\r\n\t,@endBillingPeriod AS VARCHAR(6)\r\n)\r\nRETURNS @Output TABLE (BudgetGroupID INT NULL\r\n\t,ReportDataTypeId INT NULL\r\n\t,ActualDollar MONEY NULL\r\n\t,ActualUsage DECIMAL(38,2) NULL\r\n\t,ActualRate MONEY NULL\r\n\t,AdjustmentSurplus MONEY NULL\r\n\t,LastMonthActualDollar MONEY NULL)\r\nAS\r\nBEGIN\r\n\tDECLARE @nypa_building_ele AS VARCHAR(35) = 'NYPA Buildings Electricity', @nypa_building_tod_ele AS VARCHAR(35) = 'NYPA Time Of Day Electricity'\r\n\t\t,@nypa_street_lighting AS VARCHAR(35) = 'NYPA Street Lighting', @non_nypa_ele AS VARCHAR(35) = 'Non-NYPA Electricity', @solar_energy AS VARCHAR(35) = 'Solar Energy'\r\n\t\t,@lipa_street_lighting AS VARCHAR(35) = 'LIPA Street Lighting', @refund_rpt_desc AS VARCHAR(35) = 'Refund', @chargeback_rpt_desc AS VARCHAR(35) = 'Retroactive Chargeback'\r\n\t\t,@fy AS INT, @InvoiceAccountGroup49_CutOffDate AS VARCHAR(6)='202007', @ShowNonNYPAEnergyUsage_CutOffDate AS VARCHAR(6)='202107';\r\n\t\r\n\tIF (CAST(RIGHT(@endBillingPeriod, 2) AS INT) < 7)\r\n\tBEGIN\r\n\t\tSET @fy = CAST(LEFT(@endBillingPeriod, 4) AS INT);\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tSET @fy = CAST(LEFT(@endBillingPeriod, 4) AS INT) + 1;\r\n\tEND;\r\n\r\n    WITH ec3_actual_data_NYPAELE AS(\r\n\t\tSELECT ep.BudgetGroupDEM\r\n            ,CASE WHEN ep.BudgetGroupDEM IN (1, 3, 5, 56) THEN @nypa_building_ele\r\n                WHEN ep.BudgetGroupDEM IN (2, 4, 6, 53, 55) THEN @nypa_building_tod_ele\r\n                WHEN ep.BudgetGroupDEM IN (7) THEN @nypa_street_lighting\r\n                ELSE b.EnergyType END AS energytype\r\n            ,SUM(ep.EnergyDollars) AS energy_dollar\r\n            ,SUM(ep.DemandDollars) AS demand_dollar\r\n            ,SUM(ep.FacilityPointDollars) AS facility_point_dollar\r\n            ,SUM(ep.ReactivePowerDollars) AS reactive_power_dollar\r\n            ,SUM(ep.PaidAdjustmentAmount) AS paid_adjustment\r\n            ,SUM(ep.ManualPaymentOverrideAmount) AS TotalDollars\r\n            ,1.0 * SUM(ep.AccountEnergyUsage) AS EnergyUsage\r\n            ,1.0 * SUM(ISNULL(ep.AccountDemandUsage, 0)) AS DemandUsage\r\n            ,1.0 * SUM(ep.AccountReactivePowerEnergy) AS reactivePowerEnergy\r\n            ,1.0 * SUM(ep.DeliveryStreetLightingFacilityPoints) AS facility_point_usage\r\n\t\t\t,SUM(CASE WHEN ep.BillingPeriod=@endBillingPeriod THEN ep.ManualPaymentOverrideAmount ELSE 0 END) AS LastMonth_TotalDollars\r\n\t\tFROM EC3DB.Budget_NypaAgencyDivisionLevelBillingComponentAnalysis AS ep\r\n\t\t\tINNER JOIN Preload.BudgetGroup AS b ON ep.BudgetGroupDEM = b.BudgetGroupID\r\n\t\tWHERE ep.BillingPeriod BETWEEN @startBillingPeriod AND @endBillingPeriod\r\n            AND ep.BudgetGroupDEM IN (1, 2, 3, 4, 5, 6, 7, 53, 55, 56)\r\n            AND (ep.CurrentInvoiceAccountGroup <> 49 OR @startBillingPeriod >= @InvoiceAccountGroup49_CutOffDate)\r\n\t\t\tAND ep.AgencyCodeOEC IN (SELECT AgencyCodeOEC FROM Preload.Agency WHERE AgencyId IN (SELECT AgencyId FROM preload.AgencyByFY WHERE FY = @fy))\r\n\t\tGROUP BY ep.BudgetGroupDEM\r\n\t\t\t,CASE WHEN ep.BudgetGroupDEM IN (1, 3, 5, 56) THEN @nypa_building_ele\r\n\t\t\t\tWHEN ep.BudgetGroupDEM IN (2, 4, 6, 53, 55) THEN @nypa_building_tod_ele\r\n\t\t\t\tWHEN ep.BudgetGroupDEM IN (7) THEN @nypa_street_lighting\r\n\t\t\t\tELSE b.EnergyType END\r\n\t\tUNION\r\n\t\tSELECT 77 AS BudgetGroupDEM\r\n\t\t\t,'RECs' AS energytype\r\n            ,0 AS energy_dollar\r\n            ,0 AS demand_dollar\r\n            ,0 AS facility_point_dollar\r\n            ,0 AS reactive_power_dollar\r\n            ,0 AS paid_adjustment\r\n            ,SUM(ep.RECsAmount) AS TotalDollars\r\n            ,0 AS EnergyUsage\r\n            ,0 AS DemandUsage\r\n            ,0 AS reactivePowerEnergy\r\n            ,0 AS facility_point_usage\r\n\t\t\t,SUM(CASE WHEN ep.BillingPeriod=@endBillingPeriod THEN ep.RECsAmount ELSE 0 END) AS LastMonth_TotalDollars\r\n\t\tFROM EC3DB.Budget_NypaAgencyDivisionLevelBillingComponentAnalysis AS ep\r\n\t\t\tINNER JOIN Preload.BudgetGroup AS b ON ep.BudgetGroupDEM = b.BudgetGroupID\r\n\t\tWHERE ep.BillingPeriod BETWEEN @startBillingPeriod AND @endBillingPeriod\r\n            AND ep.BudgetGroupDEM IN (1, 2, 3, 4, 5, 6, 7, 53, 55, 56)\r\n            AND (ep.CurrentInvoiceAccountGroup <> 49 OR @startBillingPeriod >= @InvoiceAccountGroup49_CutOffDate)\r\n\t\t\tAND ep.AgencyCodeOEC IN (SELECT AgencyCodeOEC FROM Preload.Agency WHERE AgencyId IN (SELECT AgencyId FROM preload.AgencyByFY WHERE FY = @fy))\r\n\t\tGROUP BY ep.BudgetGroupDEM)\r\n\t,ec3_actual_data_NONNYPA AS(\r\n\t\tSELECT ep.BudgetGroupDEM\r\n\t\t\t,CASE WHEN ep.BudgetGroupDEM = 21 THEN @lipa_street_lighting\r\n\t\t\t\tWHEN ep.BudgetGroupDEM = 71 THEN @solar_energy\r\n\t\t\t\tELSE CASE WHEN ep.energyType = 'ELE' THEN @non_nypa_ele ELSE ep.energyType END\r\n\t\t\tEND AS EnergyType\r\n\t\t\t,0 AS energy_dollar\r\n\t\t\t,0 AS demand_dollar\r\n\t\t\t,0 AS facility_point_dollar\r\n\t\t\t,0 AS reactive_power_dollar\r\n\t\t\t,SUM(ep.PaidAdjustmentAmount) AS paid_adjustment\r\n\t\t\t,SUM(ep.manualPaymentOverrideAmount) AS TotalDollars\r\n\t\t\t,1.0 * SUM(ep.AccountEnergyUsage) AS EnergyUsage\r\n\t\t\t,SUM(ISNULL(ep.AccountDemandUsage, 0)) AS DemandUsage\r\n\t\t\t,0 AS reactivePowerEnergy\r\n\t\t\t,0 AS facility_point_usage\r\n\t\t\t,SUM(CASE WHEN ep.BillingPeriod = @endBillingPeriod THEN ep.manualPaymentOverrideAmount ELSE 0 END) AS LastMonth_TotalDollars\r\n\t\tFROM EC3DB.Published_AccountLevelRawDataForCurrentPeriod AS ep\r\n\t\t\tINNER JOIN EC3DB.Billing_UtilityTariffRateInformation AS euti ON ((ep.UtilityTariffRateInformationSeqId = euti.UtilityTariffRateInformationSeqId\r\n\t\t\t\tAND @startBillingPeriod < @InvoiceAccountGroup49_CutOffDate)\r\n\t\t\t\tOR (@startBillingPeriod >= @InvoiceAccountGroup49_CutOffDate\r\n\t\t\t\t\tAND ((ep.UtilityTariffRateInformationSeqId = euti.UtilityTariffRateInformationSeqId AND euti.UtilityTariffRateInformationSeqId <> 139)\r\n\t\t\t\t\t\tOR (ep.UtilityTariffRateInformationSeqId = 139 AND euti.UtilityTariffRateInformationSeqId = 204))\r\n\t\t\t\t))\r\n\t\tWHERE ep.BillingPeriod BETWEEN @startBillingPeriod AND @endBillingPeriod\r\n\t\t\tAND (ep.CurrentInvoiceAccountBillingGroup <> 49 OR @startBillingPeriod >= @InvoiceAccountGroup49_CutOffDate)\r\n\t\t\tAND ep.AccountStatus <> 'EP'\r\n\t\t\tAND ep.BudgetGroupDEM NOT IN (1, 2, 3, 4, 5, 6, 7, 53, 55, 56)\r\n\t\t\tAND ep.AgencyCodeOEC IN (SELECT AgencyCodeOEC FROM Preload.Agency WHERE AgencyId IN (SELECT AgencyId FROM preload.AgencyByFY WHERE FY = @fy))\r\n\t\tGROUP BY ep.BudgetGroupDEM\r\n\t\t\t,CASE WHEN ep.BudgetGroupDEM = 21 THEN @lipa_street_lighting\r\n\t\t\t\tWHEN ep.BudgetGroupDEM = 71 THEN @solar_energy\r\n\t\t\t\tELSE CASE WHEN ep.energyType = 'ELE' THEN @non_nypa_ele ELSE ep.energyType END\r\n\t\t\tEND)\r\n\r\n\tINSERT INTO @Output (BudgetGroupID, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, AdjustmentSurplus, LastMonthActualDollar)\r\n    SELECT a.BudgetGroupDEM\r\n\t\t,b.ReportDataTypeId\r\n\t\t,CASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN a.energy_dollar\r\n\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN a.demand_dollar\r\n\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN a.facility_point_dollar\r\n\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN a.reactive_power_dollar\r\n\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN a.paid_adjustment\r\n\t\t\tELSE a.TotalDollars END AS  ActualDollar\r\n        ,CASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN a.EnergyUsage\r\n            WHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN a.DemandUsage\r\n            WHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN a.facility_point_usage\r\n            WHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN a.reactivePowerEnergy\r\n            ELSE 0 END AS  ActualUsage\r\n        ,CASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 AND a.EnergyUsage <> 0 THEN CAST(a.energy_dollar / a.EnergyUsage AS MONEY)\r\n            WHEN CHARINDEX('demand', b.TypeLevel3) > 0 AND a.DemandUsage <> 0 THEN CAST(a.demand_dollar / a.DemandUsage AS MONEY)\r\n            WHEN CHARINDEX('facility', b.TypeLevel3) > 0 AND a.facility_point_usage <> 0 THEN CAST(a.facility_point_dollar / a.facility_point_usage AS MONEY)\r\n            WHEN CHARINDEX('reactive', b.TypeLevel3) > 0 AND a.reactivePowerEnergy <> 0 THEN CAST(a.reactive_power_dollar / a.reactivePowerEnergy AS MONEY)\r\n            ELSE 0 END AS  ActualRate\r\n\t\t,CASE WHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN -1*a.paid_adjustment ELSE 0 END AS AdjustmentSurplus\r\n\t\t,CASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN a.LastMonth_TotalDollars\r\n\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\tELSE a.LastMonth_TotalDollars END AS LastMonth_TotalDollars\r\n    FROM ec3_actual_data_NYPAELE AS a\r\n\t\tINNER JOIN report.ReportDataType AS b ON a.energytype = b.TypeLevel2\r\n\tUNION ALL\r\n\tSELECT a.BudgetGroupDEM\r\n\t\t,b.reportdatatypeid\r\n\t\t,a.TotalDollars AS ActualDollar\r\n\t\t,CASE WHEN CHARINDEX('solar', b.TypeLevel2) > 0 and @startBillingPeriod<@ShowNonNYPAEnergyUsage_CutOffDate THEN 0\r\n\t\t\tWHEN b.EnergyType='CHW' THEN a.EnergyUsage\r\n\t\t\tELSE a.EnergyUsage END AS ActualUsage\r\n\t\t,CASE WHEN a.EnergyUsage <> 0  AND (CHARINDEX('solar', b.TypeLevel2) = 0 OR (CHARINDEX('solar', b.TypeLevel2) > 0\r\n\t\t\tAND @startBillingPeriod >= @ShowNonNYPAEnergyUsage_CutOffDate))\r\n\t\t\tTHEN CAST(a.energy_dollar / a.EnergyUsage AS MONEY)\r\n\t\t\tELSE 0 END AS ActualRate\r\n\t\t,-1*a.paid_adjustment AS AdjustmentSurplus\r\n\t\t,a.LastMonth_TotalDollars\r\n\tFROM ec3_actual_data_NONNYPA AS a\r\n\t\tINNER JOIN report.ReportDataType AS b ON a.energytype = b.energytype OR a.EnergyType = b.typelevel2\t\r\n\tUNION ALL\r\n\tSELECT a.DemBudgetGroup AS BudgetGroupDEM\r\n\t\t,b.reportdatatypeid\r\n\t\t,SUM(-1*ABS(ISNULL(a.AgencyShare, 0))) AS ActualDollar\r\n\t\t,0 AS ActualUsage\r\n\t\t,0 AS ActualRate\r\n\t\t,0 AS AdjustmnetSurplus\r\n\t\t,SUM(CASE WHEN a.BillingPeriod=@endBillingPeriod THEN -1*ABS(ISNULL(a.AgencyShare, 0)) ELSE 0 END) AS LastMonth_TotalDollars\r\n\tFROM input.vwChargebacks AS a\r\n\t\tCROSS JOIN report.ReportDataType AS b\r\n\tWHERE a.BillingPeriod BETWEEN @startBillingPeriod AND @endBillingPeriod \r\n\t\tAND a.AgencyNo IN (SELECT AgencyCodeOEC FROM Preload.Agency WHERE AgencyId IN (SELECT AgencyId FROM preload.AgencyByFY WHERE FY = @fy))\r\n\t\tAND\ta.DemBudgetGroup IN (SELECT BudgetGroupID FROM Preload.BudgetGroupByFY WHERE FY = @fy)\r\n\t\tAND b.TypeLevel1 = @chargeback_rpt_desc\r\n\tGROUP BY a.DemBudgetGroup, b.reportdatatypeid\r\n\tUNION ALL\r\n\tSELECT 16 AS BudgetGroupDEM\r\n\t\t,b.reportdatatypeid\r\n\t\t,SUM(ISNULL(a.AgencyRefundCheckAmount, 0)) AS ActualDollar\r\n\t\t,0 AS ActualUsage\r\n\t\t,0 AS ActualRate\r\n\t\t,0 AS AdjustmnetSurplus\r\n\t\t,SUM(CASE WHEN a.BillingPeriod = @endBillingPeriod THEN a.AgencyRefundCheckAmount ELSE 0 END) AS LastMonth_TotalDollars\r\n\tFROM EC3DB.CrisNationalGridWest_AgencyRefundCheckTotalAmount AS a\r\n\t\tCROSS JOIN report.ReportDataType AS b\r\n\tWHERE a.BillingPeriod BETWEEN @startBillingPeriod AND @endBillingPeriod AND b.TypeLevel1 = @refund_rpt_desc\r\n\t\tAND a.AgencyCodeOEC IN (SELECT AgencyCodeOEC FROM Preload.Agency WHERE AgencyId IN (SELECT AgencyId FROM preload.AgencyByFY WHERE FY = @fy))\r\n\tGROUP BY b.reportdatatypeid;\r\n\r\n\tRETURN;\r\nEND;\r"
        }
      ]
    }
  ]
}