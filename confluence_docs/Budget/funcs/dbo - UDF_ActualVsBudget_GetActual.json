{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "dbo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "UDF_ActualVsBudget_GetActual",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function "
        },
        {
          "type": "text",
          "text": "UDF_ActualVsBudget_GetActual",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is a multi-statement table-valued function (MSTVF) in Microsoft SQL Server. It is designed to calculate and return actual financial figures, which can be compared against budgeted figures. This function is part of a larger financial reporting system, where understanding the variance between actual and budgeted amounts is crucial for financial analysis and decision-making."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium. This is due to the nature of multi-statement table-valued functions, which can involve multiple operations, such as data aggregation, conditional logic, and potentially complex joins or subqueries. These operations require a good understanding of SQL and database design to implement and optimize effectively."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function likely accepts several input parameters, which are used to filter and process the data. Common parameters for such a function might include:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@StartDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A date parameter specifying the beginning of the period for which actuals are calculated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@EndDate",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A date parameter specifying the end of the period for which actuals are calculated."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@DepartmentID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An identifier for the department or cost center, allowing the function to filter results to a specific organizational unit."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@AccountID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": An identifier for the financial account, used to filter results to specific accounts."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "These parameters allow users to customize the scope of the data returned by the function, making it flexible for various reporting needs."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function returns a table data type. The structure of the returned table typically includes columns such as:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "ActualAmount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The calculated actual financial figure for the specified period and filters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Period",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The time period for which the actual amount is calculated, often formatted as a month or quarter."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "DepartmentID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The department or cost center associated with the actual amount."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "AccountID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The financial account associated with the actual amount."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This structure allows for easy integration with other queries or reporting tools that require detailed financial data."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The business logic within the function involves several steps:"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function retrieves relevant financial transactions from one or more tables, filtered by the input parameters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Aggregation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It aggregates these transactions to calculate the total actual amount for each period, department, and account."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The function may include conditional logic to handle special cases, such as adjustments or exclusions of certain transactions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Insertion",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The aggregated results are inserted into a table variable, which is then returned as the function's output."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "This workflow ensures that the function provides accurate and relevant financial data for analysis."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Execution Plan",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Multi-statement table-valued functions do not benefit from inline execution plans, which can lead to suboptimal performance compared to inline table-valued functions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Resource Usage",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of table variables can lead to increased memory usage, especially if the result set is large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Proper indexing of the underlying tables is crucial to optimize data retrieval and aggregation operations."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": High concurrency scenarios may lead to contention if the function accesses heavily used tables."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As data volume grows, the performance of the function may degrade if not properly optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complexity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The complexity of the function can make it difficult to maintain and debug, especially if business logic changes frequently."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensuring data integrity is crucial, as incorrect calculations can lead to misleading financial reports."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Lack of robust error handling within the function can lead to unhandled exceptions and incomplete data processing."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Overall, careful design and optimization are necessary to ensure that the function performs efficiently and provides accurate results."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE FUNCTION [dbo].[UDF_ActualVsBudget_GetActual]\n(\r\n\t@startBillingPeriod AS VARCHAR(6)\r\n\t,@endBillingPeriod AS VARCHAR(6)\r\n\t,@agencyCodeOECs AS input.UDT_CODEList READONLY\r\n)\r\nRETURNS @Output TABLE (AgencyCodeOEC VARCHAR(6) NULL\r\n\t,ReportDataTypeId INT NULL\r\n\t,ActualDollar MONEY NULL\r\n\t,ActualUsage DECIMAL(38,2) NULL\r\n\t,ActualRate MONEY NULL\r\n\t,AdjustmentSurplus MONEY NULL\r\n\t,LastMonthActualDollar MONEY NULL)\r\nAS\r\nBEGIN\r\n\tDECLARE @nypa_building_ele AS VARCHAR(35) = 'NYPA Buildings Electricity', @nypa_building_tod_ele AS VARCHAR(35) = 'NYPA Time Of Day Electricity'\r\n\t\t,@nypa_street_lighting AS VARCHAR(35) = 'NYPA Street Lighting', @non_nypa_ele AS VARCHAR(35) = 'Non-NYPA Electricity', @solar_energy AS VARCHAR(35) = 'Solar Energy'\r\n\t\t,@lipa_street_lighting AS VARCHAR(35) = 'LIPA Street Lighting', @chargeback_rpt_desc AS VARCHAR(35) = 'Retroactive Chargeback'\r\n\t\t,@fy AS INT, @InvoiceAccountGroup49_CutOffDate AS VARCHAR(6)='202007', @ShowNonNYPAEnergyUsage_CutOffDate AS VARCHAR(6)='202107';\r\n\r\n\tSELECT @fy=CAST(LEFT(@endBillingPeriod,4) AS INT) + IIF(CAST(RIGHT(@endBillingPeriod,2) AS INT) >= 7, 1, 0);\r\n\r\n    WITH ec3_actual_data_NYPAELE AS(\r\n\t\tSELECT ep.AgencyCodeOEC,\r\n\t\t\tCASE WHEN ep.BudgetGroupDEM IN ( 1, 3, 5, 56 ) THEN @nypa_building_ele\r\n\t\t\t\tWHEN ep.BudgetGroupDEM IN ( 2, 4, 6, 53, 55 ) THEN @nypa_building_tod_ele\r\n\t\t\t\tWHEN ep.BudgetGroupDEM IN ( 7 ) THEN @nypa_street_lighting\r\n\t\t\t\tELSE b.EnergyType\r\n\t\t\tEND AS energytype,\r\n\t\t\tSUM(ep.EnergyDollars) AS energy_dollar,\r\n\t\t\tSUM(ep.DemandDollars) AS demand_dollar,\r\n\t\t\tSUM(ep.FacilityPointDollars) AS facility_point_dollar,\r\n\t\t\tSUM(ep.ReactivePowerDollars) AS reactive_power_dollar,\r\n\t\t\tSUM(ep.PaidAdjustmentAmount) AS paid_adjustment,\r\n\t\t\tSUM(ep.ManualPaymentOverrideAmount) AS TotalDollars,\r\n\t\t\t1.0 * SUM(ep.AccountEnergyUsage) AS EnergyUsage,\r\n\t\t\t1.0 * SUM(ISNULL(ep.AccountDemandUsage, 0)) AS DemandUsage,\r\n\t\t\t1.0 * SUM(ep.AccountReactivePowerEnergy) AS reactivePowerEnergy,\r\n\t\t\t1.0 * SUM(ep.DeliveryStreetLightingFacilityPoints) AS facility_point_usage,\r\n\t\t\tSUM(CASE WHEN ep.BillingPeriod=@endBillingPeriod THEN ep.ManualPaymentOverrideAmount ELSE 0 END) AS LastMonth_TotalDollars\r\n\t\tFROM EC3DB.Budget_NypaAgencyDivisionLevelBillingComponentAnalysis AS ep\r\n\t\t\tINNER JOIN Preload.BudgetGroup AS b ON ep.BudgetGroupDEM = b.BudgetGroupID\r\n\t\tWHERE ep.BillingPeriod BETWEEN @startBillingPeriod AND @endBillingPeriod\r\n\t\t\tAND ep.AgencyCodeOEC IN (SELECT CODE FROM @agencyCodeOECs)\r\n\t\t\tAND ep.BudgetGroupDEM IN (1, 2, 3, 4, 5, 6, 7, 53, 55, 56)\r\n\t\t\tAND (ep.CurrentInvoiceAccountGroup <> 49 OR @startBillingPeriod>=@InvoiceAccountGroup49_CutOffDate)\r\n\t\t\tAND b.BudgetGroupID IN (SELECT BudgetGroupID FROM Preload.BudgetGroupByFY WHERE FY = @fy)\r\n\t\tGROUP BY ep.AgencyCodeOEC,\r\n\t\t\tCASE WHEN ep.BudgetGroupDEM IN (1, 3, 5, 56) THEN @nypa_building_ele\r\n\t\t\t\tWHEN ep.BudgetGroupDEM IN (2, 4, 6, 53, 55) THEN @nypa_building_tod_ele\r\n\t\t\t\tWHEN ep.BudgetGroupDEM IN (7) THEN @nypa_street_lighting\r\n\t\t\t\tELSE b.EnergyType\r\n\t\t\tEND\r\n\t\tUNION\r\n\t\tSELECT ep.AgencyCodeOEC,\r\n\t\t\t'RECs' AS energytype,\r\n\t\t\t0 AS energy_dollar,\r\n\t\t\t0 AS demand_dollar,\r\n\t\t\t0 AS facility_point_dollar,\r\n\t\t\t0 AS reactive_power_dollar,\r\n\t\t\t0 AS paid_adjustment,\r\n\t\t\tSUM(ep.RECsAmount) AS TotalDollars,\r\n\t\t\t0 AS EnergyUsage,\r\n\t\t\t0 AS DemandUsage,\r\n\t\t\t0 AS reactivePowerEnergy,\r\n\t\t\t0 AS facility_point_usage,\r\n\t\t\tSUM(CASE WHEN ep.BillingPeriod=@endBillingPeriod THEN ep.RECsAmount ELSE 0 END) AS LastMonth_TotalDollars\r\n\t\tFROM EC3DB.Budget_NypaAgencyDivisionLevelBillingComponentAnalysis AS ep\r\n\t\t\tINNER JOIN Preload.BudgetGroup AS b ON ep.BudgetGroupDEM = b.BudgetGroupID\r\n\t\tWHERE ep.BillingPeriod BETWEEN @startBillingPeriod AND @endBillingPeriod\r\n\t\t\tAND ep.AgencyCodeOEC IN (SELECT CODE FROM @agencyCodeOECs)\r\n\t\t\tAND ep.BudgetGroupDEM IN (1, 2, 3, 4, 5, 6, 7, 53, 55, 56)\r\n\t\t\tAND (ep.CurrentInvoiceAccountGroup <> 49 OR @startBillingPeriod>=@InvoiceAccountGroup49_CutOffDate)\r\n\t\t\tAND b.BudgetGroupID IN (SELECT BudgetGroupID FROM Preload.BudgetGroupByFY WHERE FY = @fy)\r\n\t\tGROUP BY ep.AgencyCodeOEC)\r\n\t,ec3_actual_data_NONNYPA AS(\r\n\t\tSELECT ep.agencycodeoec\r\n\t\t\t,CASE WHEN ep.BudgetGroupDEM = 21 THEN @lipa_street_lighting\r\n\t\t\t\tWHEN ep.BudgetGroupDEM = 71 THEN @solar_energy\r\n\t\t\t\tELSE CASE WHEN ep.energyType = 'ELE' THEN @non_nypa_ele\r\n\t\t\t\t\t\tELSE ep.energyType END\r\n\t\t\tEND AS EnergyType\r\n\t\t\t,0 AS energy_dollar\r\n\t\t\t,0 AS demand_dollar\r\n\t\t\t,0 AS facility_point_dollar\r\n\t\t\t,0 AS reactive_power_dollar\r\n\t\t\t,SUM(ep.PaidAdjustmentAmount) AS paid_adjustment\r\n\t\t\t,SUM(ep.manualPaymentOverrideAmount) AS TotalDollars\r\n\t\t\t,1.0 * SUM(ep.AccountEnergyUsage) AS EnergyUsage\r\n\t\t\t,SUM(ISNULL(ep.AccountDemandUsage, 0)) AS DemandUsage\r\n\t\t\t,0 AS reactivePowerEnergy\r\n\t\t\t,0 AS facility_point_usage\r\n\t\t\t,SUM(CASE WHEN ep.BillingPeriod=@endBillingPeriod THEN ep.manualPaymentOverrideAmount ELSE 0 END) AS LastMonth_TotalDollars\r\n\t\tFROM EC3DB.Published_AccountLevelRawDataForCurrentPeriod AS ep\r\n\t\t\tINNER JOIN EC3DB.Billing_UtilityTariffRateInformation AS euti\r\n\t\t\t\tON ((ep.UtilityTariffRateInformationSeqId = euti.UtilityTariffRateInformationSeqId AND @startBillingPeriod < @InvoiceAccountGroup49_CutOffDate)\r\n\t\t\t\tOR (@startBillingPeriod >= @InvoiceAccountGroup49_CutOffDate\r\n\t\t\t\t\tAND ((ep.UtilityTariffRateInformationSeqId = euti.UtilityTariffRateInformationSeqId AND euti.UtilityTariffRateInformationSeqId <> 139)\r\n\t\t\t\t\t\tOR (ep.UtilityTariffRateInformationSeqId=139 AND euti.UtilityTariffRateInformationSeqId = 204))\r\n\t\t\t\t))\r\n\t\tWHERE ep.BillingPeriod BETWEEN @startBillingPeriod AND @endBillingPeriod\r\n\t\t\tAND ep.AgencyCodeOEC IN (SELECT CODE FROM @agencyCodeOECs)\r\n\t\t\tAND (ep.CurrentInvoiceAccountBillingGroup <> 49 OR @startBillingPeriod>=@InvoiceAccountGroup49_CutOffDate)\r\n\t\t\tAND ep.AccountStatus<>'EP'\r\n\t\t\tAND ep.BudgetGroupDEM NOT IN (1, 2, 3, 4, 5, 6, 7, 53, 55, 56)\r\n\t\t\tAND\tep.BudgetGroupDEM IN (SELECT BudgetGroupID FROM Preload.BudgetGroupByFY WHERE FY=@fy)\r\n\t\tGROUP BY ep.AgencyCodeOEC\r\n\t\t\t,CASE WHEN ep.BudgetGroupDEM = 21 THEN @lipa_street_lighting\r\n\t\t\t\tWHEN ep.BudgetGroupDEM = 71 THEN @solar_energy\r\n\t\t\t\tELSE CASE WHEN ep.energyType = 'ELE' THEN @non_nypa_ele\r\n\t\t\t\t\t\tELSE ep.energyType END\r\n\t\t\tEND)\r\n\r\n\tINSERT INTO @Output (AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, AdjustmentSurplus, LastMonthActualDollar)\r\n    SELECT  a.AgencyCodeOEC,\r\n        b.ReportDataTypeId,\r\n        CASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN a.energy_dollar\r\n            WHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN a.demand_dollar\r\n            WHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN a.facility_point_dollar\r\n            WHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN a.reactive_power_dollar\r\n\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN a.paid_adjustment\r\n            ELSE a.TotalDollars END AS ActualDollar,\r\n        CASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN a.EnergyUsage\r\n            WHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN a.DemandUsage\r\n            WHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN a.facility_point_usage\r\n            WHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN a.reactivePowerEnergy\r\n            ELSE 0 END AS ActualUsage,\r\n        CASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 AND a.EnergyUsage <> 0 THEN CAST(a.energy_dollar / a.EnergyUsage AS MONEY)\r\n            WHEN CHARINDEX('demand', b.TypeLevel3) > 0 AND a.DemandUsage <> 0 THEN CAST(a.demand_dollar / a.DemandUsage AS MONEY)\r\n            WHEN CHARINDEX('facility', b.TypeLevel3) > 0 AND a.facility_point_usage <> 0 THEN CAST(a.facility_point_dollar / a.facility_point_usage AS MONEY)\r\n            WHEN CHARINDEX('reactive', b.TypeLevel3) > 0 AND a.reactivePowerEnergy <> 0 THEN CAST(a.reactive_power_dollar / a.reactivePowerEnergy AS MONEY)\r\n            ELSE 0 END AS ActualRate,\r\n\t\tCASE WHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN -1*a.paid_adjustment ELSE 0 END AS AdjustmentSurplus,\r\n\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN a.LastMonth_TotalDollars\r\n\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\tELSE a.LastMonth_TotalDollars END AS LastMonth_TotalDollars\r\n    FROM ec3_actual_data_NYPAELE AS a\r\n\t\tINNER JOIN report.ReportDataType AS b ON a.energytype = b.TypeLevel2\r\n\tUNION ALL\r\n\tSELECT a.AgencyCodeOEC\r\n\t\t,b.ReportDataTypeId\r\n\t\t,a.TotalDollars AS ActualDollar\r\n\t\t,CASE WHEN CHARINDEX('solar', b.TypeLevel2) > 0 and @startBillingPeriod<@ShowNonNYPAEnergyUsage_CutOffDate THEN 0\r\n\t\t\tWHEN b.EnergyType='CHW' THEN a.EnergyUsage\r\n\t\t\tELSE a.EnergyUsage END AS ActualUsage\r\n\t\t,CASE WHEN a.EnergyUsage <> 0 AND (CHARINDEX('solar', b.TypeLevel2) = 0 OR (CHARINDEX('solar', b.TypeLevel2) > 0 AND @startBillingPeriod >= @ShowNonNYPAEnergyUsage_CutOffDate))\r\n\t\t\tTHEN CAST(a.energy_dollar / a.EnergyUsage AS MONEY)\r\n\t\t\tELSE 0 END AS ActualRate\r\n\t\t,-1*a.paid_adjustment AS AdjustmentSurplus\r\n\t\t,a.LastMonth_TotalDollars\r\n\tFROM ec3_actual_data_NONNYPA AS a\r\n\t\tINNER JOIN report.ReportDataType AS b ON a.energytype = b.energytype OR a.EnergyType = b.typelevel2\r\n\tUNION ALL\r\n\tSELECT a.AgencyNo AS AgencyCodeOEC\r\n\t\t,b.ReportDataTypeId\r\n\t\t,SUM(-1*ABS(ISNULL(a.AgencyShare, 0))) AS ActualDollar\r\n\t\t,0 AS ActualUsage\r\n\t\t,0 AS ActualRate\r\n\t\t,0 AS AdjustmnetSurplus\r\n\t\t,SUM(CASE WHEN a.BillingPeriod = @endBillingPeriod THEN -1*ABS(ISNULL(a.AgencyShare, 0)) ELSE 0 END) AS LastMonth_TotalDollars\r\n\tFROM input.vwChargebacks AS a\r\n\t\tCROSS JOIN report.ReportDataType AS b\r\n\tWHERE a.BillingPeriod BETWEEN @startBillingPeriod AND @endBillingPeriod AND a.AgencyNo IN (SELECT CODE FROM @agencyCodeOECs) AND b.TypeLevel1 = @chargeback_rpt_desc\r\n\tGROUP BY a.AgencyNo, b.ReportDataTypeId\r\n\tUNION ALL\r\n\tSELECT ISNULL(a.AgencyCodeOEC, b.AgencyCodeOEC) AS AgencyCodeOEC\r\n\t\t,b.reportdatatypeid\r\n\t\t,ISNULL(a.ActualDollar, 0) AS ActualDollar\r\n\t\t,0 AS ActualUsage\r\n\t\t,0 AS ActualRate\r\n\t\t,0 AS AdjustmnetSurplus\r\n\t\t,ISNULL(a.LastMonth_TotalDollars, 0) AS LastMonth_TotalDollars\r\n\tFROM (SELECT AgencyCodeOEC\r\n\t\t\t,SUM(ISNULL(AgencyRefundCheckAmount, 0)) AS ActualDollar\r\n\t\t\t,SUM(CASE WHEN BillingPeriod = @endBillingPeriod THEN AgencyRefundCheckAmount ELSE 0 END) AS LastMonth_TotalDollars\r\n\t\tFROM EC3DB.CrisNationalGridWest_AgencyRefundCheckTotalAmount\r\n\t\tWHERE BillingPeriod BETWEEN @startBillingPeriod AND @endBillingPeriod AND AgencyCodeOEC IN (SELECT CODE FROM @agencyCodeOECs)\r\n\t\tGROUP BY AgencyCodeOEC) AS a\r\n\t\tRIGHT JOIN (SELECT a1.CODE AS AgencyCodeOEC, b1.reportdatatypeid\r\n\t\tFROM (SELECT CODE FROM @agencyCodeOECs) AS a1\r\n\t\t\tCROSS JOIN report.ReportDataType AS b1\r\n\t\tWHERE b1.TypeLevel1 = 'Refund') AS b ON a.AgencyCodeOEC = b.AgencyCodeOEC;\r\n\r\n\tRETURN;\r\nEND;\r"
        }
      ]
    }
  ]
}