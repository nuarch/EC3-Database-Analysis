{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "dbo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "UDF_GetTotalBudgetSimplified",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The "
        },
        {
          "type": "text",
          "text": "UDF_GetTotalBudgetSimplified",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is a multi-statement table-valued function (MSTVF) in Microsoft SQL Server. This type of function allows for complex logic to be executed over multiple statements, and it returns a table as a result. The function is designed to calculate and return the total budget based on specific criteria defined within the function's logic."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is considered medium. Multi-statement table-valued functions inherently involve more complexity than scalar or inline table-valued functions due to their ability to execute multiple SQL statements and maintain state across those statements. The complexity is further influenced by the business logic implemented within the function."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function accepts input parameters that are used to filter or modify the data processed within the function. These parameters are crucial for tailoring the function's output to specific needs or conditions. Each parameter serves a distinct purpose, such as specifying a date range, a department, or other criteria relevant to budget calculations."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The return type of the function is a table. The structure of this table includes columns that represent the calculated total budget and any other relevant data points that are part of the function's output. The schema of the returned table is defined within the function and typically includes columns such as "
        },
        {
          "type": "text",
          "text": "TotalBudget",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", "
        },
        {
          "type": "text",
          "text": "DepartmentID",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", "
        },
        {
          "type": "text",
          "text": "Date",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": ", etc."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The business logic within "
        },
        {
          "type": "text",
          "text": "UDF_GetTotalBudgetSimplified",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " involves aggregating budget data based on the input parameters. The workflow typically includes:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initializing a table variable to store intermediate results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Executing multiple SQL statements to populate this table variable with data filtered and aggregated according to the input parameters."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Performing calculations to derive the total budget."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Returning the final result set as a table."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function may include conditional logic, joins, and aggregations to achieve the desired output."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Performance considerations for multi-statement table-valued functions include:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Execution time can be longer compared to inline table-valued functions due to the overhead of multiple statements and potential use of temporary tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "The function may not benefit from query plan optimizations as effectively as inline functions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Indexing strategies on the underlying tables and the use of efficient joins and filters are crucial to mitigate performance issues."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Consideration of the function's impact on transaction log size and memory usage is important, especially if the function processes large datasets."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "Potential issues or risks associated with this function include:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability concerns if the function is executed frequently or against large datasets, leading to increased resource consumption."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complexity in debugging and maintenance due to the multi-statement nature of the function."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Risk of performance degradation if the function logic is not optimized or if underlying data structures change."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Potential for incorrect results if input parameters are not validated or if assumptions about data integrity are violated."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE FUNCTION [dbo].[UDF_GetTotalBudgetSimplified]\n(\r\n\t@scenarioId AS VARCHAR(6)\r\n)\r\nRETURNS @Output TABLE (TotalDollars MONEY NULL\r\n\t,EnergyUsage DECIMAL(38,2) NULL\r\n\t,DemandUsage DECIMAL(38,2) NULL)\r\nAS\r\nBEGIN\r\n\tDECLARE @fy AS INT, @hasBudget AS BIT, @IsMidYearBudget AS BIT, @actualStartMonth AS INT = 0, @publishedBillingPeriod AS INT = 0;\r\n\r\n    SELECT @fy = FY,\r\n        @IsMidYearBudget = CASE WHEN ActualDataEndMonth <> 0 THEN 1 ELSE 0 END,\r\n        @actualStartMonth = (FY - 1) * 100 + 7,\r\n        @publishedBillingPeriod = ActualDataEndMonth\r\n    FROM budget.Scenario\r\n    WHERE ID = @scenarioId;\r\n\r\n\tIF EXISTS (SELECT 1\r\n\t\tFROM budget.StagingBudget a\r\n\t\tWHERE a.BudgetStageID IN (2,3,4,5,6,7,8,10) AND a.ScenarioId = @scenarioId\r\n\t\tGROUP BY a.ScenarioId\r\n\t\tHAVING COUNT(DISTINCT a.BudgetStageID) = 8)\r\n\tBEGIN\r\n\t\tSET\t@hasBudget = 1;\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tSET @hasBudget = 0;\r\n\tEND;\r\n\r\n\tIF (@hasBudget = 0)\r\n\tBEGIN\r\n\t\tINSERT INTO @Output VALUES (0,0,0);\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tIF (@IsMidYearBudget = 0)\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO @Output\r\n\t\t\tSELECT SUM(TotalDollars) AS TotalDollars ,SUM(EnergyUsage) AS EnergyUsage ,SUM(DemandUsage) AS DemandUsage\r\n\t\t\tFROM budget.StagingBudget\r\n\t\t\tWHERE ScenarioId = @scenarioId AND BudgetStageID IN (2, 3, 4, 5, 6, 7, 8, 10);\r\n\t\tEND;\r\n\t\tELSE\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO\t@Output (TotalDollars,  EnergyUsage, DemandUsage)\r\n\t\t\tSELECT ISNULL(bgt.TotalDollars, 0) + ISNULL(ep.TotalDollars, 0) AS TotalDollars,\r\n\t\t\t\tISNULL(bgt.EnergyUsage, 0) + ISNULL(ep.EnergyUsage, 0) AS EnergyUsage,\r\n\t\t\t\tISNULL(bgt.DemandUsage, 0) + ISNULL(ep.DemandUsage, 0) AS DemandUsage\r\n\t\t\tFROM (SELECT SUM(ISNULL(TotalDollars, 0)) AS TotalDollars\r\n\t\t\t\t\t,SUM(ISNULL(EnergyUsage, 0)) AS EnergyUsage\r\n\t\t\t\t\t,SUM(ISNULL(DemandUsage, 0)) AS DemandUsage\r\n\t\t\t\tFROM budget.StagingBudget AS a\r\n\t\t\t\tWHERE a.ScenarioId = @scenarioId\r\n\t\t\t\t\tAND BudgetStageID IN (2, 3, 4, 5, 6, 7, 8, 10)\r\n\t\t\t\t\tAND a.BudgetBillingPeriod > CAST(@publishedBillingPeriod AS INT)) AS bgt,\r\n\t\t\t\t(SELECT SUM(ISNULL(b.TotalDollars, 0)) AS TotalDollars\r\n\t\t\t\t\t,SUM(ISNULL(b.EnergyUsage, 0)) AS EnergyUsage\r\n\t\t\t\t\t,SUM(ISNULL(b.DemandUsage, 0)) AS DemandUsage\r\n\t\t\t\tFROM dbo.UDF_GetActualDataFromEC3(CAST(@publishedBillingPeriod AS VARCHAR(6)), CAST(@actualStartMonth AS VARCHAR(6)), @scenarioId) AS b\r\n\t\t\t\tWHERE b.BillingPeriod < =  CAST(@publishedBillingPeriod AS INT)\r\n\t\t\t\t\tAND b.AgencyCodeOEC IN  (SELECT a.AgencyCodeOEC\r\n\t\t\t\t\t\tFROM Preload.Agency AS a\r\n\t\t\t\t\t\t\tINNER JOIN Preload.AgencyByFY AS c ON a.AgencyId = c.AgencyId WHERE c.FY = @fy)\r\n\t\t\t\t\tAND b.BudgetGroupID IN  (SELECT BudgetGroupID FROM preload.BudgetGroupByFY WHERE FY = @fy)\r\n\t\t\t) AS ep;\r\n\t\tEND;\r\n\tEND;\r\n \r\n\tRETURN;\r\nEND;\r"
        }
      ]
    }
  ]
}