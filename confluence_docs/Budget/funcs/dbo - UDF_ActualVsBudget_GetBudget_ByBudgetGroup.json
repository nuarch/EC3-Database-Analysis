{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "dbo",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Function Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "UDF_ActualVsBudget_GetBudget_ByBudgetGroup",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Medium",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function "
        },
        {
          "type": "text",
          "text": "UDF_ActualVsBudget_GetBudget_ByBudgetGroup",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is a multi-statement table-valued function (MSTVF) in Microsoft SQL Server. It is designed to retrieve budget information based on a specified budget group. This function processes input parameters to filter and compute budget data, returning a structured table as a result. MSTVFs allow for complex logic and multiple statements, making them suitable for operations that require intermediate processing steps."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: Medium"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity level of this function is medium. While it involves multiple statements and potentially complex logic to aggregate or transform data, it is not as intricate as high-complexity functions that might involve recursive logic or extensive data manipulation. The function's complexity is primarily due to its multi-statement nature and the need to manage intermediate results."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function accepts the following input parameters:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@BudgetGroupID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": This parameter is used to specify the budget group for which the budget data is to be retrieved. It acts as a filter to narrow down the dataset to relevant records associated with the given budget group."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Return Type"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function returns a table. The structure of the returned table typically includes columns such as:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "BudgetID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Identifier for the budget entry."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "BudgetAmount",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The amount allocated for the budget."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "BudgetGroupID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Identifier for the budget group."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Other relevant columns",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Depending on the business logic, additional columns may be included to provide more context or details about the budget."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function's workflow involves the following steps:"
        }
      ]
    },
    {
      "type": "orderedList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initialization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Declare a table variable to store intermediate results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Use the input parameter "
                },
                {
                  "type": "text",
                  "text": "@BudgetGroupID",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to filter budget records from relevant tables."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Processing",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Perform necessary calculations or transformations on the retrieved data. This may include aggregating budget amounts or joining with other tables to enrich the data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Return Result",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Populate the table variable with the processed data and return it as the function's output."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The function encapsulates logic to ensure that only budget data relevant to the specified budget group is processed and returned."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Execution Plan",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": MSTVFs can sometimes lead to suboptimal execution plans, especially if they involve complex joins or large datasets. It's important to analyze the execution plan to identify potential bottlenecks."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Caching",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Unlike inline table-valued functions, MSTVFs do not benefit from query plan caching, which can impact performance if the function is called frequently."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Optimization",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Consider indexing strategies on the underlying tables to improve data retrieval performance. Also, ensure that the function logic is optimized to minimize unnecessary computations."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": As the dataset grows, the performance of the function may degrade if not properly optimized. Regular monitoring and tuning may be required."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of multiple statements can introduce complexity, making the function harder to maintain and debug."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Concurrency",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If the function involves updates or inserts into shared resources, consider potential concurrency issues and implement appropriate locking mechanisms."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Ensure that the function includes error handling to manage unexpected scenarios, such as invalid input parameters or data inconsistencies."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "8. Function Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE FUNCTION [dbo].[UDF_ActualVsBudget_GetBudget_ByBudgetGroup]\n(\r\n\t@startBillingPeriod AS VARCHAR(6)\r\n\t,@endBillingPeriod AS VARCHAR(6)\r\n\t,@IsProjection AS BIT = 0\r\n\t,@actualDataEndMonth AS VARCHAR(6) = '0'\r\n)\r\nRETURNS @Output TABLE (BudgetGroupID INT NULL\r\n\t,ReportDataTypeId INT NULL\r\n\t,BudgetDollar MONEY NULL\r\n\t,BudgetUsage DECIMAL(38,2) NULL\r\n\t,BudgetRate MONEY NULL\r\n\t,BudgetDollar_YTD MONEY NULL\r\n\t,BudgetDollar_EOY MONEY NULL\r\n\t,BudgetDollar_FullYear\tMONEY NULL)\r\nAS\r\nBEGIN\r\n\tDECLARE @currentBudgetScenarioId AS INT, @fy AS INT, @ShowNonNYPAEnergyUsage_CutOffDate AS VARCHAR(6)='202107';\r\n\r\n\tIF CAST(RIGHT(@endBillingPeriod, 2) AS INT)<7\r\n\tBEGIN\r\n\t\tSET @fy=CAST(LEFT(@endBillingPeriod, 4) AS INT);\r\n\tEND\r\n\tELSE\t\r\n\tBEGIN\r\n\t\tSET @fy=CAST(LEFT(@endBillingPeriod, 4) AS INT)+1;\r\n\tEND;\r\n\r\n\tIF (@IsProjection=1 AND EXISTS (SELECT * FROM budget.Scenario WHERE FY = @fy AND IsCurrentProjection = 1))\r\n\tBEGIN\r\n\t\tSELECT @currentBudgetScenarioId = MAX(ID)\r\n\t\tFROM budget.Scenario\r\n\t\tWHERE FY = @fy AND IsCurrentProjection = 1;\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tSELECT @currentBudgetScenarioId = MAX(ID)\r\n\t\tFROM budget.Scenario\r\n\t\tWHERE FY = @fy AND IsCurrentBudget = 1;\r\n\tEND;\r\n\t\r\n\tWITH ec3_budget_data AS --nypa buildings, tod buildings, street lighting\r\n\t(SELECT BudgetGroupID\r\n\t\t,CASE WHEN BudgetGroupID IN (1,3,5,56) THEN 'NYPA Buildings Electricity'\r\n\t\t\tWHEN BudgetGroupID IN (2,4,6,53,55) THEN 'NYPA Time Of Day Electricity'\r\n\t\t\tWHEN BudgetGroupID IN (7) THEN 'NYPA Street Lighting'\r\n\t\t\tWHEN BudgetGroupID IN (21) THEN 'LIPA Street Lighting'\r\n\t\t\tWHEN BudgetGroupID IN (71) THEN 'Solar Energy' \r\n\t\t\tWHEN BudgetGroupID IN (77) THEN 'RECs'\r\n\t\t\tELSE CASE WHEN energyType='ELE' THEN 'Non-NYPA Electricity' ELSE energyType END \r\n\t\t\tEND AS EnergyType\r\n\t\t,SUM(CASE WHEN (@startBillingPeriod=@endBillingPeriod AND BudgetBillingPeriod=@endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod<=@endBillingPeriod AND @startBillingPeriod<=BudgetBillingPeriod) THEN EnergyDollars ELSE 0 END +\r\n\t\t\t\tCASE WHEN (@startBillingPeriod=@endBillingPeriod AND BudgetBillingPeriod=@endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod<=@endBillingPeriod AND @startBillingPeriod<=BudgetBillingPeriod) THEN CustomerChargeDollars ELSE 0 END) AS energy_dollar\r\n\t\t,SUM(CASE WHEN (@startBillingPeriod=@endBillingPeriod AND BudgetBillingPeriod=@endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod<=@endBillingPeriod AND @startBillingPeriod<=BudgetBillingPeriod) THEN DemandDollars ELSE 0 END) AS demand_dollar\r\n\t\t,SUM(CASE WHEN (@startBillingPeriod=@endBillingPeriod AND BudgetBillingPeriod=@endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod<=@endBillingPeriod AND @startBillingPeriod<=BudgetBillingPeriod) THEN FacilityPointDollars ELSE 0 END) AS facility_point_dollar\r\n\t\t,SUM(CASE WHEN (@startBillingPeriod=@endBillingPeriod AND BudgetBillingPeriod=@endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod<=@endBillingPeriod AND @startBillingPeriod<=BudgetBillingPeriod) THEN ReactivePowerUsageDollars ELSE 0 END) AS reactive_power_dollar\r\n\t\t,0 AS paid_adjustment\r\n\t\t,SUM(CASE WHEN (@startBillingPeriod=@endBillingPeriod AND BudgetBillingPeriod=@endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod<=@endBillingPeriod AND @startBillingPeriod<=BudgetBillingPeriod) THEN TotalDollars ELSE 0 END) AS TotalDollars\r\n\t\t,SUM(CASE WHEN (@startBillingPeriod=@endBillingPeriod AND BudgetBillingPeriod=@endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod<=@endBillingPeriod AND @startBillingPeriod<=BudgetBillingPeriod) THEN EnergyUsage ELSE 0 END) AS EnergyUsage\r\n\t\t,SUM(CASE WHEN (@startBillingPeriod=@endBillingPeriod AND BudgetBillingPeriod=@endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod<=@endBillingPeriod AND @startBillingPeriod<=BudgetBillingPeriod) THEN DemandUsage ELSE 0 END) AS DemandUsage\r\n\t\t,0 AS reactivePowerEnergy\r\n\t\t,SUM(CASE WHEN (@startBillingPeriod=@endBillingPeriod AND BudgetBillingPeriod=@endBillingPeriod) OR (@startBillingPeriod<@endBillingPeriod AND BudgetBillingPeriod<=@endBillingPeriod AND @startBillingPeriod<=BudgetBillingPeriod) THEN StreetLightingFacilityPoints ELSE 0 END) AS facility_point_usage\r\n\t\t,SUM(CASE WHEN LEN(@actualDataEndMonth)=6 AND @actualDataEndMonth<BudgetBillingPeriod AND BudgetBillingPeriod<=@endBillingPeriod THEN TotalDollars \r\n\t\t\t\tWHEN LEN(@actualDataEndMonth)<>6 AND BudgetBillingPeriod<=@endBillingPeriod THEN TotalDollars \r\n\t\t\t\tELSE 0 END) AS TotalDollars_YTD\r\n\t\t,SUM(CASE WHEN BudgetBillingPeriod>@endBillingPeriod THEN TotalDollars ELSE 0 END) AS TotalDollars_EOY\r\n\t\t,SUM(TotalDollars) AS TotalDollars_FullYear\r\n\tFROM budget.vwTotalBudget\r\n\tWHERE ScenarioId=@currentBudgetScenarioId AND\r\n\t\tBudgetGroupID<>62\r\n\tGROUP BY BudgetGroupID\r\n\t\t,CASE WHEN BudgetGroupID IN (1,3,5,56) THEN 'NYPA Buildings Electricity'\r\n\t\t\tWHEN BudgetGroupID IN (2,4,6,53,55) THEN 'NYPA Time Of Day Electricity'\r\n\t\t\tWHEN BudgetGroupID IN (7) THEN 'NYPA Street Lighting'\r\n\t\t\tWHEN BudgetGroupID IN (21) THEN 'LIPA Street Lighting'\r\n\t\t\tWHEN BudgetGroupID IN (71) THEN 'Solar Energy'\r\n\t\t\tWHEN BudgetGroupID IN (77) THEN 'RECs'\r\n\t\t\tELSE CASE WHEN energyType='ELE' THEN 'Non-NYPA Electricity' ELSE energyType END \r\n\t\tEND)\r\n\tINSERT INTO @Output (BudgetGroupID, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear)\r\n\tSELECT  a.BudgetGroupID,\r\n\t\t\tb.ReportDataTypeId,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN a.energy_dollar\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN a.demand_dollar\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN a.facility_point_dollar\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN a.reactive_power_dollar\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN a.paid_adjustment\r\n\t\t\t\tELSE a.TotalDollars\r\n\t\t\tEND AS BudgetDollar,\r\n\t\t\tCASE WHEN (CHARINDEX('energy', b.TypeLevel3) > 0 \r\n\t\t\t\t\tOR b.EnergyType IN ('GAS','STM','CHW') \r\n\t\t\t\t\tOR b.TypeLevel2='LIPA Street Lighting' \r\n\t\t\t\t\tOR (b.TypeLevel2='Solar Energy' and @startBillingPeriod>=@ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\tOR (b.TypeLevel2='Non-NYPA Electricity' and @startBillingPeriod>=@ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\t) THEN a.EnergyUsage\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN a.DemandUsage\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN a.facility_point_usage\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN a.reactivePowerEnergy\r\n\t\t\t\tELSE 0\r\n\t\t\tEND AS BudgetUsage,\r\n\t\t\tCASE WHEN (CHARINDEX('energy', b.TypeLevel3) > 0 \r\n\t\t\t\t\tOR b.EnergyType IN ('GAS','STM','CHW') \r\n\t\t\t\t\tOR b.TypeLevel2='LIPA Street Lighting' \r\n\t\t\t\t\tOR (b.TypeLevel2='Solar Energy' and @startBillingPeriod>=@ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\tOR (b.TypeLevel2='Non-NYPA Electricity' and @startBillingPeriod>=@ShowNonNYPAEnergyUsage_CutOffDate)\r\n\t\t\t\t\t) AND a.EnergyUsage <> 0 \r\n\t\t\t\t\tTHEN CAST(a.energy_dollar / a.EnergyUsage AS MONEY)\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 AND a.DemandUsage <> 0 THEN CAST(a.demand_dollar / a.DemandUsage AS MONEY)\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 AND a.facility_point_usage <> 0 THEN CAST(a.facility_point_dollar / a.facility_point_usage AS MONEY)\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 AND a.reactivePowerEnergy <> 0 THEN CAST(a.reactive_power_dollar / a.reactivePowerEnergy AS MONEY)\r\n\t\t\t\tELSE 0\r\n\t\t\tEND AS BudgetRate,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN TotalDollars_YTD\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tELSE a.TotalDollars_YTD\r\n\t\t\tEND AS TotalDollars_YTD ,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN TotalDollars_EOY\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tELSE a.TotalDollars_EOY\r\n\t\t\tEND AS TotalDollars_EOY ,\r\n\t\t\tCASE WHEN CHARINDEX('energy', b.TypeLevel3) > 0 THEN TotalDollars_FullYear\r\n\t\t\t\tWHEN CHARINDEX('demand', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('facility', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('reactive', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tWHEN CHARINDEX('adjust', b.TypeLevel3) > 0 THEN 0\r\n\t\t\t\tELSE a.TotalDollars_FullYear\r\n\t\t\tEND AS TotalDollars_FullYear\r\n\tFROM ec3_budget_data AS a\r\n\t\tINNER JOIN [report].ReportDataType AS b ON a.energytype = b.TypeLevel2 OR a.energytype = b.energytype;\r\n\r\n\tRETURN;\r\nEND;\r"
        }
      ]
    }
  ]
}