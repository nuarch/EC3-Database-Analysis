{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "USP_ActualVsBudget_RetrieveBudgetData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "USP_ActualVsBudget_RetrieveBudgetData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve budget data and compare it against actual financial data for specified billing periods. It handles both projections and breakdown reports, and it accommodates mid-year budget adjustments. The procedure uses various temporary tables to store intermediate results and combines data from multiple sources to produce a comprehensive report on budget versus actuals."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The complexity of this stored procedure is high due to several factors:"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It involves multiple conditional logic branches to handle different scenarios (e.g., mid-year budgets, projections)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It uses several temporary tables and user-defined table types to manage data."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It includes dynamic date calculations and conditional data retrieval."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "It interacts with other stored procedures and user-defined functions, adding layers of complexity."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@startBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The start of the billing period in 'YYYYMM' format."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@endBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The end of the billing period in 'YYYYMM' format."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@agencyCodeOECStr AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A comma-separated string of agency codes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsProjection AS BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether to use projection data (1 for true, 0 for false)."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsBreakDownReport AS BIT = 1",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether to generate a breakdown report (1 for true, 0 for false)."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Initial Setup",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure begins by setting the transaction isolation level to "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to avoid locking issues and declares several variables and temporary tables for processing."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Fiscal Year Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It determines the fiscal year based on the "
                },
                {
                  "type": "text",
                  "text": "@endBillingPeriod",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": "."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scenario Selection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Depending on whether projections are used, it selects the appropriate budget scenario ID from the "
                },
                {
                  "type": "text",
                  "text": "budget.Scenario",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Agency Code Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": If no agency codes are provided, it retrieves them from the "
                },
                {
                  "type": "text",
                  "text": "Preload.Agency",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table for the specified fiscal year."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Tenant Charge Details",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It populates the "
                },
                {
                  "type": "text",
                  "text": "@TNCDetails",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " table with tenant charge details based on the selected tenant charge ID."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Budget Data Retrieval",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For non-mid-year budgets, it retrieves budget data using the "
                        },
                        {
                          "type": "text",
                          "text": "UDF_ActualVsBudget_GetBudget",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " function and populates the "
                        },
                        {
                          "type": "text",
                          "text": "@DCASBudget",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " and "
                        },
                        {
                          "type": "text",
                          "text": "@OTHERBudget",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " tables."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "For mid-year budgets, it retrieves actual data using the "
                        },
                        {
                          "type": "text",
                          "text": "USP_ActualVsBudget_RetrieveActualData",
                          "marks": [
                            {
                              "type": "code"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "text": " procedure and budget data if the end billing period exceeds the actual data end month."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Combination",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": It combines data from the "
                },
                {
                  "type": "text",
                  "text": "@DCASBudget",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", "
                },
                {
                  "type": "text",
                  "text": "@OTHERBudget",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ", and "
                },
                {
                  "type": "text",
                  "text": "@TNCDetails",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " tables to calculate budget figures, including adjustments for tenant charges."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Output",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure outputs a union of budget and actual data, formatted to include various budget metrics and adjustments."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can improve performance by reducing locking but may lead to dirty reads."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Extensive use of temporary tables can impact performance, especially if the data volume is large."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Complex Joins and Calculations",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure performs multiple joins and calculations, which can be resource-intensive."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The branching logic for different scenarios can lead to complex execution paths, potentially affecting performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dirty Reads",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The use of "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " may result in reading uncommitted data, which could lead to inconsistencies."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's complexity and reliance on temporary tables may not scale well with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Dependency on External Functions and Procedures",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The reliance on other stored procedures and functions means changes in those components could affect this procedure's behavior."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Assumptions on Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes that data retrieved from external sources is accurate and complete, which may not always be the case."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [report].[USP_ActualVsBudget_RetrieveBudgetData]\n(\r\n\t@startBillingPeriod AS VARCHAR(6)\r\n\t,@endBillingPeriod AS VARCHAR(6)\r\n\t,@agencyCodeOECStr AS VARCHAR(MAX)\r\n\t,@IsProjection AS BIT = 0\r\n\t,@IsBreakDownReport AS BIT = 1\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @fy AS INT, @tenantChargeId AS INT, @agencyCodeOECs AS input.UDT_CODEList, @currentBudgetScenarioId AS INT, @dcasAgencyCODE AS input.UDT_CODEList\r\n\t\t,@dcas856090AgencyCODE AS input.UDT_CODEList, @actualDataEndMonth AS VARCHAR(6), @endBillingPeriodForActualData AS VARCHAR(6)\r\n\t\t,@startBillingPeriodForActualData AS VARCHAR(6), @startBillingPeriodForBudgetData AS VARCHAR(6), @isActVsBgtReport5 AS BIT = 0;\r\n\r\n\tDECLARE @TNCDetails TABLE (AgencyCodeOEC VARCHAR(6),\r\n\t\tChargePercentage DECIMAL(10, 5));\r\n\r\n\tDECLARE @DCASBudget TABLE (AgencyCodeOEC VARCHAR(6),\r\n\t\tReportDataTypeId INT,\r\n\t\tBudgetDollar MONEY,\r\n\t\tBudgetUsage DECIMAL(20, 2),\r\n\t\tBudgetRate MONEY,\r\n\t\tBudgetDollar_YTD MONEY, \r\n\t\tBudgetDollar_EOY MONEY, \r\n\t\tBudgetDollar_FullYear MONEY);\r\n\r\n\tDECLARE @StateFundsBudget TABLE (AgencyCodeOEC VARCHAR(6),\r\n\t\tReportDataTypeId INT,\r\n\t\tBudgetDollar MONEY,\r\n\t\tBudgetUsage DECIMAL(20, 2),\r\n\t\tBudgetRate MONEY,\r\n\t\tBudgetDollar_YTD MONEY, \r\n\t\tBudgetDollar_EOY MONEY, \r\n\t\tBudgetDollar_FullYear MONEY);\r\n\r\n\tDECLARE @OTHERBudget TABLE (AgencyCodeOEC VARCHAR(6),\r\n\t\tReportDataTypeId INT,\r\n\t\tBudgetDollar MONEY,\r\n\t\tBudgetUsage DECIMAL(20, 2),\r\n\t\tBudgetRate MONEY,\r\n\t\tBudgetDollar_YTD MONEY, \r\n\t\tBudgetDollar_EOY MONEY, \r\n\t\tBudgetDollar_FullYear MONEY);\r\n\r\n\t--for mid year budget added on 05/17/2018--\r\n\tDECLARE @tempActualData TABLE (AgencyCodeOEC VARCHAR(6),\r\n\t\tStartBillingPeriod VARCHAR(6),\r\n\t\tEndBillingPeriod VARCHAR(6),\r\n\t\tReportDataTypeId INT,\r\n\t\tIsProjection BIT,\r\n\t\tActualDollar MONEY,\r\n\t\tActualUsage DECIMAL(20,2),\r\n\t\tActualRate DECIMAL(20,4),\r\n\t\tActualAdjustmentSurplus MONEY,\r\n\t\tActualTenantDollar MONEY,\r\n\t\tActualTenantUsage DECIMAL(20, 2),\r\n\t\tLastMonthActualDollar MONEY);\r\n\r\n\tDECLARE @tempBudgetData TABLE (AgencyCodeOEC VARCHAR(6),\r\n\t\tStartBillingPeriod VARCHAR(6),\r\n\t\tEndBillingPeriod VARCHAR(6),\r\n\t\tReportDataTypeId INT, \r\n\t\tIsProjection BIT,\r\n\t\tIsBreakDownReport BIT,\r\n\t\tBudgetDollar MONEY, \r\n\t\tBudgetUsage DECIMAL(20, 4), \r\n\t\tBudgetRate DECIMAL(20, 4),\r\n\t\tBudgetDollar_YTD MONEY,    \r\n\t\tBudgetDollar_EOY MONEY,    \r\n\t\tBudgetDollar_FullYear MONEY);\r\n\r\n\tIF CAST(RIGHT(@endBillingPeriod, 2) AS INT)<7\r\n\t\tSET @fy=CAST(LEFT(@endBillingPeriod, 4) AS INT)\r\n\tELSE\t\r\n\t\tSET @fy=CAST(LEFT(@endBillingPeriod, 4) AS INT)+1\r\n\r\n\r\n\tIF @IsProjection=1 AND EXISTS (SELECT * FROM budget.Scenario WHERE FY=@fy AND IsCurrentProjection=1)\r\n\t\tSELECT @currentBudgetScenarioId=ISNULL(MAX(ID), 0)\r\n\t\tFROM budget.Scenario\r\n\t\tWHERE FY=@fy AND IsCurrentProjection=1;\r\n\tELSE\r\n\t\tSELECT @currentBudgetScenarioId=ISNULL(MAX(ID), 0)\r\n\t\tFROM budget.Scenario\r\n\t\tWHERE FY=@fy AND IsCurrentBudget=1;\r\n\r\n\tSELECT @tenantChargeId=ISNULL(TenantChargeID, 3), @actualDataEndMonth = CAST(ISNULL(ActualDataEndMonth, 0) AS VARCHAR(6))\r\n\tFROM budget.Scenario\r\n\tWHERE ID=@currentBudgetScenarioId;\r\n\r\n\tIF @agencyCodeOECStr IS NULL OR @agencyCodeOECStr=''\r\n\t\tINSERT INTO @agencyCodeOECs (CODE)\r\n\t\tSELECT AgencyCodeOEC\r\n\t\tFROM Preload.Agency\r\n\t\tWHERE AgencyID IN (SELECT AgencyID FROM preload.AgencyByFY WHERE FY=@fy);\r\n\tELSE\r\n\t\tINSERT INTO @agencyCodeOECs (CODE) SELECT ID AS CODE  FROM dbo.[UDF_SplitToTable] (@agencyCodeOECStr,',');\r\n\r\n\tINSERT INTO @dcasAgencyCODE (CODE) VALUES ('856001');\r\n\tINSERT INTO @dcas856090AgencyCODE (CODE) VALUES ('856090');\r\n\r\n\tINSERT INTO @TNCDetails ( AgencyCodeOEC, ChargePercentage )\r\n\tSELECT AgencyCode, ChargePercentage\r\n\tFROM input.TenantChargeDetail\r\n\tWHERE TenantChargeID=@tenantChargeId AND AgencyCode IN (SELECT CODE FROM @agencyCodeOECs);\r\n\r\n\tIF @actualDataEndMonth='0' --Non Mid Year Budget\r\n\tBEGIN\r\n\t\tINSERT INTO @DCASBudget ( AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear )\r\n\t\tSELECT AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear \r\n\t\tFROM dbo.[UDF_ActualVsBudget_GetBudget] (@startBillingPeriod, @endBillingPeriod, @dcasAgencyCODE, @IsProjection, DEFAULT, DEFAULT, DEFAULT);\r\n\r\n\t\tINSERT INTO @OTHERBudget ( AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear )\r\n\t\tSELECT AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear \r\n\t\tFROM dbo.[UDF_ActualVsBudget_GetBudget] (@startBillingPeriod, @endBillingPeriod, @agencyCodeOECs, @IsProjection, DEFAULT, DEFAULT, DEFAULT);\r\n\r\n\t\tSELECT ISNULL(a.AgencyCodeOEC, b.AgencyCodeOEC) AS AgencyCodeOEC, \r\n\t\t\t@startBillingPeriod AS StartBillingPeriod,\r\n\t\t\t@endBillingPeriod AS EndBillingPeriod,\r\n\t\t\tISNULL(a.ReportDataTypeId, b.ReportDataTypeId) AS ReportDataTypeId, \r\n\t\t\t@IsProjection AS IsProjection,\r\n\t\t\t@IsBreakDownReport AS IsBreakDownReport,\r\n\t\t\tISNULL(a.BudgetDollar, 0)+ISNULL(b.tnc_budgetdollar, 0) AS BudgetDollar, \r\n\t\t\tISNULL(a.BudgetUsage, 0)+ISNULL(b.tnc_budgetusage, 0) AS BudgetUsage, \r\n\t\t\tCASE WHEN ISNULL(a.BudgetUsage, 0)+ISNULL(b.tnc_budgetusage, 0)<>0 THEN\r\n\t\t\t\t(ISNULL(a.BudgetDollar, 0)+ISNULL(b.tnc_budgetdollar, 0))/(ISNULL(a.BudgetUsage, 0)+ISNULL(b.tnc_budgetusage, 0))\r\n\t\t\tELSE 0.00 END AS BudgetRate,\r\n\t\t\tISNULL(a.BudgetDollar_YTD, 0) + ISNULL(b.tnc_budgetdollar_YTD, 0) AS BudgetDollar_YTD,    \r\n\t\t\tISNULL(a.BudgetDollar_EOY, 0) + ISNULL(b.tnc_budgetdollar_EOY, 0) AS BudgetDollar_EOY,    \r\n\t\t\tISNULL(a.BudgetDollar_FullYear, 0) + ISNULL(b.tnc_budgetdollar_FullYear, 0) AS BudgetDollar_FullYear,\r\n\t\t\t0.00 AS ActualAdjustmentSurplus\r\n\t\tFROM @OTHERBudget a FULL JOIN \r\n\t\t(\r\n\t\t\tSELECT b1.AgencyCodeOEC, a1.ReportDataTypeId, \r\n\t\t\tROUND(a1.BudgetDollar*b1.ChargePercentage, 0) AS tnc_budgetdollar,\r\n\t\t\ta1.BudgetUsage*b1.ChargePercentage AS tnc_budgetusage,        \r\n\t\t\ta1.BudgetRate AS tnc_budgetrate,\r\n\t\t\tROUND(a1.BudgetDollar_YTD*b1.ChargePercentage, 0) AS tnc_budgetdollar_YTD,    \r\n\t\t\tROUND(a1.BudgetDollar_EOY*b1.ChargePercentage, 0) AS tnc_budgetdollar_EOY,    \r\n\t\t\tROUND(a1.BudgetDollar_FullYear*b1.ChargePercentage, 0) AS tnc_budgetdollar_FullYear\r\n\t\t\tFROM @DCASBudget a1, @TNCDetails b1\r\n\t\t) b ON a.AgencyCodeOEC=b.AgencyCodeOEC AND a.ReportDataTypeId=b.ReportDataTypeId;\r\n\t\r\n\tEND;\r\n\tELSE --Mid Year Budget added on 05/17/2018\r\n\tBEGIN\t\r\n\t\tIF (@IsBreakDownReport=0 AND @startBillingPeriod=@endBillingPeriod)\r\n\t\tBEGIN\r\n\t\t\tSET @isActVsBgtReport5 = 1;\r\n\t\tEND;\r\n\r\n\t\t--always need actual data\r\n\t\tSELECT @endBillingPeriodForActualData = CASE WHEN @actualDataEndMonth > @endBillingPeriod THEN @endBillingPeriod\r\n\t\t\tELSE @actualDataEndMonth END;\r\n\r\n\t\t\tIF @isActVsBgtReport5=1 --For Actual vs Budget Report #5\r\n\t\t\tBEGIN\r\n\t\t\t\tSELECT @startBillingPeriodForActualData = CASE WHEN CAST(@startBillingPeriod AS INT)%100 >6 THEN LEFT(@startBillingPeriod, 4)+'07'\r\n\t\t\t\t\tELSE CAST(CAST(@startBillingPeriod AS INT)/100-1 AS VARCHAR(4))+'07' END;\r\n\r\n\t\t\t\tINSERT INTO @tempActualData\r\n\t\t\t\tEXEC [report].[USP_ActualVsBudget_RetrieveActualData] \r\n\t\t\t\t\t@startBillingPeriodForActualData,\r\n\t\t\t\t\t@endBillingPeriodForActualData,\r\n\t\t\t\t\t@agencyCodeOECStr,\r\n\t\t\t\t\t@IsProjection;\r\n\t\t\tEND;\r\n\t\t\tELSE\r\n\t\t\tBEGIN\r\n\t\t\t\tINSERT INTO @tempActualData\r\n\t\t\t\tEXEC [report].[USP_ActualVsBudget_RetrieveActualData] \r\n\t\t\t\t\t@startBillingPeriod,\r\n\t\t\t\t\t@endBillingPeriodForActualData,\r\n\t\t\t\t\t@agencyCodeOECStr,\r\n\t\t\t\t\t@IsProjection;\r\n\t\t\tEND;\r\n\r\n\t\t--actual data END;\r\n\r\n\t\tIF @endBillingPeriod > @actualDataEndMonth --need budget data\r\n\t\tBEGIN   \r\n\t\t\tSELECT @startBillingPeriodForBudgetData = CASE WHEN @startBillingPeriod = @endBillingPeriod THEN @endBillingPeriod\r\n\t\t\t\tELSE LEFT(CONVERT(VARCHAR, DATEADD(m, 1, CONVERT(DATE, @actualDataEndMonth + '01', 112)), 112), 6) END;\r\n\t\t\t\t\t\r\n\t\t\tINSERT INTO @DCASBudget (AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear)\r\n\t\t\tSELECT AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear \r\n\t\t\tFROM dbo.[UDF_ActualVsBudget_GetBudget] (@startBillingPeriodForBudgetData, @endBillingPeriod, @dcasAgencyCODE, @IsProjection, @actualDataEndMonth, @isActVsBgtReport5, DEFAULT);\r\n\r\n\t\t\tINSERT INTO @OTHERBudget (AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear)\r\n\t\t\tSELECT AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear \r\n\t\t\tFROM dbo.[UDF_ActualVsBudget_GetBudget] (@startBillingPeriodForBudgetData, @endBillingPeriod, @agencyCodeOECs, @IsProjection, @actualDataEndMonth, @isActVsBgtReport5, DEFAULT);\r\n\r\n\t\t\tINSERT INTO @tempBudgetData\r\n\t\t\tSELECT ISNULL(a.AgencyCodeOEC, b.AgencyCodeOEC) AS AgencyCodeOEC, \r\n\t\t\t\t@startBillingPeriodForBudgetData AS StartBillingPeriod,\r\n\t\t\t\t@endBillingPeriod AS EndBillingPeriod,\r\n\t\t\t\tISNULL(a.ReportDataTypeId, b.ReportDataTypeId) AS ReportDataTypeId, \r\n\t\t\t\t@IsProjection AS IsProjection,\r\n\t\t\t\t@IsBreakDownReport AS IsBreakDownReport,\r\n\t\t\t\tISNULL(a.BudgetDollar, 0)+ISNULL(b.tnc_budgetdollar, 0) AS BudgetDollar, \r\n\t\t\t\tISNULL(a.BudgetUsage, 0)+ISNULL(b.tnc_budgetusage, 0) AS BudgetUsage, \r\n\t\t\t\tCASE WHEN ISNULL(a.BudgetUsage, 0)+ISNULL(b.tnc_budgetusage, 0)<>0 THEN\r\n\t\t\t\t\t(ISNULL(a.BudgetDollar, 0)+ISNULL(b.tnc_budgetdollar, 0))/(ISNULL(a.BudgetUsage, 0)+ISNULL(b.tnc_budgetusage, 0))\r\n\t\t\t\tELSE 0 END AS BudgetRate,\r\n\t\t\t\tISNULL(a.BudgetDollar_YTD, 0) + ISNULL(b.tnc_budgetdollar_YTD, 0) AS BudgetDollar_YTD, \r\n\t\t\t\tISNULL(a.BudgetDollar_EOY, 0) + ISNULL(b.tnc_budgetdollar_EOY, 0) AS BudgetDollar_EOY,\r\n\t\t\t\tISNULL(a.BudgetDollar_FullYear, 0)+ISNULL(b.tnc_budgetdollar_FullYear, 0) AS BudgetDollar_FullYear\t\t\t\t\r\n\t\t\tFROM @OTHERBudget a\r\n\t\t\t\tFULL JOIN  (SELECT b1.AgencyCodeOEC, a1.ReportDataTypeId, \r\n\t\t\t\t\tIIF(@isActVsBgtReport5=1, 0, a1.BudgetDollar*b1.ChargePercentage) AS tnc_budgetdollar,\r\n\t\t\t\t\tIIF(@isActVsBgtReport5=1, 0, a1.BudgetUsage*b1.ChargePercentage) AS tnc_budgetusage,        \r\n\t\t\t\t\ta1.BudgetRate AS tnc_budgetrate,\r\n\t\t\t\t\tIIF(@isActVsBgtReport5=1, 0, a1.BudgetDollar_YTD*b1.ChargePercentage) AS tnc_budgetdollar_YTD,    \r\n\t\t\t\t\tIIF(@isActVsBgtReport5=1, 0, a1.BudgetDollar_EOY*b1.ChargePercentage) AS tnc_budgetdollar_EOY,    \r\n\t\t\t\t\tIIF(@isActVsBgtReport5=1, 0, (a1.BudgetDollar_YTD + a1.BudgetDollar_EOY)*b1.ChargePercentage) AS tnc_budgetdollar_FullYear\r\n\t\t\t\tFROM @DCASBudget a1, @TNCDetails b1) b ON a.AgencyCodeOEC = b.AgencyCodeOEC AND a.ReportDataTypeId = b.ReportDataTypeId;\r\n\t\tEND;\r\n\t\tELSE IF @endBillingPeriod <= @actualDataEndMonth AND @IsBreakDownReport=0 AND @startBillingPeriod=@endBillingPeriod\r\n\t\t--Only need full year budget (For Actual vs Budget Report #5) added on 05/21/2018\r\n\t\tBEGIN\r\n\t\t\tINSERT INTO @OTHERBudget (AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear)\r\n\t\t\tSELECT AgencyCodeOEC, ReportDataTypeId, BudgetDollar, BudgetUsage, BudgetRate, BudgetDollar_YTD, BudgetDollar_EOY, BudgetDollar_FullYear \r\n\t\t\tFROM dbo.UDF_ActualVsBudget_GetBudget (@endBillingPeriod, @endBillingPeriod, @agencyCodeOECs, @IsProjection, DEFAULT, DEFAULT, DEFAULT);\r\n\r\n\t\t\tINSERT INTO @tempBudgetData\r\n\t\t\tSELECT ISNULL(a.AgencyCodeOEC, b.AgencyCodeOEC) AS AgencyCodeOEC, \r\n\t\t\t\t@endBillingPeriod AS StartBillingPeriod,\r\n\t\t\t\t@endBillingPeriod AS EndBillingPeriod,\r\n\t\t\t\ta.ReportDataTypeId AS ReportDataTypeId, \r\n\t\t\t\t@IsProjection AS IsProjection,\r\n\t\t\t\t@IsBreakDownReport AS IsBreakDownReport,\r\n\t\t\t\t0 AS BudgetDollar, \r\n\t\t\t\t0 AS BudgetUsage, \r\n\t\t\t\t0 AS BudgetRate,\r\n\t\t\t\t0 AS BudgetDollar_YTD,    \r\n\t\t\t\tCASE WHEN RIGHT(@endBillingPeriod, 2) = '06' THEN 0 ELSE ISNULL(b.BudgetDollar_EOY, 0) END AS BudgetDollar_EOY,    \r\n\t\t\t\tISNULL(b.BudgetDollar_FullYear, 0) AS BudgetDollar_FullYear\r\n\t\t\tFROM \r\n\t\t\t(SELECT MIN(ReportDataTypeId) AS ReportDataTypeId, AgencyCodeOEC FROM @OTHERBudget GROUP BY AgencyCodeOEC) a LEFT JOIN \r\n\t\t\t(\r\n\t\t\t\tSELECT AgencyCodeOEC, SUM(TotalDollars) AS BudgetDollar_FullYear,\r\n\t\t\t\tSUM(CASE WHEN BudgetBillingPeriod>@endBillingPeriod THEN TotalDollars ELSE 0 END) AS BudgetDollar_EOY\r\n\t\t\t\tFROM budget.vwTotalBudget\r\n\t\t\t\tWHERE ScenarioId=@currentBudgetScenarioId \r\n\t\t\t\tGROUP BY AgencyCodeOEC\r\n\t\t\t) b ON a.AgencyCodeOEC=b.AgencyCodeOEC;\r\n\r\n\t\tEND; --need budget data end\r\n\r\n\t\tSELECT AgencyCodeOEC,\r\n\t\t\tStartBillingPeriod,\r\n\t\t\tEndBillingPeriod,\r\n\t\t\tReportDataTypeId, \r\n\t\t\tIsProjection,\r\n\t\t\tIsBreakDownReport,\r\n\t\t\tBudgetDollar, \r\n\t\t\tBudgetUsage, \r\n\t\t\tBudgetRate,\r\n\t\t\tBudgetDollar_YTD,    \r\n\t\t\tBudgetDollar_EOY,    \r\n\t\t\tBudgetDollar_FullYear,\r\n\t\t\t0.00 AS ActualAdjustmentSurplus\r\n\t\tFROM @tempBudgetData\r\n\t\tUNION ALL\r\n\t\tSELECT AgencyCodeOEC,\r\n\t\t\tStartBillingPeriod,\r\n\t\t\tEndBillingPeriod,\r\n\t\t\tReportDataTypeId,\r\n\t\t\tIsProjection,\r\n\t\t\t@IsBreakDownReport AS IsBreakDownReport,\r\n\t\t\tCASE WHEN @endBillingPeriod <= @actualDataEndMonth AND @IsBreakDownReport=0 AND @startBillingPeriod=@endBillingPeriod THEN LastMonthActualDollar\r\n\t\t\t\t WHEN @endBillingPeriod > @actualDataEndMonth AND @IsBreakDownReport=0 AND @startBillingPeriod=@endBillingPeriod THEN 0\r\n\t\t\t     ELSE ActualDollar \r\n\t\t\tEND AS BudgetDollar,\r\n\t\t\tActualUsage AS BudgetUsage,\r\n\t\t\tActualRate AS BudgetRate,\r\n\t\t\tActualDollar AS BudgetDollar_YTD,\r\n\t\t\t0 AS BudgetDollar_EOY,\r\n\t\t\t0 AS BudgetDollar_FullYear,\r\n\t\t\tActualAdjustmentSurplus\r\n\t\tFROM @tempActualData;\r\n\tEND; --Mid Year Budget end\r\nEND;\r"
        }
      ]
    }
  ]
}