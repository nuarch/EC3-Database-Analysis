{
  "version": 1,
  "type": "doc",
  "content": [
    {
      "type": "bodiedExtension",
      "attrs": {
        "extensionType": "com.atlassian.confluence.macro.core",
        "extensionKey": "details",
        "parameters": {
          "macroParams": {
            "hidden": {
              "value": "true"
            }
          },
          "macroMetadata": {
            "schemaVersion": {
              "value": "1"
            },
            "title": "Page Properties"
          }
        }
      },
      "content": [
        {
          "type": "table",
          "attrs": {
            "isNumberColumnEnabled": false,
            "layout": "default"
          },
          "content": [
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Schema Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "report",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Stored Procedure Name",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "USP_ActualVsBudget_RetrieveActualData",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "content": [
                {
                  "type": "tableHeader",
                  "attrs": {
                    "colspan": 1,
                    "background": "#f4f5f7",
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "Complexity Level",
                          "type": "text",
                          "marks": [
                            {
                              "type": "strong"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "attrs": {
                    "colspan": 1,
                    "rowspan": 1
                  },
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "text": "High",
                          "type": "text"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "1. Overview"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The stored procedure "
        },
        {
          "type": "text",
          "text": "USP_ActualVsBudget_RetrieveActualData",
          "marks": [
            {
              "type": "code"
            }
          ]
        },
        {
          "type": "text",
          "text": " is designed to retrieve actual financial and usage data for a specified billing period, comparing it against budget projections. It processes data for different agencies, considering specific conditions such as whether the data is a projection or actual, and handles various agency codes differently. The procedure aggregates and calculates financial metrics like actual dollars, usage, rates, and adjustments, and outputs a comprehensive dataset for reporting purposes."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "2. Complexity Level: High"
        }
      ]
    },
    {
      "type": "paragraph",
      "content": [
        {
          "type": "text",
          "text": "The procedure is complex due to its extensive use of temporary tables, conditional logic, and multiple joins. It involves intricate data manipulation and aggregation, making it challenging to maintain and optimize. The use of user-defined table types and functions adds to the complexity."
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "3. Input Parameters"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@startBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The start of the billing period in 'YYYYMM' format."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@endBillingPeriod AS VARCHAR(6)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The end of the billing period in 'YYYYMM' format."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@agencyCodeOECStr AS VARCHAR(MAX)",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A comma-separated string of agency codes."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "@IsProjection AS BIT = 0",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": A flag indicating whether the data is a projection (1) or actual (0)."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "4. Business Logic and Workflow"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Fiscal Year Calculation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Determines the fiscal year based on the end billing period."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Tenant Charge ID Selection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Chooses the appropriate tenant charge ID based on whether the data is a projection or actual."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Agency Code Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Populates agency code lists based on input or defaults to all agencies for the fiscal year."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Retrieval and Aggregation",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ":"
                }
              ]
            },
            {
              "type": "bulletList",
              "content": [
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Retrieves actual data for specific agency codes using user-defined functions."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Handles special cases for specific agency codes ('856001', '856090') and adjusts data accordingly."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "content": [
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Aggregates data into temporary tables for DCAS, State Funds, and other agencies."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Final Data Selection",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Combines data from different sources, applying adjustments and calculating final metrics like actual dollars, usage, and rates."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "5. Performance Considerations"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Transaction Isolation Level",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Uses "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " to avoid locking, which can improve performance but may lead to dirty reads."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Temporary Tables",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Extensive use of temporary tables can impact memory usage and performance, especially with large datasets."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "User-Defined Functions",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The reliance on user-defined functions can introduce performance overhead, particularly if these functions are complex or not optimized."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Conditional Logic",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Multiple conditional branches can lead to complex execution paths, potentially affecting performance."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "6. Potential Issues or Risks"
        }
      ]
    },
    {
      "type": "bulletList",
      "content": [
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Data Integrity",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": Using "
                },
                {
                  "type": "text",
                  "text": "READ UNCOMMITTED",
                  "marks": [
                    {
                      "type": "code"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": " can result in reading uncommitted or dirty data, which may affect the accuracy of the results."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Scalability",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure's complexity and reliance on temporary tables may not scale well with large datasets or high concurrency."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Maintenance",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The complexity and interdependencies with user-defined functions and table types can make maintenance and debugging challenging."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Error Handling",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure lacks explicit error handling, which could lead to unhandled exceptions or incorrect results in case of failures."
                }
              ]
            }
          ]
        },
        {
          "type": "listItem",
          "content": [
            {
              "type": "paragraph",
              "content": [
                {
                  "type": "text",
                  "text": "Assumptions on Input",
                  "marks": [
                    {
                      "type": "strong"
                    }
                  ]
                },
                {
                  "type": "text",
                  "text": ": The procedure assumes valid and correctly formatted input parameters, which, if violated, could lead to unexpected behavior or errors."
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "heading",
      "attrs": {
        "level": 1
      },
      "content": [
        {
          "type": "text",
          "text": "7. Stored Procedure Definition"
        }
      ]
    },
    {
      "type": "codeBlock",
      "attrs": {
        "language": "sql"
      },
      "content": [
        {
          "type": "text",
          "text": "CREATE PROCEDURE [report].[USP_ActualVsBudget_RetrieveActualData]\n(\r\n\t@startBillingPeriod AS VARCHAR(6)\r\n\t,@endBillingPeriod AS VARCHAR(6)\r\n\t,@agencyCodeOECStr AS VARCHAR(MAX)\r\n\t,@IsProjection AS BIT = 0\r\n)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\tSET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;\r\n\r\n\tDECLARE @fy AS INT, @tenantChargeId AS INT, @agencyCodeOECs AS input.UDT_CODEList, @dcasAgencyCODE AS input.UDT_CODEList\r\n\t\t,@dcas856090AgencyCODE AS input.UDT_CODEList, @otherAgencyCodeOECs AS input.UDT_CODEList, @notImplTNCReportIDs AS input.UDT_IDList\r\n\t\t,@notShowUsageReportIDs AS input.UDT_IDList, @ShowNonNYPAEnergyUsage_CutOffDate AS VARCHAR(6)='202107';\r\n\r\n\tDECLARE @TNCDetails TABLE (AgencyCodeOEC VARCHAR(6), ChargePercentage decimal(10, 5));\r\n\r\n\tDECLARE @DCASActual TABLE(AgencyCodeOEC VARCHAR(6)\r\n\t\t,ReportDataTypeId INT\r\n\t\t,ActualDollar MONEY\r\n\t\t,ActualUsage DECIMAL(20, 2)\r\n\t\t,ActualRate MONEY\r\n\t\t,ActualAdjustmentSurplus MONEY\r\n\t\t,LastMonthActualDollar MONEY);\r\n\t\r\n\tDECLARE @StateFundsActual TABLE(AgencyCodeOEC VARCHAR(6)\r\n\t\t,ReportDataTypeId INT\r\n\t\t,ActualDollar MONEY\r\n\t\t,ActualUsage DECIMAL(20, 2)\r\n\t\t,ActualRate MONEY\r\n\t\t,ActualAdjustmentSurplus MONEY\r\n\t\t,LastMonthActualDollar MONEY);\r\n\r\n\tDECLARE @OTHERActual TABLE(AgencyCodeOEC VARCHAR(6)\r\n\t\t,ReportDataTypeId INT\r\n\t\t,ActualDollar MONEY\r\n\t\t,ActualUsage DECIMAL(20, 2)\r\n\t\t,ActualRate MONEY\r\n\t\t,ActualAdjustmentSurplus MONEY\r\n\t\t,LastMonthActualDollar MONEY);\r\n\r\n\tIF (CAST(RIGHT(@endBillingPeriod, 2) AS INT) < 7)\r\n\tBEGIN\r\n\t\tSET @fy = CAST(LEFT(@endBillingPeriod, 4) AS INT);\r\n\tEND;\r\n\tELSE\t\r\n\tBEGIN\r\n\t\tSET @fy = CAST(LEFT(@endBillingPeriod, 4) AS INT) + 1;\r\n\tEND;\r\n\r\n\tIF (@IsProjection = 1 AND EXISTS (SELECT * FROM budget.Scenario WHERE FY = @fy AND IsCurrentProjection = 1))\r\n\tBEGIN\r\n\t\tSELECT @tenantChargeId = ISNULL(MAX(TenantChargeID), 3)\r\n\t\tFROM budget.Scenario\r\n\t\tWHERE FY = @fy AND IsCurrentProjection = 1;\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tSELECT @tenantChargeId = ISNULL(MAX(TenantChargeID), 3)\r\n\t\tFROM budget.Scenario\r\n\t\tWHERE FY = @fy AND IsCurrentBudget = 1;\r\n\tEND;\r\n\r\n\tIF (@agencyCodeOECStr IS NULL OR @agencyCodeOECStr = '')\r\n\tBEGIN\r\n\t\tINSERT INTO @agencyCodeOECs (CODE)\r\n\t\tSELECT AgencyCodeOEC\r\n\t\tFROM Preload.Agency\r\n\t\tWHERE AgencyID IN (SELECT AgencyID FROM preload.AgencyByFY WHERE FY = @fy);\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tINSERT INTO @agencyCodeOECs (CODE) SELECT ID AS CODE  FROM [dbo].[UDF_SplitToTable] (@agencyCodeOECStr,',');\r\n\tEND;\r\n\r\n\tINSERT INTO @dcasAgencyCODE (CODE) VALUES ('856001');\r\n\tINSERT INTO @dcas856090AgencyCODE (CODE) VALUES ('856090');\r\n\tINSERT INTO @otherAgencyCodeOECs (CODE) SELECT CODE FROM @agencyCodeOECs WHERE CODE NOT IN ('856001', '856090');\r\n\tINSERT INTO @notImplTNCReportIDs (ID) SELECT ReportDataTypeId FROM report.ReportDataType WHERE TypeLevel3 LIKE 'Reactive P%';\r\n\r\n\tIF (@startBillingPeriod < @ShowNonNYPAEnergyUsage_CutOffDate)\r\n\tBEGIN\r\n\t\tINSERT INTO @notShowUsageReportIDs (ID) SELECT ReportDataTypeId FROM report.ReportDataType WHERE TypeLevel2 LIKE 'Non-NYPA E%';\r\n\tEND;\r\n\r\n\tINSERT INTO @TNCDetails (AgencyCodeOEC, ChargePercentage)\r\n\tSELECT AgencyCode, ChargePercentage\r\n\tFROM input.TenantChargeDetail\r\n\tWHERE TenantChargeID = @tenantChargeId AND AgencyCode IN (SELECT CODE FROM @agencyCodeOECs);\r\n\r\n\tINSERT INTO @DCASActual (AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, ActualAdjustmentSurplus, LastMonthActualDollar)\r\n\tSELECT AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, AdjustmentSurplus, LastMonthActualDollar \r\n\tFROM [dbo].[UDF_ActualVsBudget_GetActual] (@startBillingPeriod, @endBillingPeriod, @dcasAgencyCODE);\r\n\r\n\tIF EXISTS(SELECT * FROM @agencyCodeOECs WHERE CODE = '856090') AND (NOT EXISTS(SELECT * FROM @agencyCodeOECs WHERE CODE = '856001'))\r\n\tBEGIN\r\n\t\tINSERT INTO @OTHERActual (AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, ActualAdjustmentSurplus, LastMonthActualDollar)\t\t\r\n        SELECT AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, AdjustmentSurplus, LastMonthActualDollar\r\n        FROM dbo.UDF_ActualVsBudget_GetActual(@startBillingPeriod, @endBillingPeriod, @otherAgencyCodeOECs)\r\n        UNION\r\n        SELECT a.AgencyCodeOEC\r\n\t\t\t,a.ReportDataTypeId\r\n\t\t\t,ROUND(a.BudgetDollar, 0) AS ActualDollar\r\n\t\t\t,a.BudgetUsage AS ActualUsage\r\n\t\t\t,CASE WHEN a.BudgetUsage <> 0 THEN a.BudgetDollar / a.BudgetUsage ELSE 0 END AS ActualRate\r\n\t\t\t,0 AS ActualAdjustmentSurplus\r\n\t\t\t,ROUND(ISNULL(b.BudgetDollar, 0), 0) AS LastMonthActualDollar\r\n        FROM dbo.UDF_ActualVsBudget_GetBudget(@startBillingPeriod, @endBillingPeriod, @dcas856090AgencyCODE, @IsProjection, DEFAULT, DEFAULT, 1) a\r\n            LEFT JOIN dbo.UDF_ActualVsBudget_GetBudget(@endBillingPeriod, @endBillingPeriod, @dcas856090AgencyCODE, @IsProjection, DEFAULT, DEFAULT, 1) b\r\n\t\t\t\tON a.ReportDataTypeId = b.ReportDataTypeId;\r\n\tEND;\r\n\tELSE IF EXISTS(SELECT * FROM @agencyCodeOECs WHERE CODE = '856090') AND EXISTS(SELECT * FROM @agencyCodeOECs WHERE CODE = '856001')\r\n\tBEGIN\r\n\t\tINSERT INTO @StateFundsActual (AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, ActualAdjustmentSurplus, LastMonthActualDollar)\t\r\n        SELECT a.AgencyCodeOEC\r\n\t\t\t,a.ReportDataTypeId\r\n\t\t\t,ROUND(a.BudgetDollar, 0) AS ActualDollar\r\n\t\t\t,a.BudgetUsage AS ActualUsage\r\n\t\t\t,CASE WHEN a.BudgetUsage <> 0 THEN a.BudgetDollar / a.BudgetUsage ELSE 0 END AS ActualRate\r\n\t\t\t,0 AS ActualAdjustmentSurplus\r\n\t\t\t,ROUND(ISNULL(b.BudgetDollar, 0), 0) AS LastMonthActualDollar\r\n        FROM dbo.UDF_ActualVsBudget_GetBudget(@startBillingPeriod, @endBillingPeriod, @dcas856090AgencyCODE, @IsProjection, DEFAULT, DEFAULT, 1) a\r\n            LEFT JOIN [dbo].[UDF_ActualVsBudget_GetBudget](@endBillingPeriod, @endBillingPeriod, @dcas856090AgencyCODE, @IsProjection, DEFAULT, DEFAULT, 1) b\r\n\t\t\t\tON a.ReportDataTypeId = b.ReportDataTypeId;\r\n\r\n\t\tINSERT INTO @OTHERActual (AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, ActualAdjustmentSurplus, LastMonthActualDollar)\t\t\r\n        SELECT AgencyCodeOEC\r\n\t\t\t,ReportDataTypeId\r\n\t\t\t,ActualDollar\r\n\t\t\t,ActualUsage\r\n\t\t\t,ActualRate\r\n\t\t\t,AdjustmentSurplus\r\n\t\t\t,LastMonthActualDollar\r\n        FROM dbo.UDF_ActualVsBudget_GetActual(@startBillingPeriod, @endBillingPeriod, @otherAgencyCodeOECs)\r\n\t\tUNION\r\n\t\tSELECT * FROM @StateFundsActual\r\n\t\tUNION\r\n        SELECT a.AgencyCodeOEC\r\n\t\t\t,a.ReportDataTypeId\r\n\t\t\t,a.ActualDollar - ISNULL(b.ActualDollar, 0) AS ActualDollar\r\n\t\t\t,a.ActualUsage - ISNULL(b.ActualUsage, 0)  AS ActualUsage\r\n\t\t\t,CASE WHEN a.ActualUsage - ISNULL(b.ActualUsage, 0) <> 0\r\n\t\t\t\tTHEN (a.ActualDollar - ISNULL(b.ActualDollar, 0)) / (a.ActualUsage - ISNULL(b.ActualUsage, 0)) ELSE 0 END AS ActualRate\r\n\t\t\t,a.ActualAdjustmentSurplus\r\n\t\t\t,a.LastMonthActualDollar - ISNULL(b.LastMonthActualDollar, 0) AS LastMonthActualDollar\r\n\t\tFROM @DCASActual a LEFT JOIN @StateFundsActual b ON a.ReportDataTypeId = b.ReportDataTypeId;\r\n\tEND;\r\n\tELSE IF (NOT EXISTS(SELECT * FROM @agencyCodeOECs WHERE CODE = '856090')) AND EXISTS(SELECT * FROM @agencyCodeOECs WHERE CODE = '856001')\r\n\tBEGIN\r\n\t\tINSERT INTO @StateFundsActual (AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, ActualAdjustmentSurplus, LastMonthActualDollar)\t\r\n        SELECT a.AgencyCodeOEC\r\n\t\t\t,a.ReportDataTypeId\r\n\t\t\t,ROUND(a.BudgetDollar, 0) AS ActualDollar\r\n\t\t\t,a.BudgetUsage AS ActualUsage\r\n\t\t\t,CASE WHEN a.BudgetUsage <> 0 THEN a.BudgetDollar / a.BudgetUsage ELSE 0 END AS ActualRate\r\n\t\t\t,0 AS ActualAdjustmentSurplus\r\n\t\t\t,ROUND(ISNULL(b.BudgetDollar, 0), 0) AS LastMonthActualDollar\r\n        FROM dbo.UDF_ActualVsBudget_GetBudget(@startBillingPeriod, @endBillingPeriod, @dcas856090AgencyCODE, @IsProjection, DEFAULT, DEFAULT, 1) a\r\n            LEFT JOIN [dbo].[UDF_ActualVsBudget_GetBudget](@endBillingPeriod, @endBillingPeriod, @dcas856090AgencyCODE, @IsProjection, DEFAULT, DEFAULT, 1) b\r\n\t\t\t\tON a.ReportDataTypeId = b.ReportDataTypeId;\r\n\r\n\t\tINSERT INTO @OTHERActual (AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, ActualAdjustmentSurplus, LastMonthActualDollar)\t\t\r\n        SELECT AgencyCodeOEC\r\n\t\t\t,ReportDataTypeId\r\n\t\t\t,ActualDollar\r\n\t\t\t,ActualUsage\r\n\t\t\t,ActualRate\r\n\t\t\t,AdjustmentSurplus\r\n\t\t\t,LastMonthActualDollar\r\n        FROM dbo.UDF_ActualVsBudget_GetActual(@startBillingPeriod, @endBillingPeriod, @otherAgencyCodeOECs)\r\n\t\tUNION\r\n        SELECT a.AgencyCodeOEC\r\n\t\t\t,a.ReportDataTypeId\r\n\t\t\t,a.ActualDollar - ISNULL(b.ActualDollar, 0) AS ActualDollar\r\n\t\t\t,a.ActualUsage - ISNULL(b.ActualUsage, 0)  AS ActualUsage\r\n\t\t\t,CASE WHEN a.ActualUsage - ISNULL(b.ActualUsage, 0) <> 0\r\n\t\t\t\tTHEN (a.ActualDollar - ISNULL(b.ActualDollar, 0)) / (a.ActualUsage - ISNULL(b.ActualUsage, 0)) ELSE 0 END AS ActualRate\r\n\t\t\t,a.ActualAdjustmentSurplus\r\n\t\t\t,a.LastMonthActualDollar - ISNULL(b.LastMonthActualDollar, 0) AS LastMonthActualDollar\r\n\t\tFROM @DCASActual a LEFT JOIN @StateFundsActual b ON a.ReportDataTypeId=b.ReportDataTypeId;\r\n\tEND;\r\n\tELSE\r\n\tBEGIN\r\n\t\tINSERT INTO @OTHERActual (AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, ActualAdjustmentSurplus, LastMonthActualDollar)\r\n\t\tSELECT AgencyCodeOEC, ReportDataTypeId, ActualDollar, ActualUsage, ActualRate, AdjustmentSurplus, LastMonthActualDollar\r\n\t\tFROM [dbo].[UDF_ActualVsBudget_GetActual] (@startBillingPeriod, @endBillingPeriod, @agencyCodeOECs);\r\n\tEND;\r\n\r\n\tSELECT ISNULL(a.AgencyCodeOEC, b.AgencyCodeOEC) AS AgencyCodeOEC\r\n\t\t,@startBillingPeriod AS StartBillingPeriod\r\n\t\t,@endBillingPeriod AS EndBillingPeriod\r\n\t\t,ISNULL(a.ReportDataTypeId, b.ReportDataTypeId) AS ReportDataTypeId\r\n\t\t,@IsProjection AS IsProjection\r\n\t\t,ISNULL(a.ActualDollar, 0) + ISNULL(b.tnc_Actualdollar, 0) AS ActualDollar\r\n\t\t,CASE WHEN ISNULL(a.ReportDataTypeId, b.ReportDataTypeId) IN (SELECT ID FROM @notImplTNCReportIDs) THEN ISNULL(a.ActualUsage, 0)\r\n\t\t\tWHEN ISNULL(a.ReportDataTypeId, b.ReportDataTypeId) IN (SELECT ID FROM @notShowUsageReportIDs) THEN 0\r\n\t\t\tELSE ISNULL(a.ActualUsage, 0)+ISNULL(b.tnc_Actualusage, 0) END AS ActualUsage\r\n\t\t,CASE WHEN ISNULL(a.ReportDataTypeId, b.ReportDataTypeId) IN (SELECT ID FROM @notImplTNCReportIDs) THEN \r\n\t\t\tCASE WHEN ISNULL(a.ActualUsage, 0) <> 0 THEN (ISNULL(a.ActualDollar, 0)+ISNULL(b.tnc_Actualdollar, 0)) / ISNULL(a.ActualUsage, 0)\r\n\t\t\t\tELSE 0 END \r\n\t\t\tWHEN ISNULL(a.ReportDataTypeId, b.ReportDataTypeId) IN (SELECT ID FROM @notShowUsageReportIDs) THEN 0\r\n\t\t\tELSE\r\n\t\t\tCASE WHEN ISNULL(a.ActualUsage, 0) + ISNULL(b.tnc_Actualusage, 0) <> 0 THEN (ISNULL(a.ActualDollar, 0)\r\n\t\t\t\t\t+ ISNULL(a.ActualAdjustmentSurplus, 0) + ISNULL(b.tnc_Actualdollar, 0)) / (ISNULL(a.ActualUsage, 0) + ISNULL(b.tnc_Actualusage, 0))\r\n\t\t\t\tELSE 0 END \r\n\t\t\tEND AS ActualRate\r\n\t\t,ISNULL(a.ActualAdjustmentSurplus, 0) + ISNULL(b.tnc_ActualAdjustmentSurplus, 0) AS ActualAdjustmentSurplus\r\n\t\t,ISNULL(b.tnc_Actualdollar, 0) AS ActualTenantDollar\r\n\t\t,ISNULL(b.tnc_Actualusage, 0) AS ActualTenantUsage\r\n\t\t,ISNULL(a.LastMonthActualDollar, 0) + ISNULL(b.tnc_Actualdollar_LastMonth, 0) AS LastMonthActualDollar\r\n\tFROM @OTHERActual a\r\n\t\tFULL JOIN (SELECT b1.AgencyCodeOEC\r\n\t\t\t,a1.ReportDataTypeId\r\n\t\t\t,a1.ActualDollar*b1.ChargePercentage AS tnc_Actualdollar\r\n\t\t\t,a1.ActualUsage*b1.ChargePercentage AS tnc_Actualusage\r\n\t\t\t,a1.ActualRate AS tnc_Actualrate\r\n\t\t\t,CASE WHEN a1.ReportDataTypeId IN (SELECT ReportDataTypeId FROM report.ReportDataType WHERE CHARINDEX('adjust', TypeLevel3) > 0) \r\n\t\t\t\tTHEN a1.ActualAdjustmentSurplus* b1.ChargePercentage ELSE 0 END AS tnc_ActualAdjustmentSurplus\r\n\t\t\t,a1.LastMonthActualDollar * b1.ChargePercentage AS tnc_Actualdollar_LastMonth\r\n\t\tFROM @DCASActual a1, @TNCDetails b1\r\n\t\tWHERE a1.ReportDataTypeId NOT IN (SELECT ReportDataTypeId FROM report.ReportDataType WHERE TypeLevel1 IN ('Refund', 'Retroactive Chargeback')) \r\n\t) AS b ON a.AgencyCodeOEC = b.AgencyCodeOEC AND a.ReportDataTypeId = b.ReportDataTypeId;\r\nEND;\r"
        }
      ]
    }
  ]
}